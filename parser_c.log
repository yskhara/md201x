Project:               md201x
File:                  file:/home/yusaku/truestudio-workspace/md201x/Src/stm32f1xx_it.c
Language:              GNU C
Index Version:         201.0
Build Configuration:   Debug
Context:               file:/home/yusaku/truestudio-workspace/md201x/Src/stm32f1xx_it.c
   C, {}
Versions in Index:     1
   C: {}; 0 macros, 2 includes, 17 names;

Include Search Path (option -I):
   /home/yusaku/truestudio-workspace/md201x/Inc
   /home/yusaku/truestudio-workspace/md201x/Debug/Inc
   Inc
   /home/yusaku/truestudio-workspace/md201x/Drivers/STM32F1xx_HAL_Driver/Inc
   /home/yusaku/truestudio-workspace/md201x/Debug/Drivers/STM32F1xx_HAL_Driver/Inc
   Drivers/STM32F1xx_HAL_Driver/Inc
   /home/yusaku/truestudio-workspace/md201x/Drivers/STM32F1xx_HAL_Driver/Inc/Legacy
   /home/yusaku/truestudio-workspace/md201x/Debug/Drivers/STM32F1xx_HAL_Driver/Inc/Legacy
   Drivers/STM32F1xx_HAL_Driver/Inc/Legacy
   /home/yusaku/truestudio-workspace/md201x/Drivers/CMSIS/Device/ST/STM32F1xx/Include
   /home/yusaku/truestudio-workspace/md201x/Debug/Drivers/CMSIS/Device/ST/STM32F1xx/Include
   Drivers/CMSIS/Device/ST/STM32F1xx/Include
   /home/yusaku/truestudio-workspace/md201x/Drivers/CMSIS/Include
   /home/yusaku/truestudio-workspace/md201x/Debug/Drivers/CMSIS/Include
   Drivers/CMSIS/Include
   /home/yusaku/Atollic/TrueSTUDIO/ARMTools/lib/gcc/arm-atollic-eabi/6.3.1/include
   /home/yusaku/Atollic/TrueSTUDIO/ARMTools/lib/gcc/arm-atollic-eabi/6.3.1/include-fixed
   /home/yusaku/Atollic/TrueSTUDIO/ARMTools/arm-atollic-eabi/include

Macro definitions (option -D):
   STM32F103xB=
   USE_FULL_LL_DRIVER=
   USE_HAL_DRIVER=
   __ACCUM_EPSILON__=0x1P-15K
   __ACCUM_FBIT__=15
   __ACCUM_IBIT__=16
   __ACCUM_MAX__=0X7FFFFFFFP-15K
   __ACCUM_MIN__=(-0X1P15K-0X1P15K)
   __APCS_32__=1
   __ARMEL__=1
   __ARM_32BIT_STATE=1
   __ARM_ARCH=7
   __ARM_ARCH_7M__=1
   __ARM_ARCH_EXT_IDIV__=1
   __ARM_ARCH_ISA_THUMB=2
   __ARM_ARCH_PROFILE=77
   __ARM_ASM_SYNTAX_UNIFIED__=1
   __ARM_EABI__=1
   __ARM_FEATURE_CLZ=1
   __ARM_FEATURE_IDIV=1
   __ARM_FEATURE_LDREX=7
   __ARM_FEATURE_QBIT=1
   __ARM_FEATURE_SAT=1
   __ARM_FEATURE_UNALIGNED=1
   __ARM_PCS=1
   __ARM_SIZEOF_MINIMAL_ENUM=1
   __ARM_SIZEOF_WCHAR_T=4
   __arm__=1
   __ATOMIC_ACQUIRE=2
   __ATOMIC_ACQ_REL=4
   __ATOMIC_CONSUME=1
   __ATOMIC_RELAXED=0
   __ATOMIC_RELEASE=3
   __ATOMIC_SEQ_CST=5
   __BIGGEST_ALIGNMENT__=8
   __BYTE_ORDER__=__ORDER_LITTLE_ENDIAN__
   __CHAR16_TYPE__=short unsigned int
   __CHAR32_TYPE__=long unsigned int
   __CHAR_BIT__=8
   __CHAR_UNSIGNED__=1
   __DA_FBIT__=31
   __DA_IBIT__=32
   __DBL_DECIMAL_DIG__=17
   __DBL_DENORM_MIN__=((double)4.9406564584124654e-324L)
   __DBL_DIG__=15
   __DBL_EPSILON__=((double)2.2204460492503131e-16L)
   __DBL_HAS_DENORM__=1
   __DBL_HAS_INFINITY__=1
   __DBL_HAS_QUIET_NAN__=1
   __DBL_MANT_DIG__=53
   __DBL_MAX_10_EXP__=308
   __DBL_MAX_EXP__=1024
   __DBL_MAX__=((double)1.7976931348623157e+308L)
   __DBL_MIN_10_EXP__=(-307)
   __DBL_MIN_EXP__=(-1021)
   __DBL_MIN__=((double)2.2250738585072014e-308L)
   __DEC128_EPSILON__=1E-33DL
   __DEC128_MANT_DIG__=34
   __DEC128_MAX_EXP__=6145
   __DEC128_MAX__=9.999999999999999999999999999999999E6144DL
   __DEC128_MIN_EXP__=(-6142)
   __DEC128_MIN__=1E-6143DL
   __DEC128_SUBNORMAL_MIN__=0.000000000000000000000000000000001E-6143DL
   __DEC32_EPSILON__=1E-6DF
   __DEC32_MANT_DIG__=7
   __DEC32_MAX_EXP__=97
   __DEC32_MAX__=9.999999E96DF
   __DEC32_MIN_EXP__=(-94)
   __DEC32_MIN__=1E-95DF
   __DEC32_SUBNORMAL_MIN__=0.000001E-95DF
   __DEC64_EPSILON__=1E-15DD
   __DEC64_MANT_DIG__=16
   __DEC64_MAX_EXP__=385
   __DEC64_MAX__=9.999999999999999E384DD
   __DEC64_MIN_EXP__=(-382)
   __DEC64_MIN__=1E-383DD
   __DEC64_SUBNORMAL_MIN__=0.000000000000001E-383DD
   __DECIMAL_DIG__=17
   __DEC_EVAL_METHOD__=2
   __DQ_FBIT__=63
   __DQ_IBIT__=0
   __ELF__=1
   __FINITE_MATH_ONLY__=0
   __FLOAT_WORD_ORDER__=__ORDER_LITTLE_ENDIAN__
   __FLT_DECIMAL_DIG__=9
   __FLT_DENORM_MIN__=1.4012984643248171e-45F
   __FLT_DIG__=6
   __FLT_EPSILON__=1.1920928955078125e-7F
   __FLT_EVAL_METHOD__=0
   __FLT_HAS_DENORM__=1
   __FLT_HAS_INFINITY__=1
   __FLT_HAS_QUIET_NAN__=1
   __FLT_MANT_DIG__=24
   __FLT_MAX_10_EXP__=38
   __FLT_MAX_EXP__=128
   __FLT_MAX__=3.4028234663852886e+38F
   __FLT_MIN_10_EXP__=(-37)
   __FLT_MIN_EXP__=(-125)
   __FLT_MIN__=1.1754943508222875e-38F
   __FLT_RADIX__=2
   __FRACT_EPSILON__=0x1P-15R
   __FRACT_FBIT__=15
   __FRACT_IBIT__=0
   __FRACT_MAX__=0X7FFFP-15R
   __FRACT_MIN__=(-0.5R-0.5R)
   __GCC_ATOMIC_BOOL_LOCK_FREE=2
   __GCC_ATOMIC_CHAR16_T_LOCK_FREE=2
   __GCC_ATOMIC_CHAR32_T_LOCK_FREE=2
   __GCC_ATOMIC_CHAR_LOCK_FREE=2
   __GCC_ATOMIC_INT_LOCK_FREE=2
   __GCC_ATOMIC_LLONG_LOCK_FREE=1
   __GCC_ATOMIC_LONG_LOCK_FREE=2
   __GCC_ATOMIC_POINTER_LOCK_FREE=2
   __GCC_ATOMIC_SHORT_LOCK_FREE=2
   __GCC_ATOMIC_TEST_AND_SET_TRUEVAL=1
   __GCC_ATOMIC_WCHAR_T_LOCK_FREE=2
   __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1=1
   __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2=1
   __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4=1
   __GCC_IEC_559=0
   __GCC_IEC_559_COMPLEX=0
   __GNUC_MINOR__=3
   __GNUC_PATCHLEVEL__=1
   __GNUC_STDC_INLINE__=1
   __GNUC__=6
   __GXX_ABI_VERSION=1010
   __GXX_TYPEINFO_EQUALITY_INLINE=0
   __has_include(STR)=__has_include__(STR)
   __has_include_next(STR)=__has_include_next__(STR)
   __HA_FBIT__=7
   __HA_IBIT__=8
   __HQ_FBIT__=15
   __HQ_IBIT__=0
   __INT16_C(c)=c
   __INT16_MAX__=0x7fff
   __INT16_TYPE__=short int
   __INT32_C(c)=c ## L
   __INT32_MAX__=0x7fffffffL
   __INT32_TYPE__=long int
   __INT64_C(c)=c ## LL
   __INT64_MAX__=0x7fffffffffffffffLL
   __INT64_TYPE__=long long int
   __INT8_C(c)=c
   __INT8_MAX__=0x7f
   __INT8_TYPE__=signed char
   __INTMAX_C(c)=c ## LL
   __INTMAX_MAX__=0x7fffffffffffffffLL
   __INTMAX_TYPE__=long long int
   __INTPTR_MAX__=0x7fffffff
   __INTPTR_TYPE__=int
   __INT_FAST16_MAX__=0x7fffffff
   __INT_FAST16_TYPE__=int
   __INT_FAST32_MAX__=0x7fffffff
   __INT_FAST32_TYPE__=int
   __INT_FAST64_MAX__=0x7fffffffffffffffLL
   __INT_FAST64_TYPE__=long long int
   __INT_FAST8_MAX__=0x7fffffff
   __INT_FAST8_TYPE__=int
   __INT_LEAST16_MAX__=0x7fff
   __INT_LEAST16_TYPE__=short int
   __INT_LEAST32_MAX__=0x7fffffffL
   __INT_LEAST32_TYPE__=long int
   __INT_LEAST64_MAX__=0x7fffffffffffffffLL
   __INT_LEAST64_TYPE__=long long int
   __INT_LEAST8_MAX__=0x7f
   __INT_LEAST8_TYPE__=signed char
   __INT_MAX__=0x7fffffff
   __LACCUM_EPSILON__=0x1P-31LK
   __LACCUM_FBIT__=31
   __LACCUM_IBIT__=32
   __LACCUM_MAX__=0X7FFFFFFFFFFFFFFFP-31LK
   __LACCUM_MIN__=(-0X1P31LK-0X1P31LK)
   __LDBL_DENORM_MIN__=4.9406564584124654e-324L
   __LDBL_DIG__=15
   __LDBL_EPSILON__=2.2204460492503131e-16L
   __LDBL_HAS_DENORM__=1
   __LDBL_HAS_INFINITY__=1
   __LDBL_HAS_QUIET_NAN__=1
   __LDBL_MANT_DIG__=53
   __LDBL_MAX_10_EXP__=308
   __LDBL_MAX_EXP__=1024
   __LDBL_MAX__=1.7976931348623157e+308L
   __LDBL_MIN_10_EXP__=(-307)
   __LDBL_MIN_EXP__=(-1021)
   __LDBL_MIN__=2.2250738585072014e-308L
   __LFRACT_EPSILON__=0x1P-31LR
   __LFRACT_FBIT__=31
   __LFRACT_IBIT__=0
   __LFRACT_MAX__=0X7FFFFFFFP-31LR
   __LFRACT_MIN__=(-0.5LR-0.5LR)
   __LLACCUM_EPSILON__=0x1P-31LLK
   __LLACCUM_FBIT__=31
   __LLACCUM_IBIT__=32
   __LLACCUM_MAX__=0X7FFFFFFFFFFFFFFFP-31LLK
   __LLACCUM_MIN__=(-0X1P31LLK-0X1P31LLK)
   __LLFRACT_EPSILON__=0x1P-63LLR
   __LLFRACT_FBIT__=63
   __LLFRACT_IBIT__=0
   __LLFRACT_MAX__=0X7FFFFFFFFFFFFFFFP-63LLR
   __LLFRACT_MIN__=(-0.5LLR-0.5LLR)
   __LONG_LONG_MAX__=0x7fffffffffffffffLL
   __LONG_MAX__=0x7fffffffL
   __NO_INLINE__=1
   __ORDER_BIG_ENDIAN__=4321
   __ORDER_LITTLE_ENDIAN__=1234
   __ORDER_PDP_ENDIAN__=3412
   __packed="__attribute__((__packed__))"
   __PRAGMA_REDEFINE_EXTNAME=1
   __PTRDIFF_MAX__=0x7fffffff
   __PTRDIFF_TYPE__=int
   __QQ_FBIT__=7
   __QQ_IBIT__=0
   __REGISTER_PREFIX__=
   __SACCUM_EPSILON__=0x1P-7HK
   __SACCUM_FBIT__=7
   __SACCUM_IBIT__=8
   __SACCUM_MAX__=0X7FFFP-7HK
   __SACCUM_MIN__=(-0X1P7HK-0X1P7HK)
   __SA_FBIT__=15
   __SA_IBIT__=16
   __SCHAR_MAX__=0x7f
   __SFRACT_EPSILON__=0x1P-7HR
   __SFRACT_FBIT__=7
   __SFRACT_IBIT__=0
   __SFRACT_MAX__=0X7FP-7HR
   __SFRACT_MIN__=(-0.5HR-0.5HR)
   __SHRT_MAX__=0x7fff
   __SIG_ATOMIC_MAX__=0x7fffffff
   __SIG_ATOMIC_MIN__=(-__SIG_ATOMIC_MAX__ - 1)
   __SIG_ATOMIC_TYPE__=int
   __SIZEOF_DOUBLE__=8
   __SIZEOF_FLOAT__=4
   __SIZEOF_INT__=4
   __SIZEOF_LONG_DOUBLE__=8
   __SIZEOF_LONG_LONG__=8
   __SIZEOF_LONG__=4
   __SIZEOF_POINTER__=4
   __SIZEOF_PTRDIFF_T__=4
   __SIZEOF_SHORT__=2
   __SIZEOF_SIZE_T__=4
   __SIZEOF_WCHAR_T__=4
   __SIZEOF_WINT_T__=4
   __SIZE_MAX__=0xffffffffU
   __SIZE_TYPE__=unsigned int
   __SOFTFP__=1
   __SQ_FBIT__=31
   __SQ_IBIT__=0
   __STDC_HOSTED__=1
   __STDC_UTF_16__=1
   __STDC_UTF_32__=1
   __STDC_VERSION__=201112L
   __STDC__=1
   __TA_FBIT__=63
   __TA_IBIT__=64
   __thumb2__=1
   __THUMBEL__=1
   __THUMB_INTERWORK__=1
   __thumb__=1
   __TQ_FBIT__=127
   __TQ_IBIT__=0
   __UACCUM_EPSILON__=0x1P-16UK
   __UACCUM_FBIT__=16
   __UACCUM_IBIT__=16
   __UACCUM_MAX__=0XFFFFFFFFP-16UK
   __UACCUM_MIN__=0.0UK
   __UDA_FBIT__=32
   __UDA_IBIT__=32
   __UDQ_FBIT__=64
   __UDQ_IBIT__=0
   __UFRACT_EPSILON__=0x1P-16UR
   __UFRACT_FBIT__=16
   __UFRACT_IBIT__=0
   __UFRACT_MAX__=0XFFFFP-16UR
   __UFRACT_MIN__=0.0UR
   __UHA_FBIT__=8
   __UHA_IBIT__=8
   __UHQ_FBIT__=16
   __UHQ_IBIT__=0
   __UINT16_C(c)=c
   __UINT16_MAX__=0xffff
   __UINT16_TYPE__=short unsigned int
   __UINT32_C(c)=c ## UL
   __UINT32_MAX__=0xffffffffUL
   __UINT32_TYPE__=long unsigned int
   __UINT64_C(c)=c ## ULL
   __UINT64_MAX__=0xffffffffffffffffULL
   __UINT64_TYPE__=long long unsigned int
   __UINT8_C(c)=c
   __UINT8_MAX__=0xff
   __UINT8_TYPE__=unsigned char
   __UINTMAX_C(c)=c ## ULL
   __UINTMAX_MAX__=0xffffffffffffffffULL
   __UINTMAX_TYPE__=long long unsigned int
   __UINTPTR_MAX__=0xffffffffU
   __UINTPTR_TYPE__=unsigned int
   __UINT_FAST16_MAX__=0xffffffffU
   __UINT_FAST16_TYPE__=unsigned int
   __UINT_FAST32_MAX__=0xffffffffU
   __UINT_FAST32_TYPE__=unsigned int
   __UINT_FAST64_MAX__=0xffffffffffffffffULL
   __UINT_FAST64_TYPE__=long long unsigned int
   __UINT_FAST8_MAX__=0xffffffffU
   __UINT_FAST8_TYPE__=unsigned int
   __UINT_LEAST16_MAX__=0xffff
   __UINT_LEAST16_TYPE__=short unsigned int
   __UINT_LEAST32_MAX__=0xffffffffUL
   __UINT_LEAST32_TYPE__=long unsigned int
   __UINT_LEAST64_MAX__=0xffffffffffffffffULL
   __UINT_LEAST64_TYPE__=long long unsigned int
   __UINT_LEAST8_MAX__=0xff
   __UINT_LEAST8_TYPE__=unsigned char
   __ULACCUM_EPSILON__=0x1P-32ULK
   __ULACCUM_FBIT__=32
   __ULACCUM_IBIT__=32
   __ULACCUM_MAX__=0XFFFFFFFFFFFFFFFFP-32ULK
   __ULACCUM_MIN__=0.0ULK
   __ULFRACT_EPSILON__=0x1P-32ULR
   __ULFRACT_FBIT__=32
   __ULFRACT_IBIT__=0
   __ULFRACT_MAX__=0XFFFFFFFFP-32ULR
   __ULFRACT_MIN__=0.0ULR
   __ULLACCUM_EPSILON__=0x1P-32ULLK
   __ULLACCUM_FBIT__=32
   __ULLACCUM_IBIT__=32
   __ULLACCUM_MAX__=0XFFFFFFFFFFFFFFFFP-32ULLK
   __ULLACCUM_MIN__=0.0ULLK
   __ULLFRACT_EPSILON__=0x1P-64ULLR
   __ULLFRACT_FBIT__=64
   __ULLFRACT_IBIT__=0
   __ULLFRACT_MAX__=0XFFFFFFFFFFFFFFFFP-64ULLR
   __ULLFRACT_MIN__=0.0ULLR
   __UQQ_FBIT__=8
   __UQQ_IBIT__=0
   __USACCUM_EPSILON__=0x1P-8UHK
   __USACCUM_FBIT__=8
   __USACCUM_IBIT__=8
   __USACCUM_MAX__=0XFFFFP-8UHK
   __USACCUM_MIN__=0.0UHK
   __USA_FBIT__=16
   __USA_IBIT__=16
   __USER_LABEL_PREFIX__=
   __USES_INITFINI__=1
   __USFRACT_EPSILON__=0x1P-8UHR
   __USFRACT_FBIT__=8
   __USFRACT_IBIT__=0
   __USFRACT_MAX__=0XFFP-8UHR
   __USFRACT_MIN__=0.0UHR
   __USQ_FBIT__=32
   __USQ_IBIT__=0
   __UTA_FBIT__=64
   __UTA_IBIT__=64
   __UTQ_FBIT__=128
   __UTQ_IBIT__=0
   __VERSION__="6.3.1 20170215 (release) [ARM/embedded-6-branch revision 245512]"
   __VFP_FP__=1
   __WCHAR_MAX__=0xffffffffU
   __WCHAR_MIN__=0U
   __WCHAR_TYPE__=unsigned int
   __weak="__attribute__((weak))"
   __WINT_MAX__=0xffffffffU
   __WINT_MIN__=0U
   __WINT_TYPE__=unsigned int

Macro definitions (from language + headers in index):
   ADC12_COMMON=((ADC_Common_TypeDef *)ADC1_BASE)
   ADC1=((ADC_TypeDef *)ADC1_BASE)
   ADC1_BASE=(APB2PERIPH_BASE + 0x00002400U)
   ADC1_IRQHandler=ADC1_2_IRQHandler
   ADC1_IRQn=ADC1_2_IRQn
   ADC2=((ADC_TypeDef *)ADC2_BASE)
   ADC2_BASE=(APB2PERIPH_BASE + 0x00002800U)
   ADC_CR1_AWDCH=ADC_CR1_AWDCH_Msk
   ADC_CR1_AWDCH_0=(0x01U << ADC_CR1_AWDCH_Pos)
   ADC_CR1_AWDCH_1=(0x02U << ADC_CR1_AWDCH_Pos)
   ADC_CR1_AWDCH_2=(0x04U << ADC_CR1_AWDCH_Pos)
   ADC_CR1_AWDCH_3=(0x08U << ADC_CR1_AWDCH_Pos)
   ADC_CR1_AWDCH_4=(0x10U << ADC_CR1_AWDCH_Pos)
   ADC_CR1_AWDCH_Msk=(0x1FU << ADC_CR1_AWDCH_Pos)
   ADC_CR1_AWDCH_Pos=(0U)
   ADC_CR1_AWDEN=ADC_CR1_AWDEN_Msk
   ADC_CR1_AWDEN_Msk=(0x1U << ADC_CR1_AWDEN_Pos)
   ADC_CR1_AWDEN_Pos=(23U)
   ADC_CR1_AWDIE=ADC_CR1_AWDIE_Msk
   ADC_CR1_AWDIE_Msk=(0x1U << ADC_CR1_AWDIE_Pos)
   ADC_CR1_AWDIE_Pos=(6U)
   ADC_CR1_AWDSGL=ADC_CR1_AWDSGL_Msk
   ADC_CR1_AWDSGL_Msk=(0x1U << ADC_CR1_AWDSGL_Pos)
   ADC_CR1_AWDSGL_Pos=(9U)
   ADC_CR1_DISCEN=ADC_CR1_DISCEN_Msk
   ADC_CR1_DISCEN_Msk=(0x1U << ADC_CR1_DISCEN_Pos)
   ADC_CR1_DISCEN_Pos=(11U)
   ADC_CR1_DISCNUM=ADC_CR1_DISCNUM_Msk
   ADC_CR1_DISCNUM_0=(0x1U << ADC_CR1_DISCNUM_Pos)
   ADC_CR1_DISCNUM_1=(0x2U << ADC_CR1_DISCNUM_Pos)
   ADC_CR1_DISCNUM_2=(0x4U << ADC_CR1_DISCNUM_Pos)
   ADC_CR1_DISCNUM_Msk=(0x7U << ADC_CR1_DISCNUM_Pos)
   ADC_CR1_DISCNUM_Pos=(13U)
   ADC_CR1_DUALMOD=ADC_CR1_DUALMOD_Msk
   ADC_CR1_DUALMOD_0=(0x1U << ADC_CR1_DUALMOD_Pos)
   ADC_CR1_DUALMOD_1=(0x2U << ADC_CR1_DUALMOD_Pos)
   ADC_CR1_DUALMOD_2=(0x4U << ADC_CR1_DUALMOD_Pos)
   ADC_CR1_DUALMOD_3=(0x8U << ADC_CR1_DUALMOD_Pos)
   ADC_CR1_DUALMOD_Msk=(0xFU << ADC_CR1_DUALMOD_Pos)
   ADC_CR1_DUALMOD_Pos=(16U)
   ADC_CR1_EOCIE=(ADC_CR1_EOSIE)
   ADC_CR1_EOSIE=ADC_CR1_EOSIE_Msk
   ADC_CR1_EOSIE_Msk=(0x1U << ADC_CR1_EOSIE_Pos)
   ADC_CR1_EOSIE_Pos=(5U)
   ADC_CR1_JAUTO=ADC_CR1_JAUTO_Msk
   ADC_CR1_JAUTO_Msk=(0x1U << ADC_CR1_JAUTO_Pos)
   ADC_CR1_JAUTO_Pos=(10U)
   ADC_CR1_JAWDEN=ADC_CR1_JAWDEN_Msk
   ADC_CR1_JAWDEN_Msk=(0x1U << ADC_CR1_JAWDEN_Pos)
   ADC_CR1_JAWDEN_Pos=(22U)
   ADC_CR1_JDISCEN=ADC_CR1_JDISCEN_Msk
   ADC_CR1_JDISCEN_Msk=(0x1U << ADC_CR1_JDISCEN_Pos)
   ADC_CR1_JDISCEN_Pos=(12U)
   ADC_CR1_JEOCIE=(ADC_CR1_JEOSIE)
   ADC_CR1_JEOSIE=ADC_CR1_JEOSIE_Msk
   ADC_CR1_JEOSIE_Msk=(0x1U << ADC_CR1_JEOSIE_Pos)
   ADC_CR1_JEOSIE_Pos=(7U)
   ADC_CR1_SCAN=ADC_CR1_SCAN_Msk
   ADC_CR1_SCAN_Msk=(0x1U << ADC_CR1_SCAN_Pos)
   ADC_CR1_SCAN_Pos=(8U)
   ADC_CR2_ADON=ADC_CR2_ADON_Msk
   ADC_CR2_ADON_Msk=(0x1U << ADC_CR2_ADON_Pos)
   ADC_CR2_ADON_Pos=(0U)
   ADC_CR2_ALIGN=ADC_CR2_ALIGN_Msk
   ADC_CR2_ALIGN_Msk=(0x1U << ADC_CR2_ALIGN_Pos)
   ADC_CR2_ALIGN_Pos=(11U)
   ADC_CR2_CAL=ADC_CR2_CAL_Msk
   ADC_CR2_CAL_Msk=(0x1U << ADC_CR2_CAL_Pos)
   ADC_CR2_CAL_Pos=(2U)
   ADC_CR2_CONT=ADC_CR2_CONT_Msk
   ADC_CR2_CONT_Msk=(0x1U << ADC_CR2_CONT_Pos)
   ADC_CR2_CONT_Pos=(1U)
   ADC_CR2_DMA=ADC_CR2_DMA_Msk
   ADC_CR2_DMA_Msk=(0x1U << ADC_CR2_DMA_Pos)
   ADC_CR2_DMA_Pos=(8U)
   ADC_CR2_EXTSEL=ADC_CR2_EXTSEL_Msk
   ADC_CR2_EXTSEL_0=(0x1U << ADC_CR2_EXTSEL_Pos)
   ADC_CR2_EXTSEL_1=(0x2U << ADC_CR2_EXTSEL_Pos)
   ADC_CR2_EXTSEL_2=(0x4U << ADC_CR2_EXTSEL_Pos)
   ADC_CR2_EXTSEL_Msk=(0x7U << ADC_CR2_EXTSEL_Pos)
   ADC_CR2_EXTSEL_Pos=(17U)
   ADC_CR2_EXTTRIG=ADC_CR2_EXTTRIG_Msk
   ADC_CR2_EXTTRIG_Msk=(0x1U << ADC_CR2_EXTTRIG_Pos)
   ADC_CR2_EXTTRIG_Pos=(20U)
   ADC_CR2_JEXTSEL=ADC_CR2_JEXTSEL_Msk
   ADC_CR2_JEXTSEL_0=(0x1U << ADC_CR2_JEXTSEL_Pos)
   ADC_CR2_JEXTSEL_1=(0x2U << ADC_CR2_JEXTSEL_Pos)
   ADC_CR2_JEXTSEL_2=(0x4U << ADC_CR2_JEXTSEL_Pos)
   ADC_CR2_JEXTSEL_Msk=(0x7U << ADC_CR2_JEXTSEL_Pos)
   ADC_CR2_JEXTSEL_Pos=(12U)
   ADC_CR2_JEXTTRIG=ADC_CR2_JEXTTRIG_Msk
   ADC_CR2_JEXTTRIG_Msk=(0x1U << ADC_CR2_JEXTTRIG_Pos)
   ADC_CR2_JEXTTRIG_Pos=(15U)
   ADC_CR2_JSWSTART=ADC_CR2_JSWSTART_Msk
   ADC_CR2_JSWSTART_Msk=(0x1U << ADC_CR2_JSWSTART_Pos)
   ADC_CR2_JSWSTART_Pos=(21U)
   ADC_CR2_RSTCAL=ADC_CR2_RSTCAL_Msk
   ADC_CR2_RSTCAL_Msk=(0x1U << ADC_CR2_RSTCAL_Pos)
   ADC_CR2_RSTCAL_Pos=(3U)
   ADC_CR2_SWSTART=ADC_CR2_SWSTART_Msk
   ADC_CR2_SWSTART_Msk=(0x1U << ADC_CR2_SWSTART_Pos)
   ADC_CR2_SWSTART_Pos=(22U)
   ADC_CR2_TSVREFE=ADC_CR2_TSVREFE_Msk
   ADC_CR2_TSVREFE_Msk=(0x1U << ADC_CR2_TSVREFE_Pos)
   ADC_CR2_TSVREFE_Pos=(23U)
   ADC_DR_ADC2DATA=ADC_DR_ADC2DATA_Msk
   ADC_DR_ADC2DATA_Msk=(0xFFFFU << ADC_DR_ADC2DATA_Pos)
   ADC_DR_ADC2DATA_Pos=(16U)
   ADC_DR_DATA=ADC_DR_DATA_Msk
   ADC_DR_DATA_Msk=(0xFFFFU << ADC_DR_DATA_Pos)
   ADC_DR_DATA_Pos=(0U)
   ADC_HTR_HT=ADC_HTR_HT_Msk
   ADC_HTR_HT_Msk=(0xFFFU << ADC_HTR_HT_Pos)
   ADC_HTR_HT_Pos=(0U)
   ADC_JDR1_JDATA=ADC_JDR1_JDATA_Msk
   ADC_JDR1_JDATA_Msk=(0xFFFFU << ADC_JDR1_JDATA_Pos)
   ADC_JDR1_JDATA_Pos=(0U)
   ADC_JDR2_JDATA=ADC_JDR2_JDATA_Msk
   ADC_JDR2_JDATA_Msk=(0xFFFFU << ADC_JDR2_JDATA_Pos)
   ADC_JDR2_JDATA_Pos=(0U)
   ADC_JDR3_JDATA=ADC_JDR3_JDATA_Msk
   ADC_JDR3_JDATA_Msk=(0xFFFFU << ADC_JDR3_JDATA_Pos)
   ADC_JDR3_JDATA_Pos=(0U)
   ADC_JDR4_JDATA=ADC_JDR4_JDATA_Msk
   ADC_JDR4_JDATA_Msk=(0xFFFFU << ADC_JDR4_JDATA_Pos)
   ADC_JDR4_JDATA_Pos=(0U)
   ADC_JOFR1_JOFFSET1=ADC_JOFR1_JOFFSET1_Msk
   ADC_JOFR1_JOFFSET1_Msk=(0xFFFU << ADC_JOFR1_JOFFSET1_Pos)
   ADC_JOFR1_JOFFSET1_Pos=(0U)
   ADC_JOFR2_JOFFSET2=ADC_JOFR2_JOFFSET2_Msk
   ADC_JOFR2_JOFFSET2_Msk=(0xFFFU << ADC_JOFR2_JOFFSET2_Pos)
   ADC_JOFR2_JOFFSET2_Pos=(0U)
   ADC_JOFR3_JOFFSET3=ADC_JOFR3_JOFFSET3_Msk
   ADC_JOFR3_JOFFSET3_Msk=(0xFFFU << ADC_JOFR3_JOFFSET3_Pos)
   ADC_JOFR3_JOFFSET3_Pos=(0U)
   ADC_JOFR4_JOFFSET4=ADC_JOFR4_JOFFSET4_Msk
   ADC_JOFR4_JOFFSET4_Msk=(0xFFFU << ADC_JOFR4_JOFFSET4_Pos)
   ADC_JOFR4_JOFFSET4_Pos=(0U)
   ADC_JSQR_JL=ADC_JSQR_JL_Msk
   ADC_JSQR_JL_0=(0x1U << ADC_JSQR_JL_Pos)
   ADC_JSQR_JL_1=(0x2U << ADC_JSQR_JL_Pos)
   ADC_JSQR_JL_Msk=(0x3U << ADC_JSQR_JL_Pos)
   ADC_JSQR_JL_Pos=(20U)
   ADC_JSQR_JSQ1=ADC_JSQR_JSQ1_Msk
   ADC_JSQR_JSQ1_0=(0x01U << ADC_JSQR_JSQ1_Pos)
   ADC_JSQR_JSQ1_1=(0x02U << ADC_JSQR_JSQ1_Pos)
   ADC_JSQR_JSQ1_2=(0x04U << ADC_JSQR_JSQ1_Pos)
   ADC_JSQR_JSQ1_3=(0x08U << ADC_JSQR_JSQ1_Pos)
   ADC_JSQR_JSQ1_4=(0x10U << ADC_JSQR_JSQ1_Pos)
   ADC_JSQR_JSQ1_Msk=(0x1FU << ADC_JSQR_JSQ1_Pos)
   ADC_JSQR_JSQ1_Pos=(0U)
   ADC_JSQR_JSQ2=ADC_JSQR_JSQ2_Msk
   ADC_JSQR_JSQ2_0=(0x01U << ADC_JSQR_JSQ2_Pos)
   ADC_JSQR_JSQ2_1=(0x02U << ADC_JSQR_JSQ2_Pos)
   ADC_JSQR_JSQ2_2=(0x04U << ADC_JSQR_JSQ2_Pos)
   ADC_JSQR_JSQ2_3=(0x08U << ADC_JSQR_JSQ2_Pos)
   ADC_JSQR_JSQ2_4=(0x10U << ADC_JSQR_JSQ2_Pos)
   ADC_JSQR_JSQ2_Msk=(0x1FU << ADC_JSQR_JSQ2_Pos)
   ADC_JSQR_JSQ2_Pos=(5U)
   ADC_JSQR_JSQ3=ADC_JSQR_JSQ3_Msk
   ADC_JSQR_JSQ3_0=(0x01U << ADC_JSQR_JSQ3_Pos)
   ADC_JSQR_JSQ3_1=(0x02U << ADC_JSQR_JSQ3_Pos)
   ADC_JSQR_JSQ3_2=(0x04U << ADC_JSQR_JSQ3_Pos)
   ADC_JSQR_JSQ3_3=(0x08U << ADC_JSQR_JSQ3_Pos)
   ADC_JSQR_JSQ3_4=(0x10U << ADC_JSQR_JSQ3_Pos)
   ADC_JSQR_JSQ3_Msk=(0x1FU << ADC_JSQR_JSQ3_Pos)
   ADC_JSQR_JSQ3_Pos=(10U)
   ADC_JSQR_JSQ4=ADC_JSQR_JSQ4_Msk
   ADC_JSQR_JSQ4_0=(0x01U << ADC_JSQR_JSQ4_Pos)
   ADC_JSQR_JSQ4_1=(0x02U << ADC_JSQR_JSQ4_Pos)
   ADC_JSQR_JSQ4_2=(0x04U << ADC_JSQR_JSQ4_Pos)
   ADC_JSQR_JSQ4_3=(0x08U << ADC_JSQR_JSQ4_Pos)
   ADC_JSQR_JSQ4_4=(0x10U << ADC_JSQR_JSQ4_Pos)
   ADC_JSQR_JSQ4_Msk=(0x1FU << ADC_JSQR_JSQ4_Pos)
   ADC_JSQR_JSQ4_Pos=(15U)
   ADC_LTR_LT=ADC_LTR_LT_Msk
   ADC_LTR_LT_Msk=(0xFFFU << ADC_LTR_LT_Pos)
   ADC_LTR_LT_Pos=(0U)
   ADC_MULTIMODE_SUPPORT=
   ADC_SMPR1_SMP10=ADC_SMPR1_SMP10_Msk
   ADC_SMPR1_SMP10_0=(0x1U << ADC_SMPR1_SMP10_Pos)
   ADC_SMPR1_SMP10_1=(0x2U << ADC_SMPR1_SMP10_Pos)
   ADC_SMPR1_SMP10_2=(0x4U << ADC_SMPR1_SMP10_Pos)
   ADC_SMPR1_SMP10_Msk=(0x7U << ADC_SMPR1_SMP10_Pos)
   ADC_SMPR1_SMP10_Pos=(0U)
   ADC_SMPR1_SMP11=ADC_SMPR1_SMP11_Msk
   ADC_SMPR1_SMP11_0=(0x1U << ADC_SMPR1_SMP11_Pos)
   ADC_SMPR1_SMP11_1=(0x2U << ADC_SMPR1_SMP11_Pos)
   ADC_SMPR1_SMP11_2=(0x4U << ADC_SMPR1_SMP11_Pos)
   ADC_SMPR1_SMP11_Msk=(0x7U << ADC_SMPR1_SMP11_Pos)
   ADC_SMPR1_SMP11_Pos=(3U)
   ADC_SMPR1_SMP12=ADC_SMPR1_SMP12_Msk
   ADC_SMPR1_SMP12_0=(0x1U << ADC_SMPR1_SMP12_Pos)
   ADC_SMPR1_SMP12_1=(0x2U << ADC_SMPR1_SMP12_Pos)
   ADC_SMPR1_SMP12_2=(0x4U << ADC_SMPR1_SMP12_Pos)
   ADC_SMPR1_SMP12_Msk=(0x7U << ADC_SMPR1_SMP12_Pos)
   ADC_SMPR1_SMP12_Pos=(6U)
   ADC_SMPR1_SMP13=ADC_SMPR1_SMP13_Msk
   ADC_SMPR1_SMP13_0=(0x1U << ADC_SMPR1_SMP13_Pos)
   ADC_SMPR1_SMP13_1=(0x2U << ADC_SMPR1_SMP13_Pos)
   ADC_SMPR1_SMP13_2=(0x4U << ADC_SMPR1_SMP13_Pos)
   ADC_SMPR1_SMP13_Msk=(0x7U << ADC_SMPR1_SMP13_Pos)
   ADC_SMPR1_SMP13_Pos=(9U)
   ADC_SMPR1_SMP14=ADC_SMPR1_SMP14_Msk
   ADC_SMPR1_SMP14_0=(0x1U << ADC_SMPR1_SMP14_Pos)
   ADC_SMPR1_SMP14_1=(0x2U << ADC_SMPR1_SMP14_Pos)
   ADC_SMPR1_SMP14_2=(0x4U << ADC_SMPR1_SMP14_Pos)
   ADC_SMPR1_SMP14_Msk=(0x7U << ADC_SMPR1_SMP14_Pos)
   ADC_SMPR1_SMP14_Pos=(12U)
   ADC_SMPR1_SMP15=ADC_SMPR1_SMP15_Msk
   ADC_SMPR1_SMP15_0=(0x1U << ADC_SMPR1_SMP15_Pos)
   ADC_SMPR1_SMP15_1=(0x2U << ADC_SMPR1_SMP15_Pos)
   ADC_SMPR1_SMP15_2=(0x4U << ADC_SMPR1_SMP15_Pos)
   ADC_SMPR1_SMP15_Msk=(0x7U << ADC_SMPR1_SMP15_Pos)
   ADC_SMPR1_SMP15_Pos=(15U)
   ADC_SMPR1_SMP16=ADC_SMPR1_SMP16_Msk
   ADC_SMPR1_SMP16_0=(0x1U << ADC_SMPR1_SMP16_Pos)
   ADC_SMPR1_SMP16_1=(0x2U << ADC_SMPR1_SMP16_Pos)
   ADC_SMPR1_SMP16_2=(0x4U << ADC_SMPR1_SMP16_Pos)
   ADC_SMPR1_SMP16_Msk=(0x7U << ADC_SMPR1_SMP16_Pos)
   ADC_SMPR1_SMP16_Pos=(18U)
   ADC_SMPR1_SMP17=ADC_SMPR1_SMP17_Msk
   ADC_SMPR1_SMP17_0=(0x1U << ADC_SMPR1_SMP17_Pos)
   ADC_SMPR1_SMP17_1=(0x2U << ADC_SMPR1_SMP17_Pos)
   ADC_SMPR1_SMP17_2=(0x4U << ADC_SMPR1_SMP17_Pos)
   ADC_SMPR1_SMP17_Msk=(0x7U << ADC_SMPR1_SMP17_Pos)
   ADC_SMPR1_SMP17_Pos=(21U)
   ADC_SMPR2_SMP0=ADC_SMPR2_SMP0_Msk
   ADC_SMPR2_SMP0_0=(0x1U << ADC_SMPR2_SMP0_Pos)
   ADC_SMPR2_SMP0_1=(0x2U << ADC_SMPR2_SMP0_Pos)
   ADC_SMPR2_SMP0_2=(0x4U << ADC_SMPR2_SMP0_Pos)
   ADC_SMPR2_SMP0_Msk=(0x7U << ADC_SMPR2_SMP0_Pos)
   ADC_SMPR2_SMP0_Pos=(0U)
   ADC_SMPR2_SMP1=ADC_SMPR2_SMP1_Msk
   ADC_SMPR2_SMP1_0=(0x1U << ADC_SMPR2_SMP1_Pos)
   ADC_SMPR2_SMP1_1=(0x2U << ADC_SMPR2_SMP1_Pos)
   ADC_SMPR2_SMP1_2=(0x4U << ADC_SMPR2_SMP1_Pos)
   ADC_SMPR2_SMP1_Msk=(0x7U << ADC_SMPR2_SMP1_Pos)
   ADC_SMPR2_SMP1_Pos=(3U)
   ADC_SMPR2_SMP2=ADC_SMPR2_SMP2_Msk
   ADC_SMPR2_SMP2_0=(0x1U << ADC_SMPR2_SMP2_Pos)
   ADC_SMPR2_SMP2_1=(0x2U << ADC_SMPR2_SMP2_Pos)
   ADC_SMPR2_SMP2_2=(0x4U << ADC_SMPR2_SMP2_Pos)
   ADC_SMPR2_SMP2_Msk=(0x7U << ADC_SMPR2_SMP2_Pos)
   ADC_SMPR2_SMP2_Pos=(6U)
   ADC_SMPR2_SMP3=ADC_SMPR2_SMP3_Msk
   ADC_SMPR2_SMP3_0=(0x1U << ADC_SMPR2_SMP3_Pos)
   ADC_SMPR2_SMP3_1=(0x2U << ADC_SMPR2_SMP3_Pos)
   ADC_SMPR2_SMP3_2=(0x4U << ADC_SMPR2_SMP3_Pos)
   ADC_SMPR2_SMP3_Msk=(0x7U << ADC_SMPR2_SMP3_Pos)
   ADC_SMPR2_SMP3_Pos=(9U)
   ADC_SMPR2_SMP4=ADC_SMPR2_SMP4_Msk
   ADC_SMPR2_SMP4_0=(0x1U << ADC_SMPR2_SMP4_Pos)
   ADC_SMPR2_SMP4_1=(0x2U << ADC_SMPR2_SMP4_Pos)
   ADC_SMPR2_SMP4_2=(0x4U << ADC_SMPR2_SMP4_Pos)
   ADC_SMPR2_SMP4_Msk=(0x7U << ADC_SMPR2_SMP4_Pos)
   ADC_SMPR2_SMP4_Pos=(12U)
   ADC_SMPR2_SMP5=ADC_SMPR2_SMP5_Msk
   ADC_SMPR2_SMP5_0=(0x1U << ADC_SMPR2_SMP5_Pos)
   ADC_SMPR2_SMP5_1=(0x2U << ADC_SMPR2_SMP5_Pos)
   ADC_SMPR2_SMP5_2=(0x4U << ADC_SMPR2_SMP5_Pos)
   ADC_SMPR2_SMP5_Msk=(0x7U << ADC_SMPR2_SMP5_Pos)
   ADC_SMPR2_SMP5_Pos=(15U)
   ADC_SMPR2_SMP6=ADC_SMPR2_SMP6_Msk
   ADC_SMPR2_SMP6_0=(0x1U << ADC_SMPR2_SMP6_Pos)
   ADC_SMPR2_SMP6_1=(0x2U << ADC_SMPR2_SMP6_Pos)
   ADC_SMPR2_SMP6_2=(0x4U << ADC_SMPR2_SMP6_Pos)
   ADC_SMPR2_SMP6_Msk=(0x7U << ADC_SMPR2_SMP6_Pos)
   ADC_SMPR2_SMP6_Pos=(18U)
   ADC_SMPR2_SMP7=ADC_SMPR2_SMP7_Msk
   ADC_SMPR2_SMP7_0=(0x1U << ADC_SMPR2_SMP7_Pos)
   ADC_SMPR2_SMP7_1=(0x2U << ADC_SMPR2_SMP7_Pos)
   ADC_SMPR2_SMP7_2=(0x4U << ADC_SMPR2_SMP7_Pos)
   ADC_SMPR2_SMP7_Msk=(0x7U << ADC_SMPR2_SMP7_Pos)
   ADC_SMPR2_SMP7_Pos=(21U)
   ADC_SMPR2_SMP8=ADC_SMPR2_SMP8_Msk
   ADC_SMPR2_SMP8_0=(0x1U << ADC_SMPR2_SMP8_Pos)
   ADC_SMPR2_SMP8_1=(0x2U << ADC_SMPR2_SMP8_Pos)
   ADC_SMPR2_SMP8_2=(0x4U << ADC_SMPR2_SMP8_Pos)
   ADC_SMPR2_SMP8_Msk=(0x7U << ADC_SMPR2_SMP8_Pos)
   ADC_SMPR2_SMP8_Pos=(24U)
   ADC_SMPR2_SMP9=ADC_SMPR2_SMP9_Msk
   ADC_SMPR2_SMP9_0=(0x1U << ADC_SMPR2_SMP9_Pos)
   ADC_SMPR2_SMP9_1=(0x2U << ADC_SMPR2_SMP9_Pos)
   ADC_SMPR2_SMP9_2=(0x4U << ADC_SMPR2_SMP9_Pos)
   ADC_SMPR2_SMP9_Msk=(0x7U << ADC_SMPR2_SMP9_Pos)
   ADC_SMPR2_SMP9_Pos=(27U)
   ADC_SQR1_L=ADC_SQR1_L_Msk
   ADC_SQR1_L_0=(0x1U << ADC_SQR1_L_Pos)
   ADC_SQR1_L_1=(0x2U << ADC_SQR1_L_Pos)
   ADC_SQR1_L_2=(0x4U << ADC_SQR1_L_Pos)
   ADC_SQR1_L_3=(0x8U << ADC_SQR1_L_Pos)
   ADC_SQR1_L_Msk=(0xFU << ADC_SQR1_L_Pos)
   ADC_SQR1_L_Pos=(20U)
   ADC_SQR1_SQ13=ADC_SQR1_SQ13_Msk
   ADC_SQR1_SQ13_0=(0x01U << ADC_SQR1_SQ13_Pos)
   ADC_SQR1_SQ13_1=(0x02U << ADC_SQR1_SQ13_Pos)
   ADC_SQR1_SQ13_2=(0x04U << ADC_SQR1_SQ13_Pos)
   ADC_SQR1_SQ13_3=(0x08U << ADC_SQR1_SQ13_Pos)
   ADC_SQR1_SQ13_4=(0x10U << ADC_SQR1_SQ13_Pos)
   ADC_SQR1_SQ13_Msk=(0x1FU << ADC_SQR1_SQ13_Pos)
   ADC_SQR1_SQ13_Pos=(0U)
   ADC_SQR1_SQ14=ADC_SQR1_SQ14_Msk
   ADC_SQR1_SQ14_0=(0x01U << ADC_SQR1_SQ14_Pos)
   ADC_SQR1_SQ14_1=(0x02U << ADC_SQR1_SQ14_Pos)
   ADC_SQR1_SQ14_2=(0x04U << ADC_SQR1_SQ14_Pos)
   ADC_SQR1_SQ14_3=(0x08U << ADC_SQR1_SQ14_Pos)
   ADC_SQR1_SQ14_4=(0x10U << ADC_SQR1_SQ14_Pos)
   ADC_SQR1_SQ14_Msk=(0x1FU << ADC_SQR1_SQ14_Pos)
   ADC_SQR1_SQ14_Pos=(5U)
   ADC_SQR1_SQ15=ADC_SQR1_SQ15_Msk
   ADC_SQR1_SQ15_0=(0x01U << ADC_SQR1_SQ15_Pos)
   ADC_SQR1_SQ15_1=(0x02U << ADC_SQR1_SQ15_Pos)
   ADC_SQR1_SQ15_2=(0x04U << ADC_SQR1_SQ15_Pos)
   ADC_SQR1_SQ15_3=(0x08U << ADC_SQR1_SQ15_Pos)
   ADC_SQR1_SQ15_4=(0x10U << ADC_SQR1_SQ15_Pos)
   ADC_SQR1_SQ15_Msk=(0x1FU << ADC_SQR1_SQ15_Pos)
   ADC_SQR1_SQ15_Pos=(10U)
   ADC_SQR1_SQ16=ADC_SQR1_SQ16_Msk
   ADC_SQR1_SQ16_0=(0x01U << ADC_SQR1_SQ16_Pos)
   ADC_SQR1_SQ16_1=(0x02U << ADC_SQR1_SQ16_Pos)
   ADC_SQR1_SQ16_2=(0x04U << ADC_SQR1_SQ16_Pos)
   ADC_SQR1_SQ16_3=(0x08U << ADC_SQR1_SQ16_Pos)
   ADC_SQR1_SQ16_4=(0x10U << ADC_SQR1_SQ16_Pos)
   ADC_SQR1_SQ16_Msk=(0x1FU << ADC_SQR1_SQ16_Pos)
   ADC_SQR1_SQ16_Pos=(15U)
   ADC_SQR2_SQ10=ADC_SQR2_SQ10_Msk
   ADC_SQR2_SQ10_0=(0x01U << ADC_SQR2_SQ10_Pos)
   ADC_SQR2_SQ10_1=(0x02U << ADC_SQR2_SQ10_Pos)
   ADC_SQR2_SQ10_2=(0x04U << ADC_SQR2_SQ10_Pos)
   ADC_SQR2_SQ10_3=(0x08U << ADC_SQR2_SQ10_Pos)
   ADC_SQR2_SQ10_4=(0x10U << ADC_SQR2_SQ10_Pos)
   ADC_SQR2_SQ10_Msk=(0x1FU << ADC_SQR2_SQ10_Pos)
   ADC_SQR2_SQ10_Pos=(15U)
   ADC_SQR2_SQ11=ADC_SQR2_SQ11_Msk
   ADC_SQR2_SQ11_0=(0x01U << ADC_SQR2_SQ11_Pos)
   ADC_SQR2_SQ11_1=(0x02U << ADC_SQR2_SQ11_Pos)
   ADC_SQR2_SQ11_2=(0x04U << ADC_SQR2_SQ11_Pos)
   ADC_SQR2_SQ11_3=(0x08U << ADC_SQR2_SQ11_Pos)
   ADC_SQR2_SQ11_4=(0x10U << ADC_SQR2_SQ11_Pos)
   ADC_SQR2_SQ11_Msk=(0x1FU << ADC_SQR2_SQ11_Pos)
   ADC_SQR2_SQ11_Pos=(20U)
   ADC_SQR2_SQ12=ADC_SQR2_SQ12_Msk
   ADC_SQR2_SQ12_0=(0x01U << ADC_SQR2_SQ12_Pos)
   ADC_SQR2_SQ12_1=(0x02U << ADC_SQR2_SQ12_Pos)
   ADC_SQR2_SQ12_2=(0x04U << ADC_SQR2_SQ12_Pos)
   ADC_SQR2_SQ12_3=(0x08U << ADC_SQR2_SQ12_Pos)
   ADC_SQR2_SQ12_4=(0x10U << ADC_SQR2_SQ12_Pos)
   ADC_SQR2_SQ12_Msk=(0x1FU << ADC_SQR2_SQ12_Pos)
   ADC_SQR2_SQ12_Pos=(25U)
   ADC_SQR2_SQ7=ADC_SQR2_SQ7_Msk
   ADC_SQR2_SQ7_0=(0x01U << ADC_SQR2_SQ7_Pos)
   ADC_SQR2_SQ7_1=(0x02U << ADC_SQR2_SQ7_Pos)
   ADC_SQR2_SQ7_2=(0x04U << ADC_SQR2_SQ7_Pos)
   ADC_SQR2_SQ7_3=(0x08U << ADC_SQR2_SQ7_Pos)
   ADC_SQR2_SQ7_4=(0x10U << ADC_SQR2_SQ7_Pos)
   ADC_SQR2_SQ7_Msk=(0x1FU << ADC_SQR2_SQ7_Pos)
   ADC_SQR2_SQ7_Pos=(0U)
   ADC_SQR2_SQ8=ADC_SQR2_SQ8_Msk
   ADC_SQR2_SQ8_0=(0x01U << ADC_SQR2_SQ8_Pos)
   ADC_SQR2_SQ8_1=(0x02U << ADC_SQR2_SQ8_Pos)
   ADC_SQR2_SQ8_2=(0x04U << ADC_SQR2_SQ8_Pos)
   ADC_SQR2_SQ8_3=(0x08U << ADC_SQR2_SQ8_Pos)
   ADC_SQR2_SQ8_4=(0x10U << ADC_SQR2_SQ8_Pos)
   ADC_SQR2_SQ8_Msk=(0x1FU << ADC_SQR2_SQ8_Pos)
   ADC_SQR2_SQ8_Pos=(5U)
   ADC_SQR2_SQ9=ADC_SQR2_SQ9_Msk
   ADC_SQR2_SQ9_0=(0x01U << ADC_SQR2_SQ9_Pos)
   ADC_SQR2_SQ9_1=(0x02U << ADC_SQR2_SQ9_Pos)
   ADC_SQR2_SQ9_2=(0x04U << ADC_SQR2_SQ9_Pos)
   ADC_SQR2_SQ9_3=(0x08U << ADC_SQR2_SQ9_Pos)
   ADC_SQR2_SQ9_4=(0x10U << ADC_SQR2_SQ9_Pos)
   ADC_SQR2_SQ9_Msk=(0x1FU << ADC_SQR2_SQ9_Pos)
   ADC_SQR2_SQ9_Pos=(10U)
   ADC_SQR3_SQ1=ADC_SQR3_SQ1_Msk
   ADC_SQR3_SQ1_0=(0x01U << ADC_SQR3_SQ1_Pos)
   ADC_SQR3_SQ1_1=(0x02U << ADC_SQR3_SQ1_Pos)
   ADC_SQR3_SQ1_2=(0x04U << ADC_SQR3_SQ1_Pos)
   ADC_SQR3_SQ1_3=(0x08U << ADC_SQR3_SQ1_Pos)
   ADC_SQR3_SQ1_4=(0x10U << ADC_SQR3_SQ1_Pos)
   ADC_SQR3_SQ1_Msk=(0x1FU << ADC_SQR3_SQ1_Pos)
   ADC_SQR3_SQ1_Pos=(0U)
   ADC_SQR3_SQ2=ADC_SQR3_SQ2_Msk
   ADC_SQR3_SQ2_0=(0x01U << ADC_SQR3_SQ2_Pos)
   ADC_SQR3_SQ2_1=(0x02U << ADC_SQR3_SQ2_Pos)
   ADC_SQR3_SQ2_2=(0x04U << ADC_SQR3_SQ2_Pos)
   ADC_SQR3_SQ2_3=(0x08U << ADC_SQR3_SQ2_Pos)
   ADC_SQR3_SQ2_4=(0x10U << ADC_SQR3_SQ2_Pos)
   ADC_SQR3_SQ2_Msk=(0x1FU << ADC_SQR3_SQ2_Pos)
   ADC_SQR3_SQ2_Pos=(5U)
   ADC_SQR3_SQ3=ADC_SQR3_SQ3_Msk
   ADC_SQR3_SQ3_0=(0x01U << ADC_SQR3_SQ3_Pos)
   ADC_SQR3_SQ3_1=(0x02U << ADC_SQR3_SQ3_Pos)
   ADC_SQR3_SQ3_2=(0x04U << ADC_SQR3_SQ3_Pos)
   ADC_SQR3_SQ3_3=(0x08U << ADC_SQR3_SQ3_Pos)
   ADC_SQR3_SQ3_4=(0x10U << ADC_SQR3_SQ3_Pos)
   ADC_SQR3_SQ3_Msk=(0x1FU << ADC_SQR3_SQ3_Pos)
   ADC_SQR3_SQ3_Pos=(10U)
   ADC_SQR3_SQ4=ADC_SQR3_SQ4_Msk
   ADC_SQR3_SQ4_0=(0x01U << ADC_SQR3_SQ4_Pos)
   ADC_SQR3_SQ4_1=(0x02U << ADC_SQR3_SQ4_Pos)
   ADC_SQR3_SQ4_2=(0x04U << ADC_SQR3_SQ4_Pos)
   ADC_SQR3_SQ4_3=(0x08U << ADC_SQR3_SQ4_Pos)
   ADC_SQR3_SQ4_4=(0x10U << ADC_SQR3_SQ4_Pos)
   ADC_SQR3_SQ4_Msk=(0x1FU << ADC_SQR3_SQ4_Pos)
   ADC_SQR3_SQ4_Pos=(15U)
   ADC_SQR3_SQ5=ADC_SQR3_SQ5_Msk
   ADC_SQR3_SQ5_0=(0x01U << ADC_SQR3_SQ5_Pos)
   ADC_SQR3_SQ5_1=(0x02U << ADC_SQR3_SQ5_Pos)
   ADC_SQR3_SQ5_2=(0x04U << ADC_SQR3_SQ5_Pos)
   ADC_SQR3_SQ5_3=(0x08U << ADC_SQR3_SQ5_Pos)
   ADC_SQR3_SQ5_4=(0x10U << ADC_SQR3_SQ5_Pos)
   ADC_SQR3_SQ5_Msk=(0x1FU << ADC_SQR3_SQ5_Pos)
   ADC_SQR3_SQ5_Pos=(20U)
   ADC_SQR3_SQ6=ADC_SQR3_SQ6_Msk
   ADC_SQR3_SQ6_0=(0x01U << ADC_SQR3_SQ6_Pos)
   ADC_SQR3_SQ6_1=(0x02U << ADC_SQR3_SQ6_Pos)
   ADC_SQR3_SQ6_2=(0x04U << ADC_SQR3_SQ6_Pos)
   ADC_SQR3_SQ6_3=(0x08U << ADC_SQR3_SQ6_Pos)
   ADC_SQR3_SQ6_4=(0x10U << ADC_SQR3_SQ6_Pos)
   ADC_SQR3_SQ6_Msk=(0x1FU << ADC_SQR3_SQ6_Pos)
   ADC_SQR3_SQ6_Pos=(25U)
   ADC_SR_AWD=ADC_SR_AWD_Msk
   ADC_SR_AWD_Msk=(0x1U << ADC_SR_AWD_Pos)
   ADC_SR_AWD_Pos=(0U)
   ADC_SR_EOC=(ADC_SR_EOS)
   ADC_SR_EOS=ADC_SR_EOS_Msk
   ADC_SR_EOS_Msk=(0x1U << ADC_SR_EOS_Pos)
   ADC_SR_EOS_Pos=(1U)
   ADC_SR_JEOC=(ADC_SR_JEOS)
   ADC_SR_JEOS=ADC_SR_JEOS_Msk
   ADC_SR_JEOS_Msk=(0x1U << ADC_SR_JEOS_Pos)
   ADC_SR_JEOS_Pos=(2U)
   ADC_SR_JSTRT=ADC_SR_JSTRT_Msk
   ADC_SR_JSTRT_Msk=(0x1U << ADC_SR_JSTRT_Pos)
   ADC_SR_JSTRT_Pos=(3U)
   ADC_SR_STRT=ADC_SR_STRT_Msk
   ADC_SR_STRT_Msk=(0x1U << ADC_SR_STRT_Pos)
   ADC_SR_STRT_Pos=(4U)
   AFIO=((AFIO_TypeDef *)AFIO_BASE)
   AFIO_BASE=(APB2PERIPH_BASE + 0x00000000U)
   AFIO_DBGAFR_CONFIG(DBGAFR_SWJCFG)=do{ uint32_t tmpreg = AFIO->MAPR; tmpreg &= ~AFIO_MAPR_SWJ_CFG_Msk; tmpreg |= DBGAFR_SWJCFG; AFIO->MAPR = tmpreg; }while(0U)
   AFIO_EVCR_EVOE=AFIO_EVCR_EVOE_Msk
   AFIO_EVCR_EVOE_Msk=(0x1U << AFIO_EVCR_EVOE_Pos)
   AFIO_EVCR_EVOE_Pos=(7U)
   AFIO_EVCR_PIN=AFIO_EVCR_PIN_Msk
   AFIO_EVCR_PIN_0=(0x1U << AFIO_EVCR_PIN_Pos)
   AFIO_EVCR_PIN_1=(0x2U << AFIO_EVCR_PIN_Pos)
   AFIO_EVCR_PIN_2=(0x4U << AFIO_EVCR_PIN_Pos)
   AFIO_EVCR_PIN_3=(0x8U << AFIO_EVCR_PIN_Pos)
   AFIO_EVCR_PIN_Msk=(0xFU << AFIO_EVCR_PIN_Pos)
   AFIO_EVCR_PIN_Pos=(0U)
   AFIO_EVCR_PIN_PX0=0x00000000U
   AFIO_EVCR_PIN_PX10=AFIO_EVCR_PIN_PX10_Msk
   AFIO_EVCR_PIN_PX10_Msk=(0x5U << AFIO_EVCR_PIN_PX10_Pos)
   AFIO_EVCR_PIN_PX10_Pos=(1U)
   AFIO_EVCR_PIN_PX11=AFIO_EVCR_PIN_PX11_Msk
   AFIO_EVCR_PIN_PX11_Msk=(0xBU << AFIO_EVCR_PIN_PX11_Pos)
   AFIO_EVCR_PIN_PX11_Pos=(0U)
   AFIO_EVCR_PIN_PX12=AFIO_EVCR_PIN_PX12_Msk
   AFIO_EVCR_PIN_PX12_Msk=(0x3U << AFIO_EVCR_PIN_PX12_Pos)
   AFIO_EVCR_PIN_PX12_Pos=(2U)
   AFIO_EVCR_PIN_PX13=AFIO_EVCR_PIN_PX13_Msk
   AFIO_EVCR_PIN_PX13_Msk=(0xDU << AFIO_EVCR_PIN_PX13_Pos)
   AFIO_EVCR_PIN_PX13_Pos=(0U)
   AFIO_EVCR_PIN_PX14=AFIO_EVCR_PIN_PX14_Msk
   AFIO_EVCR_PIN_PX14_Msk=(0x7U << AFIO_EVCR_PIN_PX14_Pos)
   AFIO_EVCR_PIN_PX14_Pos=(1U)
   AFIO_EVCR_PIN_PX15=AFIO_EVCR_PIN_PX15_Msk
   AFIO_EVCR_PIN_PX15_Msk=(0xFU << AFIO_EVCR_PIN_PX15_Pos)
   AFIO_EVCR_PIN_PX15_Pos=(0U)
   AFIO_EVCR_PIN_PX1=AFIO_EVCR_PIN_PX1_Msk
   AFIO_EVCR_PIN_PX1_Msk=(0x1U << AFIO_EVCR_PIN_PX1_Pos)
   AFIO_EVCR_PIN_PX1_Pos=(0U)
   AFIO_EVCR_PIN_PX2=AFIO_EVCR_PIN_PX2_Msk
   AFIO_EVCR_PIN_PX2_Msk=(0x1U << AFIO_EVCR_PIN_PX2_Pos)
   AFIO_EVCR_PIN_PX2_Pos=(1U)
   AFIO_EVCR_PIN_PX3=AFIO_EVCR_PIN_PX3_Msk
   AFIO_EVCR_PIN_PX3_Msk=(0x3U << AFIO_EVCR_PIN_PX3_Pos)
   AFIO_EVCR_PIN_PX3_Pos=(0U)
   AFIO_EVCR_PIN_PX4=AFIO_EVCR_PIN_PX4_Msk
   AFIO_EVCR_PIN_PX4_Msk=(0x1U << AFIO_EVCR_PIN_PX4_Pos)
   AFIO_EVCR_PIN_PX4_Pos=(2U)
   AFIO_EVCR_PIN_PX5=AFIO_EVCR_PIN_PX5_Msk
   AFIO_EVCR_PIN_PX5_Msk=(0x5U << AFIO_EVCR_PIN_PX5_Pos)
   AFIO_EVCR_PIN_PX5_Pos=(0U)
   AFIO_EVCR_PIN_PX6=AFIO_EVCR_PIN_PX6_Msk
   AFIO_EVCR_PIN_PX6_Msk=(0x3U << AFIO_EVCR_PIN_PX6_Pos)
   AFIO_EVCR_PIN_PX6_Pos=(1U)
   AFIO_EVCR_PIN_PX7=AFIO_EVCR_PIN_PX7_Msk
   AFIO_EVCR_PIN_PX7_Msk=(0x7U << AFIO_EVCR_PIN_PX7_Pos)
   AFIO_EVCR_PIN_PX7_Pos=(0U)
   AFIO_EVCR_PIN_PX8=AFIO_EVCR_PIN_PX8_Msk
   AFIO_EVCR_PIN_PX8_Msk=(0x1U << AFIO_EVCR_PIN_PX8_Pos)
   AFIO_EVCR_PIN_PX8_Pos=(3U)
   AFIO_EVCR_PIN_PX9=AFIO_EVCR_PIN_PX9_Msk
   AFIO_EVCR_PIN_PX9_Msk=(0x9U << AFIO_EVCR_PIN_PX9_Pos)
   AFIO_EVCR_PIN_PX9_Pos=(0U)
   AFIO_EVCR_PORT=AFIO_EVCR_PORT_Msk
   AFIO_EVCR_PORT_0=(0x1U << AFIO_EVCR_PORT_Pos)
   AFIO_EVCR_PORT_1=(0x2U << AFIO_EVCR_PORT_Pos)
   AFIO_EVCR_PORT_2=(0x4U << AFIO_EVCR_PORT_Pos)
   AFIO_EVCR_PORT_Msk=(0x7U << AFIO_EVCR_PORT_Pos)
   AFIO_EVCR_PORT_PA=0x00000000
   AFIO_EVCR_PORT_PB=AFIO_EVCR_PORT_PB_Msk
   AFIO_EVCR_PORT_PB_Msk=(0x1U << AFIO_EVCR_PORT_PB_Pos)
   AFIO_EVCR_PORT_PB_Pos=(4U)
   AFIO_EVCR_PORT_PC=AFIO_EVCR_PORT_PC_Msk
   AFIO_EVCR_PORT_PC_Msk=(0x1U << AFIO_EVCR_PORT_PC_Pos)
   AFIO_EVCR_PORT_PC_Pos=(5U)
   AFIO_EVCR_PORT_PD=AFIO_EVCR_PORT_PD_Msk
   AFIO_EVCR_PORT_PD_Msk=(0x3U << AFIO_EVCR_PORT_PD_Pos)
   AFIO_EVCR_PORT_PD_Pos=(4U)
   AFIO_EVCR_PORT_PE=AFIO_EVCR_PORT_PE_Msk
   AFIO_EVCR_PORT_PE_Msk=(0x1U << AFIO_EVCR_PORT_PE_Pos)
   AFIO_EVCR_PORT_PE_Pos=(6U)
   AFIO_EVCR_PORT_Pos=(4U)
   AFIO_EVENTOUT_PIN_0=AFIO_EVCR_PIN_PX0
   AFIO_EVENTOUT_PIN_10=AFIO_EVCR_PIN_PX10
   AFIO_EVENTOUT_PIN_11=AFIO_EVCR_PIN_PX11
   AFIO_EVENTOUT_PIN_12=AFIO_EVCR_PIN_PX12
   AFIO_EVENTOUT_PIN_13=AFIO_EVCR_PIN_PX13
   AFIO_EVENTOUT_PIN_14=AFIO_EVCR_PIN_PX14
   AFIO_EVENTOUT_PIN_15=AFIO_EVCR_PIN_PX15
   AFIO_EVENTOUT_PIN_1=AFIO_EVCR_PIN_PX1
   AFIO_EVENTOUT_PIN_2=AFIO_EVCR_PIN_PX2
   AFIO_EVENTOUT_PIN_3=AFIO_EVCR_PIN_PX3
   AFIO_EVENTOUT_PIN_4=AFIO_EVCR_PIN_PX4
   AFIO_EVENTOUT_PIN_5=AFIO_EVCR_PIN_PX5
   AFIO_EVENTOUT_PIN_6=AFIO_EVCR_PIN_PX6
   AFIO_EVENTOUT_PIN_7=AFIO_EVCR_PIN_PX7
   AFIO_EVENTOUT_PIN_8=AFIO_EVCR_PIN_PX8
   AFIO_EVENTOUT_PIN_9=AFIO_EVCR_PIN_PX9
   AFIO_EVENTOUT_PORT_A=AFIO_EVCR_PORT_PA
   AFIO_EVENTOUT_PORT_B=AFIO_EVCR_PORT_PB
   AFIO_EVENTOUT_PORT_C=AFIO_EVCR_PORT_PC
   AFIO_EVENTOUT_PORT_D=AFIO_EVCR_PORT_PD
   AFIO_EVENTOUT_PORT_E=AFIO_EVCR_PORT_PE
   AFIO_EXTICR1_EXTI0=AFIO_EXTICR1_EXTI0_Msk
   AFIO_EXTICR1_EXTI0_Msk=(0xFU << AFIO_EXTICR1_EXTI0_Pos)
   AFIO_EXTICR1_EXTI0_PA=0x00000000U
   AFIO_EXTICR1_EXTI0_PB=AFIO_EXTICR1_EXTI0_PB_Msk
   AFIO_EXTICR1_EXTI0_PB_Msk=(0x1U << AFIO_EXTICR1_EXTI0_PB_Pos)
   AFIO_EXTICR1_EXTI0_PB_Pos=(0U)
   AFIO_EXTICR1_EXTI0_PC=AFIO_EXTICR1_EXTI0_PC_Msk
   AFIO_EXTICR1_EXTI0_PC_Msk=(0x1U << AFIO_EXTICR1_EXTI0_PC_Pos)
   AFIO_EXTICR1_EXTI0_PC_Pos=(1U)
   AFIO_EXTICR1_EXTI0_PD=AFIO_EXTICR1_EXTI0_PD_Msk
   AFIO_EXTICR1_EXTI0_PD_Msk=(0x3U << AFIO_EXTICR1_EXTI0_PD_Pos)
   AFIO_EXTICR1_EXTI0_PD_Pos=(0U)
   AFIO_EXTICR1_EXTI0_PE=AFIO_EXTICR1_EXTI0_PE_Msk
   AFIO_EXTICR1_EXTI0_PE_Msk=(0x1U << AFIO_EXTICR1_EXTI0_PE_Pos)
   AFIO_EXTICR1_EXTI0_PE_Pos=(2U)
   AFIO_EXTICR1_EXTI0_PF=AFIO_EXTICR1_EXTI0_PF_Msk
   AFIO_EXTICR1_EXTI0_PF_Msk=(0x5U << AFIO_EXTICR1_EXTI0_PF_Pos)
   AFIO_EXTICR1_EXTI0_PF_Pos=(0U)
   AFIO_EXTICR1_EXTI0_PG=AFIO_EXTICR1_EXTI0_PG_Msk
   AFIO_EXTICR1_EXTI0_PG_Msk=(0x3U << AFIO_EXTICR1_EXTI0_PG_Pos)
   AFIO_EXTICR1_EXTI0_PG_Pos=(1U)
   AFIO_EXTICR1_EXTI0_Pos=(0U)
   AFIO_EXTICR1_EXTI1=AFIO_EXTICR1_EXTI1_Msk
   AFIO_EXTICR1_EXTI1_Msk=(0xFU << AFIO_EXTICR1_EXTI1_Pos)
   AFIO_EXTICR1_EXTI1_PA=0x00000000U
   AFIO_EXTICR1_EXTI1_PB=AFIO_EXTICR1_EXTI1_PB_Msk
   AFIO_EXTICR1_EXTI1_PB_Msk=(0x1U << AFIO_EXTICR1_EXTI1_PB_Pos)
   AFIO_EXTICR1_EXTI1_PB_Pos=(4U)
   AFIO_EXTICR1_EXTI1_PC=AFIO_EXTICR1_EXTI1_PC_Msk
   AFIO_EXTICR1_EXTI1_PC_Msk=(0x1U << AFIO_EXTICR1_EXTI1_PC_Pos)
   AFIO_EXTICR1_EXTI1_PC_Pos=(5U)
   AFIO_EXTICR1_EXTI1_PD=AFIO_EXTICR1_EXTI1_PD_Msk
   AFIO_EXTICR1_EXTI1_PD_Msk=(0x3U << AFIO_EXTICR1_EXTI1_PD_Pos)
   AFIO_EXTICR1_EXTI1_PD_Pos=(4U)
   AFIO_EXTICR1_EXTI1_PE=AFIO_EXTICR1_EXTI1_PE_Msk
   AFIO_EXTICR1_EXTI1_PE_Msk=(0x1U << AFIO_EXTICR1_EXTI1_PE_Pos)
   AFIO_EXTICR1_EXTI1_PE_Pos=(6U)
   AFIO_EXTICR1_EXTI1_PF=AFIO_EXTICR1_EXTI1_PF_Msk
   AFIO_EXTICR1_EXTI1_PF_Msk=(0x5U << AFIO_EXTICR1_EXTI1_PF_Pos)
   AFIO_EXTICR1_EXTI1_PF_Pos=(4U)
   AFIO_EXTICR1_EXTI1_PG=AFIO_EXTICR1_EXTI1_PG_Msk
   AFIO_EXTICR1_EXTI1_PG_Msk=(0x3U << AFIO_EXTICR1_EXTI1_PG_Pos)
   AFIO_EXTICR1_EXTI1_PG_Pos=(5U)
   AFIO_EXTICR1_EXTI1_Pos=(4U)
   AFIO_EXTICR1_EXTI2=AFIO_EXTICR1_EXTI2_Msk
   AFIO_EXTICR1_EXTI2_Msk=(0xFU << AFIO_EXTICR1_EXTI2_Pos)
   AFIO_EXTICR1_EXTI2_PA=0x00000000U
   AFIO_EXTICR1_EXTI2_PB=AFIO_EXTICR1_EXTI2_PB_Msk
   AFIO_EXTICR1_EXTI2_PB_Msk=(0x1U << AFIO_EXTICR1_EXTI2_PB_Pos)
   AFIO_EXTICR1_EXTI2_PB_Pos=(8U)
   AFIO_EXTICR1_EXTI2_PC=AFIO_EXTICR1_EXTI2_PC_Msk
   AFIO_EXTICR1_EXTI2_PC_Msk=(0x1U << AFIO_EXTICR1_EXTI2_PC_Pos)
   AFIO_EXTICR1_EXTI2_PC_Pos=(9U)
   AFIO_EXTICR1_EXTI2_PD=AFIO_EXTICR1_EXTI2_PD_Msk
   AFIO_EXTICR1_EXTI2_PD_Msk=(0x3U << AFIO_EXTICR1_EXTI2_PD_Pos)
   AFIO_EXTICR1_EXTI2_PD_Pos=(8U)
   AFIO_EXTICR1_EXTI2_PE=AFIO_EXTICR1_EXTI2_PE_Msk
   AFIO_EXTICR1_EXTI2_PE_Msk=(0x1U << AFIO_EXTICR1_EXTI2_PE_Pos)
   AFIO_EXTICR1_EXTI2_PE_Pos=(10U)
   AFIO_EXTICR1_EXTI2_PF=AFIO_EXTICR1_EXTI2_PF_Msk
   AFIO_EXTICR1_EXTI2_PF_Msk=(0x5U << AFIO_EXTICR1_EXTI2_PF_Pos)
   AFIO_EXTICR1_EXTI2_PF_Pos=(8U)
   AFIO_EXTICR1_EXTI2_PG=AFIO_EXTICR1_EXTI2_PG_Msk
   AFIO_EXTICR1_EXTI2_PG_Msk=(0x3U << AFIO_EXTICR1_EXTI2_PG_Pos)
   AFIO_EXTICR1_EXTI2_PG_Pos=(9U)
   AFIO_EXTICR1_EXTI2_Pos=(8U)
   AFIO_EXTICR1_EXTI3=AFIO_EXTICR1_EXTI3_Msk
   AFIO_EXTICR1_EXTI3_Msk=(0xFU << AFIO_EXTICR1_EXTI3_Pos)
   AFIO_EXTICR1_EXTI3_PA=0x00000000U
   AFIO_EXTICR1_EXTI3_PB=AFIO_EXTICR1_EXTI3_PB_Msk
   AFIO_EXTICR1_EXTI3_PB_Msk=(0x1U << AFIO_EXTICR1_EXTI3_PB_Pos)
   AFIO_EXTICR1_EXTI3_PB_Pos=(12U)
   AFIO_EXTICR1_EXTI3_PC=AFIO_EXTICR1_EXTI3_PC_Msk
   AFIO_EXTICR1_EXTI3_PC_Msk=(0x1U << AFIO_EXTICR1_EXTI3_PC_Pos)
   AFIO_EXTICR1_EXTI3_PC_Pos=(13U)
   AFIO_EXTICR1_EXTI3_PD=AFIO_EXTICR1_EXTI3_PD_Msk
   AFIO_EXTICR1_EXTI3_PD_Msk=(0x3U << AFIO_EXTICR1_EXTI3_PD_Pos)
   AFIO_EXTICR1_EXTI3_PD_Pos=(12U)
   AFIO_EXTICR1_EXTI3_PE=AFIO_EXTICR1_EXTI3_PE_Msk
   AFIO_EXTICR1_EXTI3_PE_Msk=(0x1U << AFIO_EXTICR1_EXTI3_PE_Pos)
   AFIO_EXTICR1_EXTI3_PE_Pos=(14U)
   AFIO_EXTICR1_EXTI3_PF=AFIO_EXTICR1_EXTI3_PF_Msk
   AFIO_EXTICR1_EXTI3_PF_Msk=(0x5U << AFIO_EXTICR1_EXTI3_PF_Pos)
   AFIO_EXTICR1_EXTI3_PF_Pos=(12U)
   AFIO_EXTICR1_EXTI3_PG=AFIO_EXTICR1_EXTI3_PG_Msk
   AFIO_EXTICR1_EXTI3_PG_Msk=(0x3U << AFIO_EXTICR1_EXTI3_PG_Pos)
   AFIO_EXTICR1_EXTI3_PG_Pos=(13U)
   AFIO_EXTICR1_EXTI3_Pos=(12U)
   AFIO_EXTICR2_EXTI4=AFIO_EXTICR2_EXTI4_Msk
   AFIO_EXTICR2_EXTI4_Msk=(0xFU << AFIO_EXTICR2_EXTI4_Pos)
   AFIO_EXTICR2_EXTI4_PA=0x00000000U
   AFIO_EXTICR2_EXTI4_PB=AFIO_EXTICR2_EXTI4_PB_Msk
   AFIO_EXTICR2_EXTI4_PB_Msk=(0x1U << AFIO_EXTICR2_EXTI4_PB_Pos)
   AFIO_EXTICR2_EXTI4_PB_Pos=(0U)
   AFIO_EXTICR2_EXTI4_PC=AFIO_EXTICR2_EXTI4_PC_Msk
   AFIO_EXTICR2_EXTI4_PC_Msk=(0x1U << AFIO_EXTICR2_EXTI4_PC_Pos)
   AFIO_EXTICR2_EXTI4_PC_Pos=(1U)
   AFIO_EXTICR2_EXTI4_PD=AFIO_EXTICR2_EXTI4_PD_Msk
   AFIO_EXTICR2_EXTI4_PD_Msk=(0x3U << AFIO_EXTICR2_EXTI4_PD_Pos)
   AFIO_EXTICR2_EXTI4_PD_Pos=(0U)
   AFIO_EXTICR2_EXTI4_PE=AFIO_EXTICR2_EXTI4_PE_Msk
   AFIO_EXTICR2_EXTI4_PE_Msk=(0x1U << AFIO_EXTICR2_EXTI4_PE_Pos)
   AFIO_EXTICR2_EXTI4_PE_Pos=(2U)
   AFIO_EXTICR2_EXTI4_PF=AFIO_EXTICR2_EXTI4_PF_Msk
   AFIO_EXTICR2_EXTI4_PF_Msk=(0x5U << AFIO_EXTICR2_EXTI4_PF_Pos)
   AFIO_EXTICR2_EXTI4_PF_Pos=(0U)
   AFIO_EXTICR2_EXTI4_PG=AFIO_EXTICR2_EXTI4_PG_Msk
   AFIO_EXTICR2_EXTI4_PG_Msk=(0x3U << AFIO_EXTICR2_EXTI4_PG_Pos)
   AFIO_EXTICR2_EXTI4_PG_Pos=(1U)
   AFIO_EXTICR2_EXTI4_Pos=(0U)
   AFIO_EXTICR2_EXTI5=AFIO_EXTICR2_EXTI5_Msk
   AFIO_EXTICR2_EXTI5_Msk=(0xFU << AFIO_EXTICR2_EXTI5_Pos)
   AFIO_EXTICR2_EXTI5_PA=0x00000000U
   AFIO_EXTICR2_EXTI5_PB=AFIO_EXTICR2_EXTI5_PB_Msk
   AFIO_EXTICR2_EXTI5_PB_Msk=(0x1U << AFIO_EXTICR2_EXTI5_PB_Pos)
   AFIO_EXTICR2_EXTI5_PB_Pos=(4U)
   AFIO_EXTICR2_EXTI5_PC=AFIO_EXTICR2_EXTI5_PC_Msk
   AFIO_EXTICR2_EXTI5_PC_Msk=(0x1U << AFIO_EXTICR2_EXTI5_PC_Pos)
   AFIO_EXTICR2_EXTI5_PC_Pos=(5U)
   AFIO_EXTICR2_EXTI5_PD=AFIO_EXTICR2_EXTI5_PD_Msk
   AFIO_EXTICR2_EXTI5_PD_Msk=(0x3U << AFIO_EXTICR2_EXTI5_PD_Pos)
   AFIO_EXTICR2_EXTI5_PD_Pos=(4U)
   AFIO_EXTICR2_EXTI5_PE=AFIO_EXTICR2_EXTI5_PE_Msk
   AFIO_EXTICR2_EXTI5_PE_Msk=(0x1U << AFIO_EXTICR2_EXTI5_PE_Pos)
   AFIO_EXTICR2_EXTI5_PE_Pos=(6U)
   AFIO_EXTICR2_EXTI5_PF=AFIO_EXTICR2_EXTI5_PF_Msk
   AFIO_EXTICR2_EXTI5_PF_Msk=(0x5U << AFIO_EXTICR2_EXTI5_PF_Pos)
   AFIO_EXTICR2_EXTI5_PF_Pos=(4U)
   AFIO_EXTICR2_EXTI5_PG=AFIO_EXTICR2_EXTI5_PG_Msk
   AFIO_EXTICR2_EXTI5_PG_Msk=(0x3U << AFIO_EXTICR2_EXTI5_PG_Pos)
   AFIO_EXTICR2_EXTI5_PG_Pos=(5U)
   AFIO_EXTICR2_EXTI5_Pos=(4U)
   AFIO_EXTICR2_EXTI6=AFIO_EXTICR2_EXTI6_Msk
   AFIO_EXTICR2_EXTI6_Msk=(0xFU << AFIO_EXTICR2_EXTI6_Pos)
   AFIO_EXTICR2_EXTI6_PA=0x00000000U
   AFIO_EXTICR2_EXTI6_PB=AFIO_EXTICR2_EXTI6_PB_Msk
   AFIO_EXTICR2_EXTI6_PB_Msk=(0x1U << AFIO_EXTICR2_EXTI6_PB_Pos)
   AFIO_EXTICR2_EXTI6_PB_Pos=(8U)
   AFIO_EXTICR2_EXTI6_PC=AFIO_EXTICR2_EXTI6_PC_Msk
   AFIO_EXTICR2_EXTI6_PC_Msk=(0x1U << AFIO_EXTICR2_EXTI6_PC_Pos)
   AFIO_EXTICR2_EXTI6_PC_Pos=(9U)
   AFIO_EXTICR2_EXTI6_PD=AFIO_EXTICR2_EXTI6_PD_Msk
   AFIO_EXTICR2_EXTI6_PD_Msk=(0x3U << AFIO_EXTICR2_EXTI6_PD_Pos)
   AFIO_EXTICR2_EXTI6_PD_Pos=(8U)
   AFIO_EXTICR2_EXTI6_PE=AFIO_EXTICR2_EXTI6_PE_Msk
   AFIO_EXTICR2_EXTI6_PE_Msk=(0x1U << AFIO_EXTICR2_EXTI6_PE_Pos)
   AFIO_EXTICR2_EXTI6_PE_Pos=(10U)
   AFIO_EXTICR2_EXTI6_PF=AFIO_EXTICR2_EXTI6_PF_Msk
   AFIO_EXTICR2_EXTI6_PF_Msk=(0x5U << AFIO_EXTICR2_EXTI6_PF_Pos)
   AFIO_EXTICR2_EXTI6_PF_Pos=(8U)
   AFIO_EXTICR2_EXTI6_PG=AFIO_EXTICR2_EXTI6_PG_Msk
   AFIO_EXTICR2_EXTI6_PG_Msk=(0x3U << AFIO_EXTICR2_EXTI6_PG_Pos)
   AFIO_EXTICR2_EXTI6_PG_Pos=(9U)
   AFIO_EXTICR2_EXTI6_Pos=(8U)
   AFIO_EXTICR2_EXTI7=AFIO_EXTICR2_EXTI7_Msk
   AFIO_EXTICR2_EXTI7_Msk=(0xFU << AFIO_EXTICR2_EXTI7_Pos)
   AFIO_EXTICR2_EXTI7_PA=0x00000000U
   AFIO_EXTICR2_EXTI7_PB=AFIO_EXTICR2_EXTI7_PB_Msk
   AFIO_EXTICR2_EXTI7_PB_Msk=(0x1U << AFIO_EXTICR2_EXTI7_PB_Pos)
   AFIO_EXTICR2_EXTI7_PB_Pos=(12U)
   AFIO_EXTICR2_EXTI7_PC=AFIO_EXTICR2_EXTI7_PC_Msk
   AFIO_EXTICR2_EXTI7_PC_Msk=(0x1U << AFIO_EXTICR2_EXTI7_PC_Pos)
   AFIO_EXTICR2_EXTI7_PC_Pos=(13U)
   AFIO_EXTICR2_EXTI7_PD=AFIO_EXTICR2_EXTI7_PD_Msk
   AFIO_EXTICR2_EXTI7_PD_Msk=(0x3U << AFIO_EXTICR2_EXTI7_PD_Pos)
   AFIO_EXTICR2_EXTI7_PD_Pos=(12U)
   AFIO_EXTICR2_EXTI7_PE=AFIO_EXTICR2_EXTI7_PE_Msk
   AFIO_EXTICR2_EXTI7_PE_Msk=(0x1U << AFIO_EXTICR2_EXTI7_PE_Pos)
   AFIO_EXTICR2_EXTI7_PE_Pos=(14U)
   AFIO_EXTICR2_EXTI7_PF=AFIO_EXTICR2_EXTI7_PF_Msk
   AFIO_EXTICR2_EXTI7_PF_Msk=(0x5U << AFIO_EXTICR2_EXTI7_PF_Pos)
   AFIO_EXTICR2_EXTI7_PF_Pos=(12U)
   AFIO_EXTICR2_EXTI7_PG=AFIO_EXTICR2_EXTI7_PG_Msk
   AFIO_EXTICR2_EXTI7_PG_Msk=(0x3U << AFIO_EXTICR2_EXTI7_PG_Pos)
   AFIO_EXTICR2_EXTI7_PG_Pos=(13U)
   AFIO_EXTICR2_EXTI7_Pos=(12U)
   AFIO_EXTICR3_EXTI10=AFIO_EXTICR3_EXTI10_Msk
   AFIO_EXTICR3_EXTI10_Msk=(0xFU << AFIO_EXTICR3_EXTI10_Pos)
   AFIO_EXTICR3_EXTI10_PA=0x00000000U
   AFIO_EXTICR3_EXTI10_PB=AFIO_EXTICR3_EXTI10_PB_Msk
   AFIO_EXTICR3_EXTI10_PB_Msk=(0x1U << AFIO_EXTICR3_EXTI10_PB_Pos)
   AFIO_EXTICR3_EXTI10_PB_Pos=(8U)
   AFIO_EXTICR3_EXTI10_PC=AFIO_EXTICR3_EXTI10_PC_Msk
   AFIO_EXTICR3_EXTI10_PC_Msk=(0x1U << AFIO_EXTICR3_EXTI10_PC_Pos)
   AFIO_EXTICR3_EXTI10_PC_Pos=(9U)
   AFIO_EXTICR3_EXTI10_PD=AFIO_EXTICR3_EXTI10_PD_Msk
   AFIO_EXTICR3_EXTI10_PD_Msk=(0x3U << AFIO_EXTICR3_EXTI10_PD_Pos)
   AFIO_EXTICR3_EXTI10_PD_Pos=(8U)
   AFIO_EXTICR3_EXTI10_PE=AFIO_EXTICR3_EXTI10_PE_Msk
   AFIO_EXTICR3_EXTI10_PE_Msk=(0x1U << AFIO_EXTICR3_EXTI10_PE_Pos)
   AFIO_EXTICR3_EXTI10_PE_Pos=(10U)
   AFIO_EXTICR3_EXTI10_PF=AFIO_EXTICR3_EXTI10_PF_Msk
   AFIO_EXTICR3_EXTI10_PF_Msk=(0x5U << AFIO_EXTICR3_EXTI10_PF_Pos)
   AFIO_EXTICR3_EXTI10_PF_Pos=(8U)
   AFIO_EXTICR3_EXTI10_PG=AFIO_EXTICR3_EXTI10_PG_Msk
   AFIO_EXTICR3_EXTI10_PG_Msk=(0x3U << AFIO_EXTICR3_EXTI10_PG_Pos)
   AFIO_EXTICR3_EXTI10_PG_Pos=(9U)
   AFIO_EXTICR3_EXTI10_Pos=(8U)
   AFIO_EXTICR3_EXTI11=AFIO_EXTICR3_EXTI11_Msk
   AFIO_EXTICR3_EXTI11_Msk=(0xFU << AFIO_EXTICR3_EXTI11_Pos)
   AFIO_EXTICR3_EXTI11_PA=0x00000000U
   AFIO_EXTICR3_EXTI11_PB=AFIO_EXTICR3_EXTI11_PB_Msk
   AFIO_EXTICR3_EXTI11_PB_Msk=(0x1U << AFIO_EXTICR3_EXTI11_PB_Pos)
   AFIO_EXTICR3_EXTI11_PB_Pos=(12U)
   AFIO_EXTICR3_EXTI11_PC=AFIO_EXTICR3_EXTI11_PC_Msk
   AFIO_EXTICR3_EXTI11_PC_Msk=(0x1U << AFIO_EXTICR3_EXTI11_PC_Pos)
   AFIO_EXTICR3_EXTI11_PC_Pos=(13U)
   AFIO_EXTICR3_EXTI11_PD=AFIO_EXTICR3_EXTI11_PD_Msk
   AFIO_EXTICR3_EXTI11_PD_Msk=(0x3U << AFIO_EXTICR3_EXTI11_PD_Pos)
   AFIO_EXTICR3_EXTI11_PD_Pos=(12U)
   AFIO_EXTICR3_EXTI11_PE=AFIO_EXTICR3_EXTI11_PE_Msk
   AFIO_EXTICR3_EXTI11_PE_Msk=(0x1U << AFIO_EXTICR3_EXTI11_PE_Pos)
   AFIO_EXTICR3_EXTI11_PE_Pos=(14U)
   AFIO_EXTICR3_EXTI11_PF=AFIO_EXTICR3_EXTI11_PF_Msk
   AFIO_EXTICR3_EXTI11_PF_Msk=(0x5U << AFIO_EXTICR3_EXTI11_PF_Pos)
   AFIO_EXTICR3_EXTI11_PF_Pos=(12U)
   AFIO_EXTICR3_EXTI11_PG=AFIO_EXTICR3_EXTI11_PG_Msk
   AFIO_EXTICR3_EXTI11_PG_Msk=(0x3U << AFIO_EXTICR3_EXTI11_PG_Pos)
   AFIO_EXTICR3_EXTI11_PG_Pos=(13U)
   AFIO_EXTICR3_EXTI11_Pos=(12U)
   AFIO_EXTICR3_EXTI8=AFIO_EXTICR3_EXTI8_Msk
   AFIO_EXTICR3_EXTI8_Msk=(0xFU << AFIO_EXTICR3_EXTI8_Pos)
   AFIO_EXTICR3_EXTI8_PA=0x00000000U
   AFIO_EXTICR3_EXTI8_PB=AFIO_EXTICR3_EXTI8_PB_Msk
   AFIO_EXTICR3_EXTI8_PB_Msk=(0x1U << AFIO_EXTICR3_EXTI8_PB_Pos)
   AFIO_EXTICR3_EXTI8_PB_Pos=(0U)
   AFIO_EXTICR3_EXTI8_PC=AFIO_EXTICR3_EXTI8_PC_Msk
   AFIO_EXTICR3_EXTI8_PC_Msk=(0x1U << AFIO_EXTICR3_EXTI8_PC_Pos)
   AFIO_EXTICR3_EXTI8_PC_Pos=(1U)
   AFIO_EXTICR3_EXTI8_PD=AFIO_EXTICR3_EXTI8_PD_Msk
   AFIO_EXTICR3_EXTI8_PD_Msk=(0x3U << AFIO_EXTICR3_EXTI8_PD_Pos)
   AFIO_EXTICR3_EXTI8_PD_Pos=(0U)
   AFIO_EXTICR3_EXTI8_PE=AFIO_EXTICR3_EXTI8_PE_Msk
   AFIO_EXTICR3_EXTI8_PE_Msk=(0x1U << AFIO_EXTICR3_EXTI8_PE_Pos)
   AFIO_EXTICR3_EXTI8_PE_Pos=(2U)
   AFIO_EXTICR3_EXTI8_PF=AFIO_EXTICR3_EXTI8_PF_Msk
   AFIO_EXTICR3_EXTI8_PF_Msk=(0x5U << AFIO_EXTICR3_EXTI8_PF_Pos)
   AFIO_EXTICR3_EXTI8_PF_Pos=(0U)
   AFIO_EXTICR3_EXTI8_PG=AFIO_EXTICR3_EXTI8_PG_Msk
   AFIO_EXTICR3_EXTI8_PG_Msk=(0x3U << AFIO_EXTICR3_EXTI8_PG_Pos)
   AFIO_EXTICR3_EXTI8_PG_Pos=(1U)
   AFIO_EXTICR3_EXTI8_Pos=(0U)
   AFIO_EXTICR3_EXTI9=AFIO_EXTICR3_EXTI9_Msk
   AFIO_EXTICR3_EXTI9_Msk=(0xFU << AFIO_EXTICR3_EXTI9_Pos)
   AFIO_EXTICR3_EXTI9_PA=0x00000000U
   AFIO_EXTICR3_EXTI9_PB=AFIO_EXTICR3_EXTI9_PB_Msk
   AFIO_EXTICR3_EXTI9_PB_Msk=(0x1U << AFIO_EXTICR3_EXTI9_PB_Pos)
   AFIO_EXTICR3_EXTI9_PB_Pos=(4U)
   AFIO_EXTICR3_EXTI9_PC=AFIO_EXTICR3_EXTI9_PC_Msk
   AFIO_EXTICR3_EXTI9_PC_Msk=(0x1U << AFIO_EXTICR3_EXTI9_PC_Pos)
   AFIO_EXTICR3_EXTI9_PC_Pos=(5U)
   AFIO_EXTICR3_EXTI9_PD=AFIO_EXTICR3_EXTI9_PD_Msk
   AFIO_EXTICR3_EXTI9_PD_Msk=(0x3U << AFIO_EXTICR3_EXTI9_PD_Pos)
   AFIO_EXTICR3_EXTI9_PD_Pos=(4U)
   AFIO_EXTICR3_EXTI9_PE=AFIO_EXTICR3_EXTI9_PE_Msk
   AFIO_EXTICR3_EXTI9_PE_Msk=(0x1U << AFIO_EXTICR3_EXTI9_PE_Pos)
   AFIO_EXTICR3_EXTI9_PE_Pos=(6U)
   AFIO_EXTICR3_EXTI9_PF=AFIO_EXTICR3_EXTI9_PF_Msk
   AFIO_EXTICR3_EXTI9_PF_Msk=(0x5U << AFIO_EXTICR3_EXTI9_PF_Pos)
   AFIO_EXTICR3_EXTI9_PF_Pos=(4U)
   AFIO_EXTICR3_EXTI9_PG=AFIO_EXTICR3_EXTI9_PG_Msk
   AFIO_EXTICR3_EXTI9_PG_Msk=(0x3U << AFIO_EXTICR3_EXTI9_PG_Pos)
   AFIO_EXTICR3_EXTI9_PG_Pos=(5U)
   AFIO_EXTICR3_EXTI9_Pos=(4U)
   AFIO_EXTICR4_EXTI12=AFIO_EXTICR4_EXTI12_Msk
   AFIO_EXTICR4_EXTI12_Msk=(0xFU << AFIO_EXTICR4_EXTI12_Pos)
   AFIO_EXTICR4_EXTI12_PA=0x00000000U
   AFIO_EXTICR4_EXTI12_PB=AFIO_EXTICR4_EXTI12_PB_Msk
   AFIO_EXTICR4_EXTI12_PB_Msk=(0x1U << AFIO_EXTICR4_EXTI12_PB_Pos)
   AFIO_EXTICR4_EXTI12_PB_Pos=(0U)
   AFIO_EXTICR4_EXTI12_PC=AFIO_EXTICR4_EXTI12_PC_Msk
   AFIO_EXTICR4_EXTI12_PC_Msk=(0x1U << AFIO_EXTICR4_EXTI12_PC_Pos)
   AFIO_EXTICR4_EXTI12_PC_Pos=(1U)
   AFIO_EXTICR4_EXTI12_PD=AFIO_EXTICR4_EXTI12_PD_Msk
   AFIO_EXTICR4_EXTI12_PD_Msk=(0x3U << AFIO_EXTICR4_EXTI12_PD_Pos)
   AFIO_EXTICR4_EXTI12_PD_Pos=(0U)
   AFIO_EXTICR4_EXTI12_PE=AFIO_EXTICR4_EXTI12_PE_Msk
   AFIO_EXTICR4_EXTI12_PE_Msk=(0x1U << AFIO_EXTICR4_EXTI12_PE_Pos)
   AFIO_EXTICR4_EXTI12_PE_Pos=(2U)
   AFIO_EXTICR4_EXTI12_PF=AFIO_EXTICR4_EXTI12_PF_Msk
   AFIO_EXTICR4_EXTI12_PF_Msk=(0x5U << AFIO_EXTICR4_EXTI12_PF_Pos)
   AFIO_EXTICR4_EXTI12_PF_Pos=(0U)
   AFIO_EXTICR4_EXTI12_PG=AFIO_EXTICR4_EXTI12_PG_Msk
   AFIO_EXTICR4_EXTI12_PG_Msk=(0x3U << AFIO_EXTICR4_EXTI12_PG_Pos)
   AFIO_EXTICR4_EXTI12_PG_Pos=(1U)
   AFIO_EXTICR4_EXTI12_Pos=(0U)
   AFIO_EXTICR4_EXTI13=AFIO_EXTICR4_EXTI13_Msk
   AFIO_EXTICR4_EXTI13_Msk=(0xFU << AFIO_EXTICR4_EXTI13_Pos)
   AFIO_EXTICR4_EXTI13_PA=0x00000000U
   AFIO_EXTICR4_EXTI13_PB=AFIO_EXTICR4_EXTI13_PB_Msk
   AFIO_EXTICR4_EXTI13_PB_Msk=(0x1U << AFIO_EXTICR4_EXTI13_PB_Pos)
   AFIO_EXTICR4_EXTI13_PB_Pos=(4U)
   AFIO_EXTICR4_EXTI13_PC=AFIO_EXTICR4_EXTI13_PC_Msk
   AFIO_EXTICR4_EXTI13_PC_Msk=(0x1U << AFIO_EXTICR4_EXTI13_PC_Pos)
   AFIO_EXTICR4_EXTI13_PC_Pos=(5U)
   AFIO_EXTICR4_EXTI13_PD=AFIO_EXTICR4_EXTI13_PD_Msk
   AFIO_EXTICR4_EXTI13_PD_Msk=(0x3U << AFIO_EXTICR4_EXTI13_PD_Pos)
   AFIO_EXTICR4_EXTI13_PD_Pos=(4U)
   AFIO_EXTICR4_EXTI13_PE=AFIO_EXTICR4_EXTI13_PE_Msk
   AFIO_EXTICR4_EXTI13_PE_Msk=(0x1U << AFIO_EXTICR4_EXTI13_PE_Pos)
   AFIO_EXTICR4_EXTI13_PE_Pos=(6U)
   AFIO_EXTICR4_EXTI13_PF=AFIO_EXTICR4_EXTI13_PF_Msk
   AFIO_EXTICR4_EXTI13_PF_Msk=(0x5U << AFIO_EXTICR4_EXTI13_PF_Pos)
   AFIO_EXTICR4_EXTI13_PF_Pos=(4U)
   AFIO_EXTICR4_EXTI13_PG=AFIO_EXTICR4_EXTI13_PG_Msk
   AFIO_EXTICR4_EXTI13_PG_Msk=(0x3U << AFIO_EXTICR4_EXTI13_PG_Pos)
   AFIO_EXTICR4_EXTI13_PG_Pos=(5U)
   AFIO_EXTICR4_EXTI13_Pos=(4U)
   AFIO_EXTICR4_EXTI14=AFIO_EXTICR4_EXTI14_Msk
   AFIO_EXTICR4_EXTI14_Msk=(0xFU << AFIO_EXTICR4_EXTI14_Pos)
   AFIO_EXTICR4_EXTI14_PA=0x00000000U
   AFIO_EXTICR4_EXTI14_PB=AFIO_EXTICR4_EXTI14_PB_Msk
   AFIO_EXTICR4_EXTI14_PB_Msk=(0x1U << AFIO_EXTICR4_EXTI14_PB_Pos)
   AFIO_EXTICR4_EXTI14_PB_Pos=(8U)
   AFIO_EXTICR4_EXTI14_PC=AFIO_EXTICR4_EXTI14_PC_Msk
   AFIO_EXTICR4_EXTI14_PC_Msk=(0x1U << AFIO_EXTICR4_EXTI14_PC_Pos)
   AFIO_EXTICR4_EXTI14_PC_Pos=(9U)
   AFIO_EXTICR4_EXTI14_PD=AFIO_EXTICR4_EXTI14_PD_Msk
   AFIO_EXTICR4_EXTI14_PD_Msk=(0x3U << AFIO_EXTICR4_EXTI14_PD_Pos)
   AFIO_EXTICR4_EXTI14_PD_Pos=(8U)
   AFIO_EXTICR4_EXTI14_PE=AFIO_EXTICR4_EXTI14_PE_Msk
   AFIO_EXTICR4_EXTI14_PE_Msk=(0x1U << AFIO_EXTICR4_EXTI14_PE_Pos)
   AFIO_EXTICR4_EXTI14_PE_Pos=(10U)
   AFIO_EXTICR4_EXTI14_PF=AFIO_EXTICR4_EXTI14_PF_Msk
   AFIO_EXTICR4_EXTI14_PF_Msk=(0x5U << AFIO_EXTICR4_EXTI14_PF_Pos)
   AFIO_EXTICR4_EXTI14_PF_Pos=(8U)
   AFIO_EXTICR4_EXTI14_PG=AFIO_EXTICR4_EXTI14_PG_Msk
   AFIO_EXTICR4_EXTI14_PG_Msk=(0x3U << AFIO_EXTICR4_EXTI14_PG_Pos)
   AFIO_EXTICR4_EXTI14_PG_Pos=(9U)
   AFIO_EXTICR4_EXTI14_Pos=(8U)
   AFIO_EXTICR4_EXTI15=AFIO_EXTICR4_EXTI15_Msk
   AFIO_EXTICR4_EXTI15_Msk=(0xFU << AFIO_EXTICR4_EXTI15_Pos)
   AFIO_EXTICR4_EXTI15_PA=0x00000000U
   AFIO_EXTICR4_EXTI15_PB=AFIO_EXTICR4_EXTI15_PB_Msk
   AFIO_EXTICR4_EXTI15_PB_Msk=(0x1U << AFIO_EXTICR4_EXTI15_PB_Pos)
   AFIO_EXTICR4_EXTI15_PB_Pos=(12U)
   AFIO_EXTICR4_EXTI15_PC=AFIO_EXTICR4_EXTI15_PC_Msk
   AFIO_EXTICR4_EXTI15_PC_Msk=(0x1U << AFIO_EXTICR4_EXTI15_PC_Pos)
   AFIO_EXTICR4_EXTI15_PC_Pos=(13U)
   AFIO_EXTICR4_EXTI15_PD=AFIO_EXTICR4_EXTI15_PD_Msk
   AFIO_EXTICR4_EXTI15_PD_Msk=(0x3U << AFIO_EXTICR4_EXTI15_PD_Pos)
   AFIO_EXTICR4_EXTI15_PD_Pos=(12U)
   AFIO_EXTICR4_EXTI15_PE=AFIO_EXTICR4_EXTI15_PE_Msk
   AFIO_EXTICR4_EXTI15_PE_Msk=(0x1U << AFIO_EXTICR4_EXTI15_PE_Pos)
   AFIO_EXTICR4_EXTI15_PE_Pos=(14U)
   AFIO_EXTICR4_EXTI15_PF=AFIO_EXTICR4_EXTI15_PF_Msk
   AFIO_EXTICR4_EXTI15_PF_Msk=(0x5U << AFIO_EXTICR4_EXTI15_PF_Pos)
   AFIO_EXTICR4_EXTI15_PF_Pos=(12U)
   AFIO_EXTICR4_EXTI15_PG=AFIO_EXTICR4_EXTI15_PG_Msk
   AFIO_EXTICR4_EXTI15_PG_Msk=(0x3U << AFIO_EXTICR4_EXTI15_PG_Pos)
   AFIO_EXTICR4_EXTI15_PG_Pos=(13U)
   AFIO_EXTICR4_EXTI15_Pos=(12U)
   AFIO_MAPR_CAN_REMAP=AFIO_MAPR_CAN_REMAP_Msk
   AFIO_MAPR_CAN_REMAP_0=(0x1U << AFIO_MAPR_CAN_REMAP_Pos)
   AFIO_MAPR_CAN_REMAP_1=(0x2U << AFIO_MAPR_CAN_REMAP_Pos)
   AFIO_MAPR_CAN_REMAP_Msk=(0x3U << AFIO_MAPR_CAN_REMAP_Pos)
   AFIO_MAPR_CAN_REMAP_Pos=(13U)
   AFIO_MAPR_CAN_REMAP_REMAP1=0x00000000U
   AFIO_MAPR_CAN_REMAP_REMAP2=AFIO_MAPR_CAN_REMAP_REMAP2_Msk
   AFIO_MAPR_CAN_REMAP_REMAP2_Msk=(0x1U << AFIO_MAPR_CAN_REMAP_REMAP2_Pos)
   AFIO_MAPR_CAN_REMAP_REMAP2_Pos=(14U)
   AFIO_MAPR_CAN_REMAP_REMAP3=AFIO_MAPR_CAN_REMAP_REMAP3_Msk
   AFIO_MAPR_CAN_REMAP_REMAP3_Msk=(0x3U << AFIO_MAPR_CAN_REMAP_REMAP3_Pos)
   AFIO_MAPR_CAN_REMAP_REMAP3_Pos=(13U)
   AFIO_MAPR_I2C1_REMAP=AFIO_MAPR_I2C1_REMAP_Msk
   AFIO_MAPR_I2C1_REMAP_Msk=(0x1U << AFIO_MAPR_I2C1_REMAP_Pos)
   AFIO_MAPR_I2C1_REMAP_Pos=(1U)
   AFIO_MAPR_PD01_REMAP=AFIO_MAPR_PD01_REMAP_Msk
   AFIO_MAPR_PD01_REMAP_Msk=(0x1U << AFIO_MAPR_PD01_REMAP_Pos)
   AFIO_MAPR_PD01_REMAP_Pos=(15U)
   AFIO_MAPR_SPI1_REMAP=AFIO_MAPR_SPI1_REMAP_Msk
   AFIO_MAPR_SPI1_REMAP_Msk=(0x1U << AFIO_MAPR_SPI1_REMAP_Pos)
   AFIO_MAPR_SPI1_REMAP_Pos=(0U)
   AFIO_MAPR_SWJ_CFG=AFIO_MAPR_SWJ_CFG_Msk
   AFIO_MAPR_SWJ_CFG_0=(0x1U << AFIO_MAPR_SWJ_CFG_Pos)
   AFIO_MAPR_SWJ_CFG_1=(0x2U << AFIO_MAPR_SWJ_CFG_Pos)
   AFIO_MAPR_SWJ_CFG_2=(0x4U << AFIO_MAPR_SWJ_CFG_Pos)
   AFIO_MAPR_SWJ_CFG_DISABLE=AFIO_MAPR_SWJ_CFG_DISABLE_Msk
   AFIO_MAPR_SWJ_CFG_DISABLE_Msk=(0x1U << AFIO_MAPR_SWJ_CFG_DISABLE_Pos)
   AFIO_MAPR_SWJ_CFG_DISABLE_Pos=(26U)
   AFIO_MAPR_SWJ_CFG_JTAGDISABLE=AFIO_MAPR_SWJ_CFG_JTAGDISABLE_Msk
   AFIO_MAPR_SWJ_CFG_JTAGDISABLE_Msk=(0x1U << AFIO_MAPR_SWJ_CFG_JTAGDISABLE_Pos)
   AFIO_MAPR_SWJ_CFG_JTAGDISABLE_Pos=(25U)
   AFIO_MAPR_SWJ_CFG_Msk=(0x7U << AFIO_MAPR_SWJ_CFG_Pos)
   AFIO_MAPR_SWJ_CFG_NOJNTRST=AFIO_MAPR_SWJ_CFG_NOJNTRST_Msk
   AFIO_MAPR_SWJ_CFG_NOJNTRST_Msk=(0x1U << AFIO_MAPR_SWJ_CFG_NOJNTRST_Pos)
   AFIO_MAPR_SWJ_CFG_NOJNTRST_Pos=(24U)
   AFIO_MAPR_SWJ_CFG_Pos=(24U)
   AFIO_MAPR_SWJ_CFG_RESET=0x00000000U
   AFIO_MAPR_TIM1_REMAP=AFIO_MAPR_TIM1_REMAP_Msk
   AFIO_MAPR_TIM1_REMAP_0=(0x1U << AFIO_MAPR_TIM1_REMAP_Pos)
   AFIO_MAPR_TIM1_REMAP_1=(0x2U << AFIO_MAPR_TIM1_REMAP_Pos)
   AFIO_MAPR_TIM1_REMAP_FULLREMAP=AFIO_MAPR_TIM1_REMAP_FULLREMAP_Msk
   AFIO_MAPR_TIM1_REMAP_FULLREMAP_Msk=(0x3U << AFIO_MAPR_TIM1_REMAP_FULLREMAP_Pos)
   AFIO_MAPR_TIM1_REMAP_FULLREMAP_Pos=(6U)
   AFIO_MAPR_TIM1_REMAP_Msk=(0x3U << AFIO_MAPR_TIM1_REMAP_Pos)
   AFIO_MAPR_TIM1_REMAP_NOREMAP=0x00000000U
   AFIO_MAPR_TIM1_REMAP_PARTIALREMAP=AFIO_MAPR_TIM1_REMAP_PARTIALREMAP_Msk
   AFIO_MAPR_TIM1_REMAP_PARTIALREMAP_Msk=(0x1U << AFIO_MAPR_TIM1_REMAP_PARTIALREMAP_Pos)
   AFIO_MAPR_TIM1_REMAP_PARTIALREMAP_Pos=(6U)
   AFIO_MAPR_TIM1_REMAP_Pos=(6U)
   AFIO_MAPR_TIM2_REMAP=AFIO_MAPR_TIM2_REMAP_Msk
   AFIO_MAPR_TIM2_REMAP_0=(0x1U << AFIO_MAPR_TIM2_REMAP_Pos)
   AFIO_MAPR_TIM2_REMAP_1=(0x2U << AFIO_MAPR_TIM2_REMAP_Pos)
   AFIO_MAPR_TIM2_REMAP_FULLREMAP=AFIO_MAPR_TIM2_REMAP_FULLREMAP_Msk
   AFIO_MAPR_TIM2_REMAP_FULLREMAP_Msk=(0x3U << AFIO_MAPR_TIM2_REMAP_FULLREMAP_Pos)
   AFIO_MAPR_TIM2_REMAP_FULLREMAP_Pos=(8U)
   AFIO_MAPR_TIM2_REMAP_Msk=(0x3U << AFIO_MAPR_TIM2_REMAP_Pos)
   AFIO_MAPR_TIM2_REMAP_NOREMAP=0x00000000U
   AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1=AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1_Msk
   AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1_Msk=(0x1U << AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1_Pos)
   AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1_Pos=(8U)
   AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2=AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2_Msk
   AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2_Msk=(0x1U << AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2_Pos)
   AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2_Pos=(9U)
   AFIO_MAPR_TIM2_REMAP_Pos=(8U)
   AFIO_MAPR_TIM3_REMAP=AFIO_MAPR_TIM3_REMAP_Msk
   AFIO_MAPR_TIM3_REMAP_0=(0x1U << AFIO_MAPR_TIM3_REMAP_Pos)
   AFIO_MAPR_TIM3_REMAP_1=(0x2U << AFIO_MAPR_TIM3_REMAP_Pos)
   AFIO_MAPR_TIM3_REMAP_FULLREMAP=AFIO_MAPR_TIM3_REMAP_FULLREMAP_Msk
   AFIO_MAPR_TIM3_REMAP_FULLREMAP_Msk=(0x3U << AFIO_MAPR_TIM3_REMAP_FULLREMAP_Pos)
   AFIO_MAPR_TIM3_REMAP_FULLREMAP_Pos=(10U)
   AFIO_MAPR_TIM3_REMAP_Msk=(0x3U << AFIO_MAPR_TIM3_REMAP_Pos)
   AFIO_MAPR_TIM3_REMAP_NOREMAP=0x00000000U
   AFIO_MAPR_TIM3_REMAP_PARTIALREMAP=AFIO_MAPR_TIM3_REMAP_PARTIALREMAP_Msk
   AFIO_MAPR_TIM3_REMAP_PARTIALREMAP_Msk=(0x1U << AFIO_MAPR_TIM3_REMAP_PARTIALREMAP_Pos)
   AFIO_MAPR_TIM3_REMAP_PARTIALREMAP_Pos=(11U)
   AFIO_MAPR_TIM3_REMAP_Pos=(10U)
   AFIO_MAPR_TIM4_REMAP=AFIO_MAPR_TIM4_REMAP_Msk
   AFIO_MAPR_TIM4_REMAP_Msk=(0x1U << AFIO_MAPR_TIM4_REMAP_Pos)
   AFIO_MAPR_TIM4_REMAP_Pos=(12U)
   AFIO_MAPR_USART1_REMAP=AFIO_MAPR_USART1_REMAP_Msk
   AFIO_MAPR_USART1_REMAP_Msk=(0x1U << AFIO_MAPR_USART1_REMAP_Pos)
   AFIO_MAPR_USART1_REMAP_Pos=(2U)
   AFIO_MAPR_USART2_REMAP=AFIO_MAPR_USART2_REMAP_Msk
   AFIO_MAPR_USART2_REMAP_Msk=(0x1U << AFIO_MAPR_USART2_REMAP_Pos)
   AFIO_MAPR_USART2_REMAP_Pos=(3U)
   AFIO_MAPR_USART3_REMAP=AFIO_MAPR_USART3_REMAP_Msk
   AFIO_MAPR_USART3_REMAP_0=(0x1U << AFIO_MAPR_USART3_REMAP_Pos)
   AFIO_MAPR_USART3_REMAP_1=(0x2U << AFIO_MAPR_USART3_REMAP_Pos)
   AFIO_MAPR_USART3_REMAP_FULLREMAP=AFIO_MAPR_USART3_REMAP_FULLREMAP_Msk
   AFIO_MAPR_USART3_REMAP_FULLREMAP_Msk=(0x3U << AFIO_MAPR_USART3_REMAP_FULLREMAP_Pos)
   AFIO_MAPR_USART3_REMAP_FULLREMAP_Pos=(4U)
   AFIO_MAPR_USART3_REMAP_Msk=(0x3U << AFIO_MAPR_USART3_REMAP_Pos)
   AFIO_MAPR_USART3_REMAP_NOREMAP=0x00000000U
   AFIO_MAPR_USART3_REMAP_PARTIALREMAP=AFIO_MAPR_USART3_REMAP_PARTIALREMAP_Msk
   AFIO_MAPR_USART3_REMAP_PARTIALREMAP_Msk=(0x1U << AFIO_MAPR_USART3_REMAP_PARTIALREMAP_Pos)
   AFIO_MAPR_USART3_REMAP_PARTIALREMAP_Pos=(4U)
   AFIO_MAPR_USART3_REMAP_Pos=(4U)
   AFIO_REMAP_DISABLE(REMAP_PIN)=do{ uint32_t tmpreg = AFIO->MAPR; tmpreg |= AFIO_MAPR_SWJ_CFG; tmpreg &= ~REMAP_PIN; AFIO->MAPR = tmpreg; }while(0U)
   AFIO_REMAP_ENABLE(REMAP_PIN)=do{ uint32_t tmpreg = AFIO->MAPR; tmpreg |= AFIO_MAPR_SWJ_CFG; tmpreg |= REMAP_PIN; AFIO->MAPR = tmpreg; }while(0U)
   AFIO_REMAP_PARTIAL(REMAP_PIN,REMAP_PIN_MASK)=do{ uint32_t tmpreg = AFIO->MAPR; tmpreg &= ~REMAP_PIN_MASK; tmpreg |= AFIO_MAPR_SWJ_CFG; tmpreg |= REMAP_PIN; AFIO->MAPR = tmpreg; }while(0U)
   AHBPERIPH_BASE=(PERIPH_BASE + 0x00020000U)
   APB1PERIPH_BASE=PERIPH_BASE
   APB2PERIPH_BASE=(PERIPH_BASE + 0x00010000U)
   APSR_C_Msk=(1UL << APSR_C_Pos)
   APSR_C_Pos=29U
   APSR_N_Msk=(1UL << APSR_N_Pos)
   APSR_N_Pos=31U
   APSR_Q_Msk=(1UL << APSR_Q_Pos)
   APSR_Q_Pos=27U
   APSR_V_Msk=(1UL << APSR_V_Pos)
   APSR_V_Pos=28U
   APSR_Z_Msk=(1UL << APSR_Z_Pos)
   APSR_Z_Pos=30U
   assert_param(expr)=((void)0U)
   BDCR_REG_INDEX=((uint8_t)2)
   BIG_ENDIAN=_BIG_ENDIAN
   BKP=((BKP_TypeDef *)BKP_BASE)
   BKP_BASE=(APB1PERIPH_BASE + 0x00006C00U)
   BKP_CR_TPAL=BKP_CR_TPAL_Msk
   BKP_CR_TPAL_Msk=(0x1U << BKP_CR_TPAL_Pos)
   BKP_CR_TPAL_Pos=(1U)
   BKP_CR_TPE=BKP_CR_TPE_Msk
   BKP_CR_TPE_Msk=(0x1U << BKP_CR_TPE_Pos)
   BKP_CR_TPE_Pos=(0U)
   BKP_CSR_CTE=BKP_CSR_CTE_Msk
   BKP_CSR_CTE_Msk=(0x1U << BKP_CSR_CTE_Pos)
   BKP_CSR_CTE_Pos=(0U)
   BKP_CSR_CTI=BKP_CSR_CTI_Msk
   BKP_CSR_CTI_Msk=(0x1U << BKP_CSR_CTI_Pos)
   BKP_CSR_CTI_Pos=(1U)
   BKP_CSR_TEF=BKP_CSR_TEF_Msk
   BKP_CSR_TEF_Msk=(0x1U << BKP_CSR_TEF_Pos)
   BKP_CSR_TEF_Pos=(8U)
   BKP_CSR_TIF=BKP_CSR_TIF_Msk
   BKP_CSR_TIF_Msk=(0x1U << BKP_CSR_TIF_Pos)
   BKP_CSR_TIF_Pos=(9U)
   BKP_CSR_TPIE=BKP_CSR_TPIE_Msk
   BKP_CSR_TPIE_Msk=(0x1U << BKP_CSR_TPIE_Pos)
   BKP_CSR_TPIE_Pos=(2U)
   BKP_DR10_D=BKP_DR10_D_Msk
   BKP_DR10_D_Msk=(0xFFFFU << BKP_DR10_D_Pos)
   BKP_DR10_D_Pos=(0U)
   BKP_DR1_D=BKP_DR1_D_Msk
   BKP_DR1_D_Msk=(0xFFFFU << BKP_DR1_D_Pos)
   BKP_DR1_D_Pos=(0U)
   BKP_DR2_D=BKP_DR2_D_Msk
   BKP_DR2_D_Msk=(0xFFFFU << BKP_DR2_D_Pos)
   BKP_DR2_D_Pos=(0U)
   BKP_DR3_D=BKP_DR3_D_Msk
   BKP_DR3_D_Msk=(0xFFFFU << BKP_DR3_D_Pos)
   BKP_DR3_D_Pos=(0U)
   BKP_DR4_D=BKP_DR4_D_Msk
   BKP_DR4_D_Msk=(0xFFFFU << BKP_DR4_D_Pos)
   BKP_DR4_D_Pos=(0U)
   BKP_DR5_D=BKP_DR5_D_Msk
   BKP_DR5_D_Msk=(0xFFFFU << BKP_DR5_D_Pos)
   BKP_DR5_D_Pos=(0U)
   BKP_DR6_D=BKP_DR6_D_Msk
   BKP_DR6_D_Msk=(0xFFFFU << BKP_DR6_D_Pos)
   BKP_DR6_D_Pos=(0U)
   BKP_DR7_D=BKP_DR7_D_Msk
   BKP_DR7_D_Msk=(0xFFFFU << BKP_DR7_D_Pos)
   BKP_DR7_D_Pos=(0U)
   BKP_DR8_D=BKP_DR8_D_Msk
   BKP_DR8_D_Msk=(0xFFFFU << BKP_DR8_D_Pos)
   BKP_DR8_D_Pos=(0U)
   BKP_DR9_D=BKP_DR9_D_Msk
   BKP_DR9_D_Msk=(0xFFFFU << BKP_DR9_D_Pos)
   BKP_DR9_D_Pos=(0U)
   BKP_RTCCR_ASOE=BKP_RTCCR_ASOE_Msk
   BKP_RTCCR_ASOE_Msk=(0x1U << BKP_RTCCR_ASOE_Pos)
   BKP_RTCCR_ASOE_Pos=(8U)
   BKP_RTCCR_ASOS=BKP_RTCCR_ASOS_Msk
   BKP_RTCCR_ASOS_Msk=(0x1U << BKP_RTCCR_ASOS_Pos)
   BKP_RTCCR_ASOS_Pos=(9U)
   BKP_RTCCR_CAL=BKP_RTCCR_CAL_Msk
   BKP_RTCCR_CAL_Msk=(0x7FU << BKP_RTCCR_CAL_Pos)
   BKP_RTCCR_CAL_Pos=(0U)
   BKP_RTCCR_CCO=BKP_RTCCR_CCO_Msk
   BKP_RTCCR_CCO_Msk=(0x1U << BKP_RTCCR_CCO_Pos)
   BKP_RTCCR_CCO_Pos=(7U)
   BUFSIZ=1024
   BYTE_ORDER=_BYTE_ORDER
   CAN1=((CAN_TypeDef *)CAN1_BASE)
   CAN1_BASE=(APB1PERIPH_BASE + 0x00006400U)
   CAN1_RX0_IRQHandler=USB_LP_CAN1_RX0_IRQHandler
   CAN1_RX0_IRQn=USB_LP_CAN1_RX0_IRQn
   CAN1_TX_IRQHandler=USB_HP_CAN1_TX_IRQHandler
   CAN1_TX_IRQn=USB_HP_CAN1_TX_IRQn
   CAN_BS1_10TQ=((uint32_t)(CAN_BTR_TS1_3 | CAN_BTR_TS1_0))
   CAN_BS1_11TQ=((uint32_t)(CAN_BTR_TS1_3 | CAN_BTR_TS1_1))
   CAN_BS1_12TQ=((uint32_t)(CAN_BTR_TS1_3 | CAN_BTR_TS1_1 | CAN_BTR_TS1_0))
   CAN_BS1_13TQ=((uint32_t)(CAN_BTR_TS1_3 | CAN_BTR_TS1_2))
   CAN_BS1_14TQ=((uint32_t)(CAN_BTR_TS1_3 | CAN_BTR_TS1_2 | CAN_BTR_TS1_0))
   CAN_BS1_15TQ=((uint32_t)(CAN_BTR_TS1_3 | CAN_BTR_TS1_2 | CAN_BTR_TS1_1))
   CAN_BS1_16TQ=((uint32_t)CAN_BTR_TS1)
   CAN_BS1_1TQ=(0x00000000U)
   CAN_BS1_2TQ=((uint32_t)CAN_BTR_TS1_0)
   CAN_BS1_3TQ=((uint32_t)CAN_BTR_TS1_1)
   CAN_BS1_4TQ=((uint32_t)(CAN_BTR_TS1_1 | CAN_BTR_TS1_0))
   CAN_BS1_5TQ=((uint32_t)CAN_BTR_TS1_2)
   CAN_BS1_6TQ=((uint32_t)(CAN_BTR_TS1_2 | CAN_BTR_TS1_0))
   CAN_BS1_7TQ=((uint32_t)(CAN_BTR_TS1_2 | CAN_BTR_TS1_1))
   CAN_BS1_8TQ=((uint32_t)(CAN_BTR_TS1_2 | CAN_BTR_TS1_1 | CAN_BTR_TS1_0))
   CAN_BS1_9TQ=((uint32_t)CAN_BTR_TS1_3)
   CAN_BS2_1TQ=(0x00000000U)
   CAN_BS2_2TQ=((uint32_t)CAN_BTR_TS2_0)
   CAN_BS2_3TQ=((uint32_t)CAN_BTR_TS2_1)
   CAN_BS2_4TQ=((uint32_t)(CAN_BTR_TS2_1 | CAN_BTR_TS2_0))
   CAN_BS2_5TQ=((uint32_t)CAN_BTR_TS2_2)
   CAN_BS2_6TQ=((uint32_t)(CAN_BTR_TS2_2 | CAN_BTR_TS2_0))
   CAN_BS2_7TQ=((uint32_t)(CAN_BTR_TS2_2 | CAN_BTR_TS2_1))
   CAN_BS2_8TQ=((uint32_t)CAN_BTR_TS2)
   CAN_BTR_BRP=CAN_BTR_BRP_Msk
   CAN_BTR_BRP_Msk=(0x3FFU << CAN_BTR_BRP_Pos)
   CAN_BTR_BRP_Pos=(0U)
   CAN_BTR_LBKM=CAN_BTR_LBKM_Msk
   CAN_BTR_LBKM_Msk=(0x1U << CAN_BTR_LBKM_Pos)
   CAN_BTR_LBKM_Pos=(30U)
   CAN_BTR_SILM=CAN_BTR_SILM_Msk
   CAN_BTR_SILM_Msk=(0x1U << CAN_BTR_SILM_Pos)
   CAN_BTR_SILM_Pos=(31U)
   CAN_BTR_SJW=CAN_BTR_SJW_Msk
   CAN_BTR_SJW_0=(0x1U << CAN_BTR_SJW_Pos)
   CAN_BTR_SJW_1=(0x2U << CAN_BTR_SJW_Pos)
   CAN_BTR_SJW_Msk=(0x3U << CAN_BTR_SJW_Pos)
   CAN_BTR_SJW_Pos=(24U)
   CAN_BTR_TS1=CAN_BTR_TS1_Msk
   CAN_BTR_TS1_0=(0x1U << CAN_BTR_TS1_Pos)
   CAN_BTR_TS1_1=(0x2U << CAN_BTR_TS1_Pos)
   CAN_BTR_TS1_2=(0x4U << CAN_BTR_TS1_Pos)
   CAN_BTR_TS1_3=(0x8U << CAN_BTR_TS1_Pos)
   CAN_BTR_TS1_Msk=(0xFU << CAN_BTR_TS1_Pos)
   CAN_BTR_TS1_Pos=(16U)
   CAN_BTR_TS2=CAN_BTR_TS2_Msk
   CAN_BTR_TS2_0=(0x1U << CAN_BTR_TS2_Pos)
   CAN_BTR_TS2_1=(0x2U << CAN_BTR_TS2_Pos)
   CAN_BTR_TS2_2=(0x4U << CAN_BTR_TS2_Pos)
   CAN_BTR_TS2_Msk=(0x7U << CAN_BTR_TS2_Pos)
   CAN_BTR_TS2_Pos=(20U)
   CAN_ESR_BOFF=CAN_ESR_BOFF_Msk
   CAN_ESR_BOFF_Msk=(0x1U << CAN_ESR_BOFF_Pos)
   CAN_ESR_BOFF_Pos=(2U)
   CAN_ESR_EPVF=CAN_ESR_EPVF_Msk
   CAN_ESR_EPVF_Msk=(0x1U << CAN_ESR_EPVF_Pos)
   CAN_ESR_EPVF_Pos=(1U)
   CAN_ESR_EWGF=CAN_ESR_EWGF_Msk
   CAN_ESR_EWGF_Msk=(0x1U << CAN_ESR_EWGF_Pos)
   CAN_ESR_EWGF_Pos=(0U)
   CAN_ESR_LEC=CAN_ESR_LEC_Msk
   CAN_ESR_LEC_0=(0x1U << CAN_ESR_LEC_Pos)
   CAN_ESR_LEC_1=(0x2U << CAN_ESR_LEC_Pos)
   CAN_ESR_LEC_2=(0x4U << CAN_ESR_LEC_Pos)
   CAN_ESR_LEC_Msk=(0x7U << CAN_ESR_LEC_Pos)
   CAN_ESR_LEC_Pos=(4U)
   CAN_ESR_REC=CAN_ESR_REC_Msk
   CAN_ESR_REC_Msk=(0xFFU << CAN_ESR_REC_Pos)
   CAN_ESR_REC_Pos=(24U)
   CAN_ESR_TEC=CAN_ESR_TEC_Msk
   CAN_ESR_TEC_Msk=(0xFFU << CAN_ESR_TEC_Pos)
   CAN_ESR_TEC_Pos=(16U)
   CAN_F0R1_FB0=CAN_F0R1_FB0_Msk
   CAN_F0R1_FB0_Msk=(0x1U << CAN_F0R1_FB0_Pos)
   CAN_F0R1_FB0_Pos=(0U)
   CAN_F0R1_FB10=CAN_F0R1_FB10_Msk
   CAN_F0R1_FB10_Msk=(0x1U << CAN_F0R1_FB10_Pos)
   CAN_F0R1_FB10_Pos=(10U)
   CAN_F0R1_FB11=CAN_F0R1_FB11_Msk
   CAN_F0R1_FB11_Msk=(0x1U << CAN_F0R1_FB11_Pos)
   CAN_F0R1_FB11_Pos=(11U)
   CAN_F0R1_FB12=CAN_F0R1_FB12_Msk
   CAN_F0R1_FB12_Msk=(0x1U << CAN_F0R1_FB12_Pos)
   CAN_F0R1_FB12_Pos=(12U)
   CAN_F0R1_FB13=CAN_F0R1_FB13_Msk
   CAN_F0R1_FB13_Msk=(0x1U << CAN_F0R1_FB13_Pos)
   CAN_F0R1_FB13_Pos=(13U)
   CAN_F0R1_FB14=CAN_F0R1_FB14_Msk
   CAN_F0R1_FB14_Msk=(0x1U << CAN_F0R1_FB14_Pos)
   CAN_F0R1_FB14_Pos=(14U)
   CAN_F0R1_FB15=CAN_F0R1_FB15_Msk
   CAN_F0R1_FB15_Msk=(0x1U << CAN_F0R1_FB15_Pos)
   CAN_F0R1_FB15_Pos=(15U)
   CAN_F0R1_FB16=CAN_F0R1_FB16_Msk
   CAN_F0R1_FB16_Msk=(0x1U << CAN_F0R1_FB16_Pos)
   CAN_F0R1_FB16_Pos=(16U)
   CAN_F0R1_FB17=CAN_F0R1_FB17_Msk
   CAN_F0R1_FB17_Msk=(0x1U << CAN_F0R1_FB17_Pos)
   CAN_F0R1_FB17_Pos=(17U)
   CAN_F0R1_FB18=CAN_F0R1_FB18_Msk
   CAN_F0R1_FB18_Msk=(0x1U << CAN_F0R1_FB18_Pos)
   CAN_F0R1_FB18_Pos=(18U)
   CAN_F0R1_FB19=CAN_F0R1_FB19_Msk
   CAN_F0R1_FB19_Msk=(0x1U << CAN_F0R1_FB19_Pos)
   CAN_F0R1_FB19_Pos=(19U)
   CAN_F0R1_FB1=CAN_F0R1_FB1_Msk
   CAN_F0R1_FB1_Msk=(0x1U << CAN_F0R1_FB1_Pos)
   CAN_F0R1_FB1_Pos=(1U)
   CAN_F0R1_FB20=CAN_F0R1_FB20_Msk
   CAN_F0R1_FB20_Msk=(0x1U << CAN_F0R1_FB20_Pos)
   CAN_F0R1_FB20_Pos=(20U)
   CAN_F0R1_FB21=CAN_F0R1_FB21_Msk
   CAN_F0R1_FB21_Msk=(0x1U << CAN_F0R1_FB21_Pos)
   CAN_F0R1_FB21_Pos=(21U)
   CAN_F0R1_FB22=CAN_F0R1_FB22_Msk
   CAN_F0R1_FB22_Msk=(0x1U << CAN_F0R1_FB22_Pos)
   CAN_F0R1_FB22_Pos=(22U)
   CAN_F0R1_FB23=CAN_F0R1_FB23_Msk
   CAN_F0R1_FB23_Msk=(0x1U << CAN_F0R1_FB23_Pos)
   CAN_F0R1_FB23_Pos=(23U)
   CAN_F0R1_FB24=CAN_F0R1_FB24_Msk
   CAN_F0R1_FB24_Msk=(0x1U << CAN_F0R1_FB24_Pos)
   CAN_F0R1_FB24_Pos=(24U)
   CAN_F0R1_FB25=CAN_F0R1_FB25_Msk
   CAN_F0R1_FB25_Msk=(0x1U << CAN_F0R1_FB25_Pos)
   CAN_F0R1_FB25_Pos=(25U)
   CAN_F0R1_FB26=CAN_F0R1_FB26_Msk
   CAN_F0R1_FB26_Msk=(0x1U << CAN_F0R1_FB26_Pos)
   CAN_F0R1_FB26_Pos=(26U)
   CAN_F0R1_FB27=CAN_F0R1_FB27_Msk
   CAN_F0R1_FB27_Msk=(0x1U << CAN_F0R1_FB27_Pos)
   CAN_F0R1_FB27_Pos=(27U)
   CAN_F0R1_FB28=CAN_F0R1_FB28_Msk
   CAN_F0R1_FB28_Msk=(0x1U << CAN_F0R1_FB28_Pos)
   CAN_F0R1_FB28_Pos=(28U)
   CAN_F0R1_FB29=CAN_F0R1_FB29_Msk
   CAN_F0R1_FB29_Msk=(0x1U << CAN_F0R1_FB29_Pos)
   CAN_F0R1_FB29_Pos=(29U)
   CAN_F0R1_FB2=CAN_F0R1_FB2_Msk
   CAN_F0R1_FB2_Msk=(0x1U << CAN_F0R1_FB2_Pos)
   CAN_F0R1_FB2_Pos=(2U)
   CAN_F0R1_FB30=CAN_F0R1_FB30_Msk
   CAN_F0R1_FB30_Msk=(0x1U << CAN_F0R1_FB30_Pos)
   CAN_F0R1_FB30_Pos=(30U)
   CAN_F0R1_FB31=CAN_F0R1_FB31_Msk
   CAN_F0R1_FB31_Msk=(0x1U << CAN_F0R1_FB31_Pos)
   CAN_F0R1_FB31_Pos=(31U)
   CAN_F0R1_FB3=CAN_F0R1_FB3_Msk
   CAN_F0R1_FB3_Msk=(0x1U << CAN_F0R1_FB3_Pos)
   CAN_F0R1_FB3_Pos=(3U)
   CAN_F0R1_FB4=CAN_F0R1_FB4_Msk
   CAN_F0R1_FB4_Msk=(0x1U << CAN_F0R1_FB4_Pos)
   CAN_F0R1_FB4_Pos=(4U)
   CAN_F0R1_FB5=CAN_F0R1_FB5_Msk
   CAN_F0R1_FB5_Msk=(0x1U << CAN_F0R1_FB5_Pos)
   CAN_F0R1_FB5_Pos=(5U)
   CAN_F0R1_FB6=CAN_F0R1_FB6_Msk
   CAN_F0R1_FB6_Msk=(0x1U << CAN_F0R1_FB6_Pos)
   CAN_F0R1_FB6_Pos=(6U)
   CAN_F0R1_FB7=CAN_F0R1_FB7_Msk
   CAN_F0R1_FB7_Msk=(0x1U << CAN_F0R1_FB7_Pos)
   CAN_F0R1_FB7_Pos=(7U)
   CAN_F0R1_FB8=CAN_F0R1_FB8_Msk
   CAN_F0R1_FB8_Msk=(0x1U << CAN_F0R1_FB8_Pos)
   CAN_F0R1_FB8_Pos=(8U)
   CAN_F0R1_FB9=CAN_F0R1_FB9_Msk
   CAN_F0R1_FB9_Msk=(0x1U << CAN_F0R1_FB9_Pos)
   CAN_F0R1_FB9_Pos=(9U)
   CAN_F0R2_FB0=CAN_F0R2_FB0_Msk
   CAN_F0R2_FB0_Msk=(0x1U << CAN_F0R2_FB0_Pos)
   CAN_F0R2_FB0_Pos=(0U)
   CAN_F0R2_FB10=CAN_F0R2_FB10_Msk
   CAN_F0R2_FB10_Msk=(0x1U << CAN_F0R2_FB10_Pos)
   CAN_F0R2_FB10_Pos=(10U)
   CAN_F0R2_FB11=CAN_F0R2_FB11_Msk
   CAN_F0R2_FB11_Msk=(0x1U << CAN_F0R2_FB11_Pos)
   CAN_F0R2_FB11_Pos=(11U)
   CAN_F0R2_FB12=CAN_F0R2_FB12_Msk
   CAN_F0R2_FB12_Msk=(0x1U << CAN_F0R2_FB12_Pos)
   CAN_F0R2_FB12_Pos=(12U)
   CAN_F0R2_FB13=CAN_F0R2_FB13_Msk
   CAN_F0R2_FB13_Msk=(0x1U << CAN_F0R2_FB13_Pos)
   CAN_F0R2_FB13_Pos=(13U)
   CAN_F0R2_FB14=CAN_F0R2_FB14_Msk
   CAN_F0R2_FB14_Msk=(0x1U << CAN_F0R2_FB14_Pos)
   CAN_F0R2_FB14_Pos=(14U)
   CAN_F0R2_FB15=CAN_F0R2_FB15_Msk
   CAN_F0R2_FB15_Msk=(0x1U << CAN_F0R2_FB15_Pos)
   CAN_F0R2_FB15_Pos=(15U)
   CAN_F0R2_FB16=CAN_F0R2_FB16_Msk
   CAN_F0R2_FB16_Msk=(0x1U << CAN_F0R2_FB16_Pos)
   CAN_F0R2_FB16_Pos=(16U)
   CAN_F0R2_FB17=CAN_F0R2_FB17_Msk
   CAN_F0R2_FB17_Msk=(0x1U << CAN_F0R2_FB17_Pos)
   CAN_F0R2_FB17_Pos=(17U)
   CAN_F0R2_FB18=CAN_F0R2_FB18_Msk
   CAN_F0R2_FB18_Msk=(0x1U << CAN_F0R2_FB18_Pos)
   CAN_F0R2_FB18_Pos=(18U)
   CAN_F0R2_FB19=CAN_F0R2_FB19_Msk
   CAN_F0R2_FB19_Msk=(0x1U << CAN_F0R2_FB19_Pos)
   CAN_F0R2_FB19_Pos=(19U)
   CAN_F0R2_FB1=CAN_F0R2_FB1_Msk
   CAN_F0R2_FB1_Msk=(0x1U << CAN_F0R2_FB1_Pos)
   CAN_F0R2_FB1_Pos=(1U)
   CAN_F0R2_FB20=CAN_F0R2_FB20_Msk
   CAN_F0R2_FB20_Msk=(0x1U << CAN_F0R2_FB20_Pos)
   CAN_F0R2_FB20_Pos=(20U)
   CAN_F0R2_FB21=CAN_F0R2_FB21_Msk
   CAN_F0R2_FB21_Msk=(0x1U << CAN_F0R2_FB21_Pos)
   CAN_F0R2_FB21_Pos=(21U)
   CAN_F0R2_FB22=CAN_F0R2_FB22_Msk
   CAN_F0R2_FB22_Msk=(0x1U << CAN_F0R2_FB22_Pos)
   CAN_F0R2_FB22_Pos=(22U)
   CAN_F0R2_FB23=CAN_F0R2_FB23_Msk
   CAN_F0R2_FB23_Msk=(0x1U << CAN_F0R2_FB23_Pos)
   CAN_F0R2_FB23_Pos=(23U)
   CAN_F0R2_FB24=CAN_F0R2_FB24_Msk
   CAN_F0R2_FB24_Msk=(0x1U << CAN_F0R2_FB24_Pos)
   CAN_F0R2_FB24_Pos=(24U)
   CAN_F0R2_FB25=CAN_F0R2_FB25_Msk
   CAN_F0R2_FB25_Msk=(0x1U << CAN_F0R2_FB25_Pos)
   CAN_F0R2_FB25_Pos=(25U)
   CAN_F0R2_FB26=CAN_F0R2_FB26_Msk
   CAN_F0R2_FB26_Msk=(0x1U << CAN_F0R2_FB26_Pos)
   CAN_F0R2_FB26_Pos=(26U)
   CAN_F0R2_FB27=CAN_F0R2_FB27_Msk
   CAN_F0R2_FB27_Msk=(0x1U << CAN_F0R2_FB27_Pos)
   CAN_F0R2_FB27_Pos=(27U)
   CAN_F0R2_FB28=CAN_F0R2_FB28_Msk
   CAN_F0R2_FB28_Msk=(0x1U << CAN_F0R2_FB28_Pos)
   CAN_F0R2_FB28_Pos=(28U)
   CAN_F0R2_FB29=CAN_F0R2_FB29_Msk
   CAN_F0R2_FB29_Msk=(0x1U << CAN_F0R2_FB29_Pos)
   CAN_F0R2_FB29_Pos=(29U)
   CAN_F0R2_FB2=CAN_F0R2_FB2_Msk
   CAN_F0R2_FB2_Msk=(0x1U << CAN_F0R2_FB2_Pos)
   CAN_F0R2_FB2_Pos=(2U)
   CAN_F0R2_FB30=CAN_F0R2_FB30_Msk
   CAN_F0R2_FB30_Msk=(0x1U << CAN_F0R2_FB30_Pos)
   CAN_F0R2_FB30_Pos=(30U)
   CAN_F0R2_FB31=CAN_F0R2_FB31_Msk
   CAN_F0R2_FB31_Msk=(0x1U << CAN_F0R2_FB31_Pos)
   CAN_F0R2_FB31_Pos=(31U)
   CAN_F0R2_FB3=CAN_F0R2_FB3_Msk
   CAN_F0R2_FB3_Msk=(0x1U << CAN_F0R2_FB3_Pos)
   CAN_F0R2_FB3_Pos=(3U)
   CAN_F0R2_FB4=CAN_F0R2_FB4_Msk
   CAN_F0R2_FB4_Msk=(0x1U << CAN_F0R2_FB4_Pos)
   CAN_F0R2_FB4_Pos=(4U)
   CAN_F0R2_FB5=CAN_F0R2_FB5_Msk
   CAN_F0R2_FB5_Msk=(0x1U << CAN_F0R2_FB5_Pos)
   CAN_F0R2_FB5_Pos=(5U)
   CAN_F0R2_FB6=CAN_F0R2_FB6_Msk
   CAN_F0R2_FB6_Msk=(0x1U << CAN_F0R2_FB6_Pos)
   CAN_F0R2_FB6_Pos=(6U)
   CAN_F0R2_FB7=CAN_F0R2_FB7_Msk
   CAN_F0R2_FB7_Msk=(0x1U << CAN_F0R2_FB7_Pos)
   CAN_F0R2_FB7_Pos=(7U)
   CAN_F0R2_FB8=CAN_F0R2_FB8_Msk
   CAN_F0R2_FB8_Msk=(0x1U << CAN_F0R2_FB8_Pos)
   CAN_F0R2_FB8_Pos=(8U)
   CAN_F0R2_FB9=CAN_F0R2_FB9_Msk
   CAN_F0R2_FB9_Msk=(0x1U << CAN_F0R2_FB9_Pos)
   CAN_F0R2_FB9_Pos=(9U)
   CAN_F10R1_FB0=CAN_F10R1_FB0_Msk
   CAN_F10R1_FB0_Msk=(0x1U << CAN_F10R1_FB0_Pos)
   CAN_F10R1_FB0_Pos=(0U)
   CAN_F10R1_FB10=CAN_F10R1_FB10_Msk
   CAN_F10R1_FB10_Msk=(0x1U << CAN_F10R1_FB10_Pos)
   CAN_F10R1_FB10_Pos=(10U)
   CAN_F10R1_FB11=CAN_F10R1_FB11_Msk
   CAN_F10R1_FB11_Msk=(0x1U << CAN_F10R1_FB11_Pos)
   CAN_F10R1_FB11_Pos=(11U)
   CAN_F10R1_FB12=CAN_F10R1_FB12_Msk
   CAN_F10R1_FB12_Msk=(0x1U << CAN_F10R1_FB12_Pos)
   CAN_F10R1_FB12_Pos=(12U)
   CAN_F10R1_FB13=CAN_F10R1_FB13_Msk
   CAN_F10R1_FB13_Msk=(0x1U << CAN_F10R1_FB13_Pos)
   CAN_F10R1_FB13_Pos=(13U)
   CAN_F10R1_FB14=CAN_F10R1_FB14_Msk
   CAN_F10R1_FB14_Msk=(0x1U << CAN_F10R1_FB14_Pos)
   CAN_F10R1_FB14_Pos=(14U)
   CAN_F10R1_FB15=CAN_F10R1_FB15_Msk
   CAN_F10R1_FB15_Msk=(0x1U << CAN_F10R1_FB15_Pos)
   CAN_F10R1_FB15_Pos=(15U)
   CAN_F10R1_FB16=CAN_F10R1_FB16_Msk
   CAN_F10R1_FB16_Msk=(0x1U << CAN_F10R1_FB16_Pos)
   CAN_F10R1_FB16_Pos=(16U)
   CAN_F10R1_FB17=CAN_F10R1_FB17_Msk
   CAN_F10R1_FB17_Msk=(0x1U << CAN_F10R1_FB17_Pos)
   CAN_F10R1_FB17_Pos=(17U)
   CAN_F10R1_FB18=CAN_F10R1_FB18_Msk
   CAN_F10R1_FB18_Msk=(0x1U << CAN_F10R1_FB18_Pos)
   CAN_F10R1_FB18_Pos=(18U)
   CAN_F10R1_FB19=CAN_F10R1_FB19_Msk
   CAN_F10R1_FB19_Msk=(0x1U << CAN_F10R1_FB19_Pos)
   CAN_F10R1_FB19_Pos=(19U)
   CAN_F10R1_FB1=CAN_F10R1_FB1_Msk
   CAN_F10R1_FB1_Msk=(0x1U << CAN_F10R1_FB1_Pos)
   CAN_F10R1_FB1_Pos=(1U)
   CAN_F10R1_FB20=CAN_F10R1_FB20_Msk
   CAN_F10R1_FB20_Msk=(0x1U << CAN_F10R1_FB20_Pos)
   CAN_F10R1_FB20_Pos=(20U)
   CAN_F10R1_FB21=CAN_F10R1_FB21_Msk
   CAN_F10R1_FB21_Msk=(0x1U << CAN_F10R1_FB21_Pos)
   CAN_F10R1_FB21_Pos=(21U)
   CAN_F10R1_FB22=CAN_F10R1_FB22_Msk
   CAN_F10R1_FB22_Msk=(0x1U << CAN_F10R1_FB22_Pos)
   CAN_F10R1_FB22_Pos=(22U)
   CAN_F10R1_FB23=CAN_F10R1_FB23_Msk
   CAN_F10R1_FB23_Msk=(0x1U << CAN_F10R1_FB23_Pos)
   CAN_F10R1_FB23_Pos=(23U)
   CAN_F10R1_FB24=CAN_F10R1_FB24_Msk
   CAN_F10R1_FB24_Msk=(0x1U << CAN_F10R1_FB24_Pos)
   CAN_F10R1_FB24_Pos=(24U)
   CAN_F10R1_FB25=CAN_F10R1_FB25_Msk
   CAN_F10R1_FB25_Msk=(0x1U << CAN_F10R1_FB25_Pos)
   CAN_F10R1_FB25_Pos=(25U)
   CAN_F10R1_FB26=CAN_F10R1_FB26_Msk
   CAN_F10R1_FB26_Msk=(0x1U << CAN_F10R1_FB26_Pos)
   CAN_F10R1_FB26_Pos=(26U)
   CAN_F10R1_FB27=CAN_F10R1_FB27_Msk
   CAN_F10R1_FB27_Msk=(0x1U << CAN_F10R1_FB27_Pos)
   CAN_F10R1_FB27_Pos=(27U)
   CAN_F10R1_FB28=CAN_F10R1_FB28_Msk
   CAN_F10R1_FB28_Msk=(0x1U << CAN_F10R1_FB28_Pos)
   CAN_F10R1_FB28_Pos=(28U)
   CAN_F10R1_FB29=CAN_F10R1_FB29_Msk
   CAN_F10R1_FB29_Msk=(0x1U << CAN_F10R1_FB29_Pos)
   CAN_F10R1_FB29_Pos=(29U)
   CAN_F10R1_FB2=CAN_F10R1_FB2_Msk
   CAN_F10R1_FB2_Msk=(0x1U << CAN_F10R1_FB2_Pos)
   CAN_F10R1_FB2_Pos=(2U)
   CAN_F10R1_FB30=CAN_F10R1_FB30_Msk
   CAN_F10R1_FB30_Msk=(0x1U << CAN_F10R1_FB30_Pos)
   CAN_F10R1_FB30_Pos=(30U)
   CAN_F10R1_FB31=CAN_F10R1_FB31_Msk
   CAN_F10R1_FB31_Msk=(0x1U << CAN_F10R1_FB31_Pos)
   CAN_F10R1_FB31_Pos=(31U)
   CAN_F10R1_FB3=CAN_F10R1_FB3_Msk
   CAN_F10R1_FB3_Msk=(0x1U << CAN_F10R1_FB3_Pos)
   CAN_F10R1_FB3_Pos=(3U)
   CAN_F10R1_FB4=CAN_F10R1_FB4_Msk
   CAN_F10R1_FB4_Msk=(0x1U << CAN_F10R1_FB4_Pos)
   CAN_F10R1_FB4_Pos=(4U)
   CAN_F10R1_FB5=CAN_F10R1_FB5_Msk
   CAN_F10R1_FB5_Msk=(0x1U << CAN_F10R1_FB5_Pos)
   CAN_F10R1_FB5_Pos=(5U)
   CAN_F10R1_FB6=CAN_F10R1_FB6_Msk
   CAN_F10R1_FB6_Msk=(0x1U << CAN_F10R1_FB6_Pos)
   CAN_F10R1_FB6_Pos=(6U)
   CAN_F10R1_FB7=CAN_F10R1_FB7_Msk
   CAN_F10R1_FB7_Msk=(0x1U << CAN_F10R1_FB7_Pos)
   CAN_F10R1_FB7_Pos=(7U)
   CAN_F10R1_FB8=CAN_F10R1_FB8_Msk
   CAN_F10R1_FB8_Msk=(0x1U << CAN_F10R1_FB8_Pos)
   CAN_F10R1_FB8_Pos=(8U)
   CAN_F10R1_FB9=CAN_F10R1_FB9_Msk
   CAN_F10R1_FB9_Msk=(0x1U << CAN_F10R1_FB9_Pos)
   CAN_F10R1_FB9_Pos=(9U)
   CAN_F10R2_FB0=CAN_F10R2_FB0_Msk
   CAN_F10R2_FB0_Msk=(0x1U << CAN_F10R2_FB0_Pos)
   CAN_F10R2_FB0_Pos=(0U)
   CAN_F10R2_FB10=CAN_F10R2_FB10_Msk
   CAN_F10R2_FB10_Msk=(0x1U << CAN_F10R2_FB10_Pos)
   CAN_F10R2_FB10_Pos=(10U)
   CAN_F10R2_FB11=CAN_F10R2_FB11_Msk
   CAN_F10R2_FB11_Msk=(0x1U << CAN_F10R2_FB11_Pos)
   CAN_F10R2_FB11_Pos=(11U)
   CAN_F10R2_FB12=CAN_F10R2_FB12_Msk
   CAN_F10R2_FB12_Msk=(0x1U << CAN_F10R2_FB12_Pos)
   CAN_F10R2_FB12_Pos=(12U)
   CAN_F10R2_FB13=CAN_F10R2_FB13_Msk
   CAN_F10R2_FB13_Msk=(0x1U << CAN_F10R2_FB13_Pos)
   CAN_F10R2_FB13_Pos=(13U)
   CAN_F10R2_FB14=CAN_F10R2_FB14_Msk
   CAN_F10R2_FB14_Msk=(0x1U << CAN_F10R2_FB14_Pos)
   CAN_F10R2_FB14_Pos=(14U)
   CAN_F10R2_FB15=CAN_F10R2_FB15_Msk
   CAN_F10R2_FB15_Msk=(0x1U << CAN_F10R2_FB15_Pos)
   CAN_F10R2_FB15_Pos=(15U)
   CAN_F10R2_FB16=CAN_F10R2_FB16_Msk
   CAN_F10R2_FB16_Msk=(0x1U << CAN_F10R2_FB16_Pos)
   CAN_F10R2_FB16_Pos=(16U)
   CAN_F10R2_FB17=CAN_F10R2_FB17_Msk
   CAN_F10R2_FB17_Msk=(0x1U << CAN_F10R2_FB17_Pos)
   CAN_F10R2_FB17_Pos=(17U)
   CAN_F10R2_FB18=CAN_F10R2_FB18_Msk
   CAN_F10R2_FB18_Msk=(0x1U << CAN_F10R2_FB18_Pos)
   CAN_F10R2_FB18_Pos=(18U)
   CAN_F10R2_FB19=CAN_F10R2_FB19_Msk
   CAN_F10R2_FB19_Msk=(0x1U << CAN_F10R2_FB19_Pos)
   CAN_F10R2_FB19_Pos=(19U)
   CAN_F10R2_FB1=CAN_F10R2_FB1_Msk
   CAN_F10R2_FB1_Msk=(0x1U << CAN_F10R2_FB1_Pos)
   CAN_F10R2_FB1_Pos=(1U)
   CAN_F10R2_FB20=CAN_F10R2_FB20_Msk
   CAN_F10R2_FB20_Msk=(0x1U << CAN_F10R2_FB20_Pos)
   CAN_F10R2_FB20_Pos=(20U)
   CAN_F10R2_FB21=CAN_F10R2_FB21_Msk
   CAN_F10R2_FB21_Msk=(0x1U << CAN_F10R2_FB21_Pos)
   CAN_F10R2_FB21_Pos=(21U)
   CAN_F10R2_FB22=CAN_F10R2_FB22_Msk
   CAN_F10R2_FB22_Msk=(0x1U << CAN_F10R2_FB22_Pos)
   CAN_F10R2_FB22_Pos=(22U)
   CAN_F10R2_FB23=CAN_F10R2_FB23_Msk
   CAN_F10R2_FB23_Msk=(0x1U << CAN_F10R2_FB23_Pos)
   CAN_F10R2_FB23_Pos=(23U)
   CAN_F10R2_FB24=CAN_F10R2_FB24_Msk
   CAN_F10R2_FB24_Msk=(0x1U << CAN_F10R2_FB24_Pos)
   CAN_F10R2_FB24_Pos=(24U)
   CAN_F10R2_FB25=CAN_F10R2_FB25_Msk
   CAN_F10R2_FB25_Msk=(0x1U << CAN_F10R2_FB25_Pos)
   CAN_F10R2_FB25_Pos=(25U)
   CAN_F10R2_FB26=CAN_F10R2_FB26_Msk
   CAN_F10R2_FB26_Msk=(0x1U << CAN_F10R2_FB26_Pos)
   CAN_F10R2_FB26_Pos=(26U)
   CAN_F10R2_FB27=CAN_F10R2_FB27_Msk
   CAN_F10R2_FB27_Msk=(0x1U << CAN_F10R2_FB27_Pos)
   CAN_F10R2_FB27_Pos=(27U)
   CAN_F10R2_FB28=CAN_F10R2_FB28_Msk
   CAN_F10R2_FB28_Msk=(0x1U << CAN_F10R2_FB28_Pos)
   CAN_F10R2_FB28_Pos=(28U)
   CAN_F10R2_FB29=CAN_F10R2_FB29_Msk
   CAN_F10R2_FB29_Msk=(0x1U << CAN_F10R2_FB29_Pos)
   CAN_F10R2_FB29_Pos=(29U)
   CAN_F10R2_FB2=CAN_F10R2_FB2_Msk
   CAN_F10R2_FB2_Msk=(0x1U << CAN_F10R2_FB2_Pos)
   CAN_F10R2_FB2_Pos=(2U)
   CAN_F10R2_FB30=CAN_F10R2_FB30_Msk
   CAN_F10R2_FB30_Msk=(0x1U << CAN_F10R2_FB30_Pos)
   CAN_F10R2_FB30_Pos=(30U)
   CAN_F10R2_FB31=CAN_F10R2_FB31_Msk
   CAN_F10R2_FB31_Msk=(0x1U << CAN_F10R2_FB31_Pos)
   CAN_F10R2_FB31_Pos=(31U)
   CAN_F10R2_FB3=CAN_F10R2_FB3_Msk
   CAN_F10R2_FB3_Msk=(0x1U << CAN_F10R2_FB3_Pos)
   CAN_F10R2_FB3_Pos=(3U)
   CAN_F10R2_FB4=CAN_F10R2_FB4_Msk
   CAN_F10R2_FB4_Msk=(0x1U << CAN_F10R2_FB4_Pos)
   CAN_F10R2_FB4_Pos=(4U)
   CAN_F10R2_FB5=CAN_F10R2_FB5_Msk
   CAN_F10R2_FB5_Msk=(0x1U << CAN_F10R2_FB5_Pos)
   CAN_F10R2_FB5_Pos=(5U)
   CAN_F10R2_FB6=CAN_F10R2_FB6_Msk
   CAN_F10R2_FB6_Msk=(0x1U << CAN_F10R2_FB6_Pos)
   CAN_F10R2_FB6_Pos=(6U)
   CAN_F10R2_FB7=CAN_F10R2_FB7_Msk
   CAN_F10R2_FB7_Msk=(0x1U << CAN_F10R2_FB7_Pos)
   CAN_F10R2_FB7_Pos=(7U)
   CAN_F10R2_FB8=CAN_F10R2_FB8_Msk
   CAN_F10R2_FB8_Msk=(0x1U << CAN_F10R2_FB8_Pos)
   CAN_F10R2_FB8_Pos=(8U)
   CAN_F10R2_FB9=CAN_F10R2_FB9_Msk
   CAN_F10R2_FB9_Msk=(0x1U << CAN_F10R2_FB9_Pos)
   CAN_F10R2_FB9_Pos=(9U)
   CAN_F11R1_FB0=CAN_F11R1_FB0_Msk
   CAN_F11R1_FB0_Msk=(0x1U << CAN_F11R1_FB0_Pos)
   CAN_F11R1_FB0_Pos=(0U)
   CAN_F11R1_FB10=CAN_F11R1_FB10_Msk
   CAN_F11R1_FB10_Msk=(0x1U << CAN_F11R1_FB10_Pos)
   CAN_F11R1_FB10_Pos=(10U)
   CAN_F11R1_FB11=CAN_F11R1_FB11_Msk
   CAN_F11R1_FB11_Msk=(0x1U << CAN_F11R1_FB11_Pos)
   CAN_F11R1_FB11_Pos=(11U)
   CAN_F11R1_FB12=CAN_F11R1_FB12_Msk
   CAN_F11R1_FB12_Msk=(0x1U << CAN_F11R1_FB12_Pos)
   CAN_F11R1_FB12_Pos=(12U)
   CAN_F11R1_FB13=CAN_F11R1_FB13_Msk
   CAN_F11R1_FB13_Msk=(0x1U << CAN_F11R1_FB13_Pos)
   CAN_F11R1_FB13_Pos=(13U)
   CAN_F11R1_FB14=CAN_F11R1_FB14_Msk
   CAN_F11R1_FB14_Msk=(0x1U << CAN_F11R1_FB14_Pos)
   CAN_F11R1_FB14_Pos=(14U)
   CAN_F11R1_FB15=CAN_F11R1_FB15_Msk
   CAN_F11R1_FB15_Msk=(0x1U << CAN_F11R1_FB15_Pos)
   CAN_F11R1_FB15_Pos=(15U)
   CAN_F11R1_FB16=CAN_F11R1_FB16_Msk
   CAN_F11R1_FB16_Msk=(0x1U << CAN_F11R1_FB16_Pos)
   CAN_F11R1_FB16_Pos=(16U)
   CAN_F11R1_FB17=CAN_F11R1_FB17_Msk
   CAN_F11R1_FB17_Msk=(0x1U << CAN_F11R1_FB17_Pos)
   CAN_F11R1_FB17_Pos=(17U)
   CAN_F11R1_FB18=CAN_F11R1_FB18_Msk
   CAN_F11R1_FB18_Msk=(0x1U << CAN_F11R1_FB18_Pos)
   CAN_F11R1_FB18_Pos=(18U)
   CAN_F11R1_FB19=CAN_F11R1_FB19_Msk
   CAN_F11R1_FB19_Msk=(0x1U << CAN_F11R1_FB19_Pos)
   CAN_F11R1_FB19_Pos=(19U)
   CAN_F11R1_FB1=CAN_F11R1_FB1_Msk
   CAN_F11R1_FB1_Msk=(0x1U << CAN_F11R1_FB1_Pos)
   CAN_F11R1_FB1_Pos=(1U)
   CAN_F11R1_FB20=CAN_F11R1_FB20_Msk
   CAN_F11R1_FB20_Msk=(0x1U << CAN_F11R1_FB20_Pos)
   CAN_F11R1_FB20_Pos=(20U)
   CAN_F11R1_FB21=CAN_F11R1_FB21_Msk
   CAN_F11R1_FB21_Msk=(0x1U << CAN_F11R1_FB21_Pos)
   CAN_F11R1_FB21_Pos=(21U)
   CAN_F11R1_FB22=CAN_F11R1_FB22_Msk
   CAN_F11R1_FB22_Msk=(0x1U << CAN_F11R1_FB22_Pos)
   CAN_F11R1_FB22_Pos=(22U)
   CAN_F11R1_FB23=CAN_F11R1_FB23_Msk
   CAN_F11R1_FB23_Msk=(0x1U << CAN_F11R1_FB23_Pos)
   CAN_F11R1_FB23_Pos=(23U)
   CAN_F11R1_FB24=CAN_F11R1_FB24_Msk
   CAN_F11R1_FB24_Msk=(0x1U << CAN_F11R1_FB24_Pos)
   CAN_F11R1_FB24_Pos=(24U)
   CAN_F11R1_FB25=CAN_F11R1_FB25_Msk
   CAN_F11R1_FB25_Msk=(0x1U << CAN_F11R1_FB25_Pos)
   CAN_F11R1_FB25_Pos=(25U)
   CAN_F11R1_FB26=CAN_F11R1_FB26_Msk
   CAN_F11R1_FB26_Msk=(0x1U << CAN_F11R1_FB26_Pos)
   CAN_F11R1_FB26_Pos=(26U)
   CAN_F11R1_FB27=CAN_F11R1_FB27_Msk
   CAN_F11R1_FB27_Msk=(0x1U << CAN_F11R1_FB27_Pos)
   CAN_F11R1_FB27_Pos=(27U)
   CAN_F11R1_FB28=CAN_F11R1_FB28_Msk
   CAN_F11R1_FB28_Msk=(0x1U << CAN_F11R1_FB28_Pos)
   CAN_F11R1_FB28_Pos=(28U)
   CAN_F11R1_FB29=CAN_F11R1_FB29_Msk
   CAN_F11R1_FB29_Msk=(0x1U << CAN_F11R1_FB29_Pos)
   CAN_F11R1_FB29_Pos=(29U)
   CAN_F11R1_FB2=CAN_F11R1_FB2_Msk
   CAN_F11R1_FB2_Msk=(0x1U << CAN_F11R1_FB2_Pos)
   CAN_F11R1_FB2_Pos=(2U)
   CAN_F11R1_FB30=CAN_F11R1_FB30_Msk
   CAN_F11R1_FB30_Msk=(0x1U << CAN_F11R1_FB30_Pos)
   CAN_F11R1_FB30_Pos=(30U)
   CAN_F11R1_FB31=CAN_F11R1_FB31_Msk
   CAN_F11R1_FB31_Msk=(0x1U << CAN_F11R1_FB31_Pos)
   CAN_F11R1_FB31_Pos=(31U)
   CAN_F11R1_FB3=CAN_F11R1_FB3_Msk
   CAN_F11R1_FB3_Msk=(0x1U << CAN_F11R1_FB3_Pos)
   CAN_F11R1_FB3_Pos=(3U)
   CAN_F11R1_FB4=CAN_F11R1_FB4_Msk
   CAN_F11R1_FB4_Msk=(0x1U << CAN_F11R1_FB4_Pos)
   CAN_F11R1_FB4_Pos=(4U)
   CAN_F11R1_FB5=CAN_F11R1_FB5_Msk
   CAN_F11R1_FB5_Msk=(0x1U << CAN_F11R1_FB5_Pos)
   CAN_F11R1_FB5_Pos=(5U)
   CAN_F11R1_FB6=CAN_F11R1_FB6_Msk
   CAN_F11R1_FB6_Msk=(0x1U << CAN_F11R1_FB6_Pos)
   CAN_F11R1_FB6_Pos=(6U)
   CAN_F11R1_FB7=CAN_F11R1_FB7_Msk
   CAN_F11R1_FB7_Msk=(0x1U << CAN_F11R1_FB7_Pos)
   CAN_F11R1_FB7_Pos=(7U)
   CAN_F11R1_FB8=CAN_F11R1_FB8_Msk
   CAN_F11R1_FB8_Msk=(0x1U << CAN_F11R1_FB8_Pos)
   CAN_F11R1_FB8_Pos=(8U)
   CAN_F11R1_FB9=CAN_F11R1_FB9_Msk
   CAN_F11R1_FB9_Msk=(0x1U << CAN_F11R1_FB9_Pos)
   CAN_F11R1_FB9_Pos=(9U)
   CAN_F11R2_FB0=CAN_F11R2_FB0_Msk
   CAN_F11R2_FB0_Msk=(0x1U << CAN_F11R2_FB0_Pos)
   CAN_F11R2_FB0_Pos=(0U)
   CAN_F11R2_FB10=CAN_F11R2_FB10_Msk
   CAN_F11R2_FB10_Msk=(0x1U << CAN_F11R2_FB10_Pos)
   CAN_F11R2_FB10_Pos=(10U)
   CAN_F11R2_FB11=CAN_F11R2_FB11_Msk
   CAN_F11R2_FB11_Msk=(0x1U << CAN_F11R2_FB11_Pos)
   CAN_F11R2_FB11_Pos=(11U)
   CAN_F11R2_FB12=CAN_F11R2_FB12_Msk
   CAN_F11R2_FB12_Msk=(0x1U << CAN_F11R2_FB12_Pos)
   CAN_F11R2_FB12_Pos=(12U)
   CAN_F11R2_FB13=CAN_F11R2_FB13_Msk
   CAN_F11R2_FB13_Msk=(0x1U << CAN_F11R2_FB13_Pos)
   CAN_F11R2_FB13_Pos=(13U)
   CAN_F11R2_FB14=CAN_F11R2_FB14_Msk
   CAN_F11R2_FB14_Msk=(0x1U << CAN_F11R2_FB14_Pos)
   CAN_F11R2_FB14_Pos=(14U)
   CAN_F11R2_FB15=CAN_F11R2_FB15_Msk
   CAN_F11R2_FB15_Msk=(0x1U << CAN_F11R2_FB15_Pos)
   CAN_F11R2_FB15_Pos=(15U)
   CAN_F11R2_FB16=CAN_F11R2_FB16_Msk
   CAN_F11R2_FB16_Msk=(0x1U << CAN_F11R2_FB16_Pos)
   CAN_F11R2_FB16_Pos=(16U)
   CAN_F11R2_FB17=CAN_F11R2_FB17_Msk
   CAN_F11R2_FB17_Msk=(0x1U << CAN_F11R2_FB17_Pos)
   CAN_F11R2_FB17_Pos=(17U)
   CAN_F11R2_FB18=CAN_F11R2_FB18_Msk
   CAN_F11R2_FB18_Msk=(0x1U << CAN_F11R2_FB18_Pos)
   CAN_F11R2_FB18_Pos=(18U)
   CAN_F11R2_FB19=CAN_F11R2_FB19_Msk
   CAN_F11R2_FB19_Msk=(0x1U << CAN_F11R2_FB19_Pos)
   CAN_F11R2_FB19_Pos=(19U)
   CAN_F11R2_FB1=CAN_F11R2_FB1_Msk
   CAN_F11R2_FB1_Msk=(0x1U << CAN_F11R2_FB1_Pos)
   CAN_F11R2_FB1_Pos=(1U)
   CAN_F11R2_FB20=CAN_F11R2_FB20_Msk
   CAN_F11R2_FB20_Msk=(0x1U << CAN_F11R2_FB20_Pos)
   CAN_F11R2_FB20_Pos=(20U)
   CAN_F11R2_FB21=CAN_F11R2_FB21_Msk
   CAN_F11R2_FB21_Msk=(0x1U << CAN_F11R2_FB21_Pos)
   CAN_F11R2_FB21_Pos=(21U)
   CAN_F11R2_FB22=CAN_F11R2_FB22_Msk
   CAN_F11R2_FB22_Msk=(0x1U << CAN_F11R2_FB22_Pos)
   CAN_F11R2_FB22_Pos=(22U)
   CAN_F11R2_FB23=CAN_F11R2_FB23_Msk
   CAN_F11R2_FB23_Msk=(0x1U << CAN_F11R2_FB23_Pos)
   CAN_F11R2_FB23_Pos=(23U)
   CAN_F11R2_FB24=CAN_F11R2_FB24_Msk
   CAN_F11R2_FB24_Msk=(0x1U << CAN_F11R2_FB24_Pos)
   CAN_F11R2_FB24_Pos=(24U)
   CAN_F11R2_FB25=CAN_F11R2_FB25_Msk
   CAN_F11R2_FB25_Msk=(0x1U << CAN_F11R2_FB25_Pos)
   CAN_F11R2_FB25_Pos=(25U)
   CAN_F11R2_FB26=CAN_F11R2_FB26_Msk
   CAN_F11R2_FB26_Msk=(0x1U << CAN_F11R2_FB26_Pos)
   CAN_F11R2_FB26_Pos=(26U)
   CAN_F11R2_FB27=CAN_F11R2_FB27_Msk
   CAN_F11R2_FB27_Msk=(0x1U << CAN_F11R2_FB27_Pos)
   CAN_F11R2_FB27_Pos=(27U)
   CAN_F11R2_FB28=CAN_F11R2_FB28_Msk
   CAN_F11R2_FB28_Msk=(0x1U << CAN_F11R2_FB28_Pos)
   CAN_F11R2_FB28_Pos=(28U)
   CAN_F11R2_FB29=CAN_F11R2_FB29_Msk
   CAN_F11R2_FB29_Msk=(0x1U << CAN_F11R2_FB29_Pos)
   CAN_F11R2_FB29_Pos=(29U)
   CAN_F11R2_FB2=CAN_F11R2_FB2_Msk
   CAN_F11R2_FB2_Msk=(0x1U << CAN_F11R2_FB2_Pos)
   CAN_F11R2_FB2_Pos=(2U)
   CAN_F11R2_FB30=CAN_F11R2_FB30_Msk
   CAN_F11R2_FB30_Msk=(0x1U << CAN_F11R2_FB30_Pos)
   CAN_F11R2_FB30_Pos=(30U)
   CAN_F11R2_FB31=CAN_F11R2_FB31_Msk
   CAN_F11R2_FB31_Msk=(0x1U << CAN_F11R2_FB31_Pos)
   CAN_F11R2_FB31_Pos=(31U)
   CAN_F11R2_FB3=CAN_F11R2_FB3_Msk
   CAN_F11R2_FB3_Msk=(0x1U << CAN_F11R2_FB3_Pos)
   CAN_F11R2_FB3_Pos=(3U)
   CAN_F11R2_FB4=CAN_F11R2_FB4_Msk
   CAN_F11R2_FB4_Msk=(0x1U << CAN_F11R2_FB4_Pos)
   CAN_F11R2_FB4_Pos=(4U)
   CAN_F11R2_FB5=CAN_F11R2_FB5_Msk
   CAN_F11R2_FB5_Msk=(0x1U << CAN_F11R2_FB5_Pos)
   CAN_F11R2_FB5_Pos=(5U)
   CAN_F11R2_FB6=CAN_F11R2_FB6_Msk
   CAN_F11R2_FB6_Msk=(0x1U << CAN_F11R2_FB6_Pos)
   CAN_F11R2_FB6_Pos=(6U)
   CAN_F11R2_FB7=CAN_F11R2_FB7_Msk
   CAN_F11R2_FB7_Msk=(0x1U << CAN_F11R2_FB7_Pos)
   CAN_F11R2_FB7_Pos=(7U)
   CAN_F11R2_FB8=CAN_F11R2_FB8_Msk
   CAN_F11R2_FB8_Msk=(0x1U << CAN_F11R2_FB8_Pos)
   CAN_F11R2_FB8_Pos=(8U)
   CAN_F11R2_FB9=CAN_F11R2_FB9_Msk
   CAN_F11R2_FB9_Msk=(0x1U << CAN_F11R2_FB9_Pos)
   CAN_F11R2_FB9_Pos=(9U)
   CAN_F12R1_FB0=CAN_F12R1_FB0_Msk
   CAN_F12R1_FB0_Msk=(0x1U << CAN_F12R1_FB0_Pos)
   CAN_F12R1_FB0_Pos=(0U)
   CAN_F12R1_FB10=CAN_F12R1_FB10_Msk
   CAN_F12R1_FB10_Msk=(0x1U << CAN_F12R1_FB10_Pos)
   CAN_F12R1_FB10_Pos=(10U)
   CAN_F12R1_FB11=CAN_F12R1_FB11_Msk
   CAN_F12R1_FB11_Msk=(0x1U << CAN_F12R1_FB11_Pos)
   CAN_F12R1_FB11_Pos=(11U)
   CAN_F12R1_FB12=CAN_F12R1_FB12_Msk
   CAN_F12R1_FB12_Msk=(0x1U << CAN_F12R1_FB12_Pos)
   CAN_F12R1_FB12_Pos=(12U)
   CAN_F12R1_FB13=CAN_F12R1_FB13_Msk
   CAN_F12R1_FB13_Msk=(0x1U << CAN_F12R1_FB13_Pos)
   CAN_F12R1_FB13_Pos=(13U)
   CAN_F12R1_FB14=CAN_F12R1_FB14_Msk
   CAN_F12R1_FB14_Msk=(0x1U << CAN_F12R1_FB14_Pos)
   CAN_F12R1_FB14_Pos=(14U)
   CAN_F12R1_FB15=CAN_F12R1_FB15_Msk
   CAN_F12R1_FB15_Msk=(0x1U << CAN_F12R1_FB15_Pos)
   CAN_F12R1_FB15_Pos=(15U)
   CAN_F12R1_FB16=CAN_F12R1_FB16_Msk
   CAN_F12R1_FB16_Msk=(0x1U << CAN_F12R1_FB16_Pos)
   CAN_F12R1_FB16_Pos=(16U)
   CAN_F12R1_FB17=CAN_F12R1_FB17_Msk
   CAN_F12R1_FB17_Msk=(0x1U << CAN_F12R1_FB17_Pos)
   CAN_F12R1_FB17_Pos=(17U)
   CAN_F12R1_FB18=CAN_F12R1_FB18_Msk
   CAN_F12R1_FB18_Msk=(0x1U << CAN_F12R1_FB18_Pos)
   CAN_F12R1_FB18_Pos=(18U)
   CAN_F12R1_FB19=CAN_F12R1_FB19_Msk
   CAN_F12R1_FB19_Msk=(0x1U << CAN_F12R1_FB19_Pos)
   CAN_F12R1_FB19_Pos=(19U)
   CAN_F12R1_FB1=CAN_F12R1_FB1_Msk
   CAN_F12R1_FB1_Msk=(0x1U << CAN_F12R1_FB1_Pos)
   CAN_F12R1_FB1_Pos=(1U)
   CAN_F12R1_FB20=CAN_F12R1_FB20_Msk
   CAN_F12R1_FB20_Msk=(0x1U << CAN_F12R1_FB20_Pos)
   CAN_F12R1_FB20_Pos=(20U)
   CAN_F12R1_FB21=CAN_F12R1_FB21_Msk
   CAN_F12R1_FB21_Msk=(0x1U << CAN_F12R1_FB21_Pos)
   CAN_F12R1_FB21_Pos=(21U)
   CAN_F12R1_FB22=CAN_F12R1_FB22_Msk
   CAN_F12R1_FB22_Msk=(0x1U << CAN_F12R1_FB22_Pos)
   CAN_F12R1_FB22_Pos=(22U)
   CAN_F12R1_FB23=CAN_F12R1_FB23_Msk
   CAN_F12R1_FB23_Msk=(0x1U << CAN_F12R1_FB23_Pos)
   CAN_F12R1_FB23_Pos=(23U)
   CAN_F12R1_FB24=CAN_F12R1_FB24_Msk
   CAN_F12R1_FB24_Msk=(0x1U << CAN_F12R1_FB24_Pos)
   CAN_F12R1_FB24_Pos=(24U)
   CAN_F12R1_FB25=CAN_F12R1_FB25_Msk
   CAN_F12R1_FB25_Msk=(0x1U << CAN_F12R1_FB25_Pos)
   CAN_F12R1_FB25_Pos=(25U)
   CAN_F12R1_FB26=CAN_F12R1_FB26_Msk
   CAN_F12R1_FB26_Msk=(0x1U << CAN_F12R1_FB26_Pos)
   CAN_F12R1_FB26_Pos=(26U)
   CAN_F12R1_FB27=CAN_F12R1_FB27_Msk
   CAN_F12R1_FB27_Msk=(0x1U << CAN_F12R1_FB27_Pos)
   CAN_F12R1_FB27_Pos=(27U)
   CAN_F12R1_FB28=CAN_F12R1_FB28_Msk
   CAN_F12R1_FB28_Msk=(0x1U << CAN_F12R1_FB28_Pos)
   CAN_F12R1_FB28_Pos=(28U)
   CAN_F12R1_FB29=CAN_F12R1_FB29_Msk
   CAN_F12R1_FB29_Msk=(0x1U << CAN_F12R1_FB29_Pos)
   CAN_F12R1_FB29_Pos=(29U)
   CAN_F12R1_FB2=CAN_F12R1_FB2_Msk
   CAN_F12R1_FB2_Msk=(0x1U << CAN_F12R1_FB2_Pos)
   CAN_F12R1_FB2_Pos=(2U)
   CAN_F12R1_FB30=CAN_F12R1_FB30_Msk
   CAN_F12R1_FB30_Msk=(0x1U << CAN_F12R1_FB30_Pos)
   CAN_F12R1_FB30_Pos=(30U)
   CAN_F12R1_FB31=CAN_F12R1_FB31_Msk
   CAN_F12R1_FB31_Msk=(0x1U << CAN_F12R1_FB31_Pos)
   CAN_F12R1_FB31_Pos=(31U)
   CAN_F12R1_FB3=CAN_F12R1_FB3_Msk
   CAN_F12R1_FB3_Msk=(0x1U << CAN_F12R1_FB3_Pos)
   CAN_F12R1_FB3_Pos=(3U)
   CAN_F12R1_FB4=CAN_F12R1_FB4_Msk
   CAN_F12R1_FB4_Msk=(0x1U << CAN_F12R1_FB4_Pos)
   CAN_F12R1_FB4_Pos=(4U)
   CAN_F12R1_FB5=CAN_F12R1_FB5_Msk
   CAN_F12R1_FB5_Msk=(0x1U << CAN_F12R1_FB5_Pos)
   CAN_F12R1_FB5_Pos=(5U)
   CAN_F12R1_FB6=CAN_F12R1_FB6_Msk
   CAN_F12R1_FB6_Msk=(0x1U << CAN_F12R1_FB6_Pos)
   CAN_F12R1_FB6_Pos=(6U)
   CAN_F12R1_FB7=CAN_F12R1_FB7_Msk
   CAN_F12R1_FB7_Msk=(0x1U << CAN_F12R1_FB7_Pos)
   CAN_F12R1_FB7_Pos=(7U)
   CAN_F12R1_FB8=CAN_F12R1_FB8_Msk
   CAN_F12R1_FB8_Msk=(0x1U << CAN_F12R1_FB8_Pos)
   CAN_F12R1_FB8_Pos=(8U)
   CAN_F12R1_FB9=CAN_F12R1_FB9_Msk
   CAN_F12R1_FB9_Msk=(0x1U << CAN_F12R1_FB9_Pos)
   CAN_F12R1_FB9_Pos=(9U)
   CAN_F12R2_FB0=CAN_F12R2_FB0_Msk
   CAN_F12R2_FB0_Msk=(0x1U << CAN_F12R2_FB0_Pos)
   CAN_F12R2_FB0_Pos=(0U)
   CAN_F12R2_FB10=CAN_F12R2_FB10_Msk
   CAN_F12R2_FB10_Msk=(0x1U << CAN_F12R2_FB10_Pos)
   CAN_F12R2_FB10_Pos=(10U)
   CAN_F12R2_FB11=CAN_F12R2_FB11_Msk
   CAN_F12R2_FB11_Msk=(0x1U << CAN_F12R2_FB11_Pos)
   CAN_F12R2_FB11_Pos=(11U)
   CAN_F12R2_FB12=CAN_F12R2_FB12_Msk
   CAN_F12R2_FB12_Msk=(0x1U << CAN_F12R2_FB12_Pos)
   CAN_F12R2_FB12_Pos=(12U)
   CAN_F12R2_FB13=CAN_F12R2_FB13_Msk
   CAN_F12R2_FB13_Msk=(0x1U << CAN_F12R2_FB13_Pos)
   CAN_F12R2_FB13_Pos=(13U)
   CAN_F12R2_FB14=CAN_F12R2_FB14_Msk
   CAN_F12R2_FB14_Msk=(0x1U << CAN_F12R2_FB14_Pos)
   CAN_F12R2_FB14_Pos=(14U)
   CAN_F12R2_FB15=CAN_F12R2_FB15_Msk
   CAN_F12R2_FB15_Msk=(0x1U << CAN_F12R2_FB15_Pos)
   CAN_F12R2_FB15_Pos=(15U)
   CAN_F12R2_FB16=CAN_F12R2_FB16_Msk
   CAN_F12R2_FB16_Msk=(0x1U << CAN_F12R2_FB16_Pos)
   CAN_F12R2_FB16_Pos=(16U)
   CAN_F12R2_FB17=CAN_F12R2_FB17_Msk
   CAN_F12R2_FB17_Msk=(0x1U << CAN_F12R2_FB17_Pos)
   CAN_F12R2_FB17_Pos=(17U)
   CAN_F12R2_FB18=CAN_F12R2_FB18_Msk
   CAN_F12R2_FB18_Msk=(0x1U << CAN_F12R2_FB18_Pos)
   CAN_F12R2_FB18_Pos=(18U)
   CAN_F12R2_FB19=CAN_F12R2_FB19_Msk
   CAN_F12R2_FB19_Msk=(0x1U << CAN_F12R2_FB19_Pos)
   CAN_F12R2_FB19_Pos=(19U)
   CAN_F12R2_FB1=CAN_F12R2_FB1_Msk
   CAN_F12R2_FB1_Msk=(0x1U << CAN_F12R2_FB1_Pos)
   CAN_F12R2_FB1_Pos=(1U)
   CAN_F12R2_FB20=CAN_F12R2_FB20_Msk
   CAN_F12R2_FB20_Msk=(0x1U << CAN_F12R2_FB20_Pos)
   CAN_F12R2_FB20_Pos=(20U)
   CAN_F12R2_FB21=CAN_F12R2_FB21_Msk
   CAN_F12R2_FB21_Msk=(0x1U << CAN_F12R2_FB21_Pos)
   CAN_F12R2_FB21_Pos=(21U)
   CAN_F12R2_FB22=CAN_F12R2_FB22_Msk
   CAN_F12R2_FB22_Msk=(0x1U << CAN_F12R2_FB22_Pos)
   CAN_F12R2_FB22_Pos=(22U)
   CAN_F12R2_FB23=CAN_F12R2_FB23_Msk
   CAN_F12R2_FB23_Msk=(0x1U << CAN_F12R2_FB23_Pos)
   CAN_F12R2_FB23_Pos=(23U)
   CAN_F12R2_FB24=CAN_F12R2_FB24_Msk
   CAN_F12R2_FB24_Msk=(0x1U << CAN_F12R2_FB24_Pos)
   CAN_F12R2_FB24_Pos=(24U)
   CAN_F12R2_FB25=CAN_F12R2_FB25_Msk
   CAN_F12R2_FB25_Msk=(0x1U << CAN_F12R2_FB25_Pos)
   CAN_F12R2_FB25_Pos=(25U)
   CAN_F12R2_FB26=CAN_F12R2_FB26_Msk
   CAN_F12R2_FB26_Msk=(0x1U << CAN_F12R2_FB26_Pos)
   CAN_F12R2_FB26_Pos=(26U)
   CAN_F12R2_FB27=CAN_F12R2_FB27_Msk
   CAN_F12R2_FB27_Msk=(0x1U << CAN_F12R2_FB27_Pos)
   CAN_F12R2_FB27_Pos=(27U)
   CAN_F12R2_FB28=CAN_F12R2_FB28_Msk
   CAN_F12R2_FB28_Msk=(0x1U << CAN_F12R2_FB28_Pos)
   CAN_F12R2_FB28_Pos=(28U)
   CAN_F12R2_FB29=CAN_F12R2_FB29_Msk
   CAN_F12R2_FB29_Msk=(0x1U << CAN_F12R2_FB29_Pos)
   CAN_F12R2_FB29_Pos=(29U)
   CAN_F12R2_FB2=CAN_F12R2_FB2_Msk
   CAN_F12R2_FB2_Msk=(0x1U << CAN_F12R2_FB2_Pos)
   CAN_F12R2_FB2_Pos=(2U)
   CAN_F12R2_FB30=CAN_F12R2_FB30_Msk
   CAN_F12R2_FB30_Msk=(0x1U << CAN_F12R2_FB30_Pos)
   CAN_F12R2_FB30_Pos=(30U)
   CAN_F12R2_FB31=CAN_F12R2_FB31_Msk
   CAN_F12R2_FB31_Msk=(0x1U << CAN_F12R2_FB31_Pos)
   CAN_F12R2_FB31_Pos=(31U)
   CAN_F12R2_FB3=CAN_F12R2_FB3_Msk
   CAN_F12R2_FB3_Msk=(0x1U << CAN_F12R2_FB3_Pos)
   CAN_F12R2_FB3_Pos=(3U)
   CAN_F12R2_FB4=CAN_F12R2_FB4_Msk
   CAN_F12R2_FB4_Msk=(0x1U << CAN_F12R2_FB4_Pos)
   CAN_F12R2_FB4_Pos=(4U)
   CAN_F12R2_FB5=CAN_F12R2_FB5_Msk
   CAN_F12R2_FB5_Msk=(0x1U << CAN_F12R2_FB5_Pos)
   CAN_F12R2_FB5_Pos=(5U)
   CAN_F12R2_FB6=CAN_F12R2_FB6_Msk
   CAN_F12R2_FB6_Msk=(0x1U << CAN_F12R2_FB6_Pos)
   CAN_F12R2_FB6_Pos=(6U)
   CAN_F12R2_FB7=CAN_F12R2_FB7_Msk
   CAN_F12R2_FB7_Msk=(0x1U << CAN_F12R2_FB7_Pos)
   CAN_F12R2_FB7_Pos=(7U)
   CAN_F12R2_FB8=CAN_F12R2_FB8_Msk
   CAN_F12R2_FB8_Msk=(0x1U << CAN_F12R2_FB8_Pos)
   CAN_F12R2_FB8_Pos=(8U)
   CAN_F12R2_FB9=CAN_F12R2_FB9_Msk
   CAN_F12R2_FB9_Msk=(0x1U << CAN_F12R2_FB9_Pos)
   CAN_F12R2_FB9_Pos=(9U)
   CAN_F13R1_FB0=CAN_F13R1_FB0_Msk
   CAN_F13R1_FB0_Msk=(0x1U << CAN_F13R1_FB0_Pos)
   CAN_F13R1_FB0_Pos=(0U)
   CAN_F13R1_FB10=CAN_F13R1_FB10_Msk
   CAN_F13R1_FB10_Msk=(0x1U << CAN_F13R1_FB10_Pos)
   CAN_F13R1_FB10_Pos=(10U)
   CAN_F13R1_FB11=CAN_F13R1_FB11_Msk
   CAN_F13R1_FB11_Msk=(0x1U << CAN_F13R1_FB11_Pos)
   CAN_F13R1_FB11_Pos=(11U)
   CAN_F13R1_FB12=CAN_F13R1_FB12_Msk
   CAN_F13R1_FB12_Msk=(0x1U << CAN_F13R1_FB12_Pos)
   CAN_F13R1_FB12_Pos=(12U)
   CAN_F13R1_FB13=CAN_F13R1_FB13_Msk
   CAN_F13R1_FB13_Msk=(0x1U << CAN_F13R1_FB13_Pos)
   CAN_F13R1_FB13_Pos=(13U)
   CAN_F13R1_FB14=CAN_F13R1_FB14_Msk
   CAN_F13R1_FB14_Msk=(0x1U << CAN_F13R1_FB14_Pos)
   CAN_F13R1_FB14_Pos=(14U)
   CAN_F13R1_FB15=CAN_F13R1_FB15_Msk
   CAN_F13R1_FB15_Msk=(0x1U << CAN_F13R1_FB15_Pos)
   CAN_F13R1_FB15_Pos=(15U)
   CAN_F13R1_FB16=CAN_F13R1_FB16_Msk
   CAN_F13R1_FB16_Msk=(0x1U << CAN_F13R1_FB16_Pos)
   CAN_F13R1_FB16_Pos=(16U)
   CAN_F13R1_FB17=CAN_F13R1_FB17_Msk
   CAN_F13R1_FB17_Msk=(0x1U << CAN_F13R1_FB17_Pos)
   CAN_F13R1_FB17_Pos=(17U)
   CAN_F13R1_FB18=CAN_F13R1_FB18_Msk
   CAN_F13R1_FB18_Msk=(0x1U << CAN_F13R1_FB18_Pos)
   CAN_F13R1_FB18_Pos=(18U)
   CAN_F13R1_FB19=CAN_F13R1_FB19_Msk
   CAN_F13R1_FB19_Msk=(0x1U << CAN_F13R1_FB19_Pos)
   CAN_F13R1_FB19_Pos=(19U)
   CAN_F13R1_FB1=CAN_F13R1_FB1_Msk
   CAN_F13R1_FB1_Msk=(0x1U << CAN_F13R1_FB1_Pos)
   CAN_F13R1_FB1_Pos=(1U)
   CAN_F13R1_FB20=CAN_F13R1_FB20_Msk
   CAN_F13R1_FB20_Msk=(0x1U << CAN_F13R1_FB20_Pos)
   CAN_F13R1_FB20_Pos=(20U)
   CAN_F13R1_FB21=CAN_F13R1_FB21_Msk
   CAN_F13R1_FB21_Msk=(0x1U << CAN_F13R1_FB21_Pos)
   CAN_F13R1_FB21_Pos=(21U)
   CAN_F13R1_FB22=CAN_F13R1_FB22_Msk
   CAN_F13R1_FB22_Msk=(0x1U << CAN_F13R1_FB22_Pos)
   CAN_F13R1_FB22_Pos=(22U)
   CAN_F13R1_FB23=CAN_F13R1_FB23_Msk
   CAN_F13R1_FB23_Msk=(0x1U << CAN_F13R1_FB23_Pos)
   CAN_F13R1_FB23_Pos=(23U)
   CAN_F13R1_FB24=CAN_F13R1_FB24_Msk
   CAN_F13R1_FB24_Msk=(0x1U << CAN_F13R1_FB24_Pos)
   CAN_F13R1_FB24_Pos=(24U)
   CAN_F13R1_FB25=CAN_F13R1_FB25_Msk
   CAN_F13R1_FB25_Msk=(0x1U << CAN_F13R1_FB25_Pos)
   CAN_F13R1_FB25_Pos=(25U)
   CAN_F13R1_FB26=CAN_F13R1_FB26_Msk
   CAN_F13R1_FB26_Msk=(0x1U << CAN_F13R1_FB26_Pos)
   CAN_F13R1_FB26_Pos=(26U)
   CAN_F13R1_FB27=CAN_F13R1_FB27_Msk
   CAN_F13R1_FB27_Msk=(0x1U << CAN_F13R1_FB27_Pos)
   CAN_F13R1_FB27_Pos=(27U)
   CAN_F13R1_FB28=CAN_F13R1_FB28_Msk
   CAN_F13R1_FB28_Msk=(0x1U << CAN_F13R1_FB28_Pos)
   CAN_F13R1_FB28_Pos=(28U)
   CAN_F13R1_FB29=CAN_F13R1_FB29_Msk
   CAN_F13R1_FB29_Msk=(0x1U << CAN_F13R1_FB29_Pos)
   CAN_F13R1_FB29_Pos=(29U)
   CAN_F13R1_FB2=CAN_F13R1_FB2_Msk
   CAN_F13R1_FB2_Msk=(0x1U << CAN_F13R1_FB2_Pos)
   CAN_F13R1_FB2_Pos=(2U)
   CAN_F13R1_FB30=CAN_F13R1_FB30_Msk
   CAN_F13R1_FB30_Msk=(0x1U << CAN_F13R1_FB30_Pos)
   CAN_F13R1_FB30_Pos=(30U)
   CAN_F13R1_FB31=CAN_F13R1_FB31_Msk
   CAN_F13R1_FB31_Msk=(0x1U << CAN_F13R1_FB31_Pos)
   CAN_F13R1_FB31_Pos=(31U)
   CAN_F13R1_FB3=CAN_F13R1_FB3_Msk
   CAN_F13R1_FB3_Msk=(0x1U << CAN_F13R1_FB3_Pos)
   CAN_F13R1_FB3_Pos=(3U)
   CAN_F13R1_FB4=CAN_F13R1_FB4_Msk
   CAN_F13R1_FB4_Msk=(0x1U << CAN_F13R1_FB4_Pos)
   CAN_F13R1_FB4_Pos=(4U)
   CAN_F13R1_FB5=CAN_F13R1_FB5_Msk
   CAN_F13R1_FB5_Msk=(0x1U << CAN_F13R1_FB5_Pos)
   CAN_F13R1_FB5_Pos=(5U)
   CAN_F13R1_FB6=CAN_F13R1_FB6_Msk
   CAN_F13R1_FB6_Msk=(0x1U << CAN_F13R1_FB6_Pos)
   CAN_F13R1_FB6_Pos=(6U)
   CAN_F13R1_FB7=CAN_F13R1_FB7_Msk
   CAN_F13R1_FB7_Msk=(0x1U << CAN_F13R1_FB7_Pos)
   CAN_F13R1_FB7_Pos=(7U)
   CAN_F13R1_FB8=CAN_F13R1_FB8_Msk
   CAN_F13R1_FB8_Msk=(0x1U << CAN_F13R1_FB8_Pos)
   CAN_F13R1_FB8_Pos=(8U)
   CAN_F13R1_FB9=CAN_F13R1_FB9_Msk
   CAN_F13R1_FB9_Msk=(0x1U << CAN_F13R1_FB9_Pos)
   CAN_F13R1_FB9_Pos=(9U)
   CAN_F13R2_FB0=CAN_F13R2_FB0_Msk
   CAN_F13R2_FB0_Msk=(0x1U << CAN_F13R2_FB0_Pos)
   CAN_F13R2_FB0_Pos=(0U)
   CAN_F13R2_FB10=CAN_F13R2_FB10_Msk
   CAN_F13R2_FB10_Msk=(0x1U << CAN_F13R2_FB10_Pos)
   CAN_F13R2_FB10_Pos=(10U)
   CAN_F13R2_FB11=CAN_F13R2_FB11_Msk
   CAN_F13R2_FB11_Msk=(0x1U << CAN_F13R2_FB11_Pos)
   CAN_F13R2_FB11_Pos=(11U)
   CAN_F13R2_FB12=CAN_F13R2_FB12_Msk
   CAN_F13R2_FB12_Msk=(0x1U << CAN_F13R2_FB12_Pos)
   CAN_F13R2_FB12_Pos=(12U)
   CAN_F13R2_FB13=CAN_F13R2_FB13_Msk
   CAN_F13R2_FB13_Msk=(0x1U << CAN_F13R2_FB13_Pos)
   CAN_F13R2_FB13_Pos=(13U)
   CAN_F13R2_FB14=CAN_F13R2_FB14_Msk
   CAN_F13R2_FB14_Msk=(0x1U << CAN_F13R2_FB14_Pos)
   CAN_F13R2_FB14_Pos=(14U)
   CAN_F13R2_FB15=CAN_F13R2_FB15_Msk
   CAN_F13R2_FB15_Msk=(0x1U << CAN_F13R2_FB15_Pos)
   CAN_F13R2_FB15_Pos=(15U)
   CAN_F13R2_FB16=CAN_F13R2_FB16_Msk
   CAN_F13R2_FB16_Msk=(0x1U << CAN_F13R2_FB16_Pos)
   CAN_F13R2_FB16_Pos=(16U)
   CAN_F13R2_FB17=CAN_F13R2_FB17_Msk
   CAN_F13R2_FB17_Msk=(0x1U << CAN_F13R2_FB17_Pos)
   CAN_F13R2_FB17_Pos=(17U)
   CAN_F13R2_FB18=CAN_F13R2_FB18_Msk
   CAN_F13R2_FB18_Msk=(0x1U << CAN_F13R2_FB18_Pos)
   CAN_F13R2_FB18_Pos=(18U)
   CAN_F13R2_FB19=CAN_F13R2_FB19_Msk
   CAN_F13R2_FB19_Msk=(0x1U << CAN_F13R2_FB19_Pos)
   CAN_F13R2_FB19_Pos=(19U)
   CAN_F13R2_FB1=CAN_F13R2_FB1_Msk
   CAN_F13R2_FB1_Msk=(0x1U << CAN_F13R2_FB1_Pos)
   CAN_F13R2_FB1_Pos=(1U)
   CAN_F13R2_FB20=CAN_F13R2_FB20_Msk
   CAN_F13R2_FB20_Msk=(0x1U << CAN_F13R2_FB20_Pos)
   CAN_F13R2_FB20_Pos=(20U)
   CAN_F13R2_FB21=CAN_F13R2_FB21_Msk
   CAN_F13R2_FB21_Msk=(0x1U << CAN_F13R2_FB21_Pos)
   CAN_F13R2_FB21_Pos=(21U)
   CAN_F13R2_FB22=CAN_F13R2_FB22_Msk
   CAN_F13R2_FB22_Msk=(0x1U << CAN_F13R2_FB22_Pos)
   CAN_F13R2_FB22_Pos=(22U)
   CAN_F13R2_FB23=CAN_F13R2_FB23_Msk
   CAN_F13R2_FB23_Msk=(0x1U << CAN_F13R2_FB23_Pos)
   CAN_F13R2_FB23_Pos=(23U)
   CAN_F13R2_FB24=CAN_F13R2_FB24_Msk
   CAN_F13R2_FB24_Msk=(0x1U << CAN_F13R2_FB24_Pos)
   CAN_F13R2_FB24_Pos=(24U)
   CAN_F13R2_FB25=CAN_F13R2_FB25_Msk
   CAN_F13R2_FB25_Msk=(0x1U << CAN_F13R2_FB25_Pos)
   CAN_F13R2_FB25_Pos=(25U)
   CAN_F13R2_FB26=CAN_F13R2_FB26_Msk
   CAN_F13R2_FB26_Msk=(0x1U << CAN_F13R2_FB26_Pos)
   CAN_F13R2_FB26_Pos=(26U)
   CAN_F13R2_FB27=CAN_F13R2_FB27_Msk
   CAN_F13R2_FB27_Msk=(0x1U << CAN_F13R2_FB27_Pos)
   CAN_F13R2_FB27_Pos=(27U)
   CAN_F13R2_FB28=CAN_F13R2_FB28_Msk
   CAN_F13R2_FB28_Msk=(0x1U << CAN_F13R2_FB28_Pos)
   CAN_F13R2_FB28_Pos=(28U)
   CAN_F13R2_FB29=CAN_F13R2_FB29_Msk
   CAN_F13R2_FB29_Msk=(0x1U << CAN_F13R2_FB29_Pos)
   CAN_F13R2_FB29_Pos=(29U)
   CAN_F13R2_FB2=CAN_F13R2_FB2_Msk
   CAN_F13R2_FB2_Msk=(0x1U << CAN_F13R2_FB2_Pos)
   CAN_F13R2_FB2_Pos=(2U)
   CAN_F13R2_FB30=CAN_F13R2_FB30_Msk
   CAN_F13R2_FB30_Msk=(0x1U << CAN_F13R2_FB30_Pos)
   CAN_F13R2_FB30_Pos=(30U)
   CAN_F13R2_FB31=CAN_F13R2_FB31_Msk
   CAN_F13R2_FB31_Msk=(0x1U << CAN_F13R2_FB31_Pos)
   CAN_F13R2_FB31_Pos=(31U)
   CAN_F13R2_FB3=CAN_F13R2_FB3_Msk
   CAN_F13R2_FB3_Msk=(0x1U << CAN_F13R2_FB3_Pos)
   CAN_F13R2_FB3_Pos=(3U)
   CAN_F13R2_FB4=CAN_F13R2_FB4_Msk
   CAN_F13R2_FB4_Msk=(0x1U << CAN_F13R2_FB4_Pos)
   CAN_F13R2_FB4_Pos=(4U)
   CAN_F13R2_FB5=CAN_F13R2_FB5_Msk
   CAN_F13R2_FB5_Msk=(0x1U << CAN_F13R2_FB5_Pos)
   CAN_F13R2_FB5_Pos=(5U)
   CAN_F13R2_FB6=CAN_F13R2_FB6_Msk
   CAN_F13R2_FB6_Msk=(0x1U << CAN_F13R2_FB6_Pos)
   CAN_F13R2_FB6_Pos=(6U)
   CAN_F13R2_FB7=CAN_F13R2_FB7_Msk
   CAN_F13R2_FB7_Msk=(0x1U << CAN_F13R2_FB7_Pos)
   CAN_F13R2_FB7_Pos=(7U)
   CAN_F13R2_FB8=CAN_F13R2_FB8_Msk
   CAN_F13R2_FB8_Msk=(0x1U << CAN_F13R2_FB8_Pos)
   CAN_F13R2_FB8_Pos=(8U)
   CAN_F13R2_FB9=CAN_F13R2_FB9_Msk
   CAN_F13R2_FB9_Msk=(0x1U << CAN_F13R2_FB9_Pos)
   CAN_F13R2_FB9_Pos=(9U)
   CAN_F1R1_FB0=CAN_F1R1_FB0_Msk
   CAN_F1R1_FB0_Msk=(0x1U << CAN_F1R1_FB0_Pos)
   CAN_F1R1_FB0_Pos=(0U)
   CAN_F1R1_FB10=CAN_F1R1_FB10_Msk
   CAN_F1R1_FB10_Msk=(0x1U << CAN_F1R1_FB10_Pos)
   CAN_F1R1_FB10_Pos=(10U)
   CAN_F1R1_FB11=CAN_F1R1_FB11_Msk
   CAN_F1R1_FB11_Msk=(0x1U << CAN_F1R1_FB11_Pos)
   CAN_F1R1_FB11_Pos=(11U)
   CAN_F1R1_FB12=CAN_F1R1_FB12_Msk
   CAN_F1R1_FB12_Msk=(0x1U << CAN_F1R1_FB12_Pos)
   CAN_F1R1_FB12_Pos=(12U)
   CAN_F1R1_FB13=CAN_F1R1_FB13_Msk
   CAN_F1R1_FB13_Msk=(0x1U << CAN_F1R1_FB13_Pos)
   CAN_F1R1_FB13_Pos=(13U)
   CAN_F1R1_FB14=CAN_F1R1_FB14_Msk
   CAN_F1R1_FB14_Msk=(0x1U << CAN_F1R1_FB14_Pos)
   CAN_F1R1_FB14_Pos=(14U)
   CAN_F1R1_FB15=CAN_F1R1_FB15_Msk
   CAN_F1R1_FB15_Msk=(0x1U << CAN_F1R1_FB15_Pos)
   CAN_F1R1_FB15_Pos=(15U)
   CAN_F1R1_FB16=CAN_F1R1_FB16_Msk
   CAN_F1R1_FB16_Msk=(0x1U << CAN_F1R1_FB16_Pos)
   CAN_F1R1_FB16_Pos=(16U)
   CAN_F1R1_FB17=CAN_F1R1_FB17_Msk
   CAN_F1R1_FB17_Msk=(0x1U << CAN_F1R1_FB17_Pos)
   CAN_F1R1_FB17_Pos=(17U)
   CAN_F1R1_FB18=CAN_F1R1_FB18_Msk
   CAN_F1R1_FB18_Msk=(0x1U << CAN_F1R1_FB18_Pos)
   CAN_F1R1_FB18_Pos=(18U)
   CAN_F1R1_FB19=CAN_F1R1_FB19_Msk
   CAN_F1R1_FB19_Msk=(0x1U << CAN_F1R1_FB19_Pos)
   CAN_F1R1_FB19_Pos=(19U)
   CAN_F1R1_FB1=CAN_F1R1_FB1_Msk
   CAN_F1R1_FB1_Msk=(0x1U << CAN_F1R1_FB1_Pos)
   CAN_F1R1_FB1_Pos=(1U)
   CAN_F1R1_FB20=CAN_F1R1_FB20_Msk
   CAN_F1R1_FB20_Msk=(0x1U << CAN_F1R1_FB20_Pos)
   CAN_F1R1_FB20_Pos=(20U)
   CAN_F1R1_FB21=CAN_F1R1_FB21_Msk
   CAN_F1R1_FB21_Msk=(0x1U << CAN_F1R1_FB21_Pos)
   CAN_F1R1_FB21_Pos=(21U)
   CAN_F1R1_FB22=CAN_F1R1_FB22_Msk
   CAN_F1R1_FB22_Msk=(0x1U << CAN_F1R1_FB22_Pos)
   CAN_F1R1_FB22_Pos=(22U)
   CAN_F1R1_FB23=CAN_F1R1_FB23_Msk
   CAN_F1R1_FB23_Msk=(0x1U << CAN_F1R1_FB23_Pos)
   CAN_F1R1_FB23_Pos=(23U)
   CAN_F1R1_FB24=CAN_F1R1_FB24_Msk
   CAN_F1R1_FB24_Msk=(0x1U << CAN_F1R1_FB24_Pos)
   CAN_F1R1_FB24_Pos=(24U)
   CAN_F1R1_FB25=CAN_F1R1_FB25_Msk
   CAN_F1R1_FB25_Msk=(0x1U << CAN_F1R1_FB25_Pos)
   CAN_F1R1_FB25_Pos=(25U)
   CAN_F1R1_FB26=CAN_F1R1_FB26_Msk
   CAN_F1R1_FB26_Msk=(0x1U << CAN_F1R1_FB26_Pos)
   CAN_F1R1_FB26_Pos=(26U)
   CAN_F1R1_FB27=CAN_F1R1_FB27_Msk
   CAN_F1R1_FB27_Msk=(0x1U << CAN_F1R1_FB27_Pos)
   CAN_F1R1_FB27_Pos=(27U)
   CAN_F1R1_FB28=CAN_F1R1_FB28_Msk
   CAN_F1R1_FB28_Msk=(0x1U << CAN_F1R1_FB28_Pos)
   CAN_F1R1_FB28_Pos=(28U)
   CAN_F1R1_FB29=CAN_F1R1_FB29_Msk
   CAN_F1R1_FB29_Msk=(0x1U << CAN_F1R1_FB29_Pos)
   CAN_F1R1_FB29_Pos=(29U)
   CAN_F1R1_FB2=CAN_F1R1_FB2_Msk
   CAN_F1R1_FB2_Msk=(0x1U << CAN_F1R1_FB2_Pos)
   CAN_F1R1_FB2_Pos=(2U)
   CAN_F1R1_FB30=CAN_F1R1_FB30_Msk
   CAN_F1R1_FB30_Msk=(0x1U << CAN_F1R1_FB30_Pos)
   CAN_F1R1_FB30_Pos=(30U)
   CAN_F1R1_FB31=CAN_F1R1_FB31_Msk
   CAN_F1R1_FB31_Msk=(0x1U << CAN_F1R1_FB31_Pos)
   CAN_F1R1_FB31_Pos=(31U)
   CAN_F1R1_FB3=CAN_F1R1_FB3_Msk
   CAN_F1R1_FB3_Msk=(0x1U << CAN_F1R1_FB3_Pos)
   CAN_F1R1_FB3_Pos=(3U)
   CAN_F1R1_FB4=CAN_F1R1_FB4_Msk
   CAN_F1R1_FB4_Msk=(0x1U << CAN_F1R1_FB4_Pos)
   CAN_F1R1_FB4_Pos=(4U)
   CAN_F1R1_FB5=CAN_F1R1_FB5_Msk
   CAN_F1R1_FB5_Msk=(0x1U << CAN_F1R1_FB5_Pos)
   CAN_F1R1_FB5_Pos=(5U)
   CAN_F1R1_FB6=CAN_F1R1_FB6_Msk
   CAN_F1R1_FB6_Msk=(0x1U << CAN_F1R1_FB6_Pos)
   CAN_F1R1_FB6_Pos=(6U)
   CAN_F1R1_FB7=CAN_F1R1_FB7_Msk
   CAN_F1R1_FB7_Msk=(0x1U << CAN_F1R1_FB7_Pos)
   CAN_F1R1_FB7_Pos=(7U)
   CAN_F1R1_FB8=CAN_F1R1_FB8_Msk
   CAN_F1R1_FB8_Msk=(0x1U << CAN_F1R1_FB8_Pos)
   CAN_F1R1_FB8_Pos=(8U)
   CAN_F1R1_FB9=CAN_F1R1_FB9_Msk
   CAN_F1R1_FB9_Msk=(0x1U << CAN_F1R1_FB9_Pos)
   CAN_F1R1_FB9_Pos=(9U)
   CAN_F1R2_FB0=CAN_F1R2_FB0_Msk
   CAN_F1R2_FB0_Msk=(0x1U << CAN_F1R2_FB0_Pos)
   CAN_F1R2_FB0_Pos=(0U)
   CAN_F1R2_FB10=CAN_F1R2_FB10_Msk
   CAN_F1R2_FB10_Msk=(0x1U << CAN_F1R2_FB10_Pos)
   CAN_F1R2_FB10_Pos=(10U)
   CAN_F1R2_FB11=CAN_F1R2_FB11_Msk
   CAN_F1R2_FB11_Msk=(0x1U << CAN_F1R2_FB11_Pos)
   CAN_F1R2_FB11_Pos=(11U)
   CAN_F1R2_FB12=CAN_F1R2_FB12_Msk
   CAN_F1R2_FB12_Msk=(0x1U << CAN_F1R2_FB12_Pos)
   CAN_F1R2_FB12_Pos=(12U)
   CAN_F1R2_FB13=CAN_F1R2_FB13_Msk
   CAN_F1R2_FB13_Msk=(0x1U << CAN_F1R2_FB13_Pos)
   CAN_F1R2_FB13_Pos=(13U)
   CAN_F1R2_FB14=CAN_F1R2_FB14_Msk
   CAN_F1R2_FB14_Msk=(0x1U << CAN_F1R2_FB14_Pos)
   CAN_F1R2_FB14_Pos=(14U)
   CAN_F1R2_FB15=CAN_F1R2_FB15_Msk
   CAN_F1R2_FB15_Msk=(0x1U << CAN_F1R2_FB15_Pos)
   CAN_F1R2_FB15_Pos=(15U)
   CAN_F1R2_FB16=CAN_F1R2_FB16_Msk
   CAN_F1R2_FB16_Msk=(0x1U << CAN_F1R2_FB16_Pos)
   CAN_F1R2_FB16_Pos=(16U)
   CAN_F1R2_FB17=CAN_F1R2_FB17_Msk
   CAN_F1R2_FB17_Msk=(0x1U << CAN_F1R2_FB17_Pos)
   CAN_F1R2_FB17_Pos=(17U)
   CAN_F1R2_FB18=CAN_F1R2_FB18_Msk
   CAN_F1R2_FB18_Msk=(0x1U << CAN_F1R2_FB18_Pos)
   CAN_F1R2_FB18_Pos=(18U)
   CAN_F1R2_FB19=CAN_F1R2_FB19_Msk
   CAN_F1R2_FB19_Msk=(0x1U << CAN_F1R2_FB19_Pos)
   CAN_F1R2_FB19_Pos=(19U)
   CAN_F1R2_FB1=CAN_F1R2_FB1_Msk
   CAN_F1R2_FB1_Msk=(0x1U << CAN_F1R2_FB1_Pos)
   CAN_F1R2_FB1_Pos=(1U)
   CAN_F1R2_FB20=CAN_F1R2_FB20_Msk
   CAN_F1R2_FB20_Msk=(0x1U << CAN_F1R2_FB20_Pos)
   CAN_F1R2_FB20_Pos=(20U)
   CAN_F1R2_FB21=CAN_F1R2_FB21_Msk
   CAN_F1R2_FB21_Msk=(0x1U << CAN_F1R2_FB21_Pos)
   CAN_F1R2_FB21_Pos=(21U)
   CAN_F1R2_FB22=CAN_F1R2_FB22_Msk
   CAN_F1R2_FB22_Msk=(0x1U << CAN_F1R2_FB22_Pos)
   CAN_F1R2_FB22_Pos=(22U)
   CAN_F1R2_FB23=CAN_F1R2_FB23_Msk
   CAN_F1R2_FB23_Msk=(0x1U << CAN_F1R2_FB23_Pos)
   CAN_F1R2_FB23_Pos=(23U)
   CAN_F1R2_FB24=CAN_F1R2_FB24_Msk
   CAN_F1R2_FB24_Msk=(0x1U << CAN_F1R2_FB24_Pos)
   CAN_F1R2_FB24_Pos=(24U)
   CAN_F1R2_FB25=CAN_F1R2_FB25_Msk
   CAN_F1R2_FB25_Msk=(0x1U << CAN_F1R2_FB25_Pos)
   CAN_F1R2_FB25_Pos=(25U)
   CAN_F1R2_FB26=CAN_F1R2_FB26_Msk
   CAN_F1R2_FB26_Msk=(0x1U << CAN_F1R2_FB26_Pos)
   CAN_F1R2_FB26_Pos=(26U)
   CAN_F1R2_FB27=CAN_F1R2_FB27_Msk
   CAN_F1R2_FB27_Msk=(0x1U << CAN_F1R2_FB27_Pos)
   CAN_F1R2_FB27_Pos=(27U)
   CAN_F1R2_FB28=CAN_F1R2_FB28_Msk
   CAN_F1R2_FB28_Msk=(0x1U << CAN_F1R2_FB28_Pos)
   CAN_F1R2_FB28_Pos=(28U)
   CAN_F1R2_FB29=CAN_F1R2_FB29_Msk
   CAN_F1R2_FB29_Msk=(0x1U << CAN_F1R2_FB29_Pos)
   CAN_F1R2_FB29_Pos=(29U)
   CAN_F1R2_FB2=CAN_F1R2_FB2_Msk
   CAN_F1R2_FB2_Msk=(0x1U << CAN_F1R2_FB2_Pos)
   CAN_F1R2_FB2_Pos=(2U)
   CAN_F1R2_FB30=CAN_F1R2_FB30_Msk
   CAN_F1R2_FB30_Msk=(0x1U << CAN_F1R2_FB30_Pos)
   CAN_F1R2_FB30_Pos=(30U)
   CAN_F1R2_FB31=CAN_F1R2_FB31_Msk
   CAN_F1R2_FB31_Msk=(0x1U << CAN_F1R2_FB31_Pos)
   CAN_F1R2_FB31_Pos=(31U)
   CAN_F1R2_FB3=CAN_F1R2_FB3_Msk
   CAN_F1R2_FB3_Msk=(0x1U << CAN_F1R2_FB3_Pos)
   CAN_F1R2_FB3_Pos=(3U)
   CAN_F1R2_FB4=CAN_F1R2_FB4_Msk
   CAN_F1R2_FB4_Msk=(0x1U << CAN_F1R2_FB4_Pos)
   CAN_F1R2_FB4_Pos=(4U)
   CAN_F1R2_FB5=CAN_F1R2_FB5_Msk
   CAN_F1R2_FB5_Msk=(0x1U << CAN_F1R2_FB5_Pos)
   CAN_F1R2_FB5_Pos=(5U)
   CAN_F1R2_FB6=CAN_F1R2_FB6_Msk
   CAN_F1R2_FB6_Msk=(0x1U << CAN_F1R2_FB6_Pos)
   CAN_F1R2_FB6_Pos=(6U)
   CAN_F1R2_FB7=CAN_F1R2_FB7_Msk
   CAN_F1R2_FB7_Msk=(0x1U << CAN_F1R2_FB7_Pos)
   CAN_F1R2_FB7_Pos=(7U)
   CAN_F1R2_FB8=CAN_F1R2_FB8_Msk
   CAN_F1R2_FB8_Msk=(0x1U << CAN_F1R2_FB8_Pos)
   CAN_F1R2_FB8_Pos=(8U)
   CAN_F1R2_FB9=CAN_F1R2_FB9_Msk
   CAN_F1R2_FB9_Msk=(0x1U << CAN_F1R2_FB9_Pos)
   CAN_F1R2_FB9_Pos=(9U)
   CAN_F2R1_FB0=CAN_F2R1_FB0_Msk
   CAN_F2R1_FB0_Msk=(0x1U << CAN_F2R1_FB0_Pos)
   CAN_F2R1_FB0_Pos=(0U)
   CAN_F2R1_FB10=CAN_F2R1_FB10_Msk
   CAN_F2R1_FB10_Msk=(0x1U << CAN_F2R1_FB10_Pos)
   CAN_F2R1_FB10_Pos=(10U)
   CAN_F2R1_FB11=CAN_F2R1_FB11_Msk
   CAN_F2R1_FB11_Msk=(0x1U << CAN_F2R1_FB11_Pos)
   CAN_F2R1_FB11_Pos=(11U)
   CAN_F2R1_FB12=CAN_F2R1_FB12_Msk
   CAN_F2R1_FB12_Msk=(0x1U << CAN_F2R1_FB12_Pos)
   CAN_F2R1_FB12_Pos=(12U)
   CAN_F2R1_FB13=CAN_F2R1_FB13_Msk
   CAN_F2R1_FB13_Msk=(0x1U << CAN_F2R1_FB13_Pos)
   CAN_F2R1_FB13_Pos=(13U)
   CAN_F2R1_FB14=CAN_F2R1_FB14_Msk
   CAN_F2R1_FB14_Msk=(0x1U << CAN_F2R1_FB14_Pos)
   CAN_F2R1_FB14_Pos=(14U)
   CAN_F2R1_FB15=CAN_F2R1_FB15_Msk
   CAN_F2R1_FB15_Msk=(0x1U << CAN_F2R1_FB15_Pos)
   CAN_F2R1_FB15_Pos=(15U)
   CAN_F2R1_FB16=CAN_F2R1_FB16_Msk
   CAN_F2R1_FB16_Msk=(0x1U << CAN_F2R1_FB16_Pos)
   CAN_F2R1_FB16_Pos=(16U)
   CAN_F2R1_FB17=CAN_F2R1_FB17_Msk
   CAN_F2R1_FB17_Msk=(0x1U << CAN_F2R1_FB17_Pos)
   CAN_F2R1_FB17_Pos=(17U)
   CAN_F2R1_FB18=CAN_F2R1_FB18_Msk
   CAN_F2R1_FB18_Msk=(0x1U << CAN_F2R1_FB18_Pos)
   CAN_F2R1_FB18_Pos=(18U)
   CAN_F2R1_FB19=CAN_F2R1_FB19_Msk
   CAN_F2R1_FB19_Msk=(0x1U << CAN_F2R1_FB19_Pos)
   CAN_F2R1_FB19_Pos=(19U)
   CAN_F2R1_FB1=CAN_F2R1_FB1_Msk
   CAN_F2R1_FB1_Msk=(0x1U << CAN_F2R1_FB1_Pos)
   CAN_F2R1_FB1_Pos=(1U)
   CAN_F2R1_FB20=CAN_F2R1_FB20_Msk
   CAN_F2R1_FB20_Msk=(0x1U << CAN_F2R1_FB20_Pos)
   CAN_F2R1_FB20_Pos=(20U)
   CAN_F2R1_FB21=CAN_F2R1_FB21_Msk
   CAN_F2R1_FB21_Msk=(0x1U << CAN_F2R1_FB21_Pos)
   CAN_F2R1_FB21_Pos=(21U)
   CAN_F2R1_FB22=CAN_F2R1_FB22_Msk
   CAN_F2R1_FB22_Msk=(0x1U << CAN_F2R1_FB22_Pos)
   CAN_F2R1_FB22_Pos=(22U)
   CAN_F2R1_FB23=CAN_F2R1_FB23_Msk
   CAN_F2R1_FB23_Msk=(0x1U << CAN_F2R1_FB23_Pos)
   CAN_F2R1_FB23_Pos=(23U)
   CAN_F2R1_FB24=CAN_F2R1_FB24_Msk
   CAN_F2R1_FB24_Msk=(0x1U << CAN_F2R1_FB24_Pos)
   CAN_F2R1_FB24_Pos=(24U)
   CAN_F2R1_FB25=CAN_F2R1_FB25_Msk
   CAN_F2R1_FB25_Msk=(0x1U << CAN_F2R1_FB25_Pos)
   CAN_F2R1_FB25_Pos=(25U)
   CAN_F2R1_FB26=CAN_F2R1_FB26_Msk
   CAN_F2R1_FB26_Msk=(0x1U << CAN_F2R1_FB26_Pos)
   CAN_F2R1_FB26_Pos=(26U)
   CAN_F2R1_FB27=CAN_F2R1_FB27_Msk
   CAN_F2R1_FB27_Msk=(0x1U << CAN_F2R1_FB27_Pos)
   CAN_F2R1_FB27_Pos=(27U)
   CAN_F2R1_FB28=CAN_F2R1_FB28_Msk
   CAN_F2R1_FB28_Msk=(0x1U << CAN_F2R1_FB28_Pos)
   CAN_F2R1_FB28_Pos=(28U)
   CAN_F2R1_FB29=CAN_F2R1_FB29_Msk
   CAN_F2R1_FB29_Msk=(0x1U << CAN_F2R1_FB29_Pos)
   CAN_F2R1_FB29_Pos=(29U)
   CAN_F2R1_FB2=CAN_F2R1_FB2_Msk
   CAN_F2R1_FB2_Msk=(0x1U << CAN_F2R1_FB2_Pos)
   CAN_F2R1_FB2_Pos=(2U)
   CAN_F2R1_FB30=CAN_F2R1_FB30_Msk
   CAN_F2R1_FB30_Msk=(0x1U << CAN_F2R1_FB30_Pos)
   CAN_F2R1_FB30_Pos=(30U)
   CAN_F2R1_FB31=CAN_F2R1_FB31_Msk
   CAN_F2R1_FB31_Msk=(0x1U << CAN_F2R1_FB31_Pos)
   CAN_F2R1_FB31_Pos=(31U)
   CAN_F2R1_FB3=CAN_F2R1_FB3_Msk
   CAN_F2R1_FB3_Msk=(0x1U << CAN_F2R1_FB3_Pos)
   CAN_F2R1_FB3_Pos=(3U)
   CAN_F2R1_FB4=CAN_F2R1_FB4_Msk
   CAN_F2R1_FB4_Msk=(0x1U << CAN_F2R1_FB4_Pos)
   CAN_F2R1_FB4_Pos=(4U)
   CAN_F2R1_FB5=CAN_F2R1_FB5_Msk
   CAN_F2R1_FB5_Msk=(0x1U << CAN_F2R1_FB5_Pos)
   CAN_F2R1_FB5_Pos=(5U)
   CAN_F2R1_FB6=CAN_F2R1_FB6_Msk
   CAN_F2R1_FB6_Msk=(0x1U << CAN_F2R1_FB6_Pos)
   CAN_F2R1_FB6_Pos=(6U)
   CAN_F2R1_FB7=CAN_F2R1_FB7_Msk
   CAN_F2R1_FB7_Msk=(0x1U << CAN_F2R1_FB7_Pos)
   CAN_F2R1_FB7_Pos=(7U)
   CAN_F2R1_FB8=CAN_F2R1_FB8_Msk
   CAN_F2R1_FB8_Msk=(0x1U << CAN_F2R1_FB8_Pos)
   CAN_F2R1_FB8_Pos=(8U)
   CAN_F2R1_FB9=CAN_F2R1_FB9_Msk
   CAN_F2R1_FB9_Msk=(0x1U << CAN_F2R1_FB9_Pos)
   CAN_F2R1_FB9_Pos=(9U)
   CAN_F2R2_FB0=CAN_F2R2_FB0_Msk
   CAN_F2R2_FB0_Msk=(0x1U << CAN_F2R2_FB0_Pos)
   CAN_F2R2_FB0_Pos=(0U)
   CAN_F2R2_FB10=CAN_F2R2_FB10_Msk
   CAN_F2R2_FB10_Msk=(0x1U << CAN_F2R2_FB10_Pos)
   CAN_F2R2_FB10_Pos=(10U)
   CAN_F2R2_FB11=CAN_F2R2_FB11_Msk
   CAN_F2R2_FB11_Msk=(0x1U << CAN_F2R2_FB11_Pos)
   CAN_F2R2_FB11_Pos=(11U)
   CAN_F2R2_FB12=CAN_F2R2_FB12_Msk
   CAN_F2R2_FB12_Msk=(0x1U << CAN_F2R2_FB12_Pos)
   CAN_F2R2_FB12_Pos=(12U)
   CAN_F2R2_FB13=CAN_F2R2_FB13_Msk
   CAN_F2R2_FB13_Msk=(0x1U << CAN_F2R2_FB13_Pos)
   CAN_F2R2_FB13_Pos=(13U)
   CAN_F2R2_FB14=CAN_F2R2_FB14_Msk
   CAN_F2R2_FB14_Msk=(0x1U << CAN_F2R2_FB14_Pos)
   CAN_F2R2_FB14_Pos=(14U)
   CAN_F2R2_FB15=CAN_F2R2_FB15_Msk
   CAN_F2R2_FB15_Msk=(0x1U << CAN_F2R2_FB15_Pos)
   CAN_F2R2_FB15_Pos=(15U)
   CAN_F2R2_FB16=CAN_F2R2_FB16_Msk
   CAN_F2R2_FB16_Msk=(0x1U << CAN_F2R2_FB16_Pos)
   CAN_F2R2_FB16_Pos=(16U)
   CAN_F2R2_FB17=CAN_F2R2_FB17_Msk
   CAN_F2R2_FB17_Msk=(0x1U << CAN_F2R2_FB17_Pos)
   CAN_F2R2_FB17_Pos=(17U)
   CAN_F2R2_FB18=CAN_F2R2_FB18_Msk
   CAN_F2R2_FB18_Msk=(0x1U << CAN_F2R2_FB18_Pos)
   CAN_F2R2_FB18_Pos=(18U)
   CAN_F2R2_FB19=CAN_F2R2_FB19_Msk
   CAN_F2R2_FB19_Msk=(0x1U << CAN_F2R2_FB19_Pos)
   CAN_F2R2_FB19_Pos=(19U)
   CAN_F2R2_FB1=CAN_F2R2_FB1_Msk
   CAN_F2R2_FB1_Msk=(0x1U << CAN_F2R2_FB1_Pos)
   CAN_F2R2_FB1_Pos=(1U)
   CAN_F2R2_FB20=CAN_F2R2_FB20_Msk
   CAN_F2R2_FB20_Msk=(0x1U << CAN_F2R2_FB20_Pos)
   CAN_F2R2_FB20_Pos=(20U)
   CAN_F2R2_FB21=CAN_F2R2_FB21_Msk
   CAN_F2R2_FB21_Msk=(0x1U << CAN_F2R2_FB21_Pos)
   CAN_F2R2_FB21_Pos=(21U)
   CAN_F2R2_FB22=CAN_F2R2_FB22_Msk
   CAN_F2R2_FB22_Msk=(0x1U << CAN_F2R2_FB22_Pos)
   CAN_F2R2_FB22_Pos=(22U)
   CAN_F2R2_FB23=CAN_F2R2_FB23_Msk
   CAN_F2R2_FB23_Msk=(0x1U << CAN_F2R2_FB23_Pos)
   CAN_F2R2_FB23_Pos=(23U)
   CAN_F2R2_FB24=CAN_F2R2_FB24_Msk
   CAN_F2R2_FB24_Msk=(0x1U << CAN_F2R2_FB24_Pos)
   CAN_F2R2_FB24_Pos=(24U)
   CAN_F2R2_FB25=CAN_F2R2_FB25_Msk
   CAN_F2R2_FB25_Msk=(0x1U << CAN_F2R2_FB25_Pos)
   CAN_F2R2_FB25_Pos=(25U)
   CAN_F2R2_FB26=CAN_F2R2_FB26_Msk
   CAN_F2R2_FB26_Msk=(0x1U << CAN_F2R2_FB26_Pos)
   CAN_F2R2_FB26_Pos=(26U)
   CAN_F2R2_FB27=CAN_F2R2_FB27_Msk
   CAN_F2R2_FB27_Msk=(0x1U << CAN_F2R2_FB27_Pos)
   CAN_F2R2_FB27_Pos=(27U)
   CAN_F2R2_FB28=CAN_F2R2_FB28_Msk
   CAN_F2R2_FB28_Msk=(0x1U << CAN_F2R2_FB28_Pos)
   CAN_F2R2_FB28_Pos=(28U)
   CAN_F2R2_FB29=CAN_F2R2_FB29_Msk
   CAN_F2R2_FB29_Msk=(0x1U << CAN_F2R2_FB29_Pos)
   CAN_F2R2_FB29_Pos=(29U)
   CAN_F2R2_FB2=CAN_F2R2_FB2_Msk
   CAN_F2R2_FB2_Msk=(0x1U << CAN_F2R2_FB2_Pos)
   CAN_F2R2_FB2_Pos=(2U)
   CAN_F2R2_FB30=CAN_F2R2_FB30_Msk
   CAN_F2R2_FB30_Msk=(0x1U << CAN_F2R2_FB30_Pos)
   CAN_F2R2_FB30_Pos=(30U)
   CAN_F2R2_FB31=CAN_F2R2_FB31_Msk
   CAN_F2R2_FB31_Msk=(0x1U << CAN_F2R2_FB31_Pos)
   CAN_F2R2_FB31_Pos=(31U)
   CAN_F2R2_FB3=CAN_F2R2_FB3_Msk
   CAN_F2R2_FB3_Msk=(0x1U << CAN_F2R2_FB3_Pos)
   CAN_F2R2_FB3_Pos=(3U)
   CAN_F2R2_FB4=CAN_F2R2_FB4_Msk
   CAN_F2R2_FB4_Msk=(0x1U << CAN_F2R2_FB4_Pos)
   CAN_F2R2_FB4_Pos=(4U)
   CAN_F2R2_FB5=CAN_F2R2_FB5_Msk
   CAN_F2R2_FB5_Msk=(0x1U << CAN_F2R2_FB5_Pos)
   CAN_F2R2_FB5_Pos=(5U)
   CAN_F2R2_FB6=CAN_F2R2_FB6_Msk
   CAN_F2R2_FB6_Msk=(0x1U << CAN_F2R2_FB6_Pos)
   CAN_F2R2_FB6_Pos=(6U)
   CAN_F2R2_FB7=CAN_F2R2_FB7_Msk
   CAN_F2R2_FB7_Msk=(0x1U << CAN_F2R2_FB7_Pos)
   CAN_F2R2_FB7_Pos=(7U)
   CAN_F2R2_FB8=CAN_F2R2_FB8_Msk
   CAN_F2R2_FB8_Msk=(0x1U << CAN_F2R2_FB8_Pos)
   CAN_F2R2_FB8_Pos=(8U)
   CAN_F2R2_FB9=CAN_F2R2_FB9_Msk
   CAN_F2R2_FB9_Msk=(0x1U << CAN_F2R2_FB9_Pos)
   CAN_F2R2_FB9_Pos=(9U)
   CAN_F3R1_FB0=CAN_F3R1_FB0_Msk
   CAN_F3R1_FB0_Msk=(0x1U << CAN_F3R1_FB0_Pos)
   CAN_F3R1_FB0_Pos=(0U)
   CAN_F3R1_FB10=CAN_F3R1_FB10_Msk
   CAN_F3R1_FB10_Msk=(0x1U << CAN_F3R1_FB10_Pos)
   CAN_F3R1_FB10_Pos=(10U)
   CAN_F3R1_FB11=CAN_F3R1_FB11_Msk
   CAN_F3R1_FB11_Msk=(0x1U << CAN_F3R1_FB11_Pos)
   CAN_F3R1_FB11_Pos=(11U)
   CAN_F3R1_FB12=CAN_F3R1_FB12_Msk
   CAN_F3R1_FB12_Msk=(0x1U << CAN_F3R1_FB12_Pos)
   CAN_F3R1_FB12_Pos=(12U)
   CAN_F3R1_FB13=CAN_F3R1_FB13_Msk
   CAN_F3R1_FB13_Msk=(0x1U << CAN_F3R1_FB13_Pos)
   CAN_F3R1_FB13_Pos=(13U)
   CAN_F3R1_FB14=CAN_F3R1_FB14_Msk
   CAN_F3R1_FB14_Msk=(0x1U << CAN_F3R1_FB14_Pos)
   CAN_F3R1_FB14_Pos=(14U)
   CAN_F3R1_FB15=CAN_F3R1_FB15_Msk
   CAN_F3R1_FB15_Msk=(0x1U << CAN_F3R1_FB15_Pos)
   CAN_F3R1_FB15_Pos=(15U)
   CAN_F3R1_FB16=CAN_F3R1_FB16_Msk
   CAN_F3R1_FB16_Msk=(0x1U << CAN_F3R1_FB16_Pos)
   CAN_F3R1_FB16_Pos=(16U)
   CAN_F3R1_FB17=CAN_F3R1_FB17_Msk
   CAN_F3R1_FB17_Msk=(0x1U << CAN_F3R1_FB17_Pos)
   CAN_F3R1_FB17_Pos=(17U)
   CAN_F3R1_FB18=CAN_F3R1_FB18_Msk
   CAN_F3R1_FB18_Msk=(0x1U << CAN_F3R1_FB18_Pos)
   CAN_F3R1_FB18_Pos=(18U)
   CAN_F3R1_FB19=CAN_F3R1_FB19_Msk
   CAN_F3R1_FB19_Msk=(0x1U << CAN_F3R1_FB19_Pos)
   CAN_F3R1_FB19_Pos=(19U)
   CAN_F3R1_FB1=CAN_F3R1_FB1_Msk
   CAN_F3R1_FB1_Msk=(0x1U << CAN_F3R1_FB1_Pos)
   CAN_F3R1_FB1_Pos=(1U)
   CAN_F3R1_FB20=CAN_F3R1_FB20_Msk
   CAN_F3R1_FB20_Msk=(0x1U << CAN_F3R1_FB20_Pos)
   CAN_F3R1_FB20_Pos=(20U)
   CAN_F3R1_FB21=CAN_F3R1_FB21_Msk
   CAN_F3R1_FB21_Msk=(0x1U << CAN_F3R1_FB21_Pos)
   CAN_F3R1_FB21_Pos=(21U)
   CAN_F3R1_FB22=CAN_F3R1_FB22_Msk
   CAN_F3R1_FB22_Msk=(0x1U << CAN_F3R1_FB22_Pos)
   CAN_F3R1_FB22_Pos=(22U)
   CAN_F3R1_FB23=CAN_F3R1_FB23_Msk
   CAN_F3R1_FB23_Msk=(0x1U << CAN_F3R1_FB23_Pos)
   CAN_F3R1_FB23_Pos=(23U)
   CAN_F3R1_FB24=CAN_F3R1_FB24_Msk
   CAN_F3R1_FB24_Msk=(0x1U << CAN_F3R1_FB24_Pos)
   CAN_F3R1_FB24_Pos=(24U)
   CAN_F3R1_FB25=CAN_F3R1_FB25_Msk
   CAN_F3R1_FB25_Msk=(0x1U << CAN_F3R1_FB25_Pos)
   CAN_F3R1_FB25_Pos=(25U)
   CAN_F3R1_FB26=CAN_F3R1_FB26_Msk
   CAN_F3R1_FB26_Msk=(0x1U << CAN_F3R1_FB26_Pos)
   CAN_F3R1_FB26_Pos=(26U)
   CAN_F3R1_FB27=CAN_F3R1_FB27_Msk
   CAN_F3R1_FB27_Msk=(0x1U << CAN_F3R1_FB27_Pos)
   CAN_F3R1_FB27_Pos=(27U)
   CAN_F3R1_FB28=CAN_F3R1_FB28_Msk
   CAN_F3R1_FB28_Msk=(0x1U << CAN_F3R1_FB28_Pos)
   CAN_F3R1_FB28_Pos=(28U)
   CAN_F3R1_FB29=CAN_F3R1_FB29_Msk
   CAN_F3R1_FB29_Msk=(0x1U << CAN_F3R1_FB29_Pos)
   CAN_F3R1_FB29_Pos=(29U)
   CAN_F3R1_FB2=CAN_F3R1_FB2_Msk
   CAN_F3R1_FB2_Msk=(0x1U << CAN_F3R1_FB2_Pos)
   CAN_F3R1_FB2_Pos=(2U)
   CAN_F3R1_FB30=CAN_F3R1_FB30_Msk
   CAN_F3R1_FB30_Msk=(0x1U << CAN_F3R1_FB30_Pos)
   CAN_F3R1_FB30_Pos=(30U)
   CAN_F3R1_FB31=CAN_F3R1_FB31_Msk
   CAN_F3R1_FB31_Msk=(0x1U << CAN_F3R1_FB31_Pos)
   CAN_F3R1_FB31_Pos=(31U)
   CAN_F3R1_FB3=CAN_F3R1_FB3_Msk
   CAN_F3R1_FB3_Msk=(0x1U << CAN_F3R1_FB3_Pos)
   CAN_F3R1_FB3_Pos=(3U)
   CAN_F3R1_FB4=CAN_F3R1_FB4_Msk
   CAN_F3R1_FB4_Msk=(0x1U << CAN_F3R1_FB4_Pos)
   CAN_F3R1_FB4_Pos=(4U)
   CAN_F3R1_FB5=CAN_F3R1_FB5_Msk
   CAN_F3R1_FB5_Msk=(0x1U << CAN_F3R1_FB5_Pos)
   CAN_F3R1_FB5_Pos=(5U)
   CAN_F3R1_FB6=CAN_F3R1_FB6_Msk
   CAN_F3R1_FB6_Msk=(0x1U << CAN_F3R1_FB6_Pos)
   CAN_F3R1_FB6_Pos=(6U)
   CAN_F3R1_FB7=CAN_F3R1_FB7_Msk
   CAN_F3R1_FB7_Msk=(0x1U << CAN_F3R1_FB7_Pos)
   CAN_F3R1_FB7_Pos=(7U)
   CAN_F3R1_FB8=CAN_F3R1_FB8_Msk
   CAN_F3R1_FB8_Msk=(0x1U << CAN_F3R1_FB8_Pos)
   CAN_F3R1_FB8_Pos=(8U)
   CAN_F3R1_FB9=CAN_F3R1_FB9_Msk
   CAN_F3R1_FB9_Msk=(0x1U << CAN_F3R1_FB9_Pos)
   CAN_F3R1_FB9_Pos=(9U)
   CAN_F3R2_FB0=CAN_F3R2_FB0_Msk
   CAN_F3R2_FB0_Msk=(0x1U << CAN_F3R2_FB0_Pos)
   CAN_F3R2_FB0_Pos=(0U)
   CAN_F3R2_FB10=CAN_F3R2_FB10_Msk
   CAN_F3R2_FB10_Msk=(0x1U << CAN_F3R2_FB10_Pos)
   CAN_F3R2_FB10_Pos=(10U)
   CAN_F3R2_FB11=CAN_F3R2_FB11_Msk
   CAN_F3R2_FB11_Msk=(0x1U << CAN_F3R2_FB11_Pos)
   CAN_F3R2_FB11_Pos=(11U)
   CAN_F3R2_FB12=CAN_F3R2_FB12_Msk
   CAN_F3R2_FB12_Msk=(0x1U << CAN_F3R2_FB12_Pos)
   CAN_F3R2_FB12_Pos=(12U)
   CAN_F3R2_FB13=CAN_F3R2_FB13_Msk
   CAN_F3R2_FB13_Msk=(0x1U << CAN_F3R2_FB13_Pos)
   CAN_F3R2_FB13_Pos=(13U)
   CAN_F3R2_FB14=CAN_F3R2_FB14_Msk
   CAN_F3R2_FB14_Msk=(0x1U << CAN_F3R2_FB14_Pos)
   CAN_F3R2_FB14_Pos=(14U)
   CAN_F3R2_FB15=CAN_F3R2_FB15_Msk
   CAN_F3R2_FB15_Msk=(0x1U << CAN_F3R2_FB15_Pos)
   CAN_F3R2_FB15_Pos=(15U)
   CAN_F3R2_FB16=CAN_F3R2_FB16_Msk
   CAN_F3R2_FB16_Msk=(0x1U << CAN_F3R2_FB16_Pos)
   CAN_F3R2_FB16_Pos=(16U)
   CAN_F3R2_FB17=CAN_F3R2_FB17_Msk
   CAN_F3R2_FB17_Msk=(0x1U << CAN_F3R2_FB17_Pos)
   CAN_F3R2_FB17_Pos=(17U)
   CAN_F3R2_FB18=CAN_F3R2_FB18_Msk
   CAN_F3R2_FB18_Msk=(0x1U << CAN_F3R2_FB18_Pos)
   CAN_F3R2_FB18_Pos=(18U)
   CAN_F3R2_FB19=CAN_F3R2_FB19_Msk
   CAN_F3R2_FB19_Msk=(0x1U << CAN_F3R2_FB19_Pos)
   CAN_F3R2_FB19_Pos=(19U)
   CAN_F3R2_FB1=CAN_F3R2_FB1_Msk
   CAN_F3R2_FB1_Msk=(0x1U << CAN_F3R2_FB1_Pos)
   CAN_F3R2_FB1_Pos=(1U)
   CAN_F3R2_FB20=CAN_F3R2_FB20_Msk
   CAN_F3R2_FB20_Msk=(0x1U << CAN_F3R2_FB20_Pos)
   CAN_F3R2_FB20_Pos=(20U)
   CAN_F3R2_FB21=CAN_F3R2_FB21_Msk
   CAN_F3R2_FB21_Msk=(0x1U << CAN_F3R2_FB21_Pos)
   CAN_F3R2_FB21_Pos=(21U)
   CAN_F3R2_FB22=CAN_F3R2_FB22_Msk
   CAN_F3R2_FB22_Msk=(0x1U << CAN_F3R2_FB22_Pos)
   CAN_F3R2_FB22_Pos=(22U)
   CAN_F3R2_FB23=CAN_F3R2_FB23_Msk
   CAN_F3R2_FB23_Msk=(0x1U << CAN_F3R2_FB23_Pos)
   CAN_F3R2_FB23_Pos=(23U)
   CAN_F3R2_FB24=CAN_F3R2_FB24_Msk
   CAN_F3R2_FB24_Msk=(0x1U << CAN_F3R2_FB24_Pos)
   CAN_F3R2_FB24_Pos=(24U)
   CAN_F3R2_FB25=CAN_F3R2_FB25_Msk
   CAN_F3R2_FB25_Msk=(0x1U << CAN_F3R2_FB25_Pos)
   CAN_F3R2_FB25_Pos=(25U)
   CAN_F3R2_FB26=CAN_F3R2_FB26_Msk
   CAN_F3R2_FB26_Msk=(0x1U << CAN_F3R2_FB26_Pos)
   CAN_F3R2_FB26_Pos=(26U)
   CAN_F3R2_FB27=CAN_F3R2_FB27_Msk
   CAN_F3R2_FB27_Msk=(0x1U << CAN_F3R2_FB27_Pos)
   CAN_F3R2_FB27_Pos=(27U)
   CAN_F3R2_FB28=CAN_F3R2_FB28_Msk
   CAN_F3R2_FB28_Msk=(0x1U << CAN_F3R2_FB28_Pos)
   CAN_F3R2_FB28_Pos=(28U)
   CAN_F3R2_FB29=CAN_F3R2_FB29_Msk
   CAN_F3R2_FB29_Msk=(0x1U << CAN_F3R2_FB29_Pos)
   CAN_F3R2_FB29_Pos=(29U)
   CAN_F3R2_FB2=CAN_F3R2_FB2_Msk
   CAN_F3R2_FB2_Msk=(0x1U << CAN_F3R2_FB2_Pos)
   CAN_F3R2_FB2_Pos=(2U)
   CAN_F3R2_FB30=CAN_F3R2_FB30_Msk
   CAN_F3R2_FB30_Msk=(0x1U << CAN_F3R2_FB30_Pos)
   CAN_F3R2_FB30_Pos=(30U)
   CAN_F3R2_FB31=CAN_F3R2_FB31_Msk
   CAN_F3R2_FB31_Msk=(0x1U << CAN_F3R2_FB31_Pos)
   CAN_F3R2_FB31_Pos=(31U)
   CAN_F3R2_FB3=CAN_F3R2_FB3_Msk
   CAN_F3R2_FB3_Msk=(0x1U << CAN_F3R2_FB3_Pos)
   CAN_F3R2_FB3_Pos=(3U)
   CAN_F3R2_FB4=CAN_F3R2_FB4_Msk
   CAN_F3R2_FB4_Msk=(0x1U << CAN_F3R2_FB4_Pos)
   CAN_F3R2_FB4_Pos=(4U)
   CAN_F3R2_FB5=CAN_F3R2_FB5_Msk
   CAN_F3R2_FB5_Msk=(0x1U << CAN_F3R2_FB5_Pos)
   CAN_F3R2_FB5_Pos=(5U)
   CAN_F3R2_FB6=CAN_F3R2_FB6_Msk
   CAN_F3R2_FB6_Msk=(0x1U << CAN_F3R2_FB6_Pos)
   CAN_F3R2_FB6_Pos=(6U)
   CAN_F3R2_FB7=CAN_F3R2_FB7_Msk
   CAN_F3R2_FB7_Msk=(0x1U << CAN_F3R2_FB7_Pos)
   CAN_F3R2_FB7_Pos=(7U)
   CAN_F3R2_FB8=CAN_F3R2_FB8_Msk
   CAN_F3R2_FB8_Msk=(0x1U << CAN_F3R2_FB8_Pos)
   CAN_F3R2_FB8_Pos=(8U)
   CAN_F3R2_FB9=CAN_F3R2_FB9_Msk
   CAN_F3R2_FB9_Msk=(0x1U << CAN_F3R2_FB9_Pos)
   CAN_F3R2_FB9_Pos=(9U)
   CAN_F4R1_FB0=CAN_F4R1_FB0_Msk
   CAN_F4R1_FB0_Msk=(0x1U << CAN_F4R1_FB0_Pos)
   CAN_F4R1_FB0_Pos=(0U)
   CAN_F4R1_FB10=CAN_F4R1_FB10_Msk
   CAN_F4R1_FB10_Msk=(0x1U << CAN_F4R1_FB10_Pos)
   CAN_F4R1_FB10_Pos=(10U)
   CAN_F4R1_FB11=CAN_F4R1_FB11_Msk
   CAN_F4R1_FB11_Msk=(0x1U << CAN_F4R1_FB11_Pos)
   CAN_F4R1_FB11_Pos=(11U)
   CAN_F4R1_FB12=CAN_F4R1_FB12_Msk
   CAN_F4R1_FB12_Msk=(0x1U << CAN_F4R1_FB12_Pos)
   CAN_F4R1_FB12_Pos=(12U)
   CAN_F4R1_FB13=CAN_F4R1_FB13_Msk
   CAN_F4R1_FB13_Msk=(0x1U << CAN_F4R1_FB13_Pos)
   CAN_F4R1_FB13_Pos=(13U)
   CAN_F4R1_FB14=CAN_F4R1_FB14_Msk
   CAN_F4R1_FB14_Msk=(0x1U << CAN_F4R1_FB14_Pos)
   CAN_F4R1_FB14_Pos=(14U)
   CAN_F4R1_FB15=CAN_F4R1_FB15_Msk
   CAN_F4R1_FB15_Msk=(0x1U << CAN_F4R1_FB15_Pos)
   CAN_F4R1_FB15_Pos=(15U)
   CAN_F4R1_FB16=CAN_F4R1_FB16_Msk
   CAN_F4R1_FB16_Msk=(0x1U << CAN_F4R1_FB16_Pos)
   CAN_F4R1_FB16_Pos=(16U)
   CAN_F4R1_FB17=CAN_F4R1_FB17_Msk
   CAN_F4R1_FB17_Msk=(0x1U << CAN_F4R1_FB17_Pos)
   CAN_F4R1_FB17_Pos=(17U)
   CAN_F4R1_FB18=CAN_F4R1_FB18_Msk
   CAN_F4R1_FB18_Msk=(0x1U << CAN_F4R1_FB18_Pos)
   CAN_F4R1_FB18_Pos=(18U)
   CAN_F4R1_FB19=CAN_F4R1_FB19_Msk
   CAN_F4R1_FB19_Msk=(0x1U << CAN_F4R1_FB19_Pos)
   CAN_F4R1_FB19_Pos=(19U)
   CAN_F4R1_FB1=CAN_F4R1_FB1_Msk
   CAN_F4R1_FB1_Msk=(0x1U << CAN_F4R1_FB1_Pos)
   CAN_F4R1_FB1_Pos=(1U)
   CAN_F4R1_FB20=CAN_F4R1_FB20_Msk
   CAN_F4R1_FB20_Msk=(0x1U << CAN_F4R1_FB20_Pos)
   CAN_F4R1_FB20_Pos=(20U)
   CAN_F4R1_FB21=CAN_F4R1_FB21_Msk
   CAN_F4R1_FB21_Msk=(0x1U << CAN_F4R1_FB21_Pos)
   CAN_F4R1_FB21_Pos=(21U)
   CAN_F4R1_FB22=CAN_F4R1_FB22_Msk
   CAN_F4R1_FB22_Msk=(0x1U << CAN_F4R1_FB22_Pos)
   CAN_F4R1_FB22_Pos=(22U)
   CAN_F4R1_FB23=CAN_F4R1_FB23_Msk
   CAN_F4R1_FB23_Msk=(0x1U << CAN_F4R1_FB23_Pos)
   CAN_F4R1_FB23_Pos=(23U)
   CAN_F4R1_FB24=CAN_F4R1_FB24_Msk
   CAN_F4R1_FB24_Msk=(0x1U << CAN_F4R1_FB24_Pos)
   CAN_F4R1_FB24_Pos=(24U)
   CAN_F4R1_FB25=CAN_F4R1_FB25_Msk
   CAN_F4R1_FB25_Msk=(0x1U << CAN_F4R1_FB25_Pos)
   CAN_F4R1_FB25_Pos=(25U)
   CAN_F4R1_FB26=CAN_F4R1_FB26_Msk
   CAN_F4R1_FB26_Msk=(0x1U << CAN_F4R1_FB26_Pos)
   CAN_F4R1_FB26_Pos=(26U)
   CAN_F4R1_FB27=CAN_F4R1_FB27_Msk
   CAN_F4R1_FB27_Msk=(0x1U << CAN_F4R1_FB27_Pos)
   CAN_F4R1_FB27_Pos=(27U)
   CAN_F4R1_FB28=CAN_F4R1_FB28_Msk
   CAN_F4R1_FB28_Msk=(0x1U << CAN_F4R1_FB28_Pos)
   CAN_F4R1_FB28_Pos=(28U)
   CAN_F4R1_FB29=CAN_F4R1_FB29_Msk
   CAN_F4R1_FB29_Msk=(0x1U << CAN_F4R1_FB29_Pos)
   CAN_F4R1_FB29_Pos=(29U)
   CAN_F4R1_FB2=CAN_F4R1_FB2_Msk
   CAN_F4R1_FB2_Msk=(0x1U << CAN_F4R1_FB2_Pos)
   CAN_F4R1_FB2_Pos=(2U)
   CAN_F4R1_FB30=CAN_F4R1_FB30_Msk
   CAN_F4R1_FB30_Msk=(0x1U << CAN_F4R1_FB30_Pos)
   CAN_F4R1_FB30_Pos=(30U)
   CAN_F4R1_FB31=CAN_F4R1_FB31_Msk
   CAN_F4R1_FB31_Msk=(0x1U << CAN_F4R1_FB31_Pos)
   CAN_F4R1_FB31_Pos=(31U)
   CAN_F4R1_FB3=CAN_F4R1_FB3_Msk
   CAN_F4R1_FB3_Msk=(0x1U << CAN_F4R1_FB3_Pos)
   CAN_F4R1_FB3_Pos=(3U)
   CAN_F4R1_FB4=CAN_F4R1_FB4_Msk
   CAN_F4R1_FB4_Msk=(0x1U << CAN_F4R1_FB4_Pos)
   CAN_F4R1_FB4_Pos=(4U)
   CAN_F4R1_FB5=CAN_F4R1_FB5_Msk
   CAN_F4R1_FB5_Msk=(0x1U << CAN_F4R1_FB5_Pos)
   CAN_F4R1_FB5_Pos=(5U)
   CAN_F4R1_FB6=CAN_F4R1_FB6_Msk
   CAN_F4R1_FB6_Msk=(0x1U << CAN_F4R1_FB6_Pos)
   CAN_F4R1_FB6_Pos=(6U)
   CAN_F4R1_FB7=CAN_F4R1_FB7_Msk
   CAN_F4R1_FB7_Msk=(0x1U << CAN_F4R1_FB7_Pos)
   CAN_F4R1_FB7_Pos=(7U)
   CAN_F4R1_FB8=CAN_F4R1_FB8_Msk
   CAN_F4R1_FB8_Msk=(0x1U << CAN_F4R1_FB8_Pos)
   CAN_F4R1_FB8_Pos=(8U)
   CAN_F4R1_FB9=CAN_F4R1_FB9_Msk
   CAN_F4R1_FB9_Msk=(0x1U << CAN_F4R1_FB9_Pos)
   CAN_F4R1_FB9_Pos=(9U)
   CAN_F4R2_FB0=CAN_F4R2_FB0_Msk
   CAN_F4R2_FB0_Msk=(0x1U << CAN_F4R2_FB0_Pos)
   CAN_F4R2_FB0_Pos=(0U)
   CAN_F4R2_FB10=CAN_F4R2_FB10_Msk
   CAN_F4R2_FB10_Msk=(0x1U << CAN_F4R2_FB10_Pos)
   CAN_F4R2_FB10_Pos=(10U)
   CAN_F4R2_FB11=CAN_F4R2_FB11_Msk
   CAN_F4R2_FB11_Msk=(0x1U << CAN_F4R2_FB11_Pos)
   CAN_F4R2_FB11_Pos=(11U)
   CAN_F4R2_FB12=CAN_F4R2_FB12_Msk
   CAN_F4R2_FB12_Msk=(0x1U << CAN_F4R2_FB12_Pos)
   CAN_F4R2_FB12_Pos=(12U)
   CAN_F4R2_FB13=CAN_F4R2_FB13_Msk
   CAN_F4R2_FB13_Msk=(0x1U << CAN_F4R2_FB13_Pos)
   CAN_F4R2_FB13_Pos=(13U)
   CAN_F4R2_FB14=CAN_F4R2_FB14_Msk
   CAN_F4R2_FB14_Msk=(0x1U << CAN_F4R2_FB14_Pos)
   CAN_F4R2_FB14_Pos=(14U)
   CAN_F4R2_FB15=CAN_F4R2_FB15_Msk
   CAN_F4R2_FB15_Msk=(0x1U << CAN_F4R2_FB15_Pos)
   CAN_F4R2_FB15_Pos=(15U)
   CAN_F4R2_FB16=CAN_F4R2_FB16_Msk
   CAN_F4R2_FB16_Msk=(0x1U << CAN_F4R2_FB16_Pos)
   CAN_F4R2_FB16_Pos=(16U)
   CAN_F4R2_FB17=CAN_F4R2_FB17_Msk
   CAN_F4R2_FB17_Msk=(0x1U << CAN_F4R2_FB17_Pos)
   CAN_F4R2_FB17_Pos=(17U)
   CAN_F4R2_FB18=CAN_F4R2_FB18_Msk
   CAN_F4R2_FB18_Msk=(0x1U << CAN_F4R2_FB18_Pos)
   CAN_F4R2_FB18_Pos=(18U)
   CAN_F4R2_FB19=CAN_F4R2_FB19_Msk
   CAN_F4R2_FB19_Msk=(0x1U << CAN_F4R2_FB19_Pos)
   CAN_F4R2_FB19_Pos=(19U)
   CAN_F4R2_FB1=CAN_F4R2_FB1_Msk
   CAN_F4R2_FB1_Msk=(0x1U << CAN_F4R2_FB1_Pos)
   CAN_F4R2_FB1_Pos=(1U)
   CAN_F4R2_FB20=CAN_F4R2_FB20_Msk
   CAN_F4R2_FB20_Msk=(0x1U << CAN_F4R2_FB20_Pos)
   CAN_F4R2_FB20_Pos=(20U)
   CAN_F4R2_FB21=CAN_F4R2_FB21_Msk
   CAN_F4R2_FB21_Msk=(0x1U << CAN_F4R2_FB21_Pos)
   CAN_F4R2_FB21_Pos=(21U)
   CAN_F4R2_FB22=CAN_F4R2_FB22_Msk
   CAN_F4R2_FB22_Msk=(0x1U << CAN_F4R2_FB22_Pos)
   CAN_F4R2_FB22_Pos=(22U)
   CAN_F4R2_FB23=CAN_F4R2_FB23_Msk
   CAN_F4R2_FB23_Msk=(0x1U << CAN_F4R2_FB23_Pos)
   CAN_F4R2_FB23_Pos=(23U)
   CAN_F4R2_FB24=CAN_F4R2_FB24_Msk
   CAN_F4R2_FB24_Msk=(0x1U << CAN_F4R2_FB24_Pos)
   CAN_F4R2_FB24_Pos=(24U)
   CAN_F4R2_FB25=CAN_F4R2_FB25_Msk
   CAN_F4R2_FB25_Msk=(0x1U << CAN_F4R2_FB25_Pos)
   CAN_F4R2_FB25_Pos=(25U)
   CAN_F4R2_FB26=CAN_F4R2_FB26_Msk
   CAN_F4R2_FB26_Msk=(0x1U << CAN_F4R2_FB26_Pos)
   CAN_F4R2_FB26_Pos=(26U)
   CAN_F4R2_FB27=CAN_F4R2_FB27_Msk
   CAN_F4R2_FB27_Msk=(0x1U << CAN_F4R2_FB27_Pos)
   CAN_F4R2_FB27_Pos=(27U)
   CAN_F4R2_FB28=CAN_F4R2_FB28_Msk
   CAN_F4R2_FB28_Msk=(0x1U << CAN_F4R2_FB28_Pos)
   CAN_F4R2_FB28_Pos=(28U)
   CAN_F4R2_FB29=CAN_F4R2_FB29_Msk
   CAN_F4R2_FB29_Msk=(0x1U << CAN_F4R2_FB29_Pos)
   CAN_F4R2_FB29_Pos=(29U)
   CAN_F4R2_FB2=CAN_F4R2_FB2_Msk
   CAN_F4R2_FB2_Msk=(0x1U << CAN_F4R2_FB2_Pos)
   CAN_F4R2_FB2_Pos=(2U)
   CAN_F4R2_FB30=CAN_F4R2_FB30_Msk
   CAN_F4R2_FB30_Msk=(0x1U << CAN_F4R2_FB30_Pos)
   CAN_F4R2_FB30_Pos=(30U)
   CAN_F4R2_FB31=CAN_F4R2_FB31_Msk
   CAN_F4R2_FB31_Msk=(0x1U << CAN_F4R2_FB31_Pos)
   CAN_F4R2_FB31_Pos=(31U)
   CAN_F4R2_FB3=CAN_F4R2_FB3_Msk
   CAN_F4R2_FB3_Msk=(0x1U << CAN_F4R2_FB3_Pos)
   CAN_F4R2_FB3_Pos=(3U)
   CAN_F4R2_FB4=CAN_F4R2_FB4_Msk
   CAN_F4R2_FB4_Msk=(0x1U << CAN_F4R2_FB4_Pos)
   CAN_F4R2_FB4_Pos=(4U)
   CAN_F4R2_FB5=CAN_F4R2_FB5_Msk
   CAN_F4R2_FB5_Msk=(0x1U << CAN_F4R2_FB5_Pos)
   CAN_F4R2_FB5_Pos=(5U)
   CAN_F4R2_FB6=CAN_F4R2_FB6_Msk
   CAN_F4R2_FB6_Msk=(0x1U << CAN_F4R2_FB6_Pos)
   CAN_F4R2_FB6_Pos=(6U)
   CAN_F4R2_FB7=CAN_F4R2_FB7_Msk
   CAN_F4R2_FB7_Msk=(0x1U << CAN_F4R2_FB7_Pos)
   CAN_F4R2_FB7_Pos=(7U)
   CAN_F4R2_FB8=CAN_F4R2_FB8_Msk
   CAN_F4R2_FB8_Msk=(0x1U << CAN_F4R2_FB8_Pos)
   CAN_F4R2_FB8_Pos=(8U)
   CAN_F4R2_FB9=CAN_F4R2_FB9_Msk
   CAN_F4R2_FB9_Msk=(0x1U << CAN_F4R2_FB9_Pos)
   CAN_F4R2_FB9_Pos=(9U)
   CAN_F5R1_FB0=CAN_F5R1_FB0_Msk
   CAN_F5R1_FB0_Msk=(0x1U << CAN_F5R1_FB0_Pos)
   CAN_F5R1_FB0_Pos=(0U)
   CAN_F5R1_FB10=CAN_F5R1_FB10_Msk
   CAN_F5R1_FB10_Msk=(0x1U << CAN_F5R1_FB10_Pos)
   CAN_F5R1_FB10_Pos=(10U)
   CAN_F5R1_FB11=CAN_F5R1_FB11_Msk
   CAN_F5R1_FB11_Msk=(0x1U << CAN_F5R1_FB11_Pos)
   CAN_F5R1_FB11_Pos=(11U)
   CAN_F5R1_FB12=CAN_F5R1_FB12_Msk
   CAN_F5R1_FB12_Msk=(0x1U << CAN_F5R1_FB12_Pos)
   CAN_F5R1_FB12_Pos=(12U)
   CAN_F5R1_FB13=CAN_F5R1_FB13_Msk
   CAN_F5R1_FB13_Msk=(0x1U << CAN_F5R1_FB13_Pos)
   CAN_F5R1_FB13_Pos=(13U)
   CAN_F5R1_FB14=CAN_F5R1_FB14_Msk
   CAN_F5R1_FB14_Msk=(0x1U << CAN_F5R1_FB14_Pos)
   CAN_F5R1_FB14_Pos=(14U)
   CAN_F5R1_FB15=CAN_F5R1_FB15_Msk
   CAN_F5R1_FB15_Msk=(0x1U << CAN_F5R1_FB15_Pos)
   CAN_F5R1_FB15_Pos=(15U)
   CAN_F5R1_FB16=CAN_F5R1_FB16_Msk
   CAN_F5R1_FB16_Msk=(0x1U << CAN_F5R1_FB16_Pos)
   CAN_F5R1_FB16_Pos=(16U)
   CAN_F5R1_FB17=CAN_F5R1_FB17_Msk
   CAN_F5R1_FB17_Msk=(0x1U << CAN_F5R1_FB17_Pos)
   CAN_F5R1_FB17_Pos=(17U)
   CAN_F5R1_FB18=CAN_F5R1_FB18_Msk
   CAN_F5R1_FB18_Msk=(0x1U << CAN_F5R1_FB18_Pos)
   CAN_F5R1_FB18_Pos=(18U)
   CAN_F5R1_FB19=CAN_F5R1_FB19_Msk
   CAN_F5R1_FB19_Msk=(0x1U << CAN_F5R1_FB19_Pos)
   CAN_F5R1_FB19_Pos=(19U)
   CAN_F5R1_FB1=CAN_F5R1_FB1_Msk
   CAN_F5R1_FB1_Msk=(0x1U << CAN_F5R1_FB1_Pos)
   CAN_F5R1_FB1_Pos=(1U)
   CAN_F5R1_FB20=CAN_F5R1_FB20_Msk
   CAN_F5R1_FB20_Msk=(0x1U << CAN_F5R1_FB20_Pos)
   CAN_F5R1_FB20_Pos=(20U)
   CAN_F5R1_FB21=CAN_F5R1_FB21_Msk
   CAN_F5R1_FB21_Msk=(0x1U << CAN_F5R1_FB21_Pos)
   CAN_F5R1_FB21_Pos=(21U)
   CAN_F5R1_FB22=CAN_F5R1_FB22_Msk
   CAN_F5R1_FB22_Msk=(0x1U << CAN_F5R1_FB22_Pos)
   CAN_F5R1_FB22_Pos=(22U)
   CAN_F5R1_FB23=CAN_F5R1_FB23_Msk
   CAN_F5R1_FB23_Msk=(0x1U << CAN_F5R1_FB23_Pos)
   CAN_F5R1_FB23_Pos=(23U)
   CAN_F5R1_FB24=CAN_F5R1_FB24_Msk
   CAN_F5R1_FB24_Msk=(0x1U << CAN_F5R1_FB24_Pos)
   CAN_F5R1_FB24_Pos=(24U)
   CAN_F5R1_FB25=CAN_F5R1_FB25_Msk
   CAN_F5R1_FB25_Msk=(0x1U << CAN_F5R1_FB25_Pos)
   CAN_F5R1_FB25_Pos=(25U)
   CAN_F5R1_FB26=CAN_F5R1_FB26_Msk
   CAN_F5R1_FB26_Msk=(0x1U << CAN_F5R1_FB26_Pos)
   CAN_F5R1_FB26_Pos=(26U)
   CAN_F5R1_FB27=CAN_F5R1_FB27_Msk
   CAN_F5R1_FB27_Msk=(0x1U << CAN_F5R1_FB27_Pos)
   CAN_F5R1_FB27_Pos=(27U)
   CAN_F5R1_FB28=CAN_F5R1_FB28_Msk
   CAN_F5R1_FB28_Msk=(0x1U << CAN_F5R1_FB28_Pos)
   CAN_F5R1_FB28_Pos=(28U)
   CAN_F5R1_FB29=CAN_F5R1_FB29_Msk
   CAN_F5R1_FB29_Msk=(0x1U << CAN_F5R1_FB29_Pos)
   CAN_F5R1_FB29_Pos=(29U)
   CAN_F5R1_FB2=CAN_F5R1_FB2_Msk
   CAN_F5R1_FB2_Msk=(0x1U << CAN_F5R1_FB2_Pos)
   CAN_F5R1_FB2_Pos=(2U)
   CAN_F5R1_FB30=CAN_F5R1_FB30_Msk
   CAN_F5R1_FB30_Msk=(0x1U << CAN_F5R1_FB30_Pos)
   CAN_F5R1_FB30_Pos=(30U)
   CAN_F5R1_FB31=CAN_F5R1_FB31_Msk
   CAN_F5R1_FB31_Msk=(0x1U << CAN_F5R1_FB31_Pos)
   CAN_F5R1_FB31_Pos=(31U)
   CAN_F5R1_FB3=CAN_F5R1_FB3_Msk
   CAN_F5R1_FB3_Msk=(0x1U << CAN_F5R1_FB3_Pos)
   CAN_F5R1_FB3_Pos=(3U)
   CAN_F5R1_FB4=CAN_F5R1_FB4_Msk
   CAN_F5R1_FB4_Msk=(0x1U << CAN_F5R1_FB4_Pos)
   CAN_F5R1_FB4_Pos=(4U)
   CAN_F5R1_FB5=CAN_F5R1_FB5_Msk
   CAN_F5R1_FB5_Msk=(0x1U << CAN_F5R1_FB5_Pos)
   CAN_F5R1_FB5_Pos=(5U)
   CAN_F5R1_FB6=CAN_F5R1_FB6_Msk
   CAN_F5R1_FB6_Msk=(0x1U << CAN_F5R1_FB6_Pos)
   CAN_F5R1_FB6_Pos=(6U)
   CAN_F5R1_FB7=CAN_F5R1_FB7_Msk
   CAN_F5R1_FB7_Msk=(0x1U << CAN_F5R1_FB7_Pos)
   CAN_F5R1_FB7_Pos=(7U)
   CAN_F5R1_FB8=CAN_F5R1_FB8_Msk
   CAN_F5R1_FB8_Msk=(0x1U << CAN_F5R1_FB8_Pos)
   CAN_F5R1_FB8_Pos=(8U)
   CAN_F5R1_FB9=CAN_F5R1_FB9_Msk
   CAN_F5R1_FB9_Msk=(0x1U << CAN_F5R1_FB9_Pos)
   CAN_F5R1_FB9_Pos=(9U)
   CAN_F5R2_FB0=CAN_F5R2_FB0_Msk
   CAN_F5R2_FB0_Msk=(0x1U << CAN_F5R2_FB0_Pos)
   CAN_F5R2_FB0_Pos=(0U)
   CAN_F5R2_FB10=CAN_F5R2_FB10_Msk
   CAN_F5R2_FB10_Msk=(0x1U << CAN_F5R2_FB10_Pos)
   CAN_F5R2_FB10_Pos=(10U)
   CAN_F5R2_FB11=CAN_F5R2_FB11_Msk
   CAN_F5R2_FB11_Msk=(0x1U << CAN_F5R2_FB11_Pos)
   CAN_F5R2_FB11_Pos=(11U)
   CAN_F5R2_FB12=CAN_F5R2_FB12_Msk
   CAN_F5R2_FB12_Msk=(0x1U << CAN_F5R2_FB12_Pos)
   CAN_F5R2_FB12_Pos=(12U)
   CAN_F5R2_FB13=CAN_F5R2_FB13_Msk
   CAN_F5R2_FB13_Msk=(0x1U << CAN_F5R2_FB13_Pos)
   CAN_F5R2_FB13_Pos=(13U)
   CAN_F5R2_FB14=CAN_F5R2_FB14_Msk
   CAN_F5R2_FB14_Msk=(0x1U << CAN_F5R2_FB14_Pos)
   CAN_F5R2_FB14_Pos=(14U)
   CAN_F5R2_FB15=CAN_F5R2_FB15_Msk
   CAN_F5R2_FB15_Msk=(0x1U << CAN_F5R2_FB15_Pos)
   CAN_F5R2_FB15_Pos=(15U)
   CAN_F5R2_FB16=CAN_F5R2_FB16_Msk
   CAN_F5R2_FB16_Msk=(0x1U << CAN_F5R2_FB16_Pos)
   CAN_F5R2_FB16_Pos=(16U)
   CAN_F5R2_FB17=CAN_F5R2_FB17_Msk
   CAN_F5R2_FB17_Msk=(0x1U << CAN_F5R2_FB17_Pos)
   CAN_F5R2_FB17_Pos=(17U)
   CAN_F5R2_FB18=CAN_F5R2_FB18_Msk
   CAN_F5R2_FB18_Msk=(0x1U << CAN_F5R2_FB18_Pos)
   CAN_F5R2_FB18_Pos=(18U)
   CAN_F5R2_FB19=CAN_F5R2_FB19_Msk
   CAN_F5R2_FB19_Msk=(0x1U << CAN_F5R2_FB19_Pos)
   CAN_F5R2_FB19_Pos=(19U)
   CAN_F5R2_FB1=CAN_F5R2_FB1_Msk
   CAN_F5R2_FB1_Msk=(0x1U << CAN_F5R2_FB1_Pos)
   CAN_F5R2_FB1_Pos=(1U)
   CAN_F5R2_FB20=CAN_F5R2_FB20_Msk
   CAN_F5R2_FB20_Msk=(0x1U << CAN_F5R2_FB20_Pos)
   CAN_F5R2_FB20_Pos=(20U)
   CAN_F5R2_FB21=CAN_F5R2_FB21_Msk
   CAN_F5R2_FB21_Msk=(0x1U << CAN_F5R2_FB21_Pos)
   CAN_F5R2_FB21_Pos=(21U)
   CAN_F5R2_FB22=CAN_F5R2_FB22_Msk
   CAN_F5R2_FB22_Msk=(0x1U << CAN_F5R2_FB22_Pos)
   CAN_F5R2_FB22_Pos=(22U)
   CAN_F5R2_FB23=CAN_F5R2_FB23_Msk
   CAN_F5R2_FB23_Msk=(0x1U << CAN_F5R2_FB23_Pos)
   CAN_F5R2_FB23_Pos=(23U)
   CAN_F5R2_FB24=CAN_F5R2_FB24_Msk
   CAN_F5R2_FB24_Msk=(0x1U << CAN_F5R2_FB24_Pos)
   CAN_F5R2_FB24_Pos=(24U)
   CAN_F5R2_FB25=CAN_F5R2_FB25_Msk
   CAN_F5R2_FB25_Msk=(0x1U << CAN_F5R2_FB25_Pos)
   CAN_F5R2_FB25_Pos=(25U)
   CAN_F5R2_FB26=CAN_F5R2_FB26_Msk
   CAN_F5R2_FB26_Msk=(0x1U << CAN_F5R2_FB26_Pos)
   CAN_F5R2_FB26_Pos=(26U)
   CAN_F5R2_FB27=CAN_F5R2_FB27_Msk
   CAN_F5R2_FB27_Msk=(0x1U << CAN_F5R2_FB27_Pos)
   CAN_F5R2_FB27_Pos=(27U)
   CAN_F5R2_FB28=CAN_F5R2_FB28_Msk
   CAN_F5R2_FB28_Msk=(0x1U << CAN_F5R2_FB28_Pos)
   CAN_F5R2_FB28_Pos=(28U)
   CAN_F5R2_FB29=CAN_F5R2_FB29_Msk
   CAN_F5R2_FB29_Msk=(0x1U << CAN_F5R2_FB29_Pos)
   CAN_F5R2_FB29_Pos=(29U)
   CAN_F5R2_FB2=CAN_F5R2_FB2_Msk
   CAN_F5R2_FB2_Msk=(0x1U << CAN_F5R2_FB2_Pos)
   CAN_F5R2_FB2_Pos=(2U)
   CAN_F5R2_FB30=CAN_F5R2_FB30_Msk
   CAN_F5R2_FB30_Msk=(0x1U << CAN_F5R2_FB30_Pos)
   CAN_F5R2_FB30_Pos=(30U)
   CAN_F5R2_FB31=CAN_F5R2_FB31_Msk
   CAN_F5R2_FB31_Msk=(0x1U << CAN_F5R2_FB31_Pos)
   CAN_F5R2_FB31_Pos=(31U)
   CAN_F5R2_FB3=CAN_F5R2_FB3_Msk
   CAN_F5R2_FB3_Msk=(0x1U << CAN_F5R2_FB3_Pos)
   CAN_F5R2_FB3_Pos=(3U)
   CAN_F5R2_FB4=CAN_F5R2_FB4_Msk
   CAN_F5R2_FB4_Msk=(0x1U << CAN_F5R2_FB4_Pos)
   CAN_F5R2_FB4_Pos=(4U)
   CAN_F5R2_FB5=CAN_F5R2_FB5_Msk
   CAN_F5R2_FB5_Msk=(0x1U << CAN_F5R2_FB5_Pos)
   CAN_F5R2_FB5_Pos=(5U)
   CAN_F5R2_FB6=CAN_F5R2_FB6_Msk
   CAN_F5R2_FB6_Msk=(0x1U << CAN_F5R2_FB6_Pos)
   CAN_F5R2_FB6_Pos=(6U)
   CAN_F5R2_FB7=CAN_F5R2_FB7_Msk
   CAN_F5R2_FB7_Msk=(0x1U << CAN_F5R2_FB7_Pos)
   CAN_F5R2_FB7_Pos=(7U)
   CAN_F5R2_FB8=CAN_F5R2_FB8_Msk
   CAN_F5R2_FB8_Msk=(0x1U << CAN_F5R2_FB8_Pos)
   CAN_F5R2_FB8_Pos=(8U)
   CAN_F5R2_FB9=CAN_F5R2_FB9_Msk
   CAN_F5R2_FB9_Msk=(0x1U << CAN_F5R2_FB9_Pos)
   CAN_F5R2_FB9_Pos=(9U)
   CAN_F6R1_FB0=CAN_F6R1_FB0_Msk
   CAN_F6R1_FB0_Msk=(0x1U << CAN_F6R1_FB0_Pos)
   CAN_F6R1_FB0_Pos=(0U)
   CAN_F6R1_FB10=CAN_F6R1_FB10_Msk
   CAN_F6R1_FB10_Msk=(0x1U << CAN_F6R1_FB10_Pos)
   CAN_F6R1_FB10_Pos=(10U)
   CAN_F6R1_FB11=CAN_F6R1_FB11_Msk
   CAN_F6R1_FB11_Msk=(0x1U << CAN_F6R1_FB11_Pos)
   CAN_F6R1_FB11_Pos=(11U)
   CAN_F6R1_FB12=CAN_F6R1_FB12_Msk
   CAN_F6R1_FB12_Msk=(0x1U << CAN_F6R1_FB12_Pos)
   CAN_F6R1_FB12_Pos=(12U)
   CAN_F6R1_FB13=CAN_F6R1_FB13_Msk
   CAN_F6R1_FB13_Msk=(0x1U << CAN_F6R1_FB13_Pos)
   CAN_F6R1_FB13_Pos=(13U)
   CAN_F6R1_FB14=CAN_F6R1_FB14_Msk
   CAN_F6R1_FB14_Msk=(0x1U << CAN_F6R1_FB14_Pos)
   CAN_F6R1_FB14_Pos=(14U)
   CAN_F6R1_FB15=CAN_F6R1_FB15_Msk
   CAN_F6R1_FB15_Msk=(0x1U << CAN_F6R1_FB15_Pos)
   CAN_F6R1_FB15_Pos=(15U)
   CAN_F6R1_FB16=CAN_F6R1_FB16_Msk
   CAN_F6R1_FB16_Msk=(0x1U << CAN_F6R1_FB16_Pos)
   CAN_F6R1_FB16_Pos=(16U)
   CAN_F6R1_FB17=CAN_F6R1_FB17_Msk
   CAN_F6R1_FB17_Msk=(0x1U << CAN_F6R1_FB17_Pos)
   CAN_F6R1_FB17_Pos=(17U)
   CAN_F6R1_FB18=CAN_F6R1_FB18_Msk
   CAN_F6R1_FB18_Msk=(0x1U << CAN_F6R1_FB18_Pos)
   CAN_F6R1_FB18_Pos=(18U)
   CAN_F6R1_FB19=CAN_F6R1_FB19_Msk
   CAN_F6R1_FB19_Msk=(0x1U << CAN_F6R1_FB19_Pos)
   CAN_F6R1_FB19_Pos=(19U)
   CAN_F6R1_FB1=CAN_F6R1_FB1_Msk
   CAN_F6R1_FB1_Msk=(0x1U << CAN_F6R1_FB1_Pos)
   CAN_F6R1_FB1_Pos=(1U)
   CAN_F6R1_FB20=CAN_F6R1_FB20_Msk
   CAN_F6R1_FB20_Msk=(0x1U << CAN_F6R1_FB20_Pos)
   CAN_F6R1_FB20_Pos=(20U)
   CAN_F6R1_FB21=CAN_F6R1_FB21_Msk
   CAN_F6R1_FB21_Msk=(0x1U << CAN_F6R1_FB21_Pos)
   CAN_F6R1_FB21_Pos=(21U)
   CAN_F6R1_FB22=CAN_F6R1_FB22_Msk
   CAN_F6R1_FB22_Msk=(0x1U << CAN_F6R1_FB22_Pos)
   CAN_F6R1_FB22_Pos=(22U)
   CAN_F6R1_FB23=CAN_F6R1_FB23_Msk
   CAN_F6R1_FB23_Msk=(0x1U << CAN_F6R1_FB23_Pos)
   CAN_F6R1_FB23_Pos=(23U)
   CAN_F6R1_FB24=CAN_F6R1_FB24_Msk
   CAN_F6R1_FB24_Msk=(0x1U << CAN_F6R1_FB24_Pos)
   CAN_F6R1_FB24_Pos=(24U)
   CAN_F6R1_FB25=CAN_F6R1_FB25_Msk
   CAN_F6R1_FB25_Msk=(0x1U << CAN_F6R1_FB25_Pos)
   CAN_F6R1_FB25_Pos=(25U)
   CAN_F6R1_FB26=CAN_F6R1_FB26_Msk
   CAN_F6R1_FB26_Msk=(0x1U << CAN_F6R1_FB26_Pos)
   CAN_F6R1_FB26_Pos=(26U)
   CAN_F6R1_FB27=CAN_F6R1_FB27_Msk
   CAN_F6R1_FB27_Msk=(0x1U << CAN_F6R1_FB27_Pos)
   CAN_F6R1_FB27_Pos=(27U)
   CAN_F6R1_FB28=CAN_F6R1_FB28_Msk
   CAN_F6R1_FB28_Msk=(0x1U << CAN_F6R1_FB28_Pos)
   CAN_F6R1_FB28_Pos=(28U)
   CAN_F6R1_FB29=CAN_F6R1_FB29_Msk
   CAN_F6R1_FB29_Msk=(0x1U << CAN_F6R1_FB29_Pos)
   CAN_F6R1_FB29_Pos=(29U)
   CAN_F6R1_FB2=CAN_F6R1_FB2_Msk
   CAN_F6R1_FB2_Msk=(0x1U << CAN_F6R1_FB2_Pos)
   CAN_F6R1_FB2_Pos=(2U)
   CAN_F6R1_FB30=CAN_F6R1_FB30_Msk
   CAN_F6R1_FB30_Msk=(0x1U << CAN_F6R1_FB30_Pos)
   CAN_F6R1_FB30_Pos=(30U)
   CAN_F6R1_FB31=CAN_F6R1_FB31_Msk
   CAN_F6R1_FB31_Msk=(0x1U << CAN_F6R1_FB31_Pos)
   CAN_F6R1_FB31_Pos=(31U)
   CAN_F6R1_FB3=CAN_F6R1_FB3_Msk
   CAN_F6R1_FB3_Msk=(0x1U << CAN_F6R1_FB3_Pos)
   CAN_F6R1_FB3_Pos=(3U)
   CAN_F6R1_FB4=CAN_F6R1_FB4_Msk
   CAN_F6R1_FB4_Msk=(0x1U << CAN_F6R1_FB4_Pos)
   CAN_F6R1_FB4_Pos=(4U)
   CAN_F6R1_FB5=CAN_F6R1_FB5_Msk
   CAN_F6R1_FB5_Msk=(0x1U << CAN_F6R1_FB5_Pos)
   CAN_F6R1_FB5_Pos=(5U)
   CAN_F6R1_FB6=CAN_F6R1_FB6_Msk
   CAN_F6R1_FB6_Msk=(0x1U << CAN_F6R1_FB6_Pos)
   CAN_F6R1_FB6_Pos=(6U)
   CAN_F6R1_FB7=CAN_F6R1_FB7_Msk
   CAN_F6R1_FB7_Msk=(0x1U << CAN_F6R1_FB7_Pos)
   CAN_F6R1_FB7_Pos=(7U)
   CAN_F6R1_FB8=CAN_F6R1_FB8_Msk
   CAN_F6R1_FB8_Msk=(0x1U << CAN_F6R1_FB8_Pos)
   CAN_F6R1_FB8_Pos=(8U)
   CAN_F6R1_FB9=CAN_F6R1_FB9_Msk
   CAN_F6R1_FB9_Msk=(0x1U << CAN_F6R1_FB9_Pos)
   CAN_F6R1_FB9_Pos=(9U)
   CAN_F6R2_FB0=CAN_F6R2_FB0_Msk
   CAN_F6R2_FB0_Msk=(0x1U << CAN_F6R2_FB0_Pos)
   CAN_F6R2_FB0_Pos=(0U)
   CAN_F6R2_FB10=CAN_F6R2_FB10_Msk
   CAN_F6R2_FB10_Msk=(0x1U << CAN_F6R2_FB10_Pos)
   CAN_F6R2_FB10_Pos=(10U)
   CAN_F6R2_FB11=CAN_F6R2_FB11_Msk
   CAN_F6R2_FB11_Msk=(0x1U << CAN_F6R2_FB11_Pos)
   CAN_F6R2_FB11_Pos=(11U)
   CAN_F6R2_FB12=CAN_F6R2_FB12_Msk
   CAN_F6R2_FB12_Msk=(0x1U << CAN_F6R2_FB12_Pos)
   CAN_F6R2_FB12_Pos=(12U)
   CAN_F6R2_FB13=CAN_F6R2_FB13_Msk
   CAN_F6R2_FB13_Msk=(0x1U << CAN_F6R2_FB13_Pos)
   CAN_F6R2_FB13_Pos=(13U)
   CAN_F6R2_FB14=CAN_F6R2_FB14_Msk
   CAN_F6R2_FB14_Msk=(0x1U << CAN_F6R2_FB14_Pos)
   CAN_F6R2_FB14_Pos=(14U)
   CAN_F6R2_FB15=CAN_F6R2_FB15_Msk
   CAN_F6R2_FB15_Msk=(0x1U << CAN_F6R2_FB15_Pos)
   CAN_F6R2_FB15_Pos=(15U)
   CAN_F6R2_FB16=CAN_F6R2_FB16_Msk
   CAN_F6R2_FB16_Msk=(0x1U << CAN_F6R2_FB16_Pos)
   CAN_F6R2_FB16_Pos=(16U)
   CAN_F6R2_FB17=CAN_F6R2_FB17_Msk
   CAN_F6R2_FB17_Msk=(0x1U << CAN_F6R2_FB17_Pos)
   CAN_F6R2_FB17_Pos=(17U)
   CAN_F6R2_FB18=CAN_F6R2_FB18_Msk
   CAN_F6R2_FB18_Msk=(0x1U << CAN_F6R2_FB18_Pos)
   CAN_F6R2_FB18_Pos=(18U)
   CAN_F6R2_FB19=CAN_F6R2_FB19_Msk
   CAN_F6R2_FB19_Msk=(0x1U << CAN_F6R2_FB19_Pos)
   CAN_F6R2_FB19_Pos=(19U)
   CAN_F6R2_FB1=CAN_F6R2_FB1_Msk
   CAN_F6R2_FB1_Msk=(0x1U << CAN_F6R2_FB1_Pos)
   CAN_F6R2_FB1_Pos=(1U)
   CAN_F6R2_FB20=CAN_F6R2_FB20_Msk
   CAN_F6R2_FB20_Msk=(0x1U << CAN_F6R2_FB20_Pos)
   CAN_F6R2_FB20_Pos=(20U)
   CAN_F6R2_FB21=CAN_F6R2_FB21_Msk
   CAN_F6R2_FB21_Msk=(0x1U << CAN_F6R2_FB21_Pos)
   CAN_F6R2_FB21_Pos=(21U)
   CAN_F6R2_FB22=CAN_F6R2_FB22_Msk
   CAN_F6R2_FB22_Msk=(0x1U << CAN_F6R2_FB22_Pos)
   CAN_F6R2_FB22_Pos=(22U)
   CAN_F6R2_FB23=CAN_F6R2_FB23_Msk
   CAN_F6R2_FB23_Msk=(0x1U << CAN_F6R2_FB23_Pos)
   CAN_F6R2_FB23_Pos=(23U)
   CAN_F6R2_FB24=CAN_F6R2_FB24_Msk
   CAN_F6R2_FB24_Msk=(0x1U << CAN_F6R2_FB24_Pos)
   CAN_F6R2_FB24_Pos=(24U)
   CAN_F6R2_FB25=CAN_F6R2_FB25_Msk
   CAN_F6R2_FB25_Msk=(0x1U << CAN_F6R2_FB25_Pos)
   CAN_F6R2_FB25_Pos=(25U)
   CAN_F6R2_FB26=CAN_F6R2_FB26_Msk
   CAN_F6R2_FB26_Msk=(0x1U << CAN_F6R2_FB26_Pos)
   CAN_F6R2_FB26_Pos=(26U)
   CAN_F6R2_FB27=CAN_F6R2_FB27_Msk
   CAN_F6R2_FB27_Msk=(0x1U << CAN_F6R2_FB27_Pos)
   CAN_F6R2_FB27_Pos=(27U)
   CAN_F6R2_FB28=CAN_F6R2_FB28_Msk
   CAN_F6R2_FB28_Msk=(0x1U << CAN_F6R2_FB28_Pos)
   CAN_F6R2_FB28_Pos=(28U)
   CAN_F6R2_FB29=CAN_F6R2_FB29_Msk
   CAN_F6R2_FB29_Msk=(0x1U << CAN_F6R2_FB29_Pos)
   CAN_F6R2_FB29_Pos=(29U)
   CAN_F6R2_FB2=CAN_F6R2_FB2_Msk
   CAN_F6R2_FB2_Msk=(0x1U << CAN_F6R2_FB2_Pos)
   CAN_F6R2_FB2_Pos=(2U)
   CAN_F6R2_FB30=CAN_F6R2_FB30_Msk
   CAN_F6R2_FB30_Msk=(0x1U << CAN_F6R2_FB30_Pos)
   CAN_F6R2_FB30_Pos=(30U)
   CAN_F6R2_FB31=CAN_F6R2_FB31_Msk
   CAN_F6R2_FB31_Msk=(0x1U << CAN_F6R2_FB31_Pos)
   CAN_F6R2_FB31_Pos=(31U)
   CAN_F6R2_FB3=CAN_F6R2_FB3_Msk
   CAN_F6R2_FB3_Msk=(0x1U << CAN_F6R2_FB3_Pos)
   CAN_F6R2_FB3_Pos=(3U)
   CAN_F6R2_FB4=CAN_F6R2_FB4_Msk
   CAN_F6R2_FB4_Msk=(0x1U << CAN_F6R2_FB4_Pos)
   CAN_F6R2_FB4_Pos=(4U)
   CAN_F6R2_FB5=CAN_F6R2_FB5_Msk
   CAN_F6R2_FB5_Msk=(0x1U << CAN_F6R2_FB5_Pos)
   CAN_F6R2_FB5_Pos=(5U)
   CAN_F6R2_FB6=CAN_F6R2_FB6_Msk
   CAN_F6R2_FB6_Msk=(0x1U << CAN_F6R2_FB6_Pos)
   CAN_F6R2_FB6_Pos=(6U)
   CAN_F6R2_FB7=CAN_F6R2_FB7_Msk
   CAN_F6R2_FB7_Msk=(0x1U << CAN_F6R2_FB7_Pos)
   CAN_F6R2_FB7_Pos=(7U)
   CAN_F6R2_FB8=CAN_F6R2_FB8_Msk
   CAN_F6R2_FB8_Msk=(0x1U << CAN_F6R2_FB8_Pos)
   CAN_F6R2_FB8_Pos=(8U)
   CAN_F6R2_FB9=CAN_F6R2_FB9_Msk
   CAN_F6R2_FB9_Msk=(0x1U << CAN_F6R2_FB9_Pos)
   CAN_F6R2_FB9_Pos=(9U)
   CAN_F7R1_FB0=CAN_F7R1_FB0_Msk
   CAN_F7R1_FB0_Msk=(0x1U << CAN_F7R1_FB0_Pos)
   CAN_F7R1_FB0_Pos=(0U)
   CAN_F7R1_FB10=CAN_F7R1_FB10_Msk
   CAN_F7R1_FB10_Msk=(0x1U << CAN_F7R1_FB10_Pos)
   CAN_F7R1_FB10_Pos=(10U)
   CAN_F7R1_FB11=CAN_F7R1_FB11_Msk
   CAN_F7R1_FB11_Msk=(0x1U << CAN_F7R1_FB11_Pos)
   CAN_F7R1_FB11_Pos=(11U)
   CAN_F7R1_FB12=CAN_F7R1_FB12_Msk
   CAN_F7R1_FB12_Msk=(0x1U << CAN_F7R1_FB12_Pos)
   CAN_F7R1_FB12_Pos=(12U)
   CAN_F7R1_FB13=CAN_F7R1_FB13_Msk
   CAN_F7R1_FB13_Msk=(0x1U << CAN_F7R1_FB13_Pos)
   CAN_F7R1_FB13_Pos=(13U)
   CAN_F7R1_FB14=CAN_F7R1_FB14_Msk
   CAN_F7R1_FB14_Msk=(0x1U << CAN_F7R1_FB14_Pos)
   CAN_F7R1_FB14_Pos=(14U)
   CAN_F7R1_FB15=CAN_F7R1_FB15_Msk
   CAN_F7R1_FB15_Msk=(0x1U << CAN_F7R1_FB15_Pos)
   CAN_F7R1_FB15_Pos=(15U)
   CAN_F7R1_FB16=CAN_F7R1_FB16_Msk
   CAN_F7R1_FB16_Msk=(0x1U << CAN_F7R1_FB16_Pos)
   CAN_F7R1_FB16_Pos=(16U)
   CAN_F7R1_FB17=CAN_F7R1_FB17_Msk
   CAN_F7R1_FB17_Msk=(0x1U << CAN_F7R1_FB17_Pos)
   CAN_F7R1_FB17_Pos=(17U)
   CAN_F7R1_FB18=CAN_F7R1_FB18_Msk
   CAN_F7R1_FB18_Msk=(0x1U << CAN_F7R1_FB18_Pos)
   CAN_F7R1_FB18_Pos=(18U)
   CAN_F7R1_FB19=CAN_F7R1_FB19_Msk
   CAN_F7R1_FB19_Msk=(0x1U << CAN_F7R1_FB19_Pos)
   CAN_F7R1_FB19_Pos=(19U)
   CAN_F7R1_FB1=CAN_F7R1_FB1_Msk
   CAN_F7R1_FB1_Msk=(0x1U << CAN_F7R1_FB1_Pos)
   CAN_F7R1_FB1_Pos=(1U)
   CAN_F7R1_FB20=CAN_F7R1_FB20_Msk
   CAN_F7R1_FB20_Msk=(0x1U << CAN_F7R1_FB20_Pos)
   CAN_F7R1_FB20_Pos=(20U)
   CAN_F7R1_FB21=CAN_F7R1_FB21_Msk
   CAN_F7R1_FB21_Msk=(0x1U << CAN_F7R1_FB21_Pos)
   CAN_F7R1_FB21_Pos=(21U)
   CAN_F7R1_FB22=CAN_F7R1_FB22_Msk
   CAN_F7R1_FB22_Msk=(0x1U << CAN_F7R1_FB22_Pos)
   CAN_F7R1_FB22_Pos=(22U)
   CAN_F7R1_FB23=CAN_F7R1_FB23_Msk
   CAN_F7R1_FB23_Msk=(0x1U << CAN_F7R1_FB23_Pos)
   CAN_F7R1_FB23_Pos=(23U)
   CAN_F7R1_FB24=CAN_F7R1_FB24_Msk
   CAN_F7R1_FB24_Msk=(0x1U << CAN_F7R1_FB24_Pos)
   CAN_F7R1_FB24_Pos=(24U)
   CAN_F7R1_FB25=CAN_F7R1_FB25_Msk
   CAN_F7R1_FB25_Msk=(0x1U << CAN_F7R1_FB25_Pos)
   CAN_F7R1_FB25_Pos=(25U)
   CAN_F7R1_FB26=CAN_F7R1_FB26_Msk
   CAN_F7R1_FB26_Msk=(0x1U << CAN_F7R1_FB26_Pos)
   CAN_F7R1_FB26_Pos=(26U)
   CAN_F7R1_FB27=CAN_F7R1_FB27_Msk
   CAN_F7R1_FB27_Msk=(0x1U << CAN_F7R1_FB27_Pos)
   CAN_F7R1_FB27_Pos=(27U)
   CAN_F7R1_FB28=CAN_F7R1_FB28_Msk
   CAN_F7R1_FB28_Msk=(0x1U << CAN_F7R1_FB28_Pos)
   CAN_F7R1_FB28_Pos=(28U)
   CAN_F7R1_FB29=CAN_F7R1_FB29_Msk
   CAN_F7R1_FB29_Msk=(0x1U << CAN_F7R1_FB29_Pos)
   CAN_F7R1_FB29_Pos=(29U)
   CAN_F7R1_FB2=CAN_F7R1_FB2_Msk
   CAN_F7R1_FB2_Msk=(0x1U << CAN_F7R1_FB2_Pos)
   CAN_F7R1_FB2_Pos=(2U)
   CAN_F7R1_FB30=CAN_F7R1_FB30_Msk
   CAN_F7R1_FB30_Msk=(0x1U << CAN_F7R1_FB30_Pos)
   CAN_F7R1_FB30_Pos=(30U)
   CAN_F7R1_FB31=CAN_F7R1_FB31_Msk
   CAN_F7R1_FB31_Msk=(0x1U << CAN_F7R1_FB31_Pos)
   CAN_F7R1_FB31_Pos=(31U)
   CAN_F7R1_FB3=CAN_F7R1_FB3_Msk
   CAN_F7R1_FB3_Msk=(0x1U << CAN_F7R1_FB3_Pos)
   CAN_F7R1_FB3_Pos=(3U)
   CAN_F7R1_FB4=CAN_F7R1_FB4_Msk
   CAN_F7R1_FB4_Msk=(0x1U << CAN_F7R1_FB4_Pos)
   CAN_F7R1_FB4_Pos=(4U)
   CAN_F7R1_FB5=CAN_F7R1_FB5_Msk
   CAN_F7R1_FB5_Msk=(0x1U << CAN_F7R1_FB5_Pos)
   CAN_F7R1_FB5_Pos=(5U)
   CAN_F7R1_FB6=CAN_F7R1_FB6_Msk
   CAN_F7R1_FB6_Msk=(0x1U << CAN_F7R1_FB6_Pos)
   CAN_F7R1_FB6_Pos=(6U)
   CAN_F7R1_FB7=CAN_F7R1_FB7_Msk
   CAN_F7R1_FB7_Msk=(0x1U << CAN_F7R1_FB7_Pos)
   CAN_F7R1_FB7_Pos=(7U)
   CAN_F7R1_FB8=CAN_F7R1_FB8_Msk
   CAN_F7R1_FB8_Msk=(0x1U << CAN_F7R1_FB8_Pos)
   CAN_F7R1_FB8_Pos=(8U)
   CAN_F7R1_FB9=CAN_F7R1_FB9_Msk
   CAN_F7R1_FB9_Msk=(0x1U << CAN_F7R1_FB9_Pos)
   CAN_F7R1_FB9_Pos=(9U)
   CAN_F7R2_FB0=CAN_F7R2_FB0_Msk
   CAN_F7R2_FB0_Msk=(0x1U << CAN_F7R2_FB0_Pos)
   CAN_F7R2_FB0_Pos=(0U)
   CAN_F7R2_FB10=CAN_F7R2_FB10_Msk
   CAN_F7R2_FB10_Msk=(0x1U << CAN_F7R2_FB10_Pos)
   CAN_F7R2_FB10_Pos=(10U)
   CAN_F7R2_FB11=CAN_F7R2_FB11_Msk
   CAN_F7R2_FB11_Msk=(0x1U << CAN_F7R2_FB11_Pos)
   CAN_F7R2_FB11_Pos=(11U)
   CAN_F7R2_FB12=CAN_F7R2_FB12_Msk
   CAN_F7R2_FB12_Msk=(0x1U << CAN_F7R2_FB12_Pos)
   CAN_F7R2_FB12_Pos=(12U)
   CAN_F7R2_FB13=CAN_F7R2_FB13_Msk
   CAN_F7R2_FB13_Msk=(0x1U << CAN_F7R2_FB13_Pos)
   CAN_F7R2_FB13_Pos=(13U)
   CAN_F7R2_FB14=CAN_F7R2_FB14_Msk
   CAN_F7R2_FB14_Msk=(0x1U << CAN_F7R2_FB14_Pos)
   CAN_F7R2_FB14_Pos=(14U)
   CAN_F7R2_FB15=CAN_F7R2_FB15_Msk
   CAN_F7R2_FB15_Msk=(0x1U << CAN_F7R2_FB15_Pos)
   CAN_F7R2_FB15_Pos=(15U)
   CAN_F7R2_FB16=CAN_F7R2_FB16_Msk
   CAN_F7R2_FB16_Msk=(0x1U << CAN_F7R2_FB16_Pos)
   CAN_F7R2_FB16_Pos=(16U)
   CAN_F7R2_FB17=CAN_F7R2_FB17_Msk
   CAN_F7R2_FB17_Msk=(0x1U << CAN_F7R2_FB17_Pos)
   CAN_F7R2_FB17_Pos=(17U)
   CAN_F7R2_FB18=CAN_F7R2_FB18_Msk
   CAN_F7R2_FB18_Msk=(0x1U << CAN_F7R2_FB18_Pos)
   CAN_F7R2_FB18_Pos=(18U)
   CAN_F7R2_FB19=CAN_F7R2_FB19_Msk
   CAN_F7R2_FB19_Msk=(0x1U << CAN_F7R2_FB19_Pos)
   CAN_F7R2_FB19_Pos=(19U)
   CAN_F7R2_FB1=CAN_F7R2_FB1_Msk
   CAN_F7R2_FB1_Msk=(0x1U << CAN_F7R2_FB1_Pos)
   CAN_F7R2_FB1_Pos=(1U)
   CAN_F7R2_FB20=CAN_F7R2_FB20_Msk
   CAN_F7R2_FB20_Msk=(0x1U << CAN_F7R2_FB20_Pos)
   CAN_F7R2_FB20_Pos=(20U)
   CAN_F7R2_FB21=CAN_F7R2_FB21_Msk
   CAN_F7R2_FB21_Msk=(0x1U << CAN_F7R2_FB21_Pos)
   CAN_F7R2_FB21_Pos=(21U)
   CAN_F7R2_FB22=CAN_F7R2_FB22_Msk
   CAN_F7R2_FB22_Msk=(0x1U << CAN_F7R2_FB22_Pos)
   CAN_F7R2_FB22_Pos=(22U)
   CAN_F7R2_FB23=CAN_F7R2_FB23_Msk
   CAN_F7R2_FB23_Msk=(0x1U << CAN_F7R2_FB23_Pos)
   CAN_F7R2_FB23_Pos=(23U)
   CAN_F7R2_FB24=CAN_F7R2_FB24_Msk
   CAN_F7R2_FB24_Msk=(0x1U << CAN_F7R2_FB24_Pos)
   CAN_F7R2_FB24_Pos=(24U)
   CAN_F7R2_FB25=CAN_F7R2_FB25_Msk
   CAN_F7R2_FB25_Msk=(0x1U << CAN_F7R2_FB25_Pos)
   CAN_F7R2_FB25_Pos=(25U)
   CAN_F7R2_FB26=CAN_F7R2_FB26_Msk
   CAN_F7R2_FB26_Msk=(0x1U << CAN_F7R2_FB26_Pos)
   CAN_F7R2_FB26_Pos=(26U)
   CAN_F7R2_FB27=CAN_F7R2_FB27_Msk
   CAN_F7R2_FB27_Msk=(0x1U << CAN_F7R2_FB27_Pos)
   CAN_F7R2_FB27_Pos=(27U)
   CAN_F7R2_FB28=CAN_F7R2_FB28_Msk
   CAN_F7R2_FB28_Msk=(0x1U << CAN_F7R2_FB28_Pos)
   CAN_F7R2_FB28_Pos=(28U)
   CAN_F7R2_FB29=CAN_F7R2_FB29_Msk
   CAN_F7R2_FB29_Msk=(0x1U << CAN_F7R2_FB29_Pos)
   CAN_F7R2_FB29_Pos=(29U)
   CAN_F7R2_FB2=CAN_F7R2_FB2_Msk
   CAN_F7R2_FB2_Msk=(0x1U << CAN_F7R2_FB2_Pos)
   CAN_F7R2_FB2_Pos=(2U)
   CAN_F7R2_FB30=CAN_F7R2_FB30_Msk
   CAN_F7R2_FB30_Msk=(0x1U << CAN_F7R2_FB30_Pos)
   CAN_F7R2_FB30_Pos=(30U)
   CAN_F7R2_FB31=CAN_F7R2_FB31_Msk
   CAN_F7R2_FB31_Msk=(0x1U << CAN_F7R2_FB31_Pos)
   CAN_F7R2_FB31_Pos=(31U)
   CAN_F7R2_FB3=CAN_F7R2_FB3_Msk
   CAN_F7R2_FB3_Msk=(0x1U << CAN_F7R2_FB3_Pos)
   CAN_F7R2_FB3_Pos=(3U)
   CAN_F7R2_FB4=CAN_F7R2_FB4_Msk
   CAN_F7R2_FB4_Msk=(0x1U << CAN_F7R2_FB4_Pos)
   CAN_F7R2_FB4_Pos=(4U)
   CAN_F7R2_FB5=CAN_F7R2_FB5_Msk
   CAN_F7R2_FB5_Msk=(0x1U << CAN_F7R2_FB5_Pos)
   CAN_F7R2_FB5_Pos=(5U)
   CAN_F7R2_FB6=CAN_F7R2_FB6_Msk
   CAN_F7R2_FB6_Msk=(0x1U << CAN_F7R2_FB6_Pos)
   CAN_F7R2_FB6_Pos=(6U)
   CAN_F7R2_FB7=CAN_F7R2_FB7_Msk
   CAN_F7R2_FB7_Msk=(0x1U << CAN_F7R2_FB7_Pos)
   CAN_F7R2_FB7_Pos=(7U)
   CAN_F7R2_FB8=CAN_F7R2_FB8_Msk
   CAN_F7R2_FB8_Msk=(0x1U << CAN_F7R2_FB8_Pos)
   CAN_F7R2_FB8_Pos=(8U)
   CAN_F7R2_FB9=CAN_F7R2_FB9_Msk
   CAN_F7R2_FB9_Msk=(0x1U << CAN_F7R2_FB9_Pos)
   CAN_F7R2_FB9_Pos=(9U)
   CAN_F8R1_FB0=CAN_F8R1_FB0_Msk
   CAN_F8R1_FB0_Msk=(0x1U << CAN_F8R1_FB0_Pos)
   CAN_F8R1_FB0_Pos=(0U)
   CAN_F8R1_FB10=CAN_F8R1_FB10_Msk
   CAN_F8R1_FB10_Msk=(0x1U << CAN_F8R1_FB10_Pos)
   CAN_F8R1_FB10_Pos=(10U)
   CAN_F8R1_FB11=CAN_F8R1_FB11_Msk
   CAN_F8R1_FB11_Msk=(0x1U << CAN_F8R1_FB11_Pos)
   CAN_F8R1_FB11_Pos=(11U)
   CAN_F8R1_FB12=CAN_F8R1_FB12_Msk
   CAN_F8R1_FB12_Msk=(0x1U << CAN_F8R1_FB12_Pos)
   CAN_F8R1_FB12_Pos=(12U)
   CAN_F8R1_FB13=CAN_F8R1_FB13_Msk
   CAN_F8R1_FB13_Msk=(0x1U << CAN_F8R1_FB13_Pos)
   CAN_F8R1_FB13_Pos=(13U)
   CAN_F8R1_FB14=CAN_F8R1_FB14_Msk
   CAN_F8R1_FB14_Msk=(0x1U << CAN_F8R1_FB14_Pos)
   CAN_F8R1_FB14_Pos=(14U)
   CAN_F8R1_FB15=CAN_F8R1_FB15_Msk
   CAN_F8R1_FB15_Msk=(0x1U << CAN_F8R1_FB15_Pos)
   CAN_F8R1_FB15_Pos=(15U)
   CAN_F8R1_FB16=CAN_F8R1_FB16_Msk
   CAN_F8R1_FB16_Msk=(0x1U << CAN_F8R1_FB16_Pos)
   CAN_F8R1_FB16_Pos=(16U)
   CAN_F8R1_FB17=CAN_F8R1_FB17_Msk
   CAN_F8R1_FB17_Msk=(0x1U << CAN_F8R1_FB17_Pos)
   CAN_F8R1_FB17_Pos=(17U)
   CAN_F8R1_FB18=CAN_F8R1_FB18_Msk
   CAN_F8R1_FB18_Msk=(0x1U << CAN_F8R1_FB18_Pos)
   CAN_F8R1_FB18_Pos=(18U)
   CAN_F8R1_FB19=CAN_F8R1_FB19_Msk
   CAN_F8R1_FB19_Msk=(0x1U << CAN_F8R1_FB19_Pos)
   CAN_F8R1_FB19_Pos=(19U)
   CAN_F8R1_FB1=CAN_F8R1_FB1_Msk
   CAN_F8R1_FB1_Msk=(0x1U << CAN_F8R1_FB1_Pos)
   CAN_F8R1_FB1_Pos=(1U)
   CAN_F8R1_FB20=CAN_F8R1_FB20_Msk
   CAN_F8R1_FB20_Msk=(0x1U << CAN_F8R1_FB20_Pos)
   CAN_F8R1_FB20_Pos=(20U)
   CAN_F8R1_FB21=CAN_F8R1_FB21_Msk
   CAN_F8R1_FB21_Msk=(0x1U << CAN_F8R1_FB21_Pos)
   CAN_F8R1_FB21_Pos=(21U)
   CAN_F8R1_FB22=CAN_F8R1_FB22_Msk
   CAN_F8R1_FB22_Msk=(0x1U << CAN_F8R1_FB22_Pos)
   CAN_F8R1_FB22_Pos=(22U)
   CAN_F8R1_FB23=CAN_F8R1_FB23_Msk
   CAN_F8R1_FB23_Msk=(0x1U << CAN_F8R1_FB23_Pos)
   CAN_F8R1_FB23_Pos=(23U)
   CAN_F8R1_FB24=CAN_F8R1_FB24_Msk
   CAN_F8R1_FB24_Msk=(0x1U << CAN_F8R1_FB24_Pos)
   CAN_F8R1_FB24_Pos=(24U)
   CAN_F8R1_FB25=CAN_F8R1_FB25_Msk
   CAN_F8R1_FB25_Msk=(0x1U << CAN_F8R1_FB25_Pos)
   CAN_F8R1_FB25_Pos=(25U)
   CAN_F8R1_FB26=CAN_F8R1_FB26_Msk
   CAN_F8R1_FB26_Msk=(0x1U << CAN_F8R1_FB26_Pos)
   CAN_F8R1_FB26_Pos=(26U)
   CAN_F8R1_FB27=CAN_F8R1_FB27_Msk
   CAN_F8R1_FB27_Msk=(0x1U << CAN_F8R1_FB27_Pos)
   CAN_F8R1_FB27_Pos=(27U)
   CAN_F8R1_FB28=CAN_F8R1_FB28_Msk
   CAN_F8R1_FB28_Msk=(0x1U << CAN_F8R1_FB28_Pos)
   CAN_F8R1_FB28_Pos=(28U)
   CAN_F8R1_FB29=CAN_F8R1_FB29_Msk
   CAN_F8R1_FB29_Msk=(0x1U << CAN_F8R1_FB29_Pos)
   CAN_F8R1_FB29_Pos=(29U)
   CAN_F8R1_FB2=CAN_F8R1_FB2_Msk
   CAN_F8R1_FB2_Msk=(0x1U << CAN_F8R1_FB2_Pos)
   CAN_F8R1_FB2_Pos=(2U)
   CAN_F8R1_FB30=CAN_F8R1_FB30_Msk
   CAN_F8R1_FB30_Msk=(0x1U << CAN_F8R1_FB30_Pos)
   CAN_F8R1_FB30_Pos=(30U)
   CAN_F8R1_FB31=CAN_F8R1_FB31_Msk
   CAN_F8R1_FB31_Msk=(0x1U << CAN_F8R1_FB31_Pos)
   CAN_F8R1_FB31_Pos=(31U)
   CAN_F8R1_FB3=CAN_F8R1_FB3_Msk
   CAN_F8R1_FB3_Msk=(0x1U << CAN_F8R1_FB3_Pos)
   CAN_F8R1_FB3_Pos=(3U)
   CAN_F8R1_FB4=CAN_F8R1_FB4_Msk
   CAN_F8R1_FB4_Msk=(0x1U << CAN_F8R1_FB4_Pos)
   CAN_F8R1_FB4_Pos=(4U)
   CAN_F8R1_FB5=CAN_F8R1_FB5_Msk
   CAN_F8R1_FB5_Msk=(0x1U << CAN_F8R1_FB5_Pos)
   CAN_F8R1_FB5_Pos=(5U)
   CAN_F8R1_FB6=CAN_F8R1_FB6_Msk
   CAN_F8R1_FB6_Msk=(0x1U << CAN_F8R1_FB6_Pos)
   CAN_F8R1_FB6_Pos=(6U)
   CAN_F8R1_FB7=CAN_F8R1_FB7_Msk
   CAN_F8R1_FB7_Msk=(0x1U << CAN_F8R1_FB7_Pos)
   CAN_F8R1_FB7_Pos=(7U)
   CAN_F8R1_FB8=CAN_F8R1_FB8_Msk
   CAN_F8R1_FB8_Msk=(0x1U << CAN_F8R1_FB8_Pos)
   CAN_F8R1_FB8_Pos=(8U)
   CAN_F8R1_FB9=CAN_F8R1_FB9_Msk
   CAN_F8R1_FB9_Msk=(0x1U << CAN_F8R1_FB9_Pos)
   CAN_F8R1_FB9_Pos=(9U)
   CAN_F8R2_FB0=CAN_F8R2_FB0_Msk
   CAN_F8R2_FB0_Msk=(0x1U << CAN_F8R2_FB0_Pos)
   CAN_F8R2_FB0_Pos=(0U)
   CAN_F8R2_FB10=CAN_F8R2_FB10_Msk
   CAN_F8R2_FB10_Msk=(0x1U << CAN_F8R2_FB10_Pos)
   CAN_F8R2_FB10_Pos=(10U)
   CAN_F8R2_FB11=CAN_F8R2_FB11_Msk
   CAN_F8R2_FB11_Msk=(0x1U << CAN_F8R2_FB11_Pos)
   CAN_F8R2_FB11_Pos=(11U)
   CAN_F8R2_FB12=CAN_F8R2_FB12_Msk
   CAN_F8R2_FB12_Msk=(0x1U << CAN_F8R2_FB12_Pos)
   CAN_F8R2_FB12_Pos=(12U)
   CAN_F8R2_FB13=CAN_F8R2_FB13_Msk
   CAN_F8R2_FB13_Msk=(0x1U << CAN_F8R2_FB13_Pos)
   CAN_F8R2_FB13_Pos=(13U)
   CAN_F8R2_FB14=CAN_F8R2_FB14_Msk
   CAN_F8R2_FB14_Msk=(0x1U << CAN_F8R2_FB14_Pos)
   CAN_F8R2_FB14_Pos=(14U)
   CAN_F8R2_FB15=CAN_F8R2_FB15_Msk
   CAN_F8R2_FB15_Msk=(0x1U << CAN_F8R2_FB15_Pos)
   CAN_F8R2_FB15_Pos=(15U)
   CAN_F8R2_FB16=CAN_F8R2_FB16_Msk
   CAN_F8R2_FB16_Msk=(0x1U << CAN_F8R2_FB16_Pos)
   CAN_F8R2_FB16_Pos=(16U)
   CAN_F8R2_FB17=CAN_F8R2_FB17_Msk
   CAN_F8R2_FB17_Msk=(0x1U << CAN_F8R2_FB17_Pos)
   CAN_F8R2_FB17_Pos=(17U)
   CAN_F8R2_FB18=CAN_F8R2_FB18_Msk
   CAN_F8R2_FB18_Msk=(0x1U << CAN_F8R2_FB18_Pos)
   CAN_F8R2_FB18_Pos=(18U)
   CAN_F8R2_FB19=CAN_F8R2_FB19_Msk
   CAN_F8R2_FB19_Msk=(0x1U << CAN_F8R2_FB19_Pos)
   CAN_F8R2_FB19_Pos=(19U)
   CAN_F8R2_FB1=CAN_F8R2_FB1_Msk
   CAN_F8R2_FB1_Msk=(0x1U << CAN_F8R2_FB1_Pos)
   CAN_F8R2_FB1_Pos=(1U)
   CAN_F8R2_FB20=CAN_F8R2_FB20_Msk
   CAN_F8R2_FB20_Msk=(0x1U << CAN_F8R2_FB20_Pos)
   CAN_F8R2_FB20_Pos=(20U)
   CAN_F8R2_FB21=CAN_F8R2_FB21_Msk
   CAN_F8R2_FB21_Msk=(0x1U << CAN_F8R2_FB21_Pos)
   CAN_F8R2_FB21_Pos=(21U)
   CAN_F8R2_FB22=CAN_F8R2_FB22_Msk
   CAN_F8R2_FB22_Msk=(0x1U << CAN_F8R2_FB22_Pos)
   CAN_F8R2_FB22_Pos=(22U)
   CAN_F8R2_FB23=CAN_F8R2_FB23_Msk
   CAN_F8R2_FB23_Msk=(0x1U << CAN_F8R2_FB23_Pos)
   CAN_F8R2_FB23_Pos=(23U)
   CAN_F8R2_FB24=CAN_F8R2_FB24_Msk
   CAN_F8R2_FB24_Msk=(0x1U << CAN_F8R2_FB24_Pos)
   CAN_F8R2_FB24_Pos=(24U)
   CAN_F8R2_FB25=CAN_F8R2_FB25_Msk
   CAN_F8R2_FB25_Msk=(0x1U << CAN_F8R2_FB25_Pos)
   CAN_F8R2_FB25_Pos=(25U)
   CAN_F8R2_FB26=CAN_F8R2_FB26_Msk
   CAN_F8R2_FB26_Msk=(0x1U << CAN_F8R2_FB26_Pos)
   CAN_F8R2_FB26_Pos=(26U)
   CAN_F8R2_FB27=CAN_F8R2_FB27_Msk
   CAN_F8R2_FB27_Msk=(0x1U << CAN_F8R2_FB27_Pos)
   CAN_F8R2_FB27_Pos=(27U)
   CAN_F8R2_FB28=CAN_F8R2_FB28_Msk
   CAN_F8R2_FB28_Msk=(0x1U << CAN_F8R2_FB28_Pos)
   CAN_F8R2_FB28_Pos=(28U)
   CAN_F8R2_FB29=CAN_F8R2_FB29_Msk
   CAN_F8R2_FB29_Msk=(0x1U << CAN_F8R2_FB29_Pos)
   CAN_F8R2_FB29_Pos=(29U)
   CAN_F8R2_FB2=CAN_F8R2_FB2_Msk
   CAN_F8R2_FB2_Msk=(0x1U << CAN_F8R2_FB2_Pos)
   CAN_F8R2_FB2_Pos=(2U)
   CAN_F8R2_FB30=CAN_F8R2_FB30_Msk
   CAN_F8R2_FB30_Msk=(0x1U << CAN_F8R2_FB30_Pos)
   CAN_F8R2_FB30_Pos=(30U)
   CAN_F8R2_FB31=CAN_F8R2_FB31_Msk
   CAN_F8R2_FB31_Msk=(0x1U << CAN_F8R2_FB31_Pos)
   CAN_F8R2_FB31_Pos=(31U)
   CAN_F8R2_FB3=CAN_F8R2_FB3_Msk
   CAN_F8R2_FB3_Msk=(0x1U << CAN_F8R2_FB3_Pos)
   CAN_F8R2_FB3_Pos=(3U)
   CAN_F8R2_FB4=CAN_F8R2_FB4_Msk
   CAN_F8R2_FB4_Msk=(0x1U << CAN_F8R2_FB4_Pos)
   CAN_F8R2_FB4_Pos=(4U)
   CAN_F8R2_FB5=CAN_F8R2_FB5_Msk
   CAN_F8R2_FB5_Msk=(0x1U << CAN_F8R2_FB5_Pos)
   CAN_F8R2_FB5_Pos=(5U)
   CAN_F8R2_FB6=CAN_F8R2_FB6_Msk
   CAN_F8R2_FB6_Msk=(0x1U << CAN_F8R2_FB6_Pos)
   CAN_F8R2_FB6_Pos=(6U)
   CAN_F8R2_FB7=CAN_F8R2_FB7_Msk
   CAN_F8R2_FB7_Msk=(0x1U << CAN_F8R2_FB7_Pos)
   CAN_F8R2_FB7_Pos=(7U)
   CAN_F8R2_FB8=CAN_F8R2_FB8_Msk
   CAN_F8R2_FB8_Msk=(0x1U << CAN_F8R2_FB8_Pos)
   CAN_F8R2_FB8_Pos=(8U)
   CAN_F8R2_FB9=CAN_F8R2_FB9_Msk
   CAN_F8R2_FB9_Msk=(0x1U << CAN_F8R2_FB9_Pos)
   CAN_F8R2_FB9_Pos=(9U)
   CAN_F9R1_FB0=CAN_F9R1_FB0_Msk
   CAN_F9R1_FB0_Msk=(0x1U << CAN_F9R1_FB0_Pos)
   CAN_F9R1_FB0_Pos=(0U)
   CAN_F9R1_FB10=CAN_F9R1_FB10_Msk
   CAN_F9R1_FB10_Msk=(0x1U << CAN_F9R1_FB10_Pos)
   CAN_F9R1_FB10_Pos=(10U)
   CAN_F9R1_FB11=CAN_F9R1_FB11_Msk
   CAN_F9R1_FB11_Msk=(0x1U << CAN_F9R1_FB11_Pos)
   CAN_F9R1_FB11_Pos=(11U)
   CAN_F9R1_FB12=CAN_F9R1_FB12_Msk
   CAN_F9R1_FB12_Msk=(0x1U << CAN_F9R1_FB12_Pos)
   CAN_F9R1_FB12_Pos=(12U)
   CAN_F9R1_FB13=CAN_F9R1_FB13_Msk
   CAN_F9R1_FB13_Msk=(0x1U << CAN_F9R1_FB13_Pos)
   CAN_F9R1_FB13_Pos=(13U)
   CAN_F9R1_FB14=CAN_F9R1_FB14_Msk
   CAN_F9R1_FB14_Msk=(0x1U << CAN_F9R1_FB14_Pos)
   CAN_F9R1_FB14_Pos=(14U)
   CAN_F9R1_FB15=CAN_F9R1_FB15_Msk
   CAN_F9R1_FB15_Msk=(0x1U << CAN_F9R1_FB15_Pos)
   CAN_F9R1_FB15_Pos=(15U)
   CAN_F9R1_FB16=CAN_F9R1_FB16_Msk
   CAN_F9R1_FB16_Msk=(0x1U << CAN_F9R1_FB16_Pos)
   CAN_F9R1_FB16_Pos=(16U)
   CAN_F9R1_FB17=CAN_F9R1_FB17_Msk
   CAN_F9R1_FB17_Msk=(0x1U << CAN_F9R1_FB17_Pos)
   CAN_F9R1_FB17_Pos=(17U)
   CAN_F9R1_FB18=CAN_F9R1_FB18_Msk
   CAN_F9R1_FB18_Msk=(0x1U << CAN_F9R1_FB18_Pos)
   CAN_F9R1_FB18_Pos=(18U)
   CAN_F9R1_FB19=CAN_F9R1_FB19_Msk
   CAN_F9R1_FB19_Msk=(0x1U << CAN_F9R1_FB19_Pos)
   CAN_F9R1_FB19_Pos=(19U)
   CAN_F9R1_FB1=CAN_F9R1_FB1_Msk
   CAN_F9R1_FB1_Msk=(0x1U << CAN_F9R1_FB1_Pos)
   CAN_F9R1_FB1_Pos=(1U)
   CAN_F9R1_FB20=CAN_F9R1_FB20_Msk
   CAN_F9R1_FB20_Msk=(0x1U << CAN_F9R1_FB20_Pos)
   CAN_F9R1_FB20_Pos=(20U)
   CAN_F9R1_FB21=CAN_F9R1_FB21_Msk
   CAN_F9R1_FB21_Msk=(0x1U << CAN_F9R1_FB21_Pos)
   CAN_F9R1_FB21_Pos=(21U)
   CAN_F9R1_FB22=CAN_F9R1_FB22_Msk
   CAN_F9R1_FB22_Msk=(0x1U << CAN_F9R1_FB22_Pos)
   CAN_F9R1_FB22_Pos=(22U)
   CAN_F9R1_FB23=CAN_F9R1_FB23_Msk
   CAN_F9R1_FB23_Msk=(0x1U << CAN_F9R1_FB23_Pos)
   CAN_F9R1_FB23_Pos=(23U)
   CAN_F9R1_FB24=CAN_F9R1_FB24_Msk
   CAN_F9R1_FB24_Msk=(0x1U << CAN_F9R1_FB24_Pos)
   CAN_F9R1_FB24_Pos=(24U)
   CAN_F9R1_FB25=CAN_F9R1_FB25_Msk
   CAN_F9R1_FB25_Msk=(0x1U << CAN_F9R1_FB25_Pos)
   CAN_F9R1_FB25_Pos=(25U)
   CAN_F9R1_FB26=CAN_F9R1_FB26_Msk
   CAN_F9R1_FB26_Msk=(0x1U << CAN_F9R1_FB26_Pos)
   CAN_F9R1_FB26_Pos=(26U)
   CAN_F9R1_FB27=CAN_F9R1_FB27_Msk
   CAN_F9R1_FB27_Msk=(0x1U << CAN_F9R1_FB27_Pos)
   CAN_F9R1_FB27_Pos=(27U)
   CAN_F9R1_FB28=CAN_F9R1_FB28_Msk
   CAN_F9R1_FB28_Msk=(0x1U << CAN_F9R1_FB28_Pos)
   CAN_F9R1_FB28_Pos=(28U)
   CAN_F9R1_FB29=CAN_F9R1_FB29_Msk
   CAN_F9R1_FB29_Msk=(0x1U << CAN_F9R1_FB29_Pos)
   CAN_F9R1_FB29_Pos=(29U)
   CAN_F9R1_FB2=CAN_F9R1_FB2_Msk
   CAN_F9R1_FB2_Msk=(0x1U << CAN_F9R1_FB2_Pos)
   CAN_F9R1_FB2_Pos=(2U)
   CAN_F9R1_FB30=CAN_F9R1_FB30_Msk
   CAN_F9R1_FB30_Msk=(0x1U << CAN_F9R1_FB30_Pos)
   CAN_F9R1_FB30_Pos=(30U)
   CAN_F9R1_FB31=CAN_F9R1_FB31_Msk
   CAN_F9R1_FB31_Msk=(0x1U << CAN_F9R1_FB31_Pos)
   CAN_F9R1_FB31_Pos=(31U)
   CAN_F9R1_FB3=CAN_F9R1_FB3_Msk
   CAN_F9R1_FB3_Msk=(0x1U << CAN_F9R1_FB3_Pos)
   CAN_F9R1_FB3_Pos=(3U)
   CAN_F9R1_FB4=CAN_F9R1_FB4_Msk
   CAN_F9R1_FB4_Msk=(0x1U << CAN_F9R1_FB4_Pos)
   CAN_F9R1_FB4_Pos=(4U)
   CAN_F9R1_FB5=CAN_F9R1_FB5_Msk
   CAN_F9R1_FB5_Msk=(0x1U << CAN_F9R1_FB5_Pos)
   CAN_F9R1_FB5_Pos=(5U)
   CAN_F9R1_FB6=CAN_F9R1_FB6_Msk
   CAN_F9R1_FB6_Msk=(0x1U << CAN_F9R1_FB6_Pos)
   CAN_F9R1_FB6_Pos=(6U)
   CAN_F9R1_FB7=CAN_F9R1_FB7_Msk
   CAN_F9R1_FB7_Msk=(0x1U << CAN_F9R1_FB7_Pos)
   CAN_F9R1_FB7_Pos=(7U)
   CAN_F9R1_FB8=CAN_F9R1_FB8_Msk
   CAN_F9R1_FB8_Msk=(0x1U << CAN_F9R1_FB8_Pos)
   CAN_F9R1_FB8_Pos=(8U)
   CAN_F9R1_FB9=CAN_F9R1_FB9_Msk
   CAN_F9R1_FB9_Msk=(0x1U << CAN_F9R1_FB9_Pos)
   CAN_F9R1_FB9_Pos=(9U)
   CAN_F9R2_FB0=CAN_F9R2_FB0_Msk
   CAN_F9R2_FB0_Msk=(0x1U << CAN_F9R2_FB0_Pos)
   CAN_F9R2_FB0_Pos=(0U)
   CAN_F9R2_FB10=CAN_F9R2_FB10_Msk
   CAN_F9R2_FB10_Msk=(0x1U << CAN_F9R2_FB10_Pos)
   CAN_F9R2_FB10_Pos=(10U)
   CAN_F9R2_FB11=CAN_F9R2_FB11_Msk
   CAN_F9R2_FB11_Msk=(0x1U << CAN_F9R2_FB11_Pos)
   CAN_F9R2_FB11_Pos=(11U)
   CAN_F9R2_FB12=CAN_F9R2_FB12_Msk
   CAN_F9R2_FB12_Msk=(0x1U << CAN_F9R2_FB12_Pos)
   CAN_F9R2_FB12_Pos=(12U)
   CAN_F9R2_FB13=CAN_F9R2_FB13_Msk
   CAN_F9R2_FB13_Msk=(0x1U << CAN_F9R2_FB13_Pos)
   CAN_F9R2_FB13_Pos=(13U)
   CAN_F9R2_FB14=CAN_F9R2_FB14_Msk
   CAN_F9R2_FB14_Msk=(0x1U << CAN_F9R2_FB14_Pos)
   CAN_F9R2_FB14_Pos=(14U)
   CAN_F9R2_FB15=CAN_F9R2_FB15_Msk
   CAN_F9R2_FB15_Msk=(0x1U << CAN_F9R2_FB15_Pos)
   CAN_F9R2_FB15_Pos=(15U)
   CAN_F9R2_FB16=CAN_F9R2_FB16_Msk
   CAN_F9R2_FB16_Msk=(0x1U << CAN_F9R2_FB16_Pos)
   CAN_F9R2_FB16_Pos=(16U)
   CAN_F9R2_FB17=CAN_F9R2_FB17_Msk
   CAN_F9R2_FB17_Msk=(0x1U << CAN_F9R2_FB17_Pos)
   CAN_F9R2_FB17_Pos=(17U)
   CAN_F9R2_FB18=CAN_F9R2_FB18_Msk
   CAN_F9R2_FB18_Msk=(0x1U << CAN_F9R2_FB18_Pos)
   CAN_F9R2_FB18_Pos=(18U)
   CAN_F9R2_FB19=CAN_F9R2_FB19_Msk
   CAN_F9R2_FB19_Msk=(0x1U << CAN_F9R2_FB19_Pos)
   CAN_F9R2_FB19_Pos=(19U)
   CAN_F9R2_FB1=CAN_F9R2_FB1_Msk
   CAN_F9R2_FB1_Msk=(0x1U << CAN_F9R2_FB1_Pos)
   CAN_F9R2_FB1_Pos=(1U)
   CAN_F9R2_FB20=CAN_F9R2_FB20_Msk
   CAN_F9R2_FB20_Msk=(0x1U << CAN_F9R2_FB20_Pos)
   CAN_F9R2_FB20_Pos=(20U)
   CAN_F9R2_FB21=CAN_F9R2_FB21_Msk
   CAN_F9R2_FB21_Msk=(0x1U << CAN_F9R2_FB21_Pos)
   CAN_F9R2_FB21_Pos=(21U)
   CAN_F9R2_FB22=CAN_F9R2_FB22_Msk
   CAN_F9R2_FB22_Msk=(0x1U << CAN_F9R2_FB22_Pos)
   CAN_F9R2_FB22_Pos=(22U)
   CAN_F9R2_FB23=CAN_F9R2_FB23_Msk
   CAN_F9R2_FB23_Msk=(0x1U << CAN_F9R2_FB23_Pos)
   CAN_F9R2_FB23_Pos=(23U)
   CAN_F9R2_FB24=CAN_F9R2_FB24_Msk
   CAN_F9R2_FB24_Msk=(0x1U << CAN_F9R2_FB24_Pos)
   CAN_F9R2_FB24_Pos=(24U)
   CAN_F9R2_FB25=CAN_F9R2_FB25_Msk
   CAN_F9R2_FB25_Msk=(0x1U << CAN_F9R2_FB25_Pos)
   CAN_F9R2_FB25_Pos=(25U)
   CAN_F9R2_FB26=CAN_F9R2_FB26_Msk
   CAN_F9R2_FB26_Msk=(0x1U << CAN_F9R2_FB26_Pos)
   CAN_F9R2_FB26_Pos=(26U)
   CAN_F9R2_FB27=CAN_F9R2_FB27_Msk
   CAN_F9R2_FB27_Msk=(0x1U << CAN_F9R2_FB27_Pos)
   CAN_F9R2_FB27_Pos=(27U)
   CAN_F9R2_FB28=CAN_F9R2_FB28_Msk
   CAN_F9R2_FB28_Msk=(0x1U << CAN_F9R2_FB28_Pos)
   CAN_F9R2_FB28_Pos=(28U)
   CAN_F9R2_FB29=CAN_F9R2_FB29_Msk
   CAN_F9R2_FB29_Msk=(0x1U << CAN_F9R2_FB29_Pos)
   CAN_F9R2_FB29_Pos=(29U)
   CAN_F9R2_FB2=CAN_F9R2_FB2_Msk
   CAN_F9R2_FB2_Msk=(0x1U << CAN_F9R2_FB2_Pos)
   CAN_F9R2_FB2_Pos=(2U)
   CAN_F9R2_FB30=CAN_F9R2_FB30_Msk
   CAN_F9R2_FB30_Msk=(0x1U << CAN_F9R2_FB30_Pos)
   CAN_F9R2_FB30_Pos=(30U)
   CAN_F9R2_FB31=CAN_F9R2_FB31_Msk
   CAN_F9R2_FB31_Msk=(0x1U << CAN_F9R2_FB31_Pos)
   CAN_F9R2_FB31_Pos=(31U)
   CAN_F9R2_FB3=CAN_F9R2_FB3_Msk
   CAN_F9R2_FB3_Msk=(0x1U << CAN_F9R2_FB3_Pos)
   CAN_F9R2_FB3_Pos=(3U)
   CAN_F9R2_FB4=CAN_F9R2_FB4_Msk
   CAN_F9R2_FB4_Msk=(0x1U << CAN_F9R2_FB4_Pos)
   CAN_F9R2_FB4_Pos=(4U)
   CAN_F9R2_FB5=CAN_F9R2_FB5_Msk
   CAN_F9R2_FB5_Msk=(0x1U << CAN_F9R2_FB5_Pos)
   CAN_F9R2_FB5_Pos=(5U)
   CAN_F9R2_FB6=CAN_F9R2_FB6_Msk
   CAN_F9R2_FB6_Msk=(0x1U << CAN_F9R2_FB6_Pos)
   CAN_F9R2_FB6_Pos=(6U)
   CAN_F9R2_FB7=CAN_F9R2_FB7_Msk
   CAN_F9R2_FB7_Msk=(0x1U << CAN_F9R2_FB7_Pos)
   CAN_F9R2_FB7_Pos=(7U)
   CAN_F9R2_FB8=CAN_F9R2_FB8_Msk
   CAN_F9R2_FB8_Msk=(0x1U << CAN_F9R2_FB8_Pos)
   CAN_F9R2_FB8_Pos=(8U)
   CAN_F9R2_FB9=CAN_F9R2_FB9_Msk
   CAN_F9R2_FB9_Msk=(0x1U << CAN_F9R2_FB9_Pos)
   CAN_F9R2_FB9_Pos=(9U)
   CAN_FA1R_FACT0=CAN_FA1R_FACT0_Msk
   CAN_FA1R_FACT0_Msk=(0x1U << CAN_FA1R_FACT0_Pos)
   CAN_FA1R_FACT0_Pos=(0U)
   CAN_FA1R_FACT10=CAN_FA1R_FACT10_Msk
   CAN_FA1R_FACT10_Msk=(0x1U << CAN_FA1R_FACT10_Pos)
   CAN_FA1R_FACT10_Pos=(10U)
   CAN_FA1R_FACT11=CAN_FA1R_FACT11_Msk
   CAN_FA1R_FACT11_Msk=(0x1U << CAN_FA1R_FACT11_Pos)
   CAN_FA1R_FACT11_Pos=(11U)
   CAN_FA1R_FACT12=CAN_FA1R_FACT12_Msk
   CAN_FA1R_FACT12_Msk=(0x1U << CAN_FA1R_FACT12_Pos)
   CAN_FA1R_FACT12_Pos=(12U)
   CAN_FA1R_FACT13=CAN_FA1R_FACT13_Msk
   CAN_FA1R_FACT13_Msk=(0x1U << CAN_FA1R_FACT13_Pos)
   CAN_FA1R_FACT13_Pos=(13U)
   CAN_FA1R_FACT1=CAN_FA1R_FACT1_Msk
   CAN_FA1R_FACT1_Msk=(0x1U << CAN_FA1R_FACT1_Pos)
   CAN_FA1R_FACT1_Pos=(1U)
   CAN_FA1R_FACT2=CAN_FA1R_FACT2_Msk
   CAN_FA1R_FACT2_Msk=(0x1U << CAN_FA1R_FACT2_Pos)
   CAN_FA1R_FACT2_Pos=(2U)
   CAN_FA1R_FACT3=CAN_FA1R_FACT3_Msk
   CAN_FA1R_FACT3_Msk=(0x1U << CAN_FA1R_FACT3_Pos)
   CAN_FA1R_FACT3_Pos=(3U)
   CAN_FA1R_FACT4=CAN_FA1R_FACT4_Msk
   CAN_FA1R_FACT4_Msk=(0x1U << CAN_FA1R_FACT4_Pos)
   CAN_FA1R_FACT4_Pos=(4U)
   CAN_FA1R_FACT5=CAN_FA1R_FACT5_Msk
   CAN_FA1R_FACT5_Msk=(0x1U << CAN_FA1R_FACT5_Pos)
   CAN_FA1R_FACT5_Pos=(5U)
   CAN_FA1R_FACT6=CAN_FA1R_FACT6_Msk
   CAN_FA1R_FACT6_Msk=(0x1U << CAN_FA1R_FACT6_Pos)
   CAN_FA1R_FACT6_Pos=(6U)
   CAN_FA1R_FACT7=CAN_FA1R_FACT7_Msk
   CAN_FA1R_FACT7_Msk=(0x1U << CAN_FA1R_FACT7_Pos)
   CAN_FA1R_FACT7_Pos=(7U)
   CAN_FA1R_FACT8=CAN_FA1R_FACT8_Msk
   CAN_FA1R_FACT8_Msk=(0x1U << CAN_FA1R_FACT8_Pos)
   CAN_FA1R_FACT8_Pos=(8U)
   CAN_FA1R_FACT9=CAN_FA1R_FACT9_Msk
   CAN_FA1R_FACT9_Msk=(0x1U << CAN_FA1R_FACT9_Pos)
   CAN_FA1R_FACT9_Pos=(9U)
   CAN_FA1R_FACT=CAN_FA1R_FACT_Msk
   CAN_FA1R_FACT_Msk=(0x3FFFU << CAN_FA1R_FACT_Pos)
   CAN_FA1R_FACT_Pos=(0U)
   CAN_FFA1R_FFA0=CAN_FFA1R_FFA0_Msk
   CAN_FFA1R_FFA0_Msk=(0x1U << CAN_FFA1R_FFA0_Pos)
   CAN_FFA1R_FFA0_Pos=(0U)
   CAN_FFA1R_FFA10=CAN_FFA1R_FFA10_Msk
   CAN_FFA1R_FFA10_Msk=(0x1U << CAN_FFA1R_FFA10_Pos)
   CAN_FFA1R_FFA10_Pos=(10U)
   CAN_FFA1R_FFA11=CAN_FFA1R_FFA11_Msk
   CAN_FFA1R_FFA11_Msk=(0x1U << CAN_FFA1R_FFA11_Pos)
   CAN_FFA1R_FFA11_Pos=(11U)
   CAN_FFA1R_FFA12=CAN_FFA1R_FFA12_Msk
   CAN_FFA1R_FFA12_Msk=(0x1U << CAN_FFA1R_FFA12_Pos)
   CAN_FFA1R_FFA12_Pos=(12U)
   CAN_FFA1R_FFA13=CAN_FFA1R_FFA13_Msk
   CAN_FFA1R_FFA13_Msk=(0x1U << CAN_FFA1R_FFA13_Pos)
   CAN_FFA1R_FFA13_Pos=(13U)
   CAN_FFA1R_FFA1=CAN_FFA1R_FFA1_Msk
   CAN_FFA1R_FFA1_Msk=(0x1U << CAN_FFA1R_FFA1_Pos)
   CAN_FFA1R_FFA1_Pos=(1U)
   CAN_FFA1R_FFA2=CAN_FFA1R_FFA2_Msk
   CAN_FFA1R_FFA2_Msk=(0x1U << CAN_FFA1R_FFA2_Pos)
   CAN_FFA1R_FFA2_Pos=(2U)
   CAN_FFA1R_FFA3=CAN_FFA1R_FFA3_Msk
   CAN_FFA1R_FFA3_Msk=(0x1U << CAN_FFA1R_FFA3_Pos)
   CAN_FFA1R_FFA3_Pos=(3U)
   CAN_FFA1R_FFA4=CAN_FFA1R_FFA4_Msk
   CAN_FFA1R_FFA4_Msk=(0x1U << CAN_FFA1R_FFA4_Pos)
   CAN_FFA1R_FFA4_Pos=(4U)
   CAN_FFA1R_FFA5=CAN_FFA1R_FFA5_Msk
   CAN_FFA1R_FFA5_Msk=(0x1U << CAN_FFA1R_FFA5_Pos)
   CAN_FFA1R_FFA5_Pos=(5U)
   CAN_FFA1R_FFA6=CAN_FFA1R_FFA6_Msk
   CAN_FFA1R_FFA6_Msk=(0x1U << CAN_FFA1R_FFA6_Pos)
   CAN_FFA1R_FFA6_Pos=(6U)
   CAN_FFA1R_FFA7=CAN_FFA1R_FFA7_Msk
   CAN_FFA1R_FFA7_Msk=(0x1U << CAN_FFA1R_FFA7_Pos)
   CAN_FFA1R_FFA7_Pos=(7U)
   CAN_FFA1R_FFA8=CAN_FFA1R_FFA8_Msk
   CAN_FFA1R_FFA8_Msk=(0x1U << CAN_FFA1R_FFA8_Pos)
   CAN_FFA1R_FFA8_Pos=(8U)
   CAN_FFA1R_FFA9=CAN_FFA1R_FFA9_Msk
   CAN_FFA1R_FFA9_Msk=(0x1U << CAN_FFA1R_FFA9_Pos)
   CAN_FFA1R_FFA9_Pos=(9U)
   CAN_FFA1R_FFA=CAN_FFA1R_FFA_Msk
   CAN_FFA1R_FFA_Msk=(0x3FFFU << CAN_FFA1R_FFA_Pos)
   CAN_FFA1R_FFA_Pos=(0U)
   CAN_FILTERMODE_IDLIST=(0x00000001U)
   CAN_FILTERMODE_IDMASK=(0x00000000U)
   CAN_FILTERSCALE_16BIT=(0x00000000U)
   CAN_FILTERSCALE_32BIT=(0x00000001U)
   CAN_FILTER_DISABLE=(0x00000000U)
   CAN_FILTER_ENABLE=(0x00000001U)
   CAN_FILTER_FIFO0=(0x00000000U)
   CAN_FILTER_FIFO1=(0x00000001U)
   CAN_FLAG_ALST0=(0x00000502U)
   CAN_FLAG_ALST1=(0x0000050AU)
   CAN_FLAG_ALST2=(0x00000512U)
   CAN_FLAG_BOF=(0x00000302U)
   CAN_FLAG_EPV=(0x00000301U)
   CAN_FLAG_ERRI=(0x00000102U)
   CAN_FLAG_EWG=(0x00000300U)
   CAN_FLAG_FF0=(0x00000203U)
   CAN_FLAG_FF1=(0x00000403U)
   CAN_FLAG_FOV0=(0x00000204U)
   CAN_FLAG_FOV1=(0x00000404U)
   CAN_FLAG_INAK=(0x00000100U)
   CAN_FLAG_LOW0=(0x0000051DU)
   CAN_FLAG_LOW1=(0x0000051EU)
   CAN_FLAG_LOW2=(0x0000051FU)
   CAN_FLAG_MASK=(0x000000FFU)
   CAN_FLAG_RQCP0=(0x00000500U)
   CAN_FLAG_RQCP1=(0x00000508U)
   CAN_FLAG_RQCP2=(0x00000510U)
   CAN_FLAG_SLAK=(0x00000101U)
   CAN_FLAG_SLAKI=(0x00000104U)
   CAN_FLAG_TERR0=(0x00000503U)
   CAN_FLAG_TERR1=(0x0000050BU)
   CAN_FLAG_TERR2=(0x00000513U)
   CAN_FLAG_TME0=(0x0000051AU)
   CAN_FLAG_TME1=(0x0000051BU)
   CAN_FLAG_TME2=(0x0000051CU)
   CAN_FLAG_TXOK0=(0x00000501U)
   CAN_FLAG_TXOK1=(0x00000509U)
   CAN_FLAG_TXOK2=(0x00000511U)
   CAN_FLAG_WKU=(0x00000103U)
   CAN_FM1R_FBM0=CAN_FM1R_FBM0_Msk
   CAN_FM1R_FBM0_Msk=(0x1U << CAN_FM1R_FBM0_Pos)
   CAN_FM1R_FBM0_Pos=(0U)
   CAN_FM1R_FBM10=CAN_FM1R_FBM10_Msk
   CAN_FM1R_FBM10_Msk=(0x1U << CAN_FM1R_FBM10_Pos)
   CAN_FM1R_FBM10_Pos=(10U)
   CAN_FM1R_FBM11=CAN_FM1R_FBM11_Msk
   CAN_FM1R_FBM11_Msk=(0x1U << CAN_FM1R_FBM11_Pos)
   CAN_FM1R_FBM11_Pos=(11U)
   CAN_FM1R_FBM12=CAN_FM1R_FBM12_Msk
   CAN_FM1R_FBM12_Msk=(0x1U << CAN_FM1R_FBM12_Pos)
   CAN_FM1R_FBM12_Pos=(12U)
   CAN_FM1R_FBM13=CAN_FM1R_FBM13_Msk
   CAN_FM1R_FBM13_Msk=(0x1U << CAN_FM1R_FBM13_Pos)
   CAN_FM1R_FBM13_Pos=(13U)
   CAN_FM1R_FBM1=CAN_FM1R_FBM1_Msk
   CAN_FM1R_FBM1_Msk=(0x1U << CAN_FM1R_FBM1_Pos)
   CAN_FM1R_FBM1_Pos=(1U)
   CAN_FM1R_FBM2=CAN_FM1R_FBM2_Msk
   CAN_FM1R_FBM2_Msk=(0x1U << CAN_FM1R_FBM2_Pos)
   CAN_FM1R_FBM2_Pos=(2U)
   CAN_FM1R_FBM3=CAN_FM1R_FBM3_Msk
   CAN_FM1R_FBM3_Msk=(0x1U << CAN_FM1R_FBM3_Pos)
   CAN_FM1R_FBM3_Pos=(3U)
   CAN_FM1R_FBM4=CAN_FM1R_FBM4_Msk
   CAN_FM1R_FBM4_Msk=(0x1U << CAN_FM1R_FBM4_Pos)
   CAN_FM1R_FBM4_Pos=(4U)
   CAN_FM1R_FBM5=CAN_FM1R_FBM5_Msk
   CAN_FM1R_FBM5_Msk=(0x1U << CAN_FM1R_FBM5_Pos)
   CAN_FM1R_FBM5_Pos=(5U)
   CAN_FM1R_FBM6=CAN_FM1R_FBM6_Msk
   CAN_FM1R_FBM6_Msk=(0x1U << CAN_FM1R_FBM6_Pos)
   CAN_FM1R_FBM6_Pos=(6U)
   CAN_FM1R_FBM7=CAN_FM1R_FBM7_Msk
   CAN_FM1R_FBM7_Msk=(0x1U << CAN_FM1R_FBM7_Pos)
   CAN_FM1R_FBM7_Pos=(7U)
   CAN_FM1R_FBM8=CAN_FM1R_FBM8_Msk
   CAN_FM1R_FBM8_Msk=(0x1U << CAN_FM1R_FBM8_Pos)
   CAN_FM1R_FBM8_Pos=(8U)
   CAN_FM1R_FBM9=CAN_FM1R_FBM9_Msk
   CAN_FM1R_FBM9_Msk=(0x1U << CAN_FM1R_FBM9_Pos)
   CAN_FM1R_FBM9_Pos=(9U)
   CAN_FM1R_FBM=CAN_FM1R_FBM_Msk
   CAN_FM1R_FBM_Msk=(0x3FFFU << CAN_FM1R_FBM_Pos)
   CAN_FM1R_FBM_Pos=(0U)
   CAN_FMR_CAN2SB=CAN_FMR_CAN2SB_Msk
   CAN_FMR_CAN2SB_Msk=(0x3FU << CAN_FMR_CAN2SB_Pos)
   CAN_FMR_CAN2SB_Pos=(8U)
   CAN_FMR_FINIT=CAN_FMR_FINIT_Msk
   CAN_FMR_FINIT_Msk=(0x1U << CAN_FMR_FINIT_Pos)
   CAN_FMR_FINIT_Pos=(0U)
   CAN_FS1R_FSC0=CAN_FS1R_FSC0_Msk
   CAN_FS1R_FSC0_Msk=(0x1U << CAN_FS1R_FSC0_Pos)
   CAN_FS1R_FSC0_Pos=(0U)
   CAN_FS1R_FSC10=CAN_FS1R_FSC10_Msk
   CAN_FS1R_FSC10_Msk=(0x1U << CAN_FS1R_FSC10_Pos)
   CAN_FS1R_FSC10_Pos=(10U)
   CAN_FS1R_FSC11=CAN_FS1R_FSC11_Msk
   CAN_FS1R_FSC11_Msk=(0x1U << CAN_FS1R_FSC11_Pos)
   CAN_FS1R_FSC11_Pos=(11U)
   CAN_FS1R_FSC12=CAN_FS1R_FSC12_Msk
   CAN_FS1R_FSC12_Msk=(0x1U << CAN_FS1R_FSC12_Pos)
   CAN_FS1R_FSC12_Pos=(12U)
   CAN_FS1R_FSC13=CAN_FS1R_FSC13_Msk
   CAN_FS1R_FSC13_Msk=(0x1U << CAN_FS1R_FSC13_Pos)
   CAN_FS1R_FSC13_Pos=(13U)
   CAN_FS1R_FSC1=CAN_FS1R_FSC1_Msk
   CAN_FS1R_FSC1_Msk=(0x1U << CAN_FS1R_FSC1_Pos)
   CAN_FS1R_FSC1_Pos=(1U)
   CAN_FS1R_FSC2=CAN_FS1R_FSC2_Msk
   CAN_FS1R_FSC2_Msk=(0x1U << CAN_FS1R_FSC2_Pos)
   CAN_FS1R_FSC2_Pos=(2U)
   CAN_FS1R_FSC3=CAN_FS1R_FSC3_Msk
   CAN_FS1R_FSC3_Msk=(0x1U << CAN_FS1R_FSC3_Pos)
   CAN_FS1R_FSC3_Pos=(3U)
   CAN_FS1R_FSC4=CAN_FS1R_FSC4_Msk
   CAN_FS1R_FSC4_Msk=(0x1U << CAN_FS1R_FSC4_Pos)
   CAN_FS1R_FSC4_Pos=(4U)
   CAN_FS1R_FSC5=CAN_FS1R_FSC5_Msk
   CAN_FS1R_FSC5_Msk=(0x1U << CAN_FS1R_FSC5_Pos)
   CAN_FS1R_FSC5_Pos=(5U)
   CAN_FS1R_FSC6=CAN_FS1R_FSC6_Msk
   CAN_FS1R_FSC6_Msk=(0x1U << CAN_FS1R_FSC6_Pos)
   CAN_FS1R_FSC6_Pos=(6U)
   CAN_FS1R_FSC7=CAN_FS1R_FSC7_Msk
   CAN_FS1R_FSC7_Msk=(0x1U << CAN_FS1R_FSC7_Pos)
   CAN_FS1R_FSC7_Pos=(7U)
   CAN_FS1R_FSC8=CAN_FS1R_FSC8_Msk
   CAN_FS1R_FSC8_Msk=(0x1U << CAN_FS1R_FSC8_Pos)
   CAN_FS1R_FSC8_Pos=(8U)
   CAN_FS1R_FSC9=CAN_FS1R_FSC9_Msk
   CAN_FS1R_FSC9_Msk=(0x1U << CAN_FS1R_FSC9_Pos)
   CAN_FS1R_FSC9_Pos=(9U)
   CAN_FS1R_FSC=CAN_FS1R_FSC_Msk
   CAN_FS1R_FSC_Msk=(0x3FFFU << CAN_FS1R_FSC_Pos)
   CAN_FS1R_FSC_Pos=(0U)
   CAN_ID_EXT=(0x00000004U)
   CAN_ID_STD=(0x00000000U)
   CAN_IER_BOFIE=CAN_IER_BOFIE_Msk
   CAN_IER_BOFIE_Msk=(0x1U << CAN_IER_BOFIE_Pos)
   CAN_IER_BOFIE_Pos=(10U)
   CAN_IER_EPVIE=CAN_IER_EPVIE_Msk
   CAN_IER_EPVIE_Msk=(0x1U << CAN_IER_EPVIE_Pos)
   CAN_IER_EPVIE_Pos=(9U)
   CAN_IER_ERRIE=CAN_IER_ERRIE_Msk
   CAN_IER_ERRIE_Msk=(0x1U << CAN_IER_ERRIE_Pos)
   CAN_IER_ERRIE_Pos=(15U)
   CAN_IER_EWGIE=CAN_IER_EWGIE_Msk
   CAN_IER_EWGIE_Msk=(0x1U << CAN_IER_EWGIE_Pos)
   CAN_IER_EWGIE_Pos=(8U)
   CAN_IER_FFIE0=CAN_IER_FFIE0_Msk
   CAN_IER_FFIE0_Msk=(0x1U << CAN_IER_FFIE0_Pos)
   CAN_IER_FFIE0_Pos=(2U)
   CAN_IER_FFIE1=CAN_IER_FFIE1_Msk
   CAN_IER_FFIE1_Msk=(0x1U << CAN_IER_FFIE1_Pos)
   CAN_IER_FFIE1_Pos=(5U)
   CAN_IER_FMPIE0=CAN_IER_FMPIE0_Msk
   CAN_IER_FMPIE0_Msk=(0x1U << CAN_IER_FMPIE0_Pos)
   CAN_IER_FMPIE0_Pos=(1U)
   CAN_IER_FMPIE1=CAN_IER_FMPIE1_Msk
   CAN_IER_FMPIE1_Msk=(0x1U << CAN_IER_FMPIE1_Pos)
   CAN_IER_FMPIE1_Pos=(4U)
   CAN_IER_FOVIE0=CAN_IER_FOVIE0_Msk
   CAN_IER_FOVIE0_Msk=(0x1U << CAN_IER_FOVIE0_Pos)
   CAN_IER_FOVIE0_Pos=(3U)
   CAN_IER_FOVIE1=CAN_IER_FOVIE1_Msk
   CAN_IER_FOVIE1_Msk=(0x1U << CAN_IER_FOVIE1_Pos)
   CAN_IER_FOVIE1_Pos=(6U)
   CAN_IER_LECIE=CAN_IER_LECIE_Msk
   CAN_IER_LECIE_Msk=(0x1U << CAN_IER_LECIE_Pos)
   CAN_IER_LECIE_Pos=(11U)
   CAN_IER_SLKIE=CAN_IER_SLKIE_Msk
   CAN_IER_SLKIE_Msk=(0x1U << CAN_IER_SLKIE_Pos)
   CAN_IER_SLKIE_Pos=(17U)
   CAN_IER_TMEIE=CAN_IER_TMEIE_Msk
   CAN_IER_TMEIE_Msk=(0x1U << CAN_IER_TMEIE_Pos)
   CAN_IER_TMEIE_Pos=(0U)
   CAN_IER_WKUIE=CAN_IER_WKUIE_Msk
   CAN_IER_WKUIE_Msk=(0x1U << CAN_IER_WKUIE_Pos)
   CAN_IER_WKUIE_Pos=(16U)
   CAN_INITSTATUS_FAILED=(0x00000000U)
   CAN_INITSTATUS_SUCCESS=(0x00000001U)
   CAN_IT_BUSOFF=((uint32_t)CAN_IER_BOFIE)
   CAN_IT_ERROR=((uint32_t)CAN_IER_ERRIE)
   CAN_IT_ERROR_PASSIVE=((uint32_t)CAN_IER_EPVIE)
   CAN_IT_ERROR_WARNING=((uint32_t)CAN_IER_EWGIE)
   CAN_IT_LAST_ERROR_CODE=((uint32_t)CAN_IER_LECIE)
   CAN_IT_RX_FIFO0_FULL=((uint32_t)CAN_IER_FFIE0)
   CAN_IT_RX_FIFO0_MSG_PENDING=((uint32_t)CAN_IER_FMPIE0)
   CAN_IT_RX_FIFO0_OVERRUN=((uint32_t)CAN_IER_FOVIE0)
   CAN_IT_RX_FIFO1_FULL=((uint32_t)CAN_IER_FFIE1)
   CAN_IT_RX_FIFO1_MSG_PENDING=((uint32_t)CAN_IER_FMPIE1)
   CAN_IT_RX_FIFO1_OVERRUN=((uint32_t)CAN_IER_FOVIE1)
   CAN_IT_SLEEP_ACK=((uint32_t)CAN_IER_SLKIE)
   CAN_IT_TX_MAILBOX_EMPTY=((uint32_t)CAN_IER_TMEIE)
   CAN_IT_WAKEUP=((uint32_t)CAN_IER_WKUIE)
   CAN_MCR_ABOM=CAN_MCR_ABOM_Msk
   CAN_MCR_ABOM_Msk=(0x1U << CAN_MCR_ABOM_Pos)
   CAN_MCR_ABOM_Pos=(6U)
   CAN_MCR_AWUM=CAN_MCR_AWUM_Msk
   CAN_MCR_AWUM_Msk=(0x1U << CAN_MCR_AWUM_Pos)
   CAN_MCR_AWUM_Pos=(5U)
   CAN_MCR_DBF=CAN_MCR_DBF_Msk
   CAN_MCR_DBF_Msk=(0x1U << CAN_MCR_DBF_Pos)
   CAN_MCR_DBF_Pos=(16U)
   CAN_MCR_INRQ=CAN_MCR_INRQ_Msk
   CAN_MCR_INRQ_Msk=(0x1U << CAN_MCR_INRQ_Pos)
   CAN_MCR_INRQ_Pos=(0U)
   CAN_MCR_NART=CAN_MCR_NART_Msk
   CAN_MCR_NART_Msk=(0x1U << CAN_MCR_NART_Pos)
   CAN_MCR_NART_Pos=(4U)
   CAN_MCR_RESET=CAN_MCR_RESET_Msk
   CAN_MCR_RESET_Msk=(0x1U << CAN_MCR_RESET_Pos)
   CAN_MCR_RESET_Pos=(15U)
   CAN_MCR_RFLM=CAN_MCR_RFLM_Msk
   CAN_MCR_RFLM_Msk=(0x1U << CAN_MCR_RFLM_Pos)
   CAN_MCR_RFLM_Pos=(3U)
   CAN_MCR_SLEEP=CAN_MCR_SLEEP_Msk
   CAN_MCR_SLEEP_Msk=(0x1U << CAN_MCR_SLEEP_Pos)
   CAN_MCR_SLEEP_Pos=(1U)
   CAN_MCR_TTCM=CAN_MCR_TTCM_Msk
   CAN_MCR_TTCM_Msk=(0x1U << CAN_MCR_TTCM_Pos)
   CAN_MCR_TTCM_Pos=(7U)
   CAN_MCR_TXFP=CAN_MCR_TXFP_Msk
   CAN_MCR_TXFP_Msk=(0x1U << CAN_MCR_TXFP_Pos)
   CAN_MCR_TXFP_Pos=(2U)
   CAN_MODE_LOOPBACK=((uint32_t)CAN_BTR_LBKM)
   CAN_MODE_NORMAL=(0x00000000U)
   CAN_MODE_SILENT=((uint32_t)CAN_BTR_SILM)
   CAN_MODE_SILENT_LOOPBACK=((uint32_t)(CAN_BTR_LBKM | CAN_BTR_SILM))
   CAN_MSR_ERRI=CAN_MSR_ERRI_Msk
   CAN_MSR_ERRI_Msk=(0x1U << CAN_MSR_ERRI_Pos)
   CAN_MSR_ERRI_Pos=(2U)
   CAN_MSR_INAK=CAN_MSR_INAK_Msk
   CAN_MSR_INAK_Msk=(0x1U << CAN_MSR_INAK_Pos)
   CAN_MSR_INAK_Pos=(0U)
   CAN_MSR_RX=CAN_MSR_RX_Msk
   CAN_MSR_RXM=CAN_MSR_RXM_Msk
   CAN_MSR_RXM_Msk=(0x1U << CAN_MSR_RXM_Pos)
   CAN_MSR_RXM_Pos=(9U)
   CAN_MSR_RX_Msk=(0x1U << CAN_MSR_RX_Pos)
   CAN_MSR_RX_Pos=(11U)
   CAN_MSR_SAMP=CAN_MSR_SAMP_Msk
   CAN_MSR_SAMP_Msk=(0x1U << CAN_MSR_SAMP_Pos)
   CAN_MSR_SAMP_Pos=(10U)
   CAN_MSR_SLAK=CAN_MSR_SLAK_Msk
   CAN_MSR_SLAKI=CAN_MSR_SLAKI_Msk
   CAN_MSR_SLAKI_Msk=(0x1U << CAN_MSR_SLAKI_Pos)
   CAN_MSR_SLAKI_Pos=(4U)
   CAN_MSR_SLAK_Msk=(0x1U << CAN_MSR_SLAK_Pos)
   CAN_MSR_SLAK_Pos=(1U)
   CAN_MSR_TXM=CAN_MSR_TXM_Msk
   CAN_MSR_TXM_Msk=(0x1U << CAN_MSR_TXM_Pos)
   CAN_MSR_TXM_Pos=(8U)
   CAN_MSR_WKUI=CAN_MSR_WKUI_Msk
   CAN_MSR_WKUI_Msk=(0x1U << CAN_MSR_WKUI_Pos)
   CAN_MSR_WKUI_Pos=(3U)
   CAN_RDH0R_DATA4=CAN_RDH0R_DATA4_Msk
   CAN_RDH0R_DATA4_Msk=(0xFFU << CAN_RDH0R_DATA4_Pos)
   CAN_RDH0R_DATA4_Pos=(0U)
   CAN_RDH0R_DATA5=CAN_RDH0R_DATA5_Msk
   CAN_RDH0R_DATA5_Msk=(0xFFU << CAN_RDH0R_DATA5_Pos)
   CAN_RDH0R_DATA5_Pos=(8U)
   CAN_RDH0R_DATA6=CAN_RDH0R_DATA6_Msk
   CAN_RDH0R_DATA6_Msk=(0xFFU << CAN_RDH0R_DATA6_Pos)
   CAN_RDH0R_DATA6_Pos=(16U)
   CAN_RDH0R_DATA7=CAN_RDH0R_DATA7_Msk
   CAN_RDH0R_DATA7_Msk=(0xFFU << CAN_RDH0R_DATA7_Pos)
   CAN_RDH0R_DATA7_Pos=(24U)
   CAN_RDH1R_DATA4=CAN_RDH1R_DATA4_Msk
   CAN_RDH1R_DATA4_Msk=(0xFFU << CAN_RDH1R_DATA4_Pos)
   CAN_RDH1R_DATA4_Pos=(0U)
   CAN_RDH1R_DATA5=CAN_RDH1R_DATA5_Msk
   CAN_RDH1R_DATA5_Msk=(0xFFU << CAN_RDH1R_DATA5_Pos)
   CAN_RDH1R_DATA5_Pos=(8U)
   CAN_RDH1R_DATA6=CAN_RDH1R_DATA6_Msk
   CAN_RDH1R_DATA6_Msk=(0xFFU << CAN_RDH1R_DATA6_Pos)
   CAN_RDH1R_DATA6_Pos=(16U)
   CAN_RDH1R_DATA7=CAN_RDH1R_DATA7_Msk
   CAN_RDH1R_DATA7_Msk=(0xFFU << CAN_RDH1R_DATA7_Pos)
   CAN_RDH1R_DATA7_Pos=(24U)
   CAN_RDL0R_DATA0=CAN_RDL0R_DATA0_Msk
   CAN_RDL0R_DATA0_Msk=(0xFFU << CAN_RDL0R_DATA0_Pos)
   CAN_RDL0R_DATA0_Pos=(0U)
   CAN_RDL0R_DATA1=CAN_RDL0R_DATA1_Msk
   CAN_RDL0R_DATA1_Msk=(0xFFU << CAN_RDL0R_DATA1_Pos)
   CAN_RDL0R_DATA1_Pos=(8U)
   CAN_RDL0R_DATA2=CAN_RDL0R_DATA2_Msk
   CAN_RDL0R_DATA2_Msk=(0xFFU << CAN_RDL0R_DATA2_Pos)
   CAN_RDL0R_DATA2_Pos=(16U)
   CAN_RDL0R_DATA3=CAN_RDL0R_DATA3_Msk
   CAN_RDL0R_DATA3_Msk=(0xFFU << CAN_RDL0R_DATA3_Pos)
   CAN_RDL0R_DATA3_Pos=(24U)
   CAN_RDL1R_DATA0=CAN_RDL1R_DATA0_Msk
   CAN_RDL1R_DATA0_Msk=(0xFFU << CAN_RDL1R_DATA0_Pos)
   CAN_RDL1R_DATA0_Pos=(0U)
   CAN_RDL1R_DATA1=CAN_RDL1R_DATA1_Msk
   CAN_RDL1R_DATA1_Msk=(0xFFU << CAN_RDL1R_DATA1_Pos)
   CAN_RDL1R_DATA1_Pos=(8U)
   CAN_RDL1R_DATA2=CAN_RDL1R_DATA2_Msk
   CAN_RDL1R_DATA2_Msk=(0xFFU << CAN_RDL1R_DATA2_Pos)
   CAN_RDL1R_DATA2_Pos=(16U)
   CAN_RDL1R_DATA3=CAN_RDL1R_DATA3_Msk
   CAN_RDL1R_DATA3_Msk=(0xFFU << CAN_RDL1R_DATA3_Pos)
   CAN_RDL1R_DATA3_Pos=(24U)
   CAN_RDT0R_DLC=CAN_RDT0R_DLC_Msk
   CAN_RDT0R_DLC_Msk=(0xFU << CAN_RDT0R_DLC_Pos)
   CAN_RDT0R_DLC_Pos=(0U)
   CAN_RDT0R_FMI=CAN_RDT0R_FMI_Msk
   CAN_RDT0R_FMI_Msk=(0xFFU << CAN_RDT0R_FMI_Pos)
   CAN_RDT0R_FMI_Pos=(8U)
   CAN_RDT0R_TIME=CAN_RDT0R_TIME_Msk
   CAN_RDT0R_TIME_Msk=(0xFFFFU << CAN_RDT0R_TIME_Pos)
   CAN_RDT0R_TIME_Pos=(16U)
   CAN_RDT1R_DLC=CAN_RDT1R_DLC_Msk
   CAN_RDT1R_DLC_Msk=(0xFU << CAN_RDT1R_DLC_Pos)
   CAN_RDT1R_DLC_Pos=(0U)
   CAN_RDT1R_FMI=CAN_RDT1R_FMI_Msk
   CAN_RDT1R_FMI_Msk=(0xFFU << CAN_RDT1R_FMI_Pos)
   CAN_RDT1R_FMI_Pos=(8U)
   CAN_RDT1R_TIME=CAN_RDT1R_TIME_Msk
   CAN_RDT1R_TIME_Msk=(0xFFFFU << CAN_RDT1R_TIME_Pos)
   CAN_RDT1R_TIME_Pos=(16U)
   CAN_RF0R_FMP0=CAN_RF0R_FMP0_Msk
   CAN_RF0R_FMP0_Msk=(0x3U << CAN_RF0R_FMP0_Pos)
   CAN_RF0R_FMP0_Pos=(0U)
   CAN_RF0R_FOVR0=CAN_RF0R_FOVR0_Msk
   CAN_RF0R_FOVR0_Msk=(0x1U << CAN_RF0R_FOVR0_Pos)
   CAN_RF0R_FOVR0_Pos=(4U)
   CAN_RF0R_FULL0=CAN_RF0R_FULL0_Msk
   CAN_RF0R_FULL0_Msk=(0x1U << CAN_RF0R_FULL0_Pos)
   CAN_RF0R_FULL0_Pos=(3U)
   CAN_RF0R_RFOM0=CAN_RF0R_RFOM0_Msk
   CAN_RF0R_RFOM0_Msk=(0x1U << CAN_RF0R_RFOM0_Pos)
   CAN_RF0R_RFOM0_Pos=(5U)
   CAN_RF1R_FMP1=CAN_RF1R_FMP1_Msk
   CAN_RF1R_FMP1_Msk=(0x3U << CAN_RF1R_FMP1_Pos)
   CAN_RF1R_FMP1_Pos=(0U)
   CAN_RF1R_FOVR1=CAN_RF1R_FOVR1_Msk
   CAN_RF1R_FOVR1_Msk=(0x1U << CAN_RF1R_FOVR1_Pos)
   CAN_RF1R_FOVR1_Pos=(4U)
   CAN_RF1R_FULL1=CAN_RF1R_FULL1_Msk
   CAN_RF1R_FULL1_Msk=(0x1U << CAN_RF1R_FULL1_Pos)
   CAN_RF1R_FULL1_Pos=(3U)
   CAN_RF1R_RFOM1=CAN_RF1R_RFOM1_Msk
   CAN_RF1R_RFOM1_Msk=(0x1U << CAN_RF1R_RFOM1_Pos)
   CAN_RF1R_RFOM1_Pos=(5U)
   CAN_RI0R_EXID=CAN_RI0R_EXID_Msk
   CAN_RI0R_EXID_Msk=(0x3FFFFU << CAN_RI0R_EXID_Pos)
   CAN_RI0R_EXID_Pos=(3U)
   CAN_RI0R_IDE=CAN_RI0R_IDE_Msk
   CAN_RI0R_IDE_Msk=(0x1U << CAN_RI0R_IDE_Pos)
   CAN_RI0R_IDE_Pos=(2U)
   CAN_RI0R_RTR=CAN_RI0R_RTR_Msk
   CAN_RI0R_RTR_Msk=(0x1U << CAN_RI0R_RTR_Pos)
   CAN_RI0R_RTR_Pos=(1U)
   CAN_RI0R_STID=CAN_RI0R_STID_Msk
   CAN_RI0R_STID_Msk=(0x7FFU << CAN_RI0R_STID_Pos)
   CAN_RI0R_STID_Pos=(21U)
   CAN_RI1R_EXID=CAN_RI1R_EXID_Msk
   CAN_RI1R_EXID_Msk=(0x3FFFFU << CAN_RI1R_EXID_Pos)
   CAN_RI1R_EXID_Pos=(3U)
   CAN_RI1R_IDE=CAN_RI1R_IDE_Msk
   CAN_RI1R_IDE_Msk=(0x1U << CAN_RI1R_IDE_Pos)
   CAN_RI1R_IDE_Pos=(2U)
   CAN_RI1R_RTR=CAN_RI1R_RTR_Msk
   CAN_RI1R_RTR_Msk=(0x1U << CAN_RI1R_RTR_Pos)
   CAN_RI1R_RTR_Pos=(1U)
   CAN_RI1R_STID=CAN_RI1R_STID_Msk
   CAN_RI1R_STID_Msk=(0x7FFU << CAN_RI1R_STID_Pos)
   CAN_RI1R_STID_Pos=(21U)
   CAN_RTR_DATA=(0x00000000U)
   CAN_RTR_REMOTE=(0x00000002U)
   CAN_RX_FIFO0=(0x00000000U)
   CAN_RX_FIFO1=(0x00000001U)
   CAN_SJW_1TQ=(0x00000000U)
   CAN_SJW_2TQ=((uint32_t)CAN_BTR_SJW_0)
   CAN_SJW_3TQ=((uint32_t)CAN_BTR_SJW_1)
   CAN_SJW_4TQ=((uint32_t)CAN_BTR_SJW)
   CAN_TDH0R_DATA4=CAN_TDH0R_DATA4_Msk
   CAN_TDH0R_DATA4_Msk=(0xFFU << CAN_TDH0R_DATA4_Pos)
   CAN_TDH0R_DATA4_Pos=(0U)
   CAN_TDH0R_DATA5=CAN_TDH0R_DATA5_Msk
   CAN_TDH0R_DATA5_Msk=(0xFFU << CAN_TDH0R_DATA5_Pos)
   CAN_TDH0R_DATA5_Pos=(8U)
   CAN_TDH0R_DATA6=CAN_TDH0R_DATA6_Msk
   CAN_TDH0R_DATA6_Msk=(0xFFU << CAN_TDH0R_DATA6_Pos)
   CAN_TDH0R_DATA6_Pos=(16U)
   CAN_TDH0R_DATA7=CAN_TDH0R_DATA7_Msk
   CAN_TDH0R_DATA7_Msk=(0xFFU << CAN_TDH0R_DATA7_Pos)
   CAN_TDH0R_DATA7_Pos=(24U)
   CAN_TDH1R_DATA4=CAN_TDH1R_DATA4_Msk
   CAN_TDH1R_DATA4_Msk=(0xFFU << CAN_TDH1R_DATA4_Pos)
   CAN_TDH1R_DATA4_Pos=(0U)
   CAN_TDH1R_DATA5=CAN_TDH1R_DATA5_Msk
   CAN_TDH1R_DATA5_Msk=(0xFFU << CAN_TDH1R_DATA5_Pos)
   CAN_TDH1R_DATA5_Pos=(8U)
   CAN_TDH1R_DATA6=CAN_TDH1R_DATA6_Msk
   CAN_TDH1R_DATA6_Msk=(0xFFU << CAN_TDH1R_DATA6_Pos)
   CAN_TDH1R_DATA6_Pos=(16U)
   CAN_TDH1R_DATA7=CAN_TDH1R_DATA7_Msk
   CAN_TDH1R_DATA7_Msk=(0xFFU << CAN_TDH1R_DATA7_Pos)
   CAN_TDH1R_DATA7_Pos=(24U)
   CAN_TDH2R_DATA4=CAN_TDH2R_DATA4_Msk
   CAN_TDH2R_DATA4_Msk=(0xFFU << CAN_TDH2R_DATA4_Pos)
   CAN_TDH2R_DATA4_Pos=(0U)
   CAN_TDH2R_DATA5=CAN_TDH2R_DATA5_Msk
   CAN_TDH2R_DATA5_Msk=(0xFFU << CAN_TDH2R_DATA5_Pos)
   CAN_TDH2R_DATA5_Pos=(8U)
   CAN_TDH2R_DATA6=CAN_TDH2R_DATA6_Msk
   CAN_TDH2R_DATA6_Msk=(0xFFU << CAN_TDH2R_DATA6_Pos)
   CAN_TDH2R_DATA6_Pos=(16U)
   CAN_TDH2R_DATA7=CAN_TDH2R_DATA7_Msk
   CAN_TDH2R_DATA7_Msk=(0xFFU << CAN_TDH2R_DATA7_Pos)
   CAN_TDH2R_DATA7_Pos=(24U)
   CAN_TDL0R_DATA0=CAN_TDL0R_DATA0_Msk
   CAN_TDL0R_DATA0_Msk=(0xFFU << CAN_TDL0R_DATA0_Pos)
   CAN_TDL0R_DATA0_Pos=(0U)
   CAN_TDL0R_DATA1=CAN_TDL0R_DATA1_Msk
   CAN_TDL0R_DATA1_Msk=(0xFFU << CAN_TDL0R_DATA1_Pos)
   CAN_TDL0R_DATA1_Pos=(8U)
   CAN_TDL0R_DATA2=CAN_TDL0R_DATA2_Msk
   CAN_TDL0R_DATA2_Msk=(0xFFU << CAN_TDL0R_DATA2_Pos)
   CAN_TDL0R_DATA2_Pos=(16U)
   CAN_TDL0R_DATA3=CAN_TDL0R_DATA3_Msk
   CAN_TDL0R_DATA3_Msk=(0xFFU << CAN_TDL0R_DATA3_Pos)
   CAN_TDL0R_DATA3_Pos=(24U)
   CAN_TDL1R_DATA0=CAN_TDL1R_DATA0_Msk
   CAN_TDL1R_DATA0_Msk=(0xFFU << CAN_TDL1R_DATA0_Pos)
   CAN_TDL1R_DATA0_Pos=(0U)
   CAN_TDL1R_DATA1=CAN_TDL1R_DATA1_Msk
   CAN_TDL1R_DATA1_Msk=(0xFFU << CAN_TDL1R_DATA1_Pos)
   CAN_TDL1R_DATA1_Pos=(8U)
   CAN_TDL1R_DATA2=CAN_TDL1R_DATA2_Msk
   CAN_TDL1R_DATA2_Msk=(0xFFU << CAN_TDL1R_DATA2_Pos)
   CAN_TDL1R_DATA2_Pos=(16U)
   CAN_TDL1R_DATA3=CAN_TDL1R_DATA3_Msk
   CAN_TDL1R_DATA3_Msk=(0xFFU << CAN_TDL1R_DATA3_Pos)
   CAN_TDL1R_DATA3_Pos=(24U)
   CAN_TDL2R_DATA0=CAN_TDL2R_DATA0_Msk
   CAN_TDL2R_DATA0_Msk=(0xFFU << CAN_TDL2R_DATA0_Pos)
   CAN_TDL2R_DATA0_Pos=(0U)
   CAN_TDL2R_DATA1=CAN_TDL2R_DATA1_Msk
   CAN_TDL2R_DATA1_Msk=(0xFFU << CAN_TDL2R_DATA1_Pos)
   CAN_TDL2R_DATA1_Pos=(8U)
   CAN_TDL2R_DATA2=CAN_TDL2R_DATA2_Msk
   CAN_TDL2R_DATA2_Msk=(0xFFU << CAN_TDL2R_DATA2_Pos)
   CAN_TDL2R_DATA2_Pos=(16U)
   CAN_TDL2R_DATA3=CAN_TDL2R_DATA3_Msk
   CAN_TDL2R_DATA3_Msk=(0xFFU << CAN_TDL2R_DATA3_Pos)
   CAN_TDL2R_DATA3_Pos=(24U)
   CAN_TDT0R_DLC=CAN_TDT0R_DLC_Msk
   CAN_TDT0R_DLC_Msk=(0xFU << CAN_TDT0R_DLC_Pos)
   CAN_TDT0R_DLC_Pos=(0U)
   CAN_TDT0R_TGT=CAN_TDT0R_TGT_Msk
   CAN_TDT0R_TGT_Msk=(0x1U << CAN_TDT0R_TGT_Pos)
   CAN_TDT0R_TGT_Pos=(8U)
   CAN_TDT0R_TIME=CAN_TDT0R_TIME_Msk
   CAN_TDT0R_TIME_Msk=(0xFFFFU << CAN_TDT0R_TIME_Pos)
   CAN_TDT0R_TIME_Pos=(16U)
   CAN_TDT1R_DLC=CAN_TDT1R_DLC_Msk
   CAN_TDT1R_DLC_Msk=(0xFU << CAN_TDT1R_DLC_Pos)
   CAN_TDT1R_DLC_Pos=(0U)
   CAN_TDT1R_TGT=CAN_TDT1R_TGT_Msk
   CAN_TDT1R_TGT_Msk=(0x1U << CAN_TDT1R_TGT_Pos)
   CAN_TDT1R_TGT_Pos=(8U)
   CAN_TDT1R_TIME=CAN_TDT1R_TIME_Msk
   CAN_TDT1R_TIME_Msk=(0xFFFFU << CAN_TDT1R_TIME_Pos)
   CAN_TDT1R_TIME_Pos=(16U)
   CAN_TDT2R_DLC=CAN_TDT2R_DLC_Msk
   CAN_TDT2R_DLC_Msk=(0xFU << CAN_TDT2R_DLC_Pos)
   CAN_TDT2R_DLC_Pos=(0U)
   CAN_TDT2R_TGT=CAN_TDT2R_TGT_Msk
   CAN_TDT2R_TGT_Msk=(0x1U << CAN_TDT2R_TGT_Pos)
   CAN_TDT2R_TGT_Pos=(8U)
   CAN_TDT2R_TIME=CAN_TDT2R_TIME_Msk
   CAN_TDT2R_TIME_Msk=(0xFFFFU << CAN_TDT2R_TIME_Pos)
   CAN_TDT2R_TIME_Pos=(16U)
   CAN_TI0R_EXID=CAN_TI0R_EXID_Msk
   CAN_TI0R_EXID_Msk=(0x3FFFFU << CAN_TI0R_EXID_Pos)
   CAN_TI0R_EXID_Pos=(3U)
   CAN_TI0R_IDE=CAN_TI0R_IDE_Msk
   CAN_TI0R_IDE_Msk=(0x1U << CAN_TI0R_IDE_Pos)
   CAN_TI0R_IDE_Pos=(2U)
   CAN_TI0R_RTR=CAN_TI0R_RTR_Msk
   CAN_TI0R_RTR_Msk=(0x1U << CAN_TI0R_RTR_Pos)
   CAN_TI0R_RTR_Pos=(1U)
   CAN_TI0R_STID=CAN_TI0R_STID_Msk
   CAN_TI0R_STID_Msk=(0x7FFU << CAN_TI0R_STID_Pos)
   CAN_TI0R_STID_Pos=(21U)
   CAN_TI0R_TXRQ=CAN_TI0R_TXRQ_Msk
   CAN_TI0R_TXRQ_Msk=(0x1U << CAN_TI0R_TXRQ_Pos)
   CAN_TI0R_TXRQ_Pos=(0U)
   CAN_TI1R_EXID=CAN_TI1R_EXID_Msk
   CAN_TI1R_EXID_Msk=(0x3FFFFU << CAN_TI1R_EXID_Pos)
   CAN_TI1R_EXID_Pos=(3U)
   CAN_TI1R_IDE=CAN_TI1R_IDE_Msk
   CAN_TI1R_IDE_Msk=(0x1U << CAN_TI1R_IDE_Pos)
   CAN_TI1R_IDE_Pos=(2U)
   CAN_TI1R_RTR=CAN_TI1R_RTR_Msk
   CAN_TI1R_RTR_Msk=(0x1U << CAN_TI1R_RTR_Pos)
   CAN_TI1R_RTR_Pos=(1U)
   CAN_TI1R_STID=CAN_TI1R_STID_Msk
   CAN_TI1R_STID_Msk=(0x7FFU << CAN_TI1R_STID_Pos)
   CAN_TI1R_STID_Pos=(21U)
   CAN_TI1R_TXRQ=CAN_TI1R_TXRQ_Msk
   CAN_TI1R_TXRQ_Msk=(0x1U << CAN_TI1R_TXRQ_Pos)
   CAN_TI1R_TXRQ_Pos=(0U)
   CAN_TI2R_EXID=CAN_TI2R_EXID_Msk
   CAN_TI2R_EXID_Msk=(0x3FFFFU << CAN_TI2R_EXID_Pos)
   CAN_TI2R_EXID_Pos=(3U)
   CAN_TI2R_IDE=CAN_TI2R_IDE_Msk
   CAN_TI2R_IDE_Msk=(0x1U << CAN_TI2R_IDE_Pos)
   CAN_TI2R_IDE_Pos=(2U)
   CAN_TI2R_RTR=CAN_TI2R_RTR_Msk
   CAN_TI2R_RTR_Msk=(0x1U << CAN_TI2R_RTR_Pos)
   CAN_TI2R_RTR_Pos=(1U)
   CAN_TI2R_STID=CAN_TI2R_STID_Msk
   CAN_TI2R_STID_Msk=(0x7FFU << CAN_TI2R_STID_Pos)
   CAN_TI2R_STID_Pos=(21U)
   CAN_TI2R_TXRQ=CAN_TI2R_TXRQ_Msk
   CAN_TI2R_TXRQ_Msk=(0x1U << CAN_TI2R_TXRQ_Pos)
   CAN_TI2R_TXRQ_Pos=(0U)
   CAN_TSR_ABRQ0=CAN_TSR_ABRQ0_Msk
   CAN_TSR_ABRQ0_Msk=(0x1U << CAN_TSR_ABRQ0_Pos)
   CAN_TSR_ABRQ0_Pos=(7U)
   CAN_TSR_ABRQ1=CAN_TSR_ABRQ1_Msk
   CAN_TSR_ABRQ1_Msk=(0x1U << CAN_TSR_ABRQ1_Pos)
   CAN_TSR_ABRQ1_Pos=(15U)
   CAN_TSR_ABRQ2=CAN_TSR_ABRQ2_Msk
   CAN_TSR_ABRQ2_Msk=(0x1U << CAN_TSR_ABRQ2_Pos)
   CAN_TSR_ABRQ2_Pos=(23U)
   CAN_TSR_ALST0=CAN_TSR_ALST0_Msk
   CAN_TSR_ALST0_Msk=(0x1U << CAN_TSR_ALST0_Pos)
   CAN_TSR_ALST0_Pos=(2U)
   CAN_TSR_ALST1=CAN_TSR_ALST1_Msk
   CAN_TSR_ALST1_Msk=(0x1U << CAN_TSR_ALST1_Pos)
   CAN_TSR_ALST1_Pos=(10U)
   CAN_TSR_ALST2=CAN_TSR_ALST2_Msk
   CAN_TSR_ALST2_Msk=(0x1U << CAN_TSR_ALST2_Pos)
   CAN_TSR_ALST2_Pos=(18U)
   CAN_TSR_CODE=CAN_TSR_CODE_Msk
   CAN_TSR_CODE_Msk=(0x3U << CAN_TSR_CODE_Pos)
   CAN_TSR_CODE_Pos=(24U)
   CAN_TSR_LOW0=CAN_TSR_LOW0_Msk
   CAN_TSR_LOW0_Msk=(0x1U << CAN_TSR_LOW0_Pos)
   CAN_TSR_LOW0_Pos=(29U)
   CAN_TSR_LOW1=CAN_TSR_LOW1_Msk
   CAN_TSR_LOW1_Msk=(0x1U << CAN_TSR_LOW1_Pos)
   CAN_TSR_LOW1_Pos=(30U)
   CAN_TSR_LOW2=CAN_TSR_LOW2_Msk
   CAN_TSR_LOW2_Msk=(0x1U << CAN_TSR_LOW2_Pos)
   CAN_TSR_LOW2_Pos=(31U)
   CAN_TSR_LOW=CAN_TSR_LOW_Msk
   CAN_TSR_LOW_Msk=(0x7U << CAN_TSR_LOW_Pos)
   CAN_TSR_LOW_Pos=(29U)
   CAN_TSR_RQCP0=CAN_TSR_RQCP0_Msk
   CAN_TSR_RQCP0_Msk=(0x1U << CAN_TSR_RQCP0_Pos)
   CAN_TSR_RQCP0_Pos=(0U)
   CAN_TSR_RQCP1=CAN_TSR_RQCP1_Msk
   CAN_TSR_RQCP1_Msk=(0x1U << CAN_TSR_RQCP1_Pos)
   CAN_TSR_RQCP1_Pos=(8U)
   CAN_TSR_RQCP2=CAN_TSR_RQCP2_Msk
   CAN_TSR_RQCP2_Msk=(0x1U << CAN_TSR_RQCP2_Pos)
   CAN_TSR_RQCP2_Pos=(16U)
   CAN_TSR_TERR0=CAN_TSR_TERR0_Msk
   CAN_TSR_TERR0_Msk=(0x1U << CAN_TSR_TERR0_Pos)
   CAN_TSR_TERR0_Pos=(3U)
   CAN_TSR_TERR1=CAN_TSR_TERR1_Msk
   CAN_TSR_TERR1_Msk=(0x1U << CAN_TSR_TERR1_Pos)
   CAN_TSR_TERR1_Pos=(11U)
   CAN_TSR_TERR2=CAN_TSR_TERR2_Msk
   CAN_TSR_TERR2_Msk=(0x1U << CAN_TSR_TERR2_Pos)
   CAN_TSR_TERR2_Pos=(19U)
   CAN_TSR_TME0=CAN_TSR_TME0_Msk
   CAN_TSR_TME0_Msk=(0x1U << CAN_TSR_TME0_Pos)
   CAN_TSR_TME0_Pos=(26U)
   CAN_TSR_TME1=CAN_TSR_TME1_Msk
   CAN_TSR_TME1_Msk=(0x1U << CAN_TSR_TME1_Pos)
   CAN_TSR_TME1_Pos=(27U)
   CAN_TSR_TME2=CAN_TSR_TME2_Msk
   CAN_TSR_TME2_Msk=(0x1U << CAN_TSR_TME2_Pos)
   CAN_TSR_TME2_Pos=(28U)
   CAN_TSR_TME=CAN_TSR_TME_Msk
   CAN_TSR_TME_Msk=(0x7U << CAN_TSR_TME_Pos)
   CAN_TSR_TME_Pos=(26U)
   CAN_TSR_TXOK0=CAN_TSR_TXOK0_Msk
   CAN_TSR_TXOK0_Msk=(0x1U << CAN_TSR_TXOK0_Pos)
   CAN_TSR_TXOK0_Pos=(1U)
   CAN_TSR_TXOK1=CAN_TSR_TXOK1_Msk
   CAN_TSR_TXOK1_Msk=(0x1U << CAN_TSR_TXOK1_Pos)
   CAN_TSR_TXOK1_Pos=(9U)
   CAN_TSR_TXOK2=CAN_TSR_TXOK2_Msk
   CAN_TSR_TXOK2_Msk=(0x1U << CAN_TSR_TXOK2_Pos)
   CAN_TSR_TXOK2_Pos=(17U)
   CAN_TX_MAILBOX0=(0x00000001U)
   CAN_TX_MAILBOX1=(0x00000002U)
   CAN_TX_MAILBOX2=(0x00000004U)
   CEC_IRQHandler=USBWakeUp_IRQHandler
   CEC_IRQn=USBWakeUp_IRQn
   char=+0
   CLEAR_BIT(REG,BIT)=((REG) &= ~(BIT))
   CLEAR_REG(REG)=((REG) = (0x0))
   CLOCKSWITCH_TIMEOUT_VALUE=5000
   CONTROL_nPRIV_Msk=(1UL )
   CONTROL_nPRIV_Pos=0U
   CONTROL_SPSEL_Msk=(1UL << CONTROL_SPSEL_Pos)
   CONTROL_SPSEL_Pos=1U
   CoreDebug=((CoreDebug_Type *) CoreDebug_BASE)
   CoreDebug_BASE=(0xE000EDF0UL)
   CoreDebug_DCRSR_REGSEL_Msk=(0x1FUL )
   CoreDebug_DCRSR_REGSEL_Pos=0U
   CoreDebug_DCRSR_REGWnR_Msk=(1UL << CoreDebug_DCRSR_REGWnR_Pos)
   CoreDebug_DCRSR_REGWnR_Pos=16U
   CoreDebug_DEMCR_MON_EN_Msk=(1UL << CoreDebug_DEMCR_MON_EN_Pos)
   CoreDebug_DEMCR_MON_EN_Pos=16U
   CoreDebug_DEMCR_MON_PEND_Msk=(1UL << CoreDebug_DEMCR_MON_PEND_Pos)
   CoreDebug_DEMCR_MON_PEND_Pos=17U
   CoreDebug_DEMCR_MON_REQ_Msk=(1UL << CoreDebug_DEMCR_MON_REQ_Pos)
   CoreDebug_DEMCR_MON_REQ_Pos=19U
   CoreDebug_DEMCR_MON_STEP_Msk=(1UL << CoreDebug_DEMCR_MON_STEP_Pos)
   CoreDebug_DEMCR_MON_STEP_Pos=18U
   CoreDebug_DEMCR_TRCENA_Msk=(1UL << CoreDebug_DEMCR_TRCENA_Pos)
   CoreDebug_DEMCR_TRCENA_Pos=24U
   CoreDebug_DEMCR_VC_BUSERR_Msk=(1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)
   CoreDebug_DEMCR_VC_BUSERR_Pos=8U
   CoreDebug_DEMCR_VC_CHKERR_Msk=(1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)
   CoreDebug_DEMCR_VC_CHKERR_Pos=6U
   CoreDebug_DEMCR_VC_CORERESET_Msk=(1UL )
   CoreDebug_DEMCR_VC_CORERESET_Pos=0U
   CoreDebug_DEMCR_VC_HARDERR_Msk=(1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)
   CoreDebug_DEMCR_VC_HARDERR_Pos=10U
   CoreDebug_DEMCR_VC_INTERR_Msk=(1UL << CoreDebug_DEMCR_VC_INTERR_Pos)
   CoreDebug_DEMCR_VC_INTERR_Pos=9U
   CoreDebug_DEMCR_VC_MMERR_Msk=(1UL << CoreDebug_DEMCR_VC_MMERR_Pos)
   CoreDebug_DEMCR_VC_MMERR_Pos=4U
   CoreDebug_DEMCR_VC_NOCPERR_Msk=(1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)
   CoreDebug_DEMCR_VC_NOCPERR_Pos=5U
   CoreDebug_DEMCR_VC_STATERR_Msk=(1UL << CoreDebug_DEMCR_VC_STATERR_Pos)
   CoreDebug_DEMCR_VC_STATERR_Pos=7U
   CoreDebug_DHCSR_C_DEBUGEN_Msk=(1UL )
   CoreDebug_DHCSR_C_DEBUGEN_Pos=0U
   CoreDebug_DHCSR_C_HALT_Msk=(1UL << CoreDebug_DHCSR_C_HALT_Pos)
   CoreDebug_DHCSR_C_HALT_Pos=1U
   CoreDebug_DHCSR_C_MASKINTS_Msk=(1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)
   CoreDebug_DHCSR_C_MASKINTS_Pos=3U
   CoreDebug_DHCSR_C_SNAPSTALL_Msk=(1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)
   CoreDebug_DHCSR_C_SNAPSTALL_Pos=5U
   CoreDebug_DHCSR_C_STEP_Msk=(1UL << CoreDebug_DHCSR_C_STEP_Pos)
   CoreDebug_DHCSR_C_STEP_Pos=2U
   CoreDebug_DHCSR_DBGKEY_Msk=(0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)
   CoreDebug_DHCSR_DBGKEY_Pos=16U
   CoreDebug_DHCSR_S_HALT_Msk=(1UL << CoreDebug_DHCSR_S_HALT_Pos)
   CoreDebug_DHCSR_S_HALT_Pos=17U
   CoreDebug_DHCSR_S_LOCKUP_Msk=(1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)
   CoreDebug_DHCSR_S_LOCKUP_Pos=19U
   CoreDebug_DHCSR_S_REGRDY_Msk=(1UL << CoreDebug_DHCSR_S_REGRDY_Pos)
   CoreDebug_DHCSR_S_REGRDY_Pos=16U
   CoreDebug_DHCSR_S_RESET_ST_Msk=(1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)
   CoreDebug_DHCSR_S_RESET_ST_Pos=25U
   CoreDebug_DHCSR_S_RETIRE_ST_Msk=(1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)
   CoreDebug_DHCSR_S_RETIRE_ST_Pos=24U
   CoreDebug_DHCSR_S_SLEEP_Msk=(1UL << CoreDebug_DHCSR_S_SLEEP_Pos)
   CoreDebug_DHCSR_S_SLEEP_Pos=18U
   CRC=((CRC_TypeDef *)CRC_BASE)
   CRC_BASE=(AHBPERIPH_BASE + 0x00003000U)
   CRC_CR_RESET=CRC_CR_RESET_Msk
   CRC_CR_RESET_Msk=(0x1U << CRC_CR_RESET_Pos)
   CRC_CR_RESET_Pos=(0U)
   CRC_DR_DR=CRC_DR_DR_Msk
   CRC_DR_DR_Msk=(0xFFFFFFFFU << CRC_DR_DR_Pos)
   CRC_DR_DR_Pos=(0U)
   CRC_IDR_IDR=CRC_IDR_IDR_Msk
   CRC_IDR_IDR_Msk=(0xFFU << CRC_IDR_IDR_Pos)
   CRC_IDR_IDR_Pos=(0U)
   CR_REG_INDEX=((uint8_t)1)
   CSR_REG_INDEX=((uint8_t)3)
   DBGMCU=((DBGMCU_TypeDef *)DBGMCU_BASE)
   DBGMCU_BASE=0xE0042000U
   DBGMCU_CR_DBG_CAN1_STOP=DBGMCU_CR_DBG_CAN1_STOP_Msk
   DBGMCU_CR_DBG_CAN1_STOP_Msk=(0x1U << DBGMCU_CR_DBG_CAN1_STOP_Pos)
   DBGMCU_CR_DBG_CAN1_STOP_Pos=(14U)
   DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT=DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT_Msk
   DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT_Msk=(0x1U << DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT_Pos)
   DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT_Pos=(15U)
   DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT=DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT_Msk
   DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT_Msk=(0x1U << DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT_Pos)
   DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT_Pos=(16U)
   DBGMCU_CR_DBG_IWDG_STOP=DBGMCU_CR_DBG_IWDG_STOP_Msk
   DBGMCU_CR_DBG_IWDG_STOP_Msk=(0x1U << DBGMCU_CR_DBG_IWDG_STOP_Pos)
   DBGMCU_CR_DBG_IWDG_STOP_Pos=(8U)
   DBGMCU_CR_DBG_SLEEP=DBGMCU_CR_DBG_SLEEP_Msk
   DBGMCU_CR_DBG_SLEEP_Msk=(0x1U << DBGMCU_CR_DBG_SLEEP_Pos)
   DBGMCU_CR_DBG_SLEEP_Pos=(0U)
   DBGMCU_CR_DBG_STANDBY=DBGMCU_CR_DBG_STANDBY_Msk
   DBGMCU_CR_DBG_STANDBY_Msk=(0x1U << DBGMCU_CR_DBG_STANDBY_Pos)
   DBGMCU_CR_DBG_STANDBY_Pos=(2U)
   DBGMCU_CR_DBG_STOP=DBGMCU_CR_DBG_STOP_Msk
   DBGMCU_CR_DBG_STOP_Msk=(0x1U << DBGMCU_CR_DBG_STOP_Pos)
   DBGMCU_CR_DBG_STOP_Pos=(1U)
   DBGMCU_CR_DBG_TIM1_STOP=DBGMCU_CR_DBG_TIM1_STOP_Msk
   DBGMCU_CR_DBG_TIM1_STOP_Msk=(0x1U << DBGMCU_CR_DBG_TIM1_STOP_Pos)
   DBGMCU_CR_DBG_TIM1_STOP_Pos=(10U)
   DBGMCU_CR_DBG_TIM2_STOP=DBGMCU_CR_DBG_TIM2_STOP_Msk
   DBGMCU_CR_DBG_TIM2_STOP_Msk=(0x1U << DBGMCU_CR_DBG_TIM2_STOP_Pos)
   DBGMCU_CR_DBG_TIM2_STOP_Pos=(11U)
   DBGMCU_CR_DBG_TIM3_STOP=DBGMCU_CR_DBG_TIM3_STOP_Msk
   DBGMCU_CR_DBG_TIM3_STOP_Msk=(0x1U << DBGMCU_CR_DBG_TIM3_STOP_Pos)
   DBGMCU_CR_DBG_TIM3_STOP_Pos=(12U)
   DBGMCU_CR_DBG_TIM4_STOP=DBGMCU_CR_DBG_TIM4_STOP_Msk
   DBGMCU_CR_DBG_TIM4_STOP_Msk=(0x1U << DBGMCU_CR_DBG_TIM4_STOP_Pos)
   DBGMCU_CR_DBG_TIM4_STOP_Pos=(13U)
   DBGMCU_CR_DBG_WWDG_STOP=DBGMCU_CR_DBG_WWDG_STOP_Msk
   DBGMCU_CR_DBG_WWDG_STOP_Msk=(0x1U << DBGMCU_CR_DBG_WWDG_STOP_Pos)
   DBGMCU_CR_DBG_WWDG_STOP_Pos=(9U)
   DBGMCU_CR_TRACE_IOEN=DBGMCU_CR_TRACE_IOEN_Msk
   DBGMCU_CR_TRACE_IOEN_Msk=(0x1U << DBGMCU_CR_TRACE_IOEN_Pos)
   DBGMCU_CR_TRACE_IOEN_Pos=(5U)
   DBGMCU_CR_TRACE_MODE=DBGMCU_CR_TRACE_MODE_Msk
   DBGMCU_CR_TRACE_MODE_0=(0x1U << DBGMCU_CR_TRACE_MODE_Pos)
   DBGMCU_CR_TRACE_MODE_1=(0x2U << DBGMCU_CR_TRACE_MODE_Pos)
   DBGMCU_CR_TRACE_MODE_Msk=(0x3U << DBGMCU_CR_TRACE_MODE_Pos)
   DBGMCU_CR_TRACE_MODE_Pos=(6U)
   DBGMCU_IDCODE_DEV_ID=DBGMCU_IDCODE_DEV_ID_Msk
   DBGMCU_IDCODE_DEV_ID_Msk=(0xFFFU << DBGMCU_IDCODE_DEV_ID_Pos)
   DBGMCU_IDCODE_DEV_ID_Pos=(0U)
   DBGMCU_IDCODE_REV_ID=DBGMCU_IDCODE_REV_ID_Msk
   DBGMCU_IDCODE_REV_ID_0=(0x0001U << DBGMCU_IDCODE_REV_ID_Pos)
   DBGMCU_IDCODE_REV_ID_10=(0x0400U << DBGMCU_IDCODE_REV_ID_Pos)
   DBGMCU_IDCODE_REV_ID_11=(0x0800U << DBGMCU_IDCODE_REV_ID_Pos)
   DBGMCU_IDCODE_REV_ID_12=(0x1000U << DBGMCU_IDCODE_REV_ID_Pos)
   DBGMCU_IDCODE_REV_ID_13=(0x2000U << DBGMCU_IDCODE_REV_ID_Pos)
   DBGMCU_IDCODE_REV_ID_14=(0x4000U << DBGMCU_IDCODE_REV_ID_Pos)
   DBGMCU_IDCODE_REV_ID_15=(0x8000U << DBGMCU_IDCODE_REV_ID_Pos)
   DBGMCU_IDCODE_REV_ID_1=(0x0002U << DBGMCU_IDCODE_REV_ID_Pos)
   DBGMCU_IDCODE_REV_ID_2=(0x0004U << DBGMCU_IDCODE_REV_ID_Pos)
   DBGMCU_IDCODE_REV_ID_3=(0x0008U << DBGMCU_IDCODE_REV_ID_Pos)
   DBGMCU_IDCODE_REV_ID_4=(0x0010U << DBGMCU_IDCODE_REV_ID_Pos)
   DBGMCU_IDCODE_REV_ID_5=(0x0020U << DBGMCU_IDCODE_REV_ID_Pos)
   DBGMCU_IDCODE_REV_ID_6=(0x0040U << DBGMCU_IDCODE_REV_ID_Pos)
   DBGMCU_IDCODE_REV_ID_7=(0x0080U << DBGMCU_IDCODE_REV_ID_Pos)
   DBGMCU_IDCODE_REV_ID_8=(0x0100U << DBGMCU_IDCODE_REV_ID_Pos)
   DBGMCU_IDCODE_REV_ID_9=(0x0200U << DBGMCU_IDCODE_REV_ID_Pos)
   DBGMCU_IDCODE_REV_ID_Msk=(0xFFFFU << DBGMCU_IDCODE_REV_ID_Pos)
   DBGMCU_IDCODE_REV_ID_Pos=(16U)
   DMA1=((DMA_TypeDef *)DMA1_BASE)
   DMA1_BASE=(AHBPERIPH_BASE + 0x00000000U)
   DMA1_Channel1=((DMA_Channel_TypeDef *)DMA1_Channel1_BASE)
   DMA1_Channel1_BASE=(AHBPERIPH_BASE + 0x00000008U)
   DMA1_Channel2=((DMA_Channel_TypeDef *)DMA1_Channel2_BASE)
   DMA1_Channel2_BASE=(AHBPERIPH_BASE + 0x0000001CU)
   DMA1_Channel3=((DMA_Channel_TypeDef *)DMA1_Channel3_BASE)
   DMA1_Channel3_BASE=(AHBPERIPH_BASE + 0x00000030U)
   DMA1_Channel4=((DMA_Channel_TypeDef *)DMA1_Channel4_BASE)
   DMA1_Channel4_BASE=(AHBPERIPH_BASE + 0x00000044U)
   DMA1_Channel5=((DMA_Channel_TypeDef *)DMA1_Channel5_BASE)
   DMA1_Channel5_BASE=(AHBPERIPH_BASE + 0x00000058U)
   DMA1_Channel6=((DMA_Channel_TypeDef *)DMA1_Channel6_BASE)
   DMA1_Channel6_BASE=(AHBPERIPH_BASE + 0x0000006CU)
   DMA1_Channel7=((DMA_Channel_TypeDef *)DMA1_Channel7_BASE)
   DMA1_Channel7_BASE=(AHBPERIPH_BASE + 0x00000080U)
   DMA_CCR_CIRC=DMA_CCR_CIRC_Msk
   DMA_CCR_CIRC_Msk=(0x1U << DMA_CCR_CIRC_Pos)
   DMA_CCR_CIRC_Pos=(5U)
   DMA_CCR_DIR=DMA_CCR_DIR_Msk
   DMA_CCR_DIR_Msk=(0x1U << DMA_CCR_DIR_Pos)
   DMA_CCR_DIR_Pos=(4U)
   DMA_CCR_EN=DMA_CCR_EN_Msk
   DMA_CCR_EN_Msk=(0x1U << DMA_CCR_EN_Pos)
   DMA_CCR_EN_Pos=(0U)
   DMA_CCR_HTIE=DMA_CCR_HTIE_Msk
   DMA_CCR_HTIE_Msk=(0x1U << DMA_CCR_HTIE_Pos)
   DMA_CCR_HTIE_Pos=(2U)
   DMA_CCR_MEM2MEM=DMA_CCR_MEM2MEM_Msk
   DMA_CCR_MEM2MEM_Msk=(0x1U << DMA_CCR_MEM2MEM_Pos)
   DMA_CCR_MEM2MEM_Pos=(14U)
   DMA_CCR_MINC=DMA_CCR_MINC_Msk
   DMA_CCR_MINC_Msk=(0x1U << DMA_CCR_MINC_Pos)
   DMA_CCR_MINC_Pos=(7U)
   DMA_CCR_MSIZE=DMA_CCR_MSIZE_Msk
   DMA_CCR_MSIZE_0=(0x1U << DMA_CCR_MSIZE_Pos)
   DMA_CCR_MSIZE_1=(0x2U << DMA_CCR_MSIZE_Pos)
   DMA_CCR_MSIZE_Msk=(0x3U << DMA_CCR_MSIZE_Pos)
   DMA_CCR_MSIZE_Pos=(10U)
   DMA_CCR_PINC=DMA_CCR_PINC_Msk
   DMA_CCR_PINC_Msk=(0x1U << DMA_CCR_PINC_Pos)
   DMA_CCR_PINC_Pos=(6U)
   DMA_CCR_PL=DMA_CCR_PL_Msk
   DMA_CCR_PL_0=(0x1U << DMA_CCR_PL_Pos)
   DMA_CCR_PL_1=(0x2U << DMA_CCR_PL_Pos)
   DMA_CCR_PL_Msk=(0x3U << DMA_CCR_PL_Pos)
   DMA_CCR_PL_Pos=(12U)
   DMA_CCR_PSIZE=DMA_CCR_PSIZE_Msk
   DMA_CCR_PSIZE_0=(0x1U << DMA_CCR_PSIZE_Pos)
   DMA_CCR_PSIZE_1=(0x2U << DMA_CCR_PSIZE_Pos)
   DMA_CCR_PSIZE_Msk=(0x3U << DMA_CCR_PSIZE_Pos)
   DMA_CCR_PSIZE_Pos=(8U)
   DMA_CCR_TCIE=DMA_CCR_TCIE_Msk
   DMA_CCR_TCIE_Msk=(0x1U << DMA_CCR_TCIE_Pos)
   DMA_CCR_TCIE_Pos=(1U)
   DMA_CCR_TEIE=DMA_CCR_TEIE_Msk
   DMA_CCR_TEIE_Msk=(0x1U << DMA_CCR_TEIE_Pos)
   DMA_CCR_TEIE_Pos=(3U)
   DMA_CIRCULAR=((uint32_t)DMA_CCR_CIRC)
   DMA_CMAR_MA=DMA_CMAR_MA_Msk
   DMA_CMAR_MA_Msk=(0xFFFFFFFFU << DMA_CMAR_MA_Pos)
   DMA_CMAR_MA_Pos=(0U)
   DMA_CNDTR_NDT=DMA_CNDTR_NDT_Msk
   DMA_CNDTR_NDT_Msk=(0xFFFFU << DMA_CNDTR_NDT_Pos)
   DMA_CNDTR_NDT_Pos=(0U)
   DMA_CPAR_PA=DMA_CPAR_PA_Msk
   DMA_CPAR_PA_Msk=(0xFFFFFFFFU << DMA_CPAR_PA_Pos)
   DMA_CPAR_PA_Pos=(0U)
   DMA_FLAG_GL1=0x00000001U
   DMA_FLAG_GL2=0x00000010U
   DMA_FLAG_GL3=0x00000100U
   DMA_FLAG_GL4=0x00001000U
   DMA_FLAG_GL5=0x00010000U
   DMA_FLAG_GL6=0x00100000U
   DMA_FLAG_GL7=0x01000000U
   DMA_FLAG_HT1=0x00000004U
   DMA_FLAG_HT2=0x00000040U
   DMA_FLAG_HT3=0x00000400U
   DMA_FLAG_HT4=0x00004000U
   DMA_FLAG_HT5=0x00040000U
   DMA_FLAG_HT6=0x00400000U
   DMA_FLAG_HT7=0x04000000U
   DMA_FLAG_TC1=0x00000002U
   DMA_FLAG_TC2=0x00000020U
   DMA_FLAG_TC3=0x00000200U
   DMA_FLAG_TC4=0x00002000U
   DMA_FLAG_TC5=0x00020000U
   DMA_FLAG_TC6=0x00200000U
   DMA_FLAG_TC7=0x02000000U
   DMA_FLAG_TE1=0x00000008U
   DMA_FLAG_TE2=0x00000080U
   DMA_FLAG_TE3=0x00000800U
   DMA_FLAG_TE4=0x00008000U
   DMA_FLAG_TE5=0x00080000U
   DMA_FLAG_TE6=0x00800000U
   DMA_FLAG_TE7=0x08000000U
   DMA_IFCR_CGIF1=DMA_IFCR_CGIF1_Msk
   DMA_IFCR_CGIF1_Msk=(0x1U << DMA_IFCR_CGIF1_Pos)
   DMA_IFCR_CGIF1_Pos=(0U)
   DMA_IFCR_CGIF2=DMA_IFCR_CGIF2_Msk
   DMA_IFCR_CGIF2_Msk=(0x1U << DMA_IFCR_CGIF2_Pos)
   DMA_IFCR_CGIF2_Pos=(4U)
   DMA_IFCR_CGIF3=DMA_IFCR_CGIF3_Msk
   DMA_IFCR_CGIF3_Msk=(0x1U << DMA_IFCR_CGIF3_Pos)
   DMA_IFCR_CGIF3_Pos=(8U)
   DMA_IFCR_CGIF4=DMA_IFCR_CGIF4_Msk
   DMA_IFCR_CGIF4_Msk=(0x1U << DMA_IFCR_CGIF4_Pos)
   DMA_IFCR_CGIF4_Pos=(12U)
   DMA_IFCR_CGIF5=DMA_IFCR_CGIF5_Msk
   DMA_IFCR_CGIF5_Msk=(0x1U << DMA_IFCR_CGIF5_Pos)
   DMA_IFCR_CGIF5_Pos=(16U)
   DMA_IFCR_CGIF6=DMA_IFCR_CGIF6_Msk
   DMA_IFCR_CGIF6_Msk=(0x1U << DMA_IFCR_CGIF6_Pos)
   DMA_IFCR_CGIF6_Pos=(20U)
   DMA_IFCR_CGIF7=DMA_IFCR_CGIF7_Msk
   DMA_IFCR_CGIF7_Msk=(0x1U << DMA_IFCR_CGIF7_Pos)
   DMA_IFCR_CGIF7_Pos=(24U)
   DMA_IFCR_CHTIF1=DMA_IFCR_CHTIF1_Msk
   DMA_IFCR_CHTIF1_Msk=(0x1U << DMA_IFCR_CHTIF1_Pos)
   DMA_IFCR_CHTIF1_Pos=(2U)
   DMA_IFCR_CHTIF2=DMA_IFCR_CHTIF2_Msk
   DMA_IFCR_CHTIF2_Msk=(0x1U << DMA_IFCR_CHTIF2_Pos)
   DMA_IFCR_CHTIF2_Pos=(6U)
   DMA_IFCR_CHTIF3=DMA_IFCR_CHTIF3_Msk
   DMA_IFCR_CHTIF3_Msk=(0x1U << DMA_IFCR_CHTIF3_Pos)
   DMA_IFCR_CHTIF3_Pos=(10U)
   DMA_IFCR_CHTIF4=DMA_IFCR_CHTIF4_Msk
   DMA_IFCR_CHTIF4_Msk=(0x1U << DMA_IFCR_CHTIF4_Pos)
   DMA_IFCR_CHTIF4_Pos=(14U)
   DMA_IFCR_CHTIF5=DMA_IFCR_CHTIF5_Msk
   DMA_IFCR_CHTIF5_Msk=(0x1U << DMA_IFCR_CHTIF5_Pos)
   DMA_IFCR_CHTIF5_Pos=(18U)
   DMA_IFCR_CHTIF6=DMA_IFCR_CHTIF6_Msk
   DMA_IFCR_CHTIF6_Msk=(0x1U << DMA_IFCR_CHTIF6_Pos)
   DMA_IFCR_CHTIF6_Pos=(22U)
   DMA_IFCR_CHTIF7=DMA_IFCR_CHTIF7_Msk
   DMA_IFCR_CHTIF7_Msk=(0x1U << DMA_IFCR_CHTIF7_Pos)
   DMA_IFCR_CHTIF7_Pos=(26U)
   DMA_IFCR_CTCIF1=DMA_IFCR_CTCIF1_Msk
   DMA_IFCR_CTCIF1_Msk=(0x1U << DMA_IFCR_CTCIF1_Pos)
   DMA_IFCR_CTCIF1_Pos=(1U)
   DMA_IFCR_CTCIF2=DMA_IFCR_CTCIF2_Msk
   DMA_IFCR_CTCIF2_Msk=(0x1U << DMA_IFCR_CTCIF2_Pos)
   DMA_IFCR_CTCIF2_Pos=(5U)
   DMA_IFCR_CTCIF3=DMA_IFCR_CTCIF3_Msk
   DMA_IFCR_CTCIF3_Msk=(0x1U << DMA_IFCR_CTCIF3_Pos)
   DMA_IFCR_CTCIF3_Pos=(9U)
   DMA_IFCR_CTCIF4=DMA_IFCR_CTCIF4_Msk
   DMA_IFCR_CTCIF4_Msk=(0x1U << DMA_IFCR_CTCIF4_Pos)
   DMA_IFCR_CTCIF4_Pos=(13U)
   DMA_IFCR_CTCIF5=DMA_IFCR_CTCIF5_Msk
   DMA_IFCR_CTCIF5_Msk=(0x1U << DMA_IFCR_CTCIF5_Pos)
   DMA_IFCR_CTCIF5_Pos=(17U)
   DMA_IFCR_CTCIF6=DMA_IFCR_CTCIF6_Msk
   DMA_IFCR_CTCIF6_Msk=(0x1U << DMA_IFCR_CTCIF6_Pos)
   DMA_IFCR_CTCIF6_Pos=(21U)
   DMA_IFCR_CTCIF7=DMA_IFCR_CTCIF7_Msk
   DMA_IFCR_CTCIF7_Msk=(0x1U << DMA_IFCR_CTCIF7_Pos)
   DMA_IFCR_CTCIF7_Pos=(25U)
   DMA_IFCR_CTEIF1=DMA_IFCR_CTEIF1_Msk
   DMA_IFCR_CTEIF1_Msk=(0x1U << DMA_IFCR_CTEIF1_Pos)
   DMA_IFCR_CTEIF1_Pos=(3U)
   DMA_IFCR_CTEIF2=DMA_IFCR_CTEIF2_Msk
   DMA_IFCR_CTEIF2_Msk=(0x1U << DMA_IFCR_CTEIF2_Pos)
   DMA_IFCR_CTEIF2_Pos=(7U)
   DMA_IFCR_CTEIF3=DMA_IFCR_CTEIF3_Msk
   DMA_IFCR_CTEIF3_Msk=(0x1U << DMA_IFCR_CTEIF3_Pos)
   DMA_IFCR_CTEIF3_Pos=(11U)
   DMA_IFCR_CTEIF4=DMA_IFCR_CTEIF4_Msk
   DMA_IFCR_CTEIF4_Msk=(0x1U << DMA_IFCR_CTEIF4_Pos)
   DMA_IFCR_CTEIF4_Pos=(15U)
   DMA_IFCR_CTEIF5=DMA_IFCR_CTEIF5_Msk
   DMA_IFCR_CTEIF5_Msk=(0x1U << DMA_IFCR_CTEIF5_Pos)
   DMA_IFCR_CTEIF5_Pos=(19U)
   DMA_IFCR_CTEIF6=DMA_IFCR_CTEIF6_Msk
   DMA_IFCR_CTEIF6_Msk=(0x1U << DMA_IFCR_CTEIF6_Pos)
   DMA_IFCR_CTEIF6_Pos=(23U)
   DMA_IFCR_CTEIF7=DMA_IFCR_CTEIF7_Msk
   DMA_IFCR_CTEIF7_Msk=(0x1U << DMA_IFCR_CTEIF7_Pos)
   DMA_IFCR_CTEIF7_Pos=(27U)
   DMA_ISR_GIF1=DMA_ISR_GIF1_Msk
   DMA_ISR_GIF1_Msk=(0x1U << DMA_ISR_GIF1_Pos)
   DMA_ISR_GIF1_Pos=(0U)
   DMA_ISR_GIF2=DMA_ISR_GIF2_Msk
   DMA_ISR_GIF2_Msk=(0x1U << DMA_ISR_GIF2_Pos)
   DMA_ISR_GIF2_Pos=(4U)
   DMA_ISR_GIF3=DMA_ISR_GIF3_Msk
   DMA_ISR_GIF3_Msk=(0x1U << DMA_ISR_GIF3_Pos)
   DMA_ISR_GIF3_Pos=(8U)
   DMA_ISR_GIF4=DMA_ISR_GIF4_Msk
   DMA_ISR_GIF4_Msk=(0x1U << DMA_ISR_GIF4_Pos)
   DMA_ISR_GIF4_Pos=(12U)
   DMA_ISR_GIF5=DMA_ISR_GIF5_Msk
   DMA_ISR_GIF5_Msk=(0x1U << DMA_ISR_GIF5_Pos)
   DMA_ISR_GIF5_Pos=(16U)
   DMA_ISR_GIF6=DMA_ISR_GIF6_Msk
   DMA_ISR_GIF6_Msk=(0x1U << DMA_ISR_GIF6_Pos)
   DMA_ISR_GIF6_Pos=(20U)
   DMA_ISR_GIF7=DMA_ISR_GIF7_Msk
   DMA_ISR_GIF7_Msk=(0x1U << DMA_ISR_GIF7_Pos)
   DMA_ISR_GIF7_Pos=(24U)
   DMA_ISR_HTIF1=DMA_ISR_HTIF1_Msk
   DMA_ISR_HTIF1_Msk=(0x1U << DMA_ISR_HTIF1_Pos)
   DMA_ISR_HTIF1_Pos=(2U)
   DMA_ISR_HTIF2=DMA_ISR_HTIF2_Msk
   DMA_ISR_HTIF2_Msk=(0x1U << DMA_ISR_HTIF2_Pos)
   DMA_ISR_HTIF2_Pos=(6U)
   DMA_ISR_HTIF3=DMA_ISR_HTIF3_Msk
   DMA_ISR_HTIF3_Msk=(0x1U << DMA_ISR_HTIF3_Pos)
   DMA_ISR_HTIF3_Pos=(10U)
   DMA_ISR_HTIF4=DMA_ISR_HTIF4_Msk
   DMA_ISR_HTIF4_Msk=(0x1U << DMA_ISR_HTIF4_Pos)
   DMA_ISR_HTIF4_Pos=(14U)
   DMA_ISR_HTIF5=DMA_ISR_HTIF5_Msk
   DMA_ISR_HTIF5_Msk=(0x1U << DMA_ISR_HTIF5_Pos)
   DMA_ISR_HTIF5_Pos=(18U)
   DMA_ISR_HTIF6=DMA_ISR_HTIF6_Msk
   DMA_ISR_HTIF6_Msk=(0x1U << DMA_ISR_HTIF6_Pos)
   DMA_ISR_HTIF6_Pos=(22U)
   DMA_ISR_HTIF7=DMA_ISR_HTIF7_Msk
   DMA_ISR_HTIF7_Msk=(0x1U << DMA_ISR_HTIF7_Pos)
   DMA_ISR_HTIF7_Pos=(26U)
   DMA_ISR_TCIF1=DMA_ISR_TCIF1_Msk
   DMA_ISR_TCIF1_Msk=(0x1U << DMA_ISR_TCIF1_Pos)
   DMA_ISR_TCIF1_Pos=(1U)
   DMA_ISR_TCIF2=DMA_ISR_TCIF2_Msk
   DMA_ISR_TCIF2_Msk=(0x1U << DMA_ISR_TCIF2_Pos)
   DMA_ISR_TCIF2_Pos=(5U)
   DMA_ISR_TCIF3=DMA_ISR_TCIF3_Msk
   DMA_ISR_TCIF3_Msk=(0x1U << DMA_ISR_TCIF3_Pos)
   DMA_ISR_TCIF3_Pos=(9U)
   DMA_ISR_TCIF4=DMA_ISR_TCIF4_Msk
   DMA_ISR_TCIF4_Msk=(0x1U << DMA_ISR_TCIF4_Pos)
   DMA_ISR_TCIF4_Pos=(13U)
   DMA_ISR_TCIF5=DMA_ISR_TCIF5_Msk
   DMA_ISR_TCIF5_Msk=(0x1U << DMA_ISR_TCIF5_Pos)
   DMA_ISR_TCIF5_Pos=(17U)
   DMA_ISR_TCIF6=DMA_ISR_TCIF6_Msk
   DMA_ISR_TCIF6_Msk=(0x1U << DMA_ISR_TCIF6_Pos)
   DMA_ISR_TCIF6_Pos=(21U)
   DMA_ISR_TCIF7=DMA_ISR_TCIF7_Msk
   DMA_ISR_TCIF7_Msk=(0x1U << DMA_ISR_TCIF7_Pos)
   DMA_ISR_TCIF7_Pos=(25U)
   DMA_ISR_TEIF1=DMA_ISR_TEIF1_Msk
   DMA_ISR_TEIF1_Msk=(0x1U << DMA_ISR_TEIF1_Pos)
   DMA_ISR_TEIF1_Pos=(3U)
   DMA_ISR_TEIF2=DMA_ISR_TEIF2_Msk
   DMA_ISR_TEIF2_Msk=(0x1U << DMA_ISR_TEIF2_Pos)
   DMA_ISR_TEIF2_Pos=(7U)
   DMA_ISR_TEIF3=DMA_ISR_TEIF3_Msk
   DMA_ISR_TEIF3_Msk=(0x1U << DMA_ISR_TEIF3_Pos)
   DMA_ISR_TEIF3_Pos=(11U)
   DMA_ISR_TEIF4=DMA_ISR_TEIF4_Msk
   DMA_ISR_TEIF4_Msk=(0x1U << DMA_ISR_TEIF4_Pos)
   DMA_ISR_TEIF4_Pos=(15U)
   DMA_ISR_TEIF5=DMA_ISR_TEIF5_Msk
   DMA_ISR_TEIF5_Msk=(0x1U << DMA_ISR_TEIF5_Pos)
   DMA_ISR_TEIF5_Pos=(19U)
   DMA_ISR_TEIF6=DMA_ISR_TEIF6_Msk
   DMA_ISR_TEIF6_Msk=(0x1U << DMA_ISR_TEIF6_Pos)
   DMA_ISR_TEIF6_Pos=(23U)
   DMA_ISR_TEIF7=DMA_ISR_TEIF7_Msk
   DMA_ISR_TEIF7_Msk=(0x1U << DMA_ISR_TEIF7_Pos)
   DMA_ISR_TEIF7_Pos=(27U)
   DMA_IT_HT=((uint32_t)DMA_CCR_HTIE)
   DMA_IT_TC=((uint32_t)DMA_CCR_TCIE)
   DMA_IT_TE=((uint32_t)DMA_CCR_TEIE)
   DMA_MDATAALIGN_BYTE=0x00000000U
   DMA_MDATAALIGN_HALFWORD=((uint32_t)DMA_CCR_MSIZE_0)
   DMA_MDATAALIGN_WORD=((uint32_t)DMA_CCR_MSIZE_1)
   DMA_MEMORY_TO_MEMORY=((uint32_t)DMA_CCR_MEM2MEM)
   DMA_MEMORY_TO_PERIPH=((uint32_t)DMA_CCR_DIR)
   DMA_MINC_DISABLE=0x00000000U
   DMA_MINC_ENABLE=((uint32_t)DMA_CCR_MINC)
   DMA_NORMAL=0x00000000U
   DMA_PDATAALIGN_BYTE=0x00000000U
   DMA_PDATAALIGN_HALFWORD=((uint32_t)DMA_CCR_PSIZE_0)
   DMA_PDATAALIGN_WORD=((uint32_t)DMA_CCR_PSIZE_1)
   DMA_PERIPH_TO_MEMORY=0x00000000U
   DMA_PINC_DISABLE=0x00000000U
   DMA_PINC_ENABLE=((uint32_t)DMA_CCR_PINC)
   DMA_PRIORITY_HIGH=((uint32_t)DMA_CCR_PL_1)
   DMA_PRIORITY_LOW=0x00000000U
   DMA_PRIORITY_MEDIUM=((uint32_t)DMA_CCR_PL_0)
   DMA_PRIORITY_VERY_HIGH=((uint32_t)DMA_CCR_PL)
   DP83848_PHY_ADDRESS=0x01U
   DT_DELAY_1=((uint8_t)0x7F)
   DT_DELAY_2=((uint8_t)0x3F)
   DT_DELAY_3=((uint8_t)0x1F)
   DT_DELAY_4=((uint8_t)0x1F)
   DT_RANGE_1=((uint8_t)0x00)
   DT_RANGE_2=((uint8_t)0x80)
   DT_RANGE_3=((uint8_t)0xC0)
   DT_RANGE_4=((uint8_t)0xE0)
   DWT=((DWT_Type *) DWT_BASE )
   DWT_BASE=(0xE0001000UL)
   DWT_CPICNT_CPICNT_Msk=(0xFFUL )
   DWT_CPICNT_CPICNT_Pos=0U
   DWT_CTRL_CPIEVTENA_Msk=(0x1UL << DWT_CTRL_CPIEVTENA_Pos)
   DWT_CTRL_CPIEVTENA_Pos=17U
   DWT_CTRL_CYCCNTENA_Msk=(0x1UL )
   DWT_CTRL_CYCCNTENA_Pos=0U
   DWT_CTRL_CYCEVTENA_Msk=(0x1UL << DWT_CTRL_CYCEVTENA_Pos)
   DWT_CTRL_CYCEVTENA_Pos=22U
   DWT_CTRL_CYCTAP_Msk=(0x1UL << DWT_CTRL_CYCTAP_Pos)
   DWT_CTRL_CYCTAP_Pos=9U
   DWT_CTRL_EXCEVTENA_Msk=(0x1UL << DWT_CTRL_EXCEVTENA_Pos)
   DWT_CTRL_EXCEVTENA_Pos=18U
   DWT_CTRL_EXCTRCENA_Msk=(0x1UL << DWT_CTRL_EXCTRCENA_Pos)
   DWT_CTRL_EXCTRCENA_Pos=16U
   DWT_CTRL_FOLDEVTENA_Msk=(0x1UL << DWT_CTRL_FOLDEVTENA_Pos)
   DWT_CTRL_FOLDEVTENA_Pos=21U
   DWT_CTRL_LSUEVTENA_Msk=(0x1UL << DWT_CTRL_LSUEVTENA_Pos)
   DWT_CTRL_LSUEVTENA_Pos=20U
   DWT_CTRL_NOCYCCNT_Msk=(0x1UL << DWT_CTRL_NOCYCCNT_Pos)
   DWT_CTRL_NOCYCCNT_Pos=25U
   DWT_CTRL_NOEXTTRIG_Msk=(0x1UL << DWT_CTRL_NOEXTTRIG_Pos)
   DWT_CTRL_NOEXTTRIG_Pos=26U
   DWT_CTRL_NOPRFCNT_Msk=(0x1UL << DWT_CTRL_NOPRFCNT_Pos)
   DWT_CTRL_NOPRFCNT_Pos=24U
   DWT_CTRL_NOTRCPKT_Msk=(0x1UL << DWT_CTRL_NOTRCPKT_Pos)
   DWT_CTRL_NOTRCPKT_Pos=27U
   DWT_CTRL_NUMCOMP_Msk=(0xFUL << DWT_CTRL_NUMCOMP_Pos)
   DWT_CTRL_NUMCOMP_Pos=28U
   DWT_CTRL_PCSAMPLENA_Msk=(0x1UL << DWT_CTRL_PCSAMPLENA_Pos)
   DWT_CTRL_PCSAMPLENA_Pos=12U
   DWT_CTRL_POSTINIT_Msk=(0xFUL << DWT_CTRL_POSTINIT_Pos)
   DWT_CTRL_POSTINIT_Pos=5U
   DWT_CTRL_POSTPRESET_Msk=(0xFUL << DWT_CTRL_POSTPRESET_Pos)
   DWT_CTRL_POSTPRESET_Pos=1U
   DWT_CTRL_SLEEPEVTENA_Msk=(0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)
   DWT_CTRL_SLEEPEVTENA_Pos=19U
   DWT_CTRL_SYNCTAP_Msk=(0x3UL << DWT_CTRL_SYNCTAP_Pos)
   DWT_CTRL_SYNCTAP_Pos=10U
   DWT_EXCCNT_EXCCNT_Msk=(0xFFUL )
   DWT_EXCCNT_EXCCNT_Pos=0U
   DWT_FOLDCNT_FOLDCNT_Msk=(0xFFUL )
   DWT_FOLDCNT_FOLDCNT_Pos=0U
   DWT_FUNCTION_CYCMATCH_Msk=(0x1UL << DWT_FUNCTION_CYCMATCH_Pos)
   DWT_FUNCTION_CYCMATCH_Pos=7U
   DWT_FUNCTION_DATAVADDR0_Msk=(0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)
   DWT_FUNCTION_DATAVADDR0_Pos=12U
   DWT_FUNCTION_DATAVADDR1_Msk=(0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)
   DWT_FUNCTION_DATAVADDR1_Pos=16U
   DWT_FUNCTION_DATAVMATCH_Msk=(0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)
   DWT_FUNCTION_DATAVMATCH_Pos=8U
   DWT_FUNCTION_DATAVSIZE_Msk=(0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)
   DWT_FUNCTION_DATAVSIZE_Pos=10U
   DWT_FUNCTION_EMITRANGE_Msk=(0x1UL << DWT_FUNCTION_EMITRANGE_Pos)
   DWT_FUNCTION_EMITRANGE_Pos=5U
   DWT_FUNCTION_FUNCTION_Msk=(0xFUL )
   DWT_FUNCTION_FUNCTION_Pos=0U
   DWT_FUNCTION_LNK1ENA_Msk=(0x1UL << DWT_FUNCTION_LNK1ENA_Pos)
   DWT_FUNCTION_LNK1ENA_Pos=9U
   DWT_FUNCTION_MATCHED_Msk=(0x1UL << DWT_FUNCTION_MATCHED_Pos)
   DWT_FUNCTION_MATCHED_Pos=24U
   DWT_LSUCNT_LSUCNT_Msk=(0xFFUL )
   DWT_LSUCNT_LSUCNT_Pos=0U
   DWT_MASK_MASK_Msk=(0x1FUL )
   DWT_MASK_MASK_Pos=0U
   DWT_SLEEPCNT_SLEEPCNT_Msk=(0xFFUL )
   DWT_SLEEPCNT_SLEEPCNT_Pos=0U
   EOF=(-1)
   ETH_RXBUFNB=((uint32_t)8)
   ETH_RX_BUF_SIZE=ETH_MAX_PACKET_SIZE
   ETH_TXBUFNB=((uint32_t)4)
   ETH_TX_BUF_SIZE=ETH_MAX_PACKET_SIZE
   EXTI=((EXTI_TypeDef *)EXTI_BASE)
   EXTI_BASE=(APB2PERIPH_BASE + 0x00000400U)
   EXTI_EMR_EM0=EXTI_EMR_MR0
   EXTI_EMR_EM10=EXTI_EMR_MR10
   EXTI_EMR_EM11=EXTI_EMR_MR11
   EXTI_EMR_EM12=EXTI_EMR_MR12
   EXTI_EMR_EM13=EXTI_EMR_MR13
   EXTI_EMR_EM14=EXTI_EMR_MR14
   EXTI_EMR_EM15=EXTI_EMR_MR15
   EXTI_EMR_EM16=EXTI_EMR_MR16
   EXTI_EMR_EM17=EXTI_EMR_MR17
   EXTI_EMR_EM18=EXTI_EMR_MR18
   EXTI_EMR_EM1=EXTI_EMR_MR1
   EXTI_EMR_EM2=EXTI_EMR_MR2
   EXTI_EMR_EM3=EXTI_EMR_MR3
   EXTI_EMR_EM4=EXTI_EMR_MR4
   EXTI_EMR_EM5=EXTI_EMR_MR5
   EXTI_EMR_EM6=EXTI_EMR_MR6
   EXTI_EMR_EM7=EXTI_EMR_MR7
   EXTI_EMR_EM8=EXTI_EMR_MR8
   EXTI_EMR_EM9=EXTI_EMR_MR9
   EXTI_EMR_MR0=EXTI_EMR_MR0_Msk
   EXTI_EMR_MR0_Msk=(0x1U << EXTI_EMR_MR0_Pos)
   EXTI_EMR_MR0_Pos=(0U)
   EXTI_EMR_MR10=EXTI_EMR_MR10_Msk
   EXTI_EMR_MR10_Msk=(0x1U << EXTI_EMR_MR10_Pos)
   EXTI_EMR_MR10_Pos=(10U)
   EXTI_EMR_MR11=EXTI_EMR_MR11_Msk
   EXTI_EMR_MR11_Msk=(0x1U << EXTI_EMR_MR11_Pos)
   EXTI_EMR_MR11_Pos=(11U)
   EXTI_EMR_MR12=EXTI_EMR_MR12_Msk
   EXTI_EMR_MR12_Msk=(0x1U << EXTI_EMR_MR12_Pos)
   EXTI_EMR_MR12_Pos=(12U)
   EXTI_EMR_MR13=EXTI_EMR_MR13_Msk
   EXTI_EMR_MR13_Msk=(0x1U << EXTI_EMR_MR13_Pos)
   EXTI_EMR_MR13_Pos=(13U)
   EXTI_EMR_MR14=EXTI_EMR_MR14_Msk
   EXTI_EMR_MR14_Msk=(0x1U << EXTI_EMR_MR14_Pos)
   EXTI_EMR_MR14_Pos=(14U)
   EXTI_EMR_MR15=EXTI_EMR_MR15_Msk
   EXTI_EMR_MR15_Msk=(0x1U << EXTI_EMR_MR15_Pos)
   EXTI_EMR_MR15_Pos=(15U)
   EXTI_EMR_MR16=EXTI_EMR_MR16_Msk
   EXTI_EMR_MR16_Msk=(0x1U << EXTI_EMR_MR16_Pos)
   EXTI_EMR_MR16_Pos=(16U)
   EXTI_EMR_MR17=EXTI_EMR_MR17_Msk
   EXTI_EMR_MR17_Msk=(0x1U << EXTI_EMR_MR17_Pos)
   EXTI_EMR_MR17_Pos=(17U)
   EXTI_EMR_MR18=EXTI_EMR_MR18_Msk
   EXTI_EMR_MR18_Msk=(0x1U << EXTI_EMR_MR18_Pos)
   EXTI_EMR_MR18_Pos=(18U)
   EXTI_EMR_MR1=EXTI_EMR_MR1_Msk
   EXTI_EMR_MR1_Msk=(0x1U << EXTI_EMR_MR1_Pos)
   EXTI_EMR_MR1_Pos=(1U)
   EXTI_EMR_MR2=EXTI_EMR_MR2_Msk
   EXTI_EMR_MR2_Msk=(0x1U << EXTI_EMR_MR2_Pos)
   EXTI_EMR_MR2_Pos=(2U)
   EXTI_EMR_MR3=EXTI_EMR_MR3_Msk
   EXTI_EMR_MR3_Msk=(0x1U << EXTI_EMR_MR3_Pos)
   EXTI_EMR_MR3_Pos=(3U)
   EXTI_EMR_MR4=EXTI_EMR_MR4_Msk
   EXTI_EMR_MR4_Msk=(0x1U << EXTI_EMR_MR4_Pos)
   EXTI_EMR_MR4_Pos=(4U)
   EXTI_EMR_MR5=EXTI_EMR_MR5_Msk
   EXTI_EMR_MR5_Msk=(0x1U << EXTI_EMR_MR5_Pos)
   EXTI_EMR_MR5_Pos=(5U)
   EXTI_EMR_MR6=EXTI_EMR_MR6_Msk
   EXTI_EMR_MR6_Msk=(0x1U << EXTI_EMR_MR6_Pos)
   EXTI_EMR_MR6_Pos=(6U)
   EXTI_EMR_MR7=EXTI_EMR_MR7_Msk
   EXTI_EMR_MR7_Msk=(0x1U << EXTI_EMR_MR7_Pos)
   EXTI_EMR_MR7_Pos=(7U)
   EXTI_EMR_MR8=EXTI_EMR_MR8_Msk
   EXTI_EMR_MR8_Msk=(0x1U << EXTI_EMR_MR8_Pos)
   EXTI_EMR_MR8_Pos=(8U)
   EXTI_EMR_MR9=EXTI_EMR_MR9_Msk
   EXTI_EMR_MR9_Msk=(0x1U << EXTI_EMR_MR9_Pos)
   EXTI_EMR_MR9_Pos=(9U)
   EXTI_FTSR_FT0=EXTI_FTSR_TR0
   EXTI_FTSR_FT10=EXTI_FTSR_TR10
   EXTI_FTSR_FT11=EXTI_FTSR_TR11
   EXTI_FTSR_FT12=EXTI_FTSR_TR12
   EXTI_FTSR_FT13=EXTI_FTSR_TR13
   EXTI_FTSR_FT14=EXTI_FTSR_TR14
   EXTI_FTSR_FT15=EXTI_FTSR_TR15
   EXTI_FTSR_FT16=EXTI_FTSR_TR16
   EXTI_FTSR_FT17=EXTI_FTSR_TR17
   EXTI_FTSR_FT18=EXTI_FTSR_TR18
   EXTI_FTSR_FT1=EXTI_FTSR_TR1
   EXTI_FTSR_FT2=EXTI_FTSR_TR2
   EXTI_FTSR_FT3=EXTI_FTSR_TR3
   EXTI_FTSR_FT4=EXTI_FTSR_TR4
   EXTI_FTSR_FT5=EXTI_FTSR_TR5
   EXTI_FTSR_FT6=EXTI_FTSR_TR6
   EXTI_FTSR_FT7=EXTI_FTSR_TR7
   EXTI_FTSR_FT8=EXTI_FTSR_TR8
   EXTI_FTSR_FT9=EXTI_FTSR_TR9
   EXTI_FTSR_TR0=EXTI_FTSR_TR0_Msk
   EXTI_FTSR_TR0_Msk=(0x1U << EXTI_FTSR_TR0_Pos)
   EXTI_FTSR_TR0_Pos=(0U)
   EXTI_FTSR_TR10=EXTI_FTSR_TR10_Msk
   EXTI_FTSR_TR10_Msk=(0x1U << EXTI_FTSR_TR10_Pos)
   EXTI_FTSR_TR10_Pos=(10U)
   EXTI_FTSR_TR11=EXTI_FTSR_TR11_Msk
   EXTI_FTSR_TR11_Msk=(0x1U << EXTI_FTSR_TR11_Pos)
   EXTI_FTSR_TR11_Pos=(11U)
   EXTI_FTSR_TR12=EXTI_FTSR_TR12_Msk
   EXTI_FTSR_TR12_Msk=(0x1U << EXTI_FTSR_TR12_Pos)
   EXTI_FTSR_TR12_Pos=(12U)
   EXTI_FTSR_TR13=EXTI_FTSR_TR13_Msk
   EXTI_FTSR_TR13_Msk=(0x1U << EXTI_FTSR_TR13_Pos)
   EXTI_FTSR_TR13_Pos=(13U)
   EXTI_FTSR_TR14=EXTI_FTSR_TR14_Msk
   EXTI_FTSR_TR14_Msk=(0x1U << EXTI_FTSR_TR14_Pos)
   EXTI_FTSR_TR14_Pos=(14U)
   EXTI_FTSR_TR15=EXTI_FTSR_TR15_Msk
   EXTI_FTSR_TR15_Msk=(0x1U << EXTI_FTSR_TR15_Pos)
   EXTI_FTSR_TR15_Pos=(15U)
   EXTI_FTSR_TR16=EXTI_FTSR_TR16_Msk
   EXTI_FTSR_TR16_Msk=(0x1U << EXTI_FTSR_TR16_Pos)
   EXTI_FTSR_TR16_Pos=(16U)
   EXTI_FTSR_TR17=EXTI_FTSR_TR17_Msk
   EXTI_FTSR_TR17_Msk=(0x1U << EXTI_FTSR_TR17_Pos)
   EXTI_FTSR_TR17_Pos=(17U)
   EXTI_FTSR_TR18=EXTI_FTSR_TR18_Msk
   EXTI_FTSR_TR18_Msk=(0x1U << EXTI_FTSR_TR18_Pos)
   EXTI_FTSR_TR18_Pos=(18U)
   EXTI_FTSR_TR1=EXTI_FTSR_TR1_Msk
   EXTI_FTSR_TR1_Msk=(0x1U << EXTI_FTSR_TR1_Pos)
   EXTI_FTSR_TR1_Pos=(1U)
   EXTI_FTSR_TR2=EXTI_FTSR_TR2_Msk
   EXTI_FTSR_TR2_Msk=(0x1U << EXTI_FTSR_TR2_Pos)
   EXTI_FTSR_TR2_Pos=(2U)
   EXTI_FTSR_TR3=EXTI_FTSR_TR3_Msk
   EXTI_FTSR_TR3_Msk=(0x1U << EXTI_FTSR_TR3_Pos)
   EXTI_FTSR_TR3_Pos=(3U)
   EXTI_FTSR_TR4=EXTI_FTSR_TR4_Msk
   EXTI_FTSR_TR4_Msk=(0x1U << EXTI_FTSR_TR4_Pos)
   EXTI_FTSR_TR4_Pos=(4U)
   EXTI_FTSR_TR5=EXTI_FTSR_TR5_Msk
   EXTI_FTSR_TR5_Msk=(0x1U << EXTI_FTSR_TR5_Pos)
   EXTI_FTSR_TR5_Pos=(5U)
   EXTI_FTSR_TR6=EXTI_FTSR_TR6_Msk
   EXTI_FTSR_TR6_Msk=(0x1U << EXTI_FTSR_TR6_Pos)
   EXTI_FTSR_TR6_Pos=(6U)
   EXTI_FTSR_TR7=EXTI_FTSR_TR7_Msk
   EXTI_FTSR_TR7_Msk=(0x1U << EXTI_FTSR_TR7_Pos)
   EXTI_FTSR_TR7_Pos=(7U)
   EXTI_FTSR_TR8=EXTI_FTSR_TR8_Msk
   EXTI_FTSR_TR8_Msk=(0x1U << EXTI_FTSR_TR8_Pos)
   EXTI_FTSR_TR8_Pos=(8U)
   EXTI_FTSR_TR9=EXTI_FTSR_TR9_Msk
   EXTI_FTSR_TR9_Msk=(0x1U << EXTI_FTSR_TR9_Pos)
   EXTI_FTSR_TR9_Pos=(9U)
   EXTI_IMR_IM0=EXTI_IMR_MR0
   EXTI_IMR_IM10=EXTI_IMR_MR10
   EXTI_IMR_IM11=EXTI_IMR_MR11
   EXTI_IMR_IM12=EXTI_IMR_MR12
   EXTI_IMR_IM13=EXTI_IMR_MR13
   EXTI_IMR_IM14=EXTI_IMR_MR14
   EXTI_IMR_IM15=EXTI_IMR_MR15
   EXTI_IMR_IM16=EXTI_IMR_MR16
   EXTI_IMR_IM17=EXTI_IMR_MR17
   EXTI_IMR_IM18=EXTI_IMR_MR18
   EXTI_IMR_IM1=EXTI_IMR_MR1
   EXTI_IMR_IM2=EXTI_IMR_MR2
   EXTI_IMR_IM3=EXTI_IMR_MR3
   EXTI_IMR_IM4=EXTI_IMR_MR4
   EXTI_IMR_IM5=EXTI_IMR_MR5
   EXTI_IMR_IM6=EXTI_IMR_MR6
   EXTI_IMR_IM7=EXTI_IMR_MR7
   EXTI_IMR_IM8=EXTI_IMR_MR8
   EXTI_IMR_IM9=EXTI_IMR_MR9
   EXTI_IMR_IM=0x0007FFFFU
   EXTI_IMR_MR0=EXTI_IMR_MR0_Msk
   EXTI_IMR_MR0_Msk=(0x1U << EXTI_IMR_MR0_Pos)
   EXTI_IMR_MR0_Pos=(0U)
   EXTI_IMR_MR10=EXTI_IMR_MR10_Msk
   EXTI_IMR_MR10_Msk=(0x1U << EXTI_IMR_MR10_Pos)
   EXTI_IMR_MR10_Pos=(10U)
   EXTI_IMR_MR11=EXTI_IMR_MR11_Msk
   EXTI_IMR_MR11_Msk=(0x1U << EXTI_IMR_MR11_Pos)
   EXTI_IMR_MR11_Pos=(11U)
   EXTI_IMR_MR12=EXTI_IMR_MR12_Msk
   EXTI_IMR_MR12_Msk=(0x1U << EXTI_IMR_MR12_Pos)
   EXTI_IMR_MR12_Pos=(12U)
   EXTI_IMR_MR13=EXTI_IMR_MR13_Msk
   EXTI_IMR_MR13_Msk=(0x1U << EXTI_IMR_MR13_Pos)
   EXTI_IMR_MR13_Pos=(13U)
   EXTI_IMR_MR14=EXTI_IMR_MR14_Msk
   EXTI_IMR_MR14_Msk=(0x1U << EXTI_IMR_MR14_Pos)
   EXTI_IMR_MR14_Pos=(14U)
   EXTI_IMR_MR15=EXTI_IMR_MR15_Msk
   EXTI_IMR_MR15_Msk=(0x1U << EXTI_IMR_MR15_Pos)
   EXTI_IMR_MR15_Pos=(15U)
   EXTI_IMR_MR16=EXTI_IMR_MR16_Msk
   EXTI_IMR_MR16_Msk=(0x1U << EXTI_IMR_MR16_Pos)
   EXTI_IMR_MR16_Pos=(16U)
   EXTI_IMR_MR17=EXTI_IMR_MR17_Msk
   EXTI_IMR_MR17_Msk=(0x1U << EXTI_IMR_MR17_Pos)
   EXTI_IMR_MR17_Pos=(17U)
   EXTI_IMR_MR18=EXTI_IMR_MR18_Msk
   EXTI_IMR_MR18_Msk=(0x1U << EXTI_IMR_MR18_Pos)
   EXTI_IMR_MR18_Pos=(18U)
   EXTI_IMR_MR1=EXTI_IMR_MR1_Msk
   EXTI_IMR_MR1_Msk=(0x1U << EXTI_IMR_MR1_Pos)
   EXTI_IMR_MR1_Pos=(1U)
   EXTI_IMR_MR2=EXTI_IMR_MR2_Msk
   EXTI_IMR_MR2_Msk=(0x1U << EXTI_IMR_MR2_Pos)
   EXTI_IMR_MR2_Pos=(2U)
   EXTI_IMR_MR3=EXTI_IMR_MR3_Msk
   EXTI_IMR_MR3_Msk=(0x1U << EXTI_IMR_MR3_Pos)
   EXTI_IMR_MR3_Pos=(3U)
   EXTI_IMR_MR4=EXTI_IMR_MR4_Msk
   EXTI_IMR_MR4_Msk=(0x1U << EXTI_IMR_MR4_Pos)
   EXTI_IMR_MR4_Pos=(4U)
   EXTI_IMR_MR5=EXTI_IMR_MR5_Msk
   EXTI_IMR_MR5_Msk=(0x1U << EXTI_IMR_MR5_Pos)
   EXTI_IMR_MR5_Pos=(5U)
   EXTI_IMR_MR6=EXTI_IMR_MR6_Msk
   EXTI_IMR_MR6_Msk=(0x1U << EXTI_IMR_MR6_Pos)
   EXTI_IMR_MR6_Pos=(6U)
   EXTI_IMR_MR7=EXTI_IMR_MR7_Msk
   EXTI_IMR_MR7_Msk=(0x1U << EXTI_IMR_MR7_Pos)
   EXTI_IMR_MR7_Pos=(7U)
   EXTI_IMR_MR8=EXTI_IMR_MR8_Msk
   EXTI_IMR_MR8_Msk=(0x1U << EXTI_IMR_MR8_Pos)
   EXTI_IMR_MR8_Pos=(8U)
   EXTI_IMR_MR9=EXTI_IMR_MR9_Msk
   EXTI_IMR_MR9_Msk=(0x1U << EXTI_IMR_MR9_Pos)
   EXTI_IMR_MR9_Pos=(9U)
   EXTI_PR_PIF0=EXTI_PR_PR0
   EXTI_PR_PIF10=EXTI_PR_PR10
   EXTI_PR_PIF11=EXTI_PR_PR11
   EXTI_PR_PIF12=EXTI_PR_PR12
   EXTI_PR_PIF13=EXTI_PR_PR13
   EXTI_PR_PIF14=EXTI_PR_PR14
   EXTI_PR_PIF15=EXTI_PR_PR15
   EXTI_PR_PIF16=EXTI_PR_PR16
   EXTI_PR_PIF17=EXTI_PR_PR17
   EXTI_PR_PIF18=EXTI_PR_PR18
   EXTI_PR_PIF1=EXTI_PR_PR1
   EXTI_PR_PIF2=EXTI_PR_PR2
   EXTI_PR_PIF3=EXTI_PR_PR3
   EXTI_PR_PIF4=EXTI_PR_PR4
   EXTI_PR_PIF5=EXTI_PR_PR5
   EXTI_PR_PIF6=EXTI_PR_PR6
   EXTI_PR_PIF7=EXTI_PR_PR7
   EXTI_PR_PIF8=EXTI_PR_PR8
   EXTI_PR_PIF9=EXTI_PR_PR9
   EXTI_PR_PR0=EXTI_PR_PR0_Msk
   EXTI_PR_PR0_Msk=(0x1U << EXTI_PR_PR0_Pos)
   EXTI_PR_PR0_Pos=(0U)
   EXTI_PR_PR10=EXTI_PR_PR10_Msk
   EXTI_PR_PR10_Msk=(0x1U << EXTI_PR_PR10_Pos)
   EXTI_PR_PR10_Pos=(10U)
   EXTI_PR_PR11=EXTI_PR_PR11_Msk
   EXTI_PR_PR11_Msk=(0x1U << EXTI_PR_PR11_Pos)
   EXTI_PR_PR11_Pos=(11U)
   EXTI_PR_PR12=EXTI_PR_PR12_Msk
   EXTI_PR_PR12_Msk=(0x1U << EXTI_PR_PR12_Pos)
   EXTI_PR_PR12_Pos=(12U)
   EXTI_PR_PR13=EXTI_PR_PR13_Msk
   EXTI_PR_PR13_Msk=(0x1U << EXTI_PR_PR13_Pos)
   EXTI_PR_PR13_Pos=(13U)
   EXTI_PR_PR14=EXTI_PR_PR14_Msk
   EXTI_PR_PR14_Msk=(0x1U << EXTI_PR_PR14_Pos)
   EXTI_PR_PR14_Pos=(14U)
   EXTI_PR_PR15=EXTI_PR_PR15_Msk
   EXTI_PR_PR15_Msk=(0x1U << EXTI_PR_PR15_Pos)
   EXTI_PR_PR15_Pos=(15U)
   EXTI_PR_PR16=EXTI_PR_PR16_Msk
   EXTI_PR_PR16_Msk=(0x1U << EXTI_PR_PR16_Pos)
   EXTI_PR_PR16_Pos=(16U)
   EXTI_PR_PR17=EXTI_PR_PR17_Msk
   EXTI_PR_PR17_Msk=(0x1U << EXTI_PR_PR17_Pos)
   EXTI_PR_PR17_Pos=(17U)
   EXTI_PR_PR18=EXTI_PR_PR18_Msk
   EXTI_PR_PR18_Msk=(0x1U << EXTI_PR_PR18_Pos)
   EXTI_PR_PR18_Pos=(18U)
   EXTI_PR_PR1=EXTI_PR_PR1_Msk
   EXTI_PR_PR1_Msk=(0x1U << EXTI_PR_PR1_Pos)
   EXTI_PR_PR1_Pos=(1U)
   EXTI_PR_PR2=EXTI_PR_PR2_Msk
   EXTI_PR_PR2_Msk=(0x1U << EXTI_PR_PR2_Pos)
   EXTI_PR_PR2_Pos=(2U)
   EXTI_PR_PR3=EXTI_PR_PR3_Msk
   EXTI_PR_PR3_Msk=(0x1U << EXTI_PR_PR3_Pos)
   EXTI_PR_PR3_Pos=(3U)
   EXTI_PR_PR4=EXTI_PR_PR4_Msk
   EXTI_PR_PR4_Msk=(0x1U << EXTI_PR_PR4_Pos)
   EXTI_PR_PR4_Pos=(4U)
   EXTI_PR_PR5=EXTI_PR_PR5_Msk
   EXTI_PR_PR5_Msk=(0x1U << EXTI_PR_PR5_Pos)
   EXTI_PR_PR5_Pos=(5U)
   EXTI_PR_PR6=EXTI_PR_PR6_Msk
   EXTI_PR_PR6_Msk=(0x1U << EXTI_PR_PR6_Pos)
   EXTI_PR_PR6_Pos=(6U)
   EXTI_PR_PR7=EXTI_PR_PR7_Msk
   EXTI_PR_PR7_Msk=(0x1U << EXTI_PR_PR7_Pos)
   EXTI_PR_PR7_Pos=(7U)
   EXTI_PR_PR8=EXTI_PR_PR8_Msk
   EXTI_PR_PR8_Msk=(0x1U << EXTI_PR_PR8_Pos)
   EXTI_PR_PR8_Pos=(8U)
   EXTI_PR_PR9=EXTI_PR_PR9_Msk
   EXTI_PR_PR9_Msk=(0x1U << EXTI_PR_PR9_Pos)
   EXTI_PR_PR9_Pos=(9U)
   EXTI_RTSR_RT0=EXTI_RTSR_TR0
   EXTI_RTSR_RT10=EXTI_RTSR_TR10
   EXTI_RTSR_RT11=EXTI_RTSR_TR11
   EXTI_RTSR_RT12=EXTI_RTSR_TR12
   EXTI_RTSR_RT13=EXTI_RTSR_TR13
   EXTI_RTSR_RT14=EXTI_RTSR_TR14
   EXTI_RTSR_RT15=EXTI_RTSR_TR15
   EXTI_RTSR_RT16=EXTI_RTSR_TR16
   EXTI_RTSR_RT17=EXTI_RTSR_TR17
   EXTI_RTSR_RT18=EXTI_RTSR_TR18
   EXTI_RTSR_RT1=EXTI_RTSR_TR1
   EXTI_RTSR_RT2=EXTI_RTSR_TR2
   EXTI_RTSR_RT3=EXTI_RTSR_TR3
   EXTI_RTSR_RT4=EXTI_RTSR_TR4
   EXTI_RTSR_RT5=EXTI_RTSR_TR5
   EXTI_RTSR_RT6=EXTI_RTSR_TR6
   EXTI_RTSR_RT7=EXTI_RTSR_TR7
   EXTI_RTSR_RT8=EXTI_RTSR_TR8
   EXTI_RTSR_RT9=EXTI_RTSR_TR9
   EXTI_RTSR_TR0=EXTI_RTSR_TR0_Msk
   EXTI_RTSR_TR0_Msk=(0x1U << EXTI_RTSR_TR0_Pos)
   EXTI_RTSR_TR0_Pos=(0U)
   EXTI_RTSR_TR10=EXTI_RTSR_TR10_Msk
   EXTI_RTSR_TR10_Msk=(0x1U << EXTI_RTSR_TR10_Pos)
   EXTI_RTSR_TR10_Pos=(10U)
   EXTI_RTSR_TR11=EXTI_RTSR_TR11_Msk
   EXTI_RTSR_TR11_Msk=(0x1U << EXTI_RTSR_TR11_Pos)
   EXTI_RTSR_TR11_Pos=(11U)
   EXTI_RTSR_TR12=EXTI_RTSR_TR12_Msk
   EXTI_RTSR_TR12_Msk=(0x1U << EXTI_RTSR_TR12_Pos)
   EXTI_RTSR_TR12_Pos=(12U)
   EXTI_RTSR_TR13=EXTI_RTSR_TR13_Msk
   EXTI_RTSR_TR13_Msk=(0x1U << EXTI_RTSR_TR13_Pos)
   EXTI_RTSR_TR13_Pos=(13U)
   EXTI_RTSR_TR14=EXTI_RTSR_TR14_Msk
   EXTI_RTSR_TR14_Msk=(0x1U << EXTI_RTSR_TR14_Pos)
   EXTI_RTSR_TR14_Pos=(14U)
   EXTI_RTSR_TR15=EXTI_RTSR_TR15_Msk
   EXTI_RTSR_TR15_Msk=(0x1U << EXTI_RTSR_TR15_Pos)
   EXTI_RTSR_TR15_Pos=(15U)
   EXTI_RTSR_TR16=EXTI_RTSR_TR16_Msk
   EXTI_RTSR_TR16_Msk=(0x1U << EXTI_RTSR_TR16_Pos)
   EXTI_RTSR_TR16_Pos=(16U)
   EXTI_RTSR_TR17=EXTI_RTSR_TR17_Msk
   EXTI_RTSR_TR17_Msk=(0x1U << EXTI_RTSR_TR17_Pos)
   EXTI_RTSR_TR17_Pos=(17U)
   EXTI_RTSR_TR18=EXTI_RTSR_TR18_Msk
   EXTI_RTSR_TR18_Msk=(0x1U << EXTI_RTSR_TR18_Pos)
   EXTI_RTSR_TR18_Pos=(18U)
   EXTI_RTSR_TR1=EXTI_RTSR_TR1_Msk
   EXTI_RTSR_TR1_Msk=(0x1U << EXTI_RTSR_TR1_Pos)
   EXTI_RTSR_TR1_Pos=(1U)
   EXTI_RTSR_TR2=EXTI_RTSR_TR2_Msk
   EXTI_RTSR_TR2_Msk=(0x1U << EXTI_RTSR_TR2_Pos)
   EXTI_RTSR_TR2_Pos=(2U)
   EXTI_RTSR_TR3=EXTI_RTSR_TR3_Msk
   EXTI_RTSR_TR3_Msk=(0x1U << EXTI_RTSR_TR3_Pos)
   EXTI_RTSR_TR3_Pos=(3U)
   EXTI_RTSR_TR4=EXTI_RTSR_TR4_Msk
   EXTI_RTSR_TR4_Msk=(0x1U << EXTI_RTSR_TR4_Pos)
   EXTI_RTSR_TR4_Pos=(4U)
   EXTI_RTSR_TR5=EXTI_RTSR_TR5_Msk
   EXTI_RTSR_TR5_Msk=(0x1U << EXTI_RTSR_TR5_Pos)
   EXTI_RTSR_TR5_Pos=(5U)
   EXTI_RTSR_TR6=EXTI_RTSR_TR6_Msk
   EXTI_RTSR_TR6_Msk=(0x1U << EXTI_RTSR_TR6_Pos)
   EXTI_RTSR_TR6_Pos=(6U)
   EXTI_RTSR_TR7=EXTI_RTSR_TR7_Msk
   EXTI_RTSR_TR7_Msk=(0x1U << EXTI_RTSR_TR7_Pos)
   EXTI_RTSR_TR7_Pos=(7U)
   EXTI_RTSR_TR8=EXTI_RTSR_TR8_Msk
   EXTI_RTSR_TR8_Msk=(0x1U << EXTI_RTSR_TR8_Pos)
   EXTI_RTSR_TR8_Pos=(8U)
   EXTI_RTSR_TR9=EXTI_RTSR_TR9_Msk
   EXTI_RTSR_TR9_Msk=(0x1U << EXTI_RTSR_TR9_Pos)
   EXTI_RTSR_TR9_Pos=(9U)
   EXTI_SWIER_SWI0=EXTI_SWIER_SWIER0
   EXTI_SWIER_SWI10=EXTI_SWIER_SWIER10
   EXTI_SWIER_SWI11=EXTI_SWIER_SWIER11
   EXTI_SWIER_SWI12=EXTI_SWIER_SWIER12
   EXTI_SWIER_SWI13=EXTI_SWIER_SWIER13
   EXTI_SWIER_SWI14=EXTI_SWIER_SWIER14
   EXTI_SWIER_SWI15=EXTI_SWIER_SWIER15
   EXTI_SWIER_SWI16=EXTI_SWIER_SWIER16
   EXTI_SWIER_SWI17=EXTI_SWIER_SWIER17
   EXTI_SWIER_SWI18=EXTI_SWIER_SWIER18
   EXTI_SWIER_SWI1=EXTI_SWIER_SWIER1
   EXTI_SWIER_SWI2=EXTI_SWIER_SWIER2
   EXTI_SWIER_SWI3=EXTI_SWIER_SWIER3
   EXTI_SWIER_SWI4=EXTI_SWIER_SWIER4
   EXTI_SWIER_SWI5=EXTI_SWIER_SWIER5
   EXTI_SWIER_SWI6=EXTI_SWIER_SWIER6
   EXTI_SWIER_SWI7=EXTI_SWIER_SWIER7
   EXTI_SWIER_SWI8=EXTI_SWIER_SWIER8
   EXTI_SWIER_SWI9=EXTI_SWIER_SWIER9
   EXTI_SWIER_SWIER0=EXTI_SWIER_SWIER0_Msk
   EXTI_SWIER_SWIER0_Msk=(0x1U << EXTI_SWIER_SWIER0_Pos)
   EXTI_SWIER_SWIER0_Pos=(0U)
   EXTI_SWIER_SWIER10=EXTI_SWIER_SWIER10_Msk
   EXTI_SWIER_SWIER10_Msk=(0x1U << EXTI_SWIER_SWIER10_Pos)
   EXTI_SWIER_SWIER10_Pos=(10U)
   EXTI_SWIER_SWIER11=EXTI_SWIER_SWIER11_Msk
   EXTI_SWIER_SWIER11_Msk=(0x1U << EXTI_SWIER_SWIER11_Pos)
   EXTI_SWIER_SWIER11_Pos=(11U)
   EXTI_SWIER_SWIER12=EXTI_SWIER_SWIER12_Msk
   EXTI_SWIER_SWIER12_Msk=(0x1U << EXTI_SWIER_SWIER12_Pos)
   EXTI_SWIER_SWIER12_Pos=(12U)
   EXTI_SWIER_SWIER13=EXTI_SWIER_SWIER13_Msk
   EXTI_SWIER_SWIER13_Msk=(0x1U << EXTI_SWIER_SWIER13_Pos)
   EXTI_SWIER_SWIER13_Pos=(13U)
   EXTI_SWIER_SWIER14=EXTI_SWIER_SWIER14_Msk
   EXTI_SWIER_SWIER14_Msk=(0x1U << EXTI_SWIER_SWIER14_Pos)
   EXTI_SWIER_SWIER14_Pos=(14U)
   EXTI_SWIER_SWIER15=EXTI_SWIER_SWIER15_Msk
   EXTI_SWIER_SWIER15_Msk=(0x1U << EXTI_SWIER_SWIER15_Pos)
   EXTI_SWIER_SWIER15_Pos=(15U)
   EXTI_SWIER_SWIER16=EXTI_SWIER_SWIER16_Msk
   EXTI_SWIER_SWIER16_Msk=(0x1U << EXTI_SWIER_SWIER16_Pos)
   EXTI_SWIER_SWIER16_Pos=(16U)
   EXTI_SWIER_SWIER17=EXTI_SWIER_SWIER17_Msk
   EXTI_SWIER_SWIER17_Msk=(0x1U << EXTI_SWIER_SWIER17_Pos)
   EXTI_SWIER_SWIER17_Pos=(17U)
   EXTI_SWIER_SWIER18=EXTI_SWIER_SWIER18_Msk
   EXTI_SWIER_SWIER18_Msk=(0x1U << EXTI_SWIER_SWIER18_Pos)
   EXTI_SWIER_SWIER18_Pos=(18U)
   EXTI_SWIER_SWIER1=EXTI_SWIER_SWIER1_Msk
   EXTI_SWIER_SWIER1_Msk=(0x1U << EXTI_SWIER_SWIER1_Pos)
   EXTI_SWIER_SWIER1_Pos=(1U)
   EXTI_SWIER_SWIER2=EXTI_SWIER_SWIER2_Msk
   EXTI_SWIER_SWIER2_Msk=(0x1U << EXTI_SWIER_SWIER2_Pos)
   EXTI_SWIER_SWIER2_Pos=(2U)
   EXTI_SWIER_SWIER3=EXTI_SWIER_SWIER3_Msk
   EXTI_SWIER_SWIER3_Msk=(0x1U << EXTI_SWIER_SWIER3_Pos)
   EXTI_SWIER_SWIER3_Pos=(3U)
   EXTI_SWIER_SWIER4=EXTI_SWIER_SWIER4_Msk
   EXTI_SWIER_SWIER4_Msk=(0x1U << EXTI_SWIER_SWIER4_Pos)
   EXTI_SWIER_SWIER4_Pos=(4U)
   EXTI_SWIER_SWIER5=EXTI_SWIER_SWIER5_Msk
   EXTI_SWIER_SWIER5_Msk=(0x1U << EXTI_SWIER_SWIER5_Pos)
   EXTI_SWIER_SWIER5_Pos=(5U)
   EXTI_SWIER_SWIER6=EXTI_SWIER_SWIER6_Msk
   EXTI_SWIER_SWIER6_Msk=(0x1U << EXTI_SWIER_SWIER6_Pos)
   EXTI_SWIER_SWIER6_Pos=(6U)
   EXTI_SWIER_SWIER7=EXTI_SWIER_SWIER7_Msk
   EXTI_SWIER_SWIER7_Msk=(0x1U << EXTI_SWIER_SWIER7_Pos)
   EXTI_SWIER_SWIER7_Pos=(7U)
   EXTI_SWIER_SWIER8=EXTI_SWIER_SWIER8_Msk
   EXTI_SWIER_SWIER8_Msk=(0x1U << EXTI_SWIER_SWIER8_Pos)
   EXTI_SWIER_SWIER8_Pos=(8U)
   EXTI_SWIER_SWIER9=EXTI_SWIER_SWIER9_Msk
   EXTI_SWIER_SWIER9_Msk=(0x1U << EXTI_SWIER_SWIER9_Pos)
   EXTI_SWIER_SWIER9_Pos=(9U)
   fast_putc(x,p)=(--(p)->_w < 0 ? __swbuf_r(_REENT, (int)(x), p) == EOF : (*(p)->_p = (x), (p)->_p++, 0))
   FD_CLR(n,p)=((p)->fds_bits[(n)/NFDBITS] &= ~(1L << ((n) % NFDBITS)))
   FD_ISSET(n,p)=((p)->fds_bits[(n)/NFDBITS] & (1L << ((n) % NFDBITS)))
   FD_SET(n,p)=((p)->fds_bits[(n)/NFDBITS] |= (1L << ((n) % NFDBITS)))
   fd_set=_types_fd_set
   FD_SETSIZE=64
   FD_ZERO(p)=(__extension__ (void)({ size_t __i; char *__tmp = (char *)p; for (__i = 0; __i < sizeof (*(p)); ++__i) *__tmp++ = 0; }))
   FILENAME_MAX=1024
   FLASH=((FLASH_TypeDef *)FLASH_R_BASE)
   FLASHSIZE_BASE=0x1FFFF7E0U
   FLASHSIZE_BASE_ADDRESS=FLASHSIZE_BASE
   FLASH_ACR_HLFCYA=FLASH_ACR_HLFCYA_Msk
   FLASH_ACR_HLFCYA_Msk=(0x1U << FLASH_ACR_HLFCYA_Pos)
   FLASH_ACR_HLFCYA_Pos=(3U)
   FLASH_ACR_LATENCY=FLASH_ACR_LATENCY_Msk
   FLASH_ACR_LATENCY_0=(0x1U << FLASH_ACR_LATENCY_Pos)
   FLASH_ACR_LATENCY_1=(0x2U << FLASH_ACR_LATENCY_Pos)
   FLASH_ACR_LATENCY_2=(0x4U << FLASH_ACR_LATENCY_Pos)
   FLASH_ACR_LATENCY_Msk=(0x7U << FLASH_ACR_LATENCY_Pos)
   FLASH_ACR_LATENCY_Pos=(0U)
   FLASH_ACR_PRFTBE=FLASH_ACR_PRFTBE_Msk
   FLASH_ACR_PRFTBE_Msk=(0x1U << FLASH_ACR_PRFTBE_Pos)
   FLASH_ACR_PRFTBE_Pos=(4U)
   FLASH_ACR_PRFTBS=FLASH_ACR_PRFTBS_Msk
   FLASH_ACR_PRFTBS_Msk=(0x1U << FLASH_ACR_PRFTBS_Pos)
   FLASH_ACR_PRFTBS_Pos=(5U)
   FLASH_AR_FAR=FLASH_AR_FAR_Msk
   FLASH_AR_FAR_Msk=(0xFFFFFFFFU << FLASH_AR_FAR_Pos)
   FLASH_AR_FAR_Pos=(0U)
   FLASH_BANK1_END=0x0801FFFFU
   FLASH_BANK_1=1U
   FLASH_BASE=0x08000000U
   FLASH_CR_EOPIE=FLASH_CR_EOPIE_Msk
   FLASH_CR_EOPIE_Msk=(0x1U << FLASH_CR_EOPIE_Pos)
   FLASH_CR_EOPIE_Pos=(12U)
   FLASH_CR_ERRIE=FLASH_CR_ERRIE_Msk
   FLASH_CR_ERRIE_Msk=(0x1U << FLASH_CR_ERRIE_Pos)
   FLASH_CR_ERRIE_Pos=(10U)
   FLASH_CR_LOCK=FLASH_CR_LOCK_Msk
   FLASH_CR_LOCK_Msk=(0x1U << FLASH_CR_LOCK_Pos)
   FLASH_CR_LOCK_Pos=(7U)
   FLASH_CR_MER=FLASH_CR_MER_Msk
   FLASH_CR_MER_Msk=(0x1U << FLASH_CR_MER_Pos)
   FLASH_CR_MER_Pos=(2U)
   FLASH_CR_OPTER=FLASH_CR_OPTER_Msk
   FLASH_CR_OPTER_Msk=(0x1U << FLASH_CR_OPTER_Pos)
   FLASH_CR_OPTER_Pos=(5U)
   FLASH_CR_OPTPG=FLASH_CR_OPTPG_Msk
   FLASH_CR_OPTPG_Msk=(0x1U << FLASH_CR_OPTPG_Pos)
   FLASH_CR_OPTPG_Pos=(4U)
   FLASH_CR_OPTWRE=FLASH_CR_OPTWRE_Msk
   FLASH_CR_OPTWRE_Msk=(0x1U << FLASH_CR_OPTWRE_Pos)
   FLASH_CR_OPTWRE_Pos=(9U)
   FLASH_CR_PER=FLASH_CR_PER_Msk
   FLASH_CR_PER_Msk=(0x1U << FLASH_CR_PER_Pos)
   FLASH_CR_PER_Pos=(1U)
   FLASH_CR_PG=FLASH_CR_PG_Msk
   FLASH_CR_PG_Msk=(0x1U << FLASH_CR_PG_Pos)
   FLASH_CR_PG_Pos=(0U)
   FLASH_CR_STRT=FLASH_CR_STRT_Msk
   FLASH_CR_STRT_Msk=(0x1U << FLASH_CR_STRT_Pos)
   FLASH_CR_STRT_Pos=(6U)
   FLASH_DATA0_DATA0=FLASH_DATA0_DATA0_Msk
   FLASH_DATA0_DATA0_Msk=(0xFFU << FLASH_DATA0_DATA0_Pos)
   FLASH_DATA0_DATA0_Pos=(0U)
   FLASH_DATA0_nDATA0=FLASH_DATA0_nDATA0_Msk
   FLASH_DATA0_nDATA0_Msk=(0xFFU << FLASH_DATA0_nDATA0_Pos)
   FLASH_DATA0_nDATA0_Pos=(8U)
   FLASH_DATA1_DATA1=FLASH_DATA1_DATA1_Msk
   FLASH_DATA1_DATA1_Msk=(0xFFU << FLASH_DATA1_DATA1_Pos)
   FLASH_DATA1_DATA1_Pos=(16U)
   FLASH_DATA1_nDATA1=FLASH_DATA1_nDATA1_Msk
   FLASH_DATA1_nDATA1_Msk=(0xFFU << FLASH_DATA1_nDATA1_Pos)
   FLASH_DATA1_nDATA1_Pos=(24U)
   FLASH_FLAG_BSY=FLASH_SR_BSY
   FLASH_FLAG_EOP=FLASH_SR_EOP
   FLASH_FLAG_OPTVERR=((OBR_REG_INDEX << 8U | FLASH_OBR_OPTERR))
   FLASH_FLAG_PGERR=FLASH_SR_PGERR
   FLASH_FLAG_WRPERR=FLASH_SR_WRPRTERR
   FLASH_IT_EOP=FLASH_CR_EOPIE
   FLASH_IT_ERR=FLASH_CR_ERRIE
   FLASH_KEY1=FLASH_KEY1_Msk
   FLASH_KEY1_Msk=(0x45670123U << FLASH_KEY1_Pos)
   FLASH_KEY1_Pos=(0U)
   FLASH_KEY2=FLASH_KEY2_Msk
   FLASH_KEY2_Msk=(0xCDEF89ABU << FLASH_KEY2_Pos)
   FLASH_KEY2_Pos=(0U)
   FLASH_KEYR_FKEYR=FLASH_KEYR_FKEYR_Msk
   FLASH_KEYR_FKEYR_Msk=(0xFFFFFFFFU << FLASH_KEYR_FKEYR_Pos)
   FLASH_KEYR_FKEYR_Pos=(0U)
   FLASH_LATENCY_0=0x00000000U
   FLASH_LATENCY_1=FLASH_ACR_LATENCY_0
   FLASH_LATENCY_2=FLASH_ACR_LATENCY_1
   FLASH_OBR_DATA0=FLASH_OBR_DATA0_Msk
   FLASH_OBR_DATA0_Msk=(0xFFU << FLASH_OBR_DATA0_Pos)
   FLASH_OBR_DATA0_Pos=(10U)
   FLASH_OBR_DATA1=FLASH_OBR_DATA1_Msk
   FLASH_OBR_DATA1_Msk=(0xFFU << FLASH_OBR_DATA1_Pos)
   FLASH_OBR_DATA1_Pos=(18U)
   FLASH_OBR_IWDG_SW=FLASH_OBR_IWDG_SW_Msk
   FLASH_OBR_IWDG_SW_Msk=(0x1U << FLASH_OBR_IWDG_SW_Pos)
   FLASH_OBR_IWDG_SW_Pos=(2U)
   FLASH_OBR_nRST_STDBY=FLASH_OBR_nRST_STDBY_Msk
   FLASH_OBR_nRST_STDBY_Msk=(0x1U << FLASH_OBR_nRST_STDBY_Pos)
   FLASH_OBR_nRST_STDBY_Pos=(4U)
   FLASH_OBR_nRST_STOP=FLASH_OBR_nRST_STOP_Msk
   FLASH_OBR_nRST_STOP_Msk=(0x1U << FLASH_OBR_nRST_STOP_Pos)
   FLASH_OBR_nRST_STOP_Pos=(3U)
   FLASH_OBR_OPTERR=FLASH_OBR_OPTERR_Msk
   FLASH_OBR_OPTERR_Msk=(0x1U << FLASH_OBR_OPTERR_Pos)
   FLASH_OBR_OPTERR_Pos=(0U)
   FLASH_OBR_RDPRT=FLASH_OBR_RDPRT_Msk
   FLASH_OBR_RDPRT_Msk=(0x1U << FLASH_OBR_RDPRT_Pos)
   FLASH_OBR_RDPRT_Pos=(1U)
   FLASH_OBR_USER=FLASH_OBR_USER_Msk
   FLASH_OBR_USER_Msk=(0x7U << FLASH_OBR_USER_Pos)
   FLASH_OBR_USER_Pos=(2U)
   FLASH_OPTKEY1=FLASH_KEY1
   FLASH_OPTKEY2=FLASH_KEY2
   FLASH_OPTKEYR_OPTKEYR=FLASH_OPTKEYR_OPTKEYR_Msk
   FLASH_OPTKEYR_OPTKEYR_Msk=(0xFFFFFFFFU << FLASH_OPTKEYR_OPTKEYR_Pos)
   FLASH_OPTKEYR_OPTKEYR_Pos=(0U)
   FLASH_PAGE_SIZE=0x400U
   FLASH_RDP_nRDP=FLASH_RDP_nRDP_Msk
   FLASH_RDP_nRDP_Msk=(0xFFU << FLASH_RDP_nRDP_Pos)
   FLASH_RDP_nRDP_Pos=(8U)
   FLASH_RDP_RDP=FLASH_RDP_RDP_Msk
   FLASH_RDP_RDP_Msk=(0xFFU << FLASH_RDP_RDP_Pos)
   FLASH_RDP_RDP_Pos=(0U)
   FLASH_R_BASE=(AHBPERIPH_BASE + 0x00002000U)
   FLASH_SIZE_DATA_REGISTER=0x1FFFF7E0U
   FLASH_SR_BSY=FLASH_SR_BSY_Msk
   FLASH_SR_BSY_Msk=(0x1U << FLASH_SR_BSY_Pos)
   FLASH_SR_BSY_Pos=(0U)
   FLASH_SR_EOP=FLASH_SR_EOP_Msk
   FLASH_SR_EOP_Msk=(0x1U << FLASH_SR_EOP_Pos)
   FLASH_SR_EOP_Pos=(5U)
   FLASH_SR_PGERR=FLASH_SR_PGERR_Msk
   FLASH_SR_PGERR_Msk=(0x1U << FLASH_SR_PGERR_Pos)
   FLASH_SR_PGERR_Pos=(2U)
   FLASH_SR_WRPRTERR=FLASH_SR_WRPRTERR_Msk
   FLASH_SR_WRPRTERR_Msk=(0x1U << FLASH_SR_WRPRTERR_Pos)
   FLASH_SR_WRPRTERR_Pos=(4U)
   FLASH_TIMEOUT_VALUE=50000U
   FLASH_TYPEERASE_MASSERASE=0x02U
   FLASH_TYPEERASE_PAGES=0x00U
   FLASH_TYPEPROGRAM_DOUBLEWORD=0x03U
   FLASH_TYPEPROGRAM_HALFWORD=0x01U
   FLASH_TYPEPROGRAM_WORD=0x02U
   FLASH_USER_nUSER=FLASH_USER_nUSER_Msk
   FLASH_USER_nUSER_Msk=(0xFFU << FLASH_USER_nUSER_Pos)
   FLASH_USER_nUSER_Pos=(24U)
   FLASH_USER_USER=FLASH_USER_USER_Msk
   FLASH_USER_USER_Msk=(0xFFU << FLASH_USER_USER_Pos)
   FLASH_USER_USER_Pos=(16U)
   FLASH_WRP0_nWRP0=FLASH_WRP0_nWRP0_Msk
   FLASH_WRP0_nWRP0_Msk=(0xFFU << FLASH_WRP0_nWRP0_Pos)
   FLASH_WRP0_nWRP0_Pos=(8U)
   FLASH_WRP0_WRP0=FLASH_WRP0_WRP0_Msk
   FLASH_WRP0_WRP0_Msk=(0xFFU << FLASH_WRP0_WRP0_Pos)
   FLASH_WRP0_WRP0_Pos=(0U)
   FLASH_WRP1_nWRP1=FLASH_WRP1_nWRP1_Msk
   FLASH_WRP1_nWRP1_Msk=(0xFFU << FLASH_WRP1_nWRP1_Pos)
   FLASH_WRP1_nWRP1_Pos=(24U)
   FLASH_WRP1_WRP1=FLASH_WRP1_WRP1_Msk
   FLASH_WRP1_WRP1_Msk=(0xFFU << FLASH_WRP1_WRP1_Pos)
   FLASH_WRP1_WRP1_Pos=(16U)
   FLASH_WRP2_nWRP2=FLASH_WRP2_nWRP2_Msk
   FLASH_WRP2_nWRP2_Msk=(0xFFU << FLASH_WRP2_nWRP2_Pos)
   FLASH_WRP2_nWRP2_Pos=(8U)
   FLASH_WRP2_WRP2=FLASH_WRP2_WRP2_Msk
   FLASH_WRP2_WRP2_Msk=(0xFFU << FLASH_WRP2_WRP2_Pos)
   FLASH_WRP2_WRP2_Pos=(0U)
   FLASH_WRP3_nWRP3=FLASH_WRP3_nWRP3_Msk
   FLASH_WRP3_nWRP3_Msk=(0xFFU << FLASH_WRP3_nWRP3_Pos)
   FLASH_WRP3_nWRP3_Pos=(24U)
   FLASH_WRP3_WRP3=FLASH_WRP3_WRP3_Msk
   FLASH_WRP3_WRP3_Msk=(0xFFU << FLASH_WRP3_WRP3_Pos)
   FLASH_WRP3_WRP3_Pos=(16U)
   FLASH_WRPR_WRP=FLASH_WRPR_WRP_Msk
   FLASH_WRPR_WRP_Msk=(0xFFFFFFFFU << FLASH_WRPR_WRP_Pos)
   FLASH_WRPR_WRP_Pos=(0U)
   FOPEN_MAX=20
   fropen(__cookie,__fn)=funopen(__cookie, __fn, (int (*)())0, (fpos_t (*)())0, (int (*)())0)
   fwopen(__cookie,__fn)=funopen(__cookie, (int (*)())0, __fn, (fpos_t (*)())0, (int (*)())0)
   getc(fp)=__sgetc_r(_REENT, fp)
   getchar()=getc(stdin)
   getchar_unlocked()=getc_unlocked(stdin)
   GPIOA=((GPIO_TypeDef *)GPIOA_BASE)
   GPIOA_BASE=(APB2PERIPH_BASE + 0x00000800U)
   GPIOB=((GPIO_TypeDef *)GPIOB_BASE)
   GPIOB_BASE=(APB2PERIPH_BASE + 0x00000C00U)
   GPIOC=((GPIO_TypeDef *)GPIOC_BASE)
   GPIOC_BASE=(APB2PERIPH_BASE + 0x00001000U)
   GPIOD=((GPIO_TypeDef *)GPIOD_BASE)
   GPIOD_BASE=(APB2PERIPH_BASE + 0x00001400U)
   GPIOE=((GPIO_TypeDef *)GPIOE_BASE)
   GPIOE_BASE=(APB2PERIPH_BASE + 0x00001800U)
   GPIO_BRR_BR0=GPIO_BRR_BR0_Msk
   GPIO_BRR_BR0_Msk=(0x1U << GPIO_BRR_BR0_Pos)
   GPIO_BRR_BR0_Pos=(0U)
   GPIO_BRR_BR10=GPIO_BRR_BR10_Msk
   GPIO_BRR_BR10_Msk=(0x1U << GPIO_BRR_BR10_Pos)
   GPIO_BRR_BR10_Pos=(10U)
   GPIO_BRR_BR11=GPIO_BRR_BR11_Msk
   GPIO_BRR_BR11_Msk=(0x1U << GPIO_BRR_BR11_Pos)
   GPIO_BRR_BR11_Pos=(11U)
   GPIO_BRR_BR12=GPIO_BRR_BR12_Msk
   GPIO_BRR_BR12_Msk=(0x1U << GPIO_BRR_BR12_Pos)
   GPIO_BRR_BR12_Pos=(12U)
   GPIO_BRR_BR13=GPIO_BRR_BR13_Msk
   GPIO_BRR_BR13_Msk=(0x1U << GPIO_BRR_BR13_Pos)
   GPIO_BRR_BR13_Pos=(13U)
   GPIO_BRR_BR14=GPIO_BRR_BR14_Msk
   GPIO_BRR_BR14_Msk=(0x1U << GPIO_BRR_BR14_Pos)
   GPIO_BRR_BR14_Pos=(14U)
   GPIO_BRR_BR15=GPIO_BRR_BR15_Msk
   GPIO_BRR_BR15_Msk=(0x1U << GPIO_BRR_BR15_Pos)
   GPIO_BRR_BR15_Pos=(15U)
   GPIO_BRR_BR1=GPIO_BRR_BR1_Msk
   GPIO_BRR_BR1_Msk=(0x1U << GPIO_BRR_BR1_Pos)
   GPIO_BRR_BR1_Pos=(1U)
   GPIO_BRR_BR2=GPIO_BRR_BR2_Msk
   GPIO_BRR_BR2_Msk=(0x1U << GPIO_BRR_BR2_Pos)
   GPIO_BRR_BR2_Pos=(2U)
   GPIO_BRR_BR3=GPIO_BRR_BR3_Msk
   GPIO_BRR_BR3_Msk=(0x1U << GPIO_BRR_BR3_Pos)
   GPIO_BRR_BR3_Pos=(3U)
   GPIO_BRR_BR4=GPIO_BRR_BR4_Msk
   GPIO_BRR_BR4_Msk=(0x1U << GPIO_BRR_BR4_Pos)
   GPIO_BRR_BR4_Pos=(4U)
   GPIO_BRR_BR5=GPIO_BRR_BR5_Msk
   GPIO_BRR_BR5_Msk=(0x1U << GPIO_BRR_BR5_Pos)
   GPIO_BRR_BR5_Pos=(5U)
   GPIO_BRR_BR6=GPIO_BRR_BR6_Msk
   GPIO_BRR_BR6_Msk=(0x1U << GPIO_BRR_BR6_Pos)
   GPIO_BRR_BR6_Pos=(6U)
   GPIO_BRR_BR7=GPIO_BRR_BR7_Msk
   GPIO_BRR_BR7_Msk=(0x1U << GPIO_BRR_BR7_Pos)
   GPIO_BRR_BR7_Pos=(7U)
   GPIO_BRR_BR8=GPIO_BRR_BR8_Msk
   GPIO_BRR_BR8_Msk=(0x1U << GPIO_BRR_BR8_Pos)
   GPIO_BRR_BR8_Pos=(8U)
   GPIO_BRR_BR9=GPIO_BRR_BR9_Msk
   GPIO_BRR_BR9_Msk=(0x1U << GPIO_BRR_BR9_Pos)
   GPIO_BRR_BR9_Pos=(9U)
   GPIO_BSRR_BR0=GPIO_BSRR_BR0_Msk
   GPIO_BSRR_BR0_Msk=(0x1U << GPIO_BSRR_BR0_Pos)
   GPIO_BSRR_BR0_Pos=(16U)
   GPIO_BSRR_BR10=GPIO_BSRR_BR10_Msk
   GPIO_BSRR_BR10_Msk=(0x1U << GPIO_BSRR_BR10_Pos)
   GPIO_BSRR_BR10_Pos=(26U)
   GPIO_BSRR_BR11=GPIO_BSRR_BR11_Msk
   GPIO_BSRR_BR11_Msk=(0x1U << GPIO_BSRR_BR11_Pos)
   GPIO_BSRR_BR11_Pos=(27U)
   GPIO_BSRR_BR12=GPIO_BSRR_BR12_Msk
   GPIO_BSRR_BR12_Msk=(0x1U << GPIO_BSRR_BR12_Pos)
   GPIO_BSRR_BR12_Pos=(28U)
   GPIO_BSRR_BR13=GPIO_BSRR_BR13_Msk
   GPIO_BSRR_BR13_Msk=(0x1U << GPIO_BSRR_BR13_Pos)
   GPIO_BSRR_BR13_Pos=(29U)
   GPIO_BSRR_BR14=GPIO_BSRR_BR14_Msk
   GPIO_BSRR_BR14_Msk=(0x1U << GPIO_BSRR_BR14_Pos)
   GPIO_BSRR_BR14_Pos=(30U)
   GPIO_BSRR_BR15=GPIO_BSRR_BR15_Msk
   GPIO_BSRR_BR15_Msk=(0x1U << GPIO_BSRR_BR15_Pos)
   GPIO_BSRR_BR15_Pos=(31U)
   GPIO_BSRR_BR1=GPIO_BSRR_BR1_Msk
   GPIO_BSRR_BR1_Msk=(0x1U << GPIO_BSRR_BR1_Pos)
   GPIO_BSRR_BR1_Pos=(17U)
   GPIO_BSRR_BR2=GPIO_BSRR_BR2_Msk
   GPIO_BSRR_BR2_Msk=(0x1U << GPIO_BSRR_BR2_Pos)
   GPIO_BSRR_BR2_Pos=(18U)
   GPIO_BSRR_BR3=GPIO_BSRR_BR3_Msk
   GPIO_BSRR_BR3_Msk=(0x1U << GPIO_BSRR_BR3_Pos)
   GPIO_BSRR_BR3_Pos=(19U)
   GPIO_BSRR_BR4=GPIO_BSRR_BR4_Msk
   GPIO_BSRR_BR4_Msk=(0x1U << GPIO_BSRR_BR4_Pos)
   GPIO_BSRR_BR4_Pos=(20U)
   GPIO_BSRR_BR5=GPIO_BSRR_BR5_Msk
   GPIO_BSRR_BR5_Msk=(0x1U << GPIO_BSRR_BR5_Pos)
   GPIO_BSRR_BR5_Pos=(21U)
   GPIO_BSRR_BR6=GPIO_BSRR_BR6_Msk
   GPIO_BSRR_BR6_Msk=(0x1U << GPIO_BSRR_BR6_Pos)
   GPIO_BSRR_BR6_Pos=(22U)
   GPIO_BSRR_BR7=GPIO_BSRR_BR7_Msk
   GPIO_BSRR_BR7_Msk=(0x1U << GPIO_BSRR_BR7_Pos)
   GPIO_BSRR_BR7_Pos=(23U)
   GPIO_BSRR_BR8=GPIO_BSRR_BR8_Msk
   GPIO_BSRR_BR8_Msk=(0x1U << GPIO_BSRR_BR8_Pos)
   GPIO_BSRR_BR8_Pos=(24U)
   GPIO_BSRR_BR9=GPIO_BSRR_BR9_Msk
   GPIO_BSRR_BR9_Msk=(0x1U << GPIO_BSRR_BR9_Pos)
   GPIO_BSRR_BR9_Pos=(25U)
   GPIO_BSRR_BS0=GPIO_BSRR_BS0_Msk
   GPIO_BSRR_BS0_Msk=(0x1U << GPIO_BSRR_BS0_Pos)
   GPIO_BSRR_BS0_Pos=(0U)
   GPIO_BSRR_BS10=GPIO_BSRR_BS10_Msk
   GPIO_BSRR_BS10_Msk=(0x1U << GPIO_BSRR_BS10_Pos)
   GPIO_BSRR_BS10_Pos=(10U)
   GPIO_BSRR_BS11=GPIO_BSRR_BS11_Msk
   GPIO_BSRR_BS11_Msk=(0x1U << GPIO_BSRR_BS11_Pos)
   GPIO_BSRR_BS11_Pos=(11U)
   GPIO_BSRR_BS12=GPIO_BSRR_BS12_Msk
   GPIO_BSRR_BS12_Msk=(0x1U << GPIO_BSRR_BS12_Pos)
   GPIO_BSRR_BS12_Pos=(12U)
   GPIO_BSRR_BS13=GPIO_BSRR_BS13_Msk
   GPIO_BSRR_BS13_Msk=(0x1U << GPIO_BSRR_BS13_Pos)
   GPIO_BSRR_BS13_Pos=(13U)
   GPIO_BSRR_BS14=GPIO_BSRR_BS14_Msk
   GPIO_BSRR_BS14_Msk=(0x1U << GPIO_BSRR_BS14_Pos)
   GPIO_BSRR_BS14_Pos=(14U)
   GPIO_BSRR_BS15=GPIO_BSRR_BS15_Msk
   GPIO_BSRR_BS15_Msk=(0x1U << GPIO_BSRR_BS15_Pos)
   GPIO_BSRR_BS15_Pos=(15U)
   GPIO_BSRR_BS1=GPIO_BSRR_BS1_Msk
   GPIO_BSRR_BS1_Msk=(0x1U << GPIO_BSRR_BS1_Pos)
   GPIO_BSRR_BS1_Pos=(1U)
   GPIO_BSRR_BS2=GPIO_BSRR_BS2_Msk
   GPIO_BSRR_BS2_Msk=(0x1U << GPIO_BSRR_BS2_Pos)
   GPIO_BSRR_BS2_Pos=(2U)
   GPIO_BSRR_BS3=GPIO_BSRR_BS3_Msk
   GPIO_BSRR_BS3_Msk=(0x1U << GPIO_BSRR_BS3_Pos)
   GPIO_BSRR_BS3_Pos=(3U)
   GPIO_BSRR_BS4=GPIO_BSRR_BS4_Msk
   GPIO_BSRR_BS4_Msk=(0x1U << GPIO_BSRR_BS4_Pos)
   GPIO_BSRR_BS4_Pos=(4U)
   GPIO_BSRR_BS5=GPIO_BSRR_BS5_Msk
   GPIO_BSRR_BS5_Msk=(0x1U << GPIO_BSRR_BS5_Pos)
   GPIO_BSRR_BS5_Pos=(5U)
   GPIO_BSRR_BS6=GPIO_BSRR_BS6_Msk
   GPIO_BSRR_BS6_Msk=(0x1U << GPIO_BSRR_BS6_Pos)
   GPIO_BSRR_BS6_Pos=(6U)
   GPIO_BSRR_BS7=GPIO_BSRR_BS7_Msk
   GPIO_BSRR_BS7_Msk=(0x1U << GPIO_BSRR_BS7_Pos)
   GPIO_BSRR_BS7_Pos=(7U)
   GPIO_BSRR_BS8=GPIO_BSRR_BS8_Msk
   GPIO_BSRR_BS8_Msk=(0x1U << GPIO_BSRR_BS8_Pos)
   GPIO_BSRR_BS8_Pos=(8U)
   GPIO_BSRR_BS9=GPIO_BSRR_BS9_Msk
   GPIO_BSRR_BS9_Msk=(0x1U << GPIO_BSRR_BS9_Pos)
   GPIO_BSRR_BS9_Pos=(9U)
   GPIO_CRH_CNF10=GPIO_CRH_CNF10_Msk
   GPIO_CRH_CNF10_0=(0x1U << GPIO_CRH_CNF10_Pos)
   GPIO_CRH_CNF10_1=(0x2U << GPIO_CRH_CNF10_Pos)
   GPIO_CRH_CNF10_Msk=(0x3U << GPIO_CRH_CNF10_Pos)
   GPIO_CRH_CNF10_Pos=(10U)
   GPIO_CRH_CNF11=GPIO_CRH_CNF11_Msk
   GPIO_CRH_CNF11_0=(0x1U << GPIO_CRH_CNF11_Pos)
   GPIO_CRH_CNF11_1=(0x2U << GPIO_CRH_CNF11_Pos)
   GPIO_CRH_CNF11_Msk=(0x3U << GPIO_CRH_CNF11_Pos)
   GPIO_CRH_CNF11_Pos=(14U)
   GPIO_CRH_CNF12=GPIO_CRH_CNF12_Msk
   GPIO_CRH_CNF12_0=(0x1U << GPIO_CRH_CNF12_Pos)
   GPIO_CRH_CNF12_1=(0x2U << GPIO_CRH_CNF12_Pos)
   GPIO_CRH_CNF12_Msk=(0x3U << GPIO_CRH_CNF12_Pos)
   GPIO_CRH_CNF12_Pos=(18U)
   GPIO_CRH_CNF13=GPIO_CRH_CNF13_Msk
   GPIO_CRH_CNF13_0=(0x1U << GPIO_CRH_CNF13_Pos)
   GPIO_CRH_CNF13_1=(0x2U << GPIO_CRH_CNF13_Pos)
   GPIO_CRH_CNF13_Msk=(0x3U << GPIO_CRH_CNF13_Pos)
   GPIO_CRH_CNF13_Pos=(22U)
   GPIO_CRH_CNF14=GPIO_CRH_CNF14_Msk
   GPIO_CRH_CNF14_0=(0x1U << GPIO_CRH_CNF14_Pos)
   GPIO_CRH_CNF14_1=(0x2U << GPIO_CRH_CNF14_Pos)
   GPIO_CRH_CNF14_Msk=(0x3U << GPIO_CRH_CNF14_Pos)
   GPIO_CRH_CNF14_Pos=(26U)
   GPIO_CRH_CNF15=GPIO_CRH_CNF15_Msk
   GPIO_CRH_CNF15_0=(0x1U << GPIO_CRH_CNF15_Pos)
   GPIO_CRH_CNF15_1=(0x2U << GPIO_CRH_CNF15_Pos)
   GPIO_CRH_CNF15_Msk=(0x3U << GPIO_CRH_CNF15_Pos)
   GPIO_CRH_CNF15_Pos=(30U)
   GPIO_CRH_CNF8=GPIO_CRH_CNF8_Msk
   GPIO_CRH_CNF8_0=(0x1U << GPIO_CRH_CNF8_Pos)
   GPIO_CRH_CNF8_1=(0x2U << GPIO_CRH_CNF8_Pos)
   GPIO_CRH_CNF8_Msk=(0x3U << GPIO_CRH_CNF8_Pos)
   GPIO_CRH_CNF8_Pos=(2U)
   GPIO_CRH_CNF9=GPIO_CRH_CNF9_Msk
   GPIO_CRH_CNF9_0=(0x1U << GPIO_CRH_CNF9_Pos)
   GPIO_CRH_CNF9_1=(0x2U << GPIO_CRH_CNF9_Pos)
   GPIO_CRH_CNF9_Msk=(0x3U << GPIO_CRH_CNF9_Pos)
   GPIO_CRH_CNF9_Pos=(6U)
   GPIO_CRH_CNF=GPIO_CRH_CNF_Msk
   GPIO_CRH_CNF_Msk=(0x33333333U << GPIO_CRH_CNF_Pos)
   GPIO_CRH_CNF_Pos=(2U)
   GPIO_CRH_MODE10=GPIO_CRH_MODE10_Msk
   GPIO_CRH_MODE10_0=(0x1U << GPIO_CRH_MODE10_Pos)
   GPIO_CRH_MODE10_1=(0x2U << GPIO_CRH_MODE10_Pos)
   GPIO_CRH_MODE10_Msk=(0x3U << GPIO_CRH_MODE10_Pos)
   GPIO_CRH_MODE10_Pos=(8U)
   GPIO_CRH_MODE11=GPIO_CRH_MODE11_Msk
   GPIO_CRH_MODE11_0=(0x1U << GPIO_CRH_MODE11_Pos)
   GPIO_CRH_MODE11_1=(0x2U << GPIO_CRH_MODE11_Pos)
   GPIO_CRH_MODE11_Msk=(0x3U << GPIO_CRH_MODE11_Pos)
   GPIO_CRH_MODE11_Pos=(12U)
   GPIO_CRH_MODE12=GPIO_CRH_MODE12_Msk
   GPIO_CRH_MODE12_0=(0x1U << GPIO_CRH_MODE12_Pos)
   GPIO_CRH_MODE12_1=(0x2U << GPIO_CRH_MODE12_Pos)
   GPIO_CRH_MODE12_Msk=(0x3U << GPIO_CRH_MODE12_Pos)
   GPIO_CRH_MODE12_Pos=(16U)
   GPIO_CRH_MODE13=GPIO_CRH_MODE13_Msk
   GPIO_CRH_MODE13_0=(0x1U << GPIO_CRH_MODE13_Pos)
   GPIO_CRH_MODE13_1=(0x2U << GPIO_CRH_MODE13_Pos)
   GPIO_CRH_MODE13_Msk=(0x3U << GPIO_CRH_MODE13_Pos)
   GPIO_CRH_MODE13_Pos=(20U)
   GPIO_CRH_MODE14=GPIO_CRH_MODE14_Msk
   GPIO_CRH_MODE14_0=(0x1U << GPIO_CRH_MODE14_Pos)
   GPIO_CRH_MODE14_1=(0x2U << GPIO_CRH_MODE14_Pos)
   GPIO_CRH_MODE14_Msk=(0x3U << GPIO_CRH_MODE14_Pos)
   GPIO_CRH_MODE14_Pos=(24U)
   GPIO_CRH_MODE15=GPIO_CRH_MODE15_Msk
   GPIO_CRH_MODE15_0=(0x1U << GPIO_CRH_MODE15_Pos)
   GPIO_CRH_MODE15_1=(0x2U << GPIO_CRH_MODE15_Pos)
   GPIO_CRH_MODE15_Msk=(0x3U << GPIO_CRH_MODE15_Pos)
   GPIO_CRH_MODE15_Pos=(28U)
   GPIO_CRH_MODE8=GPIO_CRH_MODE8_Msk
   GPIO_CRH_MODE8_0=(0x1U << GPIO_CRH_MODE8_Pos)
   GPIO_CRH_MODE8_1=(0x2U << GPIO_CRH_MODE8_Pos)
   GPIO_CRH_MODE8_Msk=(0x3U << GPIO_CRH_MODE8_Pos)
   GPIO_CRH_MODE8_Pos=(0U)
   GPIO_CRH_MODE9=GPIO_CRH_MODE9_Msk
   GPIO_CRH_MODE9_0=(0x1U << GPIO_CRH_MODE9_Pos)
   GPIO_CRH_MODE9_1=(0x2U << GPIO_CRH_MODE9_Pos)
   GPIO_CRH_MODE9_Msk=(0x3U << GPIO_CRH_MODE9_Pos)
   GPIO_CRH_MODE9_Pos=(4U)
   GPIO_CRH_MODE=GPIO_CRH_MODE_Msk
   GPIO_CRH_MODE_Msk=(0x33333333U << GPIO_CRH_MODE_Pos)
   GPIO_CRH_MODE_Pos=(0U)
   GPIO_CRL_CNF0=GPIO_CRL_CNF0_Msk
   GPIO_CRL_CNF0_0=(0x1U << GPIO_CRL_CNF0_Pos)
   GPIO_CRL_CNF0_1=(0x2U << GPIO_CRL_CNF0_Pos)
   GPIO_CRL_CNF0_Msk=(0x3U << GPIO_CRL_CNF0_Pos)
   GPIO_CRL_CNF0_Pos=(2U)
   GPIO_CRL_CNF1=GPIO_CRL_CNF1_Msk
   GPIO_CRL_CNF1_0=(0x1U << GPIO_CRL_CNF1_Pos)
   GPIO_CRL_CNF1_1=(0x2U << GPIO_CRL_CNF1_Pos)
   GPIO_CRL_CNF1_Msk=(0x3U << GPIO_CRL_CNF1_Pos)
   GPIO_CRL_CNF1_Pos=(6U)
   GPIO_CRL_CNF2=GPIO_CRL_CNF2_Msk
   GPIO_CRL_CNF2_0=(0x1U << GPIO_CRL_CNF2_Pos)
   GPIO_CRL_CNF2_1=(0x2U << GPIO_CRL_CNF2_Pos)
   GPIO_CRL_CNF2_Msk=(0x3U << GPIO_CRL_CNF2_Pos)
   GPIO_CRL_CNF2_Pos=(10U)
   GPIO_CRL_CNF3=GPIO_CRL_CNF3_Msk
   GPIO_CRL_CNF3_0=(0x1U << GPIO_CRL_CNF3_Pos)
   GPIO_CRL_CNF3_1=(0x2U << GPIO_CRL_CNF3_Pos)
   GPIO_CRL_CNF3_Msk=(0x3U << GPIO_CRL_CNF3_Pos)
   GPIO_CRL_CNF3_Pos=(14U)
   GPIO_CRL_CNF4=GPIO_CRL_CNF4_Msk
   GPIO_CRL_CNF4_0=(0x1U << GPIO_CRL_CNF4_Pos)
   GPIO_CRL_CNF4_1=(0x2U << GPIO_CRL_CNF4_Pos)
   GPIO_CRL_CNF4_Msk=(0x3U << GPIO_CRL_CNF4_Pos)
   GPIO_CRL_CNF4_Pos=(18U)
   GPIO_CRL_CNF5=GPIO_CRL_CNF5_Msk
   GPIO_CRL_CNF5_0=(0x1U << GPIO_CRL_CNF5_Pos)
   GPIO_CRL_CNF5_1=(0x2U << GPIO_CRL_CNF5_Pos)
   GPIO_CRL_CNF5_Msk=(0x3U << GPIO_CRL_CNF5_Pos)
   GPIO_CRL_CNF5_Pos=(22U)
   GPIO_CRL_CNF6=GPIO_CRL_CNF6_Msk
   GPIO_CRL_CNF6_0=(0x1U << GPIO_CRL_CNF6_Pos)
   GPIO_CRL_CNF6_1=(0x2U << GPIO_CRL_CNF6_Pos)
   GPIO_CRL_CNF6_Msk=(0x3U << GPIO_CRL_CNF6_Pos)
   GPIO_CRL_CNF6_Pos=(26U)
   GPIO_CRL_CNF7=GPIO_CRL_CNF7_Msk
   GPIO_CRL_CNF7_0=(0x1U << GPIO_CRL_CNF7_Pos)
   GPIO_CRL_CNF7_1=(0x2U << GPIO_CRL_CNF7_Pos)
   GPIO_CRL_CNF7_Msk=(0x3U << GPIO_CRL_CNF7_Pos)
   GPIO_CRL_CNF7_Pos=(30U)
   GPIO_CRL_CNF=GPIO_CRL_CNF_Msk
   GPIO_CRL_CNF_Msk=(0x33333333U << GPIO_CRL_CNF_Pos)
   GPIO_CRL_CNF_Pos=(2U)
   GPIO_CRL_MODE0=GPIO_CRL_MODE0_Msk
   GPIO_CRL_MODE0_0=(0x1U << GPIO_CRL_MODE0_Pos)
   GPIO_CRL_MODE0_1=(0x2U << GPIO_CRL_MODE0_Pos)
   GPIO_CRL_MODE0_Msk=(0x3U << GPIO_CRL_MODE0_Pos)
   GPIO_CRL_MODE0_Pos=(0U)
   GPIO_CRL_MODE1=GPIO_CRL_MODE1_Msk
   GPIO_CRL_MODE1_0=(0x1U << GPIO_CRL_MODE1_Pos)
   GPIO_CRL_MODE1_1=(0x2U << GPIO_CRL_MODE1_Pos)
   GPIO_CRL_MODE1_Msk=(0x3U << GPIO_CRL_MODE1_Pos)
   GPIO_CRL_MODE1_Pos=(4U)
   GPIO_CRL_MODE2=GPIO_CRL_MODE2_Msk
   GPIO_CRL_MODE2_0=(0x1U << GPIO_CRL_MODE2_Pos)
   GPIO_CRL_MODE2_1=(0x2U << GPIO_CRL_MODE2_Pos)
   GPIO_CRL_MODE2_Msk=(0x3U << GPIO_CRL_MODE2_Pos)
   GPIO_CRL_MODE2_Pos=(8U)
   GPIO_CRL_MODE3=GPIO_CRL_MODE3_Msk
   GPIO_CRL_MODE3_0=(0x1U << GPIO_CRL_MODE3_Pos)
   GPIO_CRL_MODE3_1=(0x2U << GPIO_CRL_MODE3_Pos)
   GPIO_CRL_MODE3_Msk=(0x3U << GPIO_CRL_MODE3_Pos)
   GPIO_CRL_MODE3_Pos=(12U)
   GPIO_CRL_MODE4=GPIO_CRL_MODE4_Msk
   GPIO_CRL_MODE4_0=(0x1U << GPIO_CRL_MODE4_Pos)
   GPIO_CRL_MODE4_1=(0x2U << GPIO_CRL_MODE4_Pos)
   GPIO_CRL_MODE4_Msk=(0x3U << GPIO_CRL_MODE4_Pos)
   GPIO_CRL_MODE4_Pos=(16U)
   GPIO_CRL_MODE5=GPIO_CRL_MODE5_Msk
   GPIO_CRL_MODE5_0=(0x1U << GPIO_CRL_MODE5_Pos)
   GPIO_CRL_MODE5_1=(0x2U << GPIO_CRL_MODE5_Pos)
   GPIO_CRL_MODE5_Msk=(0x3U << GPIO_CRL_MODE5_Pos)
   GPIO_CRL_MODE5_Pos=(20U)
   GPIO_CRL_MODE6=GPIO_CRL_MODE6_Msk
   GPIO_CRL_MODE6_0=(0x1U << GPIO_CRL_MODE6_Pos)
   GPIO_CRL_MODE6_1=(0x2U << GPIO_CRL_MODE6_Pos)
   GPIO_CRL_MODE6_Msk=(0x3U << GPIO_CRL_MODE6_Pos)
   GPIO_CRL_MODE6_Pos=(24U)
   GPIO_CRL_MODE7=GPIO_CRL_MODE7_Msk
   GPIO_CRL_MODE7_0=(0x1U << GPIO_CRL_MODE7_Pos)
   GPIO_CRL_MODE7_1=(0x2U << GPIO_CRL_MODE7_Pos)
   GPIO_CRL_MODE7_Msk=(0x3U << GPIO_CRL_MODE7_Pos)
   GPIO_CRL_MODE7_Pos=(28U)
   GPIO_CRL_MODE=GPIO_CRL_MODE_Msk
   GPIO_CRL_MODE_Msk=(0x33333333U << GPIO_CRL_MODE_Pos)
   GPIO_CRL_MODE_Pos=(0U)
   GPIO_GET_INDEX(__GPIOx__)=(((__GPIOx__) == (GPIOA))? 0U : ((__GPIOx__) == (GPIOB))? 1U : ((__GPIOx__) == (GPIOC))? 2U : ((__GPIOx__) == (GPIOD))? 3U :4U)
   GPIO_IDR_IDR0=GPIO_IDR_IDR0_Msk
   GPIO_IDR_IDR0_Msk=(0x1U << GPIO_IDR_IDR0_Pos)
   GPIO_IDR_IDR0_Pos=(0U)
   GPIO_IDR_IDR10=GPIO_IDR_IDR10_Msk
   GPIO_IDR_IDR10_Msk=(0x1U << GPIO_IDR_IDR10_Pos)
   GPIO_IDR_IDR10_Pos=(10U)
   GPIO_IDR_IDR11=GPIO_IDR_IDR11_Msk
   GPIO_IDR_IDR11_Msk=(0x1U << GPIO_IDR_IDR11_Pos)
   GPIO_IDR_IDR11_Pos=(11U)
   GPIO_IDR_IDR12=GPIO_IDR_IDR12_Msk
   GPIO_IDR_IDR12_Msk=(0x1U << GPIO_IDR_IDR12_Pos)
   GPIO_IDR_IDR12_Pos=(12U)
   GPIO_IDR_IDR13=GPIO_IDR_IDR13_Msk
   GPIO_IDR_IDR13_Msk=(0x1U << GPIO_IDR_IDR13_Pos)
   GPIO_IDR_IDR13_Pos=(13U)
   GPIO_IDR_IDR14=GPIO_IDR_IDR14_Msk
   GPIO_IDR_IDR14_Msk=(0x1U << GPIO_IDR_IDR14_Pos)
   GPIO_IDR_IDR14_Pos=(14U)
   GPIO_IDR_IDR15=GPIO_IDR_IDR15_Msk
   GPIO_IDR_IDR15_Msk=(0x1U << GPIO_IDR_IDR15_Pos)
   GPIO_IDR_IDR15_Pos=(15U)
   GPIO_IDR_IDR1=GPIO_IDR_IDR1_Msk
   GPIO_IDR_IDR1_Msk=(0x1U << GPIO_IDR_IDR1_Pos)
   GPIO_IDR_IDR1_Pos=(1U)
   GPIO_IDR_IDR2=GPIO_IDR_IDR2_Msk
   GPIO_IDR_IDR2_Msk=(0x1U << GPIO_IDR_IDR2_Pos)
   GPIO_IDR_IDR2_Pos=(2U)
   GPIO_IDR_IDR3=GPIO_IDR_IDR3_Msk
   GPIO_IDR_IDR3_Msk=(0x1U << GPIO_IDR_IDR3_Pos)
   GPIO_IDR_IDR3_Pos=(3U)
   GPIO_IDR_IDR4=GPIO_IDR_IDR4_Msk
   GPIO_IDR_IDR4_Msk=(0x1U << GPIO_IDR_IDR4_Pos)
   GPIO_IDR_IDR4_Pos=(4U)
   GPIO_IDR_IDR5=GPIO_IDR_IDR5_Msk
   GPIO_IDR_IDR5_Msk=(0x1U << GPIO_IDR_IDR5_Pos)
   GPIO_IDR_IDR5_Pos=(5U)
   GPIO_IDR_IDR6=GPIO_IDR_IDR6_Msk
   GPIO_IDR_IDR6_Msk=(0x1U << GPIO_IDR_IDR6_Pos)
   GPIO_IDR_IDR6_Pos=(6U)
   GPIO_IDR_IDR7=GPIO_IDR_IDR7_Msk
   GPIO_IDR_IDR7_Msk=(0x1U << GPIO_IDR_IDR7_Pos)
   GPIO_IDR_IDR7_Pos=(7U)
   GPIO_IDR_IDR8=GPIO_IDR_IDR8_Msk
   GPIO_IDR_IDR8_Msk=(0x1U << GPIO_IDR_IDR8_Pos)
   GPIO_IDR_IDR8_Pos=(8U)
   GPIO_IDR_IDR9=GPIO_IDR_IDR9_Msk
   GPIO_IDR_IDR9_Msk=(0x1U << GPIO_IDR_IDR9_Pos)
   GPIO_IDR_IDR9_Pos=(9U)
   GPIO_LCKR_LCK0=GPIO_LCKR_LCK0_Msk
   GPIO_LCKR_LCK0_Msk=(0x1U << GPIO_LCKR_LCK0_Pos)
   GPIO_LCKR_LCK0_Pos=(0U)
   GPIO_LCKR_LCK10=GPIO_LCKR_LCK10_Msk
   GPIO_LCKR_LCK10_Msk=(0x1U << GPIO_LCKR_LCK10_Pos)
   GPIO_LCKR_LCK10_Pos=(10U)
   GPIO_LCKR_LCK11=GPIO_LCKR_LCK11_Msk
   GPIO_LCKR_LCK11_Msk=(0x1U << GPIO_LCKR_LCK11_Pos)
   GPIO_LCKR_LCK11_Pos=(11U)
   GPIO_LCKR_LCK12=GPIO_LCKR_LCK12_Msk
   GPIO_LCKR_LCK12_Msk=(0x1U << GPIO_LCKR_LCK12_Pos)
   GPIO_LCKR_LCK12_Pos=(12U)
   GPIO_LCKR_LCK13=GPIO_LCKR_LCK13_Msk
   GPIO_LCKR_LCK13_Msk=(0x1U << GPIO_LCKR_LCK13_Pos)
   GPIO_LCKR_LCK13_Pos=(13U)
   GPIO_LCKR_LCK14=GPIO_LCKR_LCK14_Msk
   GPIO_LCKR_LCK14_Msk=(0x1U << GPIO_LCKR_LCK14_Pos)
   GPIO_LCKR_LCK14_Pos=(14U)
   GPIO_LCKR_LCK15=GPIO_LCKR_LCK15_Msk
   GPIO_LCKR_LCK15_Msk=(0x1U << GPIO_LCKR_LCK15_Pos)
   GPIO_LCKR_LCK15_Pos=(15U)
   GPIO_LCKR_LCK1=GPIO_LCKR_LCK1_Msk
   GPIO_LCKR_LCK1_Msk=(0x1U << GPIO_LCKR_LCK1_Pos)
   GPIO_LCKR_LCK1_Pos=(1U)
   GPIO_LCKR_LCK2=GPIO_LCKR_LCK2_Msk
   GPIO_LCKR_LCK2_Msk=(0x1U << GPIO_LCKR_LCK2_Pos)
   GPIO_LCKR_LCK2_Pos=(2U)
   GPIO_LCKR_LCK3=GPIO_LCKR_LCK3_Msk
   GPIO_LCKR_LCK3_Msk=(0x1U << GPIO_LCKR_LCK3_Pos)
   GPIO_LCKR_LCK3_Pos=(3U)
   GPIO_LCKR_LCK4=GPIO_LCKR_LCK4_Msk
   GPIO_LCKR_LCK4_Msk=(0x1U << GPIO_LCKR_LCK4_Pos)
   GPIO_LCKR_LCK4_Pos=(4U)
   GPIO_LCKR_LCK5=GPIO_LCKR_LCK5_Msk
   GPIO_LCKR_LCK5_Msk=(0x1U << GPIO_LCKR_LCK5_Pos)
   GPIO_LCKR_LCK5_Pos=(5U)
   GPIO_LCKR_LCK6=GPIO_LCKR_LCK6_Msk
   GPIO_LCKR_LCK6_Msk=(0x1U << GPIO_LCKR_LCK6_Pos)
   GPIO_LCKR_LCK6_Pos=(6U)
   GPIO_LCKR_LCK7=GPIO_LCKR_LCK7_Msk
   GPIO_LCKR_LCK7_Msk=(0x1U << GPIO_LCKR_LCK7_Pos)
   GPIO_LCKR_LCK7_Pos=(7U)
   GPIO_LCKR_LCK8=GPIO_LCKR_LCK8_Msk
   GPIO_LCKR_LCK8_Msk=(0x1U << GPIO_LCKR_LCK8_Pos)
   GPIO_LCKR_LCK8_Pos=(8U)
   GPIO_LCKR_LCK9=GPIO_LCKR_LCK9_Msk
   GPIO_LCKR_LCK9_Msk=(0x1U << GPIO_LCKR_LCK9_Pos)
   GPIO_LCKR_LCK9_Pos=(9U)
   GPIO_LCKR_LCKK=GPIO_LCKR_LCKK_Msk
   GPIO_LCKR_LCKK_Msk=(0x1U << GPIO_LCKR_LCKK_Pos)
   GPIO_LCKR_LCKK_Pos=(16U)
   GPIO_MODE_AF_INPUT=GPIO_MODE_INPUT
   GPIO_MODE_AF_OD=0x00000012U
   GPIO_MODE_AF_PP=0x00000002U
   GPIO_MODE_ANALOG=0x00000003U
   GPIO_MODE_EVT_FALLING=0x10220000U
   GPIO_MODE_EVT_RISING=0x10120000U
   GPIO_MODE_EVT_RISING_FALLING=0x10320000U
   GPIO_MODE_INPUT=0x00000000U
   GPIO_MODE_IT_FALLING=0x10210000U
   GPIO_MODE_IT_RISING=0x10110000U
   GPIO_MODE_IT_RISING_FALLING=0x10310000U
   GPIO_MODE_OUTPUT_OD=0x00000011U
   GPIO_MODE_OUTPUT_PP=0x00000001U
   GPIO_NOPULL=0x00000000U
   GPIO_ODR_ODR0=GPIO_ODR_ODR0_Msk
   GPIO_ODR_ODR0_Msk=(0x1U << GPIO_ODR_ODR0_Pos)
   GPIO_ODR_ODR0_Pos=(0U)
   GPIO_ODR_ODR10=GPIO_ODR_ODR10_Msk
   GPIO_ODR_ODR10_Msk=(0x1U << GPIO_ODR_ODR10_Pos)
   GPIO_ODR_ODR10_Pos=(10U)
   GPIO_ODR_ODR11=GPIO_ODR_ODR11_Msk
   GPIO_ODR_ODR11_Msk=(0x1U << GPIO_ODR_ODR11_Pos)
   GPIO_ODR_ODR11_Pos=(11U)
   GPIO_ODR_ODR12=GPIO_ODR_ODR12_Msk
   GPIO_ODR_ODR12_Msk=(0x1U << GPIO_ODR_ODR12_Pos)
   GPIO_ODR_ODR12_Pos=(12U)
   GPIO_ODR_ODR13=GPIO_ODR_ODR13_Msk
   GPIO_ODR_ODR13_Msk=(0x1U << GPIO_ODR_ODR13_Pos)
   GPIO_ODR_ODR13_Pos=(13U)
   GPIO_ODR_ODR14=GPIO_ODR_ODR14_Msk
   GPIO_ODR_ODR14_Msk=(0x1U << GPIO_ODR_ODR14_Pos)
   GPIO_ODR_ODR14_Pos=(14U)
   GPIO_ODR_ODR15=GPIO_ODR_ODR15_Msk
   GPIO_ODR_ODR15_Msk=(0x1U << GPIO_ODR_ODR15_Pos)
   GPIO_ODR_ODR15_Pos=(15U)
   GPIO_ODR_ODR1=GPIO_ODR_ODR1_Msk
   GPIO_ODR_ODR1_Msk=(0x1U << GPIO_ODR_ODR1_Pos)
   GPIO_ODR_ODR1_Pos=(1U)
   GPIO_ODR_ODR2=GPIO_ODR_ODR2_Msk
   GPIO_ODR_ODR2_Msk=(0x1U << GPIO_ODR_ODR2_Pos)
   GPIO_ODR_ODR2_Pos=(2U)
   GPIO_ODR_ODR3=GPIO_ODR_ODR3_Msk
   GPIO_ODR_ODR3_Msk=(0x1U << GPIO_ODR_ODR3_Pos)
   GPIO_ODR_ODR3_Pos=(3U)
   GPIO_ODR_ODR4=GPIO_ODR_ODR4_Msk
   GPIO_ODR_ODR4_Msk=(0x1U << GPIO_ODR_ODR4_Pos)
   GPIO_ODR_ODR4_Pos=(4U)
   GPIO_ODR_ODR5=GPIO_ODR_ODR5_Msk
   GPIO_ODR_ODR5_Msk=(0x1U << GPIO_ODR_ODR5_Pos)
   GPIO_ODR_ODR5_Pos=(5U)
   GPIO_ODR_ODR6=GPIO_ODR_ODR6_Msk
   GPIO_ODR_ODR6_Msk=(0x1U << GPIO_ODR_ODR6_Pos)
   GPIO_ODR_ODR6_Pos=(6U)
   GPIO_ODR_ODR7=GPIO_ODR_ODR7_Msk
   GPIO_ODR_ODR7_Msk=(0x1U << GPIO_ODR_ODR7_Pos)
   GPIO_ODR_ODR7_Pos=(7U)
   GPIO_ODR_ODR8=GPIO_ODR_ODR8_Msk
   GPIO_ODR_ODR8_Msk=(0x1U << GPIO_ODR_ODR8_Pos)
   GPIO_ODR_ODR8_Pos=(8U)
   GPIO_ODR_ODR9=GPIO_ODR_ODR9_Msk
   GPIO_ODR_ODR9_Msk=(0x1U << GPIO_ODR_ODR9_Pos)
   GPIO_ODR_ODR9_Pos=(9U)
   GPIO_PIN_0=((uint16_t)0x0001)
   GPIO_PIN_10=((uint16_t)0x0400)
   GPIO_PIN_11=((uint16_t)0x0800)
   GPIO_PIN_12=((uint16_t)0x1000)
   GPIO_PIN_13=((uint16_t)0x2000)
   GPIO_PIN_14=((uint16_t)0x4000)
   GPIO_PIN_15=((uint16_t)0x8000)
   GPIO_PIN_1=((uint16_t)0x0002)
   GPIO_PIN_2=((uint16_t)0x0004)
   GPIO_PIN_3=((uint16_t)0x0008)
   GPIO_PIN_4=((uint16_t)0x0010)
   GPIO_PIN_5=((uint16_t)0x0020)
   GPIO_PIN_6=((uint16_t)0x0040)
   GPIO_PIN_7=((uint16_t)0x0080)
   GPIO_PIN_8=((uint16_t)0x0100)
   GPIO_PIN_9=((uint16_t)0x0200)
   GPIO_PIN_All=((uint16_t)0xFFFF)
   GPIO_PIN_MASK=0x0000FFFFU
   GPIO_PIN_MASK_POS=8U
   GPIO_PIN_NB=16U
   GPIO_PULLDOWN=0x00000002U
   GPIO_PULLUP=0x00000001U
   GPIO_SPEED_FREQ_HIGH=(GPIO_CRL_MODE0)
   GPIO_SPEED_FREQ_LOW=(GPIO_CRL_MODE0_1)
   GPIO_SPEED_FREQ_MEDIUM=(GPIO_CRL_MODE0_0)
   HAL_CAN_ERROR_ACK=(0x00000020U)
   HAL_CAN_ERROR_BD=(0x00000080U)
   HAL_CAN_ERROR_BOF=(0x00000004U)
   HAL_CAN_ERROR_BR=(0x00000040U)
   HAL_CAN_ERROR_CRC=(0x00000100U)
   HAL_CAN_ERROR_EPV=(0x00000002U)
   HAL_CAN_ERROR_EWG=(0x00000001U)
   HAL_CAN_ERROR_FOR=(0x00000010U)
   HAL_CAN_ERROR_INTERNAL=(0x00800000U)
   HAL_CAN_ERROR_NONE=(0x00000000U)
   HAL_CAN_ERROR_NOT_INITIALIZED=(0x00040000U)
   HAL_CAN_ERROR_NOT_READY=(0x00080000U)
   HAL_CAN_ERROR_NOT_STARTED=(0x00100000U)
   HAL_CAN_ERROR_PARAM=(0x00200000U)
   HAL_CAN_ERROR_RX_FOV0=(0x00000200U)
   HAL_CAN_ERROR_RX_FOV1=(0x00000400U)
   HAL_CAN_ERROR_STF=(0x00000008U)
   HAL_CAN_ERROR_TIMEOUT=(0x00020000U)
   HAL_CAN_ERROR_TX_ALST0=(0x00000800U)
   HAL_CAN_ERROR_TX_ALST1=(0x00002000U)
   HAL_CAN_ERROR_TX_ALST2=(0x00008000U)
   HAL_CAN_ERROR_TX_TERR0=(0x00001000U)
   HAL_CAN_ERROR_TX_TERR1=(0x00004000U)
   HAL_CAN_ERROR_TX_TERR2=(0x00010000U)
   HAL_CAN_MODULE_ENABLED=
   HAL_CORTEX_MODULE_ENABLED=
   HAL_DMA_ERROR_NONE=0x00000000U
   HAL_DMA_ERROR_NOT_SUPPORTED=0x00000100U
   HAL_DMA_ERROR_NO_XFER=0x00000004U
   HAL_DMA_ERROR_TE=0x00000001U
   HAL_DMA_ERROR_TIMEOUT=0x00000020U
   HAL_DMA_MODULE_ENABLED=
   HAL_FLASH_ERROR_NONE=0x00U
   HAL_FLASH_ERROR_OPTV=0x04U
   HAL_FLASH_ERROR_PROG=0x01U
   HAL_FLASH_ERROR_WRP=0x02U
   HAL_FLASH_MODULE_ENABLED=
   HAL_GPIO_MODULE_ENABLED=
   HAL_IS_BIT_CLR(REG,BIT)=(((REG) & (BIT)) == 0U)
   HAL_IS_BIT_SET(REG,BIT)=(((REG) & (BIT)) != 0U)
   HAL_MAX_DELAY=0xFFFFFFFFU
   HAL_MODULE_ENABLED=
   HAL_PWR_MODULE_ENABLED=
   HAL_RCC_MODULE_ENABLED=
   HAL_TIM_MODULE_ENABLED=
   HAVE_INITFINI_ARRAY=1
   HSE_STARTUP_TIMEOUT=((uint32_t)100)
   HSE_TIMEOUT_VALUE=HSE_STARTUP_TIMEOUT
   HSE_VALUE=((uint32_t)8000000)
   HSI_TIMEOUT_VALUE=2U
   HSI_VALUE=((uint32_t)8000000)
   I2C1=((I2C_TypeDef *)I2C1_BASE)
   I2C1_BASE=(APB1PERIPH_BASE + 0x00005400U)
   I2C2=((I2C_TypeDef *)I2C2_BASE)
   I2C2_BASE=(APB1PERIPH_BASE + 0x5800)
   I2C_CCR_CCR=I2C_CCR_CCR_Msk
   I2C_CCR_CCR_Msk=(0xFFFU << I2C_CCR_CCR_Pos)
   I2C_CCR_CCR_Pos=(0U)
   I2C_CCR_DUTY=I2C_CCR_DUTY_Msk
   I2C_CCR_DUTY_Msk=(0x1U << I2C_CCR_DUTY_Pos)
   I2C_CCR_DUTY_Pos=(14U)
   I2C_CCR_FS=I2C_CCR_FS_Msk
   I2C_CCR_FS_Msk=(0x1U << I2C_CCR_FS_Pos)
   I2C_CCR_FS_Pos=(15U)
   I2C_CR1_ACK=I2C_CR1_ACK_Msk
   I2C_CR1_ACK_Msk=(0x1U << I2C_CR1_ACK_Pos)
   I2C_CR1_ACK_Pos=(10U)
   I2C_CR1_ALERT=I2C_CR1_ALERT_Msk
   I2C_CR1_ALERT_Msk=(0x1U << I2C_CR1_ALERT_Pos)
   I2C_CR1_ALERT_Pos=(13U)
   I2C_CR1_ENARP=I2C_CR1_ENARP_Msk
   I2C_CR1_ENARP_Msk=(0x1U << I2C_CR1_ENARP_Pos)
   I2C_CR1_ENARP_Pos=(4U)
   I2C_CR1_ENGC=I2C_CR1_ENGC_Msk
   I2C_CR1_ENGC_Msk=(0x1U << I2C_CR1_ENGC_Pos)
   I2C_CR1_ENGC_Pos=(6U)
   I2C_CR1_ENPEC=I2C_CR1_ENPEC_Msk
   I2C_CR1_ENPEC_Msk=(0x1U << I2C_CR1_ENPEC_Pos)
   I2C_CR1_ENPEC_Pos=(5U)
   I2C_CR1_NOSTRETCH=I2C_CR1_NOSTRETCH_Msk
   I2C_CR1_NOSTRETCH_Msk=(0x1U << I2C_CR1_NOSTRETCH_Pos)
   I2C_CR1_NOSTRETCH_Pos=(7U)
   I2C_CR1_PE=I2C_CR1_PE_Msk
   I2C_CR1_PEC=I2C_CR1_PEC_Msk
   I2C_CR1_PEC_Msk=(0x1U << I2C_CR1_PEC_Pos)
   I2C_CR1_PEC_Pos=(12U)
   I2C_CR1_PE_Msk=(0x1U << I2C_CR1_PE_Pos)
   I2C_CR1_PE_Pos=(0U)
   I2C_CR1_POS=I2C_CR1_POS_Msk
   I2C_CR1_POS_Msk=(0x1U << I2C_CR1_POS_Pos)
   I2C_CR1_POS_Pos=(11U)
   I2C_CR1_SMBTYPE=I2C_CR1_SMBTYPE_Msk
   I2C_CR1_SMBTYPE_Msk=(0x1U << I2C_CR1_SMBTYPE_Pos)
   I2C_CR1_SMBTYPE_Pos=(3U)
   I2C_CR1_SMBUS=I2C_CR1_SMBUS_Msk
   I2C_CR1_SMBUS_Msk=(0x1U << I2C_CR1_SMBUS_Pos)
   I2C_CR1_SMBUS_Pos=(1U)
   I2C_CR1_START=I2C_CR1_START_Msk
   I2C_CR1_START_Msk=(0x1U << I2C_CR1_START_Pos)
   I2C_CR1_START_Pos=(8U)
   I2C_CR1_STOP=I2C_CR1_STOP_Msk
   I2C_CR1_STOP_Msk=(0x1U << I2C_CR1_STOP_Pos)
   I2C_CR1_STOP_Pos=(9U)
   I2C_CR1_SWRST=I2C_CR1_SWRST_Msk
   I2C_CR1_SWRST_Msk=(0x1U << I2C_CR1_SWRST_Pos)
   I2C_CR1_SWRST_Pos=(15U)
   I2C_CR2_DMAEN=I2C_CR2_DMAEN_Msk
   I2C_CR2_DMAEN_Msk=(0x1U << I2C_CR2_DMAEN_Pos)
   I2C_CR2_DMAEN_Pos=(11U)
   I2C_CR2_FREQ=I2C_CR2_FREQ_Msk
   I2C_CR2_FREQ_0=(0x01U << I2C_CR2_FREQ_Pos)
   I2C_CR2_FREQ_1=(0x02U << I2C_CR2_FREQ_Pos)
   I2C_CR2_FREQ_2=(0x04U << I2C_CR2_FREQ_Pos)
   I2C_CR2_FREQ_3=(0x08U << I2C_CR2_FREQ_Pos)
   I2C_CR2_FREQ_4=(0x10U << I2C_CR2_FREQ_Pos)
   I2C_CR2_FREQ_5=(0x20U << I2C_CR2_FREQ_Pos)
   I2C_CR2_FREQ_Msk=(0x3FU << I2C_CR2_FREQ_Pos)
   I2C_CR2_FREQ_Pos=(0U)
   I2C_CR2_ITBUFEN=I2C_CR2_ITBUFEN_Msk
   I2C_CR2_ITBUFEN_Msk=(0x1U << I2C_CR2_ITBUFEN_Pos)
   I2C_CR2_ITBUFEN_Pos=(10U)
   I2C_CR2_ITERREN=I2C_CR2_ITERREN_Msk
   I2C_CR2_ITERREN_Msk=(0x1U << I2C_CR2_ITERREN_Pos)
   I2C_CR2_ITERREN_Pos=(8U)
   I2C_CR2_ITEVTEN=I2C_CR2_ITEVTEN_Msk
   I2C_CR2_ITEVTEN_Msk=(0x1U << I2C_CR2_ITEVTEN_Pos)
   I2C_CR2_ITEVTEN_Pos=(9U)
   I2C_CR2_LAST=I2C_CR2_LAST_Msk
   I2C_CR2_LAST_Msk=(0x1U << I2C_CR2_LAST_Pos)
   I2C_CR2_LAST_Pos=(12U)
   I2C_DR_DR=I2C_DR_DR_Msk
   I2C_DR_DR_Msk=(0xFFU << I2C_DR_DR_Pos)
   I2C_DR_DR_Pos=(0U)
   I2C_OAR1_ADD0=I2C_OAR1_ADD0_Msk
   I2C_OAR1_ADD0_Msk=(0x1U << I2C_OAR1_ADD0_Pos)
   I2C_OAR1_ADD0_Pos=(0U)
   I2C_OAR1_ADD1=I2C_OAR1_ADD1_Msk
   I2C_OAR1_ADD1_7=0x000000FEU
   I2C_OAR1_ADD1_Msk=(0x1U << I2C_OAR1_ADD1_Pos)
   I2C_OAR1_ADD1_Pos=(1U)
   I2C_OAR1_ADD2=I2C_OAR1_ADD2_Msk
   I2C_OAR1_ADD2_Msk=(0x1U << I2C_OAR1_ADD2_Pos)
   I2C_OAR1_ADD2_Pos=(2U)
   I2C_OAR1_ADD3=I2C_OAR1_ADD3_Msk
   I2C_OAR1_ADD3_Msk=(0x1U << I2C_OAR1_ADD3_Pos)
   I2C_OAR1_ADD3_Pos=(3U)
   I2C_OAR1_ADD4=I2C_OAR1_ADD4_Msk
   I2C_OAR1_ADD4_Msk=(0x1U << I2C_OAR1_ADD4_Pos)
   I2C_OAR1_ADD4_Pos=(4U)
   I2C_OAR1_ADD5=I2C_OAR1_ADD5_Msk
   I2C_OAR1_ADD5_Msk=(0x1U << I2C_OAR1_ADD5_Pos)
   I2C_OAR1_ADD5_Pos=(5U)
   I2C_OAR1_ADD6=I2C_OAR1_ADD6_Msk
   I2C_OAR1_ADD6_Msk=(0x1U << I2C_OAR1_ADD6_Pos)
   I2C_OAR1_ADD6_Pos=(6U)
   I2C_OAR1_ADD7=I2C_OAR1_ADD7_Msk
   I2C_OAR1_ADD7_Msk=(0x1U << I2C_OAR1_ADD7_Pos)
   I2C_OAR1_ADD7_Pos=(7U)
   I2C_OAR1_ADD8=I2C_OAR1_ADD8_Msk
   I2C_OAR1_ADD8_9=0x00000300U
   I2C_OAR1_ADD8_Msk=(0x1U << I2C_OAR1_ADD8_Pos)
   I2C_OAR1_ADD8_Pos=(8U)
   I2C_OAR1_ADD9=I2C_OAR1_ADD9_Msk
   I2C_OAR1_ADD9_Msk=(0x1U << I2C_OAR1_ADD9_Pos)
   I2C_OAR1_ADD9_Pos=(9U)
   I2C_OAR1_ADDMODE=I2C_OAR1_ADDMODE_Msk
   I2C_OAR1_ADDMODE_Msk=(0x1U << I2C_OAR1_ADDMODE_Pos)
   I2C_OAR1_ADDMODE_Pos=(15U)
   I2C_OAR2_ADD2=I2C_OAR2_ADD2_Msk
   I2C_OAR2_ADD2_Msk=(0x7FU << I2C_OAR2_ADD2_Pos)
   I2C_OAR2_ADD2_Pos=(1U)
   I2C_OAR2_ENDUAL=I2C_OAR2_ENDUAL_Msk
   I2C_OAR2_ENDUAL_Msk=(0x1U << I2C_OAR2_ENDUAL_Pos)
   I2C_OAR2_ENDUAL_Pos=(0U)
   I2C_SR1_ADD10=I2C_SR1_ADD10_Msk
   I2C_SR1_ADD10_Msk=(0x1U << I2C_SR1_ADD10_Pos)
   I2C_SR1_ADD10_Pos=(3U)
   I2C_SR1_ADDR=I2C_SR1_ADDR_Msk
   I2C_SR1_ADDR_Msk=(0x1U << I2C_SR1_ADDR_Pos)
   I2C_SR1_ADDR_Pos=(1U)
   I2C_SR1_AF=I2C_SR1_AF_Msk
   I2C_SR1_AF_Msk=(0x1U << I2C_SR1_AF_Pos)
   I2C_SR1_AF_Pos=(10U)
   I2C_SR1_ARLO=I2C_SR1_ARLO_Msk
   I2C_SR1_ARLO_Msk=(0x1U << I2C_SR1_ARLO_Pos)
   I2C_SR1_ARLO_Pos=(9U)
   I2C_SR1_BERR=I2C_SR1_BERR_Msk
   I2C_SR1_BERR_Msk=(0x1U << I2C_SR1_BERR_Pos)
   I2C_SR1_BERR_Pos=(8U)
   I2C_SR1_BTF=I2C_SR1_BTF_Msk
   I2C_SR1_BTF_Msk=(0x1U << I2C_SR1_BTF_Pos)
   I2C_SR1_BTF_Pos=(2U)
   I2C_SR1_OVR=I2C_SR1_OVR_Msk
   I2C_SR1_OVR_Msk=(0x1U << I2C_SR1_OVR_Pos)
   I2C_SR1_OVR_Pos=(11U)
   I2C_SR1_PECERR=I2C_SR1_PECERR_Msk
   I2C_SR1_PECERR_Msk=(0x1U << I2C_SR1_PECERR_Pos)
   I2C_SR1_PECERR_Pos=(12U)
   I2C_SR1_RXNE=I2C_SR1_RXNE_Msk
   I2C_SR1_RXNE_Msk=(0x1U << I2C_SR1_RXNE_Pos)
   I2C_SR1_RXNE_Pos=(6U)
   I2C_SR1_SB=I2C_SR1_SB_Msk
   I2C_SR1_SB_Msk=(0x1U << I2C_SR1_SB_Pos)
   I2C_SR1_SB_Pos=(0U)
   I2C_SR1_SMBALERT=I2C_SR1_SMBALERT_Msk
   I2C_SR1_SMBALERT_Msk=(0x1U << I2C_SR1_SMBALERT_Pos)
   I2C_SR1_SMBALERT_Pos=(15U)
   I2C_SR1_STOPF=I2C_SR1_STOPF_Msk
   I2C_SR1_STOPF_Msk=(0x1U << I2C_SR1_STOPF_Pos)
   I2C_SR1_STOPF_Pos=(4U)
   I2C_SR1_TIMEOUT=I2C_SR1_TIMEOUT_Msk
   I2C_SR1_TIMEOUT_Msk=(0x1U << I2C_SR1_TIMEOUT_Pos)
   I2C_SR1_TIMEOUT_Pos=(14U)
   I2C_SR1_TXE=I2C_SR1_TXE_Msk
   I2C_SR1_TXE_Msk=(0x1U << I2C_SR1_TXE_Pos)
   I2C_SR1_TXE_Pos=(7U)
   I2C_SR2_BUSY=I2C_SR2_BUSY_Msk
   I2C_SR2_BUSY_Msk=(0x1U << I2C_SR2_BUSY_Pos)
   I2C_SR2_BUSY_Pos=(1U)
   I2C_SR2_DUALF=I2C_SR2_DUALF_Msk
   I2C_SR2_DUALF_Msk=(0x1U << I2C_SR2_DUALF_Pos)
   I2C_SR2_DUALF_Pos=(7U)
   I2C_SR2_GENCALL=I2C_SR2_GENCALL_Msk
   I2C_SR2_GENCALL_Msk=(0x1U << I2C_SR2_GENCALL_Pos)
   I2C_SR2_GENCALL_Pos=(4U)
   I2C_SR2_MSL=I2C_SR2_MSL_Msk
   I2C_SR2_MSL_Msk=(0x1U << I2C_SR2_MSL_Pos)
   I2C_SR2_MSL_Pos=(0U)
   I2C_SR2_PEC=I2C_SR2_PEC_Msk
   I2C_SR2_PEC_Msk=(0xFFU << I2C_SR2_PEC_Pos)
   I2C_SR2_PEC_Pos=(8U)
   I2C_SR2_SMBDEFAULT=I2C_SR2_SMBDEFAULT_Msk
   I2C_SR2_SMBDEFAULT_Msk=(0x1U << I2C_SR2_SMBDEFAULT_Pos)
   I2C_SR2_SMBDEFAULT_Pos=(5U)
   I2C_SR2_SMBHOST=I2C_SR2_SMBHOST_Msk
   I2C_SR2_SMBHOST_Msk=(0x1U << I2C_SR2_SMBHOST_Pos)
   I2C_SR2_SMBHOST_Pos=(6U)
   I2C_SR2_TRA=I2C_SR2_TRA_Msk
   I2C_SR2_TRA_Msk=(0x1U << I2C_SR2_TRA_Pos)
   I2C_SR2_TRA_Pos=(2U)
   I2C_TRISE_TRISE=I2C_TRISE_TRISE_Msk
   I2C_TRISE_TRISE_Msk=(0x3FU << I2C_TRISE_TRISE_Pos)
   I2C_TRISE_TRISE_Pos=(0U)
   INT16_C(x)=__INT16_C(x)
   INT16_MAX=(__INT16_MAX__)
   INT16_MIN=(-__INT16_MAX__ - 1)
   INT32_C(x)=__INT32_C(x)
   INT32_MAX=(__INT32_MAX__)
   INT32_MIN=(-__INT32_MAX__ - 1)
   INT64_C(x)=__INT64_C(x)
   INT64_MAX=(__INT64_MAX__)
   INT64_MIN=(-__INT64_MAX__ - 1)
   INT8_C(x)=__INT8_C(x)
   INT8_MAX=(__INT8_MAX__)
   INT8_MIN=(-__INT8_MAX__ - 1)
   int=+2
   INTMAX_C(x)=__INTMAX_C(x)
   INTMAX_MAX=(__INTMAX_MAX__)
   INTMAX_MIN=(-INTMAX_MAX - 1)
   INTPTR_MAX=(__INTPTR_MAX__)
   INTPTR_MIN=(-__INTPTR_MAX__ - 1)
   INT_FAST16_MAX=(__INT_FAST16_MAX__)
   INT_FAST16_MIN=(-__INT_FAST16_MAX__ - 1)
   INT_FAST32_MAX=(__INT_FAST32_MAX__)
   INT_FAST32_MIN=(-__INT_FAST32_MAX__ - 1)
   INT_FAST64_MAX=(__INT_FAST64_MAX__)
   INT_FAST64_MIN=(-__INT_FAST64_MAX__ - 1)
   INT_FAST8_MAX=(__INT_FAST8_MAX__)
   INT_FAST8_MIN=(-__INT_FAST8_MAX__ - 1)
   INT_LEAST16_MAX=(__INT_LEAST16_MAX__)
   INT_LEAST16_MIN=(-__INT_LEAST16_MAX__ - 1)
   INT_LEAST32_MAX=(__INT_LEAST32_MAX__)
   INT_LEAST32_MIN=(-__INT_LEAST32_MAX__ - 1)
   INT_LEAST64_MAX=(__INT_LEAST64_MAX__)
   INT_LEAST64_MIN=(-__INT_LEAST64_MAX__ - 1)
   INT_LEAST8_MAX=(__INT_LEAST8_MAX__)
   INT_LEAST8_MIN=(-__INT_LEAST8_MAX__ - 1)
   IPSR_ISR_Msk=(0x1FFUL )
   IPSR_ISR_Pos=0U
   IS_ADC_ALL_INSTANCE(INSTANCE)=(((INSTANCE) == ADC1) || ((INSTANCE) == ADC2))
   IS_ADC_COMMON_INSTANCE(INSTANCE)=((INSTANCE) == ADC12_COMMON)
   IS_ADC_DMA_CAPABILITY_INSTANCE(INSTANCE)=((INSTANCE) == ADC1)
   IS_ADC_MULTIMODE_MASTER_INSTANCE(INSTANCE)=((INSTANCE) == ADC1)
   IS_AFIO_EVENTOUT_PIN(__PIN__)=(((__PIN__) == AFIO_EVENTOUT_PIN_0) || ((__PIN__) == AFIO_EVENTOUT_PIN_1) || ((__PIN__) == AFIO_EVENTOUT_PIN_2) || ((__PIN__) == AFIO_EVENTOUT_PIN_3) || ((__PIN__) == AFIO_EVENTOUT_PIN_4) || ((__PIN__) == AFIO_EVENTOUT_PIN_5) || ((__PIN__) == AFIO_EVENTOUT_PIN_6) || ((__PIN__) == AFIO_EVENTOUT_PIN_7) || ((__PIN__) == AFIO_EVENTOUT_PIN_8) || ((__PIN__) == AFIO_EVENTOUT_PIN_9) || ((__PIN__) == AFIO_EVENTOUT_PIN_10) || ((__PIN__) == AFIO_EVENTOUT_PIN_11) || ((__PIN__) == AFIO_EVENTOUT_PIN_12) || ((__PIN__) == AFIO_EVENTOUT_PIN_13) || ((__PIN__) == AFIO_EVENTOUT_PIN_14) || ((__PIN__) == AFIO_EVENTOUT_PIN_15))
   IS_AFIO_EVENTOUT_PORT(__PORT__)=(((__PORT__) == AFIO_EVENTOUT_PORT_A) || ((__PORT__) == AFIO_EVENTOUT_PORT_B) || ((__PORT__) == AFIO_EVENTOUT_PORT_C) || ((__PORT__) == AFIO_EVENTOUT_PORT_D) || ((__PORT__) == AFIO_EVENTOUT_PORT_E))
   IS_CAN_ALL_INSTANCE(INSTANCE)=((INSTANCE) == CAN1)
   IS_CAN_BS1(BS1)=(((BS1) == CAN_BS1_1TQ) || ((BS1) == CAN_BS1_2TQ) || ((BS1) == CAN_BS1_3TQ) || ((BS1) == CAN_BS1_4TQ) || ((BS1) == CAN_BS1_5TQ) || ((BS1) == CAN_BS1_6TQ) || ((BS1) == CAN_BS1_7TQ) || ((BS1) == CAN_BS1_8TQ) || ((BS1) == CAN_BS1_9TQ) || ((BS1) == CAN_BS1_10TQ)|| ((BS1) == CAN_BS1_11TQ)|| ((BS1) == CAN_BS1_12TQ)|| ((BS1) == CAN_BS1_13TQ)|| ((BS1) == CAN_BS1_14TQ)|| ((BS1) == CAN_BS1_15TQ)|| ((BS1) == CAN_BS1_16TQ))
   IS_CAN_BS2(BS2)=(((BS2) == CAN_BS2_1TQ) || ((BS2) == CAN_BS2_2TQ) || ((BS2) == CAN_BS2_3TQ) || ((BS2) == CAN_BS2_4TQ) || ((BS2) == CAN_BS2_5TQ) || ((BS2) == CAN_BS2_6TQ) || ((BS2) == CAN_BS2_7TQ) || ((BS2) == CAN_BS2_8TQ))
   IS_CAN_DLC(DLC)=((DLC) <= 8U)
   IS_CAN_EXTID(EXTID)=((EXTID) <= 0x1FFFFFFFU)
   IS_CAN_FILTER_ACTIVATION(ACTIVATION)=(((ACTIVATION) == CAN_FILTER_DISABLE) || ((ACTIVATION) == CAN_FILTER_ENABLE))
   IS_CAN_FILTER_BANK_SINGLE(BANK)=((BANK) <= 13U)
   IS_CAN_FILTER_FIFO(FIFO)=(((FIFO) == CAN_FILTER_FIFO0) || ((FIFO) == CAN_FILTER_FIFO1))
   IS_CAN_FILTER_ID_HALFWORD(HALFWORD)=((HALFWORD) <= 0xFFFFU)
   IS_CAN_FILTER_MODE(MODE)=(((MODE) == CAN_FILTERMODE_IDMASK) || ((MODE) == CAN_FILTERMODE_IDLIST))
   IS_CAN_FILTER_SCALE(SCALE)=(((SCALE) == CAN_FILTERSCALE_16BIT) || ((SCALE) == CAN_FILTERSCALE_32BIT))
   IS_CAN_IDTYPE(IDTYPE)=(((IDTYPE) == CAN_ID_STD) || ((IDTYPE) == CAN_ID_EXT))
   IS_CAN_IT(IT)=((IT) <= (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL | CAN_IT_RX_FIFO0_OVERRUN | CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_RX_FIFO1_FULL | CAN_IT_RX_FIFO1_OVERRUN | CAN_IT_WAKEUP | CAN_IT_SLEEP_ACK | CAN_IT_ERROR_WARNING | CAN_IT_ERROR_PASSIVE | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE | CAN_IT_ERROR))
   IS_CAN_MODE(MODE)=(((MODE) == CAN_MODE_NORMAL) || ((MODE) == CAN_MODE_LOOPBACK)|| ((MODE) == CAN_MODE_SILENT) || ((MODE) == CAN_MODE_SILENT_LOOPBACK))
   IS_CAN_PRESCALER(PRESCALER)=(((PRESCALER) >= 1U) && ((PRESCALER) <= 1024U))
   IS_CAN_RTR(RTR)=(((RTR) == CAN_RTR_DATA) || ((RTR) == CAN_RTR_REMOTE))
   IS_CAN_RX_FIFO(FIFO)=(((FIFO) == CAN_RX_FIFO0) || ((FIFO) == CAN_RX_FIFO1))
   IS_CAN_SJW(SJW)=(((SJW) == CAN_SJW_1TQ) || ((SJW) == CAN_SJW_2TQ) || ((SJW) == CAN_SJW_3TQ) || ((SJW) == CAN_SJW_4TQ))
   IS_CAN_STDID(STDID)=((STDID) <= 0x7FFU)
   IS_CAN_TX_MAILBOX(TRANSMITMAILBOX)=(((TRANSMITMAILBOX) == CAN_TX_MAILBOX0 ) || ((TRANSMITMAILBOX) == CAN_TX_MAILBOX1 ) || ((TRANSMITMAILBOX) == CAN_TX_MAILBOX2 ))
   IS_CAN_TX_MAILBOX_LIST(TRANSMITMAILBOX)=((TRANSMITMAILBOX) <= (CAN_TX_MAILBOX0 | CAN_TX_MAILBOX1 | CAN_TX_MAILBOX2))
   IS_CRC_ALL_INSTANCE(INSTANCE)=((INSTANCE) == CRC)
   IS_DMA_ALL_INSTANCE(INSTANCE)=(((INSTANCE) == DMA1_Channel1) || ((INSTANCE) == DMA1_Channel2) || ((INSTANCE) == DMA1_Channel3) || ((INSTANCE) == DMA1_Channel4) || ((INSTANCE) == DMA1_Channel5) || ((INSTANCE) == DMA1_Channel6) || ((INSTANCE) == DMA1_Channel7))
   IS_DMA_BUFFER_SIZE(SIZE)=(((SIZE) >= 0x1U) && ((SIZE) < 0x10000U))
   IS_DMA_DIRECTION(DIRECTION)=(((DIRECTION) == DMA_PERIPH_TO_MEMORY ) || ((DIRECTION) == DMA_MEMORY_TO_PERIPH) || ((DIRECTION) == DMA_MEMORY_TO_MEMORY))
   IS_DMA_MEMORY_DATA_SIZE(SIZE)=(((SIZE) == DMA_MDATAALIGN_BYTE) || ((SIZE) == DMA_MDATAALIGN_HALFWORD) || ((SIZE) == DMA_MDATAALIGN_WORD ))
   IS_DMA_MEMORY_INC_STATE(STATE)=(((STATE) == DMA_MINC_ENABLE) || ((STATE) == DMA_MINC_DISABLE))
   IS_DMA_MODE(MODE)=(((MODE) == DMA_NORMAL ) || ((MODE) == DMA_CIRCULAR))
   IS_DMA_PERIPHERAL_DATA_SIZE(SIZE)=(((SIZE) == DMA_PDATAALIGN_BYTE) || ((SIZE) == DMA_PDATAALIGN_HALFWORD) || ((SIZE) == DMA_PDATAALIGN_WORD))
   IS_DMA_PERIPHERAL_INC_STATE(STATE)=(((STATE) == DMA_PINC_ENABLE) || ((STATE) == DMA_PINC_DISABLE))
   IS_DMA_PRIORITY(PRIORITY)=(((PRIORITY) == DMA_PRIORITY_LOW ) || ((PRIORITY) == DMA_PRIORITY_MEDIUM) || ((PRIORITY) == DMA_PRIORITY_HIGH) || ((PRIORITY) == DMA_PRIORITY_VERY_HIGH))
   IS_FLASH_BANK(BANK)=(((BANK) == FLASH_BANK_1))
   IS_FLASH_LATENCY(__LATENCY__)=(((__LATENCY__) == FLASH_LATENCY_0) || ((__LATENCY__) == FLASH_LATENCY_1) || ((__LATENCY__) == FLASH_LATENCY_2))
   IS_FLASH_NB_PAGES(ADDRESS,NBPAGES)=(((*((uint16_t *)FLASH_SIZE_DATA_REGISTER)) == 0x80U) ? ((ADDRESS)+((NBPAGES)*FLASH_PAGE_SIZE)-1 <= 0x0801FFFFU) : (((*((uint16_t *)FLASH_SIZE_DATA_REGISTER)) == 0x40U) ? ((ADDRESS)+((NBPAGES)*FLASH_PAGE_SIZE)-1 <= 0x0800FFFFU) : (((*((uint16_t *)FLASH_SIZE_DATA_REGISTER)) == 0x20U) ? ((ADDRESS)+((NBPAGES)*FLASH_PAGE_SIZE)-1 <= 0x08007FFFU) : ((ADDRESS)+((NBPAGES)*FLASH_PAGE_SIZE)-1 <= 0x08003FFFU))))
   IS_FLASH_PROGRAM_ADDRESS(ADDRESS)=(((ADDRESS) >= FLASH_BASE) && (((*((uint16_t *)FLASH_SIZE_DATA_REGISTER)) == 0x80U) ? ((ADDRESS) <= FLASH_BANK1_END) : (((*((uint16_t *)FLASH_SIZE_DATA_REGISTER)) == 0x40U) ? ((ADDRESS) <= 0x0800FFFF) : (((*((uint16_t *)FLASH_SIZE_DATA_REGISTER)) == 0x20U) ? ((ADDRESS) <= 0x08007FFF) : ((ADDRESS) <= 0x08003FFFU)))))
   IS_FLASH_TYPEERASE(VALUE)=(((VALUE) == FLASH_TYPEERASE_PAGES) || ((VALUE) == FLASH_TYPEERASE_MASSERASE))
   IS_FLASH_TYPEPROGRAM(VALUE)=(((VALUE) == FLASH_TYPEPROGRAM_HALFWORD) || ((VALUE) == FLASH_TYPEPROGRAM_WORD) || ((VALUE) == FLASH_TYPEPROGRAM_DOUBLEWORD))
   IS_FUNCTIONAL_STATE(STATE)=(((STATE) == DISABLE) || ((STATE) == ENABLE))
   IS_GPIO_AF_INSTANCE(INSTANCE)=IS_GPIO_ALL_INSTANCE(INSTANCE)
   IS_GPIO_ALL_INSTANCE(INSTANCE)=(((INSTANCE) == GPIOA) || ((INSTANCE) == GPIOB) || ((INSTANCE) == GPIOC) || ((INSTANCE) == GPIOD) || ((INSTANCE) == GPIOE))
   IS_GPIO_LOCK_INSTANCE(INSTANCE)=IS_GPIO_ALL_INSTANCE(INSTANCE)
   IS_GPIO_MODE(MODE)=(((MODE) == GPIO_MODE_INPUT) || ((MODE) == GPIO_MODE_OUTPUT_PP) || ((MODE) == GPIO_MODE_OUTPUT_OD) || ((MODE) == GPIO_MODE_AF_PP) || ((MODE) == GPIO_MODE_AF_OD) || ((MODE) == GPIO_MODE_IT_RISING) || ((MODE) == GPIO_MODE_IT_FALLING) || ((MODE) == GPIO_MODE_IT_RISING_FALLING) || ((MODE) == GPIO_MODE_EVT_RISING) || ((MODE) == GPIO_MODE_EVT_FALLING) || ((MODE) == GPIO_MODE_EVT_RISING_FALLING) || ((MODE) == GPIO_MODE_ANALOG))
   IS_GPIO_PIN(PIN)=((((PIN) & GPIO_PIN_MASK ) != 0x00U) && (((PIN) & ~GPIO_PIN_MASK) == 0x00U))
   IS_GPIO_PIN_ACTION(ACTION)=(((ACTION) == GPIO_PIN_RESET) || ((ACTION) == GPIO_PIN_SET))
   IS_GPIO_PULL(PULL)=(((PULL) == GPIO_NOPULL) || ((PULL) == GPIO_PULLUP) || ((PULL) == GPIO_PULLDOWN))
   IS_GPIO_SPEED(SPEED)=(((SPEED) == GPIO_SPEED_FREQ_LOW) || ((SPEED) == GPIO_SPEED_FREQ_MEDIUM) || ((SPEED) == GPIO_SPEED_FREQ_HIGH))
   IS_I2C_ALL_INSTANCE(INSTANCE)=(((INSTANCE) == I2C1) || ((INSTANCE) == I2C2))
   IS_IRDA_INSTANCE(INSTANCE)=(((INSTANCE) == USART1) || ((INSTANCE) == USART2) || ((INSTANCE) == USART3))
   IS_IWDG_ALL_INSTANCE(INSTANCE)=((INSTANCE) == IWDG)
   IS_NVIC_DEVICE_IRQ(IRQ)=((IRQ) >= (IRQn_Type)0x00U)
   IS_NVIC_PREEMPTION_PRIORITY(PRIORITY)=((PRIORITY) < 0x10U)
   IS_NVIC_PRIORITY_GROUP(GROUP)=(((GROUP) == NVIC_PRIORITYGROUP_0) || ((GROUP) == NVIC_PRIORITYGROUP_1) || ((GROUP) == NVIC_PRIORITYGROUP_2) || ((GROUP) == NVIC_PRIORITYGROUP_3) || ((GROUP) == NVIC_PRIORITYGROUP_4))
   IS_NVIC_SUB_PRIORITY(PRIORITY)=((PRIORITY) < 0x10U)
   IS_OB_DATA_ADDRESS(ADDRESS)=(((ADDRESS) == OB_DATA_ADDRESS_DATA0) || ((ADDRESS) == OB_DATA_ADDRESS_DATA1))
   IS_OB_IWDG_SOURCE(SOURCE)=(((SOURCE) == OB_IWDG_SW) || ((SOURCE) == OB_IWDG_HW))
   IS_OB_RDP_LEVEL(LEVEL)=(((LEVEL) == OB_RDP_LEVEL_0) || ((LEVEL) == OB_RDP_LEVEL_1))
   IS_OB_STDBY_SOURCE(SOURCE)=(((SOURCE) == OB_STDBY_NO_RST) || ((SOURCE) == OB_STDBY_RST))
   IS_OB_STOP_SOURCE(SOURCE)=(((SOURCE) == OB_STOP_NO_RST) || ((SOURCE) == OB_STOP_RST))
   IS_OB_WRP(PAGE)=(((PAGE) != 0x0000000U))
   IS_OPTIONBYTE(VALUE)=(((VALUE) <= (OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_DATA)))
   IS_PWR_PVD_LEVEL(LEVEL)=(((LEVEL) == PWR_PVDLEVEL_0) || ((LEVEL) == PWR_PVDLEVEL_1)|| ((LEVEL) == PWR_PVDLEVEL_2) || ((LEVEL) == PWR_PVDLEVEL_3)|| ((LEVEL) == PWR_PVDLEVEL_4) || ((LEVEL) == PWR_PVDLEVEL_5)|| ((LEVEL) == PWR_PVDLEVEL_6) || ((LEVEL) == PWR_PVDLEVEL_7))
   IS_PWR_PVD_MODE(MODE)=(((MODE) == PWR_PVD_MODE_IT_RISING)|| ((MODE) == PWR_PVD_MODE_IT_FALLING) || ((MODE) == PWR_PVD_MODE_IT_RISING_FALLING) || ((MODE) == PWR_PVD_MODE_EVENT_RISING) || ((MODE) == PWR_PVD_MODE_EVENT_FALLING) || ((MODE) == PWR_PVD_MODE_EVENT_RISING_FALLING) || ((MODE) == PWR_PVD_MODE_NORMAL))
   IS_PWR_REGULATOR(REGULATOR)=(((REGULATOR) == PWR_MAINREGULATOR_ON) || ((REGULATOR) == PWR_LOWPOWERREGULATOR_ON))
   IS_PWR_SLEEP_ENTRY(ENTRY)=(((ENTRY) == PWR_SLEEPENTRY_WFI) || ((ENTRY) == PWR_SLEEPENTRY_WFE))
   IS_PWR_STOP_ENTRY(ENTRY)=(((ENTRY) == PWR_STOPENTRY_WFI) || ((ENTRY) == PWR_STOPENTRY_WFE))
   IS_PWR_WAKEUP_PIN(PIN)=(((PIN) == PWR_WAKEUP_PIN1))
   IS_RCC_ADCPLLCLK_DIV(__ADCCLK__)=(((__ADCCLK__) == RCC_ADCPCLK2_DIV2) || ((__ADCCLK__) == RCC_ADCPCLK2_DIV4) || ((__ADCCLK__) == RCC_ADCPCLK2_DIV6) || ((__ADCCLK__) == RCC_ADCPCLK2_DIV8))
   IS_RCC_CALIBRATION_VALUE(__VALUE__)=((__VALUE__) <= 0x1FU)
   IS_RCC_CLOCKTYPE(CLK)=((((CLK) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK) || (((CLK) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) || (((CLK) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) || (((CLK) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2))
   IS_RCC_HCLK(__HCLK__)=(((__HCLK__) == RCC_SYSCLK_DIV1) || ((__HCLK__) == RCC_SYSCLK_DIV2) || ((__HCLK__) == RCC_SYSCLK_DIV4) || ((__HCLK__) == RCC_SYSCLK_DIV8) || ((__HCLK__) == RCC_SYSCLK_DIV16) || ((__HCLK__) == RCC_SYSCLK_DIV64) || ((__HCLK__) == RCC_SYSCLK_DIV128) || ((__HCLK__) == RCC_SYSCLK_DIV256) || ((__HCLK__) == RCC_SYSCLK_DIV512))
   IS_RCC_HSE(__HSE__)=(((__HSE__) == RCC_HSE_OFF) || ((__HSE__) == RCC_HSE_ON) || ((__HSE__) == RCC_HSE_BYPASS))
   IS_RCC_HSE_PREDIV(__DIV__)=(((__DIV__) == RCC_HSE_PREDIV_DIV1) || ((__DIV__) == RCC_HSE_PREDIV_DIV2))
   IS_RCC_HSI(__HSI__)=(((__HSI__) == RCC_HSI_OFF) || ((__HSI__) == RCC_HSI_ON))
   IS_RCC_LSE(__LSE__)=(((__LSE__) == RCC_LSE_OFF) || ((__LSE__) == RCC_LSE_ON) || ((__LSE__) == RCC_LSE_BYPASS))
   IS_RCC_LSI(__LSI__)=(((__LSI__) == RCC_LSI_OFF) || ((__LSI__) == RCC_LSI_ON))
   IS_RCC_MCO(__MCO__)=((__MCO__) == RCC_MCO)
   IS_RCC_MCO1SOURCE(__SOURCE__)=(((__SOURCE__) == RCC_MCO1SOURCE_SYSCLK) || ((__SOURCE__) == RCC_MCO1SOURCE_HSI) || ((__SOURCE__) == RCC_MCO1SOURCE_HSE) || ((__SOURCE__) == RCC_MCO1SOURCE_PLLCLK) || ((__SOURCE__) == RCC_MCO1SOURCE_NOCLOCK))
   IS_RCC_MCODIV(__DIV__)=(((__DIV__) == RCC_MCODIV_1))
   IS_RCC_OSCILLATORTYPE(__OSCILLATOR__)=(((__OSCILLATOR__) == RCC_OSCILLATORTYPE_NONE) || (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE) || (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI) || (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI) || (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE))
   IS_RCC_PCLK(__PCLK__)=(((__PCLK__) == RCC_HCLK_DIV1) || ((__PCLK__) == RCC_HCLK_DIV2) || ((__PCLK__) == RCC_HCLK_DIV4) || ((__PCLK__) == RCC_HCLK_DIV8) || ((__PCLK__) == RCC_HCLK_DIV16))
   IS_RCC_PERIPHCLOCK(__SELECTION__)=((((__SELECTION__) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) || (((__SELECTION__) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC) || (((__SELECTION__) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB))
   IS_RCC_PLL(__PLL__)=(((__PLL__) == RCC_PLL_NONE) || ((__PLL__) == RCC_PLL_OFF) || ((__PLL__) == RCC_PLL_ON))
   IS_RCC_PLLSOURCE(__SOURCE__)=(((__SOURCE__) == RCC_PLLSOURCE_HSI_DIV2) || ((__SOURCE__) == RCC_PLLSOURCE_HSE))
   IS_RCC_PLL_MUL(__MUL__)=(((__MUL__) == RCC_PLL_MUL2) || ((__MUL__) == RCC_PLL_MUL3) || ((__MUL__) == RCC_PLL_MUL4) || ((__MUL__) == RCC_PLL_MUL5) || ((__MUL__) == RCC_PLL_MUL6) || ((__MUL__) == RCC_PLL_MUL7) || ((__MUL__) == RCC_PLL_MUL8) || ((__MUL__) == RCC_PLL_MUL9) || ((__MUL__) == RCC_PLL_MUL10) || ((__MUL__) == RCC_PLL_MUL11) || ((__MUL__) == RCC_PLL_MUL12) || ((__MUL__) == RCC_PLL_MUL13) || ((__MUL__) == RCC_PLL_MUL14) || ((__MUL__) == RCC_PLL_MUL15) || ((__MUL__) == RCC_PLL_MUL16))
   IS_RCC_RTCCLKSOURCE(__SOURCE__)=(((__SOURCE__) == RCC_RTCCLKSOURCE_NO_CLK) || ((__SOURCE__) == RCC_RTCCLKSOURCE_LSE) || ((__SOURCE__) == RCC_RTCCLKSOURCE_LSI) || ((__SOURCE__) == RCC_RTCCLKSOURCE_HSE_DIV128))
   IS_RCC_SYSCLKSOURCE(__SOURCE__)=(((__SOURCE__) == RCC_SYSCLKSOURCE_HSI) || ((__SOURCE__) == RCC_SYSCLKSOURCE_HSE) || ((__SOURCE__) == RCC_SYSCLKSOURCE_PLLCLK))
   IS_RCC_SYSCLKSOURCE_STATUS(__SOURCE__)=(((__SOURCE__) == RCC_SYSCLKSOURCE_STATUS_HSI) || ((__SOURCE__) == RCC_SYSCLKSOURCE_STATUS_HSE) || ((__SOURCE__) == RCC_SYSCLKSOURCE_STATUS_PLLCLK))
   IS_RCC_USBPLLCLK_DIV(__USBCLK__)=(((__USBCLK__) == RCC_USBCLKSOURCE_PLL) || ((__USBCLK__) == RCC_USBCLKSOURCE_PLL_DIV1_5))
   IS_RTC_ALL_INSTANCE(INSTANCE)=((INSTANCE) == RTC)
   IS_SMARTCARD_INSTANCE(INSTANCE)=(((INSTANCE) == USART1) || ((INSTANCE) == USART2) || ((INSTANCE) == USART3))
   IS_SMBUS_ALL_INSTANCE=IS_I2C_ALL_INSTANCE
   IS_SPI_ALL_INSTANCE(INSTANCE)=(((INSTANCE) == SPI1) || ((INSTANCE) == SPI2))
   IS_SYSTICK_CLK_SOURCE(SOURCE)=(((SOURCE) == SYSTICK_CLKSOURCE_HCLK) || ((SOURCE) == SYSTICK_CLKSOURCE_HCLK_DIV8))
   IS_TICKFREQ(FREQ)=(((FREQ) == HAL_TICK_FREQ_10HZ) || ((FREQ) == HAL_TICK_FREQ_100HZ) || ((FREQ) == HAL_TICK_FREQ_1KHZ))
   IS_TIM_32B_COUNTER_INSTANCE(INSTANCE)=0U
   IS_TIM_ADVANCED_INSTANCE(INSTANCE)=((INSTANCE) == TIM1)
   IS_TIM_AUTOMATIC_OUTPUT_STATE(STATE)=(((STATE) == TIM_AUTOMATICOUTPUT_ENABLE) || ((STATE) == TIM_AUTOMATICOUTPUT_DISABLE))
   IS_TIM_AUTORELOAD_PRELOAD(PRELOAD)=(((PRELOAD) == TIM_AUTORELOAD_PRELOAD_DISABLE) || ((PRELOAD) == TIM_AUTORELOAD_PRELOAD_ENABLE))
   IS_TIM_BREAK_INSTANCE(INSTANCE)=((INSTANCE) == TIM1)
   IS_TIM_BREAK_POLARITY(POLARITY)=(((POLARITY) == TIM_BREAKPOLARITY_LOW) || ((POLARITY) == TIM_BREAKPOLARITY_HIGH))
   IS_TIM_BREAK_STATE(STATE)=(((STATE) == TIM_BREAK_ENABLE) || ((STATE) == TIM_BREAK_DISABLE))
   IS_TIM_CC1_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4))
   IS_TIM_CC2_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4))
   IS_TIM_CC3_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4))
   IS_TIM_CC4_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4))
   IS_TIM_CCXN_INSTANCE(INSTANCE,CHANNEL)=(((INSTANCE) == TIM1) && (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2) || ((CHANNEL) == TIM_CHANNEL_3)))
   IS_TIM_CCX_INSTANCE(INSTANCE,CHANNEL)=((((INSTANCE) == TIM1) && (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2) || ((CHANNEL) == TIM_CHANNEL_3) || ((CHANNEL) == TIM_CHANNEL_4))) || (((INSTANCE) == TIM2) && (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2) || ((CHANNEL) == TIM_CHANNEL_3) || ((CHANNEL) == TIM_CHANNEL_4))) || (((INSTANCE) == TIM3) && (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2) || ((CHANNEL) == TIM_CHANNEL_3) || ((CHANNEL) == TIM_CHANNEL_4))) || (((INSTANCE) == TIM4) && (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2) || ((CHANNEL) == TIM_CHANNEL_3) || ((CHANNEL) == TIM_CHANNEL_4))))
   IS_TIM_CHANNELS(CHANNEL)=(((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2) || ((CHANNEL) == TIM_CHANNEL_3) || ((CHANNEL) == TIM_CHANNEL_4) || ((CHANNEL) == TIM_CHANNEL_ALL))
   IS_TIM_CLEARINPUT_FILTER(ICFILTER)=((ICFILTER) <= 0x0FU)
   IS_TIM_CLEARINPUT_POLARITY(POLARITY)=(((POLARITY) == TIM_CLEARINPUTPOLARITY_INVERTED) || ((POLARITY) == TIM_CLEARINPUTPOLARITY_NONINVERTED))
   IS_TIM_CLEARINPUT_PRESCALER(PRESCALER)=(((PRESCALER) == TIM_CLEARINPUTPRESCALER_DIV1) || ((PRESCALER) == TIM_CLEARINPUTPRESCALER_DIV2) || ((PRESCALER) == TIM_CLEARINPUTPRESCALER_DIV4) || ((PRESCALER) == TIM_CLEARINPUTPRESCALER_DIV8))
   IS_TIM_CLEARINPUT_SOURCE(SOURCE)=(((SOURCE) == TIM_CLEARINPUTSOURCE_ETR) || ((SOURCE) == TIM_CLEARINPUTSOURCE_NONE))
   IS_TIM_CLOCKDIVISION_DIV(DIV)=(((DIV) == TIM_CLOCKDIVISION_DIV1) || ((DIV) == TIM_CLOCKDIVISION_DIV2) || ((DIV) == TIM_CLOCKDIVISION_DIV4))
   IS_TIM_CLOCKFILTER(ICFILTER)=((ICFILTER) <= 0x0FU)
   IS_TIM_CLOCKPOLARITY(POLARITY)=(((POLARITY) == TIM_CLOCKPOLARITY_INVERTED) || ((POLARITY) == TIM_CLOCKPOLARITY_NONINVERTED) || ((POLARITY) == TIM_CLOCKPOLARITY_RISING) || ((POLARITY) == TIM_CLOCKPOLARITY_FALLING) || ((POLARITY) == TIM_CLOCKPOLARITY_BOTHEDGE))
   IS_TIM_CLOCKPRESCALER(PRESCALER)=(((PRESCALER) == TIM_CLOCKPRESCALER_DIV1) || ((PRESCALER) == TIM_CLOCKPRESCALER_DIV2) || ((PRESCALER) == TIM_CLOCKPRESCALER_DIV4) || ((PRESCALER) == TIM_CLOCKPRESCALER_DIV8))
   IS_TIM_CLOCKSOURCE(CLOCK)=(((CLOCK) == TIM_CLOCKSOURCE_INTERNAL) || ((CLOCK) == TIM_CLOCKSOURCE_ETRMODE2) || ((CLOCK) == TIM_CLOCKSOURCE_ITR0) || ((CLOCK) == TIM_CLOCKSOURCE_ITR1) || ((CLOCK) == TIM_CLOCKSOURCE_ITR2) || ((CLOCK) == TIM_CLOCKSOURCE_ITR3) || ((CLOCK) == TIM_CLOCKSOURCE_TI1ED) || ((CLOCK) == TIM_CLOCKSOURCE_TI1) || ((CLOCK) == TIM_CLOCKSOURCE_TI2) || ((CLOCK) == TIM_CLOCKSOURCE_ETRMODE1))
   IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4))
   IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4))
   IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4))
   IS_TIM_CLOCKSOURCE_TIX_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4))
   IS_TIM_CLOCK_DIVISION_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4))
   IS_TIM_COMMUTATION_EVENT_INSTANCE(INSTANCE)=((INSTANCE) == TIM1)
   IS_TIM_COMPLEMENTARY_CHANNELS(CHANNEL)=(((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2) || ((CHANNEL) == TIM_CHANNEL_3))
   IS_TIM_COUNTER_MODE(MODE)=(((MODE) == TIM_COUNTERMODE_UP) || ((MODE) == TIM_COUNTERMODE_DOWN) || ((MODE) == TIM_COUNTERMODE_CENTERALIGNED1) || ((MODE) == TIM_COUNTERMODE_CENTERALIGNED2) || ((MODE) == TIM_COUNTERMODE_CENTERALIGNED3))
   IS_TIM_COUNTER_MODE_SELECT_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4))
   IS_TIM_DEADTIME(DEADTIME)=((DEADTIME) <= 0xFFU)
   IS_TIM_DMABURST_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4))
   IS_TIM_DMA_BASE(BASE)=(((BASE) == TIM_DMABASE_CR1) || ((BASE) == TIM_DMABASE_CR2) || ((BASE) == TIM_DMABASE_SMCR) || ((BASE) == TIM_DMABASE_DIER) || ((BASE) == TIM_DMABASE_SR) || ((BASE) == TIM_DMABASE_EGR) || ((BASE) == TIM_DMABASE_CCMR1) || ((BASE) == TIM_DMABASE_CCMR2) || ((BASE) == TIM_DMABASE_CCER) || ((BASE) == TIM_DMABASE_CNT) || ((BASE) == TIM_DMABASE_PSC) || ((BASE) == TIM_DMABASE_ARR) || ((BASE) == TIM_DMABASE_RCR) || ((BASE) == TIM_DMABASE_CCR1) || ((BASE) == TIM_DMABASE_CCR2) || ((BASE) == TIM_DMABASE_CCR3) || ((BASE) == TIM_DMABASE_CCR4) || ((BASE) == TIM_DMABASE_BDTR) || ((BASE) == TIM_DMABASE_DCR))
   IS_TIM_DMA_CC_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4))
   IS_TIM_DMA_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4))
   IS_TIM_DMA_LENGTH(LENGTH)=(((LENGTH) == TIM_DMABURSTLENGTH_1TRANSFER) || ((LENGTH) == TIM_DMABURSTLENGTH_2TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_3TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_4TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_5TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_6TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_7TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_8TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_9TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_10TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_11TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_12TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_13TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_14TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_15TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_16TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_17TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_18TRANSFERS))
   IS_TIM_DMA_SOURCE(SOURCE)=((((SOURCE) & 0xFFFF80FFU) == 0x00000000U) && ((SOURCE) != 0x00000000U))
   IS_TIM_ENCODER_INTERFACE_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4))
   IS_TIM_ENCODER_MODE(MODE)=(((MODE) == TIM_ENCODERMODE_TI1) || ((MODE) == TIM_ENCODERMODE_TI2) || ((MODE) == TIM_ENCODERMODE_TI12))
   IS_TIM_ETR_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4))
   IS_TIM_EVENT_SOURCE(SOURCE)=((((SOURCE) & 0xFFFFFF00U) == 0x00000000U) && ((SOURCE) != 0x00000000U))
   IS_TIM_FAST_STATE(STATE)=(((STATE) == TIM_OCFAST_DISABLE) || ((STATE) == TIM_OCFAST_ENABLE))
   IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4))
   IS_TIM_IC_FILTER(ICFILTER)=((ICFILTER) <= 0x0FU)
   IS_TIM_IC_POLARITY(__POLARITY__)=(((__POLARITY__) == TIM_ICPOLARITY_RISING) || ((__POLARITY__) == TIM_ICPOLARITY_FALLING) || ((__POLARITY__) == TIM_ICPOLARITY_BOTHEDGE))
   IS_TIM_IC_PRESCALER(PRESCALER)=(((PRESCALER) == TIM_ICPSC_DIV1) || ((PRESCALER) == TIM_ICPSC_DIV2) || ((PRESCALER) == TIM_ICPSC_DIV4) || ((PRESCALER) == TIM_ICPSC_DIV8))
   IS_TIM_IC_SELECTION(SELECTION)=(((SELECTION) == TIM_ICSELECTION_DIRECTTI) || ((SELECTION) == TIM_ICSELECTION_INDIRECTTI) || ((SELECTION) == TIM_ICSELECTION_TRC))
   IS_TIM_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4))
   IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(SELECTION)=(((SELECTION) == TIM_TS_ITR0) || ((SELECTION) == TIM_TS_ITR1) || ((SELECTION) == TIM_TS_ITR2) || ((SELECTION) == TIM_TS_ITR3) || ((SELECTION) == TIM_TS_NONE))
   IS_TIM_LOCK_LEVEL(LEVEL)=(((LEVEL) == TIM_LOCKLEVEL_OFF) || ((LEVEL) == TIM_LOCKLEVEL_1) || ((LEVEL) == TIM_LOCKLEVEL_2) || ((LEVEL) == TIM_LOCKLEVEL_3))
   IS_TIM_MASTER_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4))
   IS_TIM_MSM_STATE(STATE)=(((STATE) == TIM_MASTERSLAVEMODE_ENABLE) || ((STATE) == TIM_MASTERSLAVEMODE_DISABLE))
   IS_TIM_OCIDLE_STATE(STATE)=(((STATE) == TIM_OCIDLESTATE_SET) || ((STATE) == TIM_OCIDLESTATE_RESET))
   IS_TIM_OCNIDLE_STATE(STATE)=(((STATE) == TIM_OCNIDLESTATE_SET) || ((STATE) == TIM_OCNIDLESTATE_RESET))
   IS_TIM_OCN_POLARITY(POLARITY)=(((POLARITY) == TIM_OCNPOLARITY_HIGH) || ((POLARITY) == TIM_OCNPOLARITY_LOW))
   IS_TIM_OCXREF_CLEAR_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4))
   IS_TIM_OC_MODE(MODE)=(((MODE) == TIM_OCMODE_TIMING) || ((MODE) == TIM_OCMODE_ACTIVE) || ((MODE) == TIM_OCMODE_INACTIVE) || ((MODE) == TIM_OCMODE_TOGGLE) || ((MODE) == TIM_OCMODE_FORCED_ACTIVE) || ((MODE) == TIM_OCMODE_FORCED_INACTIVE))
   IS_TIM_OC_POLARITY(POLARITY)=(((POLARITY) == TIM_OCPOLARITY_HIGH) || ((POLARITY) == TIM_OCPOLARITY_LOW))
   IS_TIM_OPM_CHANNELS(CHANNEL)=(((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2))
   IS_TIM_OPM_MODE(MODE)=(((MODE) == TIM_OPMODE_SINGLE) || ((MODE) == TIM_OPMODE_REPETITIVE))
   IS_TIM_OSSI_STATE(STATE)=(((STATE) == TIM_OSSI_ENABLE) || ((STATE) == TIM_OSSI_DISABLE))
   IS_TIM_OSSR_STATE(STATE)=(((STATE) == TIM_OSSR_ENABLE) || ((STATE) == TIM_OSSR_DISABLE))
   IS_TIM_PWM_MODE(MODE)=(((MODE) == TIM_OCMODE_PWM1) || ((MODE) == TIM_OCMODE_PWM2))
   IS_TIM_REPETITION_COUNTER_INSTANCE(INSTANCE)=((INSTANCE) == TIM1)
   IS_TIM_SLAVE_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4))
   IS_TIM_SLAVE_MODE(MODE)=(((MODE) == TIM_SLAVEMODE_DISABLE) || ((MODE) == TIM_SLAVEMODE_GATED) || ((MODE) == TIM_SLAVEMODE_RESET) || ((MODE) == TIM_SLAVEMODE_TRIGGER) || ((MODE) == TIM_SLAVEMODE_EXTERNAL1))
   IS_TIM_SYNCHRO_INSTANCE(INSTANCE)=IS_TIM_MASTER_INSTANCE(INSTANCE)
   IS_TIM_TI1SELECTION(TI1SELECTION)=(((TI1SELECTION) == TIM_TI1SELECTION_CH1) || ((TI1SELECTION) == TIM_TI1SELECTION_XORCOMBINATION))
   IS_TIM_TRGO_SOURCE(SOURCE)=(((SOURCE) == TIM_TRGO_RESET) || ((SOURCE) == TIM_TRGO_ENABLE) || ((SOURCE) == TIM_TRGO_UPDATE) || ((SOURCE) == TIM_TRGO_OC1) || ((SOURCE) == TIM_TRGO_OC1REF) || ((SOURCE) == TIM_TRGO_OC2REF) || ((SOURCE) == TIM_TRGO_OC3REF) || ((SOURCE) == TIM_TRGO_OC4REF))
   IS_TIM_TRIGGERFILTER(ICFILTER)=((ICFILTER) <= 0x0FU)
   IS_TIM_TRIGGERPOLARITY(POLARITY)=(((POLARITY) == TIM_TRIGGERPOLARITY_INVERTED ) || ((POLARITY) == TIM_TRIGGERPOLARITY_NONINVERTED) || ((POLARITY) == TIM_TRIGGERPOLARITY_RISING ) || ((POLARITY) == TIM_TRIGGERPOLARITY_FALLING ) || ((POLARITY) == TIM_TRIGGERPOLARITY_BOTHEDGE ))
   IS_TIM_TRIGGERPRESCALER(PRESCALER)=(((PRESCALER) == TIM_TRIGGERPRESCALER_DIV1) || ((PRESCALER) == TIM_TRIGGERPRESCALER_DIV2) || ((PRESCALER) == TIM_TRIGGERPRESCALER_DIV4) || ((PRESCALER) == TIM_TRIGGERPRESCALER_DIV8))
   IS_TIM_TRIGGER_SELECTION(SELECTION)=(((SELECTION) == TIM_TS_ITR0) || ((SELECTION) == TIM_TS_ITR1) || ((SELECTION) == TIM_TS_ITR2) || ((SELECTION) == TIM_TS_ITR3) || ((SELECTION) == TIM_TS_TI1F_ED) || ((SELECTION) == TIM_TS_TI1FP1) || ((SELECTION) == TIM_TS_TI2FP2) || ((SELECTION) == TIM_TS_ETRF))
   IS_TIM_XOR_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4))
   IS_UART_DMA_INSTANCE(INSTANCE)=(((INSTANCE) == USART1) || ((INSTANCE) == USART2) || ((INSTANCE) == USART3))
   IS_UART_HALFDUPLEX_INSTANCE(INSTANCE)=(((INSTANCE) == USART1) || ((INSTANCE) == USART2) || ((INSTANCE) == USART3))
   IS_UART_HWFLOW_INSTANCE(INSTANCE)=(((INSTANCE) == USART1) || ((INSTANCE) == USART2) || ((INSTANCE) == USART3))
   IS_UART_INSTANCE(INSTANCE)=(((INSTANCE) == USART1) || ((INSTANCE) == USART2) || ((INSTANCE) == USART3))
   IS_UART_LIN_INSTANCE(INSTANCE)=(((INSTANCE) == USART1) || ((INSTANCE) == USART2) || ((INSTANCE) == USART3))
   IS_UART_MULTIPROCESSOR_INSTANCE(INSTANCE)=(((INSTANCE) == USART1) || ((INSTANCE) == USART2) || ((INSTANCE) == USART3))
   IS_USART_INSTANCE(INSTANCE)=(((INSTANCE) == USART1) || ((INSTANCE) == USART2) || ((INSTANCE) == USART3))
   IS_USB_ALL_INSTANCE(INSTANCE)=((INSTANCE) == USB)
   IS_WRPSTATE(VALUE)=(((VALUE) == OB_WRPSTATE_DISABLE) || ((VALUE) == OB_WRPSTATE_ENABLE))
   IS_WWDG_ALL_INSTANCE(INSTANCE)=((INSTANCE) == WWDG)
   ITM=((ITM_Type *) ITM_BASE )
   ITM_BASE=(0xE0000000UL)
   ITM_IMCR_INTEGRATION_Msk=(1UL )
   ITM_IMCR_INTEGRATION_Pos=0U
   ITM_IRR_ATREADYM_Msk=(1UL )
   ITM_IRR_ATREADYM_Pos=0U
   ITM_IWR_ATVALIDM_Msk=(1UL )
   ITM_IWR_ATVALIDM_Pos=0U
   ITM_LSR_Access_Msk=(1UL << ITM_LSR_Access_Pos)
   ITM_LSR_Access_Pos=1U
   ITM_LSR_ByteAcc_Msk=(1UL << ITM_LSR_ByteAcc_Pos)
   ITM_LSR_ByteAcc_Pos=2U
   ITM_LSR_Present_Msk=(1UL )
   ITM_LSR_Present_Pos=0U
   ITM_RXBUFFER_EMPTY=0x5AA55AA5U
   ITM_TCR_BUSY_Msk=(1UL << ITM_TCR_BUSY_Pos)
   ITM_TCR_BUSY_Pos=23U
   ITM_TCR_DWTENA_Msk=(1UL << ITM_TCR_DWTENA_Pos)
   ITM_TCR_DWTENA_Pos=3U
   ITM_TCR_GTSFREQ_Msk=(3UL << ITM_TCR_GTSFREQ_Pos)
   ITM_TCR_GTSFREQ_Pos=10U
   ITM_TCR_ITMENA_Msk=(1UL )
   ITM_TCR_ITMENA_Pos=0U
   ITM_TCR_SWOENA_Msk=(1UL << ITM_TCR_SWOENA_Pos)
   ITM_TCR_SWOENA_Pos=4U
   ITM_TCR_SYNCENA_Msk=(1UL << ITM_TCR_SYNCENA_Pos)
   ITM_TCR_SYNCENA_Pos=2U
   ITM_TCR_TraceBusID_Msk=(0x7FUL << ITM_TCR_TraceBusID_Pos)
   ITM_TCR_TraceBusID_Pos=16U
   ITM_TCR_TSENA_Msk=(1UL << ITM_TCR_TSENA_Pos)
   ITM_TCR_TSENA_Pos=1U
   ITM_TCR_TSPrescale_Msk=(3UL << ITM_TCR_TSPrescale_Pos)
   ITM_TCR_TSPrescale_Pos=8U
   ITM_TPR_PRIVMASK_Msk=(0xFUL )
   ITM_TPR_PRIVMASK_Pos=0U
   IWDG=((IWDG_TypeDef *)IWDG_BASE)
   IWDG_BASE=(APB1PERIPH_BASE + 0x00003000U)
   IWDG_KR_KEY=IWDG_KR_KEY_Msk
   IWDG_KR_KEY_Msk=(0xFFFFU << IWDG_KR_KEY_Pos)
   IWDG_KR_KEY_Pos=(0U)
   IWDG_PR_PR=IWDG_PR_PR_Msk
   IWDG_PR_PR_0=(0x1U << IWDG_PR_PR_Pos)
   IWDG_PR_PR_1=(0x2U << IWDG_PR_PR_Pos)
   IWDG_PR_PR_2=(0x4U << IWDG_PR_PR_Pos)
   IWDG_PR_PR_Msk=(0x7U << IWDG_PR_PR_Pos)
   IWDG_PR_PR_Pos=(0U)
   IWDG_RLR_RL=IWDG_RLR_RL_Msk
   IWDG_RLR_RL_Msk=(0xFFFU << IWDG_RLR_RL_Pos)
   IWDG_RLR_RL_Pos=(0U)
   IWDG_SR_PVU=IWDG_SR_PVU_Msk
   IWDG_SR_PVU_Msk=(0x1U << IWDG_SR_PVU_Pos)
   IWDG_SR_PVU_Pos=(0U)
   IWDG_SR_RVU=IWDG_SR_RVU_Msk
   IWDG_SR_RVU_Msk=(0x1U << IWDG_SR_RVU_Pos)
   IWDG_SR_RVU_Pos=(1U)
   LITTLE_ENDIAN=_LITTLE_ENDIAN
   LL_AHB1_GRP1_PERIPH_ALL=(uint32_t)0xFFFFFFFFU
   LL_AHB1_GRP1_PERIPH_CRC=RCC_AHBENR_CRCEN
   LL_AHB1_GRP1_PERIPH_DMA1=RCC_AHBENR_DMA1EN
   LL_AHB1_GRP1_PERIPH_FLASH=RCC_AHBENR_FLITFEN
   LL_AHB1_GRP1_PERIPH_SDIO=RCC_AHBENR_SDIOEN
   LL_AHB1_GRP1_PERIPH_SRAM=RCC_AHBENR_SRAMEN
   LL_APB1_GRP1_PERIPH_ALL=(uint32_t)0xFFFFFFFFU
   LL_APB1_GRP1_PERIPH_BKP=RCC_APB1ENR_BKPEN
   LL_APB1_GRP1_PERIPH_CAN1=RCC_APB1ENR_CAN1EN
   LL_APB1_GRP1_PERIPH_I2C1=RCC_APB1ENR_I2C1EN
   LL_APB1_GRP1_PERIPH_I2C2=RCC_APB1ENR_I2C2EN
   LL_APB1_GRP1_PERIPH_PWR=RCC_APB1ENR_PWREN
   LL_APB1_GRP1_PERIPH_SPI2=RCC_APB1ENR_SPI2EN
   LL_APB1_GRP1_PERIPH_TIM2=RCC_APB1ENR_TIM2EN
   LL_APB1_GRP1_PERIPH_TIM3=RCC_APB1ENR_TIM3EN
   LL_APB1_GRP1_PERIPH_TIM4=RCC_APB1ENR_TIM4EN
   LL_APB1_GRP1_PERIPH_USART2=RCC_APB1ENR_USART2EN
   LL_APB1_GRP1_PERIPH_USART3=RCC_APB1ENR_USART3EN
   LL_APB1_GRP1_PERIPH_USB=RCC_APB1ENR_USBEN
   LL_APB1_GRP1_PERIPH_WWDG=RCC_APB1ENR_WWDGEN
   LL_APB2_GRP1_PERIPH_ADC1=RCC_APB2ENR_ADC1EN
   LL_APB2_GRP1_PERIPH_ADC2=RCC_APB2ENR_ADC2EN
   LL_APB2_GRP1_PERIPH_AFIO=RCC_APB2ENR_AFIOEN
   LL_APB2_GRP1_PERIPH_ALL=(uint32_t)0xFFFFFFFFU
   LL_APB2_GRP1_PERIPH_GPIOA=RCC_APB2ENR_IOPAEN
   LL_APB2_GRP1_PERIPH_GPIOB=RCC_APB2ENR_IOPBEN
   LL_APB2_GRP1_PERIPH_GPIOC=RCC_APB2ENR_IOPCEN
   LL_APB2_GRP1_PERIPH_GPIOD=RCC_APB2ENR_IOPDEN
   LL_APB2_GRP1_PERIPH_GPIOE=RCC_APB2ENR_IOPEEN
   LL_APB2_GRP1_PERIPH_SPI1=RCC_APB2ENR_SPI1EN
   LL_APB2_GRP1_PERIPH_TIM1=RCC_APB2ENR_TIM1EN
   LL_APB2_GRP1_PERIPH_USART1=RCC_APB2ENR_USART1EN
   LL_CRC_ReadReg(__INSTANCE__,__REG__)=READ_REG(__INSTANCE__->__REG__)
   LL_CRC_WriteReg(__INSTANCE__,__REG__,__VALUE__)=WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
   LL_DBGMCU_APB1_GRP1_CAN1_STOP=DBGMCU_CR_DBG_CAN1_STOP
   LL_DBGMCU_APB1_GRP1_I2C1_STOP=DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT
   LL_DBGMCU_APB1_GRP1_I2C2_STOP=DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
   LL_DBGMCU_APB1_GRP1_IWDG_STOP=DBGMCU_CR_DBG_IWDG_STOP
   LL_DBGMCU_APB1_GRP1_TIM2_STOP=DBGMCU_CR_DBG_TIM2_STOP
   LL_DBGMCU_APB1_GRP1_TIM3_STOP=DBGMCU_CR_DBG_TIM3_STOP
   LL_DBGMCU_APB1_GRP1_TIM4_STOP=DBGMCU_CR_DBG_TIM4_STOP
   LL_DBGMCU_APB1_GRP1_WWDG_STOP=DBGMCU_CR_DBG_WWDG_STOP
   LL_DBGMCU_APB2_GRP1_TIM1_STOP=DBGMCU_CR_DBG_TIM1_STOP
   LL_DBGMCU_TRACE_ASYNCH=DBGMCU_CR_TRACE_IOEN
   LL_DBGMCU_TRACE_NONE=0x00000000U
   LL_DBGMCU_TRACE_SYNCH_SIZE1=(DBGMCU_CR_TRACE_IOEN | DBGMCU_CR_TRACE_MODE_0)
   LL_DBGMCU_TRACE_SYNCH_SIZE2=(DBGMCU_CR_TRACE_IOEN | DBGMCU_CR_TRACE_MODE_1)
   LL_DBGMCU_TRACE_SYNCH_SIZE4=(DBGMCU_CR_TRACE_IOEN | DBGMCU_CR_TRACE_MODE)
   LL_DMA_CCR_HTIE=DMA_CCR_HTIE
   LL_DMA_CCR_TCIE=DMA_CCR_TCIE
   LL_DMA_CCR_TEIE=DMA_CCR_TEIE
   LL_DMA_CHANNEL_1=0x00000001U
   LL_DMA_CHANNEL_2=0x00000002U
   LL_DMA_CHANNEL_3=0x00000003U
   LL_DMA_CHANNEL_4=0x00000004U
   LL_DMA_CHANNEL_5=0x00000005U
   LL_DMA_CHANNEL_6=0x00000006U
   LL_DMA_CHANNEL_7=0x00000007U
   LL_DMA_CHANNEL_ALL=0xFFFF0000U
   LL_DMA_DIRECTION_MEMORY_TO_MEMORY=DMA_CCR_MEM2MEM
   LL_DMA_DIRECTION_MEMORY_TO_PERIPH=DMA_CCR_DIR
   LL_DMA_DIRECTION_PERIPH_TO_MEMORY=0x00000000U
   LL_DMA_IFCR_CGIF1=DMA_IFCR_CGIF1
   LL_DMA_IFCR_CGIF2=DMA_IFCR_CGIF2
   LL_DMA_IFCR_CGIF3=DMA_IFCR_CGIF3
   LL_DMA_IFCR_CGIF4=DMA_IFCR_CGIF4
   LL_DMA_IFCR_CGIF5=DMA_IFCR_CGIF5
   LL_DMA_IFCR_CGIF6=DMA_IFCR_CGIF6
   LL_DMA_IFCR_CGIF7=DMA_IFCR_CGIF7
   LL_DMA_IFCR_CHTIF1=DMA_IFCR_CHTIF1
   LL_DMA_IFCR_CHTIF2=DMA_IFCR_CHTIF2
   LL_DMA_IFCR_CHTIF3=DMA_IFCR_CHTIF3
   LL_DMA_IFCR_CHTIF4=DMA_IFCR_CHTIF4
   LL_DMA_IFCR_CHTIF5=DMA_IFCR_CHTIF5
   LL_DMA_IFCR_CHTIF6=DMA_IFCR_CHTIF6
   LL_DMA_IFCR_CHTIF7=DMA_IFCR_CHTIF7
   LL_DMA_IFCR_CTCIF1=DMA_IFCR_CTCIF1
   LL_DMA_IFCR_CTCIF2=DMA_IFCR_CTCIF2
   LL_DMA_IFCR_CTCIF3=DMA_IFCR_CTCIF3
   LL_DMA_IFCR_CTCIF4=DMA_IFCR_CTCIF4
   LL_DMA_IFCR_CTCIF5=DMA_IFCR_CTCIF5
   LL_DMA_IFCR_CTCIF6=DMA_IFCR_CTCIF6
   LL_DMA_IFCR_CTCIF7=DMA_IFCR_CTCIF7
   LL_DMA_IFCR_CTEIF1=DMA_IFCR_CTEIF1
   LL_DMA_IFCR_CTEIF2=DMA_IFCR_CTEIF2
   LL_DMA_IFCR_CTEIF3=DMA_IFCR_CTEIF3
   LL_DMA_IFCR_CTEIF4=DMA_IFCR_CTEIF4
   LL_DMA_IFCR_CTEIF5=DMA_IFCR_CTEIF5
   LL_DMA_IFCR_CTEIF6=DMA_IFCR_CTEIF6
   LL_DMA_IFCR_CTEIF7=DMA_IFCR_CTEIF7
   LL_DMA_ISR_GIF1=DMA_ISR_GIF1
   LL_DMA_ISR_GIF2=DMA_ISR_GIF2
   LL_DMA_ISR_GIF3=DMA_ISR_GIF3
   LL_DMA_ISR_GIF4=DMA_ISR_GIF4
   LL_DMA_ISR_GIF5=DMA_ISR_GIF5
   LL_DMA_ISR_GIF6=DMA_ISR_GIF6
   LL_DMA_ISR_GIF7=DMA_ISR_GIF7
   LL_DMA_ISR_HTIF1=DMA_ISR_HTIF1
   LL_DMA_ISR_HTIF2=DMA_ISR_HTIF2
   LL_DMA_ISR_HTIF3=DMA_ISR_HTIF3
   LL_DMA_ISR_HTIF4=DMA_ISR_HTIF4
   LL_DMA_ISR_HTIF5=DMA_ISR_HTIF5
   LL_DMA_ISR_HTIF6=DMA_ISR_HTIF6
   LL_DMA_ISR_HTIF7=DMA_ISR_HTIF7
   LL_DMA_ISR_TCIF1=DMA_ISR_TCIF1
   LL_DMA_ISR_TCIF2=DMA_ISR_TCIF2
   LL_DMA_ISR_TCIF3=DMA_ISR_TCIF3
   LL_DMA_ISR_TCIF4=DMA_ISR_TCIF4
   LL_DMA_ISR_TCIF5=DMA_ISR_TCIF5
   LL_DMA_ISR_TCIF6=DMA_ISR_TCIF6
   LL_DMA_ISR_TCIF7=DMA_ISR_TCIF7
   LL_DMA_ISR_TEIF1=DMA_ISR_TEIF1
   LL_DMA_ISR_TEIF2=DMA_ISR_TEIF2
   LL_DMA_ISR_TEIF3=DMA_ISR_TEIF3
   LL_DMA_ISR_TEIF4=DMA_ISR_TEIF4
   LL_DMA_ISR_TEIF5=DMA_ISR_TEIF5
   LL_DMA_ISR_TEIF6=DMA_ISR_TEIF6
   LL_DMA_ISR_TEIF7=DMA_ISR_TEIF7
   LL_DMA_MDATAALIGN_BYTE=0x00000000U
   LL_DMA_MDATAALIGN_HALFWORD=DMA_CCR_MSIZE_0
   LL_DMA_MDATAALIGN_WORD=DMA_CCR_MSIZE_1
   LL_DMA_MEMORY_INCREMENT=DMA_CCR_MINC
   LL_DMA_MEMORY_NOINCREMENT=0x00000000U
   LL_DMA_MODE_CIRCULAR=DMA_CCR_CIRC
   LL_DMA_MODE_NORMAL=0x00000000U
   LL_DMA_PDATAALIGN_BYTE=0x00000000U
   LL_DMA_PDATAALIGN_HALFWORD=DMA_CCR_PSIZE_0
   LL_DMA_PDATAALIGN_WORD=DMA_CCR_PSIZE_1
   LL_DMA_PERIPH_INCREMENT=DMA_CCR_PINC
   LL_DMA_PERIPH_NOINCREMENT=0x00000000U
   LL_DMA_PRIORITY_HIGH=DMA_CCR_PL_1
   LL_DMA_PRIORITY_LOW=0x00000000U
   LL_DMA_PRIORITY_MEDIUM=DMA_CCR_PL_0
   LL_DMA_PRIORITY_VERYHIGH=DMA_CCR_PL
   LL_DMA_ReadReg(__INSTANCE__,__REG__)=READ_REG(__INSTANCE__->__REG__)
   LL_DMA_WriteReg(__INSTANCE__,__REG__,__VALUE__)=WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
   LL_EXTI_LINE_0=EXTI_IMR_IM0
   LL_EXTI_LINE_10=EXTI_IMR_IM10
   LL_EXTI_LINE_11=EXTI_IMR_IM11
   LL_EXTI_LINE_12=EXTI_IMR_IM12
   LL_EXTI_LINE_13=EXTI_IMR_IM13
   LL_EXTI_LINE_14=EXTI_IMR_IM14
   LL_EXTI_LINE_15=EXTI_IMR_IM15
   LL_EXTI_LINE_16=EXTI_IMR_IM16
   LL_EXTI_LINE_17=EXTI_IMR_IM17
   LL_EXTI_LINE_18=EXTI_IMR_IM18
   LL_EXTI_LINE_1=EXTI_IMR_IM1
   LL_EXTI_LINE_2=EXTI_IMR_IM2
   LL_EXTI_LINE_3=EXTI_IMR_IM3
   LL_EXTI_LINE_4=EXTI_IMR_IM4
   LL_EXTI_LINE_5=EXTI_IMR_IM5
   LL_EXTI_LINE_6=EXTI_IMR_IM6
   LL_EXTI_LINE_7=EXTI_IMR_IM7
   LL_EXTI_LINE_8=EXTI_IMR_IM8
   LL_EXTI_LINE_9=EXTI_IMR_IM9
   LL_EXTI_LINE_ALL=(0xFFFFFFFFU)
   LL_EXTI_LINE_ALL_0_31=EXTI_IMR_IM
   LL_EXTI_LINE_NONE=(0x00000000U)
   LL_EXTI_MODE_EVENT=((uint8_t)0x01)
   LL_EXTI_MODE_IT=((uint8_t)0x00)
   LL_EXTI_MODE_IT_EVENT=((uint8_t)0x02)
   LL_EXTI_ReadReg(__REG__)=READ_REG(EXTI->__REG__)
   LL_EXTI_TRIGGER_FALLING=((uint8_t)0x02)
   LL_EXTI_TRIGGER_NONE=((uint8_t)0x00)
   LL_EXTI_TRIGGER_RISING=((uint8_t)0x01)
   LL_EXTI_TRIGGER_RISING_FALLING=((uint8_t)0x03)
   LL_EXTI_WriteReg(__REG__,__VALUE__)=WRITE_REG(EXTI->__REG__, (__VALUE__))
   LL_FLASH_LATENCY_0=0x00000000U
   LL_FLASH_LATENCY_1=FLASH_ACR_LATENCY_0
   LL_FLASH_LATENCY_2=FLASH_ACR_LATENCY_1
   LL_GPIO_AF_EVENTOUT_PIN_0=AFIO_EVCR_PIN_PX0
   LL_GPIO_AF_EVENTOUT_PIN_10=AFIO_EVCR_PIN_PX10
   LL_GPIO_AF_EVENTOUT_PIN_11=AFIO_EVCR_PIN_PX11
   LL_GPIO_AF_EVENTOUT_PIN_12=AFIO_EVCR_PIN_PX12
   LL_GPIO_AF_EVENTOUT_PIN_13=AFIO_EVCR_PIN_PX13
   LL_GPIO_AF_EVENTOUT_PIN_14=AFIO_EVCR_PIN_PX14
   LL_GPIO_AF_EVENTOUT_PIN_15=AFIO_EVCR_PIN_PX15
   LL_GPIO_AF_EVENTOUT_PIN_1=AFIO_EVCR_PIN_PX1
   LL_GPIO_AF_EVENTOUT_PIN_2=AFIO_EVCR_PIN_PX2
   LL_GPIO_AF_EVENTOUT_PIN_3=AFIO_EVCR_PIN_PX3
   LL_GPIO_AF_EVENTOUT_PIN_4=AFIO_EVCR_PIN_PX4
   LL_GPIO_AF_EVENTOUT_PIN_5=AFIO_EVCR_PIN_PX5
   LL_GPIO_AF_EVENTOUT_PIN_6=AFIO_EVCR_PIN_PX6
   LL_GPIO_AF_EVENTOUT_PIN_7=AFIO_EVCR_PIN_PX7
   LL_GPIO_AF_EVENTOUT_PIN_8=AFIO_EVCR_PIN_PX8
   LL_GPIO_AF_EVENTOUT_PIN_9=AFIO_EVCR_PIN_PX9
   LL_GPIO_AF_EVENTOUT_PORT_A=AFIO_EVCR_PORT_PA
   LL_GPIO_AF_EVENTOUT_PORT_B=AFIO_EVCR_PORT_PB
   LL_GPIO_AF_EVENTOUT_PORT_C=AFIO_EVCR_PORT_PC
   LL_GPIO_AF_EVENTOUT_PORT_D=AFIO_EVCR_PORT_PD
   LL_GPIO_AF_EVENTOUT_PORT_E=AFIO_EVCR_PORT_PE
   LL_GPIO_AF_EXTI_LINE0=(0x000FU << 16U | 0U)
   LL_GPIO_AF_EXTI_LINE10=(0x0F00U << 16U | 2U)
   LL_GPIO_AF_EXTI_LINE11=(0xF000U << 16U | 2U)
   LL_GPIO_AF_EXTI_LINE12=(0x000FU << 16U | 3U)
   LL_GPIO_AF_EXTI_LINE13=(0x00F0U << 16U | 3U)
   LL_GPIO_AF_EXTI_LINE14=(0x0F00U << 16U | 3U)
   LL_GPIO_AF_EXTI_LINE15=(0xF000U << 16U | 3U)
   LL_GPIO_AF_EXTI_LINE1=(0x00F0U << 16U | 0U)
   LL_GPIO_AF_EXTI_LINE2=(0x0F00U << 16U | 0U)
   LL_GPIO_AF_EXTI_LINE3=(0xF000U << 16U | 0U)
   LL_GPIO_AF_EXTI_LINE4=(0x000FU << 16U | 1U)
   LL_GPIO_AF_EXTI_LINE5=(0x00F0U << 16U | 1U)
   LL_GPIO_AF_EXTI_LINE6=(0x0F00U << 16U | 1U)
   LL_GPIO_AF_EXTI_LINE7=(0xF000U << 16U | 1U)
   LL_GPIO_AF_EXTI_LINE8=(0x000FU << 16U | 2U)
   LL_GPIO_AF_EXTI_LINE9=(0x00F0U << 16U | 2U)
   LL_GPIO_AF_EXTI_PORTA=0U
   LL_GPIO_AF_EXTI_PORTB=1U
   LL_GPIO_AF_EXTI_PORTC=2U
   LL_GPIO_AF_EXTI_PORTD=3U
   LL_GPIO_AF_EXTI_PORTE=4U
   LL_GPIO_AF_EXTI_PORTF=5U
   LL_GPIO_AF_EXTI_PORTG=6U
   LL_GPIO_MODE_ALTERNATE=(GPIO_CRL_CNF0_1 | GPIO_CRL_MODE0_0)
   LL_GPIO_MODE_ANALOG=0x00000000U
   LL_GPIO_MODE_FLOATING=GPIO_CRL_CNF0_0
   LL_GPIO_MODE_INPUT=GPIO_CRL_CNF0_1
   LL_GPIO_MODE_OUTPUT=GPIO_CRL_MODE0_0
   LL_GPIO_MODE_OUTPUT_10MHz=GPIO_CRL_MODE0_0
   LL_GPIO_MODE_OUTPUT_2MHz=GPIO_CRL_MODE0_1
   LL_GPIO_MODE_OUTPUT_50MHz=GPIO_CRL_MODE0
   LL_GPIO_OUTPUT_OPENDRAIN=GPIO_CRL_CNF0_0
   LL_GPIO_OUTPUT_PUSHPULL=0x00000000U
   LL_GPIO_PIN_0=((GPIO_BSRR_BS0 << GPIO_PIN_MASK_POS) | 0x00000001U)
   LL_GPIO_PIN_10=((GPIO_BSRR_BS10 << GPIO_PIN_MASK_POS) | 0x04000004U)
   LL_GPIO_PIN_11=((GPIO_BSRR_BS11 << GPIO_PIN_MASK_POS) | 0x04000008U)
   LL_GPIO_PIN_12=((GPIO_BSRR_BS12 << GPIO_PIN_MASK_POS) | 0x04000010U)
   LL_GPIO_PIN_13=((GPIO_BSRR_BS13 << GPIO_PIN_MASK_POS) | 0x04000020U)
   LL_GPIO_PIN_14=((GPIO_BSRR_BS14 << GPIO_PIN_MASK_POS) | 0x04000040U)
   LL_GPIO_PIN_15=((GPIO_BSRR_BS15 << GPIO_PIN_MASK_POS) | 0x04000080U)
   LL_GPIO_PIN_1=((GPIO_BSRR_BS1 << GPIO_PIN_MASK_POS) | 0x00000002U)
   LL_GPIO_PIN_2=((GPIO_BSRR_BS2 << GPIO_PIN_MASK_POS) | 0x00000004U)
   LL_GPIO_PIN_3=((GPIO_BSRR_BS3 << GPIO_PIN_MASK_POS) | 0x00000008U)
   LL_GPIO_PIN_4=((GPIO_BSRR_BS4 << GPIO_PIN_MASK_POS) | 0x00000010U)
   LL_GPIO_PIN_5=((GPIO_BSRR_BS5 << GPIO_PIN_MASK_POS) | 0x00000020U)
   LL_GPIO_PIN_6=((GPIO_BSRR_BS6 << GPIO_PIN_MASK_POS) | 0x00000040U)
   LL_GPIO_PIN_7=((GPIO_BSRR_BS7 << GPIO_PIN_MASK_POS) | 0x00000080U)
   LL_GPIO_PIN_8=((GPIO_BSRR_BS8 << GPIO_PIN_MASK_POS) | 0x04000001U)
   LL_GPIO_PIN_9=((GPIO_BSRR_BS9 << GPIO_PIN_MASK_POS) | 0x04000002U)
   LL_GPIO_PIN_ALL=(LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2 | LL_GPIO_PIN_3 | LL_GPIO_PIN_4 | LL_GPIO_PIN_5 | LL_GPIO_PIN_6 | LL_GPIO_PIN_7 | LL_GPIO_PIN_8 | LL_GPIO_PIN_9 | LL_GPIO_PIN_10 | LL_GPIO_PIN_11 | LL_GPIO_PIN_12 | LL_GPIO_PIN_13 | LL_GPIO_PIN_14 | LL_GPIO_PIN_15)
   LL_GPIO_PULL_DOWN=0x00000000U
   LL_GPIO_PULL_UP=GPIO_ODR_ODR0
   LL_GPIO_ReadReg(__INSTANCE__,__REG__)=READ_REG(__INSTANCE__->__REG__)
   LL_GPIO_SPEED_FREQ_HIGH=LL_GPIO_MODE_OUTPUT_50MHz
   LL_GPIO_SPEED_FREQ_LOW=LL_GPIO_MODE_OUTPUT_2MHz
   LL_GPIO_SPEED_FREQ_MEDIUM=LL_GPIO_MODE_OUTPUT_10MHz
   LL_GPIO_WriteReg(__INSTANCE__,__REG__,__VALUE__)=WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
   LL_HANDLER_FAULT_BUS=SCB_SHCSR_BUSFAULTENA_Msk
   LL_HANDLER_FAULT_MEM=SCB_SHCSR_MEMFAULTENA_Msk
   LL_HANDLER_FAULT_USG=SCB_SHCSR_USGFAULTENA_Msk
   LL_MAX_DELAY=0xFFFFFFFFU
   LL_PWR_CR_CSBF=PWR_CR_CSBF
   LL_PWR_CR_CWUF=PWR_CR_CWUF
   LL_PWR_CSR_EWUP1=PWR_CSR_EWUP
   LL_PWR_CSR_PVDO=PWR_CSR_PVDO
   LL_PWR_CSR_SBF=PWR_CSR_SBF
   LL_PWR_CSR_WUF=PWR_CSR_WUF
   LL_PWR_MODE_STANDBY=(PWR_CR_PDDS)
   LL_PWR_MODE_STOP_LPREGU=(PWR_CR_LPDS)
   LL_PWR_MODE_STOP_MAINREGU=0x00000000U
   LL_PWR_PVDLEVEL_0=(PWR_CR_PLS_LEV0)
   LL_PWR_PVDLEVEL_1=(PWR_CR_PLS_LEV1)
   LL_PWR_PVDLEVEL_2=(PWR_CR_PLS_LEV2)
   LL_PWR_PVDLEVEL_3=(PWR_CR_PLS_LEV3)
   LL_PWR_PVDLEVEL_4=(PWR_CR_PLS_LEV4)
   LL_PWR_PVDLEVEL_5=(PWR_CR_PLS_LEV5)
   LL_PWR_PVDLEVEL_6=(PWR_CR_PLS_LEV6)
   LL_PWR_PVDLEVEL_7=(PWR_CR_PLS_LEV7)
   LL_PWR_ReadReg(__REG__)=READ_REG(PWR->__REG__)
   LL_PWR_REGU_DSMODE_LOW_POWER=(PWR_CR_LPDS)
   LL_PWR_REGU_DSMODE_MAIN=0x00000000U
   LL_PWR_WAKEUP_PIN1=(PWR_CSR_EWUP)
   LL_PWR_WriteReg(__REG__,__VALUE__)=WRITE_REG(PWR->__REG__, (__VALUE__))
   LL_RCC_ADC_CLKSOURCE=RCC_CFGR_ADCPRE
   LL_RCC_ADC_CLKSRC_PCLK2_DIV_2=RCC_CFGR_ADCPRE_DIV2
   LL_RCC_ADC_CLKSRC_PCLK2_DIV_4=RCC_CFGR_ADCPRE_DIV4
   LL_RCC_ADC_CLKSRC_PCLK2_DIV_6=RCC_CFGR_ADCPRE_DIV6
   LL_RCC_ADC_CLKSRC_PCLK2_DIV_8=RCC_CFGR_ADCPRE_DIV8
   LL_RCC_APB1_DIV_16=RCC_CFGR_PPRE1_DIV16
   LL_RCC_APB1_DIV_1=RCC_CFGR_PPRE1_DIV1
   LL_RCC_APB1_DIV_2=RCC_CFGR_PPRE1_DIV2
   LL_RCC_APB1_DIV_4=RCC_CFGR_PPRE1_DIV4
   LL_RCC_APB1_DIV_8=RCC_CFGR_PPRE1_DIV8
   LL_RCC_APB2_DIV_16=RCC_CFGR_PPRE2_DIV16
   LL_RCC_APB2_DIV_1=RCC_CFGR_PPRE2_DIV1
   LL_RCC_APB2_DIV_2=RCC_CFGR_PPRE2_DIV2
   LL_RCC_APB2_DIV_4=RCC_CFGR_PPRE2_DIV4
   LL_RCC_APB2_DIV_8=RCC_CFGR_PPRE2_DIV8
   LL_RCC_CIR_CSSC=RCC_CIR_CSSC
   LL_RCC_CIR_CSSF=RCC_CIR_CSSF
   LL_RCC_CIR_HSERDYC=RCC_CIR_HSERDYC
   LL_RCC_CIR_HSERDYF=RCC_CIR_HSERDYF
   LL_RCC_CIR_HSERDYIE=RCC_CIR_HSERDYIE
   LL_RCC_CIR_HSIRDYC=RCC_CIR_HSIRDYC
   LL_RCC_CIR_HSIRDYF=RCC_CIR_HSIRDYF
   LL_RCC_CIR_HSIRDYIE=RCC_CIR_HSIRDYIE
   LL_RCC_CIR_LSERDYC=RCC_CIR_LSERDYC
   LL_RCC_CIR_LSERDYF=RCC_CIR_LSERDYF
   LL_RCC_CIR_LSERDYIE=RCC_CIR_LSERDYIE
   LL_RCC_CIR_LSIRDYC=RCC_CIR_LSIRDYC
   LL_RCC_CIR_LSIRDYF=RCC_CIR_LSIRDYF
   LL_RCC_CIR_LSIRDYIE=RCC_CIR_LSIRDYIE
   LL_RCC_CIR_PLL2RDYC=RCC_CIR_PLL2RDYC
   LL_RCC_CIR_PLL2RDYF=RCC_CIR_PLL2RDYF
   LL_RCC_CIR_PLL2RDYIE=RCC_CIR_PLL2RDYIE
   LL_RCC_CIR_PLL3RDYC=RCC_CIR_PLL3RDYC
   LL_RCC_CIR_PLL3RDYF=RCC_CIR_PLL3RDYF
   LL_RCC_CIR_PLL3RDYIE=RCC_CIR_PLL3RDYIE
   LL_RCC_CIR_PLLRDYC=RCC_CIR_PLLRDYC
   LL_RCC_CIR_PLLRDYF=RCC_CIR_PLLRDYF
   LL_RCC_CIR_PLLRDYIE=RCC_CIR_PLLRDYIE
   LL_RCC_CSR_IWDGRSTF=RCC_CSR_IWDGRSTF
   LL_RCC_CSR_LPWRRSTF=RCC_CSR_LPWRRSTF
   LL_RCC_CSR_PINRSTF=RCC_CSR_PINRSTF
   LL_RCC_CSR_PORRSTF=RCC_CSR_PORRSTF
   LL_RCC_CSR_SFTRSTF=RCC_CSR_SFTRSTF
   LL_RCC_CSR_WWDGRSTF=RCC_CSR_WWDGRSTF
   LL_RCC_MCO1SOURCE_HSE=RCC_CFGR_MCOSEL_HSE
   LL_RCC_MCO1SOURCE_HSI=RCC_CFGR_MCOSEL_HSI
   LL_RCC_MCO1SOURCE_NOCLOCK=RCC_CFGR_MCOSEL_NOCLOCK
   LL_RCC_MCO1SOURCE_PLLCLK_DIV_2=RCC_CFGR_MCOSEL_PLL_DIV2
   LL_RCC_MCO1SOURCE_SYSCLK=RCC_CFGR_MCOSEL_SYSCLK
   LL_RCC_PERIPH_FREQUENCY_NA=0xFFFFFFFFU
   LL_RCC_PERIPH_FREQUENCY_NO=0x00000000U
   LL_RCC_PLLSOURCE_HSE=RCC_CFGR_PLLSRC
   LL_RCC_PLLSOURCE_HSE_DIV_1=(RCC_CFGR_PLLSRC | 0x00000000U)
   LL_RCC_PLLSOURCE_HSE_DIV_2=(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE)
   LL_RCC_PLLSOURCE_HSI_DIV_2=0x00000000U
   LL_RCC_PLL_MUL_10=RCC_CFGR_PLLMULL10
   LL_RCC_PLL_MUL_11=RCC_CFGR_PLLMULL11
   LL_RCC_PLL_MUL_12=RCC_CFGR_PLLMULL12
   LL_RCC_PLL_MUL_13=RCC_CFGR_PLLMULL13
   LL_RCC_PLL_MUL_14=RCC_CFGR_PLLMULL14
   LL_RCC_PLL_MUL_15=RCC_CFGR_PLLMULL15
   LL_RCC_PLL_MUL_16=RCC_CFGR_PLLMULL16
   LL_RCC_PLL_MUL_2=RCC_CFGR_PLLMULL2
   LL_RCC_PLL_MUL_3=RCC_CFGR_PLLMULL3
   LL_RCC_PLL_MUL_4=RCC_CFGR_PLLMULL4
   LL_RCC_PLL_MUL_5=RCC_CFGR_PLLMULL5
   LL_RCC_PLL_MUL_6=RCC_CFGR_PLLMULL6
   LL_RCC_PLL_MUL_7=RCC_CFGR_PLLMULL7
   LL_RCC_PLL_MUL_8=RCC_CFGR_PLLMULL8
   LL_RCC_PLL_MUL_9=RCC_CFGR_PLLMULL9
   LL_RCC_PREDIV_DIV_1=0x00000000U
   LL_RCC_PREDIV_DIV_2=RCC_CFGR_PLLXTPRE
   LL_RCC_ReadReg(__REG__)=READ_REG(RCC->__REG__)
   LL_RCC_RTC_CLKSOURCE_HSE_DIV128=RCC_BDCR_RTCSEL
   LL_RCC_RTC_CLKSOURCE_LSE=RCC_BDCR_RTCSEL_0
   LL_RCC_RTC_CLKSOURCE_LSI=RCC_BDCR_RTCSEL_1
   LL_RCC_RTC_CLKSOURCE_NONE=0x00000000U
   LL_RCC_SYSCLK_DIV_128=RCC_CFGR_HPRE_DIV128
   LL_RCC_SYSCLK_DIV_16=RCC_CFGR_HPRE_DIV16
   LL_RCC_SYSCLK_DIV_1=RCC_CFGR_HPRE_DIV1
   LL_RCC_SYSCLK_DIV_256=RCC_CFGR_HPRE_DIV256
   LL_RCC_SYSCLK_DIV_2=RCC_CFGR_HPRE_DIV2
   LL_RCC_SYSCLK_DIV_4=RCC_CFGR_HPRE_DIV4
   LL_RCC_SYSCLK_DIV_512=RCC_CFGR_HPRE_DIV512
   LL_RCC_SYSCLK_DIV_64=RCC_CFGR_HPRE_DIV64
   LL_RCC_SYSCLK_DIV_8=RCC_CFGR_HPRE_DIV8
   LL_RCC_SYS_CLKSOURCE_HSE=RCC_CFGR_SW_HSE
   LL_RCC_SYS_CLKSOURCE_HSI=RCC_CFGR_SW_HSI
   LL_RCC_SYS_CLKSOURCE_PLL=RCC_CFGR_SW_PLL
   LL_RCC_SYS_CLKSOURCE_STATUS_HSE=RCC_CFGR_SWS_HSE
   LL_RCC_SYS_CLKSOURCE_STATUS_HSI=RCC_CFGR_SWS_HSI
   LL_RCC_SYS_CLKSOURCE_STATUS_PLL=RCC_CFGR_SWS_PLL
   LL_RCC_USB_CLKSOURCE=0x00400000U
   LL_RCC_USB_CLKSOURCE_PLL=RCC_CFGR_USBPRE
   LL_RCC_USB_CLKSOURCE_PLL_DIV_1_5=0x00000000U
   LL_RCC_WriteReg(__REG__,__VALUE__)=WRITE_REG(RCC->__REG__, (__VALUE__))
   LL_SYSTICK_CLKSOURCE_HCLK=SysTick_CTRL_CLKSOURCE_Msk
   LL_SYSTICK_CLKSOURCE_HCLK_DIV8=0x00000000U
   LL_TIM_ACTIVEINPUT_DIRECTTI=(TIM_CCMR1_CC1S_0 << 16U)
   LL_TIM_ACTIVEINPUT_INDIRECTTI=(TIM_CCMR1_CC1S_1 << 16U)
   LL_TIM_ACTIVEINPUT_TRC=(TIM_CCMR1_CC1S << 16U)
   LL_TIM_AUTOMATICOUTPUT_DISABLE=0x00000000U
   LL_TIM_AUTOMATICOUTPUT_ENABLE=TIM_BDTR_AOE
   LL_TIM_BREAK_DISABLE=0x00000000U
   LL_TIM_BREAK_ENABLE=TIM_BDTR_BKE
   LL_TIM_BREAK_POLARITY_HIGH=TIM_BDTR_BKP
   LL_TIM_BREAK_POLARITY_LOW=0x00000000U
   LL_TIM_CCDMAREQUEST_CC=0x00000000U
   LL_TIM_CCDMAREQUEST_UPDATE=TIM_CR2_CCDS
   LL_TIM_CCUPDATESOURCE_COMG_AND_TRGI=TIM_CR2_CCUS
   LL_TIM_CCUPDATESOURCE_COMG_ONLY=0x00000000U
   LL_TIM_CHANNEL_CH1=TIM_CCER_CC1E
   LL_TIM_CHANNEL_CH1N=TIM_CCER_CC1NE
   LL_TIM_CHANNEL_CH2=TIM_CCER_CC2E
   LL_TIM_CHANNEL_CH2N=TIM_CCER_CC2NE
   LL_TIM_CHANNEL_CH3=TIM_CCER_CC3E
   LL_TIM_CHANNEL_CH3N=TIM_CCER_CC3NE
   LL_TIM_CHANNEL_CH4=TIM_CCER_CC4E
   LL_TIM_CLOCKDIVISION_DIV1=0x00000000U
   LL_TIM_CLOCKDIVISION_DIV2=TIM_CR1_CKD_0
   LL_TIM_CLOCKDIVISION_DIV4=TIM_CR1_CKD_1
   LL_TIM_CLOCKSOURCE_EXT_MODE1=(TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0)
   LL_TIM_CLOCKSOURCE_EXT_MODE2=TIM_SMCR_ECE
   LL_TIM_CLOCKSOURCE_INTERNAL=0x00000000U
   LL_TIM_COUNTERDIRECTION_DOWN=TIM_CR1_DIR
   LL_TIM_COUNTERDIRECTION_UP=0x00000000U
   LL_TIM_COUNTERMODE_CENTER_DOWN=TIM_CR1_CMS_1
   LL_TIM_COUNTERMODE_CENTER_UP=TIM_CR1_CMS_0
   LL_TIM_COUNTERMODE_CENTER_UP_DOWN=TIM_CR1_CMS
   LL_TIM_COUNTERMODE_DOWN=TIM_CR1_DIR
   LL_TIM_COUNTERMODE_UP=0x00000000U
   LL_TIM_DIER_BIE=TIM_DIER_BIE
   LL_TIM_DIER_CC1IE=TIM_DIER_CC1IE
   LL_TIM_DIER_CC2IE=TIM_DIER_CC2IE
   LL_TIM_DIER_CC3IE=TIM_DIER_CC3IE
   LL_TIM_DIER_CC4IE=TIM_DIER_CC4IE
   LL_TIM_DIER_COMIE=TIM_DIER_COMIE
   LL_TIM_DIER_TIE=TIM_DIER_TIE
   LL_TIM_DIER_UIE=TIM_DIER_UIE
   LL_TIM_DMABURST_BASEADDR_ARR=(TIM_DCR_DBA_3 | TIM_DCR_DBA_1 | TIM_DCR_DBA_0)
   LL_TIM_DMABURST_BASEADDR_BDTR=(TIM_DCR_DBA_4 | TIM_DCR_DBA_0)
   LL_TIM_DMABURST_BASEADDR_CCER=TIM_DCR_DBA_3
   LL_TIM_DMABURST_BASEADDR_CCMR1=(TIM_DCR_DBA_2 | TIM_DCR_DBA_1)
   LL_TIM_DMABURST_BASEADDR_CCMR2=(TIM_DCR_DBA_2 | TIM_DCR_DBA_1 | TIM_DCR_DBA_0)
   LL_TIM_DMABURST_BASEADDR_CCR1=(TIM_DCR_DBA_3 | TIM_DCR_DBA_2 | TIM_DCR_DBA_0)
   LL_TIM_DMABURST_BASEADDR_CCR2=(TIM_DCR_DBA_3 | TIM_DCR_DBA_2 | TIM_DCR_DBA_1)
   LL_TIM_DMABURST_BASEADDR_CCR3=(TIM_DCR_DBA_3 | TIM_DCR_DBA_2 | TIM_DCR_DBA_1 | TIM_DCR_DBA_0)
   LL_TIM_DMABURST_BASEADDR_CCR4=TIM_DCR_DBA_4
   LL_TIM_DMABURST_BASEADDR_CNT=(TIM_DCR_DBA_3 | TIM_DCR_DBA_0)
   LL_TIM_DMABURST_BASEADDR_CR1=0x00000000U
   LL_TIM_DMABURST_BASEADDR_CR2=TIM_DCR_DBA_0
   LL_TIM_DMABURST_BASEADDR_DIER=(TIM_DCR_DBA_1 | TIM_DCR_DBA_0)
   LL_TIM_DMABURST_BASEADDR_EGR=(TIM_DCR_DBA_2 | TIM_DCR_DBA_0)
   LL_TIM_DMABURST_BASEADDR_PSC=(TIM_DCR_DBA_3 | TIM_DCR_DBA_1)
   LL_TIM_DMABURST_BASEADDR_RCR=(TIM_DCR_DBA_3 | TIM_DCR_DBA_2)
   LL_TIM_DMABURST_BASEADDR_SMCR=TIM_DCR_DBA_1
   LL_TIM_DMABURST_BASEADDR_SR=TIM_DCR_DBA_2
   LL_TIM_DMABURST_LENGTH_10TRANSFERS=(TIM_DCR_DBL_3 | TIM_DCR_DBL_0)
   LL_TIM_DMABURST_LENGTH_11TRANSFERS=(TIM_DCR_DBL_3 | TIM_DCR_DBL_1)
   LL_TIM_DMABURST_LENGTH_12TRANSFERS=(TIM_DCR_DBL_3 | TIM_DCR_DBL_1 | TIM_DCR_DBL_0)
   LL_TIM_DMABURST_LENGTH_13TRANSFERS=(TIM_DCR_DBL_3 | TIM_DCR_DBL_2)
   LL_TIM_DMABURST_LENGTH_14TRANSFERS=(TIM_DCR_DBL_3 | TIM_DCR_DBL_2 | TIM_DCR_DBL_0)
   LL_TIM_DMABURST_LENGTH_15TRANSFERS=(TIM_DCR_DBL_3 | TIM_DCR_DBL_2 | TIM_DCR_DBL_1)
   LL_TIM_DMABURST_LENGTH_16TRANSFERS=(TIM_DCR_DBL_3 | TIM_DCR_DBL_2 | TIM_DCR_DBL_1 | TIM_DCR_DBL_0)
   LL_TIM_DMABURST_LENGTH_17TRANSFERS=TIM_DCR_DBL_4
   LL_TIM_DMABURST_LENGTH_18TRANSFERS=(TIM_DCR_DBL_4 | TIM_DCR_DBL_0)
   LL_TIM_DMABURST_LENGTH_1TRANSFER=0x00000000U
   LL_TIM_DMABURST_LENGTH_2TRANSFERS=TIM_DCR_DBL_0
   LL_TIM_DMABURST_LENGTH_3TRANSFERS=TIM_DCR_DBL_1
   LL_TIM_DMABURST_LENGTH_4TRANSFERS=(TIM_DCR_DBL_1 | TIM_DCR_DBL_0)
   LL_TIM_DMABURST_LENGTH_5TRANSFERS=TIM_DCR_DBL_2
   LL_TIM_DMABURST_LENGTH_6TRANSFERS=(TIM_DCR_DBL_2 | TIM_DCR_DBL_0)
   LL_TIM_DMABURST_LENGTH_7TRANSFERS=(TIM_DCR_DBL_2 | TIM_DCR_DBL_1)
   LL_TIM_DMABURST_LENGTH_8TRANSFERS=(TIM_DCR_DBL_2 | TIM_DCR_DBL_1 | TIM_DCR_DBL_0)
   LL_TIM_DMABURST_LENGTH_9TRANSFERS=TIM_DCR_DBL_3
   LL_TIM_ENCODERMODE_X2_TI1=TIM_SMCR_SMS_0
   LL_TIM_ENCODERMODE_X2_TI2=TIM_SMCR_SMS_1
   LL_TIM_ENCODERMODE_X4_TI12=(TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0)
   LL_TIM_ETR_FILTER_FDIV16_N5=(TIM_SMCR_ETF_3 | TIM_SMCR_ETF_1)
   LL_TIM_ETR_FILTER_FDIV16_N6=(TIM_SMCR_ETF_3 | TIM_SMCR_ETF_1 | TIM_SMCR_ETF_0)
   LL_TIM_ETR_FILTER_FDIV16_N8=(TIM_SMCR_ETF_3 | TIM_SMCR_ETF_2)
   LL_TIM_ETR_FILTER_FDIV1=0x00000000U
   LL_TIM_ETR_FILTER_FDIV1_N2=TIM_SMCR_ETF_0
   LL_TIM_ETR_FILTER_FDIV1_N4=TIM_SMCR_ETF_1
   LL_TIM_ETR_FILTER_FDIV1_N8=(TIM_SMCR_ETF_1 | TIM_SMCR_ETF_0)
   LL_TIM_ETR_FILTER_FDIV2_N6=TIM_SMCR_ETF_2
   LL_TIM_ETR_FILTER_FDIV2_N8=(TIM_SMCR_ETF_2 | TIM_SMCR_ETF_0)
   LL_TIM_ETR_FILTER_FDIV32_N5=(TIM_SMCR_ETF_3 | TIM_SMCR_ETF_2 | TIM_SMCR_ETF_0)
   LL_TIM_ETR_FILTER_FDIV32_N6=(TIM_SMCR_ETF_3 | TIM_SMCR_ETF_2 | TIM_SMCR_ETF_1)
   LL_TIM_ETR_FILTER_FDIV32_N8=TIM_SMCR_ETF
   LL_TIM_ETR_FILTER_FDIV4_N6=(TIM_SMCR_ETF_2 | TIM_SMCR_ETF_1)
   LL_TIM_ETR_FILTER_FDIV4_N8=(TIM_SMCR_ETF_2 | TIM_SMCR_ETF_1 | TIM_SMCR_ETF_0)
   LL_TIM_ETR_FILTER_FDIV8_N6=TIM_SMCR_ETF_3
   LL_TIM_ETR_FILTER_FDIV8_N8=(TIM_SMCR_ETF_3 | TIM_SMCR_ETF_0)
   LL_TIM_ETR_POLARITY_INVERTED=TIM_SMCR_ETP
   LL_TIM_ETR_POLARITY_NONINVERTED=0x00000000U
   LL_TIM_ETR_PRESCALER_DIV1=0x00000000U
   LL_TIM_ETR_PRESCALER_DIV2=TIM_SMCR_ETPS_0
   LL_TIM_ETR_PRESCALER_DIV4=TIM_SMCR_ETPS_1
   LL_TIM_ETR_PRESCALER_DIV8=TIM_SMCR_ETPS
   LL_TIM_ICPSC_DIV1=0x00000000U
   LL_TIM_ICPSC_DIV2=(TIM_CCMR1_IC1PSC_0 << 16U)
   LL_TIM_ICPSC_DIV4=(TIM_CCMR1_IC1PSC_1 << 16U)
   LL_TIM_ICPSC_DIV8=(TIM_CCMR1_IC1PSC << 16U)
   LL_TIM_IC_FILTER_FDIV16_N5=((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_1) << 16U)
   LL_TIM_IC_FILTER_FDIV16_N6=((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC1F_0) << 16U)
   LL_TIM_IC_FILTER_FDIV16_N8=((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_2) << 16U)
   LL_TIM_IC_FILTER_FDIV1=0x00000000U
   LL_TIM_IC_FILTER_FDIV1_N2=(TIM_CCMR1_IC1F_0 << 16U)
   LL_TIM_IC_FILTER_FDIV1_N4=(TIM_CCMR1_IC1F_1 << 16U)
   LL_TIM_IC_FILTER_FDIV1_N8=((TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC1F_0) << 16U)
   LL_TIM_IC_FILTER_FDIV2_N6=(TIM_CCMR1_IC1F_2 << 16U)
   LL_TIM_IC_FILTER_FDIV2_N8=((TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_0) << 16U)
   LL_TIM_IC_FILTER_FDIV32_N5=((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_0) << 16U)
   LL_TIM_IC_FILTER_FDIV32_N6=((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_1) << 16U)
   LL_TIM_IC_FILTER_FDIV32_N8=(TIM_CCMR1_IC1F << 16U)
   LL_TIM_IC_FILTER_FDIV4_N6=((TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_1) << 16U)
   LL_TIM_IC_FILTER_FDIV4_N8=((TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC1F_0) << 16U)
   LL_TIM_IC_FILTER_FDIV8_N6=(TIM_CCMR1_IC1F_3 << 16U)
   LL_TIM_IC_FILTER_FDIV8_N8=((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_0) << 16U)
   LL_TIM_IC_POLARITY_FALLING=TIM_CCER_CC1P
   LL_TIM_IC_POLARITY_RISING=0x00000000U
   LL_TIM_LOCKLEVEL_1=TIM_BDTR_LOCK_0
   LL_TIM_LOCKLEVEL_2=TIM_BDTR_LOCK_1
   LL_TIM_LOCKLEVEL_3=TIM_BDTR_LOCK
   LL_TIM_LOCKLEVEL_OFF=0x00000000U
   LL_TIM_OCIDLESTATE_HIGH=TIM_CR2_OIS1
   LL_TIM_OCIDLESTATE_LOW=0x00000000U
   LL_TIM_OCMODE_ACTIVE=TIM_CCMR1_OC1M_0
   LL_TIM_OCMODE_FORCED_ACTIVE=(TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_0)
   LL_TIM_OCMODE_FORCED_INACTIVE=TIM_CCMR1_OC1M_2
   LL_TIM_OCMODE_FROZEN=0x00000000U
   LL_TIM_OCMODE_INACTIVE=TIM_CCMR1_OC1M_1
   LL_TIM_OCMODE_PWM1=(TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1)
   LL_TIM_OCMODE_PWM2=(TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_0)
   LL_TIM_OCMODE_TOGGLE=(TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_0)
   LL_TIM_OCPOLARITY_HIGH=0x00000000U
   LL_TIM_OCPOLARITY_LOW=TIM_CCER_CC1P
   LL_TIM_OCSTATE_DISABLE=0x00000000U
   LL_TIM_OCSTATE_ENABLE=TIM_CCER_CC1E
   LL_TIM_ONEPULSEMODE_REPETITIVE=0x00000000U
   LL_TIM_ONEPULSEMODE_SINGLE=TIM_CR1_OPM
   LL_TIM_OSSI_DISABLE=0x00000000U
   LL_TIM_OSSI_ENABLE=TIM_BDTR_OSSI
   LL_TIM_OSSR_DISABLE=0x00000000U
   LL_TIM_OSSR_ENABLE=TIM_BDTR_OSSR
   LL_TIM_ReadReg(__INSTANCE__,__REG__)=READ_REG(__INSTANCE__->__REG__)
   LL_TIM_SLAVEMODE_DISABLED=0x00000000U
   LL_TIM_SLAVEMODE_GATED=(TIM_SMCR_SMS_2 | TIM_SMCR_SMS_0)
   LL_TIM_SLAVEMODE_RESET=TIM_SMCR_SMS_2
   LL_TIM_SLAVEMODE_TRIGGER=(TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1)
   LL_TIM_SR_BIF=TIM_SR_BIF
   LL_TIM_SR_CC1IF=TIM_SR_CC1IF
   LL_TIM_SR_CC1OF=TIM_SR_CC1OF
   LL_TIM_SR_CC2IF=TIM_SR_CC2IF
   LL_TIM_SR_CC2OF=TIM_SR_CC2OF
   LL_TIM_SR_CC3IF=TIM_SR_CC3IF
   LL_TIM_SR_CC3OF=TIM_SR_CC3OF
   LL_TIM_SR_CC4IF=TIM_SR_CC4IF
   LL_TIM_SR_CC4OF=TIM_SR_CC4OF
   LL_TIM_SR_COMIF=TIM_SR_COMIF
   LL_TIM_SR_TIF=TIM_SR_TIF
   LL_TIM_SR_UIF=TIM_SR_UIF
   LL_TIM_TRGO_CC1IF=(TIM_CR2_MMS_1 | TIM_CR2_MMS_0)
   LL_TIM_TRGO_ENABLE=TIM_CR2_MMS_0
   LL_TIM_TRGO_OC1REF=TIM_CR2_MMS_2
   LL_TIM_TRGO_OC2REF=(TIM_CR2_MMS_2 | TIM_CR2_MMS_0)
   LL_TIM_TRGO_OC3REF=(TIM_CR2_MMS_2 | TIM_CR2_MMS_1)
   LL_TIM_TRGO_OC4REF=(TIM_CR2_MMS_2 | TIM_CR2_MMS_1 | TIM_CR2_MMS_0)
   LL_TIM_TRGO_RESET=0x00000000U
   LL_TIM_TRGO_UPDATE=TIM_CR2_MMS_1
   LL_TIM_TS_ETRF=(TIM_SMCR_TS_2 | TIM_SMCR_TS_1 | TIM_SMCR_TS_0)
   LL_TIM_TS_ITR0=0x00000000U
   LL_TIM_TS_ITR1=TIM_SMCR_TS_0
   LL_TIM_TS_ITR2=TIM_SMCR_TS_1
   LL_TIM_TS_ITR3=(TIM_SMCR_TS_0 | TIM_SMCR_TS_1)
   LL_TIM_TS_TI1FP1=(TIM_SMCR_TS_2 | TIM_SMCR_TS_0)
   LL_TIM_TS_TI1F_ED=TIM_SMCR_TS_2
   LL_TIM_TS_TI2FP2=(TIM_SMCR_TS_2 | TIM_SMCR_TS_1)
   LL_TIM_UPDATESOURCE_COUNTER=TIM_CR1_URS
   LL_TIM_UPDATESOURCE_REGULAR=0x00000000U
   LL_TIM_WriteReg(__INSTANCE__,__REG__,__VALUE__)=WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
   LL_USART_CLOCK_DISABLE=0x00000000U
   LL_USART_CLOCK_ENABLE=USART_CR2_CLKEN
   LL_USART_CR1_IDLEIE=USART_CR1_IDLEIE
   LL_USART_CR1_PEIE=USART_CR1_PEIE
   LL_USART_CR1_RXNEIE=USART_CR1_RXNEIE
   LL_USART_CR1_TCIE=USART_CR1_TCIE
   LL_USART_CR1_TXEIE=USART_CR1_TXEIE
   LL_USART_CR2_LBDIE=USART_CR2_LBDIE
   LL_USART_CR3_CTSIE=USART_CR3_CTSIE
   LL_USART_CR3_EIE=USART_CR3_EIE
   LL_USART_DATAWIDTH_8B=0x00000000U
   LL_USART_DATAWIDTH_9B=USART_CR1_M
   LL_USART_DIRECTION_NONE=0x00000000U
   LL_USART_DIRECTION_RX=USART_CR1_RE
   LL_USART_DIRECTION_TX=USART_CR1_TE
   LL_USART_DIRECTION_TX_RX=(USART_CR1_TE |USART_CR1_RE)
   LL_USART_HWCONTROL_CTS=USART_CR3_CTSE
   LL_USART_HWCONTROL_NONE=0x00000000U
   LL_USART_HWCONTROL_RTS=USART_CR3_RTSE
   LL_USART_HWCONTROL_RTS_CTS=(USART_CR3_RTSE | USART_CR3_CTSE)
   LL_USART_IRDA_POWER_LOW=USART_CR3_IRLP
   LL_USART_IRDA_POWER_NORMAL=0x00000000U
   LL_USART_LASTCLKPULSE_NO_OUTPUT=0x00000000U
   LL_USART_LASTCLKPULSE_OUTPUT=USART_CR2_LBCL
   LL_USART_LINBREAK_DETECT_10B=0x00000000U
   LL_USART_LINBREAK_DETECT_11B=USART_CR2_LBDL
   LL_USART_PARITY_EVEN=USART_CR1_PCE
   LL_USART_PARITY_NONE=0x00000000U
   LL_USART_PARITY_ODD=(USART_CR1_PCE | USART_CR1_PS)
   LL_USART_PHASE_1EDGE=0x00000000U
   LL_USART_PHASE_2EDGE=USART_CR2_CPHA
   LL_USART_POLARITY_HIGH=USART_CR2_CPOL
   LL_USART_POLARITY_LOW=0x00000000U
   LL_USART_ReadReg(__INSTANCE__,__REG__)=READ_REG(__INSTANCE__->__REG__)
   LL_USART_SR_CTS=USART_SR_CTS
   LL_USART_SR_FE=USART_SR_FE
   LL_USART_SR_IDLE=USART_SR_IDLE
   LL_USART_SR_LBD=USART_SR_LBD
   LL_USART_SR_NE=USART_SR_NE
   LL_USART_SR_ORE=USART_SR_ORE
   LL_USART_SR_PE=USART_SR_PE
   LL_USART_SR_RXNE=USART_SR_RXNE
   LL_USART_SR_TC=USART_SR_TC
   LL_USART_SR_TXE=USART_SR_TXE
   LL_USART_STOPBITS_0_5=USART_CR2_STOP_0
   LL_USART_STOPBITS_1=0x00000000U
   LL_USART_STOPBITS_1_5=(USART_CR2_STOP_0 | USART_CR2_STOP_1)
   LL_USART_STOPBITS_2=USART_CR2_STOP_1
   LL_USART_WAKEUP_ADDRESSMARK=USART_CR1_WAKE
   LL_USART_WAKEUP_IDLELINE=0x00000000U
   LL_USART_WriteReg(__INSTANCE__,__REG__,__VALUE__)=WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
   LL_UTILS_HSEBYPASS_OFF=0x00000000U
   LL_UTILS_HSEBYPASS_ON=0x00000001U
   long=+4
   LSE_STARTUP_TIMEOUT=((uint32_t)5000)
   LSE_VALUE=((uint32_t)32768)
   LSI_TIMEOUT_VALUE=2U
   LSI_VALUE=40000U
   L_ctermid=16
   L_tmpnam=FILENAME_MAX
   MAC_ADDR0=2
   MAC_ADDR1=0
   MAC_ADDR2=0
   MAC_ADDR3=0
   MAC_ADDR4=0
   MAC_ADDR5=0
   MODIFY_REG(REG,CLEARMASK,SETMASK)=WRITE_REG((REG), (((READ_REG(REG)) & (~(CLEARMASK))) | (SETMASK)))
   NFDBITS=(sizeof (fd_mask) * 8)
   NULL=((void *)0)
   NVIC=((NVIC_Type *) NVIC_BASE )
   NVIC_BASE=(SCS_BASE + 0x0100UL)
   NVIC_PRIORITYGROUP_0=0x00000007U
   NVIC_PRIORITYGROUP_1=0x00000006U
   NVIC_PRIORITYGROUP_2=0x00000005U
   NVIC_PRIORITYGROUP_3=0x00000004U
   NVIC_PRIORITYGROUP_4=0x00000003U
   NVIC_STIR_INTID_Msk=(0x1FFUL )
   NVIC_STIR_INTID_Pos=0U
   OB=((OB_TypeDef *)OB_BASE)
   OBR_REG_INDEX=1U
   OB_BASE=0x1FFFF800U
   OB_DATA_ADDRESS_DATA0=0x1FFFF804U
   OB_DATA_ADDRESS_DATA1=0x1FFFF806U
   OB_IWDG_HW=((uint16_t)0x0000)
   OB_IWDG_SW=((uint16_t)0x0001)
   OB_RDP_LEVEL_0=((uint8_t)0xA5)
   OB_RDP_LEVEL_1=((uint8_t)0x00)
   OB_STDBY_NO_RST=((uint16_t)0x0004)
   OB_STDBY_RST=((uint16_t)0x0000)
   OB_STOP_NO_RST=((uint16_t)0x0002)
   OB_STOP_RST=((uint16_t)0x0000)
   OB_WRPSTATE_DISABLE=0x00U
   OB_WRPSTATE_ENABLE=0x01U
   OB_WRP_ALLPAGES=0xFFFFFFFFU
   OB_WRP_PAGES0TO31MASK=0x000000FFU
   OB_WRP_PAGES0TO3=0x00000001U
   OB_WRP_PAGES100TO103=0x02000000U
   OB_WRP_PAGES104TO107=0x04000000U
   OB_WRP_PAGES108TO111=0x08000000U
   OB_WRP_PAGES112TO115=0x10000000U
   OB_WRP_PAGES116TO119=0x20000000U
   OB_WRP_PAGES120TO123=0x40000000U
   OB_WRP_PAGES124TO127=0x80000000U
   OB_WRP_PAGES12TO15=0x00000008U
   OB_WRP_PAGES16TO19=0x00000010U
   OB_WRP_PAGES20TO23=0x00000020U
   OB_WRP_PAGES24TO27=0x00000040U
   OB_WRP_PAGES28TO31=0x00000080U
   OB_WRP_PAGES32TO35=0x00000100U
   OB_WRP_PAGES32TO63MASK=0x0000FF00U
   OB_WRP_PAGES36TO39=0x00000200U
   OB_WRP_PAGES40TO43=0x00000400U
   OB_WRP_PAGES44TO47=0x00000800U
   OB_WRP_PAGES48TO51=0x00001000U
   OB_WRP_PAGES4TO7=0x00000002U
   OB_WRP_PAGES52TO55=0x00002000U
   OB_WRP_PAGES56TO59=0x00004000U
   OB_WRP_PAGES60TO63=0x00008000U
   OB_WRP_PAGES64TO67=0x00010000U
   OB_WRP_PAGES64TO95MASK=0x00FF0000U
   OB_WRP_PAGES68TO71=0x00020000U
   OB_WRP_PAGES72TO75=0x00040000U
   OB_WRP_PAGES76TO79=0x00080000U
   OB_WRP_PAGES80TO83=0x00100000U
   OB_WRP_PAGES84TO87=0x00200000U
   OB_WRP_PAGES88TO91=0x00400000U
   OB_WRP_PAGES8TO11=0x00000004U
   OB_WRP_PAGES92TO95=0x00800000U
   OB_WRP_PAGES96TO127MASK=0xFF000000U
   OB_WRP_PAGES96TO99=0x01000000U
   offsetof(TYPE,MEMBER)=__builtin_offsetof (TYPE, MEMBER)
   OPTIONBYTE_DATA=0x08U
   OPTIONBYTE_RDP=0x02U
   OPTIONBYTE_USER=0x04U
   OPTIONBYTE_WRP=0x01U
   OTG_FS_WKUP_IRQHandler=USBWakeUp_IRQHandler
   OTG_FS_WKUP_IRQn=USBWakeUp_IRQn
   PDP_ENDIAN=_PDP_ENDIAN
   PERIPH_BASE=0x40000000U
   PERIPH_BB_BASE=0x42000000U
   physadr=physadr_t
   PHY_AUTONEGOTIATION=((uint16_t)0x1000)
   PHY_AUTONEGO_COMPLETE=((uint16_t)0x0020)
   PHY_BCR=((uint16_t)0x00)
   PHY_BSR=((uint16_t)0x01)
   PHY_CONFIG_DELAY=((uint32_t)0x00000FFF)
   PHY_DUPLEX_STATUS=((uint16_t)0x0004U)
   PHY_FULLDUPLEX_100M=((uint16_t)0x2100)
   PHY_FULLDUPLEX_10M=((uint16_t)0x0100)
   PHY_HALFDUPLEX_100M=((uint16_t)0x2000)
   PHY_HALFDUPLEX_10M=((uint16_t)0x0000)
   PHY_ISOLATE=((uint16_t)0x0400)
   PHY_JABBER_DETECTION=((uint16_t)0x0002)
   PHY_LINKED_STATUS=((uint16_t)0x0004)
   PHY_LOOPBACK=((uint16_t)0x4000)
   PHY_POWERDOWN=((uint16_t)0x0800)
   PHY_READ_TO=((uint32_t)0x0000FFFF)
   PHY_RESET=((uint16_t)0x8000)
   PHY_RESET_DELAY=((uint32_t)0x000000FF)
   PHY_RESTART_AUTONEGOTIATION=((uint16_t)0x0200)
   PHY_SPEED_STATUS=((uint16_t)0x0002U)
   PHY_SR=((uint16_t)0x10U)
   PHY_WRITE_TO=((uint32_t)0x0000FFFF)
   PLL_TIMEOUT_VALUE=2U
   POSITION_VAL(VAL)=(__CLZ(__RBIT(VAL)))
   PREFETCH_ENABLE=1
   PTRDIFF_MAX=(__PTRDIFF_MAX__)
   PTRDIFF_MIN=(-PTRDIFF_MAX - 1)
   putc(x,fp)=__sputc_r(_REENT, x, fp)
   putchar(x)=putc(x, stdout)
   putchar_unlocked(x)=putc_unlocked(x, stdout)
   PWR=((PWR_TypeDef *)PWR_BASE)
   PWR_BASE=(APB1PERIPH_BASE + 0x00007000U)
   PWR_CR_CSBF=PWR_CR_CSBF_Msk
   PWR_CR_CSBF_Msk=(0x1U << PWR_CR_CSBF_Pos)
   PWR_CR_CSBF_Pos=(3U)
   PWR_CR_CWUF=PWR_CR_CWUF_Msk
   PWR_CR_CWUF_Msk=(0x1U << PWR_CR_CWUF_Pos)
   PWR_CR_CWUF_Pos=(2U)
   PWR_CR_DBP=PWR_CR_DBP_Msk
   PWR_CR_DBP_Msk=(0x1U << PWR_CR_DBP_Pos)
   PWR_CR_DBP_Pos=(8U)
   PWR_CR_LPDS=PWR_CR_LPDS_Msk
   PWR_CR_LPDS_Msk=(0x1U << PWR_CR_LPDS_Pos)
   PWR_CR_LPDS_Pos=(0U)
   PWR_CR_PDDS=PWR_CR_PDDS_Msk
   PWR_CR_PDDS_Msk=(0x1U << PWR_CR_PDDS_Pos)
   PWR_CR_PDDS_Pos=(1U)
   PWR_CR_PLS=PWR_CR_PLS_Msk
   PWR_CR_PLS_0=(0x1U << PWR_CR_PLS_Pos)
   PWR_CR_PLS_1=(0x2U << PWR_CR_PLS_Pos)
   PWR_CR_PLS_2=(0x4U << PWR_CR_PLS_Pos)
   PWR_CR_PLS_2V2=PWR_CR_PLS_LEV0
   PWR_CR_PLS_2V3=PWR_CR_PLS_LEV1
   PWR_CR_PLS_2V4=PWR_CR_PLS_LEV2
   PWR_CR_PLS_2V5=PWR_CR_PLS_LEV3
   PWR_CR_PLS_2V6=PWR_CR_PLS_LEV4
   PWR_CR_PLS_2V7=PWR_CR_PLS_LEV5
   PWR_CR_PLS_2V8=PWR_CR_PLS_LEV6
   PWR_CR_PLS_2V9=PWR_CR_PLS_LEV7
   PWR_CR_PLS_LEV0=0x00000000U
   PWR_CR_PLS_LEV1=0x00000020U
   PWR_CR_PLS_LEV2=0x00000040U
   PWR_CR_PLS_LEV3=0x00000060U
   PWR_CR_PLS_LEV4=0x00000080U
   PWR_CR_PLS_LEV5=0x000000A0U
   PWR_CR_PLS_LEV6=0x000000C0U
   PWR_CR_PLS_LEV7=0x000000E0U
   PWR_CR_PLS_Msk=(0x7U << PWR_CR_PLS_Pos)
   PWR_CR_PLS_Pos=(5U)
   PWR_CR_PVDE=PWR_CR_PVDE_Msk
   PWR_CR_PVDE_Msk=(0x1U << PWR_CR_PVDE_Pos)
   PWR_CR_PVDE_Pos=(4U)
   PWR_CSR_EWUP=PWR_CSR_EWUP_Msk
   PWR_CSR_EWUP_Msk=(0x1U << PWR_CSR_EWUP_Pos)
   PWR_CSR_EWUP_Pos=(8U)
   PWR_CSR_PVDO=PWR_CSR_PVDO_Msk
   PWR_CSR_PVDO_Msk=(0x1U << PWR_CSR_PVDO_Pos)
   PWR_CSR_PVDO_Pos=(2U)
   PWR_CSR_SBF=PWR_CSR_SBF_Msk
   PWR_CSR_SBF_Msk=(0x1U << PWR_CSR_SBF_Pos)
   PWR_CSR_SBF_Pos=(1U)
   PWR_CSR_WUF=PWR_CSR_WUF_Msk
   PWR_CSR_WUF_Msk=(0x1U << PWR_CSR_WUF_Pos)
   PWR_CSR_WUF_Pos=(0U)
   PWR_EXTI_LINE_PVD=((uint32_t)0x00010000)
   PWR_FLAG_PVDO=PWR_CSR_PVDO
   PWR_FLAG_SB=PWR_CSR_SBF
   PWR_FLAG_WU=PWR_CSR_WUF
   PWR_LOWPOWERREGULATOR_ON=PWR_CR_LPDS
   PWR_MAINREGULATOR_ON=0x00000000U
   PWR_PVDLEVEL_0=PWR_CR_PLS_2V2
   PWR_PVDLEVEL_1=PWR_CR_PLS_2V3
   PWR_PVDLEVEL_2=PWR_CR_PLS_2V4
   PWR_PVDLEVEL_3=PWR_CR_PLS_2V5
   PWR_PVDLEVEL_4=PWR_CR_PLS_2V6
   PWR_PVDLEVEL_5=PWR_CR_PLS_2V7
   PWR_PVDLEVEL_6=PWR_CR_PLS_2V8
   PWR_PVDLEVEL_7=PWR_CR_PLS_2V9
   PWR_PVD_MODE_EVENT_FALLING=0x00020002U
   PWR_PVD_MODE_EVENT_RISING=0x00020001U
   PWR_PVD_MODE_EVENT_RISING_FALLING=0x00020003U
   PWR_PVD_MODE_IT_FALLING=0x00010002U
   PWR_PVD_MODE_IT_RISING=0x00010001U
   PWR_PVD_MODE_IT_RISING_FALLING=0x00010003U
   PWR_PVD_MODE_NORMAL=0x00000000U
   PWR_SLEEPENTRY_WFE=((uint8_t)0x02)
   PWR_SLEEPENTRY_WFI=((uint8_t)0x01)
   PWR_STOPENTRY_WFE=((uint8_t)0x02)
   PWR_STOPENTRY_WFI=((uint8_t)0x01)
   PWR_WAKEUP_PIN1=PWR_CSR_EWUP
   P_tmpdir="/tmp"
   quad=quad_t
   RCC=((RCC_TypeDef *)RCC_BASE)
   RCC_ADCPCLK2_DIV2=RCC_CFGR_ADCPRE_DIV2
   RCC_ADCPCLK2_DIV4=RCC_CFGR_ADCPRE_DIV4
   RCC_ADCPCLK2_DIV6=RCC_CFGR_ADCPRE_DIV6
   RCC_ADCPCLK2_DIV8=RCC_CFGR_ADCPRE_DIV8
   RCC_AHBENR_CRCEN=RCC_AHBENR_CRCEN_Msk
   RCC_AHBENR_CRCEN_Msk=(0x1U << RCC_AHBENR_CRCEN_Pos)
   RCC_AHBENR_CRCEN_Pos=(6U)
   RCC_AHBENR_DMA1EN=RCC_AHBENR_DMA1EN_Msk
   RCC_AHBENR_DMA1EN_Msk=(0x1U << RCC_AHBENR_DMA1EN_Pos)
   RCC_AHBENR_DMA1EN_Pos=(0U)
   RCC_AHBENR_FLITFEN=RCC_AHBENR_FLITFEN_Msk
   RCC_AHBENR_FLITFEN_Msk=(0x1U << RCC_AHBENR_FLITFEN_Pos)
   RCC_AHBENR_FLITFEN_Pos=(4U)
   RCC_AHBENR_SRAMEN=RCC_AHBENR_SRAMEN_Msk
   RCC_AHBENR_SRAMEN_Msk=(0x1U << RCC_AHBENR_SRAMEN_Pos)
   RCC_AHBENR_SRAMEN_Pos=(2U)
   RCC_APB1ENR_BKPEN=RCC_APB1ENR_BKPEN_Msk
   RCC_APB1ENR_BKPEN_Msk=(0x1U << RCC_APB1ENR_BKPEN_Pos)
   RCC_APB1ENR_BKPEN_Pos=(27U)
   RCC_APB1ENR_CAN1EN=RCC_APB1ENR_CAN1EN_Msk
   RCC_APB1ENR_CAN1EN_Msk=(0x1U << RCC_APB1ENR_CAN1EN_Pos)
   RCC_APB1ENR_CAN1EN_Pos=(25U)
   RCC_APB1ENR_I2C1EN=RCC_APB1ENR_I2C1EN_Msk
   RCC_APB1ENR_I2C1EN_Msk=(0x1U << RCC_APB1ENR_I2C1EN_Pos)
   RCC_APB1ENR_I2C1EN_Pos=(21U)
   RCC_APB1ENR_I2C2EN=RCC_APB1ENR_I2C2EN_Msk
   RCC_APB1ENR_I2C2EN_Msk=(0x1U << RCC_APB1ENR_I2C2EN_Pos)
   RCC_APB1ENR_I2C2EN_Pos=(22U)
   RCC_APB1ENR_PWREN=RCC_APB1ENR_PWREN_Msk
   RCC_APB1ENR_PWREN_Msk=(0x1U << RCC_APB1ENR_PWREN_Pos)
   RCC_APB1ENR_PWREN_Pos=(28U)
   RCC_APB1ENR_SPI2EN=RCC_APB1ENR_SPI2EN_Msk
   RCC_APB1ENR_SPI2EN_Msk=(0x1U << RCC_APB1ENR_SPI2EN_Pos)
   RCC_APB1ENR_SPI2EN_Pos=(14U)
   RCC_APB1ENR_TIM2EN=RCC_APB1ENR_TIM2EN_Msk
   RCC_APB1ENR_TIM2EN_Msk=(0x1U << RCC_APB1ENR_TIM2EN_Pos)
   RCC_APB1ENR_TIM2EN_Pos=(0U)
   RCC_APB1ENR_TIM3EN=RCC_APB1ENR_TIM3EN_Msk
   RCC_APB1ENR_TIM3EN_Msk=(0x1U << RCC_APB1ENR_TIM3EN_Pos)
   RCC_APB1ENR_TIM3EN_Pos=(1U)
   RCC_APB1ENR_TIM4EN=RCC_APB1ENR_TIM4EN_Msk
   RCC_APB1ENR_TIM4EN_Msk=(0x1U << RCC_APB1ENR_TIM4EN_Pos)
   RCC_APB1ENR_TIM4EN_Pos=(2U)
   RCC_APB1ENR_USART2EN=RCC_APB1ENR_USART2EN_Msk
   RCC_APB1ENR_USART2EN_Msk=(0x1U << RCC_APB1ENR_USART2EN_Pos)
   RCC_APB1ENR_USART2EN_Pos=(17U)
   RCC_APB1ENR_USART3EN=RCC_APB1ENR_USART3EN_Msk
   RCC_APB1ENR_USART3EN_Msk=(0x1U << RCC_APB1ENR_USART3EN_Pos)
   RCC_APB1ENR_USART3EN_Pos=(18U)
   RCC_APB1ENR_USBEN=RCC_APB1ENR_USBEN_Msk
   RCC_APB1ENR_USBEN_Msk=(0x1U << RCC_APB1ENR_USBEN_Pos)
   RCC_APB1ENR_USBEN_Pos=(23U)
   RCC_APB1ENR_WWDGEN=RCC_APB1ENR_WWDGEN_Msk
   RCC_APB1ENR_WWDGEN_Msk=(0x1U << RCC_APB1ENR_WWDGEN_Pos)
   RCC_APB1ENR_WWDGEN_Pos=(11U)
   RCC_APB1RSTR_BKPRST=RCC_APB1RSTR_BKPRST_Msk
   RCC_APB1RSTR_BKPRST_Msk=(0x1U << RCC_APB1RSTR_BKPRST_Pos)
   RCC_APB1RSTR_BKPRST_Pos=(27U)
   RCC_APB1RSTR_CAN1RST=RCC_APB1RSTR_CAN1RST_Msk
   RCC_APB1RSTR_CAN1RST_Msk=(0x1U << RCC_APB1RSTR_CAN1RST_Pos)
   RCC_APB1RSTR_CAN1RST_Pos=(25U)
   RCC_APB1RSTR_I2C1RST=RCC_APB1RSTR_I2C1RST_Msk
   RCC_APB1RSTR_I2C1RST_Msk=(0x1U << RCC_APB1RSTR_I2C1RST_Pos)
   RCC_APB1RSTR_I2C1RST_Pos=(21U)
   RCC_APB1RSTR_I2C2RST=RCC_APB1RSTR_I2C2RST_Msk
   RCC_APB1RSTR_I2C2RST_Msk=(0x1U << RCC_APB1RSTR_I2C2RST_Pos)
   RCC_APB1RSTR_I2C2RST_Pos=(22U)
   RCC_APB1RSTR_PWRRST=RCC_APB1RSTR_PWRRST_Msk
   RCC_APB1RSTR_PWRRST_Msk=(0x1U << RCC_APB1RSTR_PWRRST_Pos)
   RCC_APB1RSTR_PWRRST_Pos=(28U)
   RCC_APB1RSTR_SPI2RST=RCC_APB1RSTR_SPI2RST_Msk
   RCC_APB1RSTR_SPI2RST_Msk=(0x1U << RCC_APB1RSTR_SPI2RST_Pos)
   RCC_APB1RSTR_SPI2RST_Pos=(14U)
   RCC_APB1RSTR_TIM2RST=RCC_APB1RSTR_TIM2RST_Msk
   RCC_APB1RSTR_TIM2RST_Msk=(0x1U << RCC_APB1RSTR_TIM2RST_Pos)
   RCC_APB1RSTR_TIM2RST_Pos=(0U)
   RCC_APB1RSTR_TIM3RST=RCC_APB1RSTR_TIM3RST_Msk
   RCC_APB1RSTR_TIM3RST_Msk=(0x1U << RCC_APB1RSTR_TIM3RST_Pos)
   RCC_APB1RSTR_TIM3RST_Pos=(1U)
   RCC_APB1RSTR_TIM4RST=RCC_APB1RSTR_TIM4RST_Msk
   RCC_APB1RSTR_TIM4RST_Msk=(0x1U << RCC_APB1RSTR_TIM4RST_Pos)
   RCC_APB1RSTR_TIM4RST_Pos=(2U)
   RCC_APB1RSTR_USART2RST=RCC_APB1RSTR_USART2RST_Msk
   RCC_APB1RSTR_USART2RST_Msk=(0x1U << RCC_APB1RSTR_USART2RST_Pos)
   RCC_APB1RSTR_USART2RST_Pos=(17U)
   RCC_APB1RSTR_USART3RST=RCC_APB1RSTR_USART3RST_Msk
   RCC_APB1RSTR_USART3RST_Msk=(0x1U << RCC_APB1RSTR_USART3RST_Pos)
   RCC_APB1RSTR_USART3RST_Pos=(18U)
   RCC_APB1RSTR_USBRST=RCC_APB1RSTR_USBRST_Msk
   RCC_APB1RSTR_USBRST_Msk=(0x1U << RCC_APB1RSTR_USBRST_Pos)
   RCC_APB1RSTR_USBRST_Pos=(23U)
   RCC_APB1RSTR_WWDGRST=RCC_APB1RSTR_WWDGRST_Msk
   RCC_APB1RSTR_WWDGRST_Msk=(0x1U << RCC_APB1RSTR_WWDGRST_Pos)
   RCC_APB1RSTR_WWDGRST_Pos=(11U)
   RCC_APB2ENR_ADC1EN=RCC_APB2ENR_ADC1EN_Msk
   RCC_APB2ENR_ADC1EN_Msk=(0x1U << RCC_APB2ENR_ADC1EN_Pos)
   RCC_APB2ENR_ADC1EN_Pos=(9U)
   RCC_APB2ENR_ADC2EN=RCC_APB2ENR_ADC2EN_Msk
   RCC_APB2ENR_ADC2EN_Msk=(0x1U << RCC_APB2ENR_ADC2EN_Pos)
   RCC_APB2ENR_ADC2EN_Pos=(10U)
   RCC_APB2ENR_AFIOEN=RCC_APB2ENR_AFIOEN_Msk
   RCC_APB2ENR_AFIOEN_Msk=(0x1U << RCC_APB2ENR_AFIOEN_Pos)
   RCC_APB2ENR_AFIOEN_Pos=(0U)
   RCC_APB2ENR_IOPAEN=RCC_APB2ENR_IOPAEN_Msk
   RCC_APB2ENR_IOPAEN_Msk=(0x1U << RCC_APB2ENR_IOPAEN_Pos)
   RCC_APB2ENR_IOPAEN_Pos=(2U)
   RCC_APB2ENR_IOPBEN=RCC_APB2ENR_IOPBEN_Msk
   RCC_APB2ENR_IOPBEN_Msk=(0x1U << RCC_APB2ENR_IOPBEN_Pos)
   RCC_APB2ENR_IOPBEN_Pos=(3U)
   RCC_APB2ENR_IOPCEN=RCC_APB2ENR_IOPCEN_Msk
   RCC_APB2ENR_IOPCEN_Msk=(0x1U << RCC_APB2ENR_IOPCEN_Pos)
   RCC_APB2ENR_IOPCEN_Pos=(4U)
   RCC_APB2ENR_IOPDEN=RCC_APB2ENR_IOPDEN_Msk
   RCC_APB2ENR_IOPDEN_Msk=(0x1U << RCC_APB2ENR_IOPDEN_Pos)
   RCC_APB2ENR_IOPDEN_Pos=(5U)
   RCC_APB2ENR_IOPEEN=RCC_APB2ENR_IOPEEN_Msk
   RCC_APB2ENR_IOPEEN_Msk=(0x1U << RCC_APB2ENR_IOPEEN_Pos)
   RCC_APB2ENR_IOPEEN_Pos=(6U)
   RCC_APB2ENR_SPI1EN=RCC_APB2ENR_SPI1EN_Msk
   RCC_APB2ENR_SPI1EN_Msk=(0x1U << RCC_APB2ENR_SPI1EN_Pos)
   RCC_APB2ENR_SPI1EN_Pos=(12U)
   RCC_APB2ENR_TIM1EN=RCC_APB2ENR_TIM1EN_Msk
   RCC_APB2ENR_TIM1EN_Msk=(0x1U << RCC_APB2ENR_TIM1EN_Pos)
   RCC_APB2ENR_TIM1EN_Pos=(11U)
   RCC_APB2ENR_USART1EN=RCC_APB2ENR_USART1EN_Msk
   RCC_APB2ENR_USART1EN_Msk=(0x1U << RCC_APB2ENR_USART1EN_Pos)
   RCC_APB2ENR_USART1EN_Pos=(14U)
   RCC_APB2RSTR_ADC1RST=RCC_APB2RSTR_ADC1RST_Msk
   RCC_APB2RSTR_ADC1RST_Msk=(0x1U << RCC_APB2RSTR_ADC1RST_Pos)
   RCC_APB2RSTR_ADC1RST_Pos=(9U)
   RCC_APB2RSTR_ADC2RST=RCC_APB2RSTR_ADC2RST_Msk
   RCC_APB2RSTR_ADC2RST_Msk=(0x1U << RCC_APB2RSTR_ADC2RST_Pos)
   RCC_APB2RSTR_ADC2RST_Pos=(10U)
   RCC_APB2RSTR_AFIORST=RCC_APB2RSTR_AFIORST_Msk
   RCC_APB2RSTR_AFIORST_Msk=(0x1U << RCC_APB2RSTR_AFIORST_Pos)
   RCC_APB2RSTR_AFIORST_Pos=(0U)
   RCC_APB2RSTR_IOPARST=RCC_APB2RSTR_IOPARST_Msk
   RCC_APB2RSTR_IOPARST_Msk=(0x1U << RCC_APB2RSTR_IOPARST_Pos)
   RCC_APB2RSTR_IOPARST_Pos=(2U)
   RCC_APB2RSTR_IOPBRST=RCC_APB2RSTR_IOPBRST_Msk
   RCC_APB2RSTR_IOPBRST_Msk=(0x1U << RCC_APB2RSTR_IOPBRST_Pos)
   RCC_APB2RSTR_IOPBRST_Pos=(3U)
   RCC_APB2RSTR_IOPCRST=RCC_APB2RSTR_IOPCRST_Msk
   RCC_APB2RSTR_IOPCRST_Msk=(0x1U << RCC_APB2RSTR_IOPCRST_Pos)
   RCC_APB2RSTR_IOPCRST_Pos=(4U)
   RCC_APB2RSTR_IOPDRST=RCC_APB2RSTR_IOPDRST_Msk
   RCC_APB2RSTR_IOPDRST_Msk=(0x1U << RCC_APB2RSTR_IOPDRST_Pos)
   RCC_APB2RSTR_IOPDRST_Pos=(5U)
   RCC_APB2RSTR_IOPERST=RCC_APB2RSTR_IOPERST_Msk
   RCC_APB2RSTR_IOPERST_Msk=(0x1U << RCC_APB2RSTR_IOPERST_Pos)
   RCC_APB2RSTR_IOPERST_Pos=(6U)
   RCC_APB2RSTR_SPI1RST=RCC_APB2RSTR_SPI1RST_Msk
   RCC_APB2RSTR_SPI1RST_Msk=(0x1U << RCC_APB2RSTR_SPI1RST_Pos)
   RCC_APB2RSTR_SPI1RST_Pos=(12U)
   RCC_APB2RSTR_TIM1RST=RCC_APB2RSTR_TIM1RST_Msk
   RCC_APB2RSTR_TIM1RST_Msk=(0x1U << RCC_APB2RSTR_TIM1RST_Pos)
   RCC_APB2RSTR_TIM1RST_Pos=(11U)
   RCC_APB2RSTR_USART1RST=RCC_APB2RSTR_USART1RST_Msk
   RCC_APB2RSTR_USART1RST_Msk=(0x1U << RCC_APB2RSTR_USART1RST_Pos)
   RCC_APB2RSTR_USART1RST_Pos=(14U)
   RCC_BASE=(AHBPERIPH_BASE + 0x00001000U)
   RCC_BDCR_BDRST=RCC_BDCR_BDRST_Msk
   RCC_BDCR_BDRST_BB=((uint32_t)(PERIPH_BB_BASE + (RCC_BDCR_OFFSET_BB * 32U) + (RCC_BDRST_BIT_NUMBER * 4U)))
   RCC_BDCR_BDRST_Msk=(0x1U << RCC_BDCR_BDRST_Pos)
   RCC_BDCR_BDRST_Pos=(16U)
   RCC_BDCR_LSEBYP=RCC_BDCR_LSEBYP_Msk
   RCC_BDCR_LSEBYP_BB=((uint32_t)(PERIPH_BB_BASE + (RCC_BDCR_OFFSET_BB * 32U) + (RCC_LSEBYP_BIT_NUMBER * 4U)))
   RCC_BDCR_LSEBYP_Msk=(0x1U << RCC_BDCR_LSEBYP_Pos)
   RCC_BDCR_LSEBYP_Pos=(2U)
   RCC_BDCR_LSEON=RCC_BDCR_LSEON_Msk
   RCC_BDCR_LSEON_BB=((uint32_t)(PERIPH_BB_BASE + (RCC_BDCR_OFFSET_BB * 32U) + (RCC_LSEON_BIT_NUMBER * 4U)))
   RCC_BDCR_LSEON_Msk=(0x1U << RCC_BDCR_LSEON_Pos)
   RCC_BDCR_LSEON_Pos=(0U)
   RCC_BDCR_LSERDY=RCC_BDCR_LSERDY_Msk
   RCC_BDCR_LSERDY_Msk=(0x1U << RCC_BDCR_LSERDY_Pos)
   RCC_BDCR_LSERDY_Pos=(1U)
   RCC_BDCR_OFFSET=0x20U
   RCC_BDCR_OFFSET_BB=(RCC_OFFSET + RCC_BDCR_OFFSET)
   RCC_BDCR_RTCEN=RCC_BDCR_RTCEN_Msk
   RCC_BDCR_RTCEN_BB=((uint32_t)(PERIPH_BB_BASE + (RCC_BDCR_OFFSET_BB * 32U) + (RCC_RTCEN_BIT_NUMBER * 4U)))
   RCC_BDCR_RTCEN_Msk=(0x1U << RCC_BDCR_RTCEN_Pos)
   RCC_BDCR_RTCEN_Pos=(15U)
   RCC_BDCR_RTCSEL=RCC_BDCR_RTCSEL_Msk
   RCC_BDCR_RTCSEL_0=(0x1U << RCC_BDCR_RTCSEL_Pos)
   RCC_BDCR_RTCSEL_1=(0x2U << RCC_BDCR_RTCSEL_Pos)
   RCC_BDCR_RTCSEL_HSE=0x00000300U
   RCC_BDCR_RTCSEL_LSE=0x00000100U
   RCC_BDCR_RTCSEL_LSI=0x00000200U
   RCC_BDCR_RTCSEL_Msk=(0x3U << RCC_BDCR_RTCSEL_Pos)
   RCC_BDCR_RTCSEL_NOCLOCK=0x00000000U
   RCC_BDCR_RTCSEL_Pos=(8U)
   RCC_BDRST_BIT_NUMBER=RCC_BDCR_BDRST_Pos
   RCC_CFGR_ADCPRE=RCC_CFGR_ADCPRE_Msk
   RCC_CFGR_ADCPRE_0=(0x1U << RCC_CFGR_ADCPRE_Pos)
   RCC_CFGR_ADCPRE_1=(0x2U << RCC_CFGR_ADCPRE_Pos)
   RCC_CFGR_ADCPRE_DIV2=0x00000000U
   RCC_CFGR_ADCPRE_DIV4=0x00004000U
   RCC_CFGR_ADCPRE_DIV6=0x00008000U
   RCC_CFGR_ADCPRE_DIV8=0x0000C000U
   RCC_CFGR_ADCPRE_Msk=(0x3U << RCC_CFGR_ADCPRE_Pos)
   RCC_CFGR_ADCPRE_Pos=(14U)
   RCC_CFGR_HPRE=RCC_CFGR_HPRE_Msk
   RCC_CFGR_HPRE_0=(0x1U << RCC_CFGR_HPRE_Pos)
   RCC_CFGR_HPRE_1=(0x2U << RCC_CFGR_HPRE_Pos)
   RCC_CFGR_HPRE_2=(0x4U << RCC_CFGR_HPRE_Pos)
   RCC_CFGR_HPRE_3=(0x8U << RCC_CFGR_HPRE_Pos)
   RCC_CFGR_HPRE_DIV128=0x000000D0U
   RCC_CFGR_HPRE_DIV16=0x000000B0U
   RCC_CFGR_HPRE_DIV1=0x00000000U
   RCC_CFGR_HPRE_DIV256=0x000000E0U
   RCC_CFGR_HPRE_DIV2=0x00000080U
   RCC_CFGR_HPRE_DIV4=0x00000090U
   RCC_CFGR_HPRE_DIV512=0x000000F0U
   RCC_CFGR_HPRE_DIV64=0x000000C0U
   RCC_CFGR_HPRE_DIV8=0x000000A0U
   RCC_CFGR_HPRE_Msk=(0xFU << RCC_CFGR_HPRE_Pos)
   RCC_CFGR_HPRE_Pos=(4U)
   RCC_CFGR_MCO=RCC_CFGR_MCO_Msk
   RCC_CFGR_MCOSEL=RCC_CFGR_MCO
   RCC_CFGR_MCOSEL_0=RCC_CFGR_MCO_0
   RCC_CFGR_MCOSEL_1=RCC_CFGR_MCO_1
   RCC_CFGR_MCOSEL_2=RCC_CFGR_MCO_2
   RCC_CFGR_MCOSEL_HSE=RCC_CFGR_MCO_HSE
   RCC_CFGR_MCOSEL_HSI=RCC_CFGR_MCO_HSI
   RCC_CFGR_MCOSEL_NOCLOCK=RCC_CFGR_MCO_NOCLOCK
   RCC_CFGR_MCOSEL_PLL_DIV2=RCC_CFGR_MCO_PLLCLK_DIV2
   RCC_CFGR_MCOSEL_SYSCLK=RCC_CFGR_MCO_SYSCLK
   RCC_CFGR_MCO_0=(0x1U << RCC_CFGR_MCO_Pos)
   RCC_CFGR_MCO_1=(0x2U << RCC_CFGR_MCO_Pos)
   RCC_CFGR_MCO_2=(0x4U << RCC_CFGR_MCO_Pos)
   RCC_CFGR_MCO_HSE=0x06000000U
   RCC_CFGR_MCO_HSI=0x05000000U
   RCC_CFGR_MCO_Msk=(0x7U << RCC_CFGR_MCO_Pos)
   RCC_CFGR_MCO_NOCLOCK=0x00000000U
   RCC_CFGR_MCO_PLLCLK_DIV2=0x07000000U
   RCC_CFGR_MCO_Pos=(24U)
   RCC_CFGR_MCO_SYSCLK=0x04000000U
   RCC_CFGR_OFFSET=0x04U
   RCC_CFGR_OFFSET_BB=(RCC_OFFSET + RCC_CFGR_OFFSET)
   RCC_CFGR_PLLMULL10=RCC_CFGR_PLLMULL10_Msk
   RCC_CFGR_PLLMULL10_Msk=(0x1U << RCC_CFGR_PLLMULL10_Pos)
   RCC_CFGR_PLLMULL10_Pos=(21U)
   RCC_CFGR_PLLMULL11=RCC_CFGR_PLLMULL11_Msk
   RCC_CFGR_PLLMULL11_Msk=(0x9U << RCC_CFGR_PLLMULL11_Pos)
   RCC_CFGR_PLLMULL11_Pos=(18U)
   RCC_CFGR_PLLMULL12=RCC_CFGR_PLLMULL12_Msk
   RCC_CFGR_PLLMULL12_Msk=(0x5U << RCC_CFGR_PLLMULL12_Pos)
   RCC_CFGR_PLLMULL12_Pos=(19U)
   RCC_CFGR_PLLMULL13=RCC_CFGR_PLLMULL13_Msk
   RCC_CFGR_PLLMULL13_Msk=(0xBU << RCC_CFGR_PLLMULL13_Pos)
   RCC_CFGR_PLLMULL13_Pos=(18U)
   RCC_CFGR_PLLMULL14=RCC_CFGR_PLLMULL14_Msk
   RCC_CFGR_PLLMULL14_Msk=(0x3U << RCC_CFGR_PLLMULL14_Pos)
   RCC_CFGR_PLLMULL14_Pos=(20U)
   RCC_CFGR_PLLMULL15=RCC_CFGR_PLLMULL15_Msk
   RCC_CFGR_PLLMULL15_Msk=(0xDU << RCC_CFGR_PLLMULL15_Pos)
   RCC_CFGR_PLLMULL15_Pos=(18U)
   RCC_CFGR_PLLMULL16=RCC_CFGR_PLLMULL16_Msk
   RCC_CFGR_PLLMULL16_Msk=(0x7U << RCC_CFGR_PLLMULL16_Pos)
   RCC_CFGR_PLLMULL16_Pos=(19U)
   RCC_CFGR_PLLMULL2=0x00000000U
   RCC_CFGR_PLLMULL3=RCC_CFGR_PLLMULL3_Msk
   RCC_CFGR_PLLMULL3_Msk=(0x1U << RCC_CFGR_PLLMULL3_Pos)
   RCC_CFGR_PLLMULL3_Pos=(18U)
   RCC_CFGR_PLLMULL4=RCC_CFGR_PLLMULL4_Msk
   RCC_CFGR_PLLMULL4_Msk=(0x1U << RCC_CFGR_PLLMULL4_Pos)
   RCC_CFGR_PLLMULL4_Pos=(19U)
   RCC_CFGR_PLLMULL5=RCC_CFGR_PLLMULL5_Msk
   RCC_CFGR_PLLMULL5_Msk=(0x3U << RCC_CFGR_PLLMULL5_Pos)
   RCC_CFGR_PLLMULL5_Pos=(18U)
   RCC_CFGR_PLLMULL6=RCC_CFGR_PLLMULL6_Msk
   RCC_CFGR_PLLMULL6_Msk=(0x1U << RCC_CFGR_PLLMULL6_Pos)
   RCC_CFGR_PLLMULL6_Pos=(20U)
   RCC_CFGR_PLLMULL7=RCC_CFGR_PLLMULL7_Msk
   RCC_CFGR_PLLMULL7_Msk=(0x5U << RCC_CFGR_PLLMULL7_Pos)
   RCC_CFGR_PLLMULL7_Pos=(18U)
   RCC_CFGR_PLLMULL8=RCC_CFGR_PLLMULL8_Msk
   RCC_CFGR_PLLMULL8_Msk=(0x3U << RCC_CFGR_PLLMULL8_Pos)
   RCC_CFGR_PLLMULL8_Pos=(19U)
   RCC_CFGR_PLLMULL9=RCC_CFGR_PLLMULL9_Msk
   RCC_CFGR_PLLMULL9_Msk=(0x7U << RCC_CFGR_PLLMULL9_Pos)
   RCC_CFGR_PLLMULL9_Pos=(18U)
   RCC_CFGR_PLLMULL=RCC_CFGR_PLLMULL_Msk
   RCC_CFGR_PLLMULL_0=(0x1U << RCC_CFGR_PLLMULL_Pos)
   RCC_CFGR_PLLMULL_1=(0x2U << RCC_CFGR_PLLMULL_Pos)
   RCC_CFGR_PLLMULL_2=(0x4U << RCC_CFGR_PLLMULL_Pos)
   RCC_CFGR_PLLMULL_3=(0x8U << RCC_CFGR_PLLMULL_Pos)
   RCC_CFGR_PLLMULL_Msk=(0xFU << RCC_CFGR_PLLMULL_Pos)
   RCC_CFGR_PLLMULL_Pos=(18U)
   RCC_CFGR_PLLSRC=RCC_CFGR_PLLSRC_Msk
   RCC_CFGR_PLLSRC_Msk=(0x1U << RCC_CFGR_PLLSRC_Pos)
   RCC_CFGR_PLLSRC_Pos=(16U)
   RCC_CFGR_PLLXTPRE=RCC_CFGR_PLLXTPRE_Msk
   RCC_CFGR_PLLXTPRE_HSE=0x00000000U
   RCC_CFGR_PLLXTPRE_HSE_DIV2=0x00020000U
   RCC_CFGR_PLLXTPRE_Msk=(0x1U << RCC_CFGR_PLLXTPRE_Pos)
   RCC_CFGR_PLLXTPRE_Pos=(17U)
   RCC_CFGR_PPRE1=RCC_CFGR_PPRE1_Msk
   RCC_CFGR_PPRE1_0=(0x1U << RCC_CFGR_PPRE1_Pos)
   RCC_CFGR_PPRE1_1=(0x2U << RCC_CFGR_PPRE1_Pos)
   RCC_CFGR_PPRE1_2=(0x4U << RCC_CFGR_PPRE1_Pos)
   RCC_CFGR_PPRE1_DIV16=0x00000700U
   RCC_CFGR_PPRE1_DIV1=0x00000000U
   RCC_CFGR_PPRE1_DIV2=0x00000400U
   RCC_CFGR_PPRE1_DIV4=0x00000500U
   RCC_CFGR_PPRE1_DIV8=0x00000600U
   RCC_CFGR_PPRE1_Msk=(0x7U << RCC_CFGR_PPRE1_Pos)
   RCC_CFGR_PPRE1_Pos=(8U)
   RCC_CFGR_PPRE2=RCC_CFGR_PPRE2_Msk
   RCC_CFGR_PPRE2_0=(0x1U << RCC_CFGR_PPRE2_Pos)
   RCC_CFGR_PPRE2_1=(0x2U << RCC_CFGR_PPRE2_Pos)
   RCC_CFGR_PPRE2_2=(0x4U << RCC_CFGR_PPRE2_Pos)
   RCC_CFGR_PPRE2_DIV16=0x00003800U
   RCC_CFGR_PPRE2_DIV1=0x00000000U
   RCC_CFGR_PPRE2_DIV2=0x00002000U
   RCC_CFGR_PPRE2_DIV4=0x00002800U
   RCC_CFGR_PPRE2_DIV8=0x00003000U
   RCC_CFGR_PPRE2_Msk=(0x7U << RCC_CFGR_PPRE2_Pos)
   RCC_CFGR_PPRE2_Pos=(11U)
   RCC_CFGR_SW=RCC_CFGR_SW_Msk
   RCC_CFGR_SWS=RCC_CFGR_SWS_Msk
   RCC_CFGR_SWS_0=(0x1U << RCC_CFGR_SWS_Pos)
   RCC_CFGR_SWS_1=(0x2U << RCC_CFGR_SWS_Pos)
   RCC_CFGR_SWS_HSE=0x00000004U
   RCC_CFGR_SWS_HSI=0x00000000U
   RCC_CFGR_SWS_Msk=(0x3U << RCC_CFGR_SWS_Pos)
   RCC_CFGR_SWS_PLL=0x00000008U
   RCC_CFGR_SWS_Pos=(2U)
   RCC_CFGR_SW_0=(0x1U << RCC_CFGR_SW_Pos)
   RCC_CFGR_SW_1=(0x2U << RCC_CFGR_SW_Pos)
   RCC_CFGR_SW_HSE=0x00000001U
   RCC_CFGR_SW_HSI=0x00000000U
   RCC_CFGR_SW_Msk=(0x3U << RCC_CFGR_SW_Pos)
   RCC_CFGR_SW_PLL=0x00000002U
   RCC_CFGR_SW_Pos=(0U)
   RCC_CFGR_USBPRE=RCC_CFGR_USBPRE_Msk
   RCC_CFGR_USBPRE_Msk=(0x1U << RCC_CFGR_USBPRE_Pos)
   RCC_CFGR_USBPRE_Pos=(22U)
   RCC_CIR_BYTE1_ADDRESS=((uint32_t)(RCC_BASE + RCC_CIR_OFFSET + 0x01U))
   RCC_CIR_BYTE2_ADDRESS=((uint32_t)(RCC_BASE + RCC_CIR_OFFSET + 0x02U))
   RCC_CIR_CSSC=RCC_CIR_CSSC_Msk
   RCC_CIR_CSSC_Msk=(0x1U << RCC_CIR_CSSC_Pos)
   RCC_CIR_CSSC_Pos=(23U)
   RCC_CIR_CSSF=RCC_CIR_CSSF_Msk
   RCC_CIR_CSSF_Msk=(0x1U << RCC_CIR_CSSF_Pos)
   RCC_CIR_CSSF_Pos=(7U)
   RCC_CIR_HSERDYC=RCC_CIR_HSERDYC_Msk
   RCC_CIR_HSERDYC_Msk=(0x1U << RCC_CIR_HSERDYC_Pos)
   RCC_CIR_HSERDYC_Pos=(19U)
   RCC_CIR_HSERDYF=RCC_CIR_HSERDYF_Msk
   RCC_CIR_HSERDYF_Msk=(0x1U << RCC_CIR_HSERDYF_Pos)
   RCC_CIR_HSERDYF_Pos=(3U)
   RCC_CIR_HSERDYIE=RCC_CIR_HSERDYIE_Msk
   RCC_CIR_HSERDYIE_Msk=(0x1U << RCC_CIR_HSERDYIE_Pos)
   RCC_CIR_HSERDYIE_Pos=(11U)
   RCC_CIR_HSIRDYC=RCC_CIR_HSIRDYC_Msk
   RCC_CIR_HSIRDYC_Msk=(0x1U << RCC_CIR_HSIRDYC_Pos)
   RCC_CIR_HSIRDYC_Pos=(18U)
   RCC_CIR_HSIRDYF=RCC_CIR_HSIRDYF_Msk
   RCC_CIR_HSIRDYF_Msk=(0x1U << RCC_CIR_HSIRDYF_Pos)
   RCC_CIR_HSIRDYF_Pos=(2U)
   RCC_CIR_HSIRDYIE=RCC_CIR_HSIRDYIE_Msk
   RCC_CIR_HSIRDYIE_Msk=(0x1U << RCC_CIR_HSIRDYIE_Pos)
   RCC_CIR_HSIRDYIE_Pos=(10U)
   RCC_CIR_LSERDYC=RCC_CIR_LSERDYC_Msk
   RCC_CIR_LSERDYC_Msk=(0x1U << RCC_CIR_LSERDYC_Pos)
   RCC_CIR_LSERDYC_Pos=(17U)
   RCC_CIR_LSERDYF=RCC_CIR_LSERDYF_Msk
   RCC_CIR_LSERDYF_Msk=(0x1U << RCC_CIR_LSERDYF_Pos)
   RCC_CIR_LSERDYF_Pos=(1U)
   RCC_CIR_LSERDYIE=RCC_CIR_LSERDYIE_Msk
   RCC_CIR_LSERDYIE_Msk=(0x1U << RCC_CIR_LSERDYIE_Pos)
   RCC_CIR_LSERDYIE_Pos=(9U)
   RCC_CIR_LSIRDYC=RCC_CIR_LSIRDYC_Msk
   RCC_CIR_LSIRDYC_Msk=(0x1U << RCC_CIR_LSIRDYC_Pos)
   RCC_CIR_LSIRDYC_Pos=(16U)
   RCC_CIR_LSIRDYF=RCC_CIR_LSIRDYF_Msk
   RCC_CIR_LSIRDYF_Msk=(0x1U << RCC_CIR_LSIRDYF_Pos)
   RCC_CIR_LSIRDYF_Pos=(0U)
   RCC_CIR_LSIRDYIE=RCC_CIR_LSIRDYIE_Msk
   RCC_CIR_LSIRDYIE_Msk=(0x1U << RCC_CIR_LSIRDYIE_Pos)
   RCC_CIR_LSIRDYIE_Pos=(8U)
   RCC_CIR_OFFSET=0x08U
   RCC_CIR_OFFSET_BB=(RCC_OFFSET + RCC_CIR_OFFSET)
   RCC_CIR_PLLRDYC=RCC_CIR_PLLRDYC_Msk
   RCC_CIR_PLLRDYC_Msk=(0x1U << RCC_CIR_PLLRDYC_Pos)
   RCC_CIR_PLLRDYC_Pos=(20U)
   RCC_CIR_PLLRDYF=RCC_CIR_PLLRDYF_Msk
   RCC_CIR_PLLRDYF_Msk=(0x1U << RCC_CIR_PLLRDYF_Pos)
   RCC_CIR_PLLRDYF_Pos=(4U)
   RCC_CIR_PLLRDYIE=RCC_CIR_PLLRDYIE_Msk
   RCC_CIR_PLLRDYIE_Msk=(0x1U << RCC_CIR_PLLRDYIE_Pos)
   RCC_CIR_PLLRDYIE_Pos=(12U)
   RCC_CLOCKTYPE_HCLK=0x00000002U
   RCC_CLOCKTYPE_PCLK1=0x00000004U
   RCC_CLOCKTYPE_PCLK2=0x00000008U
   RCC_CLOCKTYPE_SYSCLK=0x00000001U
   RCC_CR_BYTE2_ADDRESS=((uint32_t)(RCC_BASE + RCC_CR_OFFSET + 0x02U))
   RCC_CR_CSSON=RCC_CR_CSSON_Msk
   RCC_CR_CSSON_BB=((uint32_t)(PERIPH_BB_BASE + (RCC_CR_OFFSET_BB * 32U) + (RCC_CSSON_BIT_NUMBER * 4U)))
   RCC_CR_CSSON_Msk=(0x1U << RCC_CR_CSSON_Pos)
   RCC_CR_CSSON_Pos=(19U)
   RCC_CR_HSEBYP=RCC_CR_HSEBYP_Msk
   RCC_CR_HSEBYP_Msk=(0x1U << RCC_CR_HSEBYP_Pos)
   RCC_CR_HSEBYP_Pos=(18U)
   RCC_CR_HSEON=RCC_CR_HSEON_Msk
   RCC_CR_HSEON_BB=((uint32_t)(PERIPH_BB_BASE + (RCC_CR_OFFSET_BB * 32U) + (RCC_HSEON_BIT_NUMBER * 4U)))
   RCC_CR_HSEON_Msk=(0x1U << RCC_CR_HSEON_Pos)
   RCC_CR_HSEON_Pos=(16U)
   RCC_CR_HSERDY=RCC_CR_HSERDY_Msk
   RCC_CR_HSERDY_Msk=(0x1U << RCC_CR_HSERDY_Pos)
   RCC_CR_HSERDY_Pos=(17U)
   RCC_CR_HSICAL=RCC_CR_HSICAL_Msk
   RCC_CR_HSICAL_Msk=(0xFFU << RCC_CR_HSICAL_Pos)
   RCC_CR_HSICAL_Pos=(8U)
   RCC_CR_HSION=RCC_CR_HSION_Msk
   RCC_CR_HSION_BB=((uint32_t)(PERIPH_BB_BASE + (RCC_CR_OFFSET_BB * 32U) + (RCC_HSION_BIT_NUMBER * 4U)))
   RCC_CR_HSION_Msk=(0x1U << RCC_CR_HSION_Pos)
   RCC_CR_HSION_Pos=(0U)
   RCC_CR_HSIRDY=RCC_CR_HSIRDY_Msk
   RCC_CR_HSIRDY_Msk=(0x1U << RCC_CR_HSIRDY_Pos)
   RCC_CR_HSIRDY_Pos=(1U)
   RCC_CR_HSITRIM=RCC_CR_HSITRIM_Msk
   RCC_CR_HSITRIM_Msk=(0x1FU << RCC_CR_HSITRIM_Pos)
   RCC_CR_HSITRIM_Pos=(3U)
   RCC_CR_OFFSET=0x00U
   RCC_CR_OFFSET_BB=(RCC_OFFSET + RCC_CR_OFFSET)
   RCC_CR_PLLON=RCC_CR_PLLON_Msk
   RCC_CR_PLLON_BB=((uint32_t)(PERIPH_BB_BASE + (RCC_CR_OFFSET_BB * 32U) + (RCC_PLLON_BIT_NUMBER * 4U)))
   RCC_CR_PLLON_Msk=(0x1U << RCC_CR_PLLON_Pos)
   RCC_CR_PLLON_Pos=(24U)
   RCC_CR_PLLRDY=RCC_CR_PLLRDY_Msk
   RCC_CR_PLLRDY_Msk=(0x1U << RCC_CR_PLLRDY_Pos)
   RCC_CR_PLLRDY_Pos=(25U)
   RCC_CSR_IWDGRSTF=RCC_CSR_IWDGRSTF_Msk
   RCC_CSR_IWDGRSTF_Msk=(0x1U << RCC_CSR_IWDGRSTF_Pos)
   RCC_CSR_IWDGRSTF_Pos=(29U)
   RCC_CSR_LPWRRSTF=RCC_CSR_LPWRRSTF_Msk
   RCC_CSR_LPWRRSTF_Msk=(0x1U << RCC_CSR_LPWRRSTF_Pos)
   RCC_CSR_LPWRRSTF_Pos=(31U)
   RCC_CSR_LSION=RCC_CSR_LSION_Msk
   RCC_CSR_LSION_BB=((uint32_t)(PERIPH_BB_BASE + (RCC_CSR_OFFSET_BB * 32U) + (RCC_LSION_BIT_NUMBER * 4U)))
   RCC_CSR_LSION_Msk=(0x1U << RCC_CSR_LSION_Pos)
   RCC_CSR_LSION_Pos=(0U)
   RCC_CSR_LSIRDY=RCC_CSR_LSIRDY_Msk
   RCC_CSR_LSIRDY_Msk=(0x1U << RCC_CSR_LSIRDY_Pos)
   RCC_CSR_LSIRDY_Pos=(1U)
   RCC_CSR_OFFSET=0x24U
   RCC_CSR_OFFSET_BB=(RCC_OFFSET + RCC_CSR_OFFSET)
   RCC_CSR_PINRSTF=RCC_CSR_PINRSTF_Msk
   RCC_CSR_PINRSTF_Msk=(0x1U << RCC_CSR_PINRSTF_Pos)
   RCC_CSR_PINRSTF_Pos=(26U)
   RCC_CSR_PORRSTF=RCC_CSR_PORRSTF_Msk
   RCC_CSR_PORRSTF_Msk=(0x1U << RCC_CSR_PORRSTF_Pos)
   RCC_CSR_PORRSTF_Pos=(27U)
   RCC_CSR_RMVF=RCC_CSR_RMVF_Msk
   RCC_CSR_RMVF_BB=((uint32_t)(PERIPH_BB_BASE + (RCC_CSR_OFFSET_BB * 32U) + (RCC_RMVF_BIT_NUMBER * 4U)))
   RCC_CSR_RMVF_Msk=(0x1U << RCC_CSR_RMVF_Pos)
   RCC_CSR_RMVF_Pos=(24U)
   RCC_CSR_SFTRSTF=RCC_CSR_SFTRSTF_Msk
   RCC_CSR_SFTRSTF_Msk=(0x1U << RCC_CSR_SFTRSTF_Pos)
   RCC_CSR_SFTRSTF_Pos=(28U)
   RCC_CSR_WWDGRSTF=RCC_CSR_WWDGRSTF_Msk
   RCC_CSR_WWDGRSTF_Msk=(0x1U << RCC_CSR_WWDGRSTF_Pos)
   RCC_CSR_WWDGRSTF_Pos=(30U)
   RCC_CSSON_BIT_NUMBER=RCC_CR_CSSON_Pos
   RCC_DBP_TIMEOUT_VALUE=100U
   RCC_FLAG_HSERDY=((uint8_t)((CR_REG_INDEX << 5U) | RCC_CR_HSERDY_Pos))
   RCC_FLAG_HSIRDY=((uint8_t)((CR_REG_INDEX << 5U) | RCC_CR_HSIRDY_Pos))
   RCC_FLAG_IWDGRST=((uint8_t)((CSR_REG_INDEX << 5U) | RCC_CSR_IWDGRSTF_Pos))
   RCC_FLAG_LPWRRST=((uint8_t)((CSR_REG_INDEX << 5U) | RCC_CSR_LPWRRSTF_Pos))
   RCC_FLAG_LSERDY=((uint8_t)((BDCR_REG_INDEX << 5U) | RCC_BDCR_LSERDY_Pos))
   RCC_FLAG_LSIRDY=((uint8_t)((CSR_REG_INDEX << 5U) | RCC_CSR_LSIRDY_Pos))
   RCC_FLAG_MASK=((uint8_t)0x1F)
   RCC_FLAG_PINRST=((uint8_t)((CSR_REG_INDEX << 5U) | RCC_CSR_PINRSTF_Pos))
   RCC_FLAG_PLLRDY=((uint8_t)((CR_REG_INDEX << 5U) | RCC_CR_PLLRDY_Pos))
   RCC_FLAG_PORRST=((uint8_t)((CSR_REG_INDEX << 5U) | RCC_CSR_PORRSTF_Pos))
   RCC_FLAG_SFTRST=((uint8_t)((CSR_REG_INDEX << 5U) | RCC_CSR_SFTRSTF_Pos))
   RCC_FLAG_WWDGRST=((uint8_t)((CSR_REG_INDEX << 5U) | RCC_CSR_WWDGRSTF_Pos))
   RCC_HCLK_DIV16=RCC_CFGR_PPRE1_DIV16
   RCC_HCLK_DIV1=RCC_CFGR_PPRE1_DIV1
   RCC_HCLK_DIV2=RCC_CFGR_PPRE1_DIV2
   RCC_HCLK_DIV4=RCC_CFGR_PPRE1_DIV4
   RCC_HCLK_DIV8=RCC_CFGR_PPRE1_DIV8
   RCC_HSEON_BIT_NUMBER=RCC_CR_HSEON_Pos
   RCC_HSE_BYPASS=((uint32_t)(RCC_CR_HSEBYP | RCC_CR_HSEON))
   RCC_HSE_MAX=16000000U
   RCC_HSE_MIN=4000000U
   RCC_HSE_OFF=0x00000000U
   RCC_HSE_ON=RCC_CR_HSEON
   RCC_HSE_PREDIV_DIV1=0x00000000U
   RCC_HSE_PREDIV_DIV2=RCC_CFGR_PLLXTPRE
   RCC_HSICALIBRATION_DEFAULT=0x10U
   RCC_HSION_BIT_NUMBER=RCC_CR_HSION_Pos
   RCC_HSI_OFF=0x00000000U
   RCC_HSI_ON=RCC_CR_HSION
   RCC_IT_CSS=((uint8_t)RCC_CIR_CSSF)
   RCC_IT_HSERDY=((uint8_t)RCC_CIR_HSERDYF)
   RCC_IT_HSIRDY=((uint8_t)RCC_CIR_HSIRDYF)
   RCC_IT_LSERDY=((uint8_t)RCC_CIR_LSERDYF)
   RCC_IT_LSIRDY=((uint8_t)RCC_CIR_LSIRDYF)
   RCC_IT_PLLRDY=((uint8_t)RCC_CIR_PLLRDYF)
   RCC_LSEBYP_BIT_NUMBER=RCC_BDCR_LSEBYP_Pos
   RCC_LSEON_BIT_NUMBER=RCC_BDCR_LSEON_Pos
   RCC_LSE_BYPASS=((uint32_t)(RCC_BDCR_LSEBYP | RCC_BDCR_LSEON))
   RCC_LSE_OFF=0x00000000U
   RCC_LSE_ON=RCC_BDCR_LSEON
   RCC_LSE_TIMEOUT_VALUE=LSE_STARTUP_TIMEOUT
   RCC_LSION_BIT_NUMBER=RCC_CSR_LSION_Pos
   RCC_LSI_OFF=0x00000000U
   RCC_LSI_ON=RCC_CSR_LSION
   RCC_MAX_FREQUENCY=72000000U
   RCC_MCO1=0x00000000U
   RCC_MCO1SOURCE_HSE=((uint32_t)RCC_CFGR_MCO_HSE)
   RCC_MCO1SOURCE_HSI=((uint32_t)RCC_CFGR_MCO_HSI)
   RCC_MCO1SOURCE_NOCLOCK=((uint32_t)RCC_CFGR_MCO_NOCLOCK)
   RCC_MCO1SOURCE_PLLCLK=((uint32_t)RCC_CFGR_MCO_PLLCLK_DIV2)
   RCC_MCO1SOURCE_SYSCLK=((uint32_t)RCC_CFGR_MCO_SYSCLK)
   RCC_MCO=RCC_MCO1
   RCC_MCODIV_1=0x00000000U
   RCC_OFFSET=(RCC_BASE - PERIPH_BASE)
   RCC_OSCILLATORTYPE_HSE=0x00000001U
   RCC_OSCILLATORTYPE_HSI=0x00000002U
   RCC_OSCILLATORTYPE_LSE=0x00000004U
   RCC_OSCILLATORTYPE_LSI=0x00000008U
   RCC_OSCILLATORTYPE_NONE=0x00000000U
   RCC_PERIPHCLK_ADC=0x00000002U
   RCC_PERIPHCLK_RTC=0x00000001U
   RCC_PERIPHCLK_USB=0x00000010U
   RCC_PLLON_BIT_NUMBER=RCC_CR_PLLON_Pos
   RCC_PLLSOURCE_HSE=RCC_CFGR_PLLSRC
   RCC_PLLSOURCE_HSI_DIV2=0x00000000U
   RCC_PLL_MUL10=RCC_CFGR_PLLMULL10
   RCC_PLL_MUL11=RCC_CFGR_PLLMULL11
   RCC_PLL_MUL12=RCC_CFGR_PLLMULL12
   RCC_PLL_MUL13=RCC_CFGR_PLLMULL13
   RCC_PLL_MUL14=RCC_CFGR_PLLMULL14
   RCC_PLL_MUL15=RCC_CFGR_PLLMULL15
   RCC_PLL_MUL16=RCC_CFGR_PLLMULL16
   RCC_PLL_MUL2=RCC_CFGR_PLLMULL2
   RCC_PLL_MUL3=RCC_CFGR_PLLMULL3
   RCC_PLL_MUL4=RCC_CFGR_PLLMULL4
   RCC_PLL_MUL5=RCC_CFGR_PLLMULL5
   RCC_PLL_MUL6=RCC_CFGR_PLLMULL6
   RCC_PLL_MUL7=RCC_CFGR_PLLMULL7
   RCC_PLL_MUL8=RCC_CFGR_PLLMULL8
   RCC_PLL_MUL9=RCC_CFGR_PLLMULL9
   RCC_PLL_NONE=0x00000000U
   RCC_PLL_OFF=0x00000001U
   RCC_PLL_ON=0x00000002U
   RCC_RMVF_BIT_NUMBER=RCC_CSR_RMVF_Pos
   RCC_RTCCLKSOURCE_HSE_DIV128=RCC_BDCR_RTCSEL_HSE
   RCC_RTCCLKSOURCE_LSE=RCC_BDCR_RTCSEL_LSE
   RCC_RTCCLKSOURCE_LSI=RCC_BDCR_RTCSEL_LSI
   RCC_RTCCLKSOURCE_NO_CLK=0x00000000U
   RCC_RTCEN_BIT_NUMBER=RCC_BDCR_RTCEN_Pos
   RCC_SYSCLKSOURCE_HSE=RCC_CFGR_SW_HSE
   RCC_SYSCLKSOURCE_HSI=RCC_CFGR_SW_HSI
   RCC_SYSCLKSOURCE_PLLCLK=RCC_CFGR_SW_PLL
   RCC_SYSCLKSOURCE_STATUS_HSE=RCC_CFGR_SWS_HSE
   RCC_SYSCLKSOURCE_STATUS_HSI=RCC_CFGR_SWS_HSI
   RCC_SYSCLKSOURCE_STATUS_PLLCLK=RCC_CFGR_SWS_PLL
   RCC_SYSCLK_DIV128=RCC_CFGR_HPRE_DIV128
   RCC_SYSCLK_DIV16=RCC_CFGR_HPRE_DIV16
   RCC_SYSCLK_DIV1=RCC_CFGR_HPRE_DIV1
   RCC_SYSCLK_DIV256=RCC_CFGR_HPRE_DIV256
   RCC_SYSCLK_DIV2=RCC_CFGR_HPRE_DIV2
   RCC_SYSCLK_DIV4=RCC_CFGR_HPRE_DIV4
   RCC_SYSCLK_DIV512=RCC_CFGR_HPRE_DIV512
   RCC_SYSCLK_DIV64=RCC_CFGR_HPRE_DIV64
   RCC_SYSCLK_DIV8=RCC_CFGR_HPRE_DIV8
   RCC_USBCLKSOURCE_PLL=RCC_CFGR_USBPRE
   RCC_USBCLKSOURCE_PLL_DIV1_5=0x00000000U
   RDP_KEY=RDP_KEY_Msk
   RDP_KEY_Msk=(0xA5U << RDP_KEY_Pos)
   RDP_KEY_Pos=(0U)
   READ_BIT(REG,BIT)=((REG) & (BIT))
   READ_REG(REG)=((REG))
   RTC=((RTC_TypeDef *)RTC_BASE)
   RTC_ALRH_RTC_ALR=RTC_ALRH_RTC_ALR_Msk
   RTC_ALRH_RTC_ALR_Msk=(0xFFFFU << RTC_ALRH_RTC_ALR_Pos)
   RTC_ALRH_RTC_ALR_Pos=(0U)
   RTC_ALRL_RTC_ALR=RTC_ALRL_RTC_ALR_Msk
   RTC_ALRL_RTC_ALR_Msk=(0xFFFFU << RTC_ALRL_RTC_ALR_Pos)
   RTC_ALRL_RTC_ALR_Pos=(0U)
   RTC_BASE=(APB1PERIPH_BASE + 0x00002800U)
   RTC_BKP_NUMBER=10
   RTC_CNTH_RTC_CNT=RTC_CNTH_RTC_CNT_Msk
   RTC_CNTH_RTC_CNT_Msk=(0xFFFFU << RTC_CNTH_RTC_CNT_Pos)
   RTC_CNTH_RTC_CNT_Pos=(0U)
   RTC_CNTL_RTC_CNT=RTC_CNTL_RTC_CNT_Msk
   RTC_CNTL_RTC_CNT_Msk=(0xFFFFU << RTC_CNTL_RTC_CNT_Pos)
   RTC_CNTL_RTC_CNT_Pos=(0U)
   RTC_CRH_ALRIE=RTC_CRH_ALRIE_Msk
   RTC_CRH_ALRIE_Msk=(0x1U << RTC_CRH_ALRIE_Pos)
   RTC_CRH_ALRIE_Pos=(1U)
   RTC_CRH_OWIE=RTC_CRH_OWIE_Msk
   RTC_CRH_OWIE_Msk=(0x1U << RTC_CRH_OWIE_Pos)
   RTC_CRH_OWIE_Pos=(2U)
   RTC_CRH_SECIE=RTC_CRH_SECIE_Msk
   RTC_CRH_SECIE_Msk=(0x1U << RTC_CRH_SECIE_Pos)
   RTC_CRH_SECIE_Pos=(0U)
   RTC_CRL_ALRF=RTC_CRL_ALRF_Msk
   RTC_CRL_ALRF_Msk=(0x1U << RTC_CRL_ALRF_Pos)
   RTC_CRL_ALRF_Pos=(1U)
   RTC_CRL_CNF=RTC_CRL_CNF_Msk
   RTC_CRL_CNF_Msk=(0x1U << RTC_CRL_CNF_Pos)
   RTC_CRL_CNF_Pos=(4U)
   RTC_CRL_OWF=RTC_CRL_OWF_Msk
   RTC_CRL_OWF_Msk=(0x1U << RTC_CRL_OWF_Pos)
   RTC_CRL_OWF_Pos=(2U)
   RTC_CRL_RSF=RTC_CRL_RSF_Msk
   RTC_CRL_RSF_Msk=(0x1U << RTC_CRL_RSF_Pos)
   RTC_CRL_RSF_Pos=(3U)
   RTC_CRL_RTOFF=RTC_CRL_RTOFF_Msk
   RTC_CRL_RTOFF_Msk=(0x1U << RTC_CRL_RTOFF_Pos)
   RTC_CRL_RTOFF_Pos=(5U)
   RTC_CRL_SECF=RTC_CRL_SECF_Msk
   RTC_CRL_SECF_Msk=(0x1U << RTC_CRL_SECF_Pos)
   RTC_CRL_SECF_Pos=(0U)
   RTC_DIVH_RTC_DIV=RTC_DIVH_RTC_DIV_Msk
   RTC_DIVH_RTC_DIV_Msk=(0xFU << RTC_DIVH_RTC_DIV_Pos)
   RTC_DIVH_RTC_DIV_Pos=(0U)
   RTC_DIVL_RTC_DIV=RTC_DIVL_RTC_DIV_Msk
   RTC_DIVL_RTC_DIV_Msk=(0xFFFFU << RTC_DIVL_RTC_DIV_Pos)
   RTC_DIVL_RTC_DIV_Pos=(0U)
   RTC_PRLH_PRL=RTC_PRLH_PRL_Msk
   RTC_PRLH_PRL_Msk=(0xFU << RTC_PRLH_PRL_Pos)
   RTC_PRLH_PRL_Pos=(0U)
   RTC_PRLL_PRL=RTC_PRLL_PRL_Msk
   RTC_PRLL_PRL_Msk=(0xFFFFU << RTC_PRLL_PRL_Pos)
   RTC_PRLL_PRL_Pos=(0U)
   SCB=((SCB_Type *) SCB_BASE )
   SCB_AIRCR_ENDIANESS_Msk=(1UL << SCB_AIRCR_ENDIANESS_Pos)
   SCB_AIRCR_ENDIANESS_Pos=15U
   SCB_AIRCR_PRIGROUP_Msk=(7UL << SCB_AIRCR_PRIGROUP_Pos)
   SCB_AIRCR_PRIGROUP_Pos=8U
   SCB_AIRCR_SYSRESETREQ_Msk=(1UL << SCB_AIRCR_SYSRESETREQ_Pos)
   SCB_AIRCR_SYSRESETREQ_Pos=2U
   SCB_AIRCR_VECTCLRACTIVE_Msk=(1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)
   SCB_AIRCR_VECTCLRACTIVE_Pos=1U
   SCB_AIRCR_VECTKEYSTAT_Msk=(0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)
   SCB_AIRCR_VECTKEYSTAT_Pos=16U
   SCB_AIRCR_VECTKEY_Msk=(0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)
   SCB_AIRCR_VECTKEY_Pos=16U
   SCB_AIRCR_VECTRESET_Msk=(1UL )
   SCB_AIRCR_VECTRESET_Pos=0U
   SCB_BASE=(SCS_BASE + 0x0D00UL)
   SCB_CCR_BFHFNMIGN_Msk=(1UL << SCB_CCR_BFHFNMIGN_Pos)
   SCB_CCR_BFHFNMIGN_Pos=8U
   SCB_CCR_DIV_0_TRP_Msk=(1UL << SCB_CCR_DIV_0_TRP_Pos)
   SCB_CCR_DIV_0_TRP_Pos=4U
   SCB_CCR_NONBASETHRDENA_Msk=(1UL )
   SCB_CCR_NONBASETHRDENA_Pos=0U
   SCB_CCR_STKALIGN_Msk=(1UL << SCB_CCR_STKALIGN_Pos)
   SCB_CCR_STKALIGN_Pos=9U
   SCB_CCR_UNALIGN_TRP_Msk=(1UL << SCB_CCR_UNALIGN_TRP_Pos)
   SCB_CCR_UNALIGN_TRP_Pos=3U
   SCB_CCR_USERSETMPEND_Msk=(1UL << SCB_CCR_USERSETMPEND_Pos)
   SCB_CCR_USERSETMPEND_Pos=1U
   SCB_CFSR_BUSFAULTSR_Msk=(0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)
   SCB_CFSR_BUSFAULTSR_Pos=8U
   SCB_CFSR_MEMFAULTSR_Msk=(0xFFUL )
   SCB_CFSR_MEMFAULTSR_Pos=0U
   SCB_CFSR_USGFAULTSR_Msk=(0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)
   SCB_CFSR_USGFAULTSR_Pos=16U
   SCB_CPUID_ARCHITECTURE_Msk=(0xFUL << SCB_CPUID_ARCHITECTURE_Pos)
   SCB_CPUID_ARCHITECTURE_Pos=16U
   SCB_CPUID_IMPLEMENTER_Msk=(0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)
   SCB_CPUID_IMPLEMENTER_Pos=24U
   SCB_CPUID_PARTNO_Msk=(0xFFFUL << SCB_CPUID_PARTNO_Pos)
   SCB_CPUID_PARTNO_Pos=4U
   SCB_CPUID_REVISION_Msk=(0xFUL )
   SCB_CPUID_REVISION_Pos=0U
   SCB_CPUID_VARIANT_Msk=(0xFUL << SCB_CPUID_VARIANT_Pos)
   SCB_CPUID_VARIANT_Pos=20U
   SCB_DFSR_BKPT_Msk=(1UL << SCB_DFSR_BKPT_Pos)
   SCB_DFSR_BKPT_Pos=1U
   SCB_DFSR_DWTTRAP_Msk=(1UL << SCB_DFSR_DWTTRAP_Pos)
   SCB_DFSR_DWTTRAP_Pos=2U
   SCB_DFSR_EXTERNAL_Msk=(1UL << SCB_DFSR_EXTERNAL_Pos)
   SCB_DFSR_EXTERNAL_Pos=4U
   SCB_DFSR_HALTED_Msk=(1UL )
   SCB_DFSR_HALTED_Pos=0U
   SCB_DFSR_VCATCH_Msk=(1UL << SCB_DFSR_VCATCH_Pos)
   SCB_DFSR_VCATCH_Pos=3U
   SCB_HFSR_DEBUGEVT_Msk=(1UL << SCB_HFSR_DEBUGEVT_Pos)
   SCB_HFSR_DEBUGEVT_Pos=31U
   SCB_HFSR_FORCED_Msk=(1UL << SCB_HFSR_FORCED_Pos)
   SCB_HFSR_FORCED_Pos=30U
   SCB_HFSR_VECTTBL_Msk=(1UL << SCB_HFSR_VECTTBL_Pos)
   SCB_HFSR_VECTTBL_Pos=1U
   SCB_ICSR_ISRPENDING_Msk=(1UL << SCB_ICSR_ISRPENDING_Pos)
   SCB_ICSR_ISRPENDING_Pos=22U
   SCB_ICSR_ISRPREEMPT_Msk=(1UL << SCB_ICSR_ISRPREEMPT_Pos)
   SCB_ICSR_ISRPREEMPT_Pos=23U
   SCB_ICSR_NMIPENDSET_Msk=(1UL << SCB_ICSR_NMIPENDSET_Pos)
   SCB_ICSR_NMIPENDSET_Pos=31U
   SCB_ICSR_PENDSTCLR_Msk=(1UL << SCB_ICSR_PENDSTCLR_Pos)
   SCB_ICSR_PENDSTCLR_Pos=25U
   SCB_ICSR_PENDSTSET_Msk=(1UL << SCB_ICSR_PENDSTSET_Pos)
   SCB_ICSR_PENDSTSET_Pos=26U
   SCB_ICSR_PENDSVCLR_Msk=(1UL << SCB_ICSR_PENDSVCLR_Pos)
   SCB_ICSR_PENDSVCLR_Pos=27U
   SCB_ICSR_PENDSVSET_Msk=(1UL << SCB_ICSR_PENDSVSET_Pos)
   SCB_ICSR_PENDSVSET_Pos=28U
   SCB_ICSR_RETTOBASE_Msk=(1UL << SCB_ICSR_RETTOBASE_Pos)
   SCB_ICSR_RETTOBASE_Pos=11U
   SCB_ICSR_VECTACTIVE_Msk=(0x1FFUL )
   SCB_ICSR_VECTACTIVE_Pos=0U
   SCB_ICSR_VECTPENDING_Msk=(0x1FFUL << SCB_ICSR_VECTPENDING_Pos)
   SCB_ICSR_VECTPENDING_Pos=12U
   SCB_SCR_SEVONPEND_Msk=(1UL << SCB_SCR_SEVONPEND_Pos)
   SCB_SCR_SEVONPEND_Pos=4U
   SCB_SCR_SLEEPDEEP_Msk=(1UL << SCB_SCR_SLEEPDEEP_Pos)
   SCB_SCR_SLEEPDEEP_Pos=2U
   SCB_SCR_SLEEPONEXIT_Msk=(1UL << SCB_SCR_SLEEPONEXIT_Pos)
   SCB_SCR_SLEEPONEXIT_Pos=1U
   SCB_SHCSR_BUSFAULTACT_Msk=(1UL << SCB_SHCSR_BUSFAULTACT_Pos)
   SCB_SHCSR_BUSFAULTACT_Pos=1U
   SCB_SHCSR_BUSFAULTENA_Msk=(1UL << SCB_SHCSR_BUSFAULTENA_Pos)
   SCB_SHCSR_BUSFAULTENA_Pos=17U
   SCB_SHCSR_BUSFAULTPENDED_Msk=(1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)
   SCB_SHCSR_BUSFAULTPENDED_Pos=14U
   SCB_SHCSR_MEMFAULTACT_Msk=(1UL )
   SCB_SHCSR_MEMFAULTACT_Pos=0U
   SCB_SHCSR_MEMFAULTENA_Msk=(1UL << SCB_SHCSR_MEMFAULTENA_Pos)
   SCB_SHCSR_MEMFAULTENA_Pos=16U
   SCB_SHCSR_MEMFAULTPENDED_Msk=(1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)
   SCB_SHCSR_MEMFAULTPENDED_Pos=13U
   SCB_SHCSR_MONITORACT_Msk=(1UL << SCB_SHCSR_MONITORACT_Pos)
   SCB_SHCSR_MONITORACT_Pos=8U
   SCB_SHCSR_PENDSVACT_Msk=(1UL << SCB_SHCSR_PENDSVACT_Pos)
   SCB_SHCSR_PENDSVACT_Pos=10U
   SCB_SHCSR_SVCALLACT_Msk=(1UL << SCB_SHCSR_SVCALLACT_Pos)
   SCB_SHCSR_SVCALLACT_Pos=7U
   SCB_SHCSR_SVCALLPENDED_Msk=(1UL << SCB_SHCSR_SVCALLPENDED_Pos)
   SCB_SHCSR_SVCALLPENDED_Pos=15U
   SCB_SHCSR_SYSTICKACT_Msk=(1UL << SCB_SHCSR_SYSTICKACT_Pos)
   SCB_SHCSR_SYSTICKACT_Pos=11U
   SCB_SHCSR_USGFAULTACT_Msk=(1UL << SCB_SHCSR_USGFAULTACT_Pos)
   SCB_SHCSR_USGFAULTACT_Pos=3U
   SCB_SHCSR_USGFAULTENA_Msk=(1UL << SCB_SHCSR_USGFAULTENA_Pos)
   SCB_SHCSR_USGFAULTENA_Pos=18U
   SCB_SHCSR_USGFAULTPENDED_Msk=(1UL << SCB_SHCSR_USGFAULTPENDED_Pos)
   SCB_SHCSR_USGFAULTPENDED_Pos=12U
   SCB_VTOR_TBLBASE_Msk=(1UL << SCB_VTOR_TBLBASE_Pos)
   SCB_VTOR_TBLBASE_Pos=29U
   SCB_VTOR_TBLOFF_Msk=(0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)
   SCB_VTOR_TBLOFF_Pos=7U
   SCnSCB=((SCnSCB_Type *) SCS_BASE )
   SCnSCB_ACTLR_DISDEFWBUF_Msk=(1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)
   SCnSCB_ACTLR_DISDEFWBUF_Pos=1U
   SCnSCB_ACTLR_DISFOLD_Msk=(1UL << SCnSCB_ACTLR_DISFOLD_Pos)
   SCnSCB_ACTLR_DISFOLD_Pos=2U
   SCnSCB_ACTLR_DISMCYCINT_Msk=(1UL )
   SCnSCB_ACTLR_DISMCYCINT_Pos=0U
   SCnSCB_ICTR_INTLINESNUM_Msk=(0xFUL )
   SCnSCB_ICTR_INTLINESNUM_Pos=0U
   SCS_BASE=(0xE000E000UL)
   SDIO=((SDIO_TypeDef *)SDIO_BASE)
   SDIO_ARG_CMDARG=SDIO_ARG_CMDARG_Msk
   SDIO_ARG_CMDARG_Msk=(0xFFFFFFFFU << SDIO_ARG_CMDARG_Pos)
   SDIO_ARG_CMDARG_Pos=(0U)
   SDIO_BASE=(PERIPH_BASE + 0x00018000U)
   SDIO_CLKCR_BYPASS=SDIO_CLKCR_BYPASS_Msk
   SDIO_CLKCR_BYPASS_Msk=(0x1U << SDIO_CLKCR_BYPASS_Pos)
   SDIO_CLKCR_BYPASS_Pos=(10U)
   SDIO_CLKCR_CLKDIV=SDIO_CLKCR_CLKDIV_Msk
   SDIO_CLKCR_CLKDIV_Msk=(0xFFU << SDIO_CLKCR_CLKDIV_Pos)
   SDIO_CLKCR_CLKDIV_Pos=(0U)
   SDIO_CLKCR_CLKEN=SDIO_CLKCR_CLKEN_Msk
   SDIO_CLKCR_CLKEN_Msk=(0x1U << SDIO_CLKCR_CLKEN_Pos)
   SDIO_CLKCR_CLKEN_Pos=(8U)
   SDIO_CLKCR_HWFC_EN=SDIO_CLKCR_HWFC_EN_Msk
   SDIO_CLKCR_HWFC_EN_Msk=(0x1U << SDIO_CLKCR_HWFC_EN_Pos)
   SDIO_CLKCR_HWFC_EN_Pos=(14U)
   SDIO_CLKCR_NEGEDGE=SDIO_CLKCR_NEGEDGE_Msk
   SDIO_CLKCR_NEGEDGE_Msk=(0x1U << SDIO_CLKCR_NEGEDGE_Pos)
   SDIO_CLKCR_NEGEDGE_Pos=(13U)
   SDIO_CLKCR_PWRSAV=SDIO_CLKCR_PWRSAV_Msk
   SDIO_CLKCR_PWRSAV_Msk=(0x1U << SDIO_CLKCR_PWRSAV_Pos)
   SDIO_CLKCR_PWRSAV_Pos=(9U)
   SDIO_CLKCR_WIDBUS=SDIO_CLKCR_WIDBUS_Msk
   SDIO_CLKCR_WIDBUS_0=(0x1U << SDIO_CLKCR_WIDBUS_Pos)
   SDIO_CLKCR_WIDBUS_1=(0x2U << SDIO_CLKCR_WIDBUS_Pos)
   SDIO_CLKCR_WIDBUS_Msk=(0x3U << SDIO_CLKCR_WIDBUS_Pos)
   SDIO_CLKCR_WIDBUS_Pos=(11U)
   SDIO_CMD_CEATACMD=SDIO_CMD_CEATACMD_Msk
   SDIO_CMD_CEATACMD_Msk=(0x1U << SDIO_CMD_CEATACMD_Pos)
   SDIO_CMD_CEATACMD_Pos=(14U)
   SDIO_CMD_CMDINDEX=SDIO_CMD_CMDINDEX_Msk
   SDIO_CMD_CMDINDEX_Msk=(0x3FU << SDIO_CMD_CMDINDEX_Pos)
   SDIO_CMD_CMDINDEX_Pos=(0U)
   SDIO_CMD_CPSMEN=SDIO_CMD_CPSMEN_Msk
   SDIO_CMD_CPSMEN_Msk=(0x1U << SDIO_CMD_CPSMEN_Pos)
   SDIO_CMD_CPSMEN_Pos=(10U)
   SDIO_CMD_ENCMDCOMPL=SDIO_CMD_ENCMDCOMPL_Msk
   SDIO_CMD_ENCMDCOMPL_Msk=(0x1U << SDIO_CMD_ENCMDCOMPL_Pos)
   SDIO_CMD_ENCMDCOMPL_Pos=(12U)
   SDIO_CMD_NIEN=SDIO_CMD_NIEN_Msk
   SDIO_CMD_NIEN_Msk=(0x1U << SDIO_CMD_NIEN_Pos)
   SDIO_CMD_NIEN_Pos=(13U)
   SDIO_CMD_SDIOSUSPEND=SDIO_CMD_SDIOSUSPEND_Msk
   SDIO_CMD_SDIOSUSPEND_Msk=(0x1U << SDIO_CMD_SDIOSUSPEND_Pos)
   SDIO_CMD_SDIOSUSPEND_Pos=(11U)
   SDIO_CMD_WAITINT=SDIO_CMD_WAITINT_Msk
   SDIO_CMD_WAITINT_Msk=(0x1U << SDIO_CMD_WAITINT_Pos)
   SDIO_CMD_WAITINT_Pos=(8U)
   SDIO_CMD_WAITPEND=SDIO_CMD_WAITPEND_Msk
   SDIO_CMD_WAITPEND_Msk=(0x1U << SDIO_CMD_WAITPEND_Pos)
   SDIO_CMD_WAITPEND_Pos=(9U)
   SDIO_CMD_WAITRESP=SDIO_CMD_WAITRESP_Msk
   SDIO_CMD_WAITRESP_0=(0x1U << SDIO_CMD_WAITRESP_Pos)
   SDIO_CMD_WAITRESP_1=(0x2U << SDIO_CMD_WAITRESP_Pos)
   SDIO_CMD_WAITRESP_Msk=(0x3U << SDIO_CMD_WAITRESP_Pos)
   SDIO_CMD_WAITRESP_Pos=(6U)
   SDIO_DCOUNT_DATACOUNT=SDIO_DCOUNT_DATACOUNT_Msk
   SDIO_DCOUNT_DATACOUNT_Msk=(0x1FFFFFFU << SDIO_DCOUNT_DATACOUNT_Pos)
   SDIO_DCOUNT_DATACOUNT_Pos=(0U)
   SDIO_DCTRL_DBLOCKSIZE=SDIO_DCTRL_DBLOCKSIZE_Msk
   SDIO_DCTRL_DBLOCKSIZE_0=(0x1U << SDIO_DCTRL_DBLOCKSIZE_Pos)
   SDIO_DCTRL_DBLOCKSIZE_1=(0x2U << SDIO_DCTRL_DBLOCKSIZE_Pos)
   SDIO_DCTRL_DBLOCKSIZE_2=(0x4U << SDIO_DCTRL_DBLOCKSIZE_Pos)
   SDIO_DCTRL_DBLOCKSIZE_3=(0x8U << SDIO_DCTRL_DBLOCKSIZE_Pos)
   SDIO_DCTRL_DBLOCKSIZE_Msk=(0xFU << SDIO_DCTRL_DBLOCKSIZE_Pos)
   SDIO_DCTRL_DBLOCKSIZE_Pos=(4U)
   SDIO_DCTRL_DMAEN=SDIO_DCTRL_DMAEN_Msk
   SDIO_DCTRL_DMAEN_Msk=(0x1U << SDIO_DCTRL_DMAEN_Pos)
   SDIO_DCTRL_DMAEN_Pos=(3U)
   SDIO_DCTRL_DTDIR=SDIO_DCTRL_DTDIR_Msk
   SDIO_DCTRL_DTDIR_Msk=(0x1U << SDIO_DCTRL_DTDIR_Pos)
   SDIO_DCTRL_DTDIR_Pos=(1U)
   SDIO_DCTRL_DTEN=SDIO_DCTRL_DTEN_Msk
   SDIO_DCTRL_DTEN_Msk=(0x1U << SDIO_DCTRL_DTEN_Pos)
   SDIO_DCTRL_DTEN_Pos=(0U)
   SDIO_DCTRL_DTMODE=SDIO_DCTRL_DTMODE_Msk
   SDIO_DCTRL_DTMODE_Msk=(0x1U << SDIO_DCTRL_DTMODE_Pos)
   SDIO_DCTRL_DTMODE_Pos=(2U)
   SDIO_DCTRL_RWMOD=SDIO_DCTRL_RWMOD_Msk
   SDIO_DCTRL_RWMOD_Msk=(0x1U << SDIO_DCTRL_RWMOD_Pos)
   SDIO_DCTRL_RWMOD_Pos=(10U)
   SDIO_DCTRL_RWSTART=SDIO_DCTRL_RWSTART_Msk
   SDIO_DCTRL_RWSTART_Msk=(0x1U << SDIO_DCTRL_RWSTART_Pos)
   SDIO_DCTRL_RWSTART_Pos=(8U)
   SDIO_DCTRL_RWSTOP=SDIO_DCTRL_RWSTOP_Msk
   SDIO_DCTRL_RWSTOP_Msk=(0x1U << SDIO_DCTRL_RWSTOP_Pos)
   SDIO_DCTRL_RWSTOP_Pos=(9U)
   SDIO_DCTRL_SDIOEN=SDIO_DCTRL_SDIOEN_Msk
   SDIO_DCTRL_SDIOEN_Msk=(0x1U << SDIO_DCTRL_SDIOEN_Pos)
   SDIO_DCTRL_SDIOEN_Pos=(11U)
   SDIO_DLEN_DATALENGTH=SDIO_DLEN_DATALENGTH_Msk
   SDIO_DLEN_DATALENGTH_Msk=(0x1FFFFFFU << SDIO_DLEN_DATALENGTH_Pos)
   SDIO_DLEN_DATALENGTH_Pos=(0U)
   SDIO_DTIMER_DATATIME=SDIO_DTIMER_DATATIME_Msk
   SDIO_DTIMER_DATATIME_Msk=(0xFFFFFFFFU << SDIO_DTIMER_DATATIME_Pos)
   SDIO_DTIMER_DATATIME_Pos=(0U)
   SDIO_FIFOCNT_FIFOCOUNT=SDIO_FIFOCNT_FIFOCOUNT_Msk
   SDIO_FIFOCNT_FIFOCOUNT_Msk=(0xFFFFFFU << SDIO_FIFOCNT_FIFOCOUNT_Pos)
   SDIO_FIFOCNT_FIFOCOUNT_Pos=(0U)
   SDIO_FIFO_FIFODATA=SDIO_FIFO_FIFODATA_Msk
   SDIO_FIFO_FIFODATA_Msk=(0xFFFFFFFFU << SDIO_FIFO_FIFODATA_Pos)
   SDIO_FIFO_FIFODATA_Pos=(0U)
   SDIO_ICR_CCRCFAILC=SDIO_ICR_CCRCFAILC_Msk
   SDIO_ICR_CCRCFAILC_Msk=(0x1U << SDIO_ICR_CCRCFAILC_Pos)
   SDIO_ICR_CCRCFAILC_Pos=(0U)
   SDIO_ICR_CEATAENDC=SDIO_ICR_CEATAENDC_Msk
   SDIO_ICR_CEATAENDC_Msk=(0x1U << SDIO_ICR_CEATAENDC_Pos)
   SDIO_ICR_CEATAENDC_Pos=(23U)
   SDIO_ICR_CMDRENDC=SDIO_ICR_CMDRENDC_Msk
   SDIO_ICR_CMDRENDC_Msk=(0x1U << SDIO_ICR_CMDRENDC_Pos)
   SDIO_ICR_CMDRENDC_Pos=(6U)
   SDIO_ICR_CMDSENTC=SDIO_ICR_CMDSENTC_Msk
   SDIO_ICR_CMDSENTC_Msk=(0x1U << SDIO_ICR_CMDSENTC_Pos)
   SDIO_ICR_CMDSENTC_Pos=(7U)
   SDIO_ICR_CTIMEOUTC=SDIO_ICR_CTIMEOUTC_Msk
   SDIO_ICR_CTIMEOUTC_Msk=(0x1U << SDIO_ICR_CTIMEOUTC_Pos)
   SDIO_ICR_CTIMEOUTC_Pos=(2U)
   SDIO_ICR_DATAENDC=SDIO_ICR_DATAENDC_Msk
   SDIO_ICR_DATAENDC_Msk=(0x1U << SDIO_ICR_DATAENDC_Pos)
   SDIO_ICR_DATAENDC_Pos=(8U)
   SDIO_ICR_DBCKENDC=SDIO_ICR_DBCKENDC_Msk
   SDIO_ICR_DBCKENDC_Msk=(0x1U << SDIO_ICR_DBCKENDC_Pos)
   SDIO_ICR_DBCKENDC_Pos=(10U)
   SDIO_ICR_DCRCFAILC=SDIO_ICR_DCRCFAILC_Msk
   SDIO_ICR_DCRCFAILC_Msk=(0x1U << SDIO_ICR_DCRCFAILC_Pos)
   SDIO_ICR_DCRCFAILC_Pos=(1U)
   SDIO_ICR_DTIMEOUTC=SDIO_ICR_DTIMEOUTC_Msk
   SDIO_ICR_DTIMEOUTC_Msk=(0x1U << SDIO_ICR_DTIMEOUTC_Pos)
   SDIO_ICR_DTIMEOUTC_Pos=(3U)
   SDIO_ICR_RXOVERRC=SDIO_ICR_RXOVERRC_Msk
   SDIO_ICR_RXOVERRC_Msk=(0x1U << SDIO_ICR_RXOVERRC_Pos)
   SDIO_ICR_RXOVERRC_Pos=(5U)
   SDIO_ICR_SDIOITC=SDIO_ICR_SDIOITC_Msk
   SDIO_ICR_SDIOITC_Msk=(0x1U << SDIO_ICR_SDIOITC_Pos)
   SDIO_ICR_SDIOITC_Pos=(22U)
   SDIO_ICR_STBITERRC=SDIO_ICR_STBITERRC_Msk
   SDIO_ICR_STBITERRC_Msk=(0x1U << SDIO_ICR_STBITERRC_Pos)
   SDIO_ICR_STBITERRC_Pos=(9U)
   SDIO_ICR_TXUNDERRC=SDIO_ICR_TXUNDERRC_Msk
   SDIO_ICR_TXUNDERRC_Msk=(0x1U << SDIO_ICR_TXUNDERRC_Pos)
   SDIO_ICR_TXUNDERRC_Pos=(4U)
   SDIO_MASK_CCRCFAILIE=SDIO_MASK_CCRCFAILIE_Msk
   SDIO_MASK_CCRCFAILIE_Msk=(0x1U << SDIO_MASK_CCRCFAILIE_Pos)
   SDIO_MASK_CCRCFAILIE_Pos=(0U)
   SDIO_MASK_CEATAENDIE=SDIO_MASK_CEATAENDIE_Msk
   SDIO_MASK_CEATAENDIE_Msk=(0x1U << SDIO_MASK_CEATAENDIE_Pos)
   SDIO_MASK_CEATAENDIE_Pos=(23U)
   SDIO_MASK_CMDACTIE=SDIO_MASK_CMDACTIE_Msk
   SDIO_MASK_CMDACTIE_Msk=(0x1U << SDIO_MASK_CMDACTIE_Pos)
   SDIO_MASK_CMDACTIE_Pos=(11U)
   SDIO_MASK_CMDRENDIE=SDIO_MASK_CMDRENDIE_Msk
   SDIO_MASK_CMDRENDIE_Msk=(0x1U << SDIO_MASK_CMDRENDIE_Pos)
   SDIO_MASK_CMDRENDIE_Pos=(6U)
   SDIO_MASK_CMDSENTIE=SDIO_MASK_CMDSENTIE_Msk
   SDIO_MASK_CMDSENTIE_Msk=(0x1U << SDIO_MASK_CMDSENTIE_Pos)
   SDIO_MASK_CMDSENTIE_Pos=(7U)
   SDIO_MASK_CTIMEOUTIE=SDIO_MASK_CTIMEOUTIE_Msk
   SDIO_MASK_CTIMEOUTIE_Msk=(0x1U << SDIO_MASK_CTIMEOUTIE_Pos)
   SDIO_MASK_CTIMEOUTIE_Pos=(2U)
   SDIO_MASK_DATAENDIE=SDIO_MASK_DATAENDIE_Msk
   SDIO_MASK_DATAENDIE_Msk=(0x1U << SDIO_MASK_DATAENDIE_Pos)
   SDIO_MASK_DATAENDIE_Pos=(8U)
   SDIO_MASK_DBCKENDIE=SDIO_MASK_DBCKENDIE_Msk
   SDIO_MASK_DBCKENDIE_Msk=(0x1U << SDIO_MASK_DBCKENDIE_Pos)
   SDIO_MASK_DBCKENDIE_Pos=(10U)
   SDIO_MASK_DCRCFAILIE=SDIO_MASK_DCRCFAILIE_Msk
   SDIO_MASK_DCRCFAILIE_Msk=(0x1U << SDIO_MASK_DCRCFAILIE_Pos)
   SDIO_MASK_DCRCFAILIE_Pos=(1U)
   SDIO_MASK_DTIMEOUTIE=SDIO_MASK_DTIMEOUTIE_Msk
   SDIO_MASK_DTIMEOUTIE_Msk=(0x1U << SDIO_MASK_DTIMEOUTIE_Pos)
   SDIO_MASK_DTIMEOUTIE_Pos=(3U)
   SDIO_MASK_RXACTIE=SDIO_MASK_RXACTIE_Msk
   SDIO_MASK_RXACTIE_Msk=(0x1U << SDIO_MASK_RXACTIE_Pos)
   SDIO_MASK_RXACTIE_Pos=(13U)
   SDIO_MASK_RXDAVLIE=SDIO_MASK_RXDAVLIE_Msk
   SDIO_MASK_RXDAVLIE_Msk=(0x1U << SDIO_MASK_RXDAVLIE_Pos)
   SDIO_MASK_RXDAVLIE_Pos=(21U)
   SDIO_MASK_RXFIFOEIE=SDIO_MASK_RXFIFOEIE_Msk
   SDIO_MASK_RXFIFOEIE_Msk=(0x1U << SDIO_MASK_RXFIFOEIE_Pos)
   SDIO_MASK_RXFIFOEIE_Pos=(19U)
   SDIO_MASK_RXFIFOFIE=SDIO_MASK_RXFIFOFIE_Msk
   SDIO_MASK_RXFIFOFIE_Msk=(0x1U << SDIO_MASK_RXFIFOFIE_Pos)
   SDIO_MASK_RXFIFOFIE_Pos=(17U)
   SDIO_MASK_RXFIFOHFIE=SDIO_MASK_RXFIFOHFIE_Msk
   SDIO_MASK_RXFIFOHFIE_Msk=(0x1U << SDIO_MASK_RXFIFOHFIE_Pos)
   SDIO_MASK_RXFIFOHFIE_Pos=(15U)
   SDIO_MASK_RXOVERRIE=SDIO_MASK_RXOVERRIE_Msk
   SDIO_MASK_RXOVERRIE_Msk=(0x1U << SDIO_MASK_RXOVERRIE_Pos)
   SDIO_MASK_RXOVERRIE_Pos=(5U)
   SDIO_MASK_SDIOITIE=SDIO_MASK_SDIOITIE_Msk
   SDIO_MASK_SDIOITIE_Msk=(0x1U << SDIO_MASK_SDIOITIE_Pos)
   SDIO_MASK_SDIOITIE_Pos=(22U)
   SDIO_MASK_STBITERRIE=SDIO_MASK_STBITERRIE_Msk
   SDIO_MASK_STBITERRIE_Msk=(0x1U << SDIO_MASK_STBITERRIE_Pos)
   SDIO_MASK_STBITERRIE_Pos=(9U)
   SDIO_MASK_TXACTIE=SDIO_MASK_TXACTIE_Msk
   SDIO_MASK_TXACTIE_Msk=(0x1U << SDIO_MASK_TXACTIE_Pos)
   SDIO_MASK_TXACTIE_Pos=(12U)
   SDIO_MASK_TXDAVLIE=SDIO_MASK_TXDAVLIE_Msk
   SDIO_MASK_TXDAVLIE_Msk=(0x1U << SDIO_MASK_TXDAVLIE_Pos)
   SDIO_MASK_TXDAVLIE_Pos=(20U)
   SDIO_MASK_TXFIFOEIE=SDIO_MASK_TXFIFOEIE_Msk
   SDIO_MASK_TXFIFOEIE_Msk=(0x1U << SDIO_MASK_TXFIFOEIE_Pos)
   SDIO_MASK_TXFIFOEIE_Pos=(18U)
   SDIO_MASK_TXFIFOFIE=SDIO_MASK_TXFIFOFIE_Msk
   SDIO_MASK_TXFIFOFIE_Msk=(0x1U << SDIO_MASK_TXFIFOFIE_Pos)
   SDIO_MASK_TXFIFOFIE_Pos=(16U)
   SDIO_MASK_TXFIFOHEIE=SDIO_MASK_TXFIFOHEIE_Msk
   SDIO_MASK_TXFIFOHEIE_Msk=(0x1U << SDIO_MASK_TXFIFOHEIE_Pos)
   SDIO_MASK_TXFIFOHEIE_Pos=(14U)
   SDIO_MASK_TXUNDERRIE=SDIO_MASK_TXUNDERRIE_Msk
   SDIO_MASK_TXUNDERRIE_Msk=(0x1U << SDIO_MASK_TXUNDERRIE_Pos)
   SDIO_MASK_TXUNDERRIE_Pos=(4U)
   SDIO_POWER_PWRCTRL=SDIO_POWER_PWRCTRL_Msk
   SDIO_POWER_PWRCTRL_0=(0x1U << SDIO_POWER_PWRCTRL_Pos)
   SDIO_POWER_PWRCTRL_1=(0x2U << SDIO_POWER_PWRCTRL_Pos)
   SDIO_POWER_PWRCTRL_Msk=(0x3U << SDIO_POWER_PWRCTRL_Pos)
   SDIO_POWER_PWRCTRL_Pos=(0U)
   SDIO_RESP0_CARDSTATUS0=SDIO_RESP0_CARDSTATUS0_Msk
   SDIO_RESP0_CARDSTATUS0_Msk=(0xFFFFFFFFU << SDIO_RESP0_CARDSTATUS0_Pos)
   SDIO_RESP0_CARDSTATUS0_Pos=(0U)
   SDIO_RESP1_CARDSTATUS1=SDIO_RESP1_CARDSTATUS1_Msk
   SDIO_RESP1_CARDSTATUS1_Msk=(0xFFFFFFFFU << SDIO_RESP1_CARDSTATUS1_Pos)
   SDIO_RESP1_CARDSTATUS1_Pos=(0U)
   SDIO_RESP2_CARDSTATUS2=SDIO_RESP2_CARDSTATUS2_Msk
   SDIO_RESP2_CARDSTATUS2_Msk=(0xFFFFFFFFU << SDIO_RESP2_CARDSTATUS2_Pos)
   SDIO_RESP2_CARDSTATUS2_Pos=(0U)
   SDIO_RESP3_CARDSTATUS3=SDIO_RESP3_CARDSTATUS3_Msk
   SDIO_RESP3_CARDSTATUS3_Msk=(0xFFFFFFFFU << SDIO_RESP3_CARDSTATUS3_Pos)
   SDIO_RESP3_CARDSTATUS3_Pos=(0U)
   SDIO_RESP4_CARDSTATUS4=SDIO_RESP4_CARDSTATUS4_Msk
   SDIO_RESP4_CARDSTATUS4_Msk=(0xFFFFFFFFU << SDIO_RESP4_CARDSTATUS4_Pos)
   SDIO_RESP4_CARDSTATUS4_Pos=(0U)
   SDIO_RESPCMD_RESPCMD=SDIO_RESPCMD_RESPCMD_Msk
   SDIO_RESPCMD_RESPCMD_Msk=(0x3FU << SDIO_RESPCMD_RESPCMD_Pos)
   SDIO_RESPCMD_RESPCMD_Pos=(0U)
   SDIO_STA_CCRCFAIL=SDIO_STA_CCRCFAIL_Msk
   SDIO_STA_CCRCFAIL_Msk=(0x1U << SDIO_STA_CCRCFAIL_Pos)
   SDIO_STA_CCRCFAIL_Pos=(0U)
   SDIO_STA_CEATAEND=SDIO_STA_CEATAEND_Msk
   SDIO_STA_CEATAEND_Msk=(0x1U << SDIO_STA_CEATAEND_Pos)
   SDIO_STA_CEATAEND_Pos=(23U)
   SDIO_STA_CMDACT=SDIO_STA_CMDACT_Msk
   SDIO_STA_CMDACT_Msk=(0x1U << SDIO_STA_CMDACT_Pos)
   SDIO_STA_CMDACT_Pos=(11U)
   SDIO_STA_CMDREND=SDIO_STA_CMDREND_Msk
   SDIO_STA_CMDREND_Msk=(0x1U << SDIO_STA_CMDREND_Pos)
   SDIO_STA_CMDREND_Pos=(6U)
   SDIO_STA_CMDSENT=SDIO_STA_CMDSENT_Msk
   SDIO_STA_CMDSENT_Msk=(0x1U << SDIO_STA_CMDSENT_Pos)
   SDIO_STA_CMDSENT_Pos=(7U)
   SDIO_STA_CTIMEOUT=SDIO_STA_CTIMEOUT_Msk
   SDIO_STA_CTIMEOUT_Msk=(0x1U << SDIO_STA_CTIMEOUT_Pos)
   SDIO_STA_CTIMEOUT_Pos=(2U)
   SDIO_STA_DATAEND=SDIO_STA_DATAEND_Msk
   SDIO_STA_DATAEND_Msk=(0x1U << SDIO_STA_DATAEND_Pos)
   SDIO_STA_DATAEND_Pos=(8U)
   SDIO_STA_DBCKEND=SDIO_STA_DBCKEND_Msk
   SDIO_STA_DBCKEND_Msk=(0x1U << SDIO_STA_DBCKEND_Pos)
   SDIO_STA_DBCKEND_Pos=(10U)
   SDIO_STA_DCRCFAIL=SDIO_STA_DCRCFAIL_Msk
   SDIO_STA_DCRCFAIL_Msk=(0x1U << SDIO_STA_DCRCFAIL_Pos)
   SDIO_STA_DCRCFAIL_Pos=(1U)
   SDIO_STA_DTIMEOUT=SDIO_STA_DTIMEOUT_Msk
   SDIO_STA_DTIMEOUT_Msk=(0x1U << SDIO_STA_DTIMEOUT_Pos)
   SDIO_STA_DTIMEOUT_Pos=(3U)
   SDIO_STA_RXACT=SDIO_STA_RXACT_Msk
   SDIO_STA_RXACT_Msk=(0x1U << SDIO_STA_RXACT_Pos)
   SDIO_STA_RXACT_Pos=(13U)
   SDIO_STA_RXDAVL=SDIO_STA_RXDAVL_Msk
   SDIO_STA_RXDAVL_Msk=(0x1U << SDIO_STA_RXDAVL_Pos)
   SDIO_STA_RXDAVL_Pos=(21U)
   SDIO_STA_RXFIFOE=SDIO_STA_RXFIFOE_Msk
   SDIO_STA_RXFIFOE_Msk=(0x1U << SDIO_STA_RXFIFOE_Pos)
   SDIO_STA_RXFIFOE_Pos=(19U)
   SDIO_STA_RXFIFOF=SDIO_STA_RXFIFOF_Msk
   SDIO_STA_RXFIFOF_Msk=(0x1U << SDIO_STA_RXFIFOF_Pos)
   SDIO_STA_RXFIFOF_Pos=(17U)
   SDIO_STA_RXFIFOHF=SDIO_STA_RXFIFOHF_Msk
   SDIO_STA_RXFIFOHF_Msk=(0x1U << SDIO_STA_RXFIFOHF_Pos)
   SDIO_STA_RXFIFOHF_Pos=(15U)
   SDIO_STA_RXOVERR=SDIO_STA_RXOVERR_Msk
   SDIO_STA_RXOVERR_Msk=(0x1U << SDIO_STA_RXOVERR_Pos)
   SDIO_STA_RXOVERR_Pos=(5U)
   SDIO_STA_SDIOIT=SDIO_STA_SDIOIT_Msk
   SDIO_STA_SDIOIT_Msk=(0x1U << SDIO_STA_SDIOIT_Pos)
   SDIO_STA_SDIOIT_Pos=(22U)
   SDIO_STA_STBITERR=SDIO_STA_STBITERR_Msk
   SDIO_STA_STBITERR_Msk=(0x1U << SDIO_STA_STBITERR_Pos)
   SDIO_STA_STBITERR_Pos=(9U)
   SDIO_STA_TXACT=SDIO_STA_TXACT_Msk
   SDIO_STA_TXACT_Msk=(0x1U << SDIO_STA_TXACT_Pos)
   SDIO_STA_TXACT_Pos=(12U)
   SDIO_STA_TXDAVL=SDIO_STA_TXDAVL_Msk
   SDIO_STA_TXDAVL_Msk=(0x1U << SDIO_STA_TXDAVL_Pos)
   SDIO_STA_TXDAVL_Pos=(20U)
   SDIO_STA_TXFIFOE=SDIO_STA_TXFIFOE_Msk
   SDIO_STA_TXFIFOE_Msk=(0x1U << SDIO_STA_TXFIFOE_Pos)
   SDIO_STA_TXFIFOE_Pos=(18U)
   SDIO_STA_TXFIFOF=SDIO_STA_TXFIFOF_Msk
   SDIO_STA_TXFIFOF_Msk=(0x1U << SDIO_STA_TXFIFOF_Pos)
   SDIO_STA_TXFIFOF_Pos=(16U)
   SDIO_STA_TXFIFOHE=SDIO_STA_TXFIFOHE_Msk
   SDIO_STA_TXFIFOHE_Msk=(0x1U << SDIO_STA_TXFIFOHE_Pos)
   SDIO_STA_TXFIFOHE_Pos=(14U)
   SDIO_STA_TXUNDERR=SDIO_STA_TXUNDERR_Msk
   SDIO_STA_TXUNDERR_Msk=(0x1U << SDIO_STA_TXUNDERR_Pos)
   SDIO_STA_TXUNDERR_Pos=(4U)
   SEEK_CUR=1
   SEEK_END=2
   SEEK_SET=0
   SET_BIT(REG,BIT)=((REG) |= (BIT))
   short=+1
   signed=+0
   SIG_ATOMIC_MAX=(__STDINT_EXP(INT_MAX))
   SIG_ATOMIC_MIN=(-__STDINT_EXP(INT_MAX) - 1)
   SIZE_MAX=(__SIZE_MAX__)
   SPI1=((SPI_TypeDef *)SPI1_BASE)
   SPI1_BASE=(APB2PERIPH_BASE + 0x00003000U)
   SPI2=((SPI_TypeDef *)SPI2_BASE)
   SPI2_BASE=(APB1PERIPH_BASE + 0x00003800U)
   SPI_CR1_BIDIMODE=SPI_CR1_BIDIMODE_Msk
   SPI_CR1_BIDIMODE_Msk=(0x1U << SPI_CR1_BIDIMODE_Pos)
   SPI_CR1_BIDIMODE_Pos=(15U)
   SPI_CR1_BIDIOE=SPI_CR1_BIDIOE_Msk
   SPI_CR1_BIDIOE_Msk=(0x1U << SPI_CR1_BIDIOE_Pos)
   SPI_CR1_BIDIOE_Pos=(14U)
   SPI_CR1_BR=SPI_CR1_BR_Msk
   SPI_CR1_BR_0=(0x1U << SPI_CR1_BR_Pos)
   SPI_CR1_BR_1=(0x2U << SPI_CR1_BR_Pos)
   SPI_CR1_BR_2=(0x4U << SPI_CR1_BR_Pos)
   SPI_CR1_BR_Msk=(0x7U << SPI_CR1_BR_Pos)
   SPI_CR1_BR_Pos=(3U)
   SPI_CR1_CPHA=SPI_CR1_CPHA_Msk
   SPI_CR1_CPHA_Msk=(0x1U << SPI_CR1_CPHA_Pos)
   SPI_CR1_CPHA_Pos=(0U)
   SPI_CR1_CPOL=SPI_CR1_CPOL_Msk
   SPI_CR1_CPOL_Msk=(0x1U << SPI_CR1_CPOL_Pos)
   SPI_CR1_CPOL_Pos=(1U)
   SPI_CR1_CRCEN=SPI_CR1_CRCEN_Msk
   SPI_CR1_CRCEN_Msk=(0x1U << SPI_CR1_CRCEN_Pos)
   SPI_CR1_CRCEN_Pos=(13U)
   SPI_CR1_CRCNEXT=SPI_CR1_CRCNEXT_Msk
   SPI_CR1_CRCNEXT_Msk=(0x1U << SPI_CR1_CRCNEXT_Pos)
   SPI_CR1_CRCNEXT_Pos=(12U)
   SPI_CR1_DFF=SPI_CR1_DFF_Msk
   SPI_CR1_DFF_Msk=(0x1U << SPI_CR1_DFF_Pos)
   SPI_CR1_DFF_Pos=(11U)
   SPI_CR1_LSBFIRST=SPI_CR1_LSBFIRST_Msk
   SPI_CR1_LSBFIRST_Msk=(0x1U << SPI_CR1_LSBFIRST_Pos)
   SPI_CR1_LSBFIRST_Pos=(7U)
   SPI_CR1_MSTR=SPI_CR1_MSTR_Msk
   SPI_CR1_MSTR_Msk=(0x1U << SPI_CR1_MSTR_Pos)
   SPI_CR1_MSTR_Pos=(2U)
   SPI_CR1_RXONLY=SPI_CR1_RXONLY_Msk
   SPI_CR1_RXONLY_Msk=(0x1U << SPI_CR1_RXONLY_Pos)
   SPI_CR1_RXONLY_Pos=(10U)
   SPI_CR1_SPE=SPI_CR1_SPE_Msk
   SPI_CR1_SPE_Msk=(0x1U << SPI_CR1_SPE_Pos)
   SPI_CR1_SPE_Pos=(6U)
   SPI_CR1_SSI=SPI_CR1_SSI_Msk
   SPI_CR1_SSI_Msk=(0x1U << SPI_CR1_SSI_Pos)
   SPI_CR1_SSI_Pos=(8U)
   SPI_CR1_SSM=SPI_CR1_SSM_Msk
   SPI_CR1_SSM_Msk=(0x1U << SPI_CR1_SSM_Pos)
   SPI_CR1_SSM_Pos=(9U)
   SPI_CR2_ERRIE=SPI_CR2_ERRIE_Msk
   SPI_CR2_ERRIE_Msk=(0x1U << SPI_CR2_ERRIE_Pos)
   SPI_CR2_ERRIE_Pos=(5U)
   SPI_CR2_RXDMAEN=SPI_CR2_RXDMAEN_Msk
   SPI_CR2_RXDMAEN_Msk=(0x1U << SPI_CR2_RXDMAEN_Pos)
   SPI_CR2_RXDMAEN_Pos=(0U)
   SPI_CR2_RXNEIE=SPI_CR2_RXNEIE_Msk
   SPI_CR2_RXNEIE_Msk=(0x1U << SPI_CR2_RXNEIE_Pos)
   SPI_CR2_RXNEIE_Pos=(6U)
   SPI_CR2_SSOE=SPI_CR2_SSOE_Msk
   SPI_CR2_SSOE_Msk=(0x1U << SPI_CR2_SSOE_Pos)
   SPI_CR2_SSOE_Pos=(2U)
   SPI_CR2_TXDMAEN=SPI_CR2_TXDMAEN_Msk
   SPI_CR2_TXDMAEN_Msk=(0x1U << SPI_CR2_TXDMAEN_Pos)
   SPI_CR2_TXDMAEN_Pos=(1U)
   SPI_CR2_TXEIE=SPI_CR2_TXEIE_Msk
   SPI_CR2_TXEIE_Msk=(0x1U << SPI_CR2_TXEIE_Pos)
   SPI_CR2_TXEIE_Pos=(7U)
   SPI_CRCPR_CRCPOLY=SPI_CRCPR_CRCPOLY_Msk
   SPI_CRCPR_CRCPOLY_Msk=(0xFFFFU << SPI_CRCPR_CRCPOLY_Pos)
   SPI_CRCPR_CRCPOLY_Pos=(0U)
   SPI_DR_DR=SPI_DR_DR_Msk
   SPI_DR_DR_Msk=(0xFFFFU << SPI_DR_DR_Pos)
   SPI_DR_DR_Pos=(0U)
   SPI_I2SCFGR_I2SMOD=SPI_I2SCFGR_I2SMOD_Msk
   SPI_I2SCFGR_I2SMOD_Msk=(0x1U << SPI_I2SCFGR_I2SMOD_Pos)
   SPI_I2SCFGR_I2SMOD_Pos=(11U)
   SPI_RXCRCR_RXCRC=SPI_RXCRCR_RXCRC_Msk
   SPI_RXCRCR_RXCRC_Msk=(0xFFFFU << SPI_RXCRCR_RXCRC_Pos)
   SPI_RXCRCR_RXCRC_Pos=(0U)
   SPI_SR_BSY=SPI_SR_BSY_Msk
   SPI_SR_BSY_Msk=(0x1U << SPI_SR_BSY_Pos)
   SPI_SR_BSY_Pos=(7U)
   SPI_SR_CHSIDE=SPI_SR_CHSIDE_Msk
   SPI_SR_CHSIDE_Msk=(0x1U << SPI_SR_CHSIDE_Pos)
   SPI_SR_CHSIDE_Pos=(2U)
   SPI_SR_CRCERR=SPI_SR_CRCERR_Msk
   SPI_SR_CRCERR_Msk=(0x1U << SPI_SR_CRCERR_Pos)
   SPI_SR_CRCERR_Pos=(4U)
   SPI_SR_MODF=SPI_SR_MODF_Msk
   SPI_SR_MODF_Msk=(0x1U << SPI_SR_MODF_Pos)
   SPI_SR_MODF_Pos=(5U)
   SPI_SR_OVR=SPI_SR_OVR_Msk
   SPI_SR_OVR_Msk=(0x1U << SPI_SR_OVR_Pos)
   SPI_SR_OVR_Pos=(6U)
   SPI_SR_RXNE=SPI_SR_RXNE_Msk
   SPI_SR_RXNE_Msk=(0x1U << SPI_SR_RXNE_Pos)
   SPI_SR_RXNE_Pos=(0U)
   SPI_SR_TXE=SPI_SR_TXE_Msk
   SPI_SR_TXE_Msk=(0x1U << SPI_SR_TXE_Pos)
   SPI_SR_TXE_Pos=(1U)
   SPI_SR_UDR=SPI_SR_UDR_Msk
   SPI_SR_UDR_Msk=(0x1U << SPI_SR_UDR_Pos)
   SPI_SR_UDR_Pos=(3U)
   SPI_TXCRCR_TXCRC=SPI_TXCRCR_TXCRC_Msk
   SPI_TXCRCR_TXCRC_Msk=(0xFFFFU << SPI_TXCRCR_TXCRC_Pos)
   SPI_TXCRCR_TXCRC_Pos=(0U)
   SRAM_BASE=0x20000000U
   SRAM_BB_BASE=0x22000000U
   SR_FLAG_MASK=((uint32_t)(FLASH_SR_BSY | FLASH_SR_PGERR | FLASH_SR_WRPRTERR | FLASH_SR_EOP))
   stderr=(_REENT->_stderr)
   stdin=(_REENT->_stdin)
   stdout=(_REENT->_stdout)
   STM32F1=
   STM32F1xx_HAL_CAN_H=
   SysTick=((SysTick_Type *) SysTick_BASE )
   SysTick_BASE=(SCS_BASE + 0x0010UL)
   SysTick_CALIB_NOREF_Msk=(1UL << SysTick_CALIB_NOREF_Pos)
   SysTick_CALIB_NOREF_Pos=31U
   SysTick_CALIB_SKEW_Msk=(1UL << SysTick_CALIB_SKEW_Pos)
   SysTick_CALIB_SKEW_Pos=30U
   SysTick_CALIB_TENMS_Msk=(0xFFFFFFUL )
   SysTick_CALIB_TENMS_Pos=0U
   SYSTICK_CLKSOURCE_HCLK=0x00000004U
   SYSTICK_CLKSOURCE_HCLK_DIV8=0x00000000U
   SysTick_CTRL_CLKSOURCE_Msk=(1UL << SysTick_CTRL_CLKSOURCE_Pos)
   SysTick_CTRL_CLKSOURCE_Pos=2U
   SysTick_CTRL_COUNTFLAG_Msk=(1UL << SysTick_CTRL_COUNTFLAG_Pos)
   SysTick_CTRL_COUNTFLAG_Pos=16U
   SysTick_CTRL_ENABLE_Msk=(1UL )
   SysTick_CTRL_ENABLE_Pos=0U
   SysTick_CTRL_TICKINT_Msk=(1UL << SysTick_CTRL_TICKINT_Pos)
   SysTick_CTRL_TICKINT_Pos=1U
   SysTick_LOAD_RELOAD_Msk=(0xFFFFFFUL )
   SysTick_LOAD_RELOAD_Pos=0U
   SysTick_VAL_CURRENT_Msk=(0xFFFFFFUL )
   SysTick_VAL_CURRENT_Pos=0U
   TICK_INT_PRIORITY=((uint32_t)0)
   TIM10_IRQHandler=TIM1_UP_IRQHandler
   TIM10_IRQn=TIM1_UP_IRQn
   TIM11_IRQHandler=TIM1_TRG_COM_IRQHandler
   TIM11_IRQn=TIM1_TRG_COM_IRQn
   TIM1=((TIM_TypeDef *)TIM1_BASE)
   TIM1_BASE=(APB2PERIPH_BASE + 0x00002C00U)
   TIM1_BRK_TIM15_IRQHandler=TIM1_BRK_IRQHandler
   TIM1_BRK_TIM15_IRQn=TIM1_BRK_IRQn
   TIM1_BRK_TIM9_IRQHandler=TIM1_BRK_IRQHandler
   TIM1_BRK_TIM9_IRQn=TIM1_BRK_IRQn
   TIM1_TRG_COM_TIM11_IRQHandler=TIM1_TRG_COM_IRQHandler
   TIM1_TRG_COM_TIM11_IRQn=TIM1_TRG_COM_IRQn
   TIM1_TRG_COM_TIM17_IRQHandler=TIM1_TRG_COM_IRQHandler
   TIM1_TRG_COM_TIM17_IRQn=TIM1_TRG_COM_IRQn
   TIM1_UP_TIM10_IRQHandler=TIM1_UP_IRQHandler
   TIM1_UP_TIM10_IRQn=TIM1_UP_IRQn
   TIM1_UP_TIM16_IRQHandler=TIM1_UP_IRQHandler
   TIM1_UP_TIM16_IRQn=TIM1_UP_IRQn
   TIM2=((TIM_TypeDef *)TIM2_BASE)
   TIM2_BASE=(APB1PERIPH_BASE + 0x00000000U)
   TIM3=((TIM_TypeDef *)TIM3_BASE)
   TIM3_BASE=(APB1PERIPH_BASE + 0x00000400U)
   TIM4=((TIM_TypeDef *)TIM4_BASE)
   TIM4_BASE=(APB1PERIPH_BASE + 0x00000800U)
   TIM9_IRQHandler=TIM1_BRK_IRQHandler
   TIM9_IRQn=TIM1_BRK_IRQn
   timeradd(tvp,uvp,vvp)=do { (vvp)->tv_sec = (tvp)->tv_sec + (uvp)->tv_sec; (vvp)->tv_usec = (tvp)->tv_usec + (uvp)->tv_usec; if ((vvp)->tv_usec >= 1000000) { (vvp)->tv_sec++; (vvp)->tv_usec -= 1000000; } } while (0)
   timerclear(tvp)=((tvp)->tv_sec = (tvp)->tv_usec = 0)
   timercmp(tvp,uvp,cmp)=(((tvp)->tv_sec == (uvp)->tv_sec) ? ((tvp)->tv_usec cmp (uvp)->tv_usec) : ((tvp)->tv_sec cmp (uvp)->tv_sec))
   timerisset(tvp)=((tvp)->tv_sec || (tvp)->tv_usec)
   timersub(tvp,uvp,vvp)=do { (vvp)->tv_sec = (tvp)->tv_sec - (uvp)->tv_sec; (vvp)->tv_usec = (tvp)->tv_usec - (uvp)->tv_usec; if ((vvp)->tv_usec < 0) { (vvp)->tv_sec--; (vvp)->tv_usec += 1000000; } } while (0)
   TIMESPEC_TO_TIMEVAL(tv,ts)=do { (tv)->tv_sec = (ts)->tv_sec; (tv)->tv_usec = (ts)->tv_nsec / 1000; } while (0)
   TIMEVAL_TO_TIMESPEC(tv,ts)=do { (ts)->tv_sec = (tv)->tv_sec; (ts)->tv_nsec = (tv)->tv_usec * 1000; } while (0)
   TIM_ARR_ARR=TIM_ARR_ARR_Msk
   TIM_ARR_ARR_Msk=(0xFFFFFFFFU << TIM_ARR_ARR_Pos)
   TIM_ARR_ARR_Pos=(0U)
   TIM_AUTOMATICOUTPUT_DISABLE=0x00000000U
   TIM_AUTOMATICOUTPUT_ENABLE=(TIM_BDTR_AOE)
   TIM_AUTORELOAD_PRELOAD_DISABLE=0x0000U
   TIM_AUTORELOAD_PRELOAD_ENABLE=(TIM_CR1_ARPE)
   TIM_BDTR_AOE=TIM_BDTR_AOE_Msk
   TIM_BDTR_AOE_Msk=(0x1U << TIM_BDTR_AOE_Pos)
   TIM_BDTR_AOE_Pos=(14U)
   TIM_BDTR_BKE=TIM_BDTR_BKE_Msk
   TIM_BDTR_BKE_Msk=(0x1U << TIM_BDTR_BKE_Pos)
   TIM_BDTR_BKE_Pos=(12U)
   TIM_BDTR_BKP=TIM_BDTR_BKP_Msk
   TIM_BDTR_BKP_Msk=(0x1U << TIM_BDTR_BKP_Pos)
   TIM_BDTR_BKP_Pos=(13U)
   TIM_BDTR_DTG=TIM_BDTR_DTG_Msk
   TIM_BDTR_DTG_0=(0x01U << TIM_BDTR_DTG_Pos)
   TIM_BDTR_DTG_1=(0x02U << TIM_BDTR_DTG_Pos)
   TIM_BDTR_DTG_2=(0x04U << TIM_BDTR_DTG_Pos)
   TIM_BDTR_DTG_3=(0x08U << TIM_BDTR_DTG_Pos)
   TIM_BDTR_DTG_4=(0x10U << TIM_BDTR_DTG_Pos)
   TIM_BDTR_DTG_5=(0x20U << TIM_BDTR_DTG_Pos)
   TIM_BDTR_DTG_6=(0x40U << TIM_BDTR_DTG_Pos)
   TIM_BDTR_DTG_7=(0x80U << TIM_BDTR_DTG_Pos)
   TIM_BDTR_DTG_Msk=(0xFFU << TIM_BDTR_DTG_Pos)
   TIM_BDTR_DTG_Pos=(0U)
   TIM_BDTR_LOCK=TIM_BDTR_LOCK_Msk
   TIM_BDTR_LOCK_0=(0x1U << TIM_BDTR_LOCK_Pos)
   TIM_BDTR_LOCK_1=(0x2U << TIM_BDTR_LOCK_Pos)
   TIM_BDTR_LOCK_Msk=(0x3U << TIM_BDTR_LOCK_Pos)
   TIM_BDTR_LOCK_Pos=(8U)
   TIM_BDTR_MOE=TIM_BDTR_MOE_Msk
   TIM_BDTR_MOE_Msk=(0x1U << TIM_BDTR_MOE_Pos)
   TIM_BDTR_MOE_Pos=(15U)
   TIM_BDTR_OSSI=TIM_BDTR_OSSI_Msk
   TIM_BDTR_OSSI_Msk=(0x1U << TIM_BDTR_OSSI_Pos)
   TIM_BDTR_OSSI_Pos=(10U)
   TIM_BDTR_OSSR=TIM_BDTR_OSSR_Msk
   TIM_BDTR_OSSR_Msk=(0x1U << TIM_BDTR_OSSR_Pos)
   TIM_BDTR_OSSR_Pos=(11U)
   TIM_BREAKPOLARITY_HIGH=(TIM_BDTR_BKP)
   TIM_BREAKPOLARITY_LOW=0x00000000U
   TIM_BREAK_DISABLE=0x00000000U
   TIM_BREAK_ENABLE=(TIM_BDTR_BKE)
   TIM_CALC_DTS(__TIMCLK__,__CKD__)=(((__CKD__) == LL_TIM_CLOCKDIVISION_DIV1) ? ((uint64_t)1000000000000U/(__TIMCLK__)) : ((__CKD__) == LL_TIM_CLOCKDIVISION_DIV2) ? ((uint64_t)1000000000000U/((__TIMCLK__) >> 1U)) : ((uint64_t)1000000000000U/((__TIMCLK__) >> 2U)))
   TIM_CCER_CC1E=TIM_CCER_CC1E_Msk
   TIM_CCER_CC1E_Msk=(0x1U << TIM_CCER_CC1E_Pos)
   TIM_CCER_CC1E_Pos=(0U)
   TIM_CCER_CC1NE=TIM_CCER_CC1NE_Msk
   TIM_CCER_CC1NE_Msk=(0x1U << TIM_CCER_CC1NE_Pos)
   TIM_CCER_CC1NE_Pos=(2U)
   TIM_CCER_CC1NP=TIM_CCER_CC1NP_Msk
   TIM_CCER_CC1NP_Msk=(0x1U << TIM_CCER_CC1NP_Pos)
   TIM_CCER_CC1NP_Pos=(3U)
   TIM_CCER_CC1P=TIM_CCER_CC1P_Msk
   TIM_CCER_CC1P_Msk=(0x1U << TIM_CCER_CC1P_Pos)
   TIM_CCER_CC1P_Pos=(1U)
   TIM_CCER_CC2E=TIM_CCER_CC2E_Msk
   TIM_CCER_CC2E_Msk=(0x1U << TIM_CCER_CC2E_Pos)
   TIM_CCER_CC2E_Pos=(4U)
   TIM_CCER_CC2NE=TIM_CCER_CC2NE_Msk
   TIM_CCER_CC2NE_Msk=(0x1U << TIM_CCER_CC2NE_Pos)
   TIM_CCER_CC2NE_Pos=(6U)
   TIM_CCER_CC2NP=TIM_CCER_CC2NP_Msk
   TIM_CCER_CC2NP_Msk=(0x1U << TIM_CCER_CC2NP_Pos)
   TIM_CCER_CC2NP_Pos=(7U)
   TIM_CCER_CC2P=TIM_CCER_CC2P_Msk
   TIM_CCER_CC2P_Msk=(0x1U << TIM_CCER_CC2P_Pos)
   TIM_CCER_CC2P_Pos=(5U)
   TIM_CCER_CC3E=TIM_CCER_CC3E_Msk
   TIM_CCER_CC3E_Msk=(0x1U << TIM_CCER_CC3E_Pos)
   TIM_CCER_CC3E_Pos=(8U)
   TIM_CCER_CC3NE=TIM_CCER_CC3NE_Msk
   TIM_CCER_CC3NE_Msk=(0x1U << TIM_CCER_CC3NE_Pos)
   TIM_CCER_CC3NE_Pos=(10U)
   TIM_CCER_CC3NP=TIM_CCER_CC3NP_Msk
   TIM_CCER_CC3NP_Msk=(0x1U << TIM_CCER_CC3NP_Pos)
   TIM_CCER_CC3NP_Pos=(11U)
   TIM_CCER_CC3P=TIM_CCER_CC3P_Msk
   TIM_CCER_CC3P_Msk=(0x1U << TIM_CCER_CC3P_Pos)
   TIM_CCER_CC3P_Pos=(9U)
   TIM_CCER_CC4E=TIM_CCER_CC4E_Msk
   TIM_CCER_CC4E_Msk=(0x1U << TIM_CCER_CC4E_Pos)
   TIM_CCER_CC4E_Pos=(12U)
   TIM_CCER_CC4P=TIM_CCER_CC4P_Msk
   TIM_CCER_CC4P_Msk=(0x1U << TIM_CCER_CC4P_Pos)
   TIM_CCER_CC4P_Pos=(13U)
   TIM_CCER_CCxE_MASK=((uint32_t)(TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E))
   TIM_CCER_CCxNE_MASK=((uint32_t)(TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE))
   TIM_CCMR1_CC1S=TIM_CCMR1_CC1S_Msk
   TIM_CCMR1_CC1S_0=(0x1U << TIM_CCMR1_CC1S_Pos)
   TIM_CCMR1_CC1S_1=(0x2U << TIM_CCMR1_CC1S_Pos)
   TIM_CCMR1_CC1S_Msk=(0x3U << TIM_CCMR1_CC1S_Pos)
   TIM_CCMR1_CC1S_Pos=(0U)
   TIM_CCMR1_CC2S=TIM_CCMR1_CC2S_Msk
   TIM_CCMR1_CC2S_0=(0x1U << TIM_CCMR1_CC2S_Pos)
   TIM_CCMR1_CC2S_1=(0x2U << TIM_CCMR1_CC2S_Pos)
   TIM_CCMR1_CC2S_Msk=(0x3U << TIM_CCMR1_CC2S_Pos)
   TIM_CCMR1_CC2S_Pos=(8U)
   TIM_CCMR1_IC1F=TIM_CCMR1_IC1F_Msk
   TIM_CCMR1_IC1F_0=(0x1U << TIM_CCMR1_IC1F_Pos)
   TIM_CCMR1_IC1F_1=(0x2U << TIM_CCMR1_IC1F_Pos)
   TIM_CCMR1_IC1F_2=(0x4U << TIM_CCMR1_IC1F_Pos)
   TIM_CCMR1_IC1F_3=(0x8U << TIM_CCMR1_IC1F_Pos)
   TIM_CCMR1_IC1F_Msk=(0xFU << TIM_CCMR1_IC1F_Pos)
   TIM_CCMR1_IC1F_Pos=(4U)
   TIM_CCMR1_IC1PSC=TIM_CCMR1_IC1PSC_Msk
   TIM_CCMR1_IC1PSC_0=(0x1U << TIM_CCMR1_IC1PSC_Pos)
   TIM_CCMR1_IC1PSC_1=(0x2U << TIM_CCMR1_IC1PSC_Pos)
   TIM_CCMR1_IC1PSC_Msk=(0x3U << TIM_CCMR1_IC1PSC_Pos)
   TIM_CCMR1_IC1PSC_Pos=(2U)
   TIM_CCMR1_IC2F=TIM_CCMR1_IC2F_Msk
   TIM_CCMR1_IC2F_0=(0x1U << TIM_CCMR1_IC2F_Pos)
   TIM_CCMR1_IC2F_1=(0x2U << TIM_CCMR1_IC2F_Pos)
   TIM_CCMR1_IC2F_2=(0x4U << TIM_CCMR1_IC2F_Pos)
   TIM_CCMR1_IC2F_3=(0x8U << TIM_CCMR1_IC2F_Pos)
   TIM_CCMR1_IC2F_Msk=(0xFU << TIM_CCMR1_IC2F_Pos)
   TIM_CCMR1_IC2F_Pos=(12U)
   TIM_CCMR1_IC2PSC=TIM_CCMR1_IC2PSC_Msk
   TIM_CCMR1_IC2PSC_0=(0x1U << TIM_CCMR1_IC2PSC_Pos)
   TIM_CCMR1_IC2PSC_1=(0x2U << TIM_CCMR1_IC2PSC_Pos)
   TIM_CCMR1_IC2PSC_Msk=(0x3U << TIM_CCMR1_IC2PSC_Pos)
   TIM_CCMR1_IC2PSC_Pos=(10U)
   TIM_CCMR1_OC1CE=TIM_CCMR1_OC1CE_Msk
   TIM_CCMR1_OC1CE_Msk=(0x1U << TIM_CCMR1_OC1CE_Pos)
   TIM_CCMR1_OC1CE_Pos=(7U)
   TIM_CCMR1_OC1FE=TIM_CCMR1_OC1FE_Msk
   TIM_CCMR1_OC1FE_Msk=(0x1U << TIM_CCMR1_OC1FE_Pos)
   TIM_CCMR1_OC1FE_Pos=(2U)
   TIM_CCMR1_OC1M=TIM_CCMR1_OC1M_Msk
   TIM_CCMR1_OC1M_0=(0x1U << TIM_CCMR1_OC1M_Pos)
   TIM_CCMR1_OC1M_1=(0x2U << TIM_CCMR1_OC1M_Pos)
   TIM_CCMR1_OC1M_2=(0x4U << TIM_CCMR1_OC1M_Pos)
   TIM_CCMR1_OC1M_Msk=(0x7U << TIM_CCMR1_OC1M_Pos)
   TIM_CCMR1_OC1M_Pos=(4U)
   TIM_CCMR1_OC1PE=TIM_CCMR1_OC1PE_Msk
   TIM_CCMR1_OC1PE_Msk=(0x1U << TIM_CCMR1_OC1PE_Pos)
   TIM_CCMR1_OC1PE_Pos=(3U)
   TIM_CCMR1_OC2CE=TIM_CCMR1_OC2CE_Msk
   TIM_CCMR1_OC2CE_Msk=(0x1U << TIM_CCMR1_OC2CE_Pos)
   TIM_CCMR1_OC2CE_Pos=(15U)
   TIM_CCMR1_OC2FE=TIM_CCMR1_OC2FE_Msk
   TIM_CCMR1_OC2FE_Msk=(0x1U << TIM_CCMR1_OC2FE_Pos)
   TIM_CCMR1_OC2FE_Pos=(10U)
   TIM_CCMR1_OC2M=TIM_CCMR1_OC2M_Msk
   TIM_CCMR1_OC2M_0=(0x1U << TIM_CCMR1_OC2M_Pos)
   TIM_CCMR1_OC2M_1=(0x2U << TIM_CCMR1_OC2M_Pos)
   TIM_CCMR1_OC2M_2=(0x4U << TIM_CCMR1_OC2M_Pos)
   TIM_CCMR1_OC2M_Msk=(0x7U << TIM_CCMR1_OC2M_Pos)
   TIM_CCMR1_OC2M_Pos=(12U)
   TIM_CCMR1_OC2PE=TIM_CCMR1_OC2PE_Msk
   TIM_CCMR1_OC2PE_Msk=(0x1U << TIM_CCMR1_OC2PE_Pos)
   TIM_CCMR1_OC2PE_Pos=(11U)
   TIM_CCMR2_CC3S=TIM_CCMR2_CC3S_Msk
   TIM_CCMR2_CC3S_0=(0x1U << TIM_CCMR2_CC3S_Pos)
   TIM_CCMR2_CC3S_1=(0x2U << TIM_CCMR2_CC3S_Pos)
   TIM_CCMR2_CC3S_Msk=(0x3U << TIM_CCMR2_CC3S_Pos)
   TIM_CCMR2_CC3S_Pos=(0U)
   TIM_CCMR2_CC4S=TIM_CCMR2_CC4S_Msk
   TIM_CCMR2_CC4S_0=(0x1U << TIM_CCMR2_CC4S_Pos)
   TIM_CCMR2_CC4S_1=(0x2U << TIM_CCMR2_CC4S_Pos)
   TIM_CCMR2_CC4S_Msk=(0x3U << TIM_CCMR2_CC4S_Pos)
   TIM_CCMR2_CC4S_Pos=(8U)
   TIM_CCMR2_IC3F=TIM_CCMR2_IC3F_Msk
   TIM_CCMR2_IC3F_0=(0x1U << TIM_CCMR2_IC3F_Pos)
   TIM_CCMR2_IC3F_1=(0x2U << TIM_CCMR2_IC3F_Pos)
   TIM_CCMR2_IC3F_2=(0x4U << TIM_CCMR2_IC3F_Pos)
   TIM_CCMR2_IC3F_3=(0x8U << TIM_CCMR2_IC3F_Pos)
   TIM_CCMR2_IC3F_Msk=(0xFU << TIM_CCMR2_IC3F_Pos)
   TIM_CCMR2_IC3F_Pos=(4U)
   TIM_CCMR2_IC3PSC=TIM_CCMR2_IC3PSC_Msk
   TIM_CCMR2_IC3PSC_0=(0x1U << TIM_CCMR2_IC3PSC_Pos)
   TIM_CCMR2_IC3PSC_1=(0x2U << TIM_CCMR2_IC3PSC_Pos)
   TIM_CCMR2_IC3PSC_Msk=(0x3U << TIM_CCMR2_IC3PSC_Pos)
   TIM_CCMR2_IC3PSC_Pos=(2U)
   TIM_CCMR2_IC4F=TIM_CCMR2_IC4F_Msk
   TIM_CCMR2_IC4F_0=(0x1U << TIM_CCMR2_IC4F_Pos)
   TIM_CCMR2_IC4F_1=(0x2U << TIM_CCMR2_IC4F_Pos)
   TIM_CCMR2_IC4F_2=(0x4U << TIM_CCMR2_IC4F_Pos)
   TIM_CCMR2_IC4F_3=(0x8U << TIM_CCMR2_IC4F_Pos)
   TIM_CCMR2_IC4F_Msk=(0xFU << TIM_CCMR2_IC4F_Pos)
   TIM_CCMR2_IC4F_Pos=(12U)
   TIM_CCMR2_IC4PSC=TIM_CCMR2_IC4PSC_Msk
   TIM_CCMR2_IC4PSC_0=(0x1U << TIM_CCMR2_IC4PSC_Pos)
   TIM_CCMR2_IC4PSC_1=(0x2U << TIM_CCMR2_IC4PSC_Pos)
   TIM_CCMR2_IC4PSC_Msk=(0x3U << TIM_CCMR2_IC4PSC_Pos)
   TIM_CCMR2_IC4PSC_Pos=(10U)
   TIM_CCMR2_OC3CE=TIM_CCMR2_OC3CE_Msk
   TIM_CCMR2_OC3CE_Msk=(0x1U << TIM_CCMR2_OC3CE_Pos)
   TIM_CCMR2_OC3CE_Pos=(7U)
   TIM_CCMR2_OC3FE=TIM_CCMR2_OC3FE_Msk
   TIM_CCMR2_OC3FE_Msk=(0x1U << TIM_CCMR2_OC3FE_Pos)
   TIM_CCMR2_OC3FE_Pos=(2U)
   TIM_CCMR2_OC3M=TIM_CCMR2_OC3M_Msk
   TIM_CCMR2_OC3M_0=(0x1U << TIM_CCMR2_OC3M_Pos)
   TIM_CCMR2_OC3M_1=(0x2U << TIM_CCMR2_OC3M_Pos)
   TIM_CCMR2_OC3M_2=(0x4U << TIM_CCMR2_OC3M_Pos)
   TIM_CCMR2_OC3M_Msk=(0x7U << TIM_CCMR2_OC3M_Pos)
   TIM_CCMR2_OC3M_Pos=(4U)
   TIM_CCMR2_OC3PE=TIM_CCMR2_OC3PE_Msk
   TIM_CCMR2_OC3PE_Msk=(0x1U << TIM_CCMR2_OC3PE_Pos)
   TIM_CCMR2_OC3PE_Pos=(3U)
   TIM_CCMR2_OC4CE=TIM_CCMR2_OC4CE_Msk
   TIM_CCMR2_OC4CE_Msk=(0x1U << TIM_CCMR2_OC4CE_Pos)
   TIM_CCMR2_OC4CE_Pos=(15U)
   TIM_CCMR2_OC4FE=TIM_CCMR2_OC4FE_Msk
   TIM_CCMR2_OC4FE_Msk=(0x1U << TIM_CCMR2_OC4FE_Pos)
   TIM_CCMR2_OC4FE_Pos=(10U)
   TIM_CCMR2_OC4M=TIM_CCMR2_OC4M_Msk
   TIM_CCMR2_OC4M_0=(0x1U << TIM_CCMR2_OC4M_Pos)
   TIM_CCMR2_OC4M_1=(0x2U << TIM_CCMR2_OC4M_Pos)
   TIM_CCMR2_OC4M_2=(0x4U << TIM_CCMR2_OC4M_Pos)
   TIM_CCMR2_OC4M_Msk=(0x7U << TIM_CCMR2_OC4M_Pos)
   TIM_CCMR2_OC4M_Pos=(12U)
   TIM_CCMR2_OC4PE=TIM_CCMR2_OC4PE_Msk
   TIM_CCMR2_OC4PE_Msk=(0x1U << TIM_CCMR2_OC4PE_Pos)
   TIM_CCMR2_OC4PE_Pos=(11U)
   TIM_CCR1_CCR1=TIM_CCR1_CCR1_Msk
   TIM_CCR1_CCR1_Msk=(0xFFFFU << TIM_CCR1_CCR1_Pos)
   TIM_CCR1_CCR1_Pos=(0U)
   TIM_CCR2_CCR2=TIM_CCR2_CCR2_Msk
   TIM_CCR2_CCR2_Msk=(0xFFFFU << TIM_CCR2_CCR2_Pos)
   TIM_CCR2_CCR2_Pos=(0U)
   TIM_CCR3_CCR3=TIM_CCR3_CCR3_Msk
   TIM_CCR3_CCR3_Msk=(0xFFFFU << TIM_CCR3_CCR3_Pos)
   TIM_CCR3_CCR3_Pos=(0U)
   TIM_CCR4_CCR4=TIM_CCR4_CCR4_Msk
   TIM_CCR4_CCR4_Msk=(0xFFFFU << TIM_CCR4_CCR4_Pos)
   TIM_CCR4_CCR4_Pos=(0U)
   TIM_CCxN_DISABLE=0x00000000U
   TIM_CCxN_ENABLE=0x00000004U
   TIM_CCx_DISABLE=0x00000000U
   TIM_CCx_ENABLE=0x00000001U
   TIM_CHANNEL_1=0x00000000U
   TIM_CHANNEL_2=0x00000004U
   TIM_CHANNEL_3=0x00000008U
   TIM_CHANNEL_4=0x0000000CU
   TIM_CHANNEL_ALL=0x00000018U
   TIM_CLEARINPUTPOLARITY_INVERTED=TIM_ETRPOLARITY_INVERTED
   TIM_CLEARINPUTPOLARITY_NONINVERTED=TIM_ETRPOLARITY_NONINVERTED
   TIM_CLEARINPUTPRESCALER_DIV1=TIM_ETRPRESCALER_DIV1
   TIM_CLEARINPUTPRESCALER_DIV2=TIM_ETRPRESCALER_DIV2
   TIM_CLEARINPUTPRESCALER_DIV4=TIM_ETRPRESCALER_DIV4
   TIM_CLEARINPUTPRESCALER_DIV8=TIM_ETRPRESCALER_DIV8
   TIM_CLEARINPUTSOURCE_ETR=0x00000001U
   TIM_CLEARINPUTSOURCE_NONE=0x00000000U
   TIM_CLOCKDIVISION_DIV1=0x00000000U
   TIM_CLOCKDIVISION_DIV2=(TIM_CR1_CKD_0)
   TIM_CLOCKDIVISION_DIV4=(TIM_CR1_CKD_1)
   TIM_CLOCKPOLARITY_BOTHEDGE=TIM_INPUTCHANNELPOLARITY_BOTHEDGE
   TIM_CLOCKPOLARITY_FALLING=TIM_INPUTCHANNELPOLARITY_FALLING
   TIM_CLOCKPOLARITY_INVERTED=TIM_ETRPOLARITY_INVERTED
   TIM_CLOCKPOLARITY_NONINVERTED=TIM_ETRPOLARITY_NONINVERTED
   TIM_CLOCKPOLARITY_RISING=TIM_INPUTCHANNELPOLARITY_RISING
   TIM_CLOCKPRESCALER_DIV1=TIM_ETRPRESCALER_DIV1
   TIM_CLOCKPRESCALER_DIV2=TIM_ETRPRESCALER_DIV2
   TIM_CLOCKPRESCALER_DIV4=TIM_ETRPRESCALER_DIV4
   TIM_CLOCKPRESCALER_DIV8=TIM_ETRPRESCALER_DIV8
   TIM_CLOCKSOURCE_ETRMODE1=(TIM_SMCR_TS)
   TIM_CLOCKSOURCE_ETRMODE2=(TIM_SMCR_ETPS_1)
   TIM_CLOCKSOURCE_INTERNAL=(TIM_SMCR_ETPS_0)
   TIM_CLOCKSOURCE_ITR0=((uint32_t)0x0000)
   TIM_CLOCKSOURCE_ITR1=(TIM_SMCR_TS_0)
   TIM_CLOCKSOURCE_ITR2=(TIM_SMCR_TS_1)
   TIM_CLOCKSOURCE_ITR3=(TIM_SMCR_TS_0 | TIM_SMCR_TS_1)
   TIM_CLOCKSOURCE_TI1=(TIM_SMCR_TS_0 | TIM_SMCR_TS_2)
   TIM_CLOCKSOURCE_TI1ED=(TIM_SMCR_TS_2)
   TIM_CLOCKSOURCE_TI2=(TIM_SMCR_TS_1 | TIM_SMCR_TS_2)
   TIM_CNT_CNT=TIM_CNT_CNT_Msk
   TIM_CNT_CNT_Msk=(0xFFFFFFFFU << TIM_CNT_CNT_Pos)
   TIM_CNT_CNT_Pos=(0U)
   TIM_COMMUTATION_SOFTWARE=0x00000000U
   TIM_COMMUTATION_TRGI=(TIM_CR2_CCUS)
   TIM_COUNTERMODE_CENTERALIGNED1=TIM_CR1_CMS_0
   TIM_COUNTERMODE_CENTERALIGNED2=TIM_CR1_CMS_1
   TIM_COUNTERMODE_CENTERALIGNED3=TIM_CR1_CMS
   TIM_COUNTERMODE_DOWN=TIM_CR1_DIR
   TIM_COUNTERMODE_UP=0x00000000U
   TIM_CR1_ARPE=TIM_CR1_ARPE_Msk
   TIM_CR1_ARPE_Msk=(0x1U << TIM_CR1_ARPE_Pos)
   TIM_CR1_ARPE_Pos=(7U)
   TIM_CR1_CEN=TIM_CR1_CEN_Msk
   TIM_CR1_CEN_Msk=(0x1U << TIM_CR1_CEN_Pos)
   TIM_CR1_CEN_Pos=(0U)
   TIM_CR1_CKD=TIM_CR1_CKD_Msk
   TIM_CR1_CKD_0=(0x1U << TIM_CR1_CKD_Pos)
   TIM_CR1_CKD_1=(0x2U << TIM_CR1_CKD_Pos)
   TIM_CR1_CKD_Msk=(0x3U << TIM_CR1_CKD_Pos)
   TIM_CR1_CKD_Pos=(8U)
   TIM_CR1_CMS=TIM_CR1_CMS_Msk
   TIM_CR1_CMS_0=(0x1U << TIM_CR1_CMS_Pos)
   TIM_CR1_CMS_1=(0x2U << TIM_CR1_CMS_Pos)
   TIM_CR1_CMS_Msk=(0x3U << TIM_CR1_CMS_Pos)
   TIM_CR1_CMS_Pos=(5U)
   TIM_CR1_DIR=TIM_CR1_DIR_Msk
   TIM_CR1_DIR_Msk=(0x1U << TIM_CR1_DIR_Pos)
   TIM_CR1_DIR_Pos=(4U)
   TIM_CR1_OPM=TIM_CR1_OPM_Msk
   TIM_CR1_OPM_Msk=(0x1U << TIM_CR1_OPM_Pos)
   TIM_CR1_OPM_Pos=(3U)
   TIM_CR1_UDIS=TIM_CR1_UDIS_Msk
   TIM_CR1_UDIS_Msk=(0x1U << TIM_CR1_UDIS_Pos)
   TIM_CR1_UDIS_Pos=(1U)
   TIM_CR1_URS=TIM_CR1_URS_Msk
   TIM_CR1_URS_Msk=(0x1U << TIM_CR1_URS_Pos)
   TIM_CR1_URS_Pos=(2U)
   TIM_CR2_CCDS=TIM_CR2_CCDS_Msk
   TIM_CR2_CCDS_Msk=(0x1U << TIM_CR2_CCDS_Pos)
   TIM_CR2_CCDS_Pos=(3U)
   TIM_CR2_CCPC=TIM_CR2_CCPC_Msk
   TIM_CR2_CCPC_Msk=(0x1U << TIM_CR2_CCPC_Pos)
   TIM_CR2_CCPC_Pos=(0U)
   TIM_CR2_CCUS=TIM_CR2_CCUS_Msk
   TIM_CR2_CCUS_Msk=(0x1U << TIM_CR2_CCUS_Pos)
   TIM_CR2_CCUS_Pos=(2U)
   TIM_CR2_MMS=TIM_CR2_MMS_Msk
   TIM_CR2_MMS_0=(0x1U << TIM_CR2_MMS_Pos)
   TIM_CR2_MMS_1=(0x2U << TIM_CR2_MMS_Pos)
   TIM_CR2_MMS_2=(0x4U << TIM_CR2_MMS_Pos)
   TIM_CR2_MMS_Msk=(0x7U << TIM_CR2_MMS_Pos)
   TIM_CR2_MMS_Pos=(4U)
   TIM_CR2_OIS1=TIM_CR2_OIS1_Msk
   TIM_CR2_OIS1N=TIM_CR2_OIS1N_Msk
   TIM_CR2_OIS1N_Msk=(0x1U << TIM_CR2_OIS1N_Pos)
   TIM_CR2_OIS1N_Pos=(9U)
   TIM_CR2_OIS1_Msk=(0x1U << TIM_CR2_OIS1_Pos)
   TIM_CR2_OIS1_Pos=(8U)
   TIM_CR2_OIS2=TIM_CR2_OIS2_Msk
   TIM_CR2_OIS2N=TIM_CR2_OIS2N_Msk
   TIM_CR2_OIS2N_Msk=(0x1U << TIM_CR2_OIS2N_Pos)
   TIM_CR2_OIS2N_Pos=(11U)
   TIM_CR2_OIS2_Msk=(0x1U << TIM_CR2_OIS2_Pos)
   TIM_CR2_OIS2_Pos=(10U)
   TIM_CR2_OIS3=TIM_CR2_OIS3_Msk
   TIM_CR2_OIS3N=TIM_CR2_OIS3N_Msk
   TIM_CR2_OIS3N_Msk=(0x1U << TIM_CR2_OIS3N_Pos)
   TIM_CR2_OIS3N_Pos=(13U)
   TIM_CR2_OIS3_Msk=(0x1U << TIM_CR2_OIS3_Pos)
   TIM_CR2_OIS3_Pos=(12U)
   TIM_CR2_OIS4=TIM_CR2_OIS4_Msk
   TIM_CR2_OIS4_Msk=(0x1U << TIM_CR2_OIS4_Pos)
   TIM_CR2_OIS4_Pos=(14U)
   TIM_CR2_TI1S=TIM_CR2_TI1S_Msk
   TIM_CR2_TI1S_Msk=(0x1U << TIM_CR2_TI1S_Pos)
   TIM_CR2_TI1S_Pos=(7U)
   TIM_DCR_DBA=TIM_DCR_DBA_Msk
   TIM_DCR_DBA_0=(0x01U << TIM_DCR_DBA_Pos)
   TIM_DCR_DBA_1=(0x02U << TIM_DCR_DBA_Pos)
   TIM_DCR_DBA_2=(0x04U << TIM_DCR_DBA_Pos)
   TIM_DCR_DBA_3=(0x08U << TIM_DCR_DBA_Pos)
   TIM_DCR_DBA_4=(0x10U << TIM_DCR_DBA_Pos)
   TIM_DCR_DBA_Msk=(0x1FU << TIM_DCR_DBA_Pos)
   TIM_DCR_DBA_Pos=(0U)
   TIM_DCR_DBL=TIM_DCR_DBL_Msk
   TIM_DCR_DBL_0=(0x01U << TIM_DCR_DBL_Pos)
   TIM_DCR_DBL_1=(0x02U << TIM_DCR_DBL_Pos)
   TIM_DCR_DBL_2=(0x04U << TIM_DCR_DBL_Pos)
   TIM_DCR_DBL_3=(0x08U << TIM_DCR_DBL_Pos)
   TIM_DCR_DBL_4=(0x10U << TIM_DCR_DBL_Pos)
   TIM_DCR_DBL_Msk=(0x1FU << TIM_DCR_DBL_Pos)
   TIM_DCR_DBL_Pos=(8U)
   TIM_DIER_BIE=TIM_DIER_BIE_Msk
   TIM_DIER_BIE_Msk=(0x1U << TIM_DIER_BIE_Pos)
   TIM_DIER_BIE_Pos=(7U)
   TIM_DIER_CC1DE=TIM_DIER_CC1DE_Msk
   TIM_DIER_CC1DE_Msk=(0x1U << TIM_DIER_CC1DE_Pos)
   TIM_DIER_CC1DE_Pos=(9U)
   TIM_DIER_CC1IE=TIM_DIER_CC1IE_Msk
   TIM_DIER_CC1IE_Msk=(0x1U << TIM_DIER_CC1IE_Pos)
   TIM_DIER_CC1IE_Pos=(1U)
   TIM_DIER_CC2DE=TIM_DIER_CC2DE_Msk
   TIM_DIER_CC2DE_Msk=(0x1U << TIM_DIER_CC2DE_Pos)
   TIM_DIER_CC2DE_Pos=(10U)
   TIM_DIER_CC2IE=TIM_DIER_CC2IE_Msk
   TIM_DIER_CC2IE_Msk=(0x1U << TIM_DIER_CC2IE_Pos)
   TIM_DIER_CC2IE_Pos=(2U)
   TIM_DIER_CC3DE=TIM_DIER_CC3DE_Msk
   TIM_DIER_CC3DE_Msk=(0x1U << TIM_DIER_CC3DE_Pos)
   TIM_DIER_CC3DE_Pos=(11U)
   TIM_DIER_CC3IE=TIM_DIER_CC3IE_Msk
   TIM_DIER_CC3IE_Msk=(0x1U << TIM_DIER_CC3IE_Pos)
   TIM_DIER_CC3IE_Pos=(3U)
   TIM_DIER_CC4DE=TIM_DIER_CC4DE_Msk
   TIM_DIER_CC4DE_Msk=(0x1U << TIM_DIER_CC4DE_Pos)
   TIM_DIER_CC4DE_Pos=(12U)
   TIM_DIER_CC4IE=TIM_DIER_CC4IE_Msk
   TIM_DIER_CC4IE_Msk=(0x1U << TIM_DIER_CC4IE_Pos)
   TIM_DIER_CC4IE_Pos=(4U)
   TIM_DIER_COMDE=TIM_DIER_COMDE_Msk
   TIM_DIER_COMDE_Msk=(0x1U << TIM_DIER_COMDE_Pos)
   TIM_DIER_COMDE_Pos=(13U)
   TIM_DIER_COMIE=TIM_DIER_COMIE_Msk
   TIM_DIER_COMIE_Msk=(0x1U << TIM_DIER_COMIE_Pos)
   TIM_DIER_COMIE_Pos=(5U)
   TIM_DIER_TDE=TIM_DIER_TDE_Msk
   TIM_DIER_TDE_Msk=(0x1U << TIM_DIER_TDE_Pos)
   TIM_DIER_TDE_Pos=(14U)
   TIM_DIER_TIE=TIM_DIER_TIE_Msk
   TIM_DIER_TIE_Msk=(0x1U << TIM_DIER_TIE_Pos)
   TIM_DIER_TIE_Pos=(6U)
   TIM_DIER_UDE=TIM_DIER_UDE_Msk
   TIM_DIER_UDE_Msk=(0x1U << TIM_DIER_UDE_Pos)
   TIM_DIER_UDE_Pos=(8U)
   TIM_DIER_UIE=TIM_DIER_UIE_Msk
   TIM_DIER_UIE_Msk=(0x1U << TIM_DIER_UIE_Pos)
   TIM_DIER_UIE_Pos=(0U)
   TIM_DMABASE_ARR=0x0000000BU
   TIM_DMABASE_BDTR=0x00000011U
   TIM_DMABASE_CCER=0x00000008U
   TIM_DMABASE_CCMR1=0x00000006U
   TIM_DMABASE_CCMR2=0x00000007U
   TIM_DMABASE_CCR1=0x0000000DU
   TIM_DMABASE_CCR2=0x0000000EU
   TIM_DMABASE_CCR3=0x0000000FU
   TIM_DMABASE_CCR4=0x00000010U
   TIM_DMABASE_CNT=0x00000009U
   TIM_DMABASE_CR1=0x00000000U
   TIM_DMABASE_CR2=0x00000001U
   TIM_DMABASE_DCR=0x00000012U
   TIM_DMABASE_DIER=0x00000003U
   TIM_DMABASE_EGR=0x00000005U
   TIM_DMABASE_PSC=0x0000000AU
   TIM_DMABASE_RCR=0x0000000CU
   TIM_DMABASE_SMCR=0x00000002U
   TIM_DMABASE_SR=0x00000004U
   TIM_DMABURSTLENGTH_10TRANSFERS=0x00000900U
   TIM_DMABURSTLENGTH_11TRANSFERS=0x00000A00U
   TIM_DMABURSTLENGTH_12TRANSFERS=0x00000B00U
   TIM_DMABURSTLENGTH_13TRANSFERS=0x00000C00U
   TIM_DMABURSTLENGTH_14TRANSFERS=0x00000D00U
   TIM_DMABURSTLENGTH_15TRANSFERS=0x00000E00U
   TIM_DMABURSTLENGTH_16TRANSFERS=0x00000F00U
   TIM_DMABURSTLENGTH_17TRANSFERS=0x00001000U
   TIM_DMABURSTLENGTH_18TRANSFERS=0x00001100U
   TIM_DMABURSTLENGTH_1TRANSFER=0x00000000U
   TIM_DMABURSTLENGTH_2TRANSFERS=0x00000100U
   TIM_DMABURSTLENGTH_3TRANSFERS=0x00000200U
   TIM_DMABURSTLENGTH_4TRANSFERS=0x00000300U
   TIM_DMABURSTLENGTH_5TRANSFERS=0x00000400U
   TIM_DMABURSTLENGTH_6TRANSFERS=0x00000500U
   TIM_DMABURSTLENGTH_7TRANSFERS=0x00000600U
   TIM_DMABURSTLENGTH_8TRANSFERS=0x00000700U
   TIM_DMABURSTLENGTH_9TRANSFERS=0x00000800U
   TIM_DMAR_DMAB=TIM_DMAR_DMAB_Msk
   TIM_DMAR_DMAB_Msk=(0xFFFFU << TIM_DMAR_DMAB_Pos)
   TIM_DMAR_DMAB_Pos=(0U)
   TIM_DMA_CC1=(TIM_DIER_CC1DE)
   TIM_DMA_CC2=(TIM_DIER_CC2DE)
   TIM_DMA_CC3=(TIM_DIER_CC3DE)
   TIM_DMA_CC4=(TIM_DIER_CC4DE)
   TIM_DMA_COM=(TIM_DIER_COMDE)
   TIM_DMA_ID_CC1=((uint16_t)0x1)
   TIM_DMA_ID_CC2=((uint16_t)0x2)
   TIM_DMA_ID_CC3=((uint16_t)0x3)
   TIM_DMA_ID_CC4=((uint16_t)0x4)
   TIM_DMA_ID_COMMUTATION=((uint16_t)0x5)
   TIM_DMA_ID_TRIGGER=((uint16_t)0x6)
   TIM_DMA_ID_UPDATE=((uint16_t)0x0)
   TIM_DMA_TRIGGER=(TIM_DIER_TDE)
   TIM_DMA_UPDATE=(TIM_DIER_UDE)
   TIM_EGR_BG=TIM_EGR_BG_Msk
   TIM_EGR_BG_Msk=(0x1U << TIM_EGR_BG_Pos)
   TIM_EGR_BG_Pos=(7U)
   TIM_EGR_CC1G=TIM_EGR_CC1G_Msk
   TIM_EGR_CC1G_Msk=(0x1U << TIM_EGR_CC1G_Pos)
   TIM_EGR_CC1G_Pos=(1U)
   TIM_EGR_CC2G=TIM_EGR_CC2G_Msk
   TIM_EGR_CC2G_Msk=(0x1U << TIM_EGR_CC2G_Pos)
   TIM_EGR_CC2G_Pos=(2U)
   TIM_EGR_CC3G=TIM_EGR_CC3G_Msk
   TIM_EGR_CC3G_Msk=(0x1U << TIM_EGR_CC3G_Pos)
   TIM_EGR_CC3G_Pos=(3U)
   TIM_EGR_CC4G=TIM_EGR_CC4G_Msk
   TIM_EGR_CC4G_Msk=(0x1U << TIM_EGR_CC4G_Pos)
   TIM_EGR_CC4G_Pos=(4U)
   TIM_EGR_COMG=TIM_EGR_COMG_Msk
   TIM_EGR_COMG_Msk=(0x1U << TIM_EGR_COMG_Pos)
   TIM_EGR_COMG_Pos=(5U)
   TIM_EGR_TG=TIM_EGR_TG_Msk
   TIM_EGR_TG_Msk=(0x1U << TIM_EGR_TG_Pos)
   TIM_EGR_TG_Pos=(6U)
   TIM_EGR_UG=TIM_EGR_UG_Msk
   TIM_EGR_UG_Msk=(0x1U << TIM_EGR_UG_Pos)
   TIM_EGR_UG_Pos=(0U)
   TIM_ENCODERMODE_TI12=(TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0)
   TIM_ENCODERMODE_TI1=(TIM_SMCR_SMS_0)
   TIM_ENCODERMODE_TI2=(TIM_SMCR_SMS_1)
   TIM_ETRPOLARITY_INVERTED=(TIM_SMCR_ETP)
   TIM_ETRPOLARITY_NONINVERTED=0x00000000U
   TIM_ETRPRESCALER_DIV1=0x00000000U
   TIM_ETRPRESCALER_DIV2=(TIM_SMCR_ETPS_0)
   TIM_ETRPRESCALER_DIV4=(TIM_SMCR_ETPS_1)
   TIM_ETRPRESCALER_DIV8=(TIM_SMCR_ETPS)
   TIM_EVENTSOURCE_BREAK=TIM_EGR_BG
   TIM_EVENTSOURCE_CC1=TIM_EGR_CC1G
   TIM_EVENTSOURCE_CC2=TIM_EGR_CC2G
   TIM_EVENTSOURCE_CC3=TIM_EGR_CC3G
   TIM_EVENTSOURCE_CC4=TIM_EGR_CC4G
   TIM_EVENTSOURCE_COM=TIM_EGR_COMG
   TIM_EVENTSOURCE_TRIGGER=TIM_EGR_TG
   TIM_EVENTSOURCE_UPDATE=TIM_EGR_UG
   TIM_FLAG_BREAK=(TIM_SR_BIF)
   TIM_FLAG_CC1=(TIM_SR_CC1IF)
   TIM_FLAG_CC1OF=(TIM_SR_CC1OF)
   TIM_FLAG_CC2=(TIM_SR_CC2IF)
   TIM_FLAG_CC2OF=(TIM_SR_CC2OF)
   TIM_FLAG_CC3=(TIM_SR_CC3IF)
   TIM_FLAG_CC3OF=(TIM_SR_CC3OF)
   TIM_FLAG_CC4=(TIM_SR_CC4IF)
   TIM_FLAG_CC4OF=(TIM_SR_CC4OF)
   TIM_FLAG_COM=(TIM_SR_COMIF)
   TIM_FLAG_TRIGGER=(TIM_SR_TIF)
   TIM_FLAG_UPDATE=(TIM_SR_UIF)
   TIM_GET_CHANNEL_INDEX(__CHANNEL__)=(((__CHANNEL__) == LL_TIM_CHANNEL_CH1) ? 0U :((__CHANNEL__) == LL_TIM_CHANNEL_CH1N) ? 1U :((__CHANNEL__) == LL_TIM_CHANNEL_CH2) ? 2U :((__CHANNEL__) == LL_TIM_CHANNEL_CH2N) ? 3U :((__CHANNEL__) == LL_TIM_CHANNEL_CH3) ? 4U :((__CHANNEL__) == LL_TIM_CHANNEL_CH3N) ? 5U : 6U)
   TIM_ICPOLARITY_BOTHEDGE=TIM_INPUTCHANNELPOLARITY_BOTHEDGE
   TIM_ICPOLARITY_FALLING=TIM_INPUTCHANNELPOLARITY_FALLING
   TIM_ICPOLARITY_RISING=TIM_INPUTCHANNELPOLARITY_RISING
   TIM_ICPSC_DIV1=0x00000000U
   TIM_ICPSC_DIV2=(TIM_CCMR1_IC1PSC_0)
   TIM_ICPSC_DIV4=(TIM_CCMR1_IC1PSC_1)
   TIM_ICPSC_DIV8=(TIM_CCMR1_IC1PSC)
   TIM_ICSELECTION_DIRECTTI=(TIM_CCMR1_CC1S_0)
   TIM_ICSELECTION_INDIRECTTI=(TIM_CCMR1_CC1S_1)
   TIM_ICSELECTION_TRC=(TIM_CCMR1_CC1S)
   TIM_INPUTCHANNELPOLARITY_BOTHEDGE=(TIM_CCER_CC1P | TIM_CCER_CC1NP)
   TIM_INPUTCHANNELPOLARITY_FALLING=(TIM_CCER_CC1P)
   TIM_INPUTCHANNELPOLARITY_RISING=0x00000000U
   TIM_IT_BREAK=(TIM_DIER_BIE)
   TIM_IT_CC1=(TIM_DIER_CC1IE)
   TIM_IT_CC2=(TIM_DIER_CC2IE)
   TIM_IT_CC3=(TIM_DIER_CC3IE)
   TIM_IT_CC4=(TIM_DIER_CC4IE)
   TIM_IT_COM=(TIM_DIER_COMIE)
   TIM_IT_TRIGGER=(TIM_DIER_TIE)
   TIM_IT_UPDATE=(TIM_DIER_UIE)
   TIM_LOCKLEVEL_1=(TIM_BDTR_LOCK_0)
   TIM_LOCKLEVEL_2=(TIM_BDTR_LOCK_1)
   TIM_LOCKLEVEL_3=(TIM_BDTR_LOCK)
   TIM_LOCKLEVEL_OFF=0x00000000U
   TIM_MASTERSLAVEMODE_DISABLE=0x00000000U
   TIM_MASTERSLAVEMODE_ENABLE=0x00000080U
   TIM_OCFAST_DISABLE=0x00000000U
   TIM_OCFAST_ENABLE=(TIM_CCMR1_OC1FE)
   TIM_OCIDLESTATE_RESET=0x00000000U
   TIM_OCIDLESTATE_SET=(TIM_CR2_OIS1)
   TIM_OCMODE_ACTIVE=(TIM_CCMR1_OC1M_0)
   TIM_OCMODE_FORCED_ACTIVE=(TIM_CCMR1_OC1M_0 | TIM_CCMR1_OC1M_2)
   TIM_OCMODE_FORCED_INACTIVE=(TIM_CCMR1_OC1M_2)
   TIM_OCMODE_INACTIVE=(TIM_CCMR1_OC1M_1)
   TIM_OCMODE_PWM1=(TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2)
   TIM_OCMODE_PWM2=(TIM_CCMR1_OC1M)
   TIM_OCMODE_TIMING=0x00000000U
   TIM_OCMODE_TOGGLE=(TIM_CCMR1_OC1M_0 | TIM_CCMR1_OC1M_1)
   TIM_OCNIDLESTATE_RESET=0x00000000U
   TIM_OCNIDLESTATE_SET=(TIM_CR2_OIS1N)
   TIM_OCNPOLARITY_HIGH=0x00000000U
   TIM_OCNPOLARITY_LOW=(TIM_CCER_CC1NP)
   TIM_OCPOLARITY_HIGH=0x00000000U
   TIM_OCPOLARITY_LOW=(TIM_CCER_CC1P)
   TIM_OPMODE_REPETITIVE=0x00000000U
   TIM_OPMODE_SINGLE=(TIM_CR1_OPM)
   TIM_OSSI_DISABLE=0x00000000U
   TIM_OSSI_ENABLE=(TIM_BDTR_OSSI)
   TIM_OSSR_DISABLE=0x00000000U
   TIM_OSSR_ENABLE=(TIM_BDTR_OSSR)
   TIM_OUTPUTNSTATE_DISABLE=0x00000000U
   TIM_OUTPUTNSTATE_ENABLE=(TIM_CCER_CC1NE)
   TIM_OUTPUTSTATE_DISABLE=0x00000000U
   TIM_OUTPUTSTATE_ENABLE=(TIM_CCER_CC1E)
   TIM_PSC_PSC=TIM_PSC_PSC_Msk
   TIM_PSC_PSC_Msk=(0xFFFFU << TIM_PSC_PSC_Pos)
   TIM_PSC_PSC_Pos=(0U)
   TIM_RCR_REP=TIM_RCR_REP_Msk
   TIM_RCR_REP_Msk=(0xFFU << TIM_RCR_REP_Pos)
   TIM_RCR_REP_Pos=(0U)
   TIM_RESET_CAPTUREPOLARITY(__HANDLE__,__CHANNEL__)=(((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP)) : ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP)) : ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP)) : ((__HANDLE__)->Instance->CCER &= (uint16_t)~TIM_CCER_CC4P))
   TIM_RESET_ICPRESCALERVALUE(__HANDLE__,__CHANNEL__)=(((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC) : ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC) : ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC) : ((__HANDLE__)->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC))
   TIM_SET_CAPTUREPOLARITY(__HANDLE__,__CHANNEL__,__POLARITY__)=(((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCER |= (__POLARITY__)) : ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCER |= ((__POLARITY__) << 4U)) : ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCER |= ((__POLARITY__) << 8U)) : ((__HANDLE__)->Instance->CCER |= (((__POLARITY__) << 12U) & TIM_CCER_CC4P)))
   TIM_SET_ICPRESCALERVALUE(__HANDLE__,__CHANNEL__,__ICPSC__)=(((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCMR1 |= (__ICPSC__)) : ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCMR1 |= ((__ICPSC__) << 8U)) : ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCMR2 |= (__ICPSC__)) : ((__HANDLE__)->Instance->CCMR2 |= ((__ICPSC__) << 8U)))
   TIM_SLAVEMODE_DISABLE=0x00000000U
   TIM_SLAVEMODE_EXTERNAL1=0x00000007U
   TIM_SLAVEMODE_GATED=0x00000005U
   TIM_SLAVEMODE_RESET=0x00000004U
   TIM_SLAVEMODE_TRIGGER=0x00000006U
   TIM_SMCR_ECE=TIM_SMCR_ECE_Msk
   TIM_SMCR_ECE_Msk=(0x1U << TIM_SMCR_ECE_Pos)
   TIM_SMCR_ECE_Pos=(14U)
   TIM_SMCR_ETF=TIM_SMCR_ETF_Msk
   TIM_SMCR_ETF_0=(0x1U << TIM_SMCR_ETF_Pos)
   TIM_SMCR_ETF_1=(0x2U << TIM_SMCR_ETF_Pos)
   TIM_SMCR_ETF_2=(0x4U << TIM_SMCR_ETF_Pos)
   TIM_SMCR_ETF_3=(0x8U << TIM_SMCR_ETF_Pos)
   TIM_SMCR_ETF_Msk=(0xFU << TIM_SMCR_ETF_Pos)
   TIM_SMCR_ETF_Pos=(8U)
   TIM_SMCR_ETP=TIM_SMCR_ETP_Msk
   TIM_SMCR_ETPS=TIM_SMCR_ETPS_Msk
   TIM_SMCR_ETPS_0=(0x1U << TIM_SMCR_ETPS_Pos)
   TIM_SMCR_ETPS_1=(0x2U << TIM_SMCR_ETPS_Pos)
   TIM_SMCR_ETPS_Msk=(0x3U << TIM_SMCR_ETPS_Pos)
   TIM_SMCR_ETPS_Pos=(12U)
   TIM_SMCR_ETP_Msk=(0x1U << TIM_SMCR_ETP_Pos)
   TIM_SMCR_ETP_Pos=(15U)
   TIM_SMCR_MSM=TIM_SMCR_MSM_Msk
   TIM_SMCR_MSM_Msk=(0x1U << TIM_SMCR_MSM_Pos)
   TIM_SMCR_MSM_Pos=(7U)
   TIM_SMCR_SMS=TIM_SMCR_SMS_Msk
   TIM_SMCR_SMS_0=(0x1U << TIM_SMCR_SMS_Pos)
   TIM_SMCR_SMS_1=(0x2U << TIM_SMCR_SMS_Pos)
   TIM_SMCR_SMS_2=(0x4U << TIM_SMCR_SMS_Pos)
   TIM_SMCR_SMS_Msk=(0x7U << TIM_SMCR_SMS_Pos)
   TIM_SMCR_SMS_Pos=(0U)
   TIM_SMCR_TS=TIM_SMCR_TS_Msk
   TIM_SMCR_TS_0=(0x1U << TIM_SMCR_TS_Pos)
   TIM_SMCR_TS_1=(0x2U << TIM_SMCR_TS_Pos)
   TIM_SMCR_TS_2=(0x4U << TIM_SMCR_TS_Pos)
   TIM_SMCR_TS_Msk=(0x7U << TIM_SMCR_TS_Pos)
   TIM_SMCR_TS_Pos=(4U)
   TIM_SR_BIF=TIM_SR_BIF_Msk
   TIM_SR_BIF_Msk=(0x1U << TIM_SR_BIF_Pos)
   TIM_SR_BIF_Pos=(7U)
   TIM_SR_CC1IF=TIM_SR_CC1IF_Msk
   TIM_SR_CC1IF_Msk=(0x1U << TIM_SR_CC1IF_Pos)
   TIM_SR_CC1IF_Pos=(1U)
   TIM_SR_CC1OF=TIM_SR_CC1OF_Msk
   TIM_SR_CC1OF_Msk=(0x1U << TIM_SR_CC1OF_Pos)
   TIM_SR_CC1OF_Pos=(9U)
   TIM_SR_CC2IF=TIM_SR_CC2IF_Msk
   TIM_SR_CC2IF_Msk=(0x1U << TIM_SR_CC2IF_Pos)
   TIM_SR_CC2IF_Pos=(2U)
   TIM_SR_CC2OF=TIM_SR_CC2OF_Msk
   TIM_SR_CC2OF_Msk=(0x1U << TIM_SR_CC2OF_Pos)
   TIM_SR_CC2OF_Pos=(10U)
   TIM_SR_CC3IF=TIM_SR_CC3IF_Msk
   TIM_SR_CC3IF_Msk=(0x1U << TIM_SR_CC3IF_Pos)
   TIM_SR_CC3IF_Pos=(3U)
   TIM_SR_CC3OF=TIM_SR_CC3OF_Msk
   TIM_SR_CC3OF_Msk=(0x1U << TIM_SR_CC3OF_Pos)
   TIM_SR_CC3OF_Pos=(11U)
   TIM_SR_CC4IF=TIM_SR_CC4IF_Msk
   TIM_SR_CC4IF_Msk=(0x1U << TIM_SR_CC4IF_Pos)
   TIM_SR_CC4IF_Pos=(4U)
   TIM_SR_CC4OF=TIM_SR_CC4OF_Msk
   TIM_SR_CC4OF_Msk=(0x1U << TIM_SR_CC4OF_Pos)
   TIM_SR_CC4OF_Pos=(12U)
   TIM_SR_COMIF=TIM_SR_COMIF_Msk
   TIM_SR_COMIF_Msk=(0x1U << TIM_SR_COMIF_Pos)
   TIM_SR_COMIF_Pos=(5U)
   TIM_SR_TIF=TIM_SR_TIF_Msk
   TIM_SR_TIF_Msk=(0x1U << TIM_SR_TIF_Pos)
   TIM_SR_TIF_Pos=(6U)
   TIM_SR_UIF=TIM_SR_UIF_Msk
   TIM_SR_UIF_Msk=(0x1U << TIM_SR_UIF_Pos)
   TIM_SR_UIF_Pos=(0U)
   TIM_TI1SELECTION_CH1=0x00000000U
   TIM_TI1SELECTION_XORCOMBINATION=(TIM_CR2_TI1S)
   TIM_TRGO_ENABLE=(TIM_CR2_MMS_0)
   TIM_TRGO_OC1=((TIM_CR2_MMS_1 | TIM_CR2_MMS_0))
   TIM_TRGO_OC1REF=(TIM_CR2_MMS_2)
   TIM_TRGO_OC2REF=((TIM_CR2_MMS_2 | TIM_CR2_MMS_0))
   TIM_TRGO_OC3REF=((TIM_CR2_MMS_2 | TIM_CR2_MMS_1))
   TIM_TRGO_OC4REF=((TIM_CR2_MMS_2 | TIM_CR2_MMS_1 | TIM_CR2_MMS_0))
   TIM_TRGO_RESET=0x00000000U
   TIM_TRGO_UPDATE=(TIM_CR2_MMS_1)
   TIM_TRIGGERPOLARITY_BOTHEDGE=TIM_INPUTCHANNELPOLARITY_BOTHEDGE
   TIM_TRIGGERPOLARITY_FALLING=TIM_INPUTCHANNELPOLARITY_FALLING
   TIM_TRIGGERPOLARITY_INVERTED=TIM_ETRPOLARITY_INVERTED
   TIM_TRIGGERPOLARITY_NONINVERTED=TIM_ETRPOLARITY_NONINVERTED
   TIM_TRIGGERPOLARITY_RISING=TIM_INPUTCHANNELPOLARITY_RISING
   TIM_TRIGGERPRESCALER_DIV1=TIM_ETRPRESCALER_DIV1
   TIM_TRIGGERPRESCALER_DIV2=TIM_ETRPRESCALER_DIV2
   TIM_TRIGGERPRESCALER_DIV4=TIM_ETRPRESCALER_DIV4
   TIM_TRIGGERPRESCALER_DIV8=TIM_ETRPRESCALER_DIV8
   TIM_TS_ETRF=0x00000070U
   TIM_TS_ITR0=0x00000000U
   TIM_TS_ITR1=0x00000010U
   TIM_TS_ITR2=0x00000020U
   TIM_TS_ITR3=0x00000030U
   TIM_TS_NONE=0x0000FFFFU
   TIM_TS_TI1FP1=0x00000050U
   TIM_TS_TI1F_ED=0x00000040U
   TIM_TS_TI2FP2=0x00000060U
   TMP_MAX=26
   TPI=((TPI_Type *) TPI_BASE )
   TPI_ACPR_PRESCALER_Msk=(0x1FFFUL )
   TPI_ACPR_PRESCALER_Pos=0U
   TPI_BASE=(0xE0040000UL)
   TPI_DEVID_AsynClkIn_Msk=(0x1UL << TPI_DEVID_AsynClkIn_Pos)
   TPI_DEVID_AsynClkIn_Pos=5U
   TPI_DEVID_MANCVALID_Msk=(0x1UL << TPI_DEVID_MANCVALID_Pos)
   TPI_DEVID_MANCVALID_Pos=10U
   TPI_DEVID_MinBufSz_Msk=(0x7UL << TPI_DEVID_MinBufSz_Pos)
   TPI_DEVID_MinBufSz_Pos=6U
   TPI_DEVID_NrTraceInput_Msk=(0x1FUL )
   TPI_DEVID_NrTraceInput_Pos=0U
   TPI_DEVID_NRZVALID_Msk=(0x1UL << TPI_DEVID_NRZVALID_Pos)
   TPI_DEVID_NRZVALID_Pos=11U
   TPI_DEVID_PTINVALID_Msk=(0x1UL << TPI_DEVID_PTINVALID_Pos)
   TPI_DEVID_PTINVALID_Pos=9U
   TPI_DEVTYPE_MajorType_Msk=(0xFUL << TPI_DEVTYPE_MajorType_Pos)
   TPI_DEVTYPE_MajorType_Pos=4U
   TPI_DEVTYPE_SubType_Msk=(0xFUL )
   TPI_DEVTYPE_SubType_Pos=0U
   TPI_FFCR_EnFCont_Msk=(0x1UL << TPI_FFCR_EnFCont_Pos)
   TPI_FFCR_EnFCont_Pos=1U
   TPI_FFCR_TrigIn_Msk=(0x1UL << TPI_FFCR_TrigIn_Pos)
   TPI_FFCR_TrigIn_Pos=8U
   TPI_FFSR_FlInProg_Msk=(0x1UL )
   TPI_FFSR_FlInProg_Pos=0U
   TPI_FFSR_FtNonStop_Msk=(0x1UL << TPI_FFSR_FtNonStop_Pos)
   TPI_FFSR_FtNonStop_Pos=3U
   TPI_FFSR_FtStopped_Msk=(0x1UL << TPI_FFSR_FtStopped_Pos)
   TPI_FFSR_FtStopped_Pos=1U
   TPI_FFSR_TCPresent_Msk=(0x1UL << TPI_FFSR_TCPresent_Pos)
   TPI_FFSR_TCPresent_Pos=2U
   TPI_FIFO0_ETM0_Msk=(0xFFUL )
   TPI_FIFO0_ETM0_Pos=0U
   TPI_FIFO0_ETM1_Msk=(0xFFUL << TPI_FIFO0_ETM1_Pos)
   TPI_FIFO0_ETM1_Pos=8U
   TPI_FIFO0_ETM2_Msk=(0xFFUL << TPI_FIFO0_ETM2_Pos)
   TPI_FIFO0_ETM2_Pos=16U
   TPI_FIFO0_ETM_ATVALID_Msk=(0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)
   TPI_FIFO0_ETM_ATVALID_Pos=26U
   TPI_FIFO0_ETM_bytecount_Msk=(0x3UL << TPI_FIFO0_ETM_bytecount_Pos)
   TPI_FIFO0_ETM_bytecount_Pos=24U
   TPI_FIFO0_ITM_ATVALID_Msk=(0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)
   TPI_FIFO0_ITM_ATVALID_Pos=29U
   TPI_FIFO0_ITM_bytecount_Msk=(0x3UL << TPI_FIFO0_ITM_bytecount_Pos)
   TPI_FIFO0_ITM_bytecount_Pos=27U
   TPI_FIFO1_ETM_ATVALID_Msk=(0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)
   TPI_FIFO1_ETM_ATVALID_Pos=26U
   TPI_FIFO1_ETM_bytecount_Msk=(0x3UL << TPI_FIFO1_ETM_bytecount_Pos)
   TPI_FIFO1_ETM_bytecount_Pos=24U
   TPI_FIFO1_ITM0_Msk=(0xFFUL )
   TPI_FIFO1_ITM0_Pos=0U
   TPI_FIFO1_ITM1_Msk=(0xFFUL << TPI_FIFO1_ITM1_Pos)
   TPI_FIFO1_ITM1_Pos=8U
   TPI_FIFO1_ITM2_Msk=(0xFFUL << TPI_FIFO1_ITM2_Pos)
   TPI_FIFO1_ITM2_Pos=16U
   TPI_FIFO1_ITM_ATVALID_Msk=(0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)
   TPI_FIFO1_ITM_ATVALID_Pos=29U
   TPI_FIFO1_ITM_bytecount_Msk=(0x3UL << TPI_FIFO1_ITM_bytecount_Pos)
   TPI_FIFO1_ITM_bytecount_Pos=27U
   TPI_ITATBCTR0_ATREADY_Msk=(0x1UL )
   TPI_ITATBCTR0_ATREADY_Pos=0U
   TPI_ITATBCTR2_ATREADY_Msk=(0x1UL )
   TPI_ITATBCTR2_ATREADY_Pos=0U
   TPI_ITCTRL_Mode_Msk=(0x1UL )
   TPI_ITCTRL_Mode_Pos=0U
   TPI_SPPR_TXMODE_Msk=(0x3UL )
   TPI_SPPR_TXMODE_Pos=0U
   TPI_TRIGGER_TRIGGER_Msk=(0x1UL )
   TPI_TRIGGER_TRIGGER_Pos=0U
   UID_BASE=0x1FFFF7E8U
   UID_BASE_ADDRESS=UID_BASE
   UINT16_C(x)=__UINT16_C(x)
   UINT16_MAX=(__UINT16_MAX__)
   UINT32_C(x)=__UINT32_C(x)
   UINT32_MAX=(__UINT32_MAX__)
   UINT64_C(x)=__UINT64_C(x)
   UINT64_MAX=(__UINT64_MAX__)
   UINT8_C(x)=__UINT8_C(x)
   UINT8_MAX=(__UINT8_MAX__)
   UINTMAX_C(x)=__UINTMAX_C(x)
   UINTMAX_MAX=(__UINTMAX_MAX__)
   UINTPTR_MAX=(__UINTPTR_MAX__)
   UINT_FAST16_MAX=(__UINT_FAST16_MAX__)
   UINT_FAST32_MAX=(__UINT_FAST32_MAX__)
   UINT_FAST64_MAX=(__UINT_FAST64_MAX__)
   UINT_FAST8_MAX=(__UINT_FAST8_MAX__)
   UINT_LEAST16_MAX=(__UINT_LEAST16_MAX__)
   UINT_LEAST32_MAX=(__UINT_LEAST32_MAX__)
   UINT_LEAST64_MAX=(__UINT_LEAST64_MAX__)
   UINT_LEAST8_MAX=(__UINT_LEAST8_MAX__)
   unsigned=+0
   unsigned=signed
   UNUSED(X)=(void)X
   USART1=((USART_TypeDef *)USART1_BASE)
   USART1_BASE=(APB2PERIPH_BASE + 0x00003800U)
   USART2=((USART_TypeDef *)USART2_BASE)
   USART2_BASE=(APB1PERIPH_BASE + 0x00004400U)
   USART3=((USART_TypeDef *)USART3_BASE)
   USART3_BASE=(APB1PERIPH_BASE + 0x00004800U)
   USART_BRR_DIV_Fraction=USART_BRR_DIV_Fraction_Msk
   USART_BRR_DIV_Fraction_Msk=(0xFU << USART_BRR_DIV_Fraction_Pos)
   USART_BRR_DIV_Fraction_Pos=(0U)
   USART_BRR_DIV_Mantissa=USART_BRR_DIV_Mantissa_Msk
   USART_BRR_DIV_Mantissa_Msk=(0xFFFU << USART_BRR_DIV_Mantissa_Pos)
   USART_BRR_DIV_Mantissa_Pos=(4U)
   USART_CR1_IDLEIE=USART_CR1_IDLEIE_Msk
   USART_CR1_IDLEIE_Msk=(0x1U << USART_CR1_IDLEIE_Pos)
   USART_CR1_IDLEIE_Pos=(4U)
   USART_CR1_M=USART_CR1_M_Msk
   USART_CR1_M_Msk=(0x1U << USART_CR1_M_Pos)
   USART_CR1_M_Pos=(12U)
   USART_CR1_PCE=USART_CR1_PCE_Msk
   USART_CR1_PCE_Msk=(0x1U << USART_CR1_PCE_Pos)
   USART_CR1_PCE_Pos=(10U)
   USART_CR1_PEIE=USART_CR1_PEIE_Msk
   USART_CR1_PEIE_Msk=(0x1U << USART_CR1_PEIE_Pos)
   USART_CR1_PEIE_Pos=(8U)
   USART_CR1_PS=USART_CR1_PS_Msk
   USART_CR1_PS_Msk=(0x1U << USART_CR1_PS_Pos)
   USART_CR1_PS_Pos=(9U)
   USART_CR1_RE=USART_CR1_RE_Msk
   USART_CR1_RE_Msk=(0x1U << USART_CR1_RE_Pos)
   USART_CR1_RE_Pos=(2U)
   USART_CR1_RWU=USART_CR1_RWU_Msk
   USART_CR1_RWU_Msk=(0x1U << USART_CR1_RWU_Pos)
   USART_CR1_RWU_Pos=(1U)
   USART_CR1_RXNEIE=USART_CR1_RXNEIE_Msk
   USART_CR1_RXNEIE_Msk=(0x1U << USART_CR1_RXNEIE_Pos)
   USART_CR1_RXNEIE_Pos=(5U)
   USART_CR1_SBK=USART_CR1_SBK_Msk
   USART_CR1_SBK_Msk=(0x1U << USART_CR1_SBK_Pos)
   USART_CR1_SBK_Pos=(0U)
   USART_CR1_TCIE=USART_CR1_TCIE_Msk
   USART_CR1_TCIE_Msk=(0x1U << USART_CR1_TCIE_Pos)
   USART_CR1_TCIE_Pos=(6U)
   USART_CR1_TE=USART_CR1_TE_Msk
   USART_CR1_TE_Msk=(0x1U << USART_CR1_TE_Pos)
   USART_CR1_TE_Pos=(3U)
   USART_CR1_TXEIE=USART_CR1_TXEIE_Msk
   USART_CR1_TXEIE_Msk=(0x1U << USART_CR1_TXEIE_Pos)
   USART_CR1_TXEIE_Pos=(7U)
   USART_CR1_UE=USART_CR1_UE_Msk
   USART_CR1_UE_Msk=(0x1U << USART_CR1_UE_Pos)
   USART_CR1_UE_Pos=(13U)
   USART_CR1_WAKE=USART_CR1_WAKE_Msk
   USART_CR1_WAKE_Msk=(0x1U << USART_CR1_WAKE_Pos)
   USART_CR1_WAKE_Pos=(11U)
   USART_CR2_ADD=USART_CR2_ADD_Msk
   USART_CR2_ADD_Msk=(0xFU << USART_CR2_ADD_Pos)
   USART_CR2_ADD_Pos=(0U)
   USART_CR2_CLKEN=USART_CR2_CLKEN_Msk
   USART_CR2_CLKEN_Msk=(0x1U << USART_CR2_CLKEN_Pos)
   USART_CR2_CLKEN_Pos=(11U)
   USART_CR2_CPHA=USART_CR2_CPHA_Msk
   USART_CR2_CPHA_Msk=(0x1U << USART_CR2_CPHA_Pos)
   USART_CR2_CPHA_Pos=(9U)
   USART_CR2_CPOL=USART_CR2_CPOL_Msk
   USART_CR2_CPOL_Msk=(0x1U << USART_CR2_CPOL_Pos)
   USART_CR2_CPOL_Pos=(10U)
   USART_CR2_LBCL=USART_CR2_LBCL_Msk
   USART_CR2_LBCL_Msk=(0x1U << USART_CR2_LBCL_Pos)
   USART_CR2_LBCL_Pos=(8U)
   USART_CR2_LBDIE=USART_CR2_LBDIE_Msk
   USART_CR2_LBDIE_Msk=(0x1U << USART_CR2_LBDIE_Pos)
   USART_CR2_LBDIE_Pos=(6U)
   USART_CR2_LBDL=USART_CR2_LBDL_Msk
   USART_CR2_LBDL_Msk=(0x1U << USART_CR2_LBDL_Pos)
   USART_CR2_LBDL_Pos=(5U)
   USART_CR2_LINEN=USART_CR2_LINEN_Msk
   USART_CR2_LINEN_Msk=(0x1U << USART_CR2_LINEN_Pos)
   USART_CR2_LINEN_Pos=(14U)
   USART_CR2_STOP=USART_CR2_STOP_Msk
   USART_CR2_STOP_0=(0x1U << USART_CR2_STOP_Pos)
   USART_CR2_STOP_1=(0x2U << USART_CR2_STOP_Pos)
   USART_CR2_STOP_Msk=(0x3U << USART_CR2_STOP_Pos)
   USART_CR2_STOP_Pos=(12U)
   USART_CR3_CTSE=USART_CR3_CTSE_Msk
   USART_CR3_CTSE_Msk=(0x1U << USART_CR3_CTSE_Pos)
   USART_CR3_CTSE_Pos=(9U)
   USART_CR3_CTSIE=USART_CR3_CTSIE_Msk
   USART_CR3_CTSIE_Msk=(0x1U << USART_CR3_CTSIE_Pos)
   USART_CR3_CTSIE_Pos=(10U)
   USART_CR3_DMAR=USART_CR3_DMAR_Msk
   USART_CR3_DMAR_Msk=(0x1U << USART_CR3_DMAR_Pos)
   USART_CR3_DMAR_Pos=(6U)
   USART_CR3_DMAT=USART_CR3_DMAT_Msk
   USART_CR3_DMAT_Msk=(0x1U << USART_CR3_DMAT_Pos)
   USART_CR3_DMAT_Pos=(7U)
   USART_CR3_EIE=USART_CR3_EIE_Msk
   USART_CR3_EIE_Msk=(0x1U << USART_CR3_EIE_Pos)
   USART_CR3_EIE_Pos=(0U)
   USART_CR3_HDSEL=USART_CR3_HDSEL_Msk
   USART_CR3_HDSEL_Msk=(0x1U << USART_CR3_HDSEL_Pos)
   USART_CR3_HDSEL_Pos=(3U)
   USART_CR3_IREN=USART_CR3_IREN_Msk
   USART_CR3_IREN_Msk=(0x1U << USART_CR3_IREN_Pos)
   USART_CR3_IREN_Pos=(1U)
   USART_CR3_IRLP=USART_CR3_IRLP_Msk
   USART_CR3_IRLP_Msk=(0x1U << USART_CR3_IRLP_Pos)
   USART_CR3_IRLP_Pos=(2U)
   USART_CR3_NACK=USART_CR3_NACK_Msk
   USART_CR3_NACK_Msk=(0x1U << USART_CR3_NACK_Pos)
   USART_CR3_NACK_Pos=(4U)
   USART_CR3_RTSE=USART_CR3_RTSE_Msk
   USART_CR3_RTSE_Msk=(0x1U << USART_CR3_RTSE_Pos)
   USART_CR3_RTSE_Pos=(8U)
   USART_CR3_SCEN=USART_CR3_SCEN_Msk
   USART_CR3_SCEN_Msk=(0x1U << USART_CR3_SCEN_Pos)
   USART_CR3_SCEN_Pos=(5U)
   USART_DR_DR=USART_DR_DR_Msk
   USART_DR_DR_Msk=(0x1FFU << USART_DR_DR_Pos)
   USART_DR_DR_Pos=(0U)
   USART_GTPR_GT=USART_GTPR_GT_Msk
   USART_GTPR_GT_Msk=(0xFFU << USART_GTPR_GT_Pos)
   USART_GTPR_GT_Pos=(8U)
   USART_GTPR_PSC=USART_GTPR_PSC_Msk
   USART_GTPR_PSC_0=(0x01U << USART_GTPR_PSC_Pos)
   USART_GTPR_PSC_1=(0x02U << USART_GTPR_PSC_Pos)
   USART_GTPR_PSC_2=(0x04U << USART_GTPR_PSC_Pos)
   USART_GTPR_PSC_3=(0x08U << USART_GTPR_PSC_Pos)
   USART_GTPR_PSC_4=(0x10U << USART_GTPR_PSC_Pos)
   USART_GTPR_PSC_5=(0x20U << USART_GTPR_PSC_Pos)
   USART_GTPR_PSC_6=(0x40U << USART_GTPR_PSC_Pos)
   USART_GTPR_PSC_7=(0x80U << USART_GTPR_PSC_Pos)
   USART_GTPR_PSC_Msk=(0xFFU << USART_GTPR_PSC_Pos)
   USART_GTPR_PSC_Pos=(0U)
   USART_POSITION_GTPR_GT=USART_GTPR_GT_Pos
   USART_SR_CTS=USART_SR_CTS_Msk
   USART_SR_CTS_Msk=(0x1U << USART_SR_CTS_Pos)
   USART_SR_CTS_Pos=(9U)
   USART_SR_FE=USART_SR_FE_Msk
   USART_SR_FE_Msk=(0x1U << USART_SR_FE_Pos)
   USART_SR_FE_Pos=(1U)
   USART_SR_IDLE=USART_SR_IDLE_Msk
   USART_SR_IDLE_Msk=(0x1U << USART_SR_IDLE_Pos)
   USART_SR_IDLE_Pos=(4U)
   USART_SR_LBD=USART_SR_LBD_Msk
   USART_SR_LBD_Msk=(0x1U << USART_SR_LBD_Pos)
   USART_SR_LBD_Pos=(8U)
   USART_SR_NE=USART_SR_NE_Msk
   USART_SR_NE_Msk=(0x1U << USART_SR_NE_Pos)
   USART_SR_NE_Pos=(2U)
   USART_SR_ORE=USART_SR_ORE_Msk
   USART_SR_ORE_Msk=(0x1U << USART_SR_ORE_Pos)
   USART_SR_ORE_Pos=(3U)
   USART_SR_PE=USART_SR_PE_Msk
   USART_SR_PE_Msk=(0x1U << USART_SR_PE_Pos)
   USART_SR_PE_Pos=(0U)
   USART_SR_RXNE=USART_SR_RXNE_Msk
   USART_SR_RXNE_Msk=(0x1U << USART_SR_RXNE_Pos)
   USART_SR_RXNE_Pos=(5U)
   USART_SR_TC=USART_SR_TC_Msk
   USART_SR_TC_Msk=(0x1U << USART_SR_TC_Pos)
   USART_SR_TC_Pos=(6U)
   USART_SR_TXE=USART_SR_TXE_Msk
   USART_SR_TXE_Msk=(0x1U << USART_SR_TXE_Pos)
   USART_SR_TXE_Pos=(7U)
   USB=((USB_TypeDef *)USB_BASE)
   USB_ADDR0_RX_ADDR0_RX=USB_ADDR0_RX_ADDR0_RX_Msk
   USB_ADDR0_RX_ADDR0_RX_Msk=(0x7FFFU << USB_ADDR0_RX_ADDR0_RX_Pos)
   USB_ADDR0_RX_ADDR0_RX_Pos=(1U)
   USB_ADDR0_TX_ADDR0_TX=USB_ADDR0_TX_ADDR0_TX_Msk
   USB_ADDR0_TX_ADDR0_TX_Msk=(0x7FFFU << USB_ADDR0_TX_ADDR0_TX_Pos)
   USB_ADDR0_TX_ADDR0_TX_Pos=(1U)
   USB_ADDR1_RX_ADDR1_RX=USB_ADDR1_RX_ADDR1_RX_Msk
   USB_ADDR1_RX_ADDR1_RX_Msk=(0x7FFFU << USB_ADDR1_RX_ADDR1_RX_Pos)
   USB_ADDR1_RX_ADDR1_RX_Pos=(1U)
   USB_ADDR1_TX_ADDR1_TX=USB_ADDR1_TX_ADDR1_TX_Msk
   USB_ADDR1_TX_ADDR1_TX_Msk=(0x7FFFU << USB_ADDR1_TX_ADDR1_TX_Pos)
   USB_ADDR1_TX_ADDR1_TX_Pos=(1U)
   USB_ADDR2_RX_ADDR2_RX=USB_ADDR2_RX_ADDR2_RX_Msk
   USB_ADDR2_RX_ADDR2_RX_Msk=(0x7FFFU << USB_ADDR2_RX_ADDR2_RX_Pos)
   USB_ADDR2_RX_ADDR2_RX_Pos=(1U)
   USB_ADDR2_TX_ADDR2_TX=USB_ADDR2_TX_ADDR2_TX_Msk
   USB_ADDR2_TX_ADDR2_TX_Msk=(0x7FFFU << USB_ADDR2_TX_ADDR2_TX_Pos)
   USB_ADDR2_TX_ADDR2_TX_Pos=(1U)
   USB_ADDR3_RX_ADDR3_RX=USB_ADDR3_RX_ADDR3_RX_Msk
   USB_ADDR3_RX_ADDR3_RX_Msk=(0x7FFFU << USB_ADDR3_RX_ADDR3_RX_Pos)
   USB_ADDR3_RX_ADDR3_RX_Pos=(1U)
   USB_ADDR3_TX_ADDR3_TX=USB_ADDR3_TX_ADDR3_TX_Msk
   USB_ADDR3_TX_ADDR3_TX_Msk=(0x7FFFU << USB_ADDR3_TX_ADDR3_TX_Pos)
   USB_ADDR3_TX_ADDR3_TX_Pos=(1U)
   USB_ADDR4_RX_ADDR4_RX=USB_ADDR4_RX_ADDR4_RX_Msk
   USB_ADDR4_RX_ADDR4_RX_Msk=(0x7FFFU << USB_ADDR4_RX_ADDR4_RX_Pos)
   USB_ADDR4_RX_ADDR4_RX_Pos=(1U)
   USB_ADDR4_TX_ADDR4_TX=USB_ADDR4_TX_ADDR4_TX_Msk
   USB_ADDR4_TX_ADDR4_TX_Msk=(0x7FFFU << USB_ADDR4_TX_ADDR4_TX_Pos)
   USB_ADDR4_TX_ADDR4_TX_Pos=(1U)
   USB_ADDR5_RX_ADDR5_RX=USB_ADDR5_RX_ADDR5_RX_Msk
   USB_ADDR5_RX_ADDR5_RX_Msk=(0x7FFFU << USB_ADDR5_RX_ADDR5_RX_Pos)
   USB_ADDR5_RX_ADDR5_RX_Pos=(1U)
   USB_ADDR5_TX_ADDR5_TX=USB_ADDR5_TX_ADDR5_TX_Msk
   USB_ADDR5_TX_ADDR5_TX_Msk=(0x7FFFU << USB_ADDR5_TX_ADDR5_TX_Pos)
   USB_ADDR5_TX_ADDR5_TX_Pos=(1U)
   USB_ADDR6_RX_ADDR6_RX=USB_ADDR6_RX_ADDR6_RX_Msk
   USB_ADDR6_RX_ADDR6_RX_Msk=(0x7FFFU << USB_ADDR6_RX_ADDR6_RX_Pos)
   USB_ADDR6_RX_ADDR6_RX_Pos=(1U)
   USB_ADDR6_TX_ADDR6_TX=USB_ADDR6_TX_ADDR6_TX_Msk
   USB_ADDR6_TX_ADDR6_TX_Msk=(0x7FFFU << USB_ADDR6_TX_ADDR6_TX_Pos)
   USB_ADDR6_TX_ADDR6_TX_Pos=(1U)
   USB_ADDR7_RX_ADDR7_RX=USB_ADDR7_RX_ADDR7_RX_Msk
   USB_ADDR7_RX_ADDR7_RX_Msk=(0x7FFFU << USB_ADDR7_RX_ADDR7_RX_Pos)
   USB_ADDR7_RX_ADDR7_RX_Pos=(1U)
   USB_ADDR7_TX_ADDR7_TX=USB_ADDR7_TX_ADDR7_TX_Msk
   USB_ADDR7_TX_ADDR7_TX_Msk=(0x7FFFU << USB_ADDR7_TX_ADDR7_TX_Pos)
   USB_ADDR7_TX_ADDR7_TX_Pos=(1U)
   USB_BASE=(APB1PERIPH_BASE + 0x00005C00U)
   USB_BTABLE_BTABLE=USB_BTABLE_BTABLE_Msk
   USB_BTABLE_BTABLE_Msk=(0x1FFFU << USB_BTABLE_BTABLE_Pos)
   USB_BTABLE_BTABLE_Pos=(3U)
   USB_CNTR_CTRM=USB_CNTR_CTRM_Msk
   USB_CNTR_CTRM_Msk=(0x1U << USB_CNTR_CTRM_Pos)
   USB_CNTR_CTRM_Pos=(15U)
   USB_CNTR_ERRM=USB_CNTR_ERRM_Msk
   USB_CNTR_ERRM_Msk=(0x1U << USB_CNTR_ERRM_Pos)
   USB_CNTR_ERRM_Pos=(13U)
   USB_CNTR_ESOFM=USB_CNTR_ESOFM_Msk
   USB_CNTR_ESOFM_Msk=(0x1U << USB_CNTR_ESOFM_Pos)
   USB_CNTR_ESOFM_Pos=(8U)
   USB_CNTR_FRES=USB_CNTR_FRES_Msk
   USB_CNTR_FRES_Msk=(0x1U << USB_CNTR_FRES_Pos)
   USB_CNTR_FRES_Pos=(0U)
   USB_CNTR_FSUSP=USB_CNTR_FSUSP_Msk
   USB_CNTR_FSUSP_Msk=(0x1U << USB_CNTR_FSUSP_Pos)
   USB_CNTR_FSUSP_Pos=(3U)
   USB_CNTR_LP_MODE=USB_CNTR_LP_MODE_Msk
   USB_CNTR_LP_MODE_Msk=(0x1U << USB_CNTR_LP_MODE_Pos)
   USB_CNTR_LP_MODE_Pos=(2U)
   USB_CNTR_PDWN=USB_CNTR_PDWN_Msk
   USB_CNTR_PDWN_Msk=(0x1U << USB_CNTR_PDWN_Pos)
   USB_CNTR_PDWN_Pos=(1U)
   USB_CNTR_PMAOVRM=USB_CNTR_PMAOVRM_Msk
   USB_CNTR_PMAOVRM_Msk=(0x1U << USB_CNTR_PMAOVRM_Pos)
   USB_CNTR_PMAOVRM_Pos=(14U)
   USB_CNTR_RESETM=USB_CNTR_RESETM_Msk
   USB_CNTR_RESETM_Msk=(0x1U << USB_CNTR_RESETM_Pos)
   USB_CNTR_RESETM_Pos=(10U)
   USB_CNTR_RESUME=USB_CNTR_RESUME_Msk
   USB_CNTR_RESUME_Msk=(0x1U << USB_CNTR_RESUME_Pos)
   USB_CNTR_RESUME_Pos=(4U)
   USB_CNTR_SOFM=USB_CNTR_SOFM_Msk
   USB_CNTR_SOFM_Msk=(0x1U << USB_CNTR_SOFM_Pos)
   USB_CNTR_SOFM_Pos=(9U)
   USB_CNTR_SUSPM=USB_CNTR_SUSPM_Msk
   USB_CNTR_SUSPM_Msk=(0x1U << USB_CNTR_SUSPM_Pos)
   USB_CNTR_SUSPM_Pos=(11U)
   USB_CNTR_WKUPM=USB_CNTR_WKUPM_Msk
   USB_CNTR_WKUPM_Msk=(0x1U << USB_CNTR_WKUPM_Pos)
   USB_CNTR_WKUPM_Pos=(12U)
   USB_COUNT0_RX_0_BLSIZE_0=0x00008000U
   USB_COUNT0_RX_0_COUNT0_RX_0=0x000003FFU
   USB_COUNT0_RX_0_NUM_BLOCK_0=0x00007C00U
   USB_COUNT0_RX_0_NUM_BLOCK_0_0=0x00000400U
   USB_COUNT0_RX_0_NUM_BLOCK_0_1=0x00000800U
   USB_COUNT0_RX_0_NUM_BLOCK_0_2=0x00001000U
   USB_COUNT0_RX_0_NUM_BLOCK_0_3=0x00002000U
   USB_COUNT0_RX_0_NUM_BLOCK_0_4=0x00004000U
   USB_COUNT0_RX_1_BLSIZE_1=0x80000000U
   USB_COUNT0_RX_1_COUNT0_RX_1=0x03FF0000U
   USB_COUNT0_RX_1_NUM_BLOCK_1=0x7C000000U
   USB_COUNT0_RX_1_NUM_BLOCK_1_0=0x04000000U
   USB_COUNT0_RX_1_NUM_BLOCK_1_1=0x08000000U
   USB_COUNT0_RX_1_NUM_BLOCK_1_2=0x10000000U
   USB_COUNT0_RX_1_NUM_BLOCK_1_3=0x20000000U
   USB_COUNT0_RX_1_NUM_BLOCK_1_4=0x40000000U
   USB_COUNT0_RX_BLSIZE=USB_COUNT0_RX_BLSIZE_Msk
   USB_COUNT0_RX_BLSIZE_Msk=(0x1U << USB_COUNT0_RX_BLSIZE_Pos)
   USB_COUNT0_RX_BLSIZE_Pos=(15U)
   USB_COUNT0_RX_COUNT0_RX=USB_COUNT0_RX_COUNT0_RX_Msk
   USB_COUNT0_RX_COUNT0_RX_Msk=(0x3FFU << USB_COUNT0_RX_COUNT0_RX_Pos)
   USB_COUNT0_RX_COUNT0_RX_Pos=(0U)
   USB_COUNT0_RX_NUM_BLOCK=USB_COUNT0_RX_NUM_BLOCK_Msk
   USB_COUNT0_RX_NUM_BLOCK_0=(0x01U << USB_COUNT0_RX_NUM_BLOCK_Pos)
   USB_COUNT0_RX_NUM_BLOCK_1=(0x02U << USB_COUNT0_RX_NUM_BLOCK_Pos)
   USB_COUNT0_RX_NUM_BLOCK_2=(0x04U << USB_COUNT0_RX_NUM_BLOCK_Pos)
   USB_COUNT0_RX_NUM_BLOCK_3=(0x08U << USB_COUNT0_RX_NUM_BLOCK_Pos)
   USB_COUNT0_RX_NUM_BLOCK_4=(0x10U << USB_COUNT0_RX_NUM_BLOCK_Pos)
   USB_COUNT0_RX_NUM_BLOCK_Msk=(0x1FU << USB_COUNT0_RX_NUM_BLOCK_Pos)
   USB_COUNT0_RX_NUM_BLOCK_Pos=(10U)
   USB_COUNT0_TX_0_COUNT0_TX_0=0x000003FFU
   USB_COUNT0_TX_1_COUNT0_TX_1=0x03FF0000U
   USB_COUNT0_TX_COUNT0_TX=USB_COUNT0_TX_COUNT0_TX_Msk
   USB_COUNT0_TX_COUNT0_TX_Msk=(0x3FFU << USB_COUNT0_TX_COUNT0_TX_Pos)
   USB_COUNT0_TX_COUNT0_TX_Pos=(0U)
   USB_COUNT1_RX_0_BLSIZE_0=0x00008000U
   USB_COUNT1_RX_0_COUNT1_RX_0=0x000003FFU
   USB_COUNT1_RX_0_NUM_BLOCK_0=0x00007C00U
   USB_COUNT1_RX_0_NUM_BLOCK_0_0=0x00000400U
   USB_COUNT1_RX_0_NUM_BLOCK_0_1=0x00000800U
   USB_COUNT1_RX_0_NUM_BLOCK_0_2=0x00001000U
   USB_COUNT1_RX_0_NUM_BLOCK_0_3=0x00002000U
   USB_COUNT1_RX_0_NUM_BLOCK_0_4=0x00004000U
   USB_COUNT1_RX_1_BLSIZE_1=0x80000000U
   USB_COUNT1_RX_1_COUNT1_RX_1=0x03FF0000U
   USB_COUNT1_RX_1_NUM_BLOCK_1=0x7C000000U
   USB_COUNT1_RX_1_NUM_BLOCK_1_0=0x04000000U
   USB_COUNT1_RX_1_NUM_BLOCK_1_1=0x08000000U
   USB_COUNT1_RX_1_NUM_BLOCK_1_2=0x10000000U
   USB_COUNT1_RX_1_NUM_BLOCK_1_3=0x20000000U
   USB_COUNT1_RX_1_NUM_BLOCK_1_4=0x40000000U
   USB_COUNT1_RX_BLSIZE=USB_COUNT1_RX_BLSIZE_Msk
   USB_COUNT1_RX_BLSIZE_Msk=(0x1U << USB_COUNT1_RX_BLSIZE_Pos)
   USB_COUNT1_RX_BLSIZE_Pos=(15U)
   USB_COUNT1_RX_COUNT1_RX=USB_COUNT1_RX_COUNT1_RX_Msk
   USB_COUNT1_RX_COUNT1_RX_Msk=(0x3FFU << USB_COUNT1_RX_COUNT1_RX_Pos)
   USB_COUNT1_RX_COUNT1_RX_Pos=(0U)
   USB_COUNT1_RX_NUM_BLOCK=USB_COUNT1_RX_NUM_BLOCK_Msk
   USB_COUNT1_RX_NUM_BLOCK_0=(0x01U << USB_COUNT1_RX_NUM_BLOCK_Pos)
   USB_COUNT1_RX_NUM_BLOCK_1=(0x02U << USB_COUNT1_RX_NUM_BLOCK_Pos)
   USB_COUNT1_RX_NUM_BLOCK_2=(0x04U << USB_COUNT1_RX_NUM_BLOCK_Pos)
   USB_COUNT1_RX_NUM_BLOCK_3=(0x08U << USB_COUNT1_RX_NUM_BLOCK_Pos)
   USB_COUNT1_RX_NUM_BLOCK_4=(0x10U << USB_COUNT1_RX_NUM_BLOCK_Pos)
   USB_COUNT1_RX_NUM_BLOCK_Msk=(0x1FU << USB_COUNT1_RX_NUM_BLOCK_Pos)
   USB_COUNT1_RX_NUM_BLOCK_Pos=(10U)
   USB_COUNT1_TX_0_COUNT1_TX_0=0x000003FFU
   USB_COUNT1_TX_1_COUNT1_TX_1=0x03FF0000U
   USB_COUNT1_TX_COUNT1_TX=USB_COUNT1_TX_COUNT1_TX_Msk
   USB_COUNT1_TX_COUNT1_TX_Msk=(0x3FFU << USB_COUNT1_TX_COUNT1_TX_Pos)
   USB_COUNT1_TX_COUNT1_TX_Pos=(0U)
   USB_COUNT2_RX_0_BLSIZE_0=0x00008000U
   USB_COUNT2_RX_0_COUNT2_RX_0=0x000003FFU
   USB_COUNT2_RX_0_NUM_BLOCK_0=0x00007C00U
   USB_COUNT2_RX_0_NUM_BLOCK_0_0=0x00000400U
   USB_COUNT2_RX_0_NUM_BLOCK_0_1=0x00000800U
   USB_COUNT2_RX_0_NUM_BLOCK_0_2=0x00001000U
   USB_COUNT2_RX_0_NUM_BLOCK_0_3=0x00002000U
   USB_COUNT2_RX_0_NUM_BLOCK_0_4=0x00004000U
   USB_COUNT2_RX_1_BLSIZE_1=0x80000000U
   USB_COUNT2_RX_1_COUNT2_RX_1=0x03FF0000U
   USB_COUNT2_RX_1_NUM_BLOCK_1=0x7C000000U
   USB_COUNT2_RX_1_NUM_BLOCK_1_0=0x04000000U
   USB_COUNT2_RX_1_NUM_BLOCK_1_1=0x08000000U
   USB_COUNT2_RX_1_NUM_BLOCK_1_2=0x10000000U
   USB_COUNT2_RX_1_NUM_BLOCK_1_3=0x20000000U
   USB_COUNT2_RX_1_NUM_BLOCK_1_4=0x40000000U
   USB_COUNT2_RX_BLSIZE=USB_COUNT2_RX_BLSIZE_Msk
   USB_COUNT2_RX_BLSIZE_Msk=(0x1U << USB_COUNT2_RX_BLSIZE_Pos)
   USB_COUNT2_RX_BLSIZE_Pos=(15U)
   USB_COUNT2_RX_COUNT2_RX=USB_COUNT2_RX_COUNT2_RX_Msk
   USB_COUNT2_RX_COUNT2_RX_Msk=(0x3FFU << USB_COUNT2_RX_COUNT2_RX_Pos)
   USB_COUNT2_RX_COUNT2_RX_Pos=(0U)
   USB_COUNT2_RX_NUM_BLOCK=USB_COUNT2_RX_NUM_BLOCK_Msk
   USB_COUNT2_RX_NUM_BLOCK_0=(0x01U << USB_COUNT2_RX_NUM_BLOCK_Pos)
   USB_COUNT2_RX_NUM_BLOCK_1=(0x02U << USB_COUNT2_RX_NUM_BLOCK_Pos)
   USB_COUNT2_RX_NUM_BLOCK_2=(0x04U << USB_COUNT2_RX_NUM_BLOCK_Pos)
   USB_COUNT2_RX_NUM_BLOCK_3=(0x08U << USB_COUNT2_RX_NUM_BLOCK_Pos)
   USB_COUNT2_RX_NUM_BLOCK_4=(0x10U << USB_COUNT2_RX_NUM_BLOCK_Pos)
   USB_COUNT2_RX_NUM_BLOCK_Msk=(0x1FU << USB_COUNT2_RX_NUM_BLOCK_Pos)
   USB_COUNT2_RX_NUM_BLOCK_Pos=(10U)
   USB_COUNT2_TX_0_COUNT2_TX_0=0x000003FFU
   USB_COUNT2_TX_1_COUNT2_TX_1=0x03FF0000U
   USB_COUNT2_TX_COUNT2_TX=USB_COUNT2_TX_COUNT2_TX_Msk
   USB_COUNT2_TX_COUNT2_TX_Msk=(0x3FFU << USB_COUNT2_TX_COUNT2_TX_Pos)
   USB_COUNT2_TX_COUNT2_TX_Pos=(0U)
   USB_COUNT3_RX_0_BLSIZE_0=0x00008000U
   USB_COUNT3_RX_0_COUNT3_RX_0=0x000003FFU
   USB_COUNT3_RX_0_NUM_BLOCK_0=0x00007C00U
   USB_COUNT3_RX_0_NUM_BLOCK_0_0=0x00000400U
   USB_COUNT3_RX_0_NUM_BLOCK_0_1=0x00000800U
   USB_COUNT3_RX_0_NUM_BLOCK_0_2=0x00001000U
   USB_COUNT3_RX_0_NUM_BLOCK_0_3=0x00002000U
   USB_COUNT3_RX_0_NUM_BLOCK_0_4=0x00004000U
   USB_COUNT3_RX_1_BLSIZE_1=0x80000000U
   USB_COUNT3_RX_1_COUNT3_RX_1=0x03FF0000U
   USB_COUNT3_RX_1_NUM_BLOCK_1=0x7C000000U
   USB_COUNT3_RX_1_NUM_BLOCK_1_0=0x04000000U
   USB_COUNT3_RX_1_NUM_BLOCK_1_1=0x08000000U
   USB_COUNT3_RX_1_NUM_BLOCK_1_2=0x10000000U
   USB_COUNT3_RX_1_NUM_BLOCK_1_3=0x20000000U
   USB_COUNT3_RX_1_NUM_BLOCK_1_4=0x40000000U
   USB_COUNT3_RX_BLSIZE=USB_COUNT3_RX_BLSIZE_Msk
   USB_COUNT3_RX_BLSIZE_Msk=(0x1U << USB_COUNT3_RX_BLSIZE_Pos)
   USB_COUNT3_RX_BLSIZE_Pos=(15U)
   USB_COUNT3_RX_COUNT3_RX=USB_COUNT3_RX_COUNT3_RX_Msk
   USB_COUNT3_RX_COUNT3_RX_Msk=(0x3FFU << USB_COUNT3_RX_COUNT3_RX_Pos)
   USB_COUNT3_RX_COUNT3_RX_Pos=(0U)
   USB_COUNT3_RX_NUM_BLOCK=USB_COUNT3_RX_NUM_BLOCK_Msk
   USB_COUNT3_RX_NUM_BLOCK_0=(0x01U << USB_COUNT3_RX_NUM_BLOCK_Pos)
   USB_COUNT3_RX_NUM_BLOCK_1=(0x02U << USB_COUNT3_RX_NUM_BLOCK_Pos)
   USB_COUNT3_RX_NUM_BLOCK_2=(0x04U << USB_COUNT3_RX_NUM_BLOCK_Pos)
   USB_COUNT3_RX_NUM_BLOCK_3=(0x08U << USB_COUNT3_RX_NUM_BLOCK_Pos)
   USB_COUNT3_RX_NUM_BLOCK_4=(0x10U << USB_COUNT3_RX_NUM_BLOCK_Pos)
   USB_COUNT3_RX_NUM_BLOCK_Msk=(0x1FU << USB_COUNT3_RX_NUM_BLOCK_Pos)
   USB_COUNT3_RX_NUM_BLOCK_Pos=(10U)
   USB_COUNT3_TX_0_COUNT3_TX_0=0x000003FFU
   USB_COUNT3_TX_1_COUNT3_TX_1=0x03FF0000U
   USB_COUNT3_TX_COUNT3_TX=USB_COUNT3_TX_COUNT3_TX_Msk
   USB_COUNT3_TX_COUNT3_TX_Msk=(0x3FFU << USB_COUNT3_TX_COUNT3_TX_Pos)
   USB_COUNT3_TX_COUNT3_TX_Pos=(0U)
   USB_COUNT4_RX_0_BLSIZE_0=0x00008000U
   USB_COUNT4_RX_0_COUNT4_RX_0=0x000003FFU
   USB_COUNT4_RX_0_NUM_BLOCK_0=0x00007C00U
   USB_COUNT4_RX_0_NUM_BLOCK_0_0=0x00000400U
   USB_COUNT4_RX_0_NUM_BLOCK_0_1=0x00000800U
   USB_COUNT4_RX_0_NUM_BLOCK_0_2=0x00001000U
   USB_COUNT4_RX_0_NUM_BLOCK_0_3=0x00002000U
   USB_COUNT4_RX_0_NUM_BLOCK_0_4=0x00004000U
   USB_COUNT4_RX_1_BLSIZE_1=0x80000000U
   USB_COUNT4_RX_1_COUNT4_RX_1=0x03FF0000U
   USB_COUNT4_RX_1_NUM_BLOCK_1=0x7C000000U
   USB_COUNT4_RX_1_NUM_BLOCK_1_0=0x04000000U
   USB_COUNT4_RX_1_NUM_BLOCK_1_1=0x08000000U
   USB_COUNT4_RX_1_NUM_BLOCK_1_2=0x10000000U
   USB_COUNT4_RX_1_NUM_BLOCK_1_3=0x20000000U
   USB_COUNT4_RX_1_NUM_BLOCK_1_4=0x40000000U
   USB_COUNT4_RX_BLSIZE=USB_COUNT4_RX_BLSIZE_Msk
   USB_COUNT4_RX_BLSIZE_Msk=(0x1U << USB_COUNT4_RX_BLSIZE_Pos)
   USB_COUNT4_RX_BLSIZE_Pos=(15U)
   USB_COUNT4_RX_COUNT4_RX=USB_COUNT4_RX_COUNT4_RX_Msk
   USB_COUNT4_RX_COUNT4_RX_Msk=(0x3FFU << USB_COUNT4_RX_COUNT4_RX_Pos)
   USB_COUNT4_RX_COUNT4_RX_Pos=(0U)
   USB_COUNT4_RX_NUM_BLOCK=USB_COUNT4_RX_NUM_BLOCK_Msk
   USB_COUNT4_RX_NUM_BLOCK_0=(0x01U << USB_COUNT4_RX_NUM_BLOCK_Pos)
   USB_COUNT4_RX_NUM_BLOCK_1=(0x02U << USB_COUNT4_RX_NUM_BLOCK_Pos)
   USB_COUNT4_RX_NUM_BLOCK_2=(0x04U << USB_COUNT4_RX_NUM_BLOCK_Pos)
   USB_COUNT4_RX_NUM_BLOCK_3=(0x08U << USB_COUNT4_RX_NUM_BLOCK_Pos)
   USB_COUNT4_RX_NUM_BLOCK_4=(0x10U << USB_COUNT4_RX_NUM_BLOCK_Pos)
   USB_COUNT4_RX_NUM_BLOCK_Msk=(0x1FU << USB_COUNT4_RX_NUM_BLOCK_Pos)
   USB_COUNT4_RX_NUM_BLOCK_Pos=(10U)
   USB_COUNT4_TX_0_COUNT4_TX_0=0x000003FFU
   USB_COUNT4_TX_1_COUNT4_TX_1=0x03FF0000U
   USB_COUNT4_TX_COUNT4_TX=USB_COUNT4_TX_COUNT4_TX_Msk
   USB_COUNT4_TX_COUNT4_TX_Msk=(0x3FFU << USB_COUNT4_TX_COUNT4_TX_Pos)
   USB_COUNT4_TX_COUNT4_TX_Pos=(0U)
   USB_COUNT5_RX_0_BLSIZE_0=0x00008000U
   USB_COUNT5_RX_0_COUNT5_RX_0=0x000003FFU
   USB_COUNT5_RX_0_NUM_BLOCK_0=0x00007C00U
   USB_COUNT5_RX_0_NUM_BLOCK_0_0=0x00000400U
   USB_COUNT5_RX_0_NUM_BLOCK_0_1=0x00000800U
   USB_COUNT5_RX_0_NUM_BLOCK_0_2=0x00001000U
   USB_COUNT5_RX_0_NUM_BLOCK_0_3=0x00002000U
   USB_COUNT5_RX_0_NUM_BLOCK_0_4=0x00004000U
   USB_COUNT5_RX_1_BLSIZE_1=0x80000000U
   USB_COUNT5_RX_1_COUNT5_RX_1=0x03FF0000U
   USB_COUNT5_RX_1_NUM_BLOCK_1=0x7C000000U
   USB_COUNT5_RX_1_NUM_BLOCK_1_0=0x04000000U
   USB_COUNT5_RX_1_NUM_BLOCK_1_1=0x08000000U
   USB_COUNT5_RX_1_NUM_BLOCK_1_2=0x10000000U
   USB_COUNT5_RX_1_NUM_BLOCK_1_3=0x20000000U
   USB_COUNT5_RX_1_NUM_BLOCK_1_4=0x40000000U
   USB_COUNT5_RX_BLSIZE=USB_COUNT5_RX_BLSIZE_Msk
   USB_COUNT5_RX_BLSIZE_Msk=(0x1U << USB_COUNT5_RX_BLSIZE_Pos)
   USB_COUNT5_RX_BLSIZE_Pos=(15U)
   USB_COUNT5_RX_COUNT5_RX=USB_COUNT5_RX_COUNT5_RX_Msk
   USB_COUNT5_RX_COUNT5_RX_Msk=(0x3FFU << USB_COUNT5_RX_COUNT5_RX_Pos)
   USB_COUNT5_RX_COUNT5_RX_Pos=(0U)
   USB_COUNT5_RX_NUM_BLOCK=USB_COUNT5_RX_NUM_BLOCK_Msk
   USB_COUNT5_RX_NUM_BLOCK_0=(0x01U << USB_COUNT5_RX_NUM_BLOCK_Pos)
   USB_COUNT5_RX_NUM_BLOCK_1=(0x02U << USB_COUNT5_RX_NUM_BLOCK_Pos)
   USB_COUNT5_RX_NUM_BLOCK_2=(0x04U << USB_COUNT5_RX_NUM_BLOCK_Pos)
   USB_COUNT5_RX_NUM_BLOCK_3=(0x08U << USB_COUNT5_RX_NUM_BLOCK_Pos)
   USB_COUNT5_RX_NUM_BLOCK_4=(0x10U << USB_COUNT5_RX_NUM_BLOCK_Pos)
   USB_COUNT5_RX_NUM_BLOCK_Msk=(0x1FU << USB_COUNT5_RX_NUM_BLOCK_Pos)
   USB_COUNT5_RX_NUM_BLOCK_Pos=(10U)
   USB_COUNT5_TX_0_COUNT5_TX_0=0x000003FFU
   USB_COUNT5_TX_1_COUNT5_TX_1=0x03FF0000U
   USB_COUNT5_TX_COUNT5_TX=USB_COUNT5_TX_COUNT5_TX_Msk
   USB_COUNT5_TX_COUNT5_TX_Msk=(0x3FFU << USB_COUNT5_TX_COUNT5_TX_Pos)
   USB_COUNT5_TX_COUNT5_TX_Pos=(0U)
   USB_COUNT6_RX_0_BLSIZE_0=0x00008000U
   USB_COUNT6_RX_0_COUNT6_RX_0=0x000003FFU
   USB_COUNT6_RX_0_NUM_BLOCK_0=0x00007C00U
   USB_COUNT6_RX_0_NUM_BLOCK_0_0=0x00000400U
   USB_COUNT6_RX_0_NUM_BLOCK_0_1=0x00000800U
   USB_COUNT6_RX_0_NUM_BLOCK_0_2=0x00001000U
   USB_COUNT6_RX_0_NUM_BLOCK_0_3=0x00002000U
   USB_COUNT6_RX_0_NUM_BLOCK_0_4=0x00004000U
   USB_COUNT6_RX_1_BLSIZE_1=0x80000000U
   USB_COUNT6_RX_1_COUNT6_RX_1=0x03FF0000U
   USB_COUNT6_RX_1_NUM_BLOCK_1=0x7C000000U
   USB_COUNT6_RX_1_NUM_BLOCK_1_0=0x04000000U
   USB_COUNT6_RX_1_NUM_BLOCK_1_1=0x08000000U
   USB_COUNT6_RX_1_NUM_BLOCK_1_2=0x10000000U
   USB_COUNT6_RX_1_NUM_BLOCK_1_3=0x20000000U
   USB_COUNT6_RX_1_NUM_BLOCK_1_4=0x40000000U
   USB_COUNT6_RX_BLSIZE=USB_COUNT6_RX_BLSIZE_Msk
   USB_COUNT6_RX_BLSIZE_Msk=(0x1U << USB_COUNT6_RX_BLSIZE_Pos)
   USB_COUNT6_RX_BLSIZE_Pos=(15U)
   USB_COUNT6_RX_COUNT6_RX=USB_COUNT6_RX_COUNT6_RX_Msk
   USB_COUNT6_RX_COUNT6_RX_Msk=(0x3FFU << USB_COUNT6_RX_COUNT6_RX_Pos)
   USB_COUNT6_RX_COUNT6_RX_Pos=(0U)
   USB_COUNT6_RX_NUM_BLOCK=USB_COUNT6_RX_NUM_BLOCK_Msk
   USB_COUNT6_RX_NUM_BLOCK_0=(0x01U << USB_COUNT6_RX_NUM_BLOCK_Pos)
   USB_COUNT6_RX_NUM_BLOCK_1=(0x02U << USB_COUNT6_RX_NUM_BLOCK_Pos)
   USB_COUNT6_RX_NUM_BLOCK_2=(0x04U << USB_COUNT6_RX_NUM_BLOCK_Pos)
   USB_COUNT6_RX_NUM_BLOCK_3=(0x08U << USB_COUNT6_RX_NUM_BLOCK_Pos)
   USB_COUNT6_RX_NUM_BLOCK_4=(0x10U << USB_COUNT6_RX_NUM_BLOCK_Pos)
   USB_COUNT6_RX_NUM_BLOCK_Msk=(0x1FU << USB_COUNT6_RX_NUM_BLOCK_Pos)
   USB_COUNT6_RX_NUM_BLOCK_Pos=(10U)
   USB_COUNT6_TX_0_COUNT6_TX_0=0x000003FFU
   USB_COUNT6_TX_1_COUNT6_TX_1=0x03FF0000U
   USB_COUNT6_TX_COUNT6_TX=USB_COUNT6_TX_COUNT6_TX_Msk
   USB_COUNT6_TX_COUNT6_TX_Msk=(0x3FFU << USB_COUNT6_TX_COUNT6_TX_Pos)
   USB_COUNT6_TX_COUNT6_TX_Pos=(0U)
   USB_COUNT7_RX_0_BLSIZE_0=0x00008000U
   USB_COUNT7_RX_0_COUNT7_RX_0=0x000003FFU
   USB_COUNT7_RX_0_NUM_BLOCK_0=0x00007C00U
   USB_COUNT7_RX_0_NUM_BLOCK_0_0=0x00000400U
   USB_COUNT7_RX_0_NUM_BLOCK_0_1=0x00000800U
   USB_COUNT7_RX_0_NUM_BLOCK_0_2=0x00001000U
   USB_COUNT7_RX_0_NUM_BLOCK_0_3=0x00002000U
   USB_COUNT7_RX_0_NUM_BLOCK_0_4=0x00004000U
   USB_COUNT7_RX_1_BLSIZE_1=0x80000000U
   USB_COUNT7_RX_1_COUNT7_RX_1=0x03FF0000U
   USB_COUNT7_RX_1_NUM_BLOCK_1=0x7C000000U
   USB_COUNT7_RX_1_NUM_BLOCK_1_0=0x04000000U
   USB_COUNT7_RX_1_NUM_BLOCK_1_1=0x08000000U
   USB_COUNT7_RX_1_NUM_BLOCK_1_2=0x10000000U
   USB_COUNT7_RX_1_NUM_BLOCK_1_3=0x20000000U
   USB_COUNT7_RX_1_NUM_BLOCK_1_4=0x40000000U
   USB_COUNT7_RX_BLSIZE=USB_COUNT7_RX_BLSIZE_Msk
   USB_COUNT7_RX_BLSIZE_Msk=(0x1U << USB_COUNT7_RX_BLSIZE_Pos)
   USB_COUNT7_RX_BLSIZE_Pos=(15U)
   USB_COUNT7_RX_COUNT7_RX=USB_COUNT7_RX_COUNT7_RX_Msk
   USB_COUNT7_RX_COUNT7_RX_Msk=(0x3FFU << USB_COUNT7_RX_COUNT7_RX_Pos)
   USB_COUNT7_RX_COUNT7_RX_Pos=(0U)
   USB_COUNT7_RX_NUM_BLOCK=USB_COUNT7_RX_NUM_BLOCK_Msk
   USB_COUNT7_RX_NUM_BLOCK_0=(0x01U << USB_COUNT7_RX_NUM_BLOCK_Pos)
   USB_COUNT7_RX_NUM_BLOCK_1=(0x02U << USB_COUNT7_RX_NUM_BLOCK_Pos)
   USB_COUNT7_RX_NUM_BLOCK_2=(0x04U << USB_COUNT7_RX_NUM_BLOCK_Pos)
   USB_COUNT7_RX_NUM_BLOCK_3=(0x08U << USB_COUNT7_RX_NUM_BLOCK_Pos)
   USB_COUNT7_RX_NUM_BLOCK_4=(0x10U << USB_COUNT7_RX_NUM_BLOCK_Pos)
   USB_COUNT7_RX_NUM_BLOCK_Msk=(0x1FU << USB_COUNT7_RX_NUM_BLOCK_Pos)
   USB_COUNT7_RX_NUM_BLOCK_Pos=(10U)
   USB_COUNT7_TX_0_COUNT7_TX_0=0x000003FFU
   USB_COUNT7_TX_1_COUNT7_TX_1=0x03FF0000U
   USB_COUNT7_TX_COUNT7_TX=USB_COUNT7_TX_COUNT7_TX_Msk
   USB_COUNT7_TX_COUNT7_TX_Msk=(0x3FFU << USB_COUNT7_TX_COUNT7_TX_Pos)
   USB_COUNT7_TX_COUNT7_TX_Pos=(0U)
   USB_DADDR_ADD0=USB_DADDR_ADD0_Msk
   USB_DADDR_ADD0_Msk=(0x1U << USB_DADDR_ADD0_Pos)
   USB_DADDR_ADD0_Pos=(0U)
   USB_DADDR_ADD1=USB_DADDR_ADD1_Msk
   USB_DADDR_ADD1_Msk=(0x1U << USB_DADDR_ADD1_Pos)
   USB_DADDR_ADD1_Pos=(1U)
   USB_DADDR_ADD2=USB_DADDR_ADD2_Msk
   USB_DADDR_ADD2_Msk=(0x1U << USB_DADDR_ADD2_Pos)
   USB_DADDR_ADD2_Pos=(2U)
   USB_DADDR_ADD3=USB_DADDR_ADD3_Msk
   USB_DADDR_ADD3_Msk=(0x1U << USB_DADDR_ADD3_Pos)
   USB_DADDR_ADD3_Pos=(3U)
   USB_DADDR_ADD4=USB_DADDR_ADD4_Msk
   USB_DADDR_ADD4_Msk=(0x1U << USB_DADDR_ADD4_Pos)
   USB_DADDR_ADD4_Pos=(4U)
   USB_DADDR_ADD5=USB_DADDR_ADD5_Msk
   USB_DADDR_ADD5_Msk=(0x1U << USB_DADDR_ADD5_Pos)
   USB_DADDR_ADD5_Pos=(5U)
   USB_DADDR_ADD6=USB_DADDR_ADD6_Msk
   USB_DADDR_ADD6_Msk=(0x1U << USB_DADDR_ADD6_Pos)
   USB_DADDR_ADD6_Pos=(6U)
   USB_DADDR_ADD=USB_DADDR_ADD_Msk
   USB_DADDR_ADD_Msk=(0x7FU << USB_DADDR_ADD_Pos)
   USB_DADDR_ADD_Pos=(0U)
   USB_DADDR_EF=USB_DADDR_EF_Msk
   USB_DADDR_EF_Msk=(0x1U << USB_DADDR_EF_Pos)
   USB_DADDR_EF_Pos=(7U)
   USB_EP0R=USB_BASE
   USB_EP0R_CTR_RX=USB_EP0R_CTR_RX_Msk
   USB_EP0R_CTR_RX_Msk=(0x1U << USB_EP0R_CTR_RX_Pos)
   USB_EP0R_CTR_RX_Pos=(15U)
   USB_EP0R_CTR_TX=USB_EP0R_CTR_TX_Msk
   USB_EP0R_CTR_TX_Msk=(0x1U << USB_EP0R_CTR_TX_Pos)
   USB_EP0R_CTR_TX_Pos=(7U)
   USB_EP0R_DTOG_RX=USB_EP0R_DTOG_RX_Msk
   USB_EP0R_DTOG_RX_Msk=(0x1U << USB_EP0R_DTOG_RX_Pos)
   USB_EP0R_DTOG_RX_Pos=(14U)
   USB_EP0R_DTOG_TX=USB_EP0R_DTOG_TX_Msk
   USB_EP0R_DTOG_TX_Msk=(0x1U << USB_EP0R_DTOG_TX_Pos)
   USB_EP0R_DTOG_TX_Pos=(6U)
   USB_EP0R_EA=USB_EP0R_EA_Msk
   USB_EP0R_EA_Msk=(0xFU << USB_EP0R_EA_Pos)
   USB_EP0R_EA_Pos=(0U)
   USB_EP0R_EP_KIND=USB_EP0R_EP_KIND_Msk
   USB_EP0R_EP_KIND_Msk=(0x1U << USB_EP0R_EP_KIND_Pos)
   USB_EP0R_EP_KIND_Pos=(8U)
   USB_EP0R_EP_TYPE=USB_EP0R_EP_TYPE_Msk
   USB_EP0R_EP_TYPE_0=(0x1U << USB_EP0R_EP_TYPE_Pos)
   USB_EP0R_EP_TYPE_1=(0x2U << USB_EP0R_EP_TYPE_Pos)
   USB_EP0R_EP_TYPE_Msk=(0x3U << USB_EP0R_EP_TYPE_Pos)
   USB_EP0R_EP_TYPE_Pos=(9U)
   USB_EP0R_SETUP=USB_EP0R_SETUP_Msk
   USB_EP0R_SETUP_Msk=(0x1U << USB_EP0R_SETUP_Pos)
   USB_EP0R_SETUP_Pos=(11U)
   USB_EP0R_STAT_RX=USB_EP0R_STAT_RX_Msk
   USB_EP0R_STAT_RX_0=(0x1U << USB_EP0R_STAT_RX_Pos)
   USB_EP0R_STAT_RX_1=(0x2U << USB_EP0R_STAT_RX_Pos)
   USB_EP0R_STAT_RX_Msk=(0x3U << USB_EP0R_STAT_RX_Pos)
   USB_EP0R_STAT_RX_Pos=(12U)
   USB_EP0R_STAT_TX=USB_EP0R_STAT_TX_Msk
   USB_EP0R_STAT_TX_0=(0x1U << USB_EP0R_STAT_TX_Pos)
   USB_EP0R_STAT_TX_1=(0x2U << USB_EP0R_STAT_TX_Pos)
   USB_EP0R_STAT_TX_Msk=(0x3U << USB_EP0R_STAT_TX_Pos)
   USB_EP0R_STAT_TX_Pos=(4U)
   USB_EP1R=(USB_BASE + 0x00000004)
   USB_EP1R_CTR_RX=USB_EP1R_CTR_RX_Msk
   USB_EP1R_CTR_RX_Msk=(0x1U << USB_EP1R_CTR_RX_Pos)
   USB_EP1R_CTR_RX_Pos=(15U)
   USB_EP1R_CTR_TX=USB_EP1R_CTR_TX_Msk
   USB_EP1R_CTR_TX_Msk=(0x1U << USB_EP1R_CTR_TX_Pos)
   USB_EP1R_CTR_TX_Pos=(7U)
   USB_EP1R_DTOG_RX=USB_EP1R_DTOG_RX_Msk
   USB_EP1R_DTOG_RX_Msk=(0x1U << USB_EP1R_DTOG_RX_Pos)
   USB_EP1R_DTOG_RX_Pos=(14U)
   USB_EP1R_DTOG_TX=USB_EP1R_DTOG_TX_Msk
   USB_EP1R_DTOG_TX_Msk=(0x1U << USB_EP1R_DTOG_TX_Pos)
   USB_EP1R_DTOG_TX_Pos=(6U)
   USB_EP1R_EA=USB_EP1R_EA_Msk
   USB_EP1R_EA_Msk=(0xFU << USB_EP1R_EA_Pos)
   USB_EP1R_EA_Pos=(0U)
   USB_EP1R_EP_KIND=USB_EP1R_EP_KIND_Msk
   USB_EP1R_EP_KIND_Msk=(0x1U << USB_EP1R_EP_KIND_Pos)
   USB_EP1R_EP_KIND_Pos=(8U)
   USB_EP1R_EP_TYPE=USB_EP1R_EP_TYPE_Msk
   USB_EP1R_EP_TYPE_0=(0x1U << USB_EP1R_EP_TYPE_Pos)
   USB_EP1R_EP_TYPE_1=(0x2U << USB_EP1R_EP_TYPE_Pos)
   USB_EP1R_EP_TYPE_Msk=(0x3U << USB_EP1R_EP_TYPE_Pos)
   USB_EP1R_EP_TYPE_Pos=(9U)
   USB_EP1R_SETUP=USB_EP1R_SETUP_Msk
   USB_EP1R_SETUP_Msk=(0x1U << USB_EP1R_SETUP_Pos)
   USB_EP1R_SETUP_Pos=(11U)
   USB_EP1R_STAT_RX=USB_EP1R_STAT_RX_Msk
   USB_EP1R_STAT_RX_0=(0x1U << USB_EP1R_STAT_RX_Pos)
   USB_EP1R_STAT_RX_1=(0x2U << USB_EP1R_STAT_RX_Pos)
   USB_EP1R_STAT_RX_Msk=(0x3U << USB_EP1R_STAT_RX_Pos)
   USB_EP1R_STAT_RX_Pos=(12U)
   USB_EP1R_STAT_TX=USB_EP1R_STAT_TX_Msk
   USB_EP1R_STAT_TX_0=(0x1U << USB_EP1R_STAT_TX_Pos)
   USB_EP1R_STAT_TX_1=(0x2U << USB_EP1R_STAT_TX_Pos)
   USB_EP1R_STAT_TX_Msk=(0x3U << USB_EP1R_STAT_TX_Pos)
   USB_EP1R_STAT_TX_Pos=(4U)
   USB_EP2R=(USB_BASE + 0x00000008)
   USB_EP2R_CTR_RX=USB_EP2R_CTR_RX_Msk
   USB_EP2R_CTR_RX_Msk=(0x1U << USB_EP2R_CTR_RX_Pos)
   USB_EP2R_CTR_RX_Pos=(15U)
   USB_EP2R_CTR_TX=USB_EP2R_CTR_TX_Msk
   USB_EP2R_CTR_TX_Msk=(0x1U << USB_EP2R_CTR_TX_Pos)
   USB_EP2R_CTR_TX_Pos=(7U)
   USB_EP2R_DTOG_RX=USB_EP2R_DTOG_RX_Msk
   USB_EP2R_DTOG_RX_Msk=(0x1U << USB_EP2R_DTOG_RX_Pos)
   USB_EP2R_DTOG_RX_Pos=(14U)
   USB_EP2R_DTOG_TX=USB_EP2R_DTOG_TX_Msk
   USB_EP2R_DTOG_TX_Msk=(0x1U << USB_EP2R_DTOG_TX_Pos)
   USB_EP2R_DTOG_TX_Pos=(6U)
   USB_EP2R_EA=USB_EP2R_EA_Msk
   USB_EP2R_EA_Msk=(0xFU << USB_EP2R_EA_Pos)
   USB_EP2R_EA_Pos=(0U)
   USB_EP2R_EP_KIND=USB_EP2R_EP_KIND_Msk
   USB_EP2R_EP_KIND_Msk=(0x1U << USB_EP2R_EP_KIND_Pos)
   USB_EP2R_EP_KIND_Pos=(8U)
   USB_EP2R_EP_TYPE=USB_EP2R_EP_TYPE_Msk
   USB_EP2R_EP_TYPE_0=(0x1U << USB_EP2R_EP_TYPE_Pos)
   USB_EP2R_EP_TYPE_1=(0x2U << USB_EP2R_EP_TYPE_Pos)
   USB_EP2R_EP_TYPE_Msk=(0x3U << USB_EP2R_EP_TYPE_Pos)
   USB_EP2R_EP_TYPE_Pos=(9U)
   USB_EP2R_SETUP=USB_EP2R_SETUP_Msk
   USB_EP2R_SETUP_Msk=(0x1U << USB_EP2R_SETUP_Pos)
   USB_EP2R_SETUP_Pos=(11U)
   USB_EP2R_STAT_RX=USB_EP2R_STAT_RX_Msk
   USB_EP2R_STAT_RX_0=(0x1U << USB_EP2R_STAT_RX_Pos)
   USB_EP2R_STAT_RX_1=(0x2U << USB_EP2R_STAT_RX_Pos)
   USB_EP2R_STAT_RX_Msk=(0x3U << USB_EP2R_STAT_RX_Pos)
   USB_EP2R_STAT_RX_Pos=(12U)
   USB_EP2R_STAT_TX=USB_EP2R_STAT_TX_Msk
   USB_EP2R_STAT_TX_0=(0x1U << USB_EP2R_STAT_TX_Pos)
   USB_EP2R_STAT_TX_1=(0x2U << USB_EP2R_STAT_TX_Pos)
   USB_EP2R_STAT_TX_Msk=(0x3U << USB_EP2R_STAT_TX_Pos)
   USB_EP2R_STAT_TX_Pos=(4U)
   USB_EP3R=(USB_BASE + 0x0000000C)
   USB_EP3R_CTR_RX=USB_EP3R_CTR_RX_Msk
   USB_EP3R_CTR_RX_Msk=(0x1U << USB_EP3R_CTR_RX_Pos)
   USB_EP3R_CTR_RX_Pos=(15U)
   USB_EP3R_CTR_TX=USB_EP3R_CTR_TX_Msk
   USB_EP3R_CTR_TX_Msk=(0x1U << USB_EP3R_CTR_TX_Pos)
   USB_EP3R_CTR_TX_Pos=(7U)
   USB_EP3R_DTOG_RX=USB_EP3R_DTOG_RX_Msk
   USB_EP3R_DTOG_RX_Msk=(0x1U << USB_EP3R_DTOG_RX_Pos)
   USB_EP3R_DTOG_RX_Pos=(14U)
   USB_EP3R_DTOG_TX=USB_EP3R_DTOG_TX_Msk
   USB_EP3R_DTOG_TX_Msk=(0x1U << USB_EP3R_DTOG_TX_Pos)
   USB_EP3R_DTOG_TX_Pos=(6U)
   USB_EP3R_EA=USB_EP3R_EA_Msk
   USB_EP3R_EA_Msk=(0xFU << USB_EP3R_EA_Pos)
   USB_EP3R_EA_Pos=(0U)
   USB_EP3R_EP_KIND=USB_EP3R_EP_KIND_Msk
   USB_EP3R_EP_KIND_Msk=(0x1U << USB_EP3R_EP_KIND_Pos)
   USB_EP3R_EP_KIND_Pos=(8U)
   USB_EP3R_EP_TYPE=USB_EP3R_EP_TYPE_Msk
   USB_EP3R_EP_TYPE_0=(0x1U << USB_EP3R_EP_TYPE_Pos)
   USB_EP3R_EP_TYPE_1=(0x2U << USB_EP3R_EP_TYPE_Pos)
   USB_EP3R_EP_TYPE_Msk=(0x3U << USB_EP3R_EP_TYPE_Pos)
   USB_EP3R_EP_TYPE_Pos=(9U)
   USB_EP3R_SETUP=USB_EP3R_SETUP_Msk
   USB_EP3R_SETUP_Msk=(0x1U << USB_EP3R_SETUP_Pos)
   USB_EP3R_SETUP_Pos=(11U)
   USB_EP3R_STAT_RX=USB_EP3R_STAT_RX_Msk
   USB_EP3R_STAT_RX_0=(0x1U << USB_EP3R_STAT_RX_Pos)
   USB_EP3R_STAT_RX_1=(0x2U << USB_EP3R_STAT_RX_Pos)
   USB_EP3R_STAT_RX_Msk=(0x3U << USB_EP3R_STAT_RX_Pos)
   USB_EP3R_STAT_RX_Pos=(12U)
   USB_EP3R_STAT_TX=USB_EP3R_STAT_TX_Msk
   USB_EP3R_STAT_TX_0=(0x1U << USB_EP3R_STAT_TX_Pos)
   USB_EP3R_STAT_TX_1=(0x2U << USB_EP3R_STAT_TX_Pos)
   USB_EP3R_STAT_TX_Msk=(0x3U << USB_EP3R_STAT_TX_Pos)
   USB_EP3R_STAT_TX_Pos=(4U)
   USB_EP4R=(USB_BASE + 0x00000010)
   USB_EP4R_CTR_RX=USB_EP4R_CTR_RX_Msk
   USB_EP4R_CTR_RX_Msk=(0x1U << USB_EP4R_CTR_RX_Pos)
   USB_EP4R_CTR_RX_Pos=(15U)
   USB_EP4R_CTR_TX=USB_EP4R_CTR_TX_Msk
   USB_EP4R_CTR_TX_Msk=(0x1U << USB_EP4R_CTR_TX_Pos)
   USB_EP4R_CTR_TX_Pos=(7U)
   USB_EP4R_DTOG_RX=USB_EP4R_DTOG_RX_Msk
   USB_EP4R_DTOG_RX_Msk=(0x1U << USB_EP4R_DTOG_RX_Pos)
   USB_EP4R_DTOG_RX_Pos=(14U)
   USB_EP4R_DTOG_TX=USB_EP4R_DTOG_TX_Msk
   USB_EP4R_DTOG_TX_Msk=(0x1U << USB_EP4R_DTOG_TX_Pos)
   USB_EP4R_DTOG_TX_Pos=(6U)
   USB_EP4R_EA=USB_EP4R_EA_Msk
   USB_EP4R_EA_Msk=(0xFU << USB_EP4R_EA_Pos)
   USB_EP4R_EA_Pos=(0U)
   USB_EP4R_EP_KIND=USB_EP4R_EP_KIND_Msk
   USB_EP4R_EP_KIND_Msk=(0x1U << USB_EP4R_EP_KIND_Pos)
   USB_EP4R_EP_KIND_Pos=(8U)
   USB_EP4R_EP_TYPE=USB_EP4R_EP_TYPE_Msk
   USB_EP4R_EP_TYPE_0=(0x1U << USB_EP4R_EP_TYPE_Pos)
   USB_EP4R_EP_TYPE_1=(0x2U << USB_EP4R_EP_TYPE_Pos)
   USB_EP4R_EP_TYPE_Msk=(0x3U << USB_EP4R_EP_TYPE_Pos)
   USB_EP4R_EP_TYPE_Pos=(9U)
   USB_EP4R_SETUP=USB_EP4R_SETUP_Msk
   USB_EP4R_SETUP_Msk=(0x1U << USB_EP4R_SETUP_Pos)
   USB_EP4R_SETUP_Pos=(11U)
   USB_EP4R_STAT_RX=USB_EP4R_STAT_RX_Msk
   USB_EP4R_STAT_RX_0=(0x1U << USB_EP4R_STAT_RX_Pos)
   USB_EP4R_STAT_RX_1=(0x2U << USB_EP4R_STAT_RX_Pos)
   USB_EP4R_STAT_RX_Msk=(0x3U << USB_EP4R_STAT_RX_Pos)
   USB_EP4R_STAT_RX_Pos=(12U)
   USB_EP4R_STAT_TX=USB_EP4R_STAT_TX_Msk
   USB_EP4R_STAT_TX_0=(0x1U << USB_EP4R_STAT_TX_Pos)
   USB_EP4R_STAT_TX_1=(0x2U << USB_EP4R_STAT_TX_Pos)
   USB_EP4R_STAT_TX_Msk=(0x3U << USB_EP4R_STAT_TX_Pos)
   USB_EP4R_STAT_TX_Pos=(4U)
   USB_EP5R=(USB_BASE + 0x00000014)
   USB_EP5R_CTR_RX=USB_EP5R_CTR_RX_Msk
   USB_EP5R_CTR_RX_Msk=(0x1U << USB_EP5R_CTR_RX_Pos)
   USB_EP5R_CTR_RX_Pos=(15U)
   USB_EP5R_CTR_TX=USB_EP5R_CTR_TX_Msk
   USB_EP5R_CTR_TX_Msk=(0x1U << USB_EP5R_CTR_TX_Pos)
   USB_EP5R_CTR_TX_Pos=(7U)
   USB_EP5R_DTOG_RX=USB_EP5R_DTOG_RX_Msk
   USB_EP5R_DTOG_RX_Msk=(0x1U << USB_EP5R_DTOG_RX_Pos)
   USB_EP5R_DTOG_RX_Pos=(14U)
   USB_EP5R_DTOG_TX=USB_EP5R_DTOG_TX_Msk
   USB_EP5R_DTOG_TX_Msk=(0x1U << USB_EP5R_DTOG_TX_Pos)
   USB_EP5R_DTOG_TX_Pos=(6U)
   USB_EP5R_EA=USB_EP5R_EA_Msk
   USB_EP5R_EA_Msk=(0xFU << USB_EP5R_EA_Pos)
   USB_EP5R_EA_Pos=(0U)
   USB_EP5R_EP_KIND=USB_EP5R_EP_KIND_Msk
   USB_EP5R_EP_KIND_Msk=(0x1U << USB_EP5R_EP_KIND_Pos)
   USB_EP5R_EP_KIND_Pos=(8U)
   USB_EP5R_EP_TYPE=USB_EP5R_EP_TYPE_Msk
   USB_EP5R_EP_TYPE_0=(0x1U << USB_EP5R_EP_TYPE_Pos)
   USB_EP5R_EP_TYPE_1=(0x2U << USB_EP5R_EP_TYPE_Pos)
   USB_EP5R_EP_TYPE_Msk=(0x3U << USB_EP5R_EP_TYPE_Pos)
   USB_EP5R_EP_TYPE_Pos=(9U)
   USB_EP5R_SETUP=USB_EP5R_SETUP_Msk
   USB_EP5R_SETUP_Msk=(0x1U << USB_EP5R_SETUP_Pos)
   USB_EP5R_SETUP_Pos=(11U)
   USB_EP5R_STAT_RX=USB_EP5R_STAT_RX_Msk
   USB_EP5R_STAT_RX_0=(0x1U << USB_EP5R_STAT_RX_Pos)
   USB_EP5R_STAT_RX_1=(0x2U << USB_EP5R_STAT_RX_Pos)
   USB_EP5R_STAT_RX_Msk=(0x3U << USB_EP5R_STAT_RX_Pos)
   USB_EP5R_STAT_RX_Pos=(12U)
   USB_EP5R_STAT_TX=USB_EP5R_STAT_TX_Msk
   USB_EP5R_STAT_TX_0=(0x1U << USB_EP5R_STAT_TX_Pos)
   USB_EP5R_STAT_TX_1=(0x2U << USB_EP5R_STAT_TX_Pos)
   USB_EP5R_STAT_TX_Msk=(0x3U << USB_EP5R_STAT_TX_Pos)
   USB_EP5R_STAT_TX_Pos=(4U)
   USB_EP6R=(USB_BASE + 0x00000018)
   USB_EP6R_CTR_RX=USB_EP6R_CTR_RX_Msk
   USB_EP6R_CTR_RX_Msk=(0x1U << USB_EP6R_CTR_RX_Pos)
   USB_EP6R_CTR_RX_Pos=(15U)
   USB_EP6R_CTR_TX=USB_EP6R_CTR_TX_Msk
   USB_EP6R_CTR_TX_Msk=(0x1U << USB_EP6R_CTR_TX_Pos)
   USB_EP6R_CTR_TX_Pos=(7U)
   USB_EP6R_DTOG_RX=USB_EP6R_DTOG_RX_Msk
   USB_EP6R_DTOG_RX_Msk=(0x1U << USB_EP6R_DTOG_RX_Pos)
   USB_EP6R_DTOG_RX_Pos=(14U)
   USB_EP6R_DTOG_TX=USB_EP6R_DTOG_TX_Msk
   USB_EP6R_DTOG_TX_Msk=(0x1U << USB_EP6R_DTOG_TX_Pos)
   USB_EP6R_DTOG_TX_Pos=(6U)
   USB_EP6R_EA=USB_EP6R_EA_Msk
   USB_EP6R_EA_Msk=(0xFU << USB_EP6R_EA_Pos)
   USB_EP6R_EA_Pos=(0U)
   USB_EP6R_EP_KIND=USB_EP6R_EP_KIND_Msk
   USB_EP6R_EP_KIND_Msk=(0x1U << USB_EP6R_EP_KIND_Pos)
   USB_EP6R_EP_KIND_Pos=(8U)
   USB_EP6R_EP_TYPE=USB_EP6R_EP_TYPE_Msk
   USB_EP6R_EP_TYPE_0=(0x1U << USB_EP6R_EP_TYPE_Pos)
   USB_EP6R_EP_TYPE_1=(0x2U << USB_EP6R_EP_TYPE_Pos)
   USB_EP6R_EP_TYPE_Msk=(0x3U << USB_EP6R_EP_TYPE_Pos)
   USB_EP6R_EP_TYPE_Pos=(9U)
   USB_EP6R_SETUP=USB_EP6R_SETUP_Msk
   USB_EP6R_SETUP_Msk=(0x1U << USB_EP6R_SETUP_Pos)
   USB_EP6R_SETUP_Pos=(11U)
   USB_EP6R_STAT_RX=USB_EP6R_STAT_RX_Msk
   USB_EP6R_STAT_RX_0=(0x1U << USB_EP6R_STAT_RX_Pos)
   USB_EP6R_STAT_RX_1=(0x2U << USB_EP6R_STAT_RX_Pos)
   USB_EP6R_STAT_RX_Msk=(0x3U << USB_EP6R_STAT_RX_Pos)
   USB_EP6R_STAT_RX_Pos=(12U)
   USB_EP6R_STAT_TX=USB_EP6R_STAT_TX_Msk
   USB_EP6R_STAT_TX_0=(0x1U << USB_EP6R_STAT_TX_Pos)
   USB_EP6R_STAT_TX_1=(0x2U << USB_EP6R_STAT_TX_Pos)
   USB_EP6R_STAT_TX_Msk=(0x3U << USB_EP6R_STAT_TX_Pos)
   USB_EP6R_STAT_TX_Pos=(4U)
   USB_EP7R=(USB_BASE + 0x0000001C)
   USB_EP7R_CTR_RX=USB_EP7R_CTR_RX_Msk
   USB_EP7R_CTR_RX_Msk=(0x1U << USB_EP7R_CTR_RX_Pos)
   USB_EP7R_CTR_RX_Pos=(15U)
   USB_EP7R_CTR_TX=USB_EP7R_CTR_TX_Msk
   USB_EP7R_CTR_TX_Msk=(0x1U << USB_EP7R_CTR_TX_Pos)
   USB_EP7R_CTR_TX_Pos=(7U)
   USB_EP7R_DTOG_RX=USB_EP7R_DTOG_RX_Msk
   USB_EP7R_DTOG_RX_Msk=(0x1U << USB_EP7R_DTOG_RX_Pos)
   USB_EP7R_DTOG_RX_Pos=(14U)
   USB_EP7R_DTOG_TX=USB_EP7R_DTOG_TX_Msk
   USB_EP7R_DTOG_TX_Msk=(0x1U << USB_EP7R_DTOG_TX_Pos)
   USB_EP7R_DTOG_TX_Pos=(6U)
   USB_EP7R_EA=USB_EP7R_EA_Msk
   USB_EP7R_EA_Msk=(0xFU << USB_EP7R_EA_Pos)
   USB_EP7R_EA_Pos=(0U)
   USB_EP7R_EP_KIND=USB_EP7R_EP_KIND_Msk
   USB_EP7R_EP_KIND_Msk=(0x1U << USB_EP7R_EP_KIND_Pos)
   USB_EP7R_EP_KIND_Pos=(8U)
   USB_EP7R_EP_TYPE=USB_EP7R_EP_TYPE_Msk
   USB_EP7R_EP_TYPE_0=(0x1U << USB_EP7R_EP_TYPE_Pos)
   USB_EP7R_EP_TYPE_1=(0x2U << USB_EP7R_EP_TYPE_Pos)
   USB_EP7R_EP_TYPE_Msk=(0x3U << USB_EP7R_EP_TYPE_Pos)
   USB_EP7R_EP_TYPE_Pos=(9U)
   USB_EP7R_SETUP=USB_EP7R_SETUP_Msk
   USB_EP7R_SETUP_Msk=(0x1U << USB_EP7R_SETUP_Pos)
   USB_EP7R_SETUP_Pos=(11U)
   USB_EP7R_STAT_RX=USB_EP7R_STAT_RX_Msk
   USB_EP7R_STAT_RX_0=(0x1U << USB_EP7R_STAT_RX_Pos)
   USB_EP7R_STAT_RX_1=(0x2U << USB_EP7R_STAT_RX_Pos)
   USB_EP7R_STAT_RX_Msk=(0x3U << USB_EP7R_STAT_RX_Pos)
   USB_EP7R_STAT_RX_Pos=(12U)
   USB_EP7R_STAT_TX=USB_EP7R_STAT_TX_Msk
   USB_EP7R_STAT_TX_0=(0x1U << USB_EP7R_STAT_TX_Pos)
   USB_EP7R_STAT_TX_1=(0x2U << USB_EP7R_STAT_TX_Pos)
   USB_EP7R_STAT_TX_Msk=(0x3U << USB_EP7R_STAT_TX_Pos)
   USB_EP7R_STAT_TX_Pos=(4U)
   USB_EPADDR_FIELD=USB_EPADDR_FIELD_Msk
   USB_EPADDR_FIELD_Msk=(0xFU << USB_EPADDR_FIELD_Pos)
   USB_EPADDR_FIELD_Pos=(0U)
   USB_EPKIND_MASK=(~USB_EP_KIND & USB_EPREG_MASK)
   USB_EPREG_MASK=(USB_EP_CTR_RX|USB_EP_SETUP|USB_EP_T_FIELD|USB_EP_KIND|USB_EP_CTR_TX|USB_EPADDR_FIELD)
   USB_EPRX_DTOG1=0x00001000U
   USB_EPRX_DTOG2=0x00002000U
   USB_EPRX_DTOGMASK=(USB_EPRX_STAT|USB_EPREG_MASK)
   USB_EPRX_STAT=USB_EPRX_STAT_Msk
   USB_EPRX_STAT_Msk=(0x3U << USB_EPRX_STAT_Pos)
   USB_EPRX_STAT_Pos=(12U)
   USB_EPTX_DTOG1=0x00000010U
   USB_EPTX_DTOG2=0x00000020U
   USB_EPTX_DTOGMASK=(USB_EPTX_STAT|USB_EPREG_MASK)
   USB_EPTX_STAT=USB_EPTX_STAT_Msk
   USB_EPTX_STAT_Msk=(0x3U << USB_EPTX_STAT_Pos)
   USB_EPTX_STAT_Pos=(4U)
   USB_EP_BULK=0x00000000U
   USB_EP_CONTROL=0x00000200U
   USB_EP_CTR_RX=USB_EP_CTR_RX_Msk
   USB_EP_CTR_RX_Msk=(0x1U << USB_EP_CTR_RX_Pos)
   USB_EP_CTR_RX_Pos=(15U)
   USB_EP_CTR_TX=USB_EP_CTR_TX_Msk
   USB_EP_CTR_TX_Msk=(0x1U << USB_EP_CTR_TX_Pos)
   USB_EP_CTR_TX_Pos=(7U)
   USB_EP_DTOG_RX=USB_EP_DTOG_RX_Msk
   USB_EP_DTOG_RX_Msk=(0x1U << USB_EP_DTOG_RX_Pos)
   USB_EP_DTOG_RX_Pos=(14U)
   USB_EP_DTOG_TX=USB_EP_DTOG_TX_Msk
   USB_EP_DTOG_TX_Msk=(0x1U << USB_EP_DTOG_TX_Pos)
   USB_EP_DTOG_TX_Pos=(6U)
   USB_EP_INTERRUPT=0x00000600U
   USB_EP_ISOCHRONOUS=0x00000400U
   USB_EP_KIND=USB_EP_KIND_Msk
   USB_EP_KIND_Msk=(0x1U << USB_EP_KIND_Pos)
   USB_EP_KIND_Pos=(8U)
   USB_EP_RX_DIS=0x00000000U
   USB_EP_RX_NAK=0x00002000U
   USB_EP_RX_STALL=0x00001000U
   USB_EP_RX_VALID=0x00003000U
   USB_EP_SETUP=USB_EP_SETUP_Msk
   USB_EP_SETUP_Msk=(0x1U << USB_EP_SETUP_Pos)
   USB_EP_SETUP_Pos=(11U)
   USB_EP_TX_DIS=0x00000000U
   USB_EP_TX_NAK=0x00000020U
   USB_EP_TX_STALL=0x00000010U
   USB_EP_TX_VALID=0x00000030U
   USB_EP_TYPE_MASK=USB_EP_TYPE_MASK_Msk
   USB_EP_TYPE_MASK_Msk=(0x3U << USB_EP_TYPE_MASK_Pos)
   USB_EP_TYPE_MASK_Pos=(9U)
   USB_EP_T_FIELD=USB_EP_T_FIELD_Msk
   USB_EP_T_FIELD_Msk=(0x3U << USB_EP_T_FIELD_Pos)
   USB_EP_T_FIELD_Pos=(9U)
   USB_EP_T_MASK=(~USB_EP_T_FIELD & USB_EPREG_MASK)
   USB_FNR_FN=USB_FNR_FN_Msk
   USB_FNR_FN_Msk=(0x7FFU << USB_FNR_FN_Pos)
   USB_FNR_FN_Pos=(0U)
   USB_FNR_LCK=USB_FNR_LCK_Msk
   USB_FNR_LCK_Msk=(0x1U << USB_FNR_LCK_Pos)
   USB_FNR_LCK_Pos=(13U)
   USB_FNR_LSOF=USB_FNR_LSOF_Msk
   USB_FNR_LSOF_Msk=(0x3U << USB_FNR_LSOF_Pos)
   USB_FNR_LSOF_Pos=(11U)
   USB_FNR_RXDM=USB_FNR_RXDM_Msk
   USB_FNR_RXDM_Msk=(0x1U << USB_FNR_RXDM_Pos)
   USB_FNR_RXDM_Pos=(14U)
   USB_FNR_RXDP=USB_FNR_RXDP_Msk
   USB_FNR_RXDP_Msk=(0x1U << USB_FNR_RXDP_Pos)
   USB_FNR_RXDP_Pos=(15U)
   USB_HP_IRQHandler=USB_HP_CAN1_TX_IRQHandler
   USB_HP_IRQn=USB_HP_CAN1_TX_IRQn
   USB_ISTR_CTR=USB_ISTR_CTR_Msk
   USB_ISTR_CTR_Msk=(0x1U << USB_ISTR_CTR_Pos)
   USB_ISTR_CTR_Pos=(15U)
   USB_ISTR_DIR=USB_ISTR_DIR_Msk
   USB_ISTR_DIR_Msk=(0x1U << USB_ISTR_DIR_Pos)
   USB_ISTR_DIR_Pos=(4U)
   USB_ISTR_EP_ID=USB_ISTR_EP_ID_Msk
   USB_ISTR_EP_ID_Msk=(0xFU << USB_ISTR_EP_ID_Pos)
   USB_ISTR_EP_ID_Pos=(0U)
   USB_ISTR_ERR=USB_ISTR_ERR_Msk
   USB_ISTR_ERR_Msk=(0x1U << USB_ISTR_ERR_Pos)
   USB_ISTR_ERR_Pos=(13U)
   USB_ISTR_ESOF=USB_ISTR_ESOF_Msk
   USB_ISTR_ESOF_Msk=(0x1U << USB_ISTR_ESOF_Pos)
   USB_ISTR_ESOF_Pos=(8U)
   USB_ISTR_PMAOVR=USB_ISTR_PMAOVR_Msk
   USB_ISTR_PMAOVR_Msk=(0x1U << USB_ISTR_PMAOVR_Pos)
   USB_ISTR_PMAOVR_Pos=(14U)
   USB_ISTR_RESET=USB_ISTR_RESET_Msk
   USB_ISTR_RESET_Msk=(0x1U << USB_ISTR_RESET_Pos)
   USB_ISTR_RESET_Pos=(10U)
   USB_ISTR_SOF=USB_ISTR_SOF_Msk
   USB_ISTR_SOF_Msk=(0x1U << USB_ISTR_SOF_Pos)
   USB_ISTR_SOF_Pos=(9U)
   USB_ISTR_SUSP=USB_ISTR_SUSP_Msk
   USB_ISTR_SUSP_Msk=(0x1U << USB_ISTR_SUSP_Pos)
   USB_ISTR_SUSP_Pos=(11U)
   USB_ISTR_WKUP=USB_ISTR_WKUP_Msk
   USB_ISTR_WKUP_Msk=(0x1U << USB_ISTR_WKUP_Pos)
   USB_ISTR_WKUP_Pos=(12U)
   USB_LP_IRQHandler=USB_LP_CAN1_RX0_IRQHandler
   USB_LP_IRQn=USB_LP_CAN1_RX0_IRQn
   USB_PMAADDR=(APB1PERIPH_BASE + 0x00006000U)
   USE_RTOS=0
   VDD_VALUE=((uint32_t)3300)
   WCHAR_MAX=(__WCHAR_MAX__)
   WCHAR_MIN=(__WCHAR_MIN__)
   WINT_MAX=(__WINT_MAX__)
   WINT_MIN=(__WINT_MIN__)
   WRITE_REG(REG,VAL)=((REG) = (VAL))
   WWDG=((WWDG_TypeDef *)WWDG_BASE)
   WWDG_BASE=(APB1PERIPH_BASE + 0x00002C00U)
   WWDG_CFR_EWI=WWDG_CFR_EWI_Msk
   WWDG_CFR_EWI_Msk=(0x1U << WWDG_CFR_EWI_Pos)
   WWDG_CFR_EWI_Pos=(9U)
   WWDG_CFR_W0=WWDG_CFR_W_0
   WWDG_CFR_W1=WWDG_CFR_W_1
   WWDG_CFR_W2=WWDG_CFR_W_2
   WWDG_CFR_W3=WWDG_CFR_W_3
   WWDG_CFR_W4=WWDG_CFR_W_4
   WWDG_CFR_W5=WWDG_CFR_W_5
   WWDG_CFR_W6=WWDG_CFR_W_6
   WWDG_CFR_W=WWDG_CFR_W_Msk
   WWDG_CFR_WDGTB0=WWDG_CFR_WDGTB_0
   WWDG_CFR_WDGTB1=WWDG_CFR_WDGTB_1
   WWDG_CFR_WDGTB=WWDG_CFR_WDGTB_Msk
   WWDG_CFR_WDGTB_0=(0x1U << WWDG_CFR_WDGTB_Pos)
   WWDG_CFR_WDGTB_1=(0x2U << WWDG_CFR_WDGTB_Pos)
   WWDG_CFR_WDGTB_Msk=(0x3U << WWDG_CFR_WDGTB_Pos)
   WWDG_CFR_WDGTB_Pos=(7U)
   WWDG_CFR_W_0=(0x01U << WWDG_CFR_W_Pos)
   WWDG_CFR_W_1=(0x02U << WWDG_CFR_W_Pos)
   WWDG_CFR_W_2=(0x04U << WWDG_CFR_W_Pos)
   WWDG_CFR_W_3=(0x08U << WWDG_CFR_W_Pos)
   WWDG_CFR_W_4=(0x10U << WWDG_CFR_W_Pos)
   WWDG_CFR_W_5=(0x20U << WWDG_CFR_W_Pos)
   WWDG_CFR_W_6=(0x40U << WWDG_CFR_W_Pos)
   WWDG_CFR_W_Msk=(0x7FU << WWDG_CFR_W_Pos)
   WWDG_CFR_W_Pos=(0U)
   WWDG_CR_T0=WWDG_CR_T_0
   WWDG_CR_T1=WWDG_CR_T_1
   WWDG_CR_T2=WWDG_CR_T_2
   WWDG_CR_T3=WWDG_CR_T_3
   WWDG_CR_T4=WWDG_CR_T_4
   WWDG_CR_T5=WWDG_CR_T_5
   WWDG_CR_T6=WWDG_CR_T_6
   WWDG_CR_T=WWDG_CR_T_Msk
   WWDG_CR_T_0=(0x01U << WWDG_CR_T_Pos)
   WWDG_CR_T_1=(0x02U << WWDG_CR_T_Pos)
   WWDG_CR_T_2=(0x04U << WWDG_CR_T_Pos)
   WWDG_CR_T_3=(0x08U << WWDG_CR_T_Pos)
   WWDG_CR_T_4=(0x10U << WWDG_CR_T_Pos)
   WWDG_CR_T_5=(0x20U << WWDG_CR_T_Pos)
   WWDG_CR_T_6=(0x40U << WWDG_CR_T_Pos)
   WWDG_CR_T_Msk=(0x7FU << WWDG_CR_T_Pos)
   WWDG_CR_T_Pos=(0U)
   WWDG_CR_WDGA=WWDG_CR_WDGA_Msk
   WWDG_CR_WDGA_Msk=(0x1U << WWDG_CR_WDGA_Pos)
   WWDG_CR_WDGA_Pos=(7U)
   WWDG_SR_EWIF=WWDG_SR_EWIF_Msk
   WWDG_SR_EWIF_Msk=(0x1U << WWDG_SR_EWIF_Pos)
   WWDG_SR_EWIF_Pos=(0U)
   xPSR_C_Msk=(1UL << xPSR_C_Pos)
   xPSR_C_Pos=29U
   xPSR_ISR_Msk=(0x1FFUL )
   xPSR_ISR_Pos=0U
   xPSR_IT_Msk=(3UL << xPSR_IT_Pos)
   xPSR_IT_Pos=25U
   xPSR_N_Msk=(1UL << xPSR_N_Pos)
   xPSR_N_Pos=31U
   xPSR_Q_Msk=(1UL << xPSR_Q_Pos)
   xPSR_Q_Pos=27U
   xPSR_T_Msk=(1UL << xPSR_T_Pos)
   xPSR_T_Pos=24U
   xPSR_V_Msk=(1UL << xPSR_V_Pos)
   xPSR_V_Pos=28U
   xPSR_Z_Msk=(1UL << xPSR_Z_Pos)
   xPSR_Z_Pos=30U
   _AND=,
   _ANSIDECL_H_=
   _ANSI_STDDEF_H=
   _ATEXIT_DYNAMIC_ALLOC=1
   _ATEXIT_INIT={_NULL, 0, {_NULL}, _NULL}
   _ATEXIT_SIZE=32
   _ATFILE_SOURCE=1
   _ATTRIBUTE(attrs)=__attribute__ (attrs)
   _BEGIN_STD_C=
   _BIG_ENDIAN=4321
   _BLKCNT_T_DECLARED=
   _BLKSIZE_T_DECLARED=
   _BSDTYPES_DEFINED=
   _BSD_PTRDIFF_T_=
   _BSD_SIZE_T_=
   _BSD_SIZE_T_DEFINED_=
   _BSD_WCHAR_T_=
   _BYTE_ORDER=_LITTLE_ENDIAN
   _CAST_VOID=(void)
   _CLOCKID_T_=unsigned long
   _CLOCKID_T_DECLARED=
   _CLOCK_T_=unsigned long
   _CLOCK_T_DECLARED=
   _CONST=const
   _DEFAULT_SOURCE=1
   _DEFUN(name,arglist,args)=name(args)
   _DEFUN_VOID(name)=name(_NOARGS)
   _DEV_T_DECLARED=
   _DOTS=, ...
   _ELIDABLE_INLINE=static __inline__
   _END_STD_C=
   _EXFNPTR(name,proto)=(* name) proto
   _EXFUN(name,proto)=name proto
   _EXFUN_NOTHROW(name,proto)=name proto _NOTHROW
   _EXPARM(name,proto)=(* name) proto
   _FLD2VAL(field,value)=((value & field ## _Msk) >> field ## _Pos)
   _flockfile(fp)=(((fp)->_flags & __SSTR) ? 0 : __lock_acquire_recursive((fp)->_lock))
   _FSBLKCNT_T_DECLARED=
   _FSEEK_OPTIMIZATION=1
   _FSTDIO=
   _funlockfile(fp)=(((fp)->_flags & __SSTR) ? 0 : __lock_release_recursive((fp)->_lock))
   _FVWRITE_IN_STREAMIO=1
   _GCC_MAX_ALIGN_T=
   _GCC_PTRDIFF_T=
   _GCC_SIZE_T=
   _GCC_WCHAR_T=
   _GCC_WRAP_STDINT_H=
   _GID_T_DECLARED=
   _GLOBAL_ATEXIT=(_GLOBAL_REENT->_atexit)
   _GLOBAL_REENT=_global_impure_ptr
   _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL=1
   _HAVE_LONG_DOUBLE=1
   _HAVE_STDC=
   _howmany(x,y)=(((x)+((y)-1))/(y))
   _ID_T_DECLARED=
   _INO_T_DECLARED=
   _INT16_T_DECLARED=
   _INT32_EQ_LONG=
   _INT32_T_DECLARED=
   _INT64_T_DECLARED=
   _INT8_T_DECLARED=
   _INTMAX_T_DECLARED=
   _INTPTR_EQ_INT=
   _INTPTR_T_DECLARED=
   _IN_ADDR_T_DECLARED=
   _IN_PORT_T_DECLARED=
   _IOFBF=0
   _IOLBF=1
   _IONBF=2
   _KEY_T_DECLARED=
   _Kmax=(sizeof (size_t) << 3)
   _LDBL_EQ_DBL=1
   _LITTLE_ENDIAN=1234
   _LOCK_RECURSIVE_T=_LOCK_T
   _LONG_DOUBLE=long double
   _MACHINE__DEFAULT_TYPES_H=
   _MACHINE__TYPES_H=
   _MB_LEN_MAX=1
   _MODE_T_DECLARED=
   _NEWLIB_STDIO_H=
   _NEWLIB_VERSION="2.5.0"
   _NEWLIB_VERSION_H__=1
   _NLINK_T_DECLARED=
   _NOARGS=void
   _NOINLINE=__attribute__ ((__noinline__))
   _NOINLINE_STATIC=_NOINLINE static
   _NOTHROW=
   _NULL=0
   _OFF_T_DECLARED=
   _PARAMS(paramlist)=paramlist
   _PDP_ENDIAN=3412
   _PID_T_DECLARED=
   _POINTER_INT=long
   _POSIX_C_SOURCE=200809L
   _POSIX_SOURCE=1
   _PTR=void *
   _PTRDIFF_T=
   _PTRDIFF_T_=
   _PTRDIFF_T_DECLARED=
   _QUAD_HIGHWORD=1
   _QUAD_LOWWORD=0
   _RAND48_ADD=(0x000b)
   _RAND48_MULT_0=(0xe66d)
   _RAND48_MULT_1=(0xdeec)
   _RAND48_MULT_2=(0x0005)
   _RAND48_SEED_0=(0x330e)
   _RAND48_SEED_1=(0xabcd)
   _RAND48_SEED_2=(0x1234)
   _READ_WRITE_BUFSIZE_TYPE=int
   _READ_WRITE_RETURN_TYPE=int
   _REENT=_impure_ptr
   _REENT_ASCTIME_BUF(ptr)=((ptr)->_asctime_buf)
   _REENT_ASCTIME_SIZE=26
   _REENT_CHECK(var,what,type,size,init)=do { struct _reent *_r = (var); if (_r->what == NULL) { _r->what = (type)malloc(size); __reent_assert(_r->what); init; } } while (0)
   _REENT_CHECK_ASCTIME_BUF(var)=_REENT_CHECK(var, _asctime_buf, char *, _REENT_ASCTIME_SIZE, memset((var)->_asctime_buf, 0, _REENT_ASCTIME_SIZE))
   _REENT_CHECK_EMERGENCY(var)=_REENT_CHECK(var, _emergency, char *, _REENT_EMERGENCY_SIZE, )
   _REENT_CHECK_MISC(var)=_REENT_CHECK(var, _misc, struct _misc_reent *, sizeof *((var)->_misc), _REENT_INIT_MISC(var))
   _REENT_CHECK_MP(var)=_REENT_CHECK(var, _mp, struct _mprec *, sizeof *((var)->_mp), _REENT_INIT_MP(var))
   _REENT_CHECK_RAND48(var)=_REENT_CHECK(var, _r48, struct _rand48 *, sizeof *((var)->_r48), _REENT_INIT_RAND48((var)))
   _REENT_CHECK_SIGNAL_BUF(var)=_REENT_CHECK(var, _signal_buf, char *, _REENT_SIGNAL_SIZE, )
   _REENT_CHECK_TM(var)=_REENT_CHECK(var, _localtime_buf, struct __tm *, sizeof *((var)->_localtime_buf), )
   _REENT_EMERGENCY(ptr)=((ptr)->_emergency)
   _REENT_EMERGENCY_SIZE=25
   _REENT_GETDATE_ERR_P(ptr)=(&((ptr)->_misc->_getdate_err))
   _REENT_INIT(var)={ 0, (__FILE *)&__sf_fake_stdin, (__FILE *)&__sf_fake_stdout, (__FILE *)&__sf_fake_stderr, 0, _NULL, 0, 0, _NULL, _NULL, _NULL, 0, 0, _NULL, _NULL, _NULL, _NULL, _NULL, _REENT_INIT_ATEXIT {_NULL, 0, _NULL}, _NULL, _NULL, _NULL }
   _REENT_INIT_ATEXIT=_NULL, _ATEXIT_INIT,
   _REENT_INIT_MISC(var)=do { struct _reent *_r = (var); _r->_misc->_strtok_last = _NULL; _r->_misc->_mblen_state.__count = 0; _r->_misc->_mblen_state.__value.__wch = 0; _r->_misc->_wctomb_state.__count = 0; _r->_misc->_wctomb_state.__value.__wch = 0; _r->_misc->_mbtowc_state.__count = 0; _r->_misc->_mbtowc_state.__value.__wch = 0; _r->_misc->_mbrlen_state.__count = 0; _r->_misc->_mbrlen_state.__value.__wch = 0; _r->_misc->_mbrtowc_state.__count = 0; _r->_misc->_mbrtowc_state.__value.__wch = 0; _r->_misc->_mbsrtowcs_state.__count = 0; _r->_misc->_mbsrtowcs_state.__value.__wch = 0; _r->_misc->_wcrtomb_state.__count = 0; _r->_misc->_wcrtomb_state.__value.__wch = 0; _r->_misc->_wcsrtombs_state.__count = 0; _r->_misc->_wcsrtombs_state.__value.__wch = 0; _r->_misc->_l64a_buf[0] = '\0'; _r->_misc->_getdate_err = 0; } while (0)
   _REENT_INIT_MP(var)=do { struct _reent *_r = (var); _r->_mp->_result_k = 0; _r->_mp->_result = _r->_mp->_p5s = _NULL; _r->_mp->_freelist = _NULL; } while (0)
   _REENT_INIT_PTR(var)={ memset((var), 0, sizeof(*(var))); _REENT_INIT_PTR_ZEROED(var); }
   _REENT_INIT_PTR_ZEROED(var)={ (var)->_stdin = (__FILE *)&__sf_fake_stdin; (var)->_stdout = (__FILE *)&__sf_fake_stdout; (var)->_stderr = (__FILE *)&__sf_fake_stderr; }
   _REENT_INIT_RAND48(var)=do { struct _reent *_r = (var); _r->_r48->_seed[0] = _RAND48_SEED_0; _r->_r48->_seed[1] = _RAND48_SEED_1; _r->_r48->_seed[2] = _RAND48_SEED_2; _r->_r48->_mult[0] = _RAND48_MULT_0; _r->_r48->_mult[1] = _RAND48_MULT_1; _r->_r48->_mult[2] = _RAND48_MULT_2; _r->_r48->_add = _RAND48_ADD; _r->_r48->_rand_next = 1; } while (0)
   _REENT_L64A_BUF(ptr)=((ptr)->_misc->_l64a_buf)
   _REENT_MBLEN_STATE(ptr)=((ptr)->_misc->_mblen_state)
   _REENT_MBRLEN_STATE(ptr)=((ptr)->_misc->_mbrlen_state)
   _REENT_MBRTOWC_STATE(ptr)=((ptr)->_misc->_mbrtowc_state)
   _REENT_MBSRTOWCS_STATE(ptr)=((ptr)->_misc->_mbsrtowcs_state)
   _REENT_MBTOWC_STATE(ptr)=((ptr)->_misc->_mbtowc_state)
   _REENT_MP_FREELIST(ptr)=((ptr)->_mp->_freelist)
   _REENT_MP_P5S(ptr)=((ptr)->_mp->_p5s)
   _REENT_MP_RESULT(ptr)=((ptr)->_mp->_result)
   _REENT_MP_RESULT_K(ptr)=((ptr)->_mp->_result_k)
   _REENT_RAND48_ADD(ptr)=((ptr)->_r48->_add)
   _REENT_RAND48_MULT(ptr)=((ptr)->_r48->_mult)
   _REENT_RAND48_SEED(ptr)=((ptr)->_r48->_seed)
   _REENT_RAND_NEXT(ptr)=((ptr)->_r48->_rand_next)
   _REENT_SIGNAL_BUF(ptr)=((ptr)->_signal_buf)
   _REENT_SIGNAL_SIZE=24
   _REENT_SIGNGAM(ptr)=((ptr)->_gamma_signgam)
   _REENT_SMALL=
   _REENT_SMALL_CHECK_INIT(ptr)=do { if ((ptr) && !(ptr)->__sdidinit) __sinit (ptr); } while (0)
   _REENT_STRTOK_LAST(ptr)=((ptr)->_misc->_strtok_last)
   _REENT_TM(ptr)=((ptr)->_localtime_buf)
   _REENT_WCRTOMB_STATE(ptr)=((ptr)->_misc->_wcrtomb_state)
   _REENT_WCSRTOMBS_STATE(ptr)=((ptr)->_misc->_wcsrtombs_state)
   _REENT_WCTOMB_STATE(ptr)=((ptr)->_misc->_wctomb_state)
   _RETARGETABLE_LOCKING=1
   _SIGNED=signed
   _SIGSET_T_DECLARED=
   _SIZET_=
   _SIZE_T=
   _SIZE_T_=
   _SIZE_T_DECLARED=
   _SIZE_T_DEFINED=
   _SIZE_T_DEFINED_=
   _SSIZE_T_DECLARED=
   _STDDEF_H=
   _STDDEF_H_=
   _stderr_r(x)=((x)->_stderr)
   _STDINT_H=
   _stdin_r(x)=((x)->_stdin)
   _STDIO_H_=
   _stdout_r(x)=((x)->_stdout)
   _SUSECONDS_T_DECLARED=
   _SYS_CDEFS_H_=
   _SYS_FEATURES_H=
   _SYS_REENT_H_=
   _SYS_SELECT_H=
   _SYS_SIZE_T_H=
   _SYS_TIMESPEC_H_=
   _SYS_TYPES_FD_SET=
   _SYS_TYPES_H=
   _SYS__INTSUP_H=
   _SYS__PTHREADTYPES_H_=
   _SYS__SIGSET_H_=
   _SYS__STDINT_H=
   _SYS__TIMESPEC_H_=
   _SYS__TIMEVAL_H_=
   _SYS__TYPES_H=
   _TIMER_T_=unsigned long
   _TIMER_T_DECLARED=
   _TIMEVAL_DEFINED=
   _TIME_T_=long
   _TIME_T_DECLARED=
   _T_PTRDIFF=
   _T_PTRDIFF_=
   _T_SIZE=
   _T_SIZE_=
   _T_WCHAR=
   _T_WCHAR_=
   _UID_T_DECLARED=
   _UINT16_T_DECLARED=
   _UINT32_T_DECLARED=
   _UINT64_T_DECLARED=
   _UINT8_T_DECLARED=
   _UINTMAX_T_DECLARED=
   _UINTPTR_T_DECLARED=
   _UNBUF_STREAM_OPT=1
   _USECONDS_T_DECLARED=
   _VAL2FLD(field,value)=((value << field ## _Pos) & field ## _Msk)
   _VA_LIST_DEFINED=
   _VOID=void
   _VOLATILE=volatile
   _WANT_IO_LONG_LONG=1
   _WANT_REENT_SMALL=1
   _WCHAR_T=
   _WCHAR_T_=
   _WCHAR_T_DECLARED=
   _WCHAR_T_DEFINED=
   _WCHAR_T_DEFINED_=
   _WCHAR_T_H=
   _WIDE_ORIENT=1
   _WINT_T=
   __aligned(x)=__attribute__((__aligned__(x)))
   __ALIGN_BEGIN=
   __ALIGN_END=__attribute__ ((aligned (4)))
   __alloc_align(x)=__attribute__((__alloc_align__(x)))
   __alloc_size(x)=__attribute__((__alloc_size__(x)))
   __always_inline=__attribute__((__always_inline__))
   __arg_type_tag(arg_kind,arg_idx,type_tag_idx)=
   __ASM=__asm
   __ASMNAME(cname)=__XSTRING (__USER_LABEL_PREFIX__) cname
   __asserts_exclusive(...)=__lock_annotate(assert_exclusive_lock(__VA_ARGS__))
   __asserts_shared(...)=__lock_annotate(assert_shared_lock(__VA_ARGS__))
   __ATFILE_VISIBLE=1
   __attribute_format_strfmon__(a,b)=
   __ATTRIBUTE_IMPURE_PTR__=
   __attribute_malloc__=
   __attribute_pure__=
   __BEGIN_DECLS=
   __BIT_TYPES_DEFINED__=1
   __BKPT(value)=__ASM volatile ("bkpt "#value)
   __bounded=
   __BSD_VISIBLE=1
   __bswap16(_x)=__builtin_bswap16(_x)
   __bswap32(_x)=__builtin_bswap32(_x)
   __bswap64(_x)=__builtin_bswap64(_x)
   __builtin_constant_p(exp)=0
   __builtin_offsetof(T,m)=((size_t) &((T *)0)->m)
   __builtin_types_compatible_p(x,y)=__builtin_types_compatible_p(sizeof(x),sizeof(y))
   __builtin_va_arg(ap,type)=*(typeof(type) *)ap
   __caddr_t_defined=
   __CC_SUPPORTS_DYNAMIC_ARRAY_INIT=1
   __CC_SUPPORTS_INLINE=1
   __CC_SUPPORTS_VARADIC_XXX=1
   __CC_SUPPORTS_WARNING=1
   __CC_SUPPORTS___FUNC__=1
   __CC_SUPPORTS___INLINE=1
   __CC_SUPPORTS___INLINE__=1
   __CDT_PARSER__=1
   __clockid_t_defined=
   __clock_t_defined=
   __CLZ=__builtin_clz
   __CM3_CMSIS_VERSION=((__CM3_CMSIS_VERSION_MAIN << 16U) | __CM3_CMSIS_VERSION_SUB )
   __CM3_CMSIS_VERSION_MAIN=(0x04U)
   __CM3_CMSIS_VERSION_SUB=(0x1EU)
   __CM3_REV=0x0200U
   __CMSIS_GCC_H=
   __CMSIS_GCC_OUT_REG(r)="=r" (r)
   __CMSIS_GCC_USE_REG(r)="r" (r)
   __compiler_membar()=__asm __volatile(" " : : : "memory")
   __complex__=_Complex
   __CONCAT(x,y)=__CONCAT1(x,y)
   __CONCAT1(x,y)=x ## y
   __const=const
   __containerof(x,s,m)=({ const volatile __typeof(((s *)0)->m) *__x = (x); __DEQUALIFY(s *, (const volatile char *)__x - __offsetof(s, m));})
   __COPYRIGHT(s)=struct __hack
   __CORE_CM3_H_DEPENDANT=
   __CORE_CM3_H_GENERIC=
   __CORE_CMFUNC_H=
   __CORE_CMINSTR_H=
   __CORTEX_M=(0x03U)
   __COUNTER__=0
   __daddr_t_defined=
   __datatype_type_tag(kind,type)=
   __DATE__="Dec 25 2018"
   __dead2=__attribute__((__noreturn__))
   __DECONST(type,var)=((type)(__uintptr_t)(const void *)(var))
   __DEQUALIFY(type,var)=((type)(__uintptr_t)(const volatile void *)(var))
   __DEVOLATILE(type,var)=((type)(__uintptr_t)(volatile void *)(var))
   __DOTS=, ...
   __END_DECLS=
   __EXP(x)=__##x##__
   __EXPORT=
   __exported=__attribute__((__visibility__("default")))
   __extension__=
   __FAST16=
   __FAST32=
   __FAST64="ll"
   __FAST8=
   __fastcall=__attribute__((__fastcall__))
   __FBSDID(s)=struct __hack
   __FILE_defined=
   __FILE__="file"
   __flexarr=[0]
   __format_arg(fmtarg)=__attribute__((__format_arg__ (fmtarg)))
   __FPU_USED=0U
   __generic(expr,t,yes,no)=_Generic(expr, t: yes, default: no)
   __GNUCLIKE_ASM=3
   __GNUCLIKE_BUILTIN_CONSTANT_P=1
   __GNUCLIKE_BUILTIN_MEMCPY=1
   __GNUCLIKE_BUILTIN_NEXT_ARG=1
   __GNUCLIKE_BUILTIN_STDARG=1
   __GNUCLIKE_BUILTIN_VAALIST=1
   __GNUCLIKE_BUILTIN_VARARGS=1
   __GNUCLIKE_CTOR_SECTION_HANDLING=1
   __GNUCLIKE_MATH_BUILTIN_CONSTANTS=
   __GNUCLIKE_MATH_BUILTIN_RELOPS=
   __GNUCLIKE___OFFSETOF=1
   __GNUCLIKE___SECTION=1
   __GNUCLIKE___TYPEOF=1
   __GNUC_PREREQ(maj,min)=((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   __GNUC_PREREQ__(ma,mi)=__GNUC_PREREQ(ma, mi)
   __GNUC_VA_LIST=
   __GNUC_VA_LIST_COMPATIBILITY=1
   __gnu_inline=__attribute__((__gnu_inline__, __artificial__))
   __GNU_VISIBLE=0
   __guarded_by(x)=__lock_annotate(guarded_by(x))
   __HAL_AFIO_REMAP_ADC1_ETRGINJ_DISABLE()=AFIO_REMAP_DISABLE(AFIO_MAPR_ADC1_ETRGINJ_REMAP)
   __HAL_AFIO_REMAP_ADC1_ETRGINJ_ENABLE()=AFIO_REMAP_ENABLE(AFIO_MAPR_ADC1_ETRGINJ_REMAP)
   __HAL_AFIO_REMAP_ADC1_ETRGREG_DISABLE()=AFIO_REMAP_DISABLE(AFIO_MAPR_ADC1_ETRGREG_REMAP)
   __HAL_AFIO_REMAP_ADC1_ETRGREG_ENABLE()=AFIO_REMAP_ENABLE(AFIO_MAPR_ADC1_ETRGREG_REMAP)
   __HAL_AFIO_REMAP_CAN1_1()=AFIO_REMAP_PARTIAL(AFIO_MAPR_CAN_REMAP_REMAP1, AFIO_MAPR_CAN_REMAP)
   __HAL_AFIO_REMAP_CAN1_2()=AFIO_REMAP_PARTIAL(AFIO_MAPR_CAN_REMAP_REMAP2, AFIO_MAPR_CAN_REMAP)
   __HAL_AFIO_REMAP_CAN1_3()=AFIO_REMAP_PARTIAL(AFIO_MAPR_CAN_REMAP_REMAP3, AFIO_MAPR_CAN_REMAP)
   __HAL_AFIO_REMAP_I2C1_DISABLE()=AFIO_REMAP_DISABLE(AFIO_MAPR_I2C1_REMAP)
   __HAL_AFIO_REMAP_I2C1_ENABLE()=AFIO_REMAP_ENABLE(AFIO_MAPR_I2C1_REMAP)
   __HAL_AFIO_REMAP_PD01_DISABLE()=AFIO_REMAP_DISABLE(AFIO_MAPR_PD01_REMAP)
   __HAL_AFIO_REMAP_PD01_ENABLE()=AFIO_REMAP_ENABLE(AFIO_MAPR_PD01_REMAP)
   __HAL_AFIO_REMAP_SPI1_DISABLE()=AFIO_REMAP_DISABLE(AFIO_MAPR_SPI1_REMAP)
   __HAL_AFIO_REMAP_SPI1_ENABLE()=AFIO_REMAP_ENABLE(AFIO_MAPR_SPI1_REMAP)
   __HAL_AFIO_REMAP_SWJ_DISABLE()=AFIO_DBGAFR_CONFIG(AFIO_MAPR_SWJ_CFG_DISABLE)
   __HAL_AFIO_REMAP_SWJ_ENABLE()=AFIO_DBGAFR_CONFIG(AFIO_MAPR_SWJ_CFG_RESET)
   __HAL_AFIO_REMAP_SWJ_NOJTAG()=AFIO_DBGAFR_CONFIG(AFIO_MAPR_SWJ_CFG_JTAGDISABLE)
   __HAL_AFIO_REMAP_SWJ_NONJTRST()=AFIO_DBGAFR_CONFIG(AFIO_MAPR_SWJ_CFG_NOJNTRST)
   __HAL_AFIO_REMAP_TIM1_DISABLE()=AFIO_REMAP_PARTIAL(AFIO_MAPR_TIM1_REMAP_NOREMAP, AFIO_MAPR_TIM1_REMAP_FULLREMAP)
   __HAL_AFIO_REMAP_TIM1_ENABLE()=AFIO_REMAP_PARTIAL(AFIO_MAPR_TIM1_REMAP_FULLREMAP, AFIO_MAPR_TIM1_REMAP_FULLREMAP)
   __HAL_AFIO_REMAP_TIM1_PARTIAL()=AFIO_REMAP_PARTIAL(AFIO_MAPR_TIM1_REMAP_PARTIALREMAP, AFIO_MAPR_TIM1_REMAP_FULLREMAP)
   __HAL_AFIO_REMAP_TIM2_DISABLE()=AFIO_REMAP_PARTIAL(AFIO_MAPR_TIM2_REMAP_NOREMAP, AFIO_MAPR_TIM2_REMAP_FULLREMAP)
   __HAL_AFIO_REMAP_TIM2_ENABLE()=AFIO_REMAP_PARTIAL(AFIO_MAPR_TIM2_REMAP_FULLREMAP, AFIO_MAPR_TIM2_REMAP_FULLREMAP)
   __HAL_AFIO_REMAP_TIM2_PARTIAL_1()=AFIO_REMAP_PARTIAL(AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1, AFIO_MAPR_TIM2_REMAP_FULLREMAP)
   __HAL_AFIO_REMAP_TIM2_PARTIAL_2()=AFIO_REMAP_PARTIAL(AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2, AFIO_MAPR_TIM2_REMAP_FULLREMAP)
   __HAL_AFIO_REMAP_TIM3_DISABLE()=AFIO_REMAP_PARTIAL(AFIO_MAPR_TIM3_REMAP_NOREMAP, AFIO_MAPR_TIM3_REMAP_FULLREMAP)
   __HAL_AFIO_REMAP_TIM3_ENABLE()=AFIO_REMAP_PARTIAL(AFIO_MAPR_TIM3_REMAP_FULLREMAP, AFIO_MAPR_TIM3_REMAP_FULLREMAP)
   __HAL_AFIO_REMAP_TIM3_PARTIAL()=AFIO_REMAP_PARTIAL(AFIO_MAPR_TIM3_REMAP_PARTIALREMAP, AFIO_MAPR_TIM3_REMAP_FULLREMAP)
   __HAL_AFIO_REMAP_TIM4_DISABLE()=AFIO_REMAP_DISABLE(AFIO_MAPR_TIM4_REMAP)
   __HAL_AFIO_REMAP_TIM4_ENABLE()=AFIO_REMAP_ENABLE(AFIO_MAPR_TIM4_REMAP)
   __HAL_AFIO_REMAP_USART1_DISABLE()=AFIO_REMAP_DISABLE(AFIO_MAPR_USART1_REMAP)
   __HAL_AFIO_REMAP_USART1_ENABLE()=AFIO_REMAP_ENABLE(AFIO_MAPR_USART1_REMAP)
   __HAL_AFIO_REMAP_USART2_DISABLE()=AFIO_REMAP_DISABLE(AFIO_MAPR_USART2_REMAP)
   __HAL_AFIO_REMAP_USART2_ENABLE()=AFIO_REMAP_ENABLE(AFIO_MAPR_USART2_REMAP)
   __HAL_AFIO_REMAP_USART3_DISABLE()=AFIO_REMAP_PARTIAL(AFIO_MAPR_USART3_REMAP_NOREMAP, AFIO_MAPR_USART3_REMAP_FULLREMAP)
   __HAL_AFIO_REMAP_USART3_ENABLE()=AFIO_REMAP_PARTIAL(AFIO_MAPR_USART3_REMAP_FULLREMAP, AFIO_MAPR_USART3_REMAP_FULLREMAP)
   __HAL_AFIO_REMAP_USART3_PARTIAL()=AFIO_REMAP_PARTIAL(AFIO_MAPR_USART3_REMAP_PARTIALREMAP, AFIO_MAPR_USART3_REMAP_FULLREMAP)
   __HAL_CAN_CLEAR_FLAG(__HANDLE__,__FLAG__)=((((__FLAG__) >> 8U) == 5U)? (((__HANDLE__)->Instance->TSR) = (1U << ((__FLAG__) & CAN_FLAG_MASK))): (((__FLAG__) >> 8U) == 2U)? (((__HANDLE__)->Instance->RF0R) = (1U << ((__FLAG__) & CAN_FLAG_MASK))): (((__FLAG__) >> 8U) == 4U)? (((__HANDLE__)->Instance->RF1R) = (1U << ((__FLAG__) & CAN_FLAG_MASK))): (((__FLAG__) >> 8U) == 1U)? (((__HANDLE__)->Instance->MSR) = (1U << ((__FLAG__) & CAN_FLAG_MASK))): 0U)
   __HAL_CAN_DISABLE_IT(__HANDLE__,__INTERRUPT__)=(((__HANDLE__)->Instance->IER) &= ~(__INTERRUPT__))
   __HAL_CAN_ENABLE_IT(__HANDLE__,__INTERRUPT__)=(((__HANDLE__)->Instance->IER) |= (__INTERRUPT__))
   __HAL_CAN_GET_FLAG(__HANDLE__,__FLAG__)=((((__FLAG__) >> 8U) == 5U)? ((((__HANDLE__)->Instance->TSR) & (1U << ((__FLAG__) & CAN_FLAG_MASK))) == (1U << ((__FLAG__) & CAN_FLAG_MASK))): (((__FLAG__) >> 8U) == 2U)? ((((__HANDLE__)->Instance->RF0R) & (1U << ((__FLAG__) & CAN_FLAG_MASK))) == (1U << ((__FLAG__) & CAN_FLAG_MASK))): (((__FLAG__) >> 8U) == 4U)? ((((__HANDLE__)->Instance->RF1R) & (1U << ((__FLAG__) & CAN_FLAG_MASK))) == (1U << ((__FLAG__) & CAN_FLAG_MASK))): (((__FLAG__) >> 8U) == 1U)? ((((__HANDLE__)->Instance->MSR) & (1U << ((__FLAG__) & CAN_FLAG_MASK))) == (1U << ((__FLAG__) & CAN_FLAG_MASK))): (((__FLAG__) >> 8U) == 3U)? ((((__HANDLE__)->Instance->ESR) & (1U << ((__FLAG__) & CAN_FLAG_MASK))) == (1U << ((__FLAG__) & CAN_FLAG_MASK))): 0U)
   __HAL_CAN_GET_IT_SOURCE(__HANDLE__,__INTERRUPT__)=(((__HANDLE__)->Instance->IER) & (__INTERRUPT__))
   __HAL_CAN_RESET_HANDLE_STATE(__HANDLE__)=((__HANDLE__)->State = HAL_CAN_STATE_RESET)
   __HAL_DBGMCU_FREEZE_CAN1()=SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_CAN1_STOP)
   __HAL_DBGMCU_FREEZE_I2C1_TIMEOUT()=SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT)
   __HAL_DBGMCU_FREEZE_I2C2_TIMEOUT()=SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT)
   __HAL_DBGMCU_FREEZE_IWDG()=SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_IWDG_STOP)
   __HAL_DBGMCU_FREEZE_TIM1()=SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM1_STOP)
   __HAL_DBGMCU_FREEZE_TIM2()=SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM2_STOP)
   __HAL_DBGMCU_FREEZE_TIM3()=SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM3_STOP)
   __HAL_DBGMCU_FREEZE_TIM4()=SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM4_STOP)
   __HAL_DBGMCU_FREEZE_WWDG()=SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_WWDG_STOP)
   __HAL_DBGMCU_UNFREEZE_CAN1()=CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_CAN1_STOP)
   __HAL_DBGMCU_UNFREEZE_I2C1_TIMEOUT()=CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT)
   __HAL_DBGMCU_UNFREEZE_I2C2_TIMEOUT()=CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT)
   __HAL_DBGMCU_UNFREEZE_IWDG()=CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_IWDG_STOP)
   __HAL_DBGMCU_UNFREEZE_TIM1()=CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM1_STOP)
   __HAL_DBGMCU_UNFREEZE_TIM2()=CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM2_STOP)
   __HAL_DBGMCU_UNFREEZE_TIM3()=CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM3_STOP)
   __HAL_DBGMCU_UNFREEZE_TIM4()=CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_TIM4_STOP)
   __HAL_DBGMCU_UNFREEZE_WWDG()=CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_WWDG_STOP)
   __HAL_DMA_CLEAR_FLAG(__HANDLE__,__FLAG__)=(DMA1->IFCR = (__FLAG__))
   __HAL_DMA_DISABLE(__HANDLE__)=(CLEAR_BIT((__HANDLE__)->Instance->CCR, DMA_CCR_EN))
   __HAL_DMA_DISABLE_IT(__HANDLE__,__INTERRUPT__)=(CLEAR_BIT((__HANDLE__)->Instance->CCR , (__INTERRUPT__)))
   __HAL_DMA_ENABLE(__HANDLE__)=(SET_BIT((__HANDLE__)->Instance->CCR, DMA_CCR_EN))
   __HAL_DMA_ENABLE_IT(__HANDLE__,__INTERRUPT__)=(SET_BIT((__HANDLE__)->Instance->CCR, (__INTERRUPT__)))
   __HAL_DMA_GET_COUNTER(__HANDLE__)=((__HANDLE__)->Instance->CNDTR)
   __HAL_DMA_GET_FLAG(__HANDLE__,__FLAG__)=(DMA1->ISR & (__FLAG__))
   __HAL_DMA_GET_GI_FLAG_INDEX(__HANDLE__)=(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_GL1 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_GL2 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_GL3 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_GL4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel5))? DMA_FLAG_GL5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel6))? DMA_FLAG_GL6 : DMA_FLAG_GL7)
   __HAL_DMA_GET_HT_FLAG_INDEX(__HANDLE__)=(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_HT1 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_HT2 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_HT3 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_HT4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel5))? DMA_FLAG_HT5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel6))? DMA_FLAG_HT6 : DMA_FLAG_HT7)
   __HAL_DMA_GET_IT_SOURCE(__HANDLE__,__INTERRUPT__)=((((__HANDLE__)->Instance->CCR & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET)
   __HAL_DMA_GET_TC_FLAG_INDEX(__HANDLE__)=(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_TC1 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_TC2 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_TC3 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_TC4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel5))? DMA_FLAG_TC5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel6))? DMA_FLAG_TC6 : DMA_FLAG_TC7)
   __HAL_DMA_GET_TE_FLAG_INDEX(__HANDLE__)=(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_TE1 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_TE2 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_TE3 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_TE4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel5))? DMA_FLAG_TE5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel6))? DMA_FLAG_TE6 : DMA_FLAG_TE7)
   __HAL_DMA_RESET_HANDLE_STATE(__HANDLE__)=((__HANDLE__)->State = HAL_DMA_STATE_RESET)
   __HAL_FLASH_CLEAR_FLAG(__FLAG__)=do { if ((__FLAG__) == FLASH_FLAG_OPTVERR) { CLEAR_BIT(FLASH->OBR, FLASH_OBR_OPTERR); } else { FLASH->SR = (__FLAG__); } } while(0U)
   __HAL_FLASH_DISABLE_IT(__INTERRUPT__)=(FLASH->CR &= ~(__INTERRUPT__))
   __HAL_FLASH_ENABLE_IT(__INTERRUPT__)=(FLASH->CR |= (__INTERRUPT__))
   __HAL_FLASH_GET_FLAG(__FLAG__)=(((__FLAG__) == FLASH_FLAG_OPTVERR) ? (FLASH->OBR & FLASH_OBR_OPTERR) : (FLASH->SR & (__FLAG__)))
   __HAL_FLASH_GET_LATENCY()=(READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))
   __HAL_FLASH_HALF_CYCLE_ACCESS_DISABLE()=(FLASH->ACR &= (~FLASH_ACR_HLFCYA))
   __HAL_FLASH_HALF_CYCLE_ACCESS_ENABLE()=(FLASH->ACR |= FLASH_ACR_HLFCYA)
   __HAL_FLASH_PREFETCH_BUFFER_DISABLE()=(FLASH->ACR &= (~FLASH_ACR_PRFTBE))
   __HAL_FLASH_PREFETCH_BUFFER_ENABLE()=(FLASH->ACR |= FLASH_ACR_PRFTBE)
   __HAL_FLASH_SET_LATENCY(__LATENCY__)=(FLASH->ACR = (FLASH->ACR&(~FLASH_ACR_LATENCY)) | (__LATENCY__))
   __HAL_GPIO_EXTI_CLEAR_FLAG(__EXTI_LINE__)=(EXTI->PR = (__EXTI_LINE__))
   __HAL_GPIO_EXTI_CLEAR_IT(__EXTI_LINE__)=(EXTI->PR = (__EXTI_LINE__))
   __HAL_GPIO_EXTI_GENERATE_SWIT(__EXTI_LINE__)=(EXTI->SWIER |= (__EXTI_LINE__))
   __HAL_GPIO_EXTI_GET_FLAG(__EXTI_LINE__)=(EXTI->PR & (__EXTI_LINE__))
   __HAL_GPIO_EXTI_GET_IT(__EXTI_LINE__)=(EXTI->PR & (__EXTI_LINE__))
   __HAL_LINKDMA(__HANDLE__,__PPP_DMA_FIELD__,__DMA_HANDLE__)=do{ (__HANDLE__)->__PPP_DMA_FIELD__ = &(__DMA_HANDLE__); (__DMA_HANDLE__).Parent = (__HANDLE__); } while(0U)
   __HAL_LOCK(__HANDLE__)=do{ if((__HANDLE__)->Lock == HAL_LOCKED) { return HAL_BUSY; } else { (__HANDLE__)->Lock = HAL_LOCKED; } }while (0U)
   __HAL_PWR_CLEAR_FLAG(__FLAG__)=SET_BIT(PWR->CR, ((__FLAG__) << 2))
   __HAL_PWR_GET_FLAG(__FLAG__)=((PWR->CSR & (__FLAG__)) == (__FLAG__))
   __HAL_PWR_PVD_EXTI_CLEAR_FLAG()=(EXTI->PR = (PWR_EXTI_LINE_PVD))
   __HAL_PWR_PVD_EXTI_DISABLE_EVENT()=CLEAR_BIT(EXTI->EMR, PWR_EXTI_LINE_PVD)
   __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE()=CLEAR_BIT(EXTI->FTSR, PWR_EXTI_LINE_PVD)
   __HAL_PWR_PVD_EXTI_DISABLE_IT()=CLEAR_BIT(EXTI->IMR, PWR_EXTI_LINE_PVD)
   __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE()=CLEAR_BIT(EXTI->RTSR, PWR_EXTI_LINE_PVD)
   __HAL_PWR_PVD_EXTI_DISABLE_RISING_FALLING_EDGE()=__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
   __HAL_PWR_PVD_EXTI_ENABLE_EVENT()=SET_BIT(EXTI->EMR, PWR_EXTI_LINE_PVD)
   __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE()=SET_BIT(EXTI->FTSR, PWR_EXTI_LINE_PVD)
   __HAL_PWR_PVD_EXTI_ENABLE_IT()=SET_BIT(EXTI->IMR, PWR_EXTI_LINE_PVD)
   __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE()=SET_BIT(EXTI->RTSR, PWR_EXTI_LINE_PVD)
   __HAL_PWR_PVD_EXTI_ENABLE_RISING_FALLING_EDGE()=__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
   __HAL_PWR_PVD_EXTI_GENERATE_SWIT()=SET_BIT(EXTI->SWIER, PWR_EXTI_LINE_PVD)
   __HAL_PWR_PVD_EXTI_GET_FLAG()=(EXTI->PR & (PWR_EXTI_LINE_PVD))
   __HAL_RCC_ADC1_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_ADC1EN))
   __HAL_RCC_ADC1_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_ADC1EN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_ADC1EN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_ADC1_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_ADC1RST))
   __HAL_RCC_ADC1_IS_CLK_DISABLED()=((RCC->APB2ENR & (RCC_APB2ENR_ADC1EN)) == RESET)
   __HAL_RCC_ADC1_IS_CLK_ENABLED()=((RCC->APB2ENR & (RCC_APB2ENR_ADC1EN)) != RESET)
   __HAL_RCC_ADC1_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_ADC1RST))
   __HAL_RCC_ADC2_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_ADC2EN))
   __HAL_RCC_ADC2_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_ADC2EN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_ADC2EN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_ADC2_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_ADC2RST))
   __HAL_RCC_ADC2_IS_CLK_DISABLED()=((RCC->APB2ENR & (RCC_APB2ENR_ADC2EN)) == RESET)
   __HAL_RCC_ADC2_IS_CLK_ENABLED()=((RCC->APB2ENR & (RCC_APB2ENR_ADC2EN)) != RESET)
   __HAL_RCC_ADC2_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_ADC2RST))
   __HAL_RCC_ADC_CONFIG(__ADCCLKSOURCE__)=MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, (uint32_t)(__ADCCLKSOURCE__))
   __HAL_RCC_AFIO_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_AFIOEN))
   __HAL_RCC_AFIO_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_AFIOEN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_AFIOEN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_AFIO_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_AFIORST))
   __HAL_RCC_AFIO_IS_CLK_DISABLED()=((RCC->APB2ENR & (RCC_APB2ENR_AFIOEN)) == RESET)
   __HAL_RCC_AFIO_IS_CLK_ENABLED()=((RCC->APB2ENR & (RCC_APB2ENR_AFIOEN)) != RESET)
   __HAL_RCC_AFIO_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_AFIORST))
   __HAL_RCC_APB1_FORCE_RESET()=(RCC->APB2RSTR = 0xFFFFFFFFU)
   __HAL_RCC_APB1_RELEASE_RESET()=(RCC->APB1RSTR = 0x00)
   __HAL_RCC_APB2_FORCE_RESET()=(RCC->APB2RSTR = 0xFFFFFFFFU)
   __HAL_RCC_APB2_RELEASE_RESET()=(RCC->APB2RSTR = 0x00)
   __HAL_RCC_BACKUPRESET_FORCE()=(*(__IO uint32_t *) RCC_BDCR_BDRST_BB = ENABLE)
   __HAL_RCC_BACKUPRESET_RELEASE()=(*(__IO uint32_t *) RCC_BDCR_BDRST_BB = DISABLE)
   __HAL_RCC_BKP_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_BKPEN))
   __HAL_RCC_BKP_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_BKPEN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_BKPEN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_BKP_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_BKPRST))
   __HAL_RCC_BKP_IS_CLK_DISABLED()=((RCC->APB1ENR & (RCC_APB1ENR_BKPEN)) == RESET)
   __HAL_RCC_BKP_IS_CLK_ENABLED()=((RCC->APB1ENR & (RCC_APB1ENR_BKPEN)) != RESET)
   __HAL_RCC_BKP_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_BKPRST))
   __HAL_RCC_CAN1_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_CAN1EN))
   __HAL_RCC_CAN1_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_CAN1EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_CAN1EN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_CAN1_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_CAN1RST))
   __HAL_RCC_CAN1_IS_CLK_DISABLED()=((RCC->APB1ENR & (RCC_APB1ENR_CAN1EN)) == RESET)
   __HAL_RCC_CAN1_IS_CLK_ENABLED()=((RCC->APB1ENR & (RCC_APB1ENR_CAN1EN)) != RESET)
   __HAL_RCC_CAN1_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_CAN1RST))
   __HAL_RCC_CLEAR_IT(__INTERRUPT__)=(*(__IO uint8_t *) RCC_CIR_BYTE2_ADDRESS = (__INTERRUPT__))
   __HAL_RCC_CLEAR_RESET_FLAGS()=(*(__IO uint32_t *)RCC_CSR_RMVF_BB = ENABLE)
   __HAL_RCC_CRC_CLK_DISABLE()=(RCC->AHBENR &= ~(RCC_AHBENR_CRCEN))
   __HAL_RCC_CRC_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHBENR, RCC_AHBENR_CRCEN); tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_CRCEN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_CRC_IS_CLK_DISABLED()=((RCC->AHBENR & (RCC_AHBENR_CRCEN)) == RESET)
   __HAL_RCC_CRC_IS_CLK_ENABLED()=((RCC->AHBENR & (RCC_AHBENR_CRCEN)) != RESET)
   __HAL_RCC_DISABLE_IT(__INTERRUPT__)=(*(__IO uint8_t *) RCC_CIR_BYTE1_ADDRESS &= (uint8_t)(~(__INTERRUPT__)))
   __HAL_RCC_DMA1_CLK_DISABLE()=(RCC->AHBENR &= ~(RCC_AHBENR_DMA1EN))
   __HAL_RCC_DMA1_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHBENR, RCC_AHBENR_DMA1EN); tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_DMA1EN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_DMA1_IS_CLK_DISABLED()=((RCC->AHBENR & (RCC_AHBENR_DMA1EN)) == RESET)
   __HAL_RCC_DMA1_IS_CLK_ENABLED()=((RCC->AHBENR & (RCC_AHBENR_DMA1EN)) != RESET)
   __HAL_RCC_ENABLE_IT(__INTERRUPT__)=(*(__IO uint8_t *) RCC_CIR_BYTE1_ADDRESS |= (__INTERRUPT__))
   __HAL_RCC_FLITF_CLK_DISABLE()=(RCC->AHBENR &= ~(RCC_AHBENR_FLITFEN))
   __HAL_RCC_FLITF_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHBENR, RCC_AHBENR_FLITFEN); tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_FLITFEN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_FLITF_IS_CLK_DISABLED()=((RCC->AHBENR & (RCC_AHBENR_FLITFEN)) == RESET)
   __HAL_RCC_FLITF_IS_CLK_ENABLED()=((RCC->AHBENR & (RCC_AHBENR_FLITFEN)) != RESET)
   __HAL_RCC_GET_ADC_SOURCE()=((uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_ADCPRE)))
   __HAL_RCC_GET_FLAG(__FLAG__)=(((((__FLAG__) >> 5U) == CR_REG_INDEX)? RCC->CR : ((((__FLAG__) >> 5U) == BDCR_REG_INDEX)? RCC->BDCR : RCC->CSR)) & (1U << ((__FLAG__) & RCC_FLAG_MASK)))
   __HAL_RCC_GET_IT(__INTERRUPT__)=((RCC->CIR & (__INTERRUPT__)) == (__INTERRUPT__))
   __HAL_RCC_GET_PLL_OSCSOURCE()=((uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC)))
   __HAL_RCC_GET_RTC_SOURCE()=(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL))
   __HAL_RCC_GET_SYSCLK_SOURCE()=((uint32_t)(READ_BIT(RCC->CFGR,RCC_CFGR_SWS)))
   __HAL_RCC_GET_USB_SOURCE()=((uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_USBPRE)))
   __HAL_RCC_GPIOA_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_IOPAEN))
   __HAL_RCC_GPIOA_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPAEN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPAEN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_GPIOA_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_IOPARST))
   __HAL_RCC_GPIOA_IS_CLK_DISABLED()=((RCC->APB2ENR & (RCC_APB2ENR_IOPAEN)) == RESET)
   __HAL_RCC_GPIOA_IS_CLK_ENABLED()=((RCC->APB2ENR & (RCC_APB2ENR_IOPAEN)) != RESET)
   __HAL_RCC_GPIOA_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_IOPARST))
   __HAL_RCC_GPIOB_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_IOPBEN))
   __HAL_RCC_GPIOB_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPBEN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPBEN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_GPIOB_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_IOPBRST))
   __HAL_RCC_GPIOB_IS_CLK_DISABLED()=((RCC->APB2ENR & (RCC_APB2ENR_IOPBEN)) == RESET)
   __HAL_RCC_GPIOB_IS_CLK_ENABLED()=((RCC->APB2ENR & (RCC_APB2ENR_IOPBEN)) != RESET)
   __HAL_RCC_GPIOB_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_IOPBRST))
   __HAL_RCC_GPIOC_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_IOPCEN))
   __HAL_RCC_GPIOC_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPCEN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPCEN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_GPIOC_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_IOPCRST))
   __HAL_RCC_GPIOC_IS_CLK_DISABLED()=((RCC->APB2ENR & (RCC_APB2ENR_IOPCEN)) == RESET)
   __HAL_RCC_GPIOC_IS_CLK_ENABLED()=((RCC->APB2ENR & (RCC_APB2ENR_IOPCEN)) != RESET)
   __HAL_RCC_GPIOC_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_IOPCRST))
   __HAL_RCC_GPIOD_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_IOPDEN))
   __HAL_RCC_GPIOD_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPDEN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPDEN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_GPIOD_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_IOPDRST))
   __HAL_RCC_GPIOD_IS_CLK_DISABLED()=((RCC->APB2ENR & (RCC_APB2ENR_IOPDEN)) == RESET)
   __HAL_RCC_GPIOD_IS_CLK_ENABLED()=((RCC->APB2ENR & (RCC_APB2ENR_IOPDEN)) != RESET)
   __HAL_RCC_GPIOD_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_IOPDRST))
   __HAL_RCC_GPIOE_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_IOPEEN))
   __HAL_RCC_GPIOE_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPEEN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPEEN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_GPIOE_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_IOPERST))
   __HAL_RCC_GPIOE_IS_CLK_DISABLED()=((RCC->APB2ENR & (RCC_APB2ENR_IOPEEN)) == RESET)
   __HAL_RCC_GPIOE_IS_CLK_ENABLED()=((RCC->APB2ENR & (RCC_APB2ENR_IOPEEN)) != RESET)
   __HAL_RCC_GPIOE_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_IOPERST))
   __HAL_RCC_HSE_CONFIG(__STATE__)=do{ if ((__STATE__) == RCC_HSE_ON) { SET_BIT(RCC->CR, RCC_CR_HSEON); } else if ((__STATE__) == RCC_HSE_OFF) { CLEAR_BIT(RCC->CR, RCC_CR_HSEON); CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP); } else if ((__STATE__) == RCC_HSE_BYPASS) { SET_BIT(RCC->CR, RCC_CR_HSEBYP); SET_BIT(RCC->CR, RCC_CR_HSEON); } else { CLEAR_BIT(RCC->CR, RCC_CR_HSEON); CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP); } }while(0U)
   __HAL_RCC_HSE_GET_PREDIV()=READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE)
   __HAL_RCC_HSE_PREDIV_CONFIG(__HSE_PREDIV_VALUE__)=MODIFY_REG(RCC->CFGR,RCC_CFGR_PLLXTPRE, (uint32_t)(__HSE_PREDIV_VALUE__))
   __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(_HSICALIBRATIONVALUE_)=(MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (uint32_t)(_HSICALIBRATIONVALUE_) << RCC_CR_HSITRIM_Pos))
   __HAL_RCC_HSI_DISABLE()=(*(__IO uint32_t *) RCC_CR_HSION_BB = DISABLE)
   __HAL_RCC_HSI_ENABLE()=(*(__IO uint32_t *) RCC_CR_HSION_BB = ENABLE)
   __HAL_RCC_I2C1_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_I2C1EN))
   __HAL_RCC_I2C1_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_I2C1_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_I2C1RST))
   __HAL_RCC_I2C1_IS_CLK_DISABLED()=((RCC->APB1ENR & (RCC_APB1ENR_I2C1EN)) == RESET)
   __HAL_RCC_I2C1_IS_CLK_ENABLED()=((RCC->APB1ENR & (RCC_APB1ENR_I2C1EN)) != RESET)
   __HAL_RCC_I2C1_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_I2C1RST))
   __HAL_RCC_I2C2_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_I2C2EN))
   __HAL_RCC_I2C2_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C2EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C2EN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_I2C2_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_I2C2RST))
   __HAL_RCC_I2C2_IS_CLK_DISABLED()=((RCC->APB1ENR & (RCC_APB1ENR_I2C2EN)) == RESET)
   __HAL_RCC_I2C2_IS_CLK_ENABLED()=((RCC->APB1ENR & (RCC_APB1ENR_I2C2EN)) != RESET)
   __HAL_RCC_I2C2_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_I2C2RST))
   __HAL_RCC_LSE_CONFIG(__STATE__)=do{ if ((__STATE__) == RCC_LSE_ON) { SET_BIT(RCC->BDCR, RCC_BDCR_LSEON); } else if ((__STATE__) == RCC_LSE_OFF) { CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON); CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP); } else if ((__STATE__) == RCC_LSE_BYPASS) { SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP); SET_BIT(RCC->BDCR, RCC_BDCR_LSEON); } else { CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON); CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP); } }while(0U)
   __HAL_RCC_LSI_DISABLE()=(*(__IO uint32_t *) RCC_CSR_LSION_BB = DISABLE)
   __HAL_RCC_LSI_ENABLE()=(*(__IO uint32_t *) RCC_CSR_LSION_BB = ENABLE)
   __HAL_RCC_MCO1_CONFIG(__MCOCLKSOURCE__,__MCODIV__)=MODIFY_REG(RCC->CFGR, RCC_CFGR_MCO, (__MCOCLKSOURCE__))
   __HAL_RCC_PLL_CONFIG(__RCC_PLLSOURCE__,__PLLMUL__)=MODIFY_REG(RCC->CFGR, (RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL),((__RCC_PLLSOURCE__) | (__PLLMUL__) ))
   __HAL_RCC_PLL_DISABLE()=(*(__IO uint32_t *) RCC_CR_PLLON_BB = DISABLE)
   __HAL_RCC_PLL_ENABLE()=(*(__IO uint32_t *) RCC_CR_PLLON_BB = ENABLE)
   __HAL_RCC_PWR_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_PWREN))
   __HAL_RCC_PWR_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_PWR_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_PWRRST))
   __HAL_RCC_PWR_IS_CLK_DISABLED()=((RCC->APB1ENR & (RCC_APB1ENR_PWREN)) == RESET)
   __HAL_RCC_PWR_IS_CLK_ENABLED()=((RCC->APB1ENR & (RCC_APB1ENR_PWREN)) != RESET)
   __HAL_RCC_PWR_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_PWRRST))
   __HAL_RCC_RTC_CONFIG(__RTC_CLKSOURCE__)=MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, (__RTC_CLKSOURCE__))
   __HAL_RCC_RTC_DISABLE()=(*(__IO uint32_t *) RCC_BDCR_RTCEN_BB = DISABLE)
   __HAL_RCC_RTC_ENABLE()=(*(__IO uint32_t *) RCC_BDCR_RTCEN_BB = ENABLE)
   __HAL_RCC_SPI1_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_SPI1EN))
   __HAL_RCC_SPI1_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_SPI1EN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_SPI1EN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_SPI1_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_SPI1RST))
   __HAL_RCC_SPI1_IS_CLK_DISABLED()=((RCC->APB2ENR & (RCC_APB2ENR_SPI1EN)) == RESET)
   __HAL_RCC_SPI1_IS_CLK_ENABLED()=((RCC->APB2ENR & (RCC_APB2ENR_SPI1EN)) != RESET)
   __HAL_RCC_SPI1_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_SPI1RST))
   __HAL_RCC_SPI2_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_SPI2EN))
   __HAL_RCC_SPI2_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_SPI2EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_SPI2EN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_SPI2_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_SPI2RST))
   __HAL_RCC_SPI2_IS_CLK_DISABLED()=((RCC->APB1ENR & (RCC_APB1ENR_SPI2EN)) == RESET)
   __HAL_RCC_SPI2_IS_CLK_ENABLED()=((RCC->APB1ENR & (RCC_APB1ENR_SPI2EN)) != RESET)
   __HAL_RCC_SPI2_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_SPI2RST))
   __HAL_RCC_SRAM_CLK_DISABLE()=(RCC->AHBENR &= ~(RCC_AHBENR_SRAMEN))
   __HAL_RCC_SRAM_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHBENR, RCC_AHBENR_SRAMEN); tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_SRAMEN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_SRAM_IS_CLK_DISABLED()=((RCC->AHBENR & (RCC_AHBENR_SRAMEN)) == RESET)
   __HAL_RCC_SRAM_IS_CLK_ENABLED()=((RCC->AHBENR & (RCC_AHBENR_SRAMEN)) != RESET)
   __HAL_RCC_SYSCFG_CLK_DISABLE=__HAL_RCC_AFIO_CLK_DISABLE
   __HAL_RCC_SYSCFG_CLK_ENABLE=__HAL_RCC_AFIO_CLK_ENABLE
   __HAL_RCC_SYSCFG_FORCE_RESET=__HAL_RCC_AFIO_FORCE_RESET
   __HAL_RCC_SYSCFG_RELEASE_RESET=__HAL_RCC_AFIO_RELEASE_RESET
   __HAL_RCC_SYSCLK_CONFIG(__SYSCLKSOURCE__)=MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, (__SYSCLKSOURCE__))
   __HAL_RCC_TIM1_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_TIM1EN))
   __HAL_RCC_TIM1_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM1EN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM1EN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_TIM1_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_TIM1RST))
   __HAL_RCC_TIM1_IS_CLK_DISABLED()=((RCC->APB2ENR & (RCC_APB2ENR_TIM1EN)) == RESET)
   __HAL_RCC_TIM1_IS_CLK_ENABLED()=((RCC->APB2ENR & (RCC_APB2ENR_TIM1EN)) != RESET)
   __HAL_RCC_TIM1_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_TIM1RST))
   __HAL_RCC_TIM2_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_TIM2EN))
   __HAL_RCC_TIM2_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM2EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM2EN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_TIM2_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_TIM2RST))
   __HAL_RCC_TIM2_IS_CLK_DISABLED()=((RCC->APB1ENR & (RCC_APB1ENR_TIM2EN)) == RESET)
   __HAL_RCC_TIM2_IS_CLK_ENABLED()=((RCC->APB1ENR & (RCC_APB1ENR_TIM2EN)) != RESET)
   __HAL_RCC_TIM2_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM2RST))
   __HAL_RCC_TIM3_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_TIM3EN))
   __HAL_RCC_TIM3_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM3EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM3EN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_TIM3_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_TIM3RST))
   __HAL_RCC_TIM3_IS_CLK_DISABLED()=((RCC->APB1ENR & (RCC_APB1ENR_TIM3EN)) == RESET)
   __HAL_RCC_TIM3_IS_CLK_ENABLED()=((RCC->APB1ENR & (RCC_APB1ENR_TIM3EN)) != RESET)
   __HAL_RCC_TIM3_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM3RST))
   __HAL_RCC_TIM4_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_TIM4EN))
   __HAL_RCC_TIM4_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM4EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM4EN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_TIM4_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_TIM4RST))
   __HAL_RCC_TIM4_IS_CLK_DISABLED()=((RCC->APB1ENR & (RCC_APB1ENR_TIM4EN)) == RESET)
   __HAL_RCC_TIM4_IS_CLK_ENABLED()=((RCC->APB1ENR & (RCC_APB1ENR_TIM4EN)) != RESET)
   __HAL_RCC_TIM4_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM4RST))
   __HAL_RCC_USART1_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_USART1EN))
   __HAL_RCC_USART1_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_USART1EN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_USART1EN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_USART1_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_USART1RST))
   __HAL_RCC_USART1_IS_CLK_DISABLED()=((RCC->APB2ENR & (RCC_APB2ENR_USART1EN)) == RESET)
   __HAL_RCC_USART1_IS_CLK_ENABLED()=((RCC->APB2ENR & (RCC_APB2ENR_USART1EN)) != RESET)
   __HAL_RCC_USART1_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_USART1RST))
   __HAL_RCC_USART2_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_USART2EN))
   __HAL_RCC_USART2_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_USART2EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USART2EN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_USART2_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_USART2RST))
   __HAL_RCC_USART2_IS_CLK_DISABLED()=((RCC->APB1ENR & (RCC_APB1ENR_USART2EN)) == RESET)
   __HAL_RCC_USART2_IS_CLK_ENABLED()=((RCC->APB1ENR & (RCC_APB1ENR_USART2EN)) != RESET)
   __HAL_RCC_USART2_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_USART2RST))
   __HAL_RCC_USART3_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_USART3EN))
   __HAL_RCC_USART3_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_USART3EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USART3EN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_USART3_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_USART3RST))
   __HAL_RCC_USART3_IS_CLK_DISABLED()=((RCC->APB1ENR & (RCC_APB1ENR_USART3EN)) == RESET)
   __HAL_RCC_USART3_IS_CLK_ENABLED()=((RCC->APB1ENR & (RCC_APB1ENR_USART3EN)) != RESET)
   __HAL_RCC_USART3_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_USART3RST))
   __HAL_RCC_USB_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_USBEN))
   __HAL_RCC_USB_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_USBEN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USBEN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_USB_CONFIG(__USBCLKSOURCE__)=MODIFY_REG(RCC->CFGR, RCC_CFGR_USBPRE, (uint32_t)(__USBCLKSOURCE__))
   __HAL_RCC_USB_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_USBRST))
   __HAL_RCC_USB_IS_CLK_DISABLED()=((RCC->APB1ENR & (RCC_APB1ENR_USBEN)) == RESET)
   __HAL_RCC_USB_IS_CLK_ENABLED()=((RCC->APB1ENR & (RCC_APB1ENR_USBEN)) != RESET)
   __HAL_RCC_USB_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_USBRST))
   __HAL_RCC_WWDG_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_WWDGEN))
   __HAL_RCC_WWDG_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_WWDGEN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_WWDGEN); UNUSED(tmpreg); } while(0U)
   __HAL_RCC_WWDG_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_WWDGRST))
   __HAL_RCC_WWDG_IS_CLK_DISABLED()=((RCC->APB1ENR & (RCC_APB1ENR_WWDGEN)) == RESET)
   __HAL_RCC_WWDG_IS_CLK_ENABLED()=((RCC->APB1ENR & (RCC_APB1ENR_WWDGEN)) != RESET)
   __HAL_RCC_WWDG_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_WWDGRST))
   __HAL_RESET_HANDLE_STATE(__HANDLE__)=((__HANDLE__)->State = 0U)
   __HAL_TIM_CLEAR_FLAG(__HANDLE__,__FLAG__)=((__HANDLE__)->Instance->SR = ~(__FLAG__))
   __HAL_TIM_CLEAR_IT(__HANDLE__,__INTERRUPT__)=((__HANDLE__)->Instance->SR = ~(__INTERRUPT__))
   __HAL_TIM_DISABLE(__HANDLE__)=do { if (((__HANDLE__)->Instance->CCER & TIM_CCER_CCxE_MASK) == 0U) { if(((__HANDLE__)->Instance->CCER & TIM_CCER_CCxNE_MASK) == 0U) { (__HANDLE__)->Instance->CR1 &= ~(TIM_CR1_CEN); } } } while(0U)
   __HAL_TIM_DISABLE_DMA(__HANDLE__,__DMA__)=((__HANDLE__)->Instance->DIER &= ~(__DMA__))
   __HAL_TIM_DISABLE_IT(__HANDLE__,__INTERRUPT__)=((__HANDLE__)->Instance->DIER &= ~(__INTERRUPT__))
   __HAL_TIM_DISABLE_OCxPRELOAD(__HANDLE__,__CHANNEL__)=(((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCMR1 &= (uint16_t)~TIM_CCMR1_OC1PE) : ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCMR1 &= (uint16_t)~TIM_CCMR1_OC2PE) : ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCMR2 &= (uint16_t)~TIM_CCMR2_OC3PE) : ((__HANDLE__)->Instance->CCMR2 &= (uint16_t)~TIM_CCMR2_OC4PE))
   __HAL_TIM_ENABLE(__HANDLE__)=((__HANDLE__)->Instance->CR1|=(TIM_CR1_CEN))
   __HAL_TIM_ENABLE_DMA(__HANDLE__,__DMA__)=((__HANDLE__)->Instance->DIER |= (__DMA__))
   __HAL_TIM_ENABLE_IT(__HANDLE__,__INTERRUPT__)=((__HANDLE__)->Instance->DIER |= (__INTERRUPT__))
   __HAL_TIM_ENABLE_OCxPRELOAD(__HANDLE__,__CHANNEL__)=(((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCMR1 |= TIM_CCMR1_OC1PE) : ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCMR1 |= TIM_CCMR1_OC2PE) : ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCMR2 |= TIM_CCMR2_OC3PE) : ((__HANDLE__)->Instance->CCMR2 |= TIM_CCMR2_OC4PE))
   __HAL_TIM_GET_AUTORELOAD(__HANDLE__)=((__HANDLE__)->Instance->ARR)
   __HAL_TIM_GET_CLOCKDIVISION(__HANDLE__)=((__HANDLE__)->Instance->CR1 & TIM_CR1_CKD)
   __HAL_TIM_GET_COMPARE(__HANDLE__,__CHANNEL__)=(*(__IO uint32_t *)(&((__HANDLE__)->Instance->CCR1) + ((__CHANNEL__) >> 2U)))
   __HAL_TIM_GET_COUNTER(__HANDLE__)=((__HANDLE__)->Instance->CNT)
   __HAL_TIM_GET_FLAG(__HANDLE__,__FLAG__)=(((__HANDLE__)->Instance->SR &(__FLAG__)) == (__FLAG__))
   __HAL_TIM_GET_ICPRESCALER(__HANDLE__,__CHANNEL__)=(((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCMR1 & TIM_CCMR1_IC1PSC) : ((__CHANNEL__) == TIM_CHANNEL_2) ? (((__HANDLE__)->Instance->CCMR1 & TIM_CCMR1_IC2PSC) >> 8U) : ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCMR2 & TIM_CCMR2_IC3PSC) : (((__HANDLE__)->Instance->CCMR2 & TIM_CCMR2_IC4PSC)) >> 8U)
   __HAL_TIM_GET_IT_SOURCE(__HANDLE__,__INTERRUPT__)=((((__HANDLE__)->Instance->DIER & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET)
   __HAL_TIM_IS_TIM_COUNTING_DOWN(__HANDLE__)=(((__HANDLE__)->Instance->CR1 & (TIM_CR1_DIR)) == (TIM_CR1_DIR))
   __HAL_TIM_MOE_DISABLE(__HANDLE__)=do { if (((__HANDLE__)->Instance->CCER & TIM_CCER_CCxE_MASK) == 0U) { if(((__HANDLE__)->Instance->CCER & TIM_CCER_CCxNE_MASK) == 0U) { (__HANDLE__)->Instance->BDTR &= ~(TIM_BDTR_MOE); } } } while(0U)
   __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(__HANDLE__)=(__HANDLE__)->Instance->BDTR &= ~(TIM_BDTR_MOE)
   __HAL_TIM_MOE_ENABLE(__HANDLE__)=((__HANDLE__)->Instance->BDTR|=(TIM_BDTR_MOE))
   __HAL_TIM_RESET_HANDLE_STATE(__HANDLE__)=((__HANDLE__)->State = HAL_TIM_STATE_RESET)
   __HAL_TIM_SET_AUTORELOAD(__HANDLE__,__AUTORELOAD__)=do{ (__HANDLE__)->Instance->ARR = (__AUTORELOAD__); (__HANDLE__)->Init.Period = (__AUTORELOAD__); } while(0U)
   __HAL_TIM_SET_CAPTUREPOLARITY(__HANDLE__,__CHANNEL__,__POLARITY__)=do{ TIM_RESET_CAPTUREPOLARITY((__HANDLE__), (__CHANNEL__)); TIM_SET_CAPTUREPOLARITY((__HANDLE__), (__CHANNEL__), (__POLARITY__)); }while(0U)
   __HAL_TIM_SET_CLOCKDIVISION(__HANDLE__,__CKD__)=do{ (__HANDLE__)->Instance->CR1 &= (uint16_t)(~TIM_CR1_CKD); (__HANDLE__)->Instance->CR1 |= (__CKD__); (__HANDLE__)->Init.ClockDivision = (__CKD__); } while(0U)
   __HAL_TIM_SET_COMPARE(__HANDLE__,__CHANNEL__,__COMPARE__)=(*(__IO uint32_t *)(&((__HANDLE__)->Instance->CCR1) + ((__CHANNEL__) >> 2U)) = (__COMPARE__))
   __HAL_TIM_SET_COUNTER(__HANDLE__,__COUNTER__)=((__HANDLE__)->Instance->CNT = (__COUNTER__))
   __HAL_TIM_SET_ICPRESCALER(__HANDLE__,__CHANNEL__,__ICPSC__)=do{ TIM_RESET_ICPRESCALERVALUE((__HANDLE__), (__CHANNEL__)); TIM_SET_ICPRESCALERVALUE((__HANDLE__), (__CHANNEL__), (__ICPSC__)); } while(0U)
   __HAL_TIM_SET_PRESCALER(__HANDLE__,__PRESC__)=((__HANDLE__)->Instance->PSC = (__PRESC__))
   __HAL_TIM_URS_DISABLE(__HANDLE__)=((__HANDLE__)->Instance->CR1&=~(TIM_CR1_URS))
   __HAL_TIM_URS_ENABLE(__HANDLE__)=((__HANDLE__)->Instance->CR1|= (TIM_CR1_URS))
   __HAL_UNLOCK(__HANDLE__)=do{ (__HANDLE__)->Lock = HAL_UNLOCKED; }while (0U)
   __has_attribute(x)=0
   __has_builtin(x)=0
   __has_extension=__has_feature
   __has_feature(x)=0
   __have_long32=1
   __have_longlong64=1
   __hidden=__attribute__((__visibility__("hidden")))
   __htonl(_x)=__bswap32(_x)
   __htons(_x)=__bswap16(_x)
   __I=volatile const
   __IEEE_LITTLE_ENDIAN=
   __IM=volatile const
   __imag__=(int)
   __IMPORT=
   __INLINE=inline
   __INT16="h"
   __int16_t_defined=1
   __int20=+2
   __INT32="l"
   __int32_t_defined=1
   __INT64="ll"
   __int64_t_defined=1
   __INT8="hh"
   __int8_t_defined=1
   __int_fast16_t_defined=1
   __int_fast32_t_defined=1
   __int_fast64_t_defined=1
   __int_fast8_t_defined=1
   __int_least16_t_defined=1
   __int_least32_t_defined=1
   __int_least64_t_defined=1
   __int_least8_t_defined=1
   __INT_WCHAR_T_H=
   __IO=volatile
   __IOM=volatile
   __ISO_C_VISIBLE=2011
   __LARGEFILE_VISIBLE=0
   __LEAST16="h"
   __LEAST32="l"
   __LEAST64="ll"
   __LEAST8="hh"
   __LINE__=1
   __LL_DMA_GET_CHANNEL(__CHANNEL_INSTANCE__)=(((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel1)) ? LL_DMA_CHANNEL_1 : ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel2)) ? LL_DMA_CHANNEL_2 : ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel3)) ? LL_DMA_CHANNEL_3 : ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel4)) ? LL_DMA_CHANNEL_4 : ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel5)) ? LL_DMA_CHANNEL_5 : ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel6)) ? LL_DMA_CHANNEL_6 : LL_DMA_CHANNEL_7)
   __LL_DMA_GET_CHANNEL_INSTANCE(__DMA_INSTANCE__,__CHANNEL__)=((((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_1))) ? DMA1_Channel1 : (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_2))) ? DMA1_Channel2 : (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_3))) ? DMA1_Channel3 : (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_4))) ? DMA1_Channel4 : (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_5))) ? DMA1_Channel5 : (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_6))) ? DMA1_Channel6 : DMA1_Channel7)
   __LL_DMA_GET_INSTANCE(__CHANNEL_INSTANCE__)=(DMA1)
   __LL_RCC_CALC_HCLK_FREQ(__SYSCLKFREQ__,__AHBPRESCALER__)=((__SYSCLKFREQ__) >> AHBPrescTable[((__AHBPRESCALER__) & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos])
   __LL_RCC_CALC_PCLK1_FREQ(__HCLKFREQ__,__APB1PRESCALER__)=((__HCLKFREQ__) >> APBPrescTable[(__APB1PRESCALER__) >> RCC_CFGR_PPRE1_Pos])
   __LL_RCC_CALC_PCLK2_FREQ(__HCLKFREQ__,__APB2PRESCALER__)=((__HCLKFREQ__) >> APBPrescTable[(__APB2PRESCALER__) >> RCC_CFGR_PPRE2_Pos])
   __LL_RCC_CALC_PLLCLK_FREQ(__INPUTFREQ__,__PLLMUL__)=((__INPUTFREQ__) * (((__PLLMUL__) >> RCC_CFGR_PLLMULL_Pos) + 2U))
   __LL_TIM_CALC_ARR(__TIMCLK__,__PSC__,__FREQ__)=(((__TIMCLK__)/((__PSC__) + 1U)) >= (__FREQ__)) ? ((__TIMCLK__)/((__FREQ__) * ((__PSC__) + 1U)) - 1U) : 0U
   __LL_TIM_CALC_DEADTIME(__TIMCLK__,__CKD__,__DT__)=( (((uint64_t)((__DT__)*1000U)) < ((DT_DELAY_1+1U) * TIM_CALC_DTS((__TIMCLK__), (__CKD__)))) ? (uint8_t)(((uint64_t)((__DT__)*1000U) / TIM_CALC_DTS((__TIMCLK__), (__CKD__))) & DT_DELAY_1) : (((uint64_t)((__DT__)*1000U)) < (64U + (DT_DELAY_2+1U)) * 2U * TIM_CALC_DTS((__TIMCLK__), (__CKD__))) ? (uint8_t)(DT_RANGE_2 | ((uint8_t)((uint8_t)((((uint64_t)((__DT__)*1000U))/ TIM_CALC_DTS((__TIMCLK__), (__CKD__))) >> 1U) - (uint8_t) 64) & DT_DELAY_2)) : (((uint64_t)((__DT__)*1000U)) < (32U + (DT_DELAY_3+1U)) * 8U * TIM_CALC_DTS((__TIMCLK__), (__CKD__))) ? (uint8_t)(DT_RANGE_3 | ((uint8_t)((uint8_t)(((((uint64_t)(__DT__)*1000U))/ TIM_CALC_DTS((__TIMCLK__), (__CKD__))) >> 3U) - (uint8_t) 32) & DT_DELAY_3)) : (((uint64_t)((__DT__)*1000U)) < (32U + (DT_DELAY_4+1U)) * 16U * TIM_CALC_DTS((__TIMCLK__), (__CKD__))) ? (uint8_t)(DT_RANGE_4 | ((uint8_t)((uint8_t)(((((uint64_t)(__DT__)*1000U))/ TIM_CALC_DTS((__TIMCLK__), (__CKD__))) >> 4U) - (uint8_t) 32) & DT_DELAY_4)) : 0U)
   __LL_TIM_CALC_DELAY(__TIMCLK__,__PSC__,__DELAY__)=((uint32_t)(((uint64_t)(__TIMCLK__) * (uint64_t)(__DELAY__)) / ((uint64_t)1000000U * (uint64_t)((__PSC__) + 1U))))
   __LL_TIM_CALC_PSC(__TIMCLK__,__CNTCLK__)=((__TIMCLK__) >= (__CNTCLK__)) ? (uint32_t)((__TIMCLK__)/(__CNTCLK__) - 1U) : 0U
   __LL_TIM_CALC_PULSE(__TIMCLK__,__PSC__,__DELAY__,__PULSE__)=((uint32_t)(__LL_TIM_CALC_DELAY((__TIMCLK__), (__PSC__), (__PULSE__)) + __LL_TIM_CALC_DELAY((__TIMCLK__), (__PSC__), (__DELAY__))))
   __LL_TIM_GET_ICPSC_RATIO(__ICPSC__)=((uint32_t)(0x01U << (((__ICPSC__) >> 16U) >> TIM_CCMR1_IC1PSC_Pos)))
   __LL_USART_DIVFRAQ_SAMPLING16(__PERIPHCLK__,__BAUDRATE__)=(((__LL_USART_DIV_SAMPLING16_100((__PERIPHCLK__), (__BAUDRATE__)) - (__LL_USART_DIVMANT_SAMPLING16((__PERIPHCLK__), (__BAUDRATE__)) * 100)) * 16 + 50) / 100)
   __LL_USART_DIVFRAQ_SAMPLING8(__PERIPHCLK__,__BAUDRATE__)=(((__LL_USART_DIV_SAMPLING8_100((__PERIPHCLK__), (__BAUDRATE__)) - (__LL_USART_DIVMANT_SAMPLING8((__PERIPHCLK__), (__BAUDRATE__)) * 100)) * 8 + 50) / 100)
   __LL_USART_DIVMANT_SAMPLING16(__PERIPHCLK__,__BAUDRATE__)=(__LL_USART_DIV_SAMPLING16_100((__PERIPHCLK__), (__BAUDRATE__))/100)
   __LL_USART_DIVMANT_SAMPLING8(__PERIPHCLK__,__BAUDRATE__)=(__LL_USART_DIV_SAMPLING8_100((__PERIPHCLK__), (__BAUDRATE__))/100)
   __LL_USART_DIV_SAMPLING16(__PERIPHCLK__,__BAUDRATE__)=(((__LL_USART_DIVMANT_SAMPLING16((__PERIPHCLK__), (__BAUDRATE__)) << 4) + (__LL_USART_DIVFRAQ_SAMPLING16((__PERIPHCLK__), (__BAUDRATE__)) & 0xF0)) + (__LL_USART_DIVFRAQ_SAMPLING16((__PERIPHCLK__), (__BAUDRATE__)) & 0x0F))
   __LL_USART_DIV_SAMPLING16_100(__PERIPHCLK__,__BAUDRATE__)=(((__PERIPHCLK__)*25)/(4*(__BAUDRATE__)))
   __LL_USART_DIV_SAMPLING8(__PERIPHCLK__,__BAUDRATE__)=(((__LL_USART_DIVMANT_SAMPLING8((__PERIPHCLK__), (__BAUDRATE__)) << 4) + ((__LL_USART_DIVFRAQ_SAMPLING8((__PERIPHCLK__), (__BAUDRATE__)) & 0xF8) << 1)) + (__LL_USART_DIVFRAQ_SAMPLING8((__PERIPHCLK__), (__BAUDRATE__)) & 0x07))
   __LL_USART_DIV_SAMPLING8_100(__PERIPHCLK__,__BAUDRATE__)=(((__PERIPHCLK__)*25)/(2*(__BAUDRATE__)))
   __lockable=__lock_annotate(lockable)
   __locks_exclusive(...)=__lock_annotate(exclusive_lock_function(__VA_ARGS__))
   __locks_shared(...)=__lock_annotate(shared_lock_function(__VA_ARGS__))
   __lock_acquire(lock)=__retarget_lock_acquire(lock)
   __lock_acquire_recursive(lock)=__retarget_lock_acquire_recursive(lock)
   __lock_annotate(x)=
   __lock_close(lock)=__retarget_lock_close(lock)
   __lock_close_recursive(lock)=__retarget_lock_close_recursive(lock)
   __LOCK_INIT(class,lock)=extern struct __lock __lock_ ## lock; class _LOCK_T lock = &__lock_ ## lock
   __lock_init(lock)=__retarget_lock_init(&lock)
   __LOCK_INIT_RECURSIVE(class,lock)=__LOCK_INIT(class,lock)
   __lock_init_recursive(lock)=__retarget_lock_init_recursive(&lock)
   __lock_release(lock)=__retarget_lock_release(lock)
   __lock_release_recursive(lock)=__retarget_lock_release_recursive(lock)
   __lock_try_acquire(lock)=__retarget_lock_try_acquire(lock)
   __lock_try_acquire_recursive(lock)=__retarget_lock_try_acquire_recursive(lock)
   __Long=long
   __long_double_t=long double
   __MACHINE_ENDIAN_H__=
   __MAIN_H=
   __malloc_like=__attribute__((__malloc__))
   __MISC_VISIBLE=1
   __MPU_PRESENT=0U
   __need_NULL=
   __need_size_t=
   __need_wint_t=
   __need___va_list=
   __NEWLIB_H__=1
   __NEWLIB_MINOR__=5
   __NEWLIB_PATCHLEVEL__=0
   __NEWLIB__=2
   __NOINLINE=__attribute__ ( (noinline) )
   __noinline=__attribute__ ((__noinline__))
   __nonnull(x)=__attribute__((__nonnull__(x)))
   __nonnull_all=__attribute__((__nonnull__))
   __no_lock_analysis=__lock_annotate(no_thread_safety_analysis)
   __ntohl(_x)=__bswap32(_x)
   __ntohs(_x)=__bswap16(_x)
   __null=(void *)0
   __NVIC_PRIO_BITS=4U
   __O=volatile
   __offsetof(type,field)=offsetof(type, field)
   __offsetof__(x)=(x)
   __OM=volatile
   __P(protos)=protos
   __packed=__attribute__((__packed__))
   __PMT(args)=args
   __POSIX_VISIBLE=200809
   __predict_false(exp)=__builtin_expect((exp), 0)
   __predict_true(exp)=__builtin_expect((exp), 1)
   __printf0like(fmtarg,firstvararg)=
   __printflike(fmtarg,firstvararg)=__attribute__((__format__ (__printf__, fmtarg, firstvararg)))
   __PTRDIFF_T=
   __ptrvalue=
   __ptr_t=void *
   __pt_guarded_by(x)=__lock_annotate(pt_guarded_by(x))
   __pure2=__attribute__((__const__))
   __pure=__attribute__((__pure__))
   __RAM_FUNC=__attribute__((section(".RamFunc")))
   __RAND_MAX=0x7fffffff
   __rangeof(type,start,end)=(__offsetof(type, end) - __offsetof(type, start))
   __RCSID(s)=struct __hack
   __RCSID_SOURCE(s)=struct __hack
   __real__=(int)
   __reent_assert(x)=((void)0)
   __requires_exclusive(...)=__lock_annotate(exclusive_locks_required(__VA_ARGS__))
   __requires_shared(...)=__lock_annotate(shared_locks_required(__VA_ARGS__))
   __requires_unlocked(...)=__lock_annotate(locks_excluded(__VA_ARGS__))
   __restrict=restrict
   __result_use_check=__attribute__((__warn_unused_result__))
   __returns_twice=__attribute__((__returns_twice__))
   __SAPP=0x0100
   __scanflike(fmtarg,firstvararg)=__attribute__((__format__ (__scanf__, fmtarg, firstvararg)))
   __SCCSID(s)=struct __hack
   __sclearerr(p)=((void)((p)->_flags &= ~(__SERR|__SEOF)))
   __section(x)=__attribute__((__section__(x)))
   __sentinel=__attribute__((__sentinel__))
   __SEOF=0x0020
   __SERR=0x0040
   __sfeof(p)=((int)(((p)->_flags & __SEOF) != 0))
   __sferror(p)=((int)(((p)->_flags & __SERR) != 0))
   __sfileno(p)=((p)->_file)
   __sgetc_r(__ptr,__p)=__sgetc_raw_r(__ptr, __p)
   __sgetc_raw_r(__ptr,__f)=(--(__f)->_r < 0 ? __srget_r(__ptr, __f) : (int)(*(__f)->_p++))
   __signed=signed
   __SIZE_T=
   __size_t__=
   __SL64=0x8000
   __SLBF=0x0001
   __SMBF=0x0080
   __SNBF=0x0002
   __SNLK=0x0001
   __SNPT=0x0800
   __SOFF=0x1000
   __SOPT=0x0400
   __SORD=0x2000
   __SRD=0x0004
   __SRW=0x0010
   __SSAT(ARG1,ARG2)=({ uint32_t __RES, __ARG1 = (ARG1); __ASM ("ssat %0, %1, %2" : "=r" (__RES) : "I" (ARG2), "r" (__ARG1) ); __RES; })
   __SSTR=0x0200
   __STATIC_INLINE=static inline
   __stdcall=
   __STDINT_EXP(x)=__##x##__
   __STM32F103xB_H=
   __STM32F1XX_H=
   __STM32F1xx_HAL_CONF_H=
   __STM32F1xx_HAL_CORTEX_H=
   __STM32F1xx_HAL_DEF=
   __STM32F1xx_HAL_DMA_EX_H=
   __STM32F1xx_HAL_DMA_H=
   __STM32F1xx_HAL_FLASH_EX_H=
   __STM32F1xx_HAL_FLASH_H=
   __STM32F1xx_HAL_GPIO_EX_H=
   __STM32F1xx_HAL_GPIO_H=
   __STM32F1xx_HAL_H=
   __STM32F1xx_HAL_PWR_H=
   __STM32F1xx_HAL_RCC_EX_H=
   __STM32F1xx_HAL_RCC_H=
   __STM32F1xx_HAL_TIM_EX_H=
   __STM32F1xx_HAL_TIM_H=
   __STM32F1xx_IT_H=
   __STM32F1xx_LL_BUS_H=
   __STM32F1xx_LL_CORTEX_H=
   __STM32F1xx_LL_CRC_H=
   __STM32F1xx_LL_DMA_H=
   __STM32F1xx_LL_EXTI_H=
   __STM32F1xx_LL_GPIO_H=
   __STM32F1xx_LL_PWR_H=
   __STM32F1xx_LL_RCC_H=
   __STM32F1xx_LL_SYSTEM_H=
   __STM32F1xx_LL_TIM_H=
   __STM32F1xx_LL_USART_H=
   __STM32F1xx_LL_UTILS_H=
   __STM32F1_CMSIS_VERSION=((__STM32F1_CMSIS_VERSION_MAIN << 24) |(__STM32F1_CMSIS_VERSION_SUB1 << 16) |(__STM32F1_CMSIS_VERSION_SUB2 << 8 ) |(__STM32F1_CMSIS_VERSION_RC))
   __STM32F1_CMSIS_VERSION_MAIN=(0x04)
   __STM32F1_CMSIS_VERSION_RC=(0x00)
   __STM32F1_CMSIS_VERSION_SUB1=(0x02)
   __STM32F1_CMSIS_VERSION_SUB2=(0x00)
   __strfmonlike(fmtarg,firstvararg)=__attribute__((__format__ (__strfmon__, fmtarg, firstvararg)))
   __strftimelike(fmtarg,firstvararg)=__attribute__((__format__ (__strftime__, fmtarg, firstvararg)))
   __STRING(x)=#x
   __strong_reference(sym,aliassym)=extern __typeof (sym) aliassym __attribute__ ((__alias__ (#sym)))
   __SVID_VISIBLE=1
   __SWID=0x2000
   __SWR=0x0008
   __sym_compat(sym,impl,verid)=__asm__(".symver " #impl ", " #sym "@" #verid)
   __sym_default(sym,impl,verid)=__asm__(".symver " #impl ", " #sym "@@" #verid)
   __SYSTEM_STM32F10X_H=
   __SYS_CONFIG_H__=
   __SYS_LOCK_H__=
   __thread=
   __THROW=
   __timer_t_defined=
   __time_t_defined=
   __TIME__="11:45:00"
   __trylocks_exclusive(...)=__lock_annotate(exclusive_trylock_function(__VA_ARGS__))
   __trylocks_shared(...)=__lock_annotate(shared_trylock_function(__VA_ARGS__))
   __unbounded=
   __unlocks(...)=__lock_annotate(unlock_function(__VA_ARGS__))
   __unreachable()=__builtin_unreachable()
   __unused=__attribute__((__unused__))
   __USAT(ARG1,ARG2)=({ uint32_t __RES, __ARG1 = (ARG1); __ASM ("usat %0, %1, %2" : "=r" (__RES) : "I" (ARG2), "r" (__ARG1) ); __RES; })
   __used=__attribute__((__used__))
   __u_char_defined=
   __u_int_defined=
   __u_long_defined=
   __u_short_defined=
   __VALIST=__gnuc_va_list
   __Vendor_SysTickConfig=0U
   __volatile=volatile
   __warn_references(sym,msg)=__asm__(".section .gnu.warning." #sym); __asm__(".asciz \"" msg "\""); __asm__(".previous")
   __WCHAR_T=
   __wchar_t__=
   __weak_reference(sym,alias)=__asm__(".weak " #alias); __asm__(".equ " #alias ", " #sym)
   __weak_symbol=__attribute__((__weak__))
   __XSI_VISIBLE=0
   __XSTRING(x)=__STRING(x)
   ___int16_t_defined=1
   ___int32_t_defined=1
   ___int64_t_defined=1
   ___int8_t_defined=1
   ___int_least16_t_defined=1
   ___int_least32_t_defined=1
   ___int_least64_t_defined=1
   ___int_least8_t_defined=1
   ___int_ptrdiff_t_h=
   ___int_size_t_h=
   ___int_wchar_t_h=

Written on Tue Dec 25 11:45:00 JST 2018
