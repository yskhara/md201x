
md201x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bcc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  08009ce0  08009ce0  00019ce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a2c4  0800a2c4  0001a2c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800a2cc  0800a2cc  0001a2cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a2d4  0800a2d4  0001a2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000724  20000000  0800a2d8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b18  20000728  0800a9fc  00020728  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20001240  0800a9fc  00021240  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020724  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021272  00000000  00000000  0002074d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004c36  00000000  00000000  000419bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007f61  00000000  00000000  000465f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000948  00000000  00000000  0004e558  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002048  00000000  00000000  0004eea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007cf7  00000000  00000000  00050ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000478a  00000000  00000000  00058bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005d369  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002e40  00000000  00000000  0005d3e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      000000df  00000000  00000000  00060228  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000728 	.word	0x20000728
 800012c:	00000000 	.word	0x00000000
 8000130:	08009cc4 	.word	0x08009cc4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000072c 	.word	0x2000072c
 800014c:	08009cc4 	.word	0x08009cc4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f092 0f00 	teq	r2, #0
 800045e:	bf14      	ite	ne
 8000460:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 7460 	mov.w	r4, #896	; 0x380
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000474:	e720      	b.n	80002b8 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_ul2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f04f 0500 	mov.w	r5, #0
 8000486:	e00a      	b.n	800049e <__aeabi_l2d+0x16>

08000488 <__aeabi_l2d>:
 8000488:	ea50 0201 	orrs.w	r2, r0, r1
 800048c:	bf08      	it	eq
 800048e:	4770      	bxeq	lr
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000496:	d502      	bpl.n	800049e <__aeabi_l2d+0x16>
 8000498:	4240      	negs	r0, r0
 800049a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800049e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004aa:	f43f aedc 	beq.w	8000266 <__adddf3+0xe6>
 80004ae:	f04f 0203 	mov.w	r2, #3
 80004b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b6:	bf18      	it	ne
 80004b8:	3203      	addne	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004c6:	f1c2 0320 	rsb	r3, r2, #32
 80004ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004d6:	ea40 000e 	orr.w	r0, r0, lr
 80004da:	fa21 f102 	lsr.w	r1, r1, r2
 80004de:	4414      	add	r4, r2
 80004e0:	e6c1      	b.n	8000266 <__adddf3+0xe6>
 80004e2:	bf00      	nop

080004e4 <__aeabi_dmul>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f2:	bf1d      	ittte	ne
 80004f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f8:	ea94 0f0c 	teqne	r4, ip
 80004fc:	ea95 0f0c 	teqne	r5, ip
 8000500:	f000 f8de 	bleq	80006c0 <__aeabi_dmul+0x1dc>
 8000504:	442c      	add	r4, r5
 8000506:	ea81 0603 	eor.w	r6, r1, r3
 800050a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800050e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000512:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000516:	bf18      	it	ne
 8000518:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800051c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000524:	d038      	beq.n	8000598 <__aeabi_dmul+0xb4>
 8000526:	fba0 ce02 	umull	ip, lr, r0, r2
 800052a:	f04f 0500 	mov.w	r5, #0
 800052e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000532:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000536:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053a:	f04f 0600 	mov.w	r6, #0
 800053e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000542:	f09c 0f00 	teq	ip, #0
 8000546:	bf18      	it	ne
 8000548:	f04e 0e01 	orrne.w	lr, lr, #1
 800054c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000550:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000554:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000558:	d204      	bcs.n	8000564 <__aeabi_dmul+0x80>
 800055a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800055e:	416d      	adcs	r5, r5
 8000560:	eb46 0606 	adc.w	r6, r6, r6
 8000564:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000568:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800056c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000570:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000574:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000578:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800057c:	bf88      	it	hi
 800057e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000582:	d81e      	bhi.n	80005c2 <__aeabi_dmul+0xde>
 8000584:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	bd70      	pop	{r4, r5, r6, pc}
 8000598:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800059c:	ea46 0101 	orr.w	r1, r6, r1
 80005a0:	ea40 0002 	orr.w	r0, r0, r2
 80005a4:	ea81 0103 	eor.w	r1, r1, r3
 80005a8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005ac:	bfc2      	ittt	gt
 80005ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005b6:	bd70      	popgt	{r4, r5, r6, pc}
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f04f 0e00 	mov.w	lr, #0
 80005c0:	3c01      	subs	r4, #1
 80005c2:	f300 80ab 	bgt.w	800071c <__aeabi_dmul+0x238>
 80005c6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ca:	bfde      	ittt	le
 80005cc:	2000      	movle	r0, #0
 80005ce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d2:	bd70      	pople	{r4, r5, r6, pc}
 80005d4:	f1c4 0400 	rsb	r4, r4, #0
 80005d8:	3c20      	subs	r4, #32
 80005da:	da35      	bge.n	8000648 <__aeabi_dmul+0x164>
 80005dc:	340c      	adds	r4, #12
 80005de:	dc1b      	bgt.n	8000618 <__aeabi_dmul+0x134>
 80005e0:	f104 0414 	add.w	r4, r4, #20
 80005e4:	f1c4 0520 	rsb	r5, r4, #32
 80005e8:	fa00 f305 	lsl.w	r3, r0, r5
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f205 	lsl.w	r2, r1, r5
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000600:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000604:	fa21 f604 	lsr.w	r6, r1, r4
 8000608:	eb42 0106 	adc.w	r1, r2, r6
 800060c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000610:	bf08      	it	eq
 8000612:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f1c4 040c 	rsb	r4, r4, #12
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f304 	lsl.w	r3, r0, r4
 8000624:	fa20 f005 	lsr.w	r0, r0, r5
 8000628:	fa01 f204 	lsl.w	r2, r1, r4
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000638:	f141 0100 	adc.w	r1, r1, #0
 800063c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000640:	bf08      	it	eq
 8000642:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000646:	bd70      	pop	{r4, r5, r6, pc}
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f205 	lsl.w	r2, r0, r5
 8000650:	ea4e 0e02 	orr.w	lr, lr, r2
 8000654:	fa20 f304 	lsr.w	r3, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea43 0302 	orr.w	r3, r3, r2
 8000660:	fa21 f004 	lsr.w	r0, r1, r4
 8000664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000668:	fa21 f204 	lsr.w	r2, r1, r4
 800066c:	ea20 0002 	bic.w	r0, r0, r2
 8000670:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f094 0f00 	teq	r4, #0
 8000684:	d10f      	bne.n	80006a6 <__aeabi_dmul+0x1c2>
 8000686:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068a:	0040      	lsls	r0, r0, #1
 800068c:	eb41 0101 	adc.w	r1, r1, r1
 8000690:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3c01      	subeq	r4, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1a6>
 800069a:	ea41 0106 	orr.w	r1, r1, r6
 800069e:	f095 0f00 	teq	r5, #0
 80006a2:	bf18      	it	ne
 80006a4:	4770      	bxne	lr
 80006a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006aa:	0052      	lsls	r2, r2, #1
 80006ac:	eb43 0303 	adc.w	r3, r3, r3
 80006b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b4:	bf08      	it	eq
 80006b6:	3d01      	subeq	r5, #1
 80006b8:	d0f7      	beq.n	80006aa <__aeabi_dmul+0x1c6>
 80006ba:	ea43 0306 	orr.w	r3, r3, r6
 80006be:	4770      	bx	lr
 80006c0:	ea94 0f0c 	teq	r4, ip
 80006c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c8:	bf18      	it	ne
 80006ca:	ea95 0f0c 	teqne	r5, ip
 80006ce:	d00c      	beq.n	80006ea <__aeabi_dmul+0x206>
 80006d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d4:	bf18      	it	ne
 80006d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006da:	d1d1      	bne.n	8000680 <__aeabi_dmul+0x19c>
 80006dc:	ea81 0103 	eor.w	r1, r1, r3
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	f04f 0000 	mov.w	r0, #0
 80006e8:	bd70      	pop	{r4, r5, r6, pc}
 80006ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ee:	bf06      	itte	eq
 80006f0:	4610      	moveq	r0, r2
 80006f2:	4619      	moveq	r1, r3
 80006f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f8:	d019      	beq.n	800072e <__aeabi_dmul+0x24a>
 80006fa:	ea94 0f0c 	teq	r4, ip
 80006fe:	d102      	bne.n	8000706 <__aeabi_dmul+0x222>
 8000700:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000704:	d113      	bne.n	800072e <__aeabi_dmul+0x24a>
 8000706:	ea95 0f0c 	teq	r5, ip
 800070a:	d105      	bne.n	8000718 <__aeabi_dmul+0x234>
 800070c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000710:	bf1c      	itt	ne
 8000712:	4610      	movne	r0, r2
 8000714:	4619      	movne	r1, r3
 8000716:	d10a      	bne.n	800072e <__aeabi_dmul+0x24a>
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000720:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd70      	pop	{r4, r5, r6, pc}
 800072e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000732:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000736:	bd70      	pop	{r4, r5, r6, pc}

08000738 <__aeabi_ddiv>:
 8000738:	b570      	push	{r4, r5, r6, lr}
 800073a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800073e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000742:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000746:	bf1d      	ittte	ne
 8000748:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800074c:	ea94 0f0c 	teqne	r4, ip
 8000750:	ea95 0f0c 	teqne	r5, ip
 8000754:	f000 f8a7 	bleq	80008a6 <__aeabi_ddiv+0x16e>
 8000758:	eba4 0405 	sub.w	r4, r4, r5
 800075c:	ea81 0e03 	eor.w	lr, r1, r3
 8000760:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000764:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000768:	f000 8088 	beq.w	800087c <__aeabi_ddiv+0x144>
 800076c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000770:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000774:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000778:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800077c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000780:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000784:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000788:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800078c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000790:	429d      	cmp	r5, r3
 8000792:	bf08      	it	eq
 8000794:	4296      	cmpeq	r6, r2
 8000796:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800079e:	d202      	bcs.n	80007a6 <__aeabi_ddiv+0x6e>
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	1ab6      	subs	r6, r6, r2
 80007a8:	eb65 0503 	sbc.w	r5, r5, r3
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80007be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c2:	bf22      	ittt	cs
 80007c4:	1ab6      	subcs	r6, r6, r2
 80007c6:	4675      	movcs	r5, lr
 80007c8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007cc:	085b      	lsrs	r3, r3, #1
 80007ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007da:	bf22      	ittt	cs
 80007dc:	1ab6      	subcs	r6, r6, r2
 80007de:	4675      	movcs	r5, lr
 80007e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f2:	bf22      	ittt	cs
 80007f4:	1ab6      	subcs	r6, r6, r2
 80007f6:	4675      	movcs	r5, lr
 80007f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	ebb6 0e02 	subs.w	lr, r6, r2
 8000806:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080a:	bf22      	ittt	cs
 800080c:	1ab6      	subcs	r6, r6, r2
 800080e:	4675      	movcs	r5, lr
 8000810:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000814:	ea55 0e06 	orrs.w	lr, r5, r6
 8000818:	d018      	beq.n	800084c <__aeabi_ddiv+0x114>
 800081a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800081e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000822:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000826:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800082e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000832:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000836:	d1c0      	bne.n	80007ba <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	d10b      	bne.n	8000856 <__aeabi_ddiv+0x11e>
 800083e:	ea41 0100 	orr.w	r1, r1, r0
 8000842:	f04f 0000 	mov.w	r0, #0
 8000846:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084a:	e7b6      	b.n	80007ba <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	bf04      	itt	eq
 8000852:	4301      	orreq	r1, r0
 8000854:	2000      	moveq	r0, #0
 8000856:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085a:	bf88      	it	hi
 800085c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000860:	f63f aeaf 	bhi.w	80005c2 <__aeabi_dmul+0xde>
 8000864:	ebb5 0c03 	subs.w	ip, r5, r3
 8000868:	bf04      	itt	eq
 800086a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800086e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000872:	f150 0000 	adcs.w	r0, r0, #0
 8000876:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000880:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000884:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000888:	bfc2      	ittt	gt
 800088a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800088e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000892:	bd70      	popgt	{r4, r5, r6, pc}
 8000894:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000898:	f04f 0e00 	mov.w	lr, #0
 800089c:	3c01      	subs	r4, #1
 800089e:	e690      	b.n	80005c2 <__aeabi_dmul+0xde>
 80008a0:	ea45 0e06 	orr.w	lr, r5, r6
 80008a4:	e68d      	b.n	80005c2 <__aeabi_dmul+0xde>
 80008a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008aa:	ea94 0f0c 	teq	r4, ip
 80008ae:	bf08      	it	eq
 80008b0:	ea95 0f0c 	teqeq	r5, ip
 80008b4:	f43f af3b 	beq.w	800072e <__aeabi_dmul+0x24a>
 80008b8:	ea94 0f0c 	teq	r4, ip
 80008bc:	d10a      	bne.n	80008d4 <__aeabi_ddiv+0x19c>
 80008be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c2:	f47f af34 	bne.w	800072e <__aeabi_dmul+0x24a>
 80008c6:	ea95 0f0c 	teq	r5, ip
 80008ca:	f47f af25 	bne.w	8000718 <__aeabi_dmul+0x234>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e72c      	b.n	800072e <__aeabi_dmul+0x24a>
 80008d4:	ea95 0f0c 	teq	r5, ip
 80008d8:	d106      	bne.n	80008e8 <__aeabi_ddiv+0x1b0>
 80008da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008de:	f43f aefd 	beq.w	80006dc <__aeabi_dmul+0x1f8>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e722      	b.n	800072e <__aeabi_dmul+0x24a>
 80008e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008ec:	bf18      	it	ne
 80008ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f2:	f47f aec5 	bne.w	8000680 <__aeabi_dmul+0x19c>
 80008f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fa:	f47f af0d 	bne.w	8000718 <__aeabi_dmul+0x234>
 80008fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000902:	f47f aeeb 	bne.w	80006dc <__aeabi_dmul+0x1f8>
 8000906:	e712      	b.n	800072e <__aeabi_dmul+0x24a>

08000908 <__gedf2>:
 8000908:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800090c:	e006      	b.n	800091c <__cmpdf2+0x4>
 800090e:	bf00      	nop

08000910 <__ledf2>:
 8000910:	f04f 0c01 	mov.w	ip, #1
 8000914:	e002      	b.n	800091c <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__cmpdf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000920:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000928:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800092c:	bf18      	it	ne
 800092e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000932:	d01b      	beq.n	800096c <__cmpdf2+0x54>
 8000934:	b001      	add	sp, #4
 8000936:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093a:	bf0c      	ite	eq
 800093c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000940:	ea91 0f03 	teqne	r1, r3
 8000944:	bf02      	ittt	eq
 8000946:	ea90 0f02 	teqeq	r0, r2
 800094a:	2000      	moveq	r0, #0
 800094c:	4770      	bxeq	lr
 800094e:	f110 0f00 	cmn.w	r0, #0
 8000952:	ea91 0f03 	teq	r1, r3
 8000956:	bf58      	it	pl
 8000958:	4299      	cmppl	r1, r3
 800095a:	bf08      	it	eq
 800095c:	4290      	cmpeq	r0, r2
 800095e:	bf2c      	ite	cs
 8000960:	17d8      	asrcs	r0, r3, #31
 8000962:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000966:	f040 0001 	orr.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000970:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000974:	d102      	bne.n	800097c <__cmpdf2+0x64>
 8000976:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097a:	d107      	bne.n	800098c <__cmpdf2+0x74>
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	d1d6      	bne.n	8000934 <__cmpdf2+0x1c>
 8000986:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098a:	d0d3      	beq.n	8000934 <__cmpdf2+0x1c>
 800098c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <__aeabi_cdrcmple>:
 8000994:	4684      	mov	ip, r0
 8000996:	4610      	mov	r0, r2
 8000998:	4662      	mov	r2, ip
 800099a:	468c      	mov	ip, r1
 800099c:	4619      	mov	r1, r3
 800099e:	4663      	mov	r3, ip
 80009a0:	e000      	b.n	80009a4 <__aeabi_cdcmpeq>
 80009a2:	bf00      	nop

080009a4 <__aeabi_cdcmpeq>:
 80009a4:	b501      	push	{r0, lr}
 80009a6:	f7ff ffb7 	bl	8000918 <__cmpdf2>
 80009aa:	2800      	cmp	r0, #0
 80009ac:	bf48      	it	mi
 80009ae:	f110 0f00 	cmnmi.w	r0, #0
 80009b2:	bd01      	pop	{r0, pc}

080009b4 <__aeabi_dcmpeq>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff fff4 	bl	80009a4 <__aeabi_cdcmpeq>
 80009bc:	bf0c      	ite	eq
 80009be:	2001      	moveq	r0, #1
 80009c0:	2000      	movne	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmplt>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffea 	bl	80009a4 <__aeabi_cdcmpeq>
 80009d0:	bf34      	ite	cc
 80009d2:	2001      	movcc	r0, #1
 80009d4:	2000      	movcs	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmple>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffe0 	bl	80009a4 <__aeabi_cdcmpeq>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpge>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffce 	bl	8000994 <__aeabi_cdrcmple>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpgt>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffc4 	bl	8000994 <__aeabi_cdrcmple>
 8000a0c:	bf34      	ite	cc
 8000a0e:	2001      	movcc	r0, #1
 8000a10:	2000      	movcs	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpun>:
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__aeabi_dcmpun+0x10>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d10a      	bne.n	8000a3e <__aeabi_dcmpun+0x26>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__aeabi_dcmpun+0x20>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_dcmpun+0x26>
 8000a38:	f04f 0000 	mov.w	r0, #0
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0001 	mov.w	r0, #1
 8000a42:	4770      	bx	lr

08000a44 <__aeabi_d2iz>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a4c:	d215      	bcs.n	8000a7a <__aeabi_d2iz+0x36>
 8000a4e:	d511      	bpl.n	8000a74 <__aeabi_d2iz+0x30>
 8000a50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a58:	d912      	bls.n	8000a80 <__aeabi_d2iz+0x3c>
 8000a5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a6e:	bf18      	it	ne
 8000a70:	4240      	negne	r0, r0
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d105      	bne.n	8000a8c <__aeabi_d2iz+0x48>
 8000a80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a84:	bf08      	it	eq
 8000a86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2uiz>:
 8000a94:	004a      	lsls	r2, r1, #1
 8000a96:	d211      	bcs.n	8000abc <__aeabi_d2uiz+0x28>
 8000a98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a9c:	d211      	bcs.n	8000ac2 <__aeabi_d2uiz+0x2e>
 8000a9e:	d50d      	bpl.n	8000abc <__aeabi_d2uiz+0x28>
 8000aa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa8:	d40e      	bmi.n	8000ac8 <__aeabi_d2uiz+0x34>
 8000aaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ab6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac6:	d102      	bne.n	8000ace <__aeabi_d2uiz+0x3a>
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000acc:	4770      	bx	lr
 8000ace:	f04f 0000 	mov.w	r0, #0
 8000ad2:	4770      	bx	lr

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b88:	f000 b97a 	b.w	8000e80 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	468c      	mov	ip, r1
 8000baa:	460e      	mov	r6, r1
 8000bac:	4604      	mov	r4, r0
 8000bae:	9d08      	ldr	r5, [sp, #32]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d150      	bne.n	8000c56 <__udivmoddi4+0xb2>
 8000bb4:	428a      	cmp	r2, r1
 8000bb6:	4617      	mov	r7, r2
 8000bb8:	d96c      	bls.n	8000c94 <__udivmoddi4+0xf0>
 8000bba:	fab2 fe82 	clz	lr, r2
 8000bbe:	f1be 0f00 	cmp.w	lr, #0
 8000bc2:	d00b      	beq.n	8000bdc <__udivmoddi4+0x38>
 8000bc4:	f1ce 0c20 	rsb	ip, lr, #32
 8000bc8:	fa01 f60e 	lsl.w	r6, r1, lr
 8000bcc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bd0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000bd4:	ea4c 0c06 	orr.w	ip, ip, r6
 8000bd8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bdc:	0c3a      	lsrs	r2, r7, #16
 8000bde:	fbbc f9f2 	udiv	r9, ip, r2
 8000be2:	b2bb      	uxth	r3, r7
 8000be4:	fb02 cc19 	mls	ip, r2, r9, ip
 8000be8:	fb09 fa03 	mul.w	sl, r9, r3
 8000bec:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8000bf0:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8000bf4:	45b2      	cmp	sl, r6
 8000bf6:	d90a      	bls.n	8000c0e <__udivmoddi4+0x6a>
 8000bf8:	19f6      	adds	r6, r6, r7
 8000bfa:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
 8000bfe:	f080 8125 	bcs.w	8000e4c <__udivmoddi4+0x2a8>
 8000c02:	45b2      	cmp	sl, r6
 8000c04:	f240 8122 	bls.w	8000e4c <__udivmoddi4+0x2a8>
 8000c08:	f1a9 0902 	sub.w	r9, r9, #2
 8000c0c:	443e      	add	r6, r7
 8000c0e:	eba6 060a 	sub.w	r6, r6, sl
 8000c12:	fbb6 f0f2 	udiv	r0, r6, r2
 8000c16:	fb02 6610 	mls	r6, r2, r0, r6
 8000c1a:	fb00 f303 	mul.w	r3, r0, r3
 8000c1e:	b2a4      	uxth	r4, r4
 8000c20:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000c24:	42a3      	cmp	r3, r4
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x98>
 8000c28:	19e4      	adds	r4, r4, r7
 8000c2a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c2e:	f080 810b 	bcs.w	8000e48 <__udivmoddi4+0x2a4>
 8000c32:	42a3      	cmp	r3, r4
 8000c34:	f240 8108 	bls.w	8000e48 <__udivmoddi4+0x2a4>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	443c      	add	r4, r7
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	1ae4      	subs	r4, r4, r3
 8000c40:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c44:	2d00      	cmp	r5, #0
 8000c46:	d062      	beq.n	8000d0e <__udivmoddi4+0x16a>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c4e:	602c      	str	r4, [r5, #0]
 8000c50:	606b      	str	r3, [r5, #4]
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d907      	bls.n	8000c6a <__udivmoddi4+0xc6>
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d055      	beq.n	8000d0a <__udivmoddi4+0x166>
 8000c5e:	2100      	movs	r1, #0
 8000c60:	e885 0041 	stmia.w	r5, {r0, r6}
 8000c64:	4608      	mov	r0, r1
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	fab3 f183 	clz	r1, r3
 8000c6e:	2900      	cmp	r1, #0
 8000c70:	f040 808f 	bne.w	8000d92 <__udivmoddi4+0x1ee>
 8000c74:	42b3      	cmp	r3, r6
 8000c76:	d302      	bcc.n	8000c7e <__udivmoddi4+0xda>
 8000c78:	4282      	cmp	r2, r0
 8000c7a:	f200 80fc 	bhi.w	8000e76 <__udivmoddi4+0x2d2>
 8000c7e:	1a84      	subs	r4, r0, r2
 8000c80:	eb66 0603 	sbc.w	r6, r6, r3
 8000c84:	2001      	movs	r0, #1
 8000c86:	46b4      	mov	ip, r6
 8000c88:	2d00      	cmp	r5, #0
 8000c8a:	d040      	beq.n	8000d0e <__udivmoddi4+0x16a>
 8000c8c:	e885 1010 	stmia.w	r5, {r4, ip}
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	b912      	cbnz	r2, 8000c9c <__udivmoddi4+0xf8>
 8000c96:	2701      	movs	r7, #1
 8000c98:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c9c:	fab7 fe87 	clz	lr, r7
 8000ca0:	f1be 0f00 	cmp.w	lr, #0
 8000ca4:	d135      	bne.n	8000d12 <__udivmoddi4+0x16e>
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	1bf6      	subs	r6, r6, r7
 8000caa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000cae:	fa1f f887 	uxth.w	r8, r7
 8000cb2:	fbb6 f2fc 	udiv	r2, r6, ip
 8000cb6:	fb0c 6612 	mls	r6, ip, r2, r6
 8000cba:	fb08 f002 	mul.w	r0, r8, r2
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8000cc4:	42b0      	cmp	r0, r6
 8000cc6:	d907      	bls.n	8000cd8 <__udivmoddi4+0x134>
 8000cc8:	19f6      	adds	r6, r6, r7
 8000cca:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x132>
 8000cd0:	42b0      	cmp	r0, r6
 8000cd2:	f200 80d2 	bhi.w	8000e7a <__udivmoddi4+0x2d6>
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	1a36      	subs	r6, r6, r0
 8000cda:	fbb6 f0fc 	udiv	r0, r6, ip
 8000cde:	fb0c 6610 	mls	r6, ip, r0, r6
 8000ce2:	fb08 f800 	mul.w	r8, r8, r0
 8000ce6:	b2a3      	uxth	r3, r4
 8000ce8:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0x15c>
 8000cf0:	19e4      	adds	r4, r4, r7
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x15a>
 8000cf8:	45a0      	cmp	r8, r4
 8000cfa:	f200 80b9 	bhi.w	8000e70 <__udivmoddi4+0x2cc>
 8000cfe:	4618      	mov	r0, r3
 8000d00:	eba4 0408 	sub.w	r4, r4, r8
 8000d04:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000d08:	e79c      	b.n	8000c44 <__udivmoddi4+0xa0>
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	4628      	mov	r0, r5
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d16:	f1ce 0320 	rsb	r3, lr, #32
 8000d1a:	fa26 f203 	lsr.w	r2, r6, r3
 8000d1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000d22:	fbb2 f1fc 	udiv	r1, r2, ip
 8000d26:	fa1f f887 	uxth.w	r8, r7
 8000d2a:	fb0c 2211 	mls	r2, ip, r1, r2
 8000d2e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000d32:	fa20 f303 	lsr.w	r3, r0, r3
 8000d36:	fb01 f908 	mul.w	r9, r1, r8
 8000d3a:	4333      	orrs	r3, r6
 8000d3c:	0c1e      	lsrs	r6, r3, #16
 8000d3e:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000d42:	45b1      	cmp	r9, r6
 8000d44:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d48:	d909      	bls.n	8000d5e <__udivmoddi4+0x1ba>
 8000d4a:	19f6      	adds	r6, r6, r7
 8000d4c:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 8000d50:	f080 808c 	bcs.w	8000e6c <__udivmoddi4+0x2c8>
 8000d54:	45b1      	cmp	r9, r6
 8000d56:	f240 8089 	bls.w	8000e6c <__udivmoddi4+0x2c8>
 8000d5a:	3902      	subs	r1, #2
 8000d5c:	443e      	add	r6, r7
 8000d5e:	eba6 0609 	sub.w	r6, r6, r9
 8000d62:	fbb6 f0fc 	udiv	r0, r6, ip
 8000d66:	fb0c 6210 	mls	r2, ip, r0, r6
 8000d6a:	fb00 f908 	mul.w	r9, r0, r8
 8000d6e:	b29e      	uxth	r6, r3
 8000d70:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000d74:	45b1      	cmp	r9, r6
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0x1e4>
 8000d78:	19f6      	adds	r6, r6, r7
 8000d7a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7e:	d271      	bcs.n	8000e64 <__udivmoddi4+0x2c0>
 8000d80:	45b1      	cmp	r9, r6
 8000d82:	d96f      	bls.n	8000e64 <__udivmoddi4+0x2c0>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443e      	add	r6, r7
 8000d88:	eba6 0609 	sub.w	r6, r6, r9
 8000d8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d90:	e78f      	b.n	8000cb2 <__udivmoddi4+0x10e>
 8000d92:	f1c1 0720 	rsb	r7, r1, #32
 8000d96:	fa22 f807 	lsr.w	r8, r2, r7
 8000d9a:	408b      	lsls	r3, r1
 8000d9c:	ea48 0303 	orr.w	r3, r8, r3
 8000da0:	fa26 f407 	lsr.w	r4, r6, r7
 8000da4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8000da8:	fbb4 f9fe 	udiv	r9, r4, lr
 8000dac:	fa1f fc83 	uxth.w	ip, r3
 8000db0:	fb0e 4419 	mls	r4, lr, r9, r4
 8000db4:	408e      	lsls	r6, r1
 8000db6:	fa20 f807 	lsr.w	r8, r0, r7
 8000dba:	fb09 fa0c 	mul.w	sl, r9, ip
 8000dbe:	ea48 0806 	orr.w	r8, r8, r6
 8000dc2:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8000dc6:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8000dca:	45a2      	cmp	sl, r4
 8000dcc:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd0:	fa00 f601 	lsl.w	r6, r0, r1
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x244>
 8000dd6:	18e4      	adds	r4, r4, r3
 8000dd8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ddc:	d244      	bcs.n	8000e68 <__udivmoddi4+0x2c4>
 8000dde:	45a2      	cmp	sl, r4
 8000de0:	d942      	bls.n	8000e68 <__udivmoddi4+0x2c4>
 8000de2:	f1a9 0902 	sub.w	r9, r9, #2
 8000de6:	441c      	add	r4, r3
 8000de8:	eba4 040a 	sub.w	r4, r4, sl
 8000dec:	fbb4 f0fe 	udiv	r0, r4, lr
 8000df0:	fb0e 4410 	mls	r4, lr, r0, r4
 8000df4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000df8:	fa1f f888 	uxth.w	r8, r8
 8000dfc:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000e00:	45a4      	cmp	ip, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x270>
 8000e04:	18e4      	adds	r4, r4, r3
 8000e06:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
 8000e0a:	d229      	bcs.n	8000e60 <__udivmoddi4+0x2bc>
 8000e0c:	45a4      	cmp	ip, r4
 8000e0e:	d927      	bls.n	8000e60 <__udivmoddi4+0x2bc>
 8000e10:	3802      	subs	r0, #2
 8000e12:	441c      	add	r4, r3
 8000e14:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e18:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1c:	eba4 0c0c 	sub.w	ip, r4, ip
 8000e20:	45cc      	cmp	ip, r9
 8000e22:	46c2      	mov	sl, r8
 8000e24:	46ce      	mov	lr, r9
 8000e26:	d315      	bcc.n	8000e54 <__udivmoddi4+0x2b0>
 8000e28:	d012      	beq.n	8000e50 <__udivmoddi4+0x2ac>
 8000e2a:	b155      	cbz	r5, 8000e42 <__udivmoddi4+0x29e>
 8000e2c:	ebb6 030a 	subs.w	r3, r6, sl
 8000e30:	eb6c 060e 	sbc.w	r6, ip, lr
 8000e34:	fa06 f707 	lsl.w	r7, r6, r7
 8000e38:	40cb      	lsrs	r3, r1
 8000e3a:	431f      	orrs	r7, r3
 8000e3c:	40ce      	lsrs	r6, r1
 8000e3e:	602f      	str	r7, [r5, #0]
 8000e40:	606e      	str	r6, [r5, #4]
 8000e42:	2100      	movs	r1, #0
 8000e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e6f7      	b.n	8000c3c <__udivmoddi4+0x98>
 8000e4c:	4689      	mov	r9, r1
 8000e4e:	e6de      	b.n	8000c0e <__udivmoddi4+0x6a>
 8000e50:	4546      	cmp	r6, r8
 8000e52:	d2ea      	bcs.n	8000e2a <__udivmoddi4+0x286>
 8000e54:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e58:	eb69 0e03 	sbc.w	lr, r9, r3
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7e4      	b.n	8000e2a <__udivmoddi4+0x286>
 8000e60:	4670      	mov	r0, lr
 8000e62:	e7d7      	b.n	8000e14 <__udivmoddi4+0x270>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e78f      	b.n	8000d88 <__udivmoddi4+0x1e4>
 8000e68:	4681      	mov	r9, r0
 8000e6a:	e7bd      	b.n	8000de8 <__udivmoddi4+0x244>
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	e776      	b.n	8000d5e <__udivmoddi4+0x1ba>
 8000e70:	3802      	subs	r0, #2
 8000e72:	443c      	add	r4, r7
 8000e74:	e744      	b.n	8000d00 <__udivmoddi4+0x15c>
 8000e76:	4608      	mov	r0, r1
 8000e78:	e706      	b.n	8000c88 <__udivmoddi4+0xe4>
 8000e7a:	3a02      	subs	r2, #2
 8000e7c:	443e      	add	r6, r7
 8000e7e:	e72b      	b.n	8000cd8 <__udivmoddi4+0x134>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8a:	490d      	ldr	r1, [pc, #52]	; (8000ec0 <HAL_InitTick+0x3c>)
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <HAL_InitTick+0x40>)
 8000e8e:	7809      	ldrb	r1, [r1, #0]
 8000e90:	6812      	ldr	r2, [r2, #0]
 8000e92:	fbb3 f3f1 	udiv	r3, r3, r1
{
 8000e96:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e98:	fbb2 f0f3 	udiv	r0, r2, r3
 8000e9c:	f000 fba4 	bl	80015e8 <HAL_SYSTICK_Config>
 8000ea0:	b908      	cbnz	r0, 8000ea6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea2:	2d0f      	cmp	r5, #15
 8000ea4:	d901      	bls.n	8000eaa <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000ea6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000ea8:	bd38      	pop	{r3, r4, r5, pc}
 8000eaa:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eac:	4602      	mov	r2, r0
 8000eae:	4629      	mov	r1, r5
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eb4:	f000 fb56 	bl	8001564 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <HAL_InitTick+0x44>)
 8000eba:	4620      	mov	r0, r4
 8000ebc:	601d      	str	r5, [r3, #0]
 8000ebe:	bd38      	pop	{r3, r4, r5, pc}
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	200000b0 	.word	0x200000b0
 8000ec8:	20000004 	.word	0x20000004

08000ecc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ecc:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_Init+0x20>)
{
 8000ece:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed4:	f043 0310 	orr.w	r3, r3, #16
 8000ed8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eda:	f000 fb31 	bl	8001540 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f7ff ffd0 	bl	8000e84 <HAL_InitTick>
  HAL_MspInit();
 8000ee4:	f002 fb70 	bl	80035c8 <HAL_MspInit>
}
 8000ee8:	2000      	movs	r0, #0
 8000eea:	bd08      	pop	{r3, pc}
 8000eec:	40022000 	.word	0x40022000

08000ef0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ef0:	4a03      	ldr	r2, [pc, #12]	; (8000f00 <HAL_IncTick+0x10>)
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <HAL_IncTick+0x14>)
 8000ef4:	6811      	ldr	r1, [r2, #0]
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	440b      	add	r3, r1
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	2000120c 	.word	0x2000120c
 8000f04:	20000000 	.word	0x20000000

08000f08 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f08:	4b01      	ldr	r3, [pc, #4]	; (8000f10 <HAL_GetTick+0x8>)
 8000f0a:	6818      	ldr	r0, [r3, #0]
}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	2000120c 	.word	0x2000120c

08000f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f14:	b538      	push	{r3, r4, r5, lr}
 8000f16:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff fff6 	bl	8000f08 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000f1e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000f20:	d002      	beq.n	8000f28 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f22:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <HAL_Delay+0x20>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f28:	f7ff ffee 	bl	8000f08 <HAL_GetTick>
 8000f2c:	1b40      	subs	r0, r0, r5
 8000f2e:	4284      	cmp	r4, r0
 8000f30:	d8fa      	bhi.n	8000f28 <HAL_Delay+0x14>
  {
  }
}
 8000f32:	bd38      	pop	{r3, r4, r5, pc}
 8000f34:	20000000 	.word	0x20000000

08000f38 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f38:	2800      	cmp	r0, #0
 8000f3a:	d07d      	beq.n	8001038 <HAL_CAN_Init+0x100>
{
 8000f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f3e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000f42:	4604      	mov	r4, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d074      	beq.n	8001032 <HAL_CAN_Init+0xfa>
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f48:	6822      	ldr	r2, [r4, #0]
 8000f4a:	6813      	ldr	r3, [r2, #0]
 8000f4c:	f023 0302 	bic.w	r3, r3, #2
 8000f50:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f52:	f7ff ffd9 	bl	8000f08 <HAL_GetTick>
 8000f56:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f58:	e004      	b.n	8000f64 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f5a:	f7ff ffd5 	bl	8000f08 <HAL_GetTick>
 8000f5e:	1b40      	subs	r0, r0, r5
 8000f60:	280a      	cmp	r0, #10
 8000f62:	d85d      	bhi.n	8001020 <HAL_CAN_Init+0xe8>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f64:	6823      	ldr	r3, [r4, #0]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	0791      	lsls	r1, r2, #30
 8000f6a:	d4f6      	bmi.n	8000f5a <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	f042 0201 	orr.w	r2, r2, #1
 8000f72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f74:	f7ff ffc8 	bl	8000f08 <HAL_GetTick>
 8000f78:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f7a:	e004      	b.n	8000f86 <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f7c:	f7ff ffc4 	bl	8000f08 <HAL_GetTick>
 8000f80:	1b40      	subs	r0, r0, r5
 8000f82:	280a      	cmp	r0, #10
 8000f84:	d84c      	bhi.n	8001020 <HAL_CAN_Init+0xe8>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f86:	6823      	ldr	r3, [r4, #0]
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	07d2      	lsls	r2, r2, #31
 8000f8c:	d5f6      	bpl.n	8000f7c <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f8e:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f90:	2500      	movs	r5, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f92:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f94:	681a      	ldr	r2, [r3, #0]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f96:	f04f 0701 	mov.w	r7, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f9a:	bf0c      	ite	eq
 8000f9c:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fa0:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000fa4:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000fa6:	7e62      	ldrb	r2, [r4, #25]
 8000fa8:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	bf0c      	ite	eq
 8000fae:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fb2:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000fb6:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000fb8:	7ea2      	ldrb	r2, [r4, #26]
 8000fba:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	bf0c      	ite	eq
 8000fc0:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fc4:	f022 0220 	bicne.w	r2, r2, #32
 8000fc8:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000fca:	7ee2      	ldrb	r2, [r4, #27]
 8000fcc:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	bf0c      	ite	eq
 8000fd2:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fd6:	f042 0210 	orrne.w	r2, r2, #16
 8000fda:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000fdc:	7f22      	ldrb	r2, [r4, #28]
 8000fde:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	bf0c      	ite	eq
 8000fe4:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fe8:	f022 0208 	bicne.w	r2, r2, #8
 8000fec:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000fee:	7f62      	ldrb	r2, [r4, #29]
 8000ff0:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	bf0c      	ite	eq
 8000ff6:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ffa:	f022 0204 	bicne.w	r2, r2, #4
 8000ffe:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001000:	68e1      	ldr	r1, [r4, #12]
 8001002:	68a2      	ldr	r2, [r4, #8]
 8001004:	6926      	ldr	r6, [r4, #16]
 8001006:	6960      	ldr	r0, [r4, #20]
 8001008:	430a      	orrs	r2, r1
 800100a:	6861      	ldr	r1, [r4, #4]
 800100c:	4332      	orrs	r2, r6
 800100e:	4302      	orrs	r2, r0
 8001010:	3901      	subs	r1, #1
 8001012:	430a      	orrs	r2, r1
 8001014:	61da      	str	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 8001016:	4628      	mov	r0, r5
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001018:	6265      	str	r5, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800101a:	f884 7020 	strb.w	r7, [r4, #32]
  return HAL_OK;
 800101e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcan->State = HAL_CAN_STATE_ERROR;
 8001020:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001022:	6a63      	ldr	r3, [r4, #36]	; 0x24
      return HAL_ERROR;
 8001024:	2001      	movs	r0, #1
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800102a:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800102c:	f884 2020 	strb.w	r2, [r4, #32]
      return HAL_ERROR;
 8001030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_CAN_MspInit(hcan);
 8001032:	f002 fb19 	bl	8003668 <HAL_CAN_MspInit>
 8001036:	e787      	b.n	8000f48 <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 8001038:	2001      	movs	r0, #1
 800103a:	4770      	bx	lr

0800103c <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 800103c:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8001040:	4602      	mov	r2, r0

  if ((state == HAL_CAN_STATE_READY) ||
 8001042:	3b01      	subs	r3, #1
 8001044:	2b01      	cmp	r3, #1
 8001046:	d905      	bls.n	8001054 <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001048:	6a53      	ldr	r3, [r2, #36]	; 0x24

    return HAL_ERROR;
 800104a:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800104c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001050:	6253      	str	r3, [r2, #36]	; 0x24
    return HAL_ERROR;
 8001052:	4770      	bx	lr
{
 8001054:	b5f0      	push	{r4, r5, r6, r7, lr}
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001056:	2401      	movs	r4, #1
 8001058:	6948      	ldr	r0, [r1, #20]
  CAN_TypeDef *can_ip = hcan->Instance;
 800105a:	6813      	ldr	r3, [r2, #0]
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800105c:	f000 021f 	and.w	r2, r0, #31
 8001060:	fa04 f202 	lsl.w	r2, r4, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001064:	43d5      	mvns	r5, r2
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001066:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800106a:	69ce      	ldr	r6, [r1, #28]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800106c:	f044 0401 	orr.w	r4, r4, #1
 8001070:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001074:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
 8001078:	402c      	ands	r4, r5
 800107a:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800107e:	b39e      	cbz	r6, 80010e8 <HAL_CAN_ConfigFilter+0xac>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001080:	2e01      	cmp	r6, #1
 8001082:	d113      	bne.n	80010ac <HAL_CAN_ConfigFilter+0x70>
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001084:	888e      	ldrh	r6, [r1, #4]
 8001086:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800108a:	6808      	ldr	r0, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800108c:	f8d3 e20c 	ldr.w	lr, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001090:	688f      	ldr	r7, [r1, #8]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001092:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001096:	8988      	ldrh	r0, [r1, #12]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001098:	ea42 0e0e 	orr.w	lr, r2, lr
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800109c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80010a0:	f8c3 e20c 	str.w	lr, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010a4:	f8c4 6240 	str.w	r6, [r4, #576]	; 0x240
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010a8:	f8c4 0244 	str.w	r0, [r4, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80010ac:	6988      	ldr	r0, [r1, #24]
 80010ae:	bb90      	cbnz	r0, 8001116 <HAL_CAN_ConfigFilter+0xda>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80010b0:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80010b4:	4028      	ands	r0, r5
 80010b6:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80010ba:	6908      	ldr	r0, [r1, #16]
 80010bc:	bb98      	cbnz	r0, 8001126 <HAL_CAN_ConfigFilter+0xea>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80010be:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80010c2:	4028      	ands	r0, r5
 80010c4:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80010c8:	6a09      	ldr	r1, [r1, #32]
 80010ca:	2901      	cmp	r1, #1
 80010cc:	d104      	bne.n	80010d8 <HAL_CAN_ConfigFilter+0x9c>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80010ce:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 80010d2:	430a      	orrs	r2, r1
 80010d4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010d8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 80010dc:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010de:	f022 0201 	bic.w	r2, r2, #1
 80010e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 80010e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010e8:	68cc      	ldr	r4, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010ea:	888e      	ldrh	r6, [r1, #4]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80010ec:	f8d3 720c 	ldr.w	r7, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010f0:	f8d1 e008 	ldr.w	lr, [r1, #8]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010f4:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80010f8:	880c      	ldrh	r4, [r1, #0]
 80010fa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80010fe:	402f      	ands	r7, r5
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001100:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001104:	f8c3 720c 	str.w	r7, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001108:	f8c0 6240 	str.w	r6, [r0, #576]	; 0x240
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800110c:	f8c0 4244 	str.w	r4, [r0, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001110:	6988      	ldr	r0, [r1, #24]
 8001112:	2800      	cmp	r0, #0
 8001114:	d0cc      	beq.n	80010b0 <HAL_CAN_ConfigFilter+0x74>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001116:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 800111a:	4310      	orrs	r0, r2
 800111c:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001120:	6908      	ldr	r0, [r1, #16]
 8001122:	2800      	cmp	r0, #0
 8001124:	d0cb      	beq.n	80010be <HAL_CAN_ConfigFilter+0x82>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001126:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800112a:	4310      	orrs	r0, r2
 800112c:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
 8001130:	e7ca      	b.n	80010c8 <HAL_CAN_ConfigFilter+0x8c>
 8001132:	bf00      	nop

08001134 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001134:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001136:	f890 3020 	ldrb.w	r3, [r0, #32]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d006      	beq.n	800114c <HAL_CAN_Start+0x18>
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001140:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001142:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001146:	6242      	str	r2, [r0, #36]	; 0x24
  }
}
 8001148:	4618      	mov	r0, r3
 800114a:	bd38      	pop	{r3, r4, r5, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 800114c:	2302      	movs	r3, #2
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800114e:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001150:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001154:	6813      	ldr	r3, [r2, #0]
 8001156:	4604      	mov	r4, r0
 8001158:	f023 0301 	bic.w	r3, r3, #1
 800115c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800115e:	f7ff fed3 	bl	8000f08 <HAL_GetTick>
 8001162:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001164:	e004      	b.n	8001170 <HAL_CAN_Start+0x3c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001166:	f7ff fecf 	bl	8000f08 <HAL_GetTick>
 800116a:	1b40      	subs	r0, r0, r5
 800116c:	280a      	cmp	r0, #10
 800116e:	d806      	bhi.n	800117e <HAL_CAN_Start+0x4a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f013 0301 	ands.w	r3, r3, #1
 8001178:	d1f5      	bne.n	8001166 <HAL_CAN_Start+0x32>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800117a:	6263      	str	r3, [r4, #36]	; 0x24
    return HAL_OK;
 800117c:	e7e4      	b.n	8001148 <HAL_CAN_Start+0x14>
        hcan->State = HAL_CAN_STATE_ERROR;
 800117e:	2105      	movs	r1, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001180:	6a62      	ldr	r2, [r4, #36]	; 0x24
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001184:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001188:	6262      	str	r2, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800118a:	f884 1020 	strb.w	r1, [r4, #32]
        return HAL_ERROR;
 800118e:	e7db      	b.n	8001148 <HAL_CAN_Start+0x14>

08001190 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8001194:	f890 5020 	ldrb.w	r5, [r0, #32]
{
 8001198:	4604      	mov	r4, r0

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800119a:	3d01      	subs	r5, #1
 800119c:	2d01      	cmp	r5, #1
 800119e:	d906      	bls.n	80011ae <HAL_CAN_GetRxMessage+0x1e>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011a0:	6a63      	ldr	r3, [r4, #36]	; 0x24

    return HAL_ERROR;
 80011a2:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a8:	6263      	str	r3, [r4, #36]	; 0x24
  }
}
 80011aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80011ae:	6805      	ldr	r5, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80011b0:	2900      	cmp	r1, #0
 80011b2:	d05a      	beq.n	800126a <HAL_CAN_GetRxMessage+0xda>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80011b4:	6928      	ldr	r0, [r5, #16]
 80011b6:	0780      	lsls	r0, r0, #30
 80011b8:	d05a      	beq.n	8001270 <HAL_CAN_GetRxMessage+0xe0>
 80011ba:	0108      	lsls	r0, r1, #4
 80011bc:	182e      	adds	r6, r5, r0
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80011be:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 80011c2:	f007 0704 	and.w	r7, r7, #4
 80011c6:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80011c8:	2f00      	cmp	r7, #0
 80011ca:	d15f      	bne.n	800128c <HAL_CAN_GetRxMessage+0xfc>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80011cc:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 80011d0:	0d7f      	lsrs	r7, r7, #21
 80011d2:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80011d4:	f8d6 c1b0 	ldr.w	ip, [r6, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80011d8:	4405      	add	r5, r0
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80011da:	f8d6 e1b4 	ldr.w	lr, [r6, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80011de:	f8d6 71b4 	ldr.w	r7, [r6, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80011e2:	f8d6 61b4 	ldr.w	r6, [r6, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80011e6:	f8d5 81b8 	ldr.w	r8, [r5, #440]	; 0x1b8
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80011ea:	f3cc 0c40 	ubfx	ip, ip, #1, #1
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80011ee:	f00e 050f 	and.w	r5, lr, #15
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80011f2:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80011f6:	0c36      	lsrs	r6, r6, #16
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80011f8:	f8c2 c00c 	str.w	ip, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80011fc:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80011fe:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001200:	6156      	str	r6, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001202:	f883 8000 	strb.w	r8, [r3]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001206:	6822      	ldr	r2, [r4, #0]
 8001208:	4402      	add	r2, r0
 800120a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800120e:	0a12      	lsrs	r2, r2, #8
 8001210:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001212:	6822      	ldr	r2, [r4, #0]
 8001214:	4402      	add	r2, r0
 8001216:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800121a:	0c12      	lsrs	r2, r2, #16
 800121c:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800121e:	6822      	ldr	r2, [r4, #0]
 8001220:	4402      	add	r2, r0
 8001222:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001226:	0e12      	lsrs	r2, r2, #24
 8001228:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800122a:	6822      	ldr	r2, [r4, #0]
 800122c:	4402      	add	r2, r0
 800122e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001232:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001234:	6822      	ldr	r2, [r4, #0]
 8001236:	4402      	add	r2, r0
 8001238:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800123c:	0a12      	lsrs	r2, r2, #8
 800123e:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001240:	6822      	ldr	r2, [r4, #0]
 8001242:	4402      	add	r2, r0
 8001244:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001248:	0c12      	lsrs	r2, r2, #16
 800124a:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800124c:	6822      	ldr	r2, [r4, #0]
 800124e:	4410      	add	r0, r2
 8001250:	f8d0 21bc 	ldr.w	r2, [r0, #444]	; 0x1bc
 8001254:	0e12      	lsrs	r2, r2, #24
 8001256:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001258:	6822      	ldr	r2, [r4, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800125a:	b981      	cbnz	r1, 800127e <HAL_CAN_GetRxMessage+0xee>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800125c:	68d3      	ldr	r3, [r2, #12]
    return HAL_OK;
 800125e:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001260:	f043 0320 	orr.w	r3, r3, #32
 8001264:	60d3      	str	r3, [r2, #12]
 8001266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800126a:	68e8      	ldr	r0, [r5, #12]
 800126c:	0786      	lsls	r6, r0, #30
 800126e:	d1a4      	bne.n	80011ba <HAL_CAN_GetRxMessage+0x2a>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001270:	6a63      	ldr	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 8001272:	2001      	movs	r0, #1
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001274:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001278:	6263      	str	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 800127a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800127e:	6913      	ldr	r3, [r2, #16]
    return HAL_OK;
 8001280:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001282:	f043 0320 	orr.w	r3, r3, #32
 8001286:	6113      	str	r3, [r2, #16]
 8001288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800128c:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 8001290:	08ff      	lsrs	r7, r7, #3
 8001292:	6057      	str	r7, [r2, #4]
 8001294:	e79e      	b.n	80011d4 <HAL_CAN_GetRxMessage+0x44>
 8001296:	bf00      	nop

08001298 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8001298:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 800129c:	4602      	mov	r2, r0

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800129e:	3b01      	subs	r3, #1
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d905      	bls.n	80012b0 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012a4:	6a53      	ldr	r3, [r2, #36]	; 0x24

    return HAL_ERROR;
 80012a6:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ac:	6253      	str	r3, [r2, #36]	; 0x24
  }
}
 80012ae:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80012b0:	6802      	ldr	r2, [r0, #0]
    return HAL_OK;
 80012b2:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80012b4:	6953      	ldr	r3, [r2, #20]
 80012b6:	4319      	orrs	r1, r3
 80012b8:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 80012ba:	4770      	bx	lr

080012bc <HAL_CAN_TxMailbox0CompleteCallback>:
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop

080012c0 <HAL_CAN_TxMailbox1CompleteCallback>:
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop

080012c4 <HAL_CAN_TxMailbox2CompleteCallback>:
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop

080012c8 <HAL_CAN_TxMailbox0AbortCallback>:
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop

080012cc <HAL_CAN_TxMailbox1AbortCallback>:
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop

080012d0 <HAL_CAN_TxMailbox2AbortCallback>:
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop

080012d4 <HAL_CAN_RxFifo0FullCallback>:
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop

080012d8 <HAL_CAN_RxFifo1MsgPendingCallback>:
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop

080012dc <HAL_CAN_RxFifo1FullCallback>:
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop

080012e0 <HAL_CAN_SleepCallback>:
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop

080012e4 <HAL_CAN_WakeUpFromRxMsgCallback>:
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop

080012e8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop

080012ec <HAL_CAN_IRQHandler>:
{
 80012ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80012f0:	6803      	ldr	r3, [r0, #0]
{
 80012f2:	4606      	mov	r6, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80012f4:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80012f6:	f8d3 8004 	ldr.w	r8, [r3, #4]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80012fa:	f014 0501 	ands.w	r5, r4, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80012fe:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001300:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001304:	f8d3 9010 	ldr.w	r9, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001308:	f8d3 a018 	ldr.w	sl, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800130c:	d025      	beq.n	800135a <HAL_CAN_IRQHandler+0x6e>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800130e:	f017 0501 	ands.w	r5, r7, #1
 8001312:	f040 809f 	bne.w	8001454 <HAL_CAN_IRQHandler+0x168>
 8001316:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800131a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800131e:	05f8      	lsls	r0, r7, #23
 8001320:	d50d      	bpl.n	800133e <HAL_CAN_IRQHandler+0x52>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001322:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001326:	6833      	ldr	r3, [r6, #0]
 8001328:	6098      	str	r0, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800132a:	05bb      	lsls	r3, r7, #22
 800132c:	f100 80ca 	bmi.w	80014c4 <HAL_CAN_IRQHandler+0x1d8>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001330:	0578      	lsls	r0, r7, #21
 8001332:	f100 80da 	bmi.w	80014ea <HAL_CAN_IRQHandler+0x1fe>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001336:	053b      	lsls	r3, r7, #20
 8001338:	f140 80eb 	bpl.w	8001512 <HAL_CAN_IRQHandler+0x226>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800133c:	460d      	mov	r5, r1
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800133e:	03f8      	lsls	r0, r7, #15
 8001340:	d50b      	bpl.n	800135a <HAL_CAN_IRQHandler+0x6e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001342:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001346:	6833      	ldr	r3, [r6, #0]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001348:	03b9      	lsls	r1, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800134a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800134c:	f100 80b6 	bmi.w	80014bc <HAL_CAN_IRQHandler+0x1d0>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001350:	037a      	lsls	r2, r7, #13
 8001352:	f140 80cc 	bpl.w	80014ee <HAL_CAN_IRQHandler+0x202>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001356:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800135a:	0727      	lsls	r7, r4, #28
 800135c:	d502      	bpl.n	8001364 <HAL_CAN_IRQHandler+0x78>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800135e:	f01b 0f10 	tst.w	fp, #16
 8001362:	d171      	bne.n	8001448 <HAL_CAN_IRQHandler+0x15c>
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001364:	0760      	lsls	r0, r4, #29
 8001366:	d503      	bpl.n	8001370 <HAL_CAN_IRQHandler+0x84>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001368:	f01b 0f08 	tst.w	fp, #8
 800136c:	f040 8082 	bne.w	8001474 <HAL_CAN_IRQHandler+0x188>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001370:	07a1      	lsls	r1, r4, #30
 8001372:	d504      	bpl.n	800137e <HAL_CAN_IRQHandler+0x92>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001374:	6833      	ldr	r3, [r6, #0]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	079a      	lsls	r2, r3, #30
 800137a:	f040 8090 	bne.w	800149e <HAL_CAN_IRQHandler+0x1b2>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800137e:	0663      	lsls	r3, r4, #25
 8001380:	d502      	bpl.n	8001388 <HAL_CAN_IRQHandler+0x9c>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001382:	f019 0f10 	tst.w	r9, #16
 8001386:	d159      	bne.n	800143c <HAL_CAN_IRQHandler+0x150>
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001388:	06a7      	lsls	r7, r4, #26
 800138a:	d503      	bpl.n	8001394 <HAL_CAN_IRQHandler+0xa8>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800138c:	f019 0f08 	tst.w	r9, #8
 8001390:	f040 8089 	bne.w	80014a6 <HAL_CAN_IRQHandler+0x1ba>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001394:	06e0      	lsls	r0, r4, #27
 8001396:	d504      	bpl.n	80013a2 <HAL_CAN_IRQHandler+0xb6>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001398:	6833      	ldr	r3, [r6, #0]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	0799      	lsls	r1, r3, #30
 800139e:	f040 8089 	bne.w	80014b4 <HAL_CAN_IRQHandler+0x1c8>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80013a2:	03a2      	lsls	r2, r4, #14
 80013a4:	d502      	bpl.n	80013ac <HAL_CAN_IRQHandler+0xc0>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80013a6:	f018 0f10 	tst.w	r8, #16
 80013aa:	d16a      	bne.n	8001482 <HAL_CAN_IRQHandler+0x196>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80013ac:	03e3      	lsls	r3, r4, #15
 80013ae:	d502      	bpl.n	80013b6 <HAL_CAN_IRQHandler+0xca>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80013b0:	f018 0f08 	tst.w	r8, #8
 80013b4:	d16c      	bne.n	8001490 <HAL_CAN_IRQHandler+0x1a4>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80013b6:	0427      	lsls	r7, r4, #16
 80013b8:	d505      	bpl.n	80013c6 <HAL_CAN_IRQHandler+0xda>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80013ba:	f018 0f04 	tst.w	r8, #4
 80013be:	d10b      	bne.n	80013d8 <HAL_CAN_IRQHandler+0xec>
 80013c0:	6833      	ldr	r3, [r6, #0]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80013c2:	2204      	movs	r2, #4
 80013c4:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 80013c6:	b12d      	cbz	r5, 80013d4 <HAL_CAN_IRQHandler+0xe8>
    hcan->ErrorCode |= errorcode;
 80013c8:	6a73      	ldr	r3, [r6, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80013ca:	4630      	mov	r0, r6
    hcan->ErrorCode |= errorcode;
 80013cc:	431d      	orrs	r5, r3
 80013ce:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80013d0:	f7ff ff8a 	bl	80012e8 <HAL_CAN_ErrorCallback>
 80013d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013d8:	05e0      	lsls	r0, r4, #23
 80013da:	d504      	bpl.n	80013e6 <HAL_CAN_IRQHandler+0xfa>
 80013dc:	f01a 0f01 	tst.w	sl, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 80013e0:	bf18      	it	ne
 80013e2:	f045 0501 	orrne.w	r5, r5, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013e6:	05a1      	lsls	r1, r4, #22
 80013e8:	d504      	bpl.n	80013f4 <HAL_CAN_IRQHandler+0x108>
 80013ea:	f01a 0f02 	tst.w	sl, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 80013ee:	bf18      	it	ne
 80013f0:	f045 0502 	orrne.w	r5, r5, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013f4:	0562      	lsls	r2, r4, #21
 80013f6:	d504      	bpl.n	8001402 <HAL_CAN_IRQHandler+0x116>
 80013f8:	f01a 0f04 	tst.w	sl, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 80013fc:	bf18      	it	ne
 80013fe:	f045 0504 	orrne.w	r5, r5, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001402:	0523      	lsls	r3, r4, #20
 8001404:	d5dc      	bpl.n	80013c0 <HAL_CAN_IRQHandler+0xd4>
 8001406:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 800140a:	d0d9      	beq.n	80013c0 <HAL_CAN_IRQHandler+0xd4>
        switch (esrflags & CAN_ESR_LEC)
 800140c:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8001410:	f000 808d 	beq.w	800152e <HAL_CAN_IRQHandler+0x242>
 8001414:	d970      	bls.n	80014f8 <HAL_CAN_IRQHandler+0x20c>
 8001416:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 800141a:	f000 8085 	beq.w	8001528 <HAL_CAN_IRQHandler+0x23c>
 800141e:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 8001422:	f000 8087 	beq.w	8001534 <HAL_CAN_IRQHandler+0x248>
 8001426:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 800142a:	d101      	bne.n	8001430 <HAL_CAN_IRQHandler+0x144>
            errorcode |= HAL_CAN_ERROR_BR;
 800142c:	f045 0540 	orr.w	r5, r5, #64	; 0x40
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001430:	6833      	ldr	r3, [r6, #0]
 8001432:	699a      	ldr	r2, [r3, #24]
 8001434:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001438:	619a      	str	r2, [r3, #24]
 800143a:	e7c2      	b.n	80013c2 <HAL_CAN_IRQHandler+0xd6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800143c:	2210      	movs	r2, #16
 800143e:	6833      	ldr	r3, [r6, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001440:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001444:	611a      	str	r2, [r3, #16]
 8001446:	e79f      	b.n	8001388 <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001448:	2210      	movs	r2, #16
 800144a:	6833      	ldr	r3, [r6, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800144c:	f445 7500 	orr.w	r5, r5, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	e787      	b.n	8001364 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001454:	2201      	movs	r2, #1
 8001456:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001458:	07bb      	lsls	r3, r7, #30
 800145a:	d437      	bmi.n	80014cc <HAL_CAN_IRQHandler+0x1e0>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800145c:	077d      	lsls	r5, r7, #29
 800145e:	d43d      	bmi.n	80014dc <HAL_CAN_IRQHandler+0x1f0>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001460:	f017 0508 	ands.w	r5, r7, #8
 8001464:	d059      	beq.n	800151a <HAL_CAN_IRQHandler+0x22e>
 8001466:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 800146a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800146e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8001472:	e754      	b.n	800131e <HAL_CAN_IRQHandler+0x32>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001474:	2208      	movs	r2, #8
 8001476:	6833      	ldr	r3, [r6, #0]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001478:	4630      	mov	r0, r6
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800147a:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 800147c:	f7ff ff2a 	bl	80012d4 <HAL_CAN_RxFifo0FullCallback>
 8001480:	e776      	b.n	8001370 <HAL_CAN_IRQHandler+0x84>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001482:	2210      	movs	r2, #16
 8001484:	6833      	ldr	r3, [r6, #0]
      HAL_CAN_SleepCallback(hcan);
 8001486:	4630      	mov	r0, r6
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001488:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 800148a:	f7ff ff29 	bl	80012e0 <HAL_CAN_SleepCallback>
 800148e:	e78d      	b.n	80013ac <HAL_CAN_IRQHandler+0xc0>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001490:	2208      	movs	r2, #8
 8001492:	6833      	ldr	r3, [r6, #0]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001494:	4630      	mov	r0, r6
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001496:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001498:	f7ff ff24 	bl	80012e4 <HAL_CAN_WakeUpFromRxMsgCallback>
 800149c:	e78b      	b.n	80013b6 <HAL_CAN_IRQHandler+0xca>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800149e:	4630      	mov	r0, r6
 80014a0:	f001 fa02 	bl	80028a8 <HAL_CAN_RxFifo0MsgPendingCallback>
 80014a4:	e76b      	b.n	800137e <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80014a6:	2208      	movs	r2, #8
 80014a8:	6833      	ldr	r3, [r6, #0]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80014aa:	4630      	mov	r0, r6
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80014ac:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80014ae:	f7ff ff15 	bl	80012dc <HAL_CAN_RxFifo1FullCallback>
 80014b2:	e76f      	b.n	8001394 <HAL_CAN_IRQHandler+0xa8>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80014b4:	4630      	mov	r0, r6
 80014b6:	f7ff ff0f 	bl	80012d8 <HAL_CAN_RxFifo1MsgPendingCallback>
 80014ba:	e772      	b.n	80013a2 <HAL_CAN_IRQHandler+0xb6>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80014bc:	4630      	mov	r0, r6
 80014be:	f7ff ff01 	bl	80012c4 <HAL_CAN_TxMailbox2CompleteCallback>
 80014c2:	e74a      	b.n	800135a <HAL_CAN_IRQHandler+0x6e>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80014c4:	4630      	mov	r0, r6
 80014c6:	f7ff fefb 	bl	80012c0 <HAL_CAN_TxMailbox1CompleteCallback>
 80014ca:	e738      	b.n	800133e <HAL_CAN_IRQHandler+0x52>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80014cc:	f7ff fef6 	bl	80012bc <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80014d0:	2500      	movs	r5, #0
 80014d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014da:	e720      	b.n	800131e <HAL_CAN_IRQHandler+0x32>
 80014dc:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 80014e0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80014e4:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80014e8:	e719      	b.n	800131e <HAL_CAN_IRQHandler+0x32>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80014ea:	4615      	mov	r5, r2
 80014ec:	e727      	b.n	800133e <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80014ee:	033b      	lsls	r3, r7, #12
 80014f0:	d50b      	bpl.n	800150a <HAL_CAN_IRQHandler+0x21e>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80014f2:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
 80014f6:	e730      	b.n	800135a <HAL_CAN_IRQHandler+0x6e>
        switch (esrflags & CAN_ESR_LEC)
 80014f8:	f1ba 0f10 	cmp.w	sl, #16
 80014fc:	d01d      	beq.n	800153a <HAL_CAN_IRQHandler+0x24e>
 80014fe:	f1ba 0f20 	cmp.w	sl, #32
 8001502:	d195      	bne.n	8001430 <HAL_CAN_IRQHandler+0x144>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001504:	f045 0510 	orr.w	r5, r5, #16
            break;
 8001508:	e792      	b.n	8001430 <HAL_CAN_IRQHandler+0x144>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800150a:	4630      	mov	r0, r6
 800150c:	f7ff fee0 	bl	80012d0 <HAL_CAN_TxMailbox2AbortCallback>
 8001510:	e723      	b.n	800135a <HAL_CAN_IRQHandler+0x6e>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001512:	4630      	mov	r0, r6
 8001514:	f7ff feda 	bl	80012cc <HAL_CAN_TxMailbox1AbortCallback>
 8001518:	e711      	b.n	800133e <HAL_CAN_IRQHandler+0x52>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800151a:	f7ff fed5 	bl	80012c8 <HAL_CAN_TxMailbox0AbortCallback>
 800151e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001522:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001526:	e6fa      	b.n	800131e <HAL_CAN_IRQHandler+0x32>
            errorcode |= HAL_CAN_ERROR_BD;
 8001528:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            break;
 800152c:	e780      	b.n	8001430 <HAL_CAN_IRQHandler+0x144>
            errorcode |= HAL_CAN_ERROR_ACK;
 800152e:	f045 0520 	orr.w	r5, r5, #32
            break;
 8001532:	e77d      	b.n	8001430 <HAL_CAN_IRQHandler+0x144>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001534:	f445 7580 	orr.w	r5, r5, #256	; 0x100
            break;
 8001538:	e77a      	b.n	8001430 <HAL_CAN_IRQHandler+0x144>
            errorcode |= HAL_CAN_ERROR_STF;
 800153a:	f045 0508 	orr.w	r5, r5, #8
            break;
 800153e:	e777      	b.n	8001430 <HAL_CAN_IRQHandler+0x144>

08001540 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001540:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001544:	4a06      	ldr	r2, [pc, #24]	; (8001560 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001546:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001548:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800154a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154e:	400b      	ands	r3, r1
 8001550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001558:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800155a:	60d3      	str	r3, [r2, #12]
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001564:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001566:	b470      	push	{r4, r5, r6}
 8001568:	68dc      	ldr	r4, [r3, #12]
 800156a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800156e:	f1c4 0607 	rsb	r6, r4, #7
 8001572:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001574:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001578:	bf28      	it	cs
 800157a:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157c:	2b06      	cmp	r3, #6
 800157e:	d917      	bls.n	80015b0 <HAL_NVIC_SetPriority+0x4c>
 8001580:	2501      	movs	r5, #1
 8001582:	3c03      	subs	r4, #3
 8001584:	40a5      	lsls	r5, r4
 8001586:	3d01      	subs	r5, #1
 8001588:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158a:	2301      	movs	r3, #1
 800158c:	40b3      	lsls	r3, r6
 800158e:	3b01      	subs	r3, #1
 8001590:	4019      	ands	r1, r3
 8001592:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 8001594:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001596:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 800159a:	db0c      	blt.n	80015b6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159c:	0109      	lsls	r1, r1, #4
 800159e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80015a2:	b2c9      	uxtb	r1, r1
 80015a4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80015a8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80015ac:	bc70      	pop	{r4, r5, r6}
 80015ae:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b0:	2200      	movs	r2, #0
 80015b2:	4614      	mov	r4, r2
 80015b4:	e7e9      	b.n	800158a <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <HAL_NVIC_SetPriority+0x68>)
 80015b8:	f000 000f 	and.w	r0, r0, #15
 80015bc:	0109      	lsls	r1, r1, #4
 80015be:	b2c9      	uxtb	r1, r1
 80015c0:	4403      	add	r3, r0
 80015c2:	7619      	strb	r1, [r3, #24]
 80015c4:	bc70      	pop	{r4, r5, r6}
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00
 80015cc:	e000ecfc 	.word	0xe000ecfc

080015d0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80015d0:	2301      	movs	r3, #1
 80015d2:	f000 011f 	and.w	r1, r0, #31
 80015d6:	4a03      	ldr	r2, [pc, #12]	; (80015e4 <HAL_NVIC_EnableIRQ+0x14>)
 80015d8:	0940      	lsrs	r0, r0, #5
 80015da:	408b      	lsls	r3, r1
 80015dc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000e100 	.word	0xe000e100

080015e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e8:	3801      	subs	r0, #1
 80015ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80015ee:	d20d      	bcs.n	800160c <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f0:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f2:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f4:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f6:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fa:	4c06      	ldr	r4, [pc, #24]	; (8001614 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015fc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fe:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001602:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8001604:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001606:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001608:	6019      	str	r1, [r3, #0]
 800160a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800160c:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 800160e:	4770      	bx	lr
 8001610:	e000e010 	.word	0xe000e010
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop

0800161c <HAL_SYSTICK_IRQHandler>:
{
 800161c:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800161e:	f7ff fffb 	bl	8001618 <HAL_SYSTICK_Callback>
 8001622:	bd08      	pop	{r3, pc}

08001624 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001624:	b350      	cbz	r0, 800167c <HAL_DMA_Init+0x58>
 8001626:	4602      	mov	r2, r0
{
 8001628:	b4f0      	push	{r4, r5, r6, r7}

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800162a:	2400      	movs	r4, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800162c:	2601      	movs	r6, #1
  tmp |=  hdma->Init.Direction        |
 800162e:	6887      	ldr	r7, [r0, #8]
 8001630:	6843      	ldr	r3, [r0, #4]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001632:	6805      	ldr	r5, [r0, #0]
 8001634:	4912      	ldr	r1, [pc, #72]	; (8001680 <HAL_DMA_Init+0x5c>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001636:	68c0      	ldr	r0, [r0, #12]
  tmp |=  hdma->Init.Direction        |
 8001638:	433b      	orrs	r3, r7
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800163a:	4f12      	ldr	r7, [pc, #72]	; (8001684 <HAL_DMA_Init+0x60>)
 800163c:	4429      	add	r1, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800163e:	4303      	orrs	r3, r0
 8001640:	6910      	ldr	r0, [r2, #16]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001642:	fba7 7101 	umull	r7, r1, r7, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001646:	6957      	ldr	r7, [r2, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001648:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800164a:	433b      	orrs	r3, r7
 800164c:	6997      	ldr	r7, [r2, #24]
  tmp = hdma->Instance->CCR;
 800164e:	6828      	ldr	r0, [r5, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001650:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8001652:	69d7      	ldr	r7, [r2, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001654:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001658:	433b      	orrs	r3, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800165a:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  hdma->DmaBaseAddress = DMA1;
 800165e:	4f0a      	ldr	r7, [pc, #40]	; (8001688 <HAL_DMA_Init+0x64>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001660:	0909      	lsrs	r1, r1, #4
  tmp |=  hdma->Init.Direction        |
 8001662:	4303      	orrs	r3, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001664:	0089      	lsls	r1, r1, #2
  hdma->DmaBaseAddress = DMA1;
 8001666:	63d7      	str	r7, [r2, #60]	; 0x3c
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;

  return HAL_OK;
 8001668:	4620      	mov	r0, r4
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800166a:	6411      	str	r1, [r2, #64]	; 0x40
  hdma->Instance->CCR = tmp;
 800166c:	602b      	str	r3, [r5, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800166e:	6394      	str	r4, [r2, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8001670:	f882 4020 	strb.w	r4, [r2, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8001674:	f882 6021 	strb.w	r6, [r2, #33]	; 0x21
}
 8001678:	bcf0      	pop	{r4, r5, r6, r7}
 800167a:	4770      	bx	lr
    return HAL_ERROR;
 800167c:	2001      	movs	r0, #1
 800167e:	4770      	bx	lr
 8001680:	bffdfff8 	.word	0xbffdfff8
 8001684:	cccccccd 	.word	0xcccccccd
 8001688:	40020000 	.word	0x40020000

0800168c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800168c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800168e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001692:	2c01      	cmp	r4, #1
 8001694:	d00c      	beq.n	80016b0 <HAL_DMA_Start_IT+0x24>
 8001696:	2501      	movs	r5, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001698:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 800169c:	f880 5020 	strb.w	r5, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80016a0:	42ac      	cmp	r4, r5
 80016a2:	d008      	beq.n	80016b6 <HAL_DMA_Start_IT+0x2a>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80016a4:	2200      	movs	r2, #0

    /* Remain BUSY */
    status = HAL_BUSY;
 80016a6:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma); 
 80016a8:	f880 2020 	strb.w	r2, [r0, #32]
  }    
  return status;
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 80016b0:	2302      	movs	r3, #2
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016b6:	2600      	movs	r6, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80016b8:	f04f 0c02 	mov.w	ip, #2
    __HAL_DMA_DISABLE(hdma);
 80016bc:	6805      	ldr	r5, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016be:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80016c0:	682e      	ldr	r6, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016c2:	6c07      	ldr	r7, [r0, #64]	; 0x40
 80016c4:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 80016c8:	40bc      	lsls	r4, r7
    __HAL_DMA_DISABLE(hdma);
 80016ca:	f026 0601 	bic.w	r6, r6, #1

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016ce:	6847      	ldr	r7, [r0, #4]
    hdma->State = HAL_DMA_STATE_BUSY;
 80016d0:	f880 c021 	strb.w	ip, [r0, #33]	; 0x21
    __HAL_DMA_DISABLE(hdma);
 80016d4:	602e      	str	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016d6:	f8ce 4004 	str.w	r4, [lr, #4]
  hdma->Instance->CNDTR = DataLength;
 80016da:	606b      	str	r3, [r5, #4]
    if(NULL != hdma->XferHalfCpltCallback)
 80016dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016de:	2f10      	cmp	r7, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016e0:	bf0b      	itete	eq
 80016e2:	60aa      	streq	r2, [r5, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80016e4:	60a9      	strne	r1, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 80016e6:	60e9      	streq	r1, [r5, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80016e8:	60ea      	strne	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80016ea:	b14b      	cbz	r3, 8001700 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ec:	682b      	ldr	r3, [r5, #0]
 80016ee:	f043 030e 	orr.w	r3, r3, #14
 80016f2:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 80016f4:	682a      	ldr	r2, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016f6:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 80016f8:	f042 0201 	orr.w	r2, r2, #1
 80016fc:	602a      	str	r2, [r5, #0]
 80016fe:	e7d5      	b.n	80016ac <HAL_DMA_Start_IT+0x20>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001700:	682b      	ldr	r3, [r5, #0]
 8001702:	f023 0304 	bic.w	r3, r3, #4
 8001706:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001708:	682b      	ldr	r3, [r5, #0]
 800170a:	f043 030a 	orr.w	r3, r3, #10
 800170e:	602b      	str	r3, [r5, #0]
 8001710:	e7f0      	b.n	80016f4 <HAL_DMA_Start_IT+0x68>
 8001712:	bf00      	nop

08001714 <HAL_DMA_Abort_IT>:
{  
 8001714:	b538      	push	{r3, r4, r5, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001716:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800171a:	2b02      	cmp	r3, #2
 800171c:	d004      	beq.n	8001728 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800171e:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8001720:	2401      	movs	r4, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001722:	6382      	str	r2, [r0, #56]	; 0x38
}
 8001724:	4620      	mov	r0, r4
 8001726:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001728:	6803      	ldr	r3, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800172a:	491d      	ldr	r1, [pc, #116]	; (80017a0 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800172c:	681a      	ldr	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800172e:	428b      	cmp	r3, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001730:	f022 020e 	bic.w	r2, r2, #14
 8001734:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	f022 0201 	bic.w	r2, r2, #1
 800173c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800173e:	d021      	beq.n	8001784 <HAL_DMA_Abort_IT+0x70>
 8001740:	4a18      	ldr	r2, [pc, #96]	; (80017a4 <HAL_DMA_Abort_IT+0x90>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d01c      	beq.n	8001780 <HAL_DMA_Abort_IT+0x6c>
 8001746:	3214      	adds	r2, #20
 8001748:	4293      	cmp	r3, r2
 800174a:	d01f      	beq.n	800178c <HAL_DMA_Abort_IT+0x78>
 800174c:	3214      	adds	r2, #20
 800174e:	4293      	cmp	r3, r2
 8001750:	d01f      	beq.n	8001792 <HAL_DMA_Abort_IT+0x7e>
 8001752:	3214      	adds	r2, #20
 8001754:	4293      	cmp	r3, r2
 8001756:	d01f      	beq.n	8001798 <HAL_DMA_Abort_IT+0x84>
 8001758:	3214      	adds	r2, #20
 800175a:	4293      	cmp	r3, r2
 800175c:	bf0c      	ite	eq
 800175e:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001762:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
    hdma->State = HAL_DMA_STATE_READY;
 8001766:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8001768:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800176a:	4d0f      	ldr	r5, [pc, #60]	; (80017a8 <HAL_DMA_Abort_IT+0x94>)
    if(hdma->XferAbortCallback != NULL)
 800176c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800176e:	606b      	str	r3, [r5, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001770:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001774:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001778:	b132      	cbz	r2, 8001788 <HAL_DMA_Abort_IT+0x74>
      hdma->XferAbortCallback(hdma);
 800177a:	4790      	blx	r2
}
 800177c:	4620      	mov	r0, r4
 800177e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001780:	2310      	movs	r3, #16
 8001782:	e7f0      	b.n	8001766 <HAL_DMA_Abort_IT+0x52>
 8001784:	2301      	movs	r3, #1
 8001786:	e7ee      	b.n	8001766 <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 8001788:	4614      	mov	r4, r2
 800178a:	e7cb      	b.n	8001724 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800178c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001790:	e7e9      	b.n	8001766 <HAL_DMA_Abort_IT+0x52>
 8001792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001796:	e7e6      	b.n	8001766 <HAL_DMA_Abort_IT+0x52>
 8001798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800179c:	e7e3      	b.n	8001766 <HAL_DMA_Abort_IT+0x52>
 800179e:	bf00      	nop
 80017a0:	40020008 	.word	0x40020008
 80017a4:	4002001c 	.word	0x4002001c
 80017a8:	40020000 	.word	0x40020000

080017ac <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80017ac:	2204      	movs	r2, #4
{
 80017ae:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017b0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80017b2:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017b4:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80017b6:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80017b8:	408a      	lsls	r2, r1
 80017ba:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 80017bc:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80017be:	d01f      	beq.n	8001800 <HAL_DMA_IRQHandler+0x54>
 80017c0:	076f      	lsls	r7, r5, #29
 80017c2:	d51d      	bpl.n	8001800 <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	0692      	lsls	r2, r2, #26
 80017c8:	d403      	bmi.n	80017d2 <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	f022 0204 	bic.w	r2, r2, #4
 80017d0:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017d2:	4a3f      	ldr	r2, [pc, #252]	; (80018d0 <HAL_DMA_IRQHandler+0x124>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d05d      	beq.n	8001894 <HAL_DMA_IRQHandler+0xe8>
 80017d8:	3214      	adds	r2, #20
 80017da:	4293      	cmp	r3, r2
 80017dc:	d062      	beq.n	80018a4 <HAL_DMA_IRQHandler+0xf8>
 80017de:	3214      	adds	r2, #20
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d069      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x10c>
 80017e4:	3214      	adds	r2, #20
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d06c      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x118>
 80017ea:	3214      	adds	r2, #20
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d05b      	beq.n	80018a8 <HAL_DMA_IRQHandler+0xfc>
 80017f0:	3214      	adds	r2, #20
 80017f2:	4293      	cmp	r3, r2
 80017f4:	bf0c      	ite	eq
 80017f6:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80017fa:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80017fe:	e04a      	b.n	8001896 <HAL_DMA_IRQHandler+0xea>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001800:	2202      	movs	r2, #2
 8001802:	408a      	lsls	r2, r1
 8001804:	4222      	tst	r2, r4
 8001806:	d022      	beq.n	800184e <HAL_DMA_IRQHandler+0xa2>
 8001808:	07af      	lsls	r7, r5, #30
 800180a:	d520      	bpl.n	800184e <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	0691      	lsls	r1, r2, #26
 8001810:	d406      	bmi.n	8001820 <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 8001812:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	f022 020a 	bic.w	r2, r2, #10
 800181a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800181c:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001820:	4a2b      	ldr	r2, [pc, #172]	; (80018d0 <HAL_DMA_IRQHandler+0x124>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d02c      	beq.n	8001880 <HAL_DMA_IRQHandler+0xd4>
 8001826:	3214      	adds	r2, #20
 8001828:	4293      	cmp	r3, r2
 800182a:	d043      	beq.n	80018b4 <HAL_DMA_IRQHandler+0x108>
 800182c:	3214      	adds	r2, #20
 800182e:	4293      	cmp	r3, r2
 8001830:	d045      	beq.n	80018be <HAL_DMA_IRQHandler+0x112>
 8001832:	3214      	adds	r2, #20
 8001834:	4293      	cmp	r3, r2
 8001836:	d048      	beq.n	80018ca <HAL_DMA_IRQHandler+0x11e>
 8001838:	3214      	adds	r2, #20
 800183a:	4293      	cmp	r3, r2
 800183c:	d037      	beq.n	80018ae <HAL_DMA_IRQHandler+0x102>
 800183e:	3214      	adds	r2, #20
 8001840:	4293      	cmp	r3, r2
 8001842:	bf0c      	ite	eq
 8001844:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001848:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 800184c:	e019      	b.n	8001882 <HAL_DMA_IRQHandler+0xd6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800184e:	2208      	movs	r2, #8
 8001850:	408a      	lsls	r2, r1
 8001852:	4222      	tst	r2, r4
 8001854:	d01c      	beq.n	8001890 <HAL_DMA_IRQHandler+0xe4>
 8001856:	072a      	lsls	r2, r5, #28
 8001858:	d51a      	bpl.n	8001890 <HAL_DMA_IRQHandler+0xe4>
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800185a:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 800185c:	2700      	movs	r7, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800185e:	681c      	ldr	r4, [r3, #0]
    if (hdma->XferErrorCallback != NULL)
 8001860:	6b05      	ldr	r5, [r0, #48]	; 0x30
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001862:	f024 040e 	bic.w	r4, r4, #14
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001866:	fa02 f101 	lsl.w	r1, r2, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800186a:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800186c:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800186e:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001870:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001874:	f880 7020 	strb.w	r7, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001878:	b155      	cbz	r5, 8001890 <HAL_DMA_IRQHandler+0xe4>
      hdma->XferErrorCallback(hdma);
 800187a:	462b      	mov	r3, r5
}
 800187c:	bcf0      	pop	{r4, r5, r6, r7}
      hdma->XferErrorCallback(hdma);
 800187e:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001880:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8001882:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001884:	4c13      	ldr	r4, [pc, #76]	; (80018d4 <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferCpltCallback != NULL)
 8001886:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001888:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 800188a:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800188e:	b93a      	cbnz	r2, 80018a0 <HAL_DMA_IRQHandler+0xf4>
}
 8001890:	bcf0      	pop	{r4, r5, r6, r7}
 8001892:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001894:	2304      	movs	r3, #4
 8001896:	490f      	ldr	r1, [pc, #60]	; (80018d4 <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferHalfCpltCallback != NULL)
 8001898:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800189a:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800189c:	2a00      	cmp	r2, #0
 800189e:	d0f7      	beq.n	8001890 <HAL_DMA_IRQHandler+0xe4>
}
 80018a0:	bcf0      	pop	{r4, r5, r6, r7}
      hdma->XferCpltCallback(hdma);
 80018a2:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80018a4:	2340      	movs	r3, #64	; 0x40
 80018a6:	e7f6      	b.n	8001896 <HAL_DMA_IRQHandler+0xea>
 80018a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80018ac:	e7f3      	b.n	8001896 <HAL_DMA_IRQHandler+0xea>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80018ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018b2:	e7e6      	b.n	8001882 <HAL_DMA_IRQHandler+0xd6>
 80018b4:	2320      	movs	r3, #32
 80018b6:	e7e4      	b.n	8001882 <HAL_DMA_IRQHandler+0xd6>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80018b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018bc:	e7eb      	b.n	8001896 <HAL_DMA_IRQHandler+0xea>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80018be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018c2:	e7de      	b.n	8001882 <HAL_DMA_IRQHandler+0xd6>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80018c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018c8:	e7e5      	b.n	8001896 <HAL_DMA_IRQHandler+0xea>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80018ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ce:	e7d8      	b.n	8001882 <HAL_DMA_IRQHandler+0xd6>
 80018d0:	40020008 	.word	0x40020008
 80018d4:	40020000 	.word	0x40020000

080018d8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80018d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint8_t index = 0;
  uint8_t nbiterations = 0;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80018dc:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8001ab4 <HAL_FLASH_Program+0x1dc>
{
 80018e0:	b083      	sub	sp, #12
  __HAL_LOCK(&pFlash);
 80018e2:	f898 4018 	ldrb.w	r4, [r8, #24]
 80018e6:	2c01      	cmp	r4, #1
 80018e8:	d103      	bne.n	80018f2 <HAL_FLASH_Program+0x1a>
 80018ea:	2002      	movs	r0, #2

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);

  return status;
}
 80018ec:	b003      	add	sp, #12
 80018ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018f2:	469a      	mov	sl, r3
  __HAL_LOCK(&pFlash);
 80018f4:	2301      	movs	r3, #1
 80018f6:	4693      	mov	fp, r2
 80018f8:	460d      	mov	r5, r1
 80018fa:	4681      	mov	r9, r0
 80018fc:	f888 3018 	strb.w	r3, [r8, #24]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001900:	f7ff fb02 	bl	8000f08 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001904:	4c6a      	ldr	r4, [pc, #424]	; (8001ab0 <HAL_FLASH_Program+0x1d8>)
  { 
    if (Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001906:	f24c 3750 	movw	r7, #50000	; 0xc350
  uint32_t tickstart = HAL_GetTick();
 800190a:	4606      	mov	r6, r0
 800190c:	e005      	b.n	800191a <HAL_FLASH_Program+0x42>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800190e:	f7ff fafb 	bl	8000f08 <HAL_GetTick>
 8001912:	1b80      	subs	r0, r0, r6
 8001914:	42b8      	cmp	r0, r7
 8001916:	f200 80c5 	bhi.w	8001aa4 <HAL_FLASH_Program+0x1cc>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800191a:	68e3      	ldr	r3, [r4, #12]
 800191c:	07d8      	lsls	r0, r3, #31
 800191e:	d4f6      	bmi.n	800190e <HAL_FLASH_Program+0x36>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001920:	68e3      	ldr	r3, [r4, #12]
 8001922:	0699      	lsls	r1, r3, #26
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001924:	bf44      	itt	mi
 8001926:	2320      	movmi	r3, #32
 8001928:	60e3      	strmi	r3, [r4, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800192a:	4b61      	ldr	r3, [pc, #388]	; (8001ab0 <HAL_FLASH_Program+0x1d8>)
 800192c:	68da      	ldr	r2, [r3, #12]
 800192e:	06d2      	lsls	r2, r2, #27
 8001930:	d405      	bmi.n	800193e <HAL_FLASH_Program+0x66>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001932:	69da      	ldr	r2, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001934:	07d7      	lsls	r7, r2, #31
 8001936:	d402      	bmi.n	800193e <HAL_FLASH_Program+0x66>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001938:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800193a:	075e      	lsls	r6, r3, #29
 800193c:	d52f      	bpl.n	800199e <HAL_FLASH_Program+0xc6>
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800193e:	4b5c      	ldr	r3, [pc, #368]	; (8001ab0 <HAL_FLASH_Program+0x1d8>)
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	f013 0310 	ands.w	r3, r3, #16
 8001946:	f000 80af 	beq.w	8001aa8 <HAL_FLASH_Program+0x1d0>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800194a:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800194e:	2114      	movs	r1, #20
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	f8c8 301c 	str.w	r3, [r8, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001958:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800195a:	4a55      	ldr	r2, [pc, #340]	; (8001ab0 <HAL_FLASH_Program+0x1d8>)
 800195c:	68d2      	ldr	r2, [r2, #12]
 800195e:	0754      	lsls	r4, r2, #29
 8001960:	d506      	bpl.n	8001970 <HAL_FLASH_Program+0x98>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001962:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001964:	f8d8 201c 	ldr.w	r2, [r8, #28]
 8001968:	f042 0201 	orr.w	r2, r2, #1
 800196c:	f8c8 201c 	str.w	r2, [r8, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001970:	4a4f      	ldr	r2, [pc, #316]	; (8001ab0 <HAL_FLASH_Program+0x1d8>)
 8001972:	69d1      	ldr	r1, [r2, #28]
 8001974:	07c8      	lsls	r0, r1, #31
 8001976:	d509      	bpl.n	800198c <HAL_FLASH_Program+0xb4>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001978:	f8d8 101c 	ldr.w	r1, [r8, #28]
 800197c:	f041 0104 	orr.w	r1, r1, #4
 8001980:	f8c8 101c 	str.w	r1, [r8, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001984:	69d1      	ldr	r1, [r2, #28]
 8001986:	f021 0101 	bic.w	r1, r1, #1
 800198a:	61d1      	str	r1, [r2, #28]
    return HAL_ERROR;
 800198c:	2001      	movs	r0, #1
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800198e:	4a48      	ldr	r2, [pc, #288]	; (8001ab0 <HAL_FLASH_Program+0x1d8>)
 8001990:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(&pFlash);
 8001992:	2300      	movs	r3, #0
 8001994:	f888 3018 	strb.w	r3, [r8, #24]
}
 8001998:	b003      	add	sp, #12
 800199a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800199e:	f1b9 0f01 	cmp.w	r9, #1
 80019a2:	f000 8083 	beq.w	8001aac <HAL_FLASH_Program+0x1d4>
      nbiterations = 2U;
 80019a6:	f1b9 0f02 	cmp.w	r9, #2
 80019aa:	bf14      	ite	ne
 80019ac:	2304      	movne	r3, #4
 80019ae:	2302      	moveq	r3, #2
      nbiterations = 4U;
 80019b0:	2700      	movs	r7, #0
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80019b2:	f24c 3650 	movw	r6, #50000	; 0xc350
 80019b6:	3b01      	subs	r3, #1
      nbiterations = 4U;
 80019b8:	46a9      	mov	r9, r5
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	3502      	adds	r5, #2
 80019be:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80019c2:	4c3b      	ldr	r4, [pc, #236]	; (8001ab0 <HAL_FLASH_Program+0x1d8>)
 80019c4:	9301      	str	r3, [sp, #4]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80019c6:	2300      	movs	r3, #0
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80019c8:	f1c7 0120 	rsb	r1, r7, #32
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80019cc:	f8c8 301c 	str.w	r3, [r8, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80019d0:	fa0a f101 	lsl.w	r1, sl, r1
 80019d4:	fa2b f307 	lsr.w	r3, fp, r7
 80019d8:	430b      	orrs	r3, r1
 80019da:	f1a7 0120 	sub.w	r1, r7, #32
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80019de:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80019e0:	fa2a f101 	lsr.w	r1, sl, r1
 80019e4:	430b      	orrs	r3, r1
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80019e6:	f042 0201 	orr.w	r2, r2, #1
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80019ea:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80019ec:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 80019ee:	f8a9 3000 	strh.w	r3, [r9]
  uint32_t tickstart = HAL_GetTick();
 80019f2:	f7ff fa89 	bl	8000f08 <HAL_GetTick>
 80019f6:	4605      	mov	r5, r0
 80019f8:	e004      	b.n	8001a04 <HAL_FLASH_Program+0x12c>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80019fa:	f7ff fa85 	bl	8000f08 <HAL_GetTick>
 80019fe:	1b40      	subs	r0, r0, r5
 8001a00:	42b0      	cmp	r0, r6
 8001a02:	d84b      	bhi.n	8001a9c <HAL_FLASH_Program+0x1c4>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001a04:	68e3      	ldr	r3, [r4, #12]
 8001a06:	07d9      	lsls	r1, r3, #31
 8001a08:	d4f7      	bmi.n	80019fa <HAL_FLASH_Program+0x122>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001a0a:	68e3      	ldr	r3, [r4, #12]
 8001a0c:	069a      	lsls	r2, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001a0e:	bf44      	itt	mi
 8001a10:	2320      	movmi	r3, #32
 8001a12:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001a14:	68e3      	ldr	r3, [r4, #12]
 8001a16:	06db      	lsls	r3, r3, #27
 8001a18:	d406      	bmi.n	8001a28 <HAL_FLASH_Program+0x150>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001a1a:	69e3      	ldr	r3, [r4, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001a1c:	07dd      	lsls	r5, r3, #31
 8001a1e:	d403      	bmi.n	8001a28 <HAL_FLASH_Program+0x150>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001a20:	68e0      	ldr	r0, [r4, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001a22:	f010 0004 	ands.w	r0, r0, #4
 8001a26:	d02e      	beq.n	8001a86 <HAL_FLASH_Program+0x1ae>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <HAL_FLASH_Program+0x1d8>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	f013 0310 	ands.w	r3, r3, #16
 8001a30:	d036      	beq.n	8001aa0 <HAL_FLASH_Program+0x1c8>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001a32:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8001a36:	2114      	movs	r1, #20
 8001a38:	f043 0302 	orr.w	r3, r3, #2
 8001a3c:	f8c8 301c 	str.w	r3, [r8, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001a40:	2310      	movs	r3, #16
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001a42:	4a1b      	ldr	r2, [pc, #108]	; (8001ab0 <HAL_FLASH_Program+0x1d8>)
 8001a44:	68d2      	ldr	r2, [r2, #12]
 8001a46:	0750      	lsls	r0, r2, #29
 8001a48:	d506      	bpl.n	8001a58 <HAL_FLASH_Program+0x180>
    flags |= FLASH_FLAG_PGERR;
 8001a4a:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001a4c:	f8d8 201c 	ldr.w	r2, [r8, #28]
 8001a50:	f042 0201 	orr.w	r2, r2, #1
 8001a54:	f8c8 201c 	str.w	r2, [r8, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001a58:	4a15      	ldr	r2, [pc, #84]	; (8001ab0 <HAL_FLASH_Program+0x1d8>)
 8001a5a:	69d1      	ldr	r1, [r2, #28]
 8001a5c:	07c9      	lsls	r1, r1, #31
 8001a5e:	d509      	bpl.n	8001a74 <HAL_FLASH_Program+0x19c>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001a60:	f8d8 101c 	ldr.w	r1, [r8, #28]
 8001a64:	f041 0104 	orr.w	r1, r1, #4
 8001a68:	f8c8 101c 	str.w	r1, [r8, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001a6c:	69d1      	ldr	r1, [r2, #28]
 8001a6e:	f021 0101 	bic.w	r1, r1, #1
 8001a72:	61d1      	str	r1, [r2, #28]
    return HAL_ERROR;
 8001a74:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001a76:	4a0e      	ldr	r2, [pc, #56]	; (8001ab0 <HAL_FLASH_Program+0x1d8>)
 8001a78:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001a7a:	4a0d      	ldr	r2, [pc, #52]	; (8001ab0 <HAL_FLASH_Program+0x1d8>)
 8001a7c:	6913      	ldr	r3, [r2, #16]
 8001a7e:	f023 0301 	bic.w	r3, r3, #1
 8001a82:	6113      	str	r3, [r2, #16]
 8001a84:	e785      	b.n	8001992 <HAL_FLASH_Program+0xba>
 8001a86:	6923      	ldr	r3, [r4, #16]
 8001a88:	f109 0902 	add.w	r9, r9, #2
 8001a8c:	f023 0301 	bic.w	r3, r3, #1
 8001a90:	6123      	str	r3, [r4, #16]
    for (index = 0U; index < nbiterations; index++)
 8001a92:	9b01      	ldr	r3, [sp, #4]
 8001a94:	3710      	adds	r7, #16
 8001a96:	454b      	cmp	r3, r9
 8001a98:	d195      	bne.n	80019c6 <HAL_FLASH_Program+0xee>
 8001a9a:	e77a      	b.n	8001992 <HAL_FLASH_Program+0xba>
        return HAL_TIMEOUT;
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	e7ec      	b.n	8001a7a <HAL_FLASH_Program+0x1a2>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001aa0:	2104      	movs	r1, #4
 8001aa2:	e7ce      	b.n	8001a42 <HAL_FLASH_Program+0x16a>
        return HAL_TIMEOUT;
 8001aa4:	2003      	movs	r0, #3
 8001aa6:	e774      	b.n	8001992 <HAL_FLASH_Program+0xba>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001aa8:	2104      	movs	r1, #4
 8001aaa:	e756      	b.n	800195a <HAL_FLASH_Program+0x82>
      nbiterations = 1U;
 8001aac:	464b      	mov	r3, r9
 8001aae:	e77f      	b.n	80019b0 <HAL_FLASH_Program+0xd8>
 8001ab0:	40022000 	.word	0x40022000
 8001ab4:	20001210 	.word	0x20001210

08001ab8 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_FLASH_Unlock+0x1c>)
 8001aba:	6918      	ldr	r0, [r3, #16]
 8001abc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001ac0:	d006      	beq.n	8001ad0 <HAL_FLASH_Unlock+0x18>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ac2:	4905      	ldr	r1, [pc, #20]	; (8001ad8 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ac4:	4a05      	ldr	r2, [pc, #20]	; (8001adc <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ac6:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ac8:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001aca:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8001acc:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40022000 	.word	0x40022000
 8001ad8:	45670123 	.word	0x45670123
 8001adc:	cdef89ab 	.word	0xcdef89ab

08001ae0 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001ae0:	4a03      	ldr	r2, [pc, #12]	; (8001af0 <HAL_FLASH_Lock+0x10>)
}
 8001ae2:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001ae4:	6913      	ldr	r3, [r2, #16]
 8001ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aea:	6113      	str	r3, [r2, #16]
}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40022000 	.word	0x40022000

08001af4 <FLASH_WaitForLastOperation>:
{
 8001af4:	b570      	push	{r4, r5, r6, lr}
 8001af6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001af8:	f7ff fa06 	bl	8000f08 <HAL_GetTick>
 8001afc:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001afe:	4d29      	ldr	r5, [pc, #164]	; (8001ba4 <FLASH_WaitForLastOperation+0xb0>)
 8001b00:	1c60      	adds	r0, r4, #1
 8001b02:	d131      	bne.n	8001b68 <FLASH_WaitForLastOperation+0x74>
 8001b04:	4a27      	ldr	r2, [pc, #156]	; (8001ba4 <FLASH_WaitForLastOperation+0xb0>)
 8001b06:	68d3      	ldr	r3, [r2, #12]
 8001b08:	07d9      	lsls	r1, r3, #31
 8001b0a:	d4fc      	bmi.n	8001b06 <FLASH_WaitForLastOperation+0x12>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001b0c:	4b25      	ldr	r3, [pc, #148]	; (8001ba4 <FLASH_WaitForLastOperation+0xb0>)
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	0696      	lsls	r6, r2, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b12:	bf44      	itt	mi
 8001b14:	2220      	movmi	r2, #32
 8001b16:	60da      	strmi	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001b18:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <FLASH_WaitForLastOperation+0xb0>)
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	06d5      	lsls	r5, r2, #27
 8001b1e:	d402      	bmi.n	8001b26 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001b20:	69da      	ldr	r2, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001b22:	07d4      	lsls	r4, r2, #31
 8001b24:	d533      	bpl.n	8001b8e <FLASH_WaitForLastOperation+0x9a>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001b26:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <FLASH_WaitForLastOperation+0xb0>)
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	f013 0310 	ands.w	r3, r3, #16
 8001b2e:	d126      	bne.n	8001b7e <FLASH_WaitForLastOperation+0x8a>
 8001b30:	2104      	movs	r1, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001b32:	4a1c      	ldr	r2, [pc, #112]	; (8001ba4 <FLASH_WaitForLastOperation+0xb0>)
 8001b34:	68d2      	ldr	r2, [r2, #12]
 8001b36:	0750      	lsls	r0, r2, #29
 8001b38:	d505      	bpl.n	8001b46 <FLASH_WaitForLastOperation+0x52>
    flags |= FLASH_FLAG_PGERR;
 8001b3a:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001b3c:	491a      	ldr	r1, [pc, #104]	; (8001ba8 <FLASH_WaitForLastOperation+0xb4>)
 8001b3e:	69ca      	ldr	r2, [r1, #28]
 8001b40:	f042 0201 	orr.w	r2, r2, #1
 8001b44:	61ca      	str	r2, [r1, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001b46:	4a17      	ldr	r2, [pc, #92]	; (8001ba4 <FLASH_WaitForLastOperation+0xb0>)
 8001b48:	69d1      	ldr	r1, [r2, #28]
 8001b4a:	07c9      	lsls	r1, r1, #31
 8001b4c:	d508      	bpl.n	8001b60 <FLASH_WaitForLastOperation+0x6c>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001b4e:	4816      	ldr	r0, [pc, #88]	; (8001ba8 <FLASH_WaitForLastOperation+0xb4>)
 8001b50:	69c1      	ldr	r1, [r0, #28]
 8001b52:	f041 0104 	orr.w	r1, r1, #4
 8001b56:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001b58:	69d1      	ldr	r1, [r2, #28]
 8001b5a:	f021 0101 	bic.w	r1, r1, #1
 8001b5e:	61d1      	str	r1, [r2, #28]
    return HAL_ERROR;
 8001b60:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001b62:	4a10      	ldr	r2, [pc, #64]	; (8001ba4 <FLASH_WaitForLastOperation+0xb0>)
 8001b64:	60d3      	str	r3, [r2, #12]
}
 8001b66:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001b68:	68eb      	ldr	r3, [r5, #12]
 8001b6a:	07db      	lsls	r3, r3, #31
 8001b6c:	d5ce      	bpl.n	8001b0c <FLASH_WaitForLastOperation+0x18>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001b6e:	b124      	cbz	r4, 8001b7a <FLASH_WaitForLastOperation+0x86>
 8001b70:	f7ff f9ca 	bl	8000f08 <HAL_GetTick>
 8001b74:	1b80      	subs	r0, r0, r6
 8001b76:	4284      	cmp	r4, r0
 8001b78:	d2c2      	bcs.n	8001b00 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8001b7a:	2003      	movs	r0, #3
 8001b7c:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001b7e:	480a      	ldr	r0, [pc, #40]	; (8001ba8 <FLASH_WaitForLastOperation+0xb4>)
 8001b80:	2114      	movs	r1, #20
 8001b82:	69c2      	ldr	r2, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001b84:	2310      	movs	r3, #16
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001b86:	f042 0202 	orr.w	r2, r2, #2
 8001b8a:	61c2      	str	r2, [r0, #28]
 8001b8c:	e7d1      	b.n	8001b32 <FLASH_WaitForLastOperation+0x3e>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001b8e:	68d8      	ldr	r0, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001b90:	f010 0004 	ands.w	r0, r0, #4
 8001b94:	d0e7      	beq.n	8001b66 <FLASH_WaitForLastOperation+0x72>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001b96:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <FLASH_WaitForLastOperation+0xb0>)
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	f013 0310 	ands.w	r3, r3, #16
 8001b9e:	d0c7      	beq.n	8001b30 <FLASH_WaitForLastOperation+0x3c>
 8001ba0:	e7ed      	b.n	8001b7e <FLASH_WaitForLastOperation+0x8a>
 8001ba2:	bf00      	nop
 8001ba4:	40022000 	.word	0x40022000
 8001ba8:	20001210 	.word	0x20001210

08001bac <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0U;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001bb0:	4e2e      	ldr	r6, [pc, #184]	; (8001c6c <HAL_FLASHEx_Erase+0xc0>)
 8001bb2:	7e33      	ldrb	r3, [r6, #24]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d043      	beq.n	8001c40 <HAL_FLASHEx_Erase+0x94>
 8001bb8:	2201      	movs	r2, #1

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001bba:	6803      	ldr	r3, [r0, #0]
 8001bbc:	4681      	mov	r9, r0
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8001bc2:	7632      	strb	r2, [r6, #24]
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001bc4:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001bc8:	d032      	beq.n	8001c30 <HAL_FLASHEx_Erase+0x84>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001bca:	f7ff ff93 	bl	8001af4 <FLASH_WaitForLastOperation>
 8001bce:	bb90      	cbnz	r0, 8001c36 <HAL_FLASHEx_Erase+0x8a>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bd4:	f8c8 3000 	str.w	r3, [r8]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001bd8:	f8d9 5008 	ldr.w	r5, [r9, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001bdc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8001be0:	eb05 2383 	add.w	r3, r5, r3, lsl #10
        for(address = pEraseInit->PageAddress;
 8001be4:	429d      	cmp	r5, r3
 8001be6:	d226      	bcs.n	8001c36 <HAL_FLASHEx_Erase+0x8a>
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001be8:	4607      	mov	r7, r0
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001bea:	4c21      	ldr	r4, [pc, #132]	; (8001c70 <HAL_FLASHEx_Erase+0xc4>)
 8001bec:	e009      	b.n	8001c02 <HAL_FLASHEx_Erase+0x56>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001bee:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8001bf2:	f8d9 3008 	ldr.w	r3, [r9, #8]
            address += FLASH_PAGE_SIZE)
 8001bf6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001bfa:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 8001bfe:	42ab      	cmp	r3, r5
 8001c00:	d91a      	bls.n	8001c38 <HAL_FLASHEx_Erase+0x8c>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c02:	61f7      	str	r7, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001c04:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c06:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001c0a:	f043 0302 	orr.w	r3, r3, #2
 8001c0e:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001c10:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001c12:	6923      	ldr	r3, [r4, #16]
 8001c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c18:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c1a:	f7ff ff6b 	bl	8001af4 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001c1e:	6923      	ldr	r3, [r4, #16]
 8001c20:	f023 0302 	bic.w	r3, r3, #2
 8001c24:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8001c26:	2800      	cmp	r0, #0
 8001c28:	d0e1      	beq.n	8001bee <HAL_FLASHEx_Erase+0x42>
            *PageError = address;
 8001c2a:	f8c8 5000 	str.w	r5, [r8]
            break;
 8001c2e:	e003      	b.n	8001c38 <HAL_FLASHEx_Erase+0x8c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001c30:	f7ff ff60 	bl	8001af4 <FLASH_WaitForLastOperation>
 8001c34:	b138      	cbz	r0, 8001c46 <HAL_FLASHEx_Erase+0x9a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001c36:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8001c38:	2300      	movs	r3, #0
 8001c3a:	7633      	strb	r3, [r6, #24]
  return status;
 8001c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8001c40:	2002      	movs	r0, #2
}
 8001c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001c46:	4c0a      	ldr	r4, [pc, #40]	; (8001c70 <HAL_FLASHEx_Erase+0xc4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c48:	61f0      	str	r0, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001c4a:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c4c:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001c50:	f043 0304 	orr.w	r3, r3, #4
 8001c54:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001c56:	6923      	ldr	r3, [r4, #16]
 8001c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c5c:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c5e:	f7ff ff49 	bl	8001af4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001c62:	6923      	ldr	r3, [r4, #16]
 8001c64:	f023 0304 	bic.w	r3, r3, #4
 8001c68:	6123      	str	r3, [r4, #16]
 8001c6a:	e7e5      	b.n	8001c38 <HAL_FLASHEx_Erase+0x8c>
 8001c6c:	20001210 	.word	0x20001210
 8001c70:	40022000 	.word	0x40022000

08001c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001c78:	f04f 0800 	mov.w	r8, #0
{
 8001c7c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001c7e:	4643      	mov	r3, r8
{
 8001c80:	f06f 061f 	mvn.w	r6, #31
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c84:	f8df e1dc 	ldr.w	lr, [pc, #476]	; 8001e64 <HAL_GPIO_Init+0x1f0>
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c88:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 8001e68 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c8c:	4f6f      	ldr	r7, [pc, #444]	; (8001e4c <HAL_GPIO_Init+0x1d8>)
      switch (GPIO_Init->Mode)
 8001c8e:	9000      	str	r0, [sp, #0]
 8001c90:	e005      	b.n	8001c9e <HAL_GPIO_Init+0x2a>
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001c92:	3301      	adds	r3, #1
 8001c94:	2b10      	cmp	r3, #16
 8001c96:	f106 0604 	add.w	r6, r6, #4
 8001c9a:	f000 8089 	beq.w	8001db0 <HAL_GPIO_Init+0x13c>
    ioposition = (0x01U << position);
 8001c9e:	2201      	movs	r2, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ca0:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8001ca2:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ca4:	4014      	ands	r4, r2
    if (iocurrent == ioposition)
 8001ca6:	42a2      	cmp	r2, r4
 8001ca8:	d1f3      	bne.n	8001c92 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8001caa:	684d      	ldr	r5, [r1, #4]
 8001cac:	2d12      	cmp	r5, #18
 8001cae:	f000 80a3 	beq.w	8001df8 <HAL_GPIO_Init+0x184>
 8001cb2:	f200 808c 	bhi.w	8001dce <HAL_GPIO_Init+0x15a>
 8001cb6:	2d02      	cmp	r5, #2
 8001cb8:	f000 80a5 	beq.w	8001e06 <HAL_GPIO_Init+0x192>
 8001cbc:	f240 8081 	bls.w	8001dc2 <HAL_GPIO_Init+0x14e>
 8001cc0:	2d03      	cmp	r5, #3
 8001cc2:	f000 809d 	beq.w	8001e00 <HAL_GPIO_Init+0x18c>
 8001cc6:	2d11      	cmp	r5, #17
 8001cc8:	d102      	bne.n	8001cd0 <HAL_GPIO_Init+0x5c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cca:	68ca      	ldr	r2, [r1, #12]
 8001ccc:	f102 0804 	add.w	r8, r2, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cd0:	2cff      	cmp	r4, #255	; 0xff
 8001cd2:	d870      	bhi.n	8001db6 <HAL_GPIO_Init+0x142>
 8001cd4:	9a00      	ldr	r2, [sp, #0]
 8001cd6:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8001cda:	4691      	mov	r9, r2
 8001cdc:	6812      	ldr	r2, [r2, #0]
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cde:	250f      	movs	r5, #15
 8001ce0:	fa05 fb0a 	lsl.w	fp, r5, sl
 8001ce4:	ea22 020b 	bic.w	r2, r2, fp
 8001ce8:	fa08 fa0a 	lsl.w	sl, r8, sl
 8001cec:	ea42 020a 	orr.w	r2, r2, sl
 8001cf0:	f8c9 2000 	str.w	r2, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cf4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001cf8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001cfc:	d0c9      	beq.n	8001c92 <HAL_GPIO_Init+0x1e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cfe:	f8de 9018 	ldr.w	r9, [lr, #24]
 8001d02:	f023 0203 	bic.w	r2, r3, #3
 8001d06:	f049 0901 	orr.w	r9, r9, #1
 8001d0a:	f8ce 9018 	str.w	r9, [lr, #24]
 8001d0e:	f8de 9018 	ldr.w	r9, [lr, #24]
 8001d12:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001d16:	f009 0901 	and.w	r9, r9, #1
 8001d1a:	f8cd 900c 	str.w	r9, [sp, #12]
 8001d1e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001d22:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d26:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001d2a:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001d2e:	f8d2 b008 	ldr.w	fp, [r2, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001d32:	fa05 f509 	lsl.w	r5, r5, r9
 8001d36:	ea2b 0005 	bic.w	r0, fp, r5
 8001d3a:	9001      	str	r0, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d3c:	9800      	ldr	r0, [sp, #0]
 8001d3e:	4560      	cmp	r0, ip
 8001d40:	d077      	beq.n	8001e32 <HAL_GPIO_Init+0x1be>
 8001d42:	4d43      	ldr	r5, [pc, #268]	; (8001e50 <HAL_GPIO_Init+0x1dc>)
 8001d44:	42a8      	cmp	r0, r5
 8001d46:	d077      	beq.n	8001e38 <HAL_GPIO_Init+0x1c4>
 8001d48:	4d42      	ldr	r5, [pc, #264]	; (8001e54 <HAL_GPIO_Init+0x1e0>)
 8001d4a:	42a8      	cmp	r0, r5
 8001d4c:	d079      	beq.n	8001e42 <HAL_GPIO_Init+0x1ce>
 8001d4e:	4d42      	ldr	r5, [pc, #264]	; (8001e58 <HAL_GPIO_Init+0x1e4>)
 8001d50:	42a8      	cmp	r0, r5
 8001d52:	bf0c      	ite	eq
 8001d54:	f04f 0b03 	moveq.w	fp, #3
 8001d58:	f04f 0b04 	movne.w	fp, #4
 8001d5c:	fa0b f909 	lsl.w	r9, fp, r9
 8001d60:	9801      	ldr	r0, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d62:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d66:	ea40 0509 	orr.w	r5, r0, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8001d6a:	6095      	str	r5, [r2, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001d6c:	683a      	ldr	r2, [r7, #0]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001d6e:	f103 0301 	add.w	r3, r3, #1
          SET_BIT(EXTI->IMR, iocurrent);
 8001d72:	bf14      	ite	ne
 8001d74:	4322      	orrne	r2, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d76:	43a2      	biceq	r2, r4
 8001d78:	603a      	str	r2, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001d7a:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d7c:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001d80:	bf14      	ite	ne
 8001d82:	4322      	orrne	r2, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d84:	43a2      	biceq	r2, r4
 8001d86:	607a      	str	r2, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d88:	68ba      	ldr	r2, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d8a:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d8e:	bf14      	ite	ne
 8001d90:	4322      	orrne	r2, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d92:	43a2      	biceq	r2, r4
 8001d94:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d96:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d98:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d9c:	bf14      	ite	ne
 8001d9e:	4314      	orrne	r4, r2
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001da0:	ea22 0404 	biceq.w	r4, r2, r4
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001da4:	2b10      	cmp	r3, #16
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001da6:	60fc      	str	r4, [r7, #12]
 8001da8:	f106 0604 	add.w	r6, r6, #4
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001dac:	f47f af77 	bne.w	8001c9e <HAL_GPIO_Init+0x2a>
        }
      }
    }
  }
}
 8001db0:	b005      	add	sp, #20
 8001db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001db6:	9800      	ldr	r0, [sp, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8001db8:	46b2      	mov	sl, r6
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dba:	6842      	ldr	r2, [r0, #4]
 8001dbc:	f100 0904 	add.w	r9, r0, #4
 8001dc0:	e78d      	b.n	8001cde <HAL_GPIO_Init+0x6a>
      switch (GPIO_Init->Mode)
 8001dc2:	b1a5      	cbz	r5, 8001dee <HAL_GPIO_Init+0x17a>
 8001dc4:	2d01      	cmp	r5, #1
 8001dc6:	d183      	bne.n	8001cd0 <HAL_GPIO_Init+0x5c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dc8:	f8d1 800c 	ldr.w	r8, [r1, #12]
          break;
 8001dcc:	e780      	b.n	8001cd0 <HAL_GPIO_Init+0x5c>
      switch (GPIO_Init->Mode)
 8001dce:	4823      	ldr	r0, [pc, #140]	; (8001e5c <HAL_GPIO_Init+0x1e8>)
 8001dd0:	4285      	cmp	r5, r0
 8001dd2:	d00c      	beq.n	8001dee <HAL_GPIO_Init+0x17a>
 8001dd4:	d91b      	bls.n	8001e0e <HAL_GPIO_Init+0x19a>
 8001dd6:	4822      	ldr	r0, [pc, #136]	; (8001e60 <HAL_GPIO_Init+0x1ec>)
 8001dd8:	4285      	cmp	r5, r0
 8001dda:	d008      	beq.n	8001dee <HAL_GPIO_Init+0x17a>
 8001ddc:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8001de0:	4285      	cmp	r5, r0
 8001de2:	d004      	beq.n	8001dee <HAL_GPIO_Init+0x17a>
 8001de4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8001e6c <HAL_GPIO_Init+0x1f8>
 8001de8:	454d      	cmp	r5, r9
 8001dea:	f47f af71 	bne.w	8001cd0 <HAL_GPIO_Init+0x5c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dee:	688d      	ldr	r5, [r1, #8]
 8001df0:	b9bd      	cbnz	r5, 8001e22 <HAL_GPIO_Init+0x1ae>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001df2:	f04f 0804 	mov.w	r8, #4
 8001df6:	e76b      	b.n	8001cd0 <HAL_GPIO_Init+0x5c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001df8:	68ca      	ldr	r2, [r1, #12]
 8001dfa:	f102 080c 	add.w	r8, r2, #12
          break;
 8001dfe:	e767      	b.n	8001cd0 <HAL_GPIO_Init+0x5c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e00:	f04f 0800 	mov.w	r8, #0
 8001e04:	e764      	b.n	8001cd0 <HAL_GPIO_Init+0x5c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e06:	68ca      	ldr	r2, [r1, #12]
 8001e08:	f102 0808 	add.w	r8, r2, #8
          break;
 8001e0c:	e760      	b.n	8001cd0 <HAL_GPIO_Init+0x5c>
      switch (GPIO_Init->Mode)
 8001e0e:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8001e70 <HAL_GPIO_Init+0x1fc>
 8001e12:	454d      	cmp	r5, r9
 8001e14:	d0eb      	beq.n	8001dee <HAL_GPIO_Init+0x17a>
 8001e16:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001e1a:	454d      	cmp	r5, r9
 8001e1c:	f47f af58 	bne.w	8001cd0 <HAL_GPIO_Init+0x5c>
 8001e20:	e7e5      	b.n	8001dee <HAL_GPIO_Init+0x17a>
            GPIOx->BSRR = ioposition;
 8001e22:	9800      	ldr	r0, [sp, #0]
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e24:	2d01      	cmp	r5, #1
            GPIOx->BSRR = ioposition;
 8001e26:	bf0c      	ite	eq
 8001e28:	6102      	streq	r2, [r0, #16]
            GPIOx->BRR = ioposition;
 8001e2a:	6142      	strne	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e2c:	f04f 0808 	mov.w	r8, #8
 8001e30:	e74e      	b.n	8001cd0 <HAL_GPIO_Init+0x5c>
 8001e32:	f04f 0900 	mov.w	r9, #0
 8001e36:	e793      	b.n	8001d60 <HAL_GPIO_Init+0xec>
 8001e38:	f04f 0b01 	mov.w	fp, #1
 8001e3c:	fa0b f909 	lsl.w	r9, fp, r9
 8001e40:	e78e      	b.n	8001d60 <HAL_GPIO_Init+0xec>
 8001e42:	f04f 0b02 	mov.w	fp, #2
 8001e46:	fa0b f909 	lsl.w	r9, fp, r9
 8001e4a:	e789      	b.n	8001d60 <HAL_GPIO_Init+0xec>
 8001e4c:	40010400 	.word	0x40010400
 8001e50:	40010c00 	.word	0x40010c00
 8001e54:	40011000 	.word	0x40011000
 8001e58:	40011400 	.word	0x40011400
 8001e5c:	10210000 	.word	0x10210000
 8001e60:	10310000 	.word	0x10310000
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40010800 	.word	0x40010800
 8001e6c:	10220000 	.word	0x10220000
 8001e70:	10110000 	.word	0x10110000

08001e74 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e74:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001e76:	4905      	ldr	r1, [pc, #20]	; (8001e8c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001e78:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8001e7a:	4a05      	ldr	r2, [pc, #20]	; (8001e90 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e7c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001e80:	5ccb      	ldrb	r3, [r1, r3]
 8001e82:	6810      	ldr	r0, [r2, #0]
}    
 8001e84:	40d8      	lsrs	r0, r3
 8001e86:	4770      	bx	lr
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	08009d14 	.word	0x08009d14
 8001e90:	200000b0 	.word	0x200000b0

08001e94 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001e96:	4905      	ldr	r1, [pc, #20]	; (8001eac <HAL_RCC_GetPCLK2Freq+0x18>)
 8001e98:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8001e9a:	4a05      	ldr	r2, [pc, #20]	; (8001eb0 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e9c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001ea0:	5ccb      	ldrb	r3, [r1, r3]
 8001ea2:	6810      	ldr	r0, [r2, #0]
} 
 8001ea4:	40d8      	lsrs	r0, r3
 8001ea6:	4770      	bx	lr
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	08009d14 	.word	0x08009d14
 8001eb0:	200000b0 	.word	0x200000b0

08001eb4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001eb8:	4682      	mov	sl, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001eba:	6804      	ldr	r4, [r0, #0]
 8001ebc:	68c1      	ldr	r1, [r0, #12]
 8001ebe:	6922      	ldr	r2, [r4, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ec0:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ec2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	6122      	str	r2, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, 
 8001eca:	68e2      	ldr	r2, [r4, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ecc:	6900      	ldr	r0, [r0, #16]
 8001ece:	f8da 1014 	ldr.w	r1, [sl, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001ed2:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ed6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 8001ed8:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001edc:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	60e3      	str	r3, [r4, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ee2:	6963      	ldr	r3, [r4, #20]
 8001ee4:	f8da 1018 	ldr.w	r1, [sl, #24]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001ee8:	4a51      	ldr	r2, [pc, #324]	; (8002030 <UART_SetConfig+0x17c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eee:	430b      	orrs	r3, r1
  if(huart->Instance == USART1)
 8001ef0:	4294      	cmp	r4, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ef2:	6163      	str	r3, [r4, #20]
  if(huart->Instance == USART1)
 8001ef4:	d059      	beq.n	8001faa <UART_SetConfig+0xf6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001ef6:	f7ff ffbd 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 8001efa:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001efe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f0c:	4f49      	ldr	r7, [pc, #292]	; (8002034 <UART_SetConfig+0x180>)
 8001f0e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001f12:	fba7 2303 	umull	r2, r3, r7, r3
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	011d      	lsls	r5, r3, #4
 8001f1a:	f7ff ffab 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 8001f1e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001f22:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f26:	0093      	lsls	r3, r2, #2
 8001f28:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f2c:	fbb0 f6f3 	udiv	r6, r0, r3
 8001f30:	f7ff ffa0 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 8001f34:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001f38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f3c:	0093      	lsls	r3, r2, #2
 8001f3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f46:	fba7 2303 	umull	r2, r3, r7, r3
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	fb08 6313 	mls	r3, r8, r3, r6
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	3332      	adds	r3, #50	; 0x32
 8001f54:	fba7 2303 	umull	r2, r3, r7, r3
 8001f58:	095b      	lsrs	r3, r3, #5
 8001f5a:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8001f5e:	f7ff ff89 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 8001f62:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001f66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f6e:	0093      	lsls	r3, r2, #2
 8001f70:	fbb0 f9f3 	udiv	r9, r0, r3
 8001f74:	f7ff ff7e 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 8001f78:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001f7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f8a:	fba7 2303 	umull	r2, r3, r7, r3
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	fb08 9313 	mls	r3, r8, r3, r9
 8001f94:	011b      	lsls	r3, r3, #4
 8001f96:	3332      	adds	r3, #50	; 0x32
 8001f98:	fba7 2303 	umull	r2, r3, r7, r3
 8001f9c:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8001fa0:	4333      	orrs	r3, r6
 8001fa2:	442b      	add	r3, r5
 8001fa4:	60a3      	str	r3, [r4, #8]
 8001fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001faa:	f7ff ff73 	bl	8001e94 <HAL_RCC_GetPCLK2Freq>
 8001fae:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001fb2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001fb6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fc0:	4f1c      	ldr	r7, [pc, #112]	; (8002034 <UART_SetConfig+0x180>)
 8001fc2:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001fc6:	fba7 2303 	umull	r2, r3, r7, r3
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	011d      	lsls	r5, r3, #4
 8001fce:	f7ff ff61 	bl	8001e94 <HAL_RCC_GetPCLK2Freq>
 8001fd2:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001fd6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001fda:	0093      	lsls	r3, r2, #2
 8001fdc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001fe0:	fbb0 f6f3 	udiv	r6, r0, r3
 8001fe4:	f7ff ff56 	bl	8001e94 <HAL_RCC_GetPCLK2Freq>
 8001fe8:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001fec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ff0:	0093      	lsls	r3, r2, #2
 8001ff2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ffa:	fba7 2303 	umull	r2, r3, r7, r3
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	fb08 6313 	mls	r3, r8, r3, r6
 8002004:	011b      	lsls	r3, r3, #4
 8002006:	3332      	adds	r3, #50	; 0x32
 8002008:	fba7 2303 	umull	r2, r3, r7, r3
 800200c:	095b      	lsrs	r3, r3, #5
 800200e:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8002012:	f7ff ff3f 	bl	8001e94 <HAL_RCC_GetPCLK2Freq>
 8002016:	f8da 2004 	ldr.w	r2, [sl, #4]
 800201a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800201e:	0093      	lsls	r3, r2, #2
 8002020:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002024:	fbb0 f9f3 	udiv	r9, r0, r3
 8002028:	f7ff ff34 	bl	8001e94 <HAL_RCC_GetPCLK2Freq>
 800202c:	e7a4      	b.n	8001f78 <UART_SetConfig+0xc4>
 800202e:	bf00      	nop
 8002030:	40013800 	.word	0x40013800
 8002034:	51eb851f 	.word	0x51eb851f

08002038 <HAL_UART_Init>:
  if(huart == NULL)
 8002038:	b360      	cbz	r0, 8002094 <HAL_UART_Init+0x5c>
{
 800203a:	b538      	push	{r3, r4, r5, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 800203c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002040:	4604      	mov	r4, r0
 8002042:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002046:	b303      	cbz	r3, 800208a <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8002048:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800204a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800204c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002050:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002052:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002054:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002058:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800205a:	f7ff ff2b 	bl	8001eb4 <UART_SetConfig>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800205e:	2500      	movs	r5, #0
  huart->gState= HAL_UART_STATE_READY;
 8002060:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002062:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8002064:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800206c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800206e:	695a      	ldr	r2, [r3, #20]
 8002070:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002074:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800207c:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800207e:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002080:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002084:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
  return HAL_OK;
 8002088:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 800208a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800208e:	f001 fb37 	bl	8003700 <HAL_UART_MspInit>
 8002092:	e7d9      	b.n	8002048 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8002094:	2001      	movs	r0, #1
 8002096:	4770      	bx	lr

08002098 <HAL_UART_Transmit_DMA>:
{
 8002098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 800209a:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 800209e:	2c20      	cmp	r4, #32
 80020a0:	d001      	beq.n	80020a6 <HAL_UART_Transmit_DMA+0xe>
    return HAL_BUSY;
 80020a2:	2002      	movs	r0, #2
}
 80020a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((pData == NULL) || (Size == 0U))
 80020a6:	b351      	cbz	r1, 80020fe <HAL_UART_Transmit_DMA+0x66>
 80020a8:	b34a      	cbz	r2, 80020fe <HAL_UART_Transmit_DMA+0x66>
    __HAL_LOCK(huart);
 80020aa:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 80020ae:	2c01      	cmp	r4, #1
 80020b0:	d0f7      	beq.n	80020a2 <HAL_UART_Transmit_DMA+0xa>
 80020b2:	4604      	mov	r4, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020b4:	2600      	movs	r6, #0
 80020b6:	4613      	mov	r3, r2
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020b8:	f04f 0e21 	mov.w	lr, #33	; 0x21
    __HAL_LOCK(huart);
 80020bc:	2701      	movs	r7, #1
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80020be:	6b00      	ldr	r0, [r0, #48]	; 0x30
    huart->TxXferCount = Size;
 80020c0:	84e2      	strh	r2, [r4, #38]	; 0x26
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80020c2:	4a10      	ldr	r2, [pc, #64]	; (8002104 <HAL_UART_Transmit_DMA+0x6c>)
    huart->TxXferSize = Size;
 80020c4:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020c6:	63e6      	str	r6, [r4, #60]	; 0x3c
    __HAL_LOCK(huart);
 80020c8:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
    huart->pTxBuffPtr = pData;
 80020cc:	6221      	str	r1, [r4, #32]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020ce:	f884 e039 	strb.w	lr, [r4, #57]	; 0x39
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80020d2:	4f0d      	ldr	r7, [pc, #52]	; (8002108 <HAL_UART_Transmit_DMA+0x70>)
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80020d4:	4d0d      	ldr	r5, [pc, #52]	; (800210c <HAL_UART_Transmit_DMA+0x74>)
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80020d6:	6282      	str	r2, [r0, #40]	; 0x28
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 80020d8:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 80020da:	6346      	str	r6, [r0, #52]	; 0x34
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80020dc:	62c7      	str	r7, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80020de:	6305      	str	r5, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 80020e0:	3204      	adds	r2, #4
 80020e2:	f7ff fad3 	bl	800168c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80020e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020ea:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 80020ec:	4630      	mov	r0, r6
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80020ee:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80020f0:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 80020f2:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80020f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020fa:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 80020fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80020fe:	2001      	movs	r0, #1
 8002100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002102:	bf00      	nop
 8002104:	080021a5 	.word	0x080021a5
 8002108:	080021d5 	.word	0x080021d5
 800210c:	080022b9 	.word	0x080022b9

08002110 <HAL_UART_Receive_DMA>:
{
 8002110:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->RxState == HAL_UART_STATE_READY) 
 8002112:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
{
 8002116:	b083      	sub	sp, #12
  if(huart->RxState == HAL_UART_STATE_READY) 
 8002118:	2c20      	cmp	r4, #32
 800211a:	d002      	beq.n	8002122 <HAL_UART_Receive_DMA+0x12>
    return HAL_BUSY;
 800211c:	2002      	movs	r0, #2
}
 800211e:	b003      	add	sp, #12
 8002120:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((pData == NULL) || (Size == 0U))
 8002122:	2900      	cmp	r1, #0
 8002124:	d035      	beq.n	8002192 <HAL_UART_Receive_DMA+0x82>
 8002126:	2a00      	cmp	r2, #0
 8002128:	d033      	beq.n	8002192 <HAL_UART_Receive_DMA+0x82>
    __HAL_LOCK(huart);
 800212a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800212e:	2b01      	cmp	r3, #1
 8002130:	d0f4      	beq.n	800211c <HAL_UART_Receive_DMA+0xc>
 8002132:	4604      	mov	r4, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002134:	2500      	movs	r5, #0
 8002136:	4613      	mov	r3, r2
    __HAL_LOCK(huart);
 8002138:	2701      	movs	r7, #1
 800213a:	460a      	mov	r2, r1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800213c:	2622      	movs	r6, #34	; 0x22
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800213e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002140:	4915      	ldr	r1, [pc, #84]	; (8002198 <HAL_UART_Receive_DMA+0x88>)
    huart->pRxBuffPtr = pData;
 8002142:	62a2      	str	r2, [r4, #40]	; 0x28
    huart->RxXferSize = Size;
 8002144:	85a3      	strh	r3, [r4, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002146:	63e5      	str	r5, [r4, #60]	; 0x3c
    __HAL_LOCK(huart);
 8002148:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800214c:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002150:	4f12      	ldr	r7, [pc, #72]	; (800219c <HAL_UART_Receive_DMA+0x8c>)
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002152:	6281      	str	r1, [r0, #40]	; 0x28
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002154:	4e12      	ldr	r6, [pc, #72]	; (80021a0 <HAL_UART_Receive_DMA+0x90>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8002156:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferAbortCallback = NULL;
 8002158:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800215a:	62c7      	str	r7, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800215c:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 800215e:	3104      	adds	r1, #4
 8002160:	f7ff fa94 	bl	800168c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002164:	6823      	ldr	r3, [r4, #0]
 8002166:	9501      	str	r5, [sp, #4]
 8002168:	681a      	ldr	r2, [r3, #0]
    return HAL_OK;
 800216a:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_OREFLAG(huart);
 800216c:	9201      	str	r2, [sp, #4]
 800216e:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 8002170:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002174:	9201      	str	r2, [sp, #4]
 8002176:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800217e:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002180:	695a      	ldr	r2, [r3, #20]
 8002182:	f042 0201 	orr.w	r2, r2, #1
 8002186:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800218e:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8002190:	e7c5      	b.n	800211e <HAL_UART_Receive_DMA+0xe>
      return HAL_ERROR;
 8002192:	2001      	movs	r0, #1
 8002194:	e7c3      	b.n	800211e <HAL_UART_Receive_DMA+0xe>
 8002196:	bf00      	nop
 8002198:	080021e5 	.word	0x080021e5
 800219c:	080022a9 	.word	0x080022a9
 80021a0:	080022b9 	.word	0x080022b9

080021a4 <UART_DMATransmitCplt>:
{
 80021a4:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021a6:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021a8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f013 0320 	ands.w	r3, r3, #32
 80021b0:	d10a      	bne.n	80021c8 <UART_DMATransmitCplt+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80021b2:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0U;
 80021b4:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80021b6:	6953      	ldr	r3, [r2, #20]
 80021b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021bc:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80021be:	68d3      	ldr	r3, [r2, #12]
 80021c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021c4:	60d3      	str	r3, [r2, #12]
 80021c6:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80021c8:	f000 fb4c 	bl	8002864 <HAL_UART_TxCpltCallback>
 80021cc:	bd08      	pop	{r3, pc}
 80021ce:	bf00      	nop

080021d0 <HAL_UART_TxHalfCpltCallback>:
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop

080021d4 <UART_DMATxHalfCplt>:
{
 80021d4:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80021d6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80021d8:	f7ff fffa 	bl	80021d0 <HAL_UART_TxHalfCpltCallback>
 80021dc:	bd08      	pop	{r3, pc}
 80021de:	bf00      	nop

080021e0 <HAL_UART_RxCpltCallback>:
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop

080021e4 <UART_DMAReceiveCplt>:
{
 80021e4:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021e6:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021e8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f013 0320 	ands.w	r3, r3, #32
 80021f0:	d110      	bne.n	8002214 <UART_DMAReceiveCplt+0x30>
    huart->RxState = HAL_UART_STATE_READY;
 80021f2:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80021f4:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 80021f6:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80021f8:	68d3      	ldr	r3, [r2, #12]
 80021fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021fe:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002200:	6953      	ldr	r3, [r2, #20]
 8002202:	f023 0301 	bic.w	r3, r3, #1
 8002206:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002208:	6953      	ldr	r3, [r2, #20]
 800220a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800220e:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8002210:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8002214:	f7ff ffe4 	bl	80021e0 <HAL_UART_RxCpltCallback>
 8002218:	bd08      	pop	{r3, pc}
 800221a:	bf00      	nop

0800221c <UART_Receive_IT.part.1>:
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800221c:	6883      	ldr	r3, [r0, #8]
 800221e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002222:	d02c      	beq.n	800227e <UART_Receive_IT.part.1+0x62>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002224:	6903      	ldr	r3, [r0, #16]
 8002226:	b173      	cbz	r3, 8002246 <UART_Receive_IT.part.1+0x2a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002228:	6803      	ldr	r3, [r0, #0]
 800222a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	1c51      	adds	r1, r2, #1
 8002230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002234:	6281      	str	r1, [r0, #40]	; 0x28
 8002236:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0U)
 8002238:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800223a:	3b01      	subs	r3, #1
 800223c:	b29b      	uxth	r3, r3
 800223e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002240:	b143      	cbz	r3, 8002254 <UART_Receive_IT.part.1+0x38>
}
 8002242:	2000      	movs	r0, #0
 8002244:	4770      	bx	lr
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002246:	6802      	ldr	r2, [r0, #0]
 8002248:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800224a:	6852      	ldr	r2, [r2, #4]
 800224c:	1c59      	adds	r1, r3, #1
 800224e:	6281      	str	r1, [r0, #40]	; 0x28
 8002250:	701a      	strb	r2, [r3, #0]
 8002252:	e7f1      	b.n	8002238 <UART_Receive_IT.part.1+0x1c>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8002254:	b510      	push	{r4, lr}
      huart->RxState = HAL_UART_STATE_READY;
 8002256:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002258:	6802      	ldr	r2, [r0, #0]
 800225a:	68d1      	ldr	r1, [r2, #12]
 800225c:	f021 0120 	bic.w	r1, r1, #32
 8002260:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002262:	68d1      	ldr	r1, [r2, #12]
 8002264:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002268:	60d1      	str	r1, [r2, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800226a:	6951      	ldr	r1, [r2, #20]
 800226c:	f021 0101 	bic.w	r1, r1, #1
 8002270:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002272:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002276:	f7ff ffb3 	bl	80021e0 <HAL_UART_RxCpltCallback>
}
 800227a:	2000      	movs	r0, #0
 800227c:	bd10      	pop	{r4, pc}
      if(huart->Init.Parity == UART_PARITY_NONE)
 800227e:	6902      	ldr	r2, [r0, #16]
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8002280:	6a83      	ldr	r3, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002282:	b93a      	cbnz	r2, 8002294 <UART_Receive_IT.part.1+0x78>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002284:	6802      	ldr	r2, [r0, #0]
 8002286:	6852      	ldr	r2, [r2, #4]
 8002288:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800228c:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 2U;
 8002290:	6283      	str	r3, [r0, #40]	; 0x28
 8002292:	e7d1      	b.n	8002238 <UART_Receive_IT.part.1+0x1c>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002294:	6802      	ldr	r2, [r0, #0]
 8002296:	6852      	ldr	r2, [r2, #4]
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 800229e:	6283      	str	r3, [r0, #40]	; 0x28
 80022a0:	e7ca      	b.n	8002238 <UART_Receive_IT.part.1+0x1c>
 80022a2:	bf00      	nop

080022a4 <HAL_UART_RxHalfCpltCallback>:
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop

080022a8 <UART_DMARxHalfCplt>:
{
 80022a8:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 80022aa:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80022ac:	f7ff fffa 	bl	80022a4 <HAL_UART_RxHalfCpltCallback>
 80022b0:	bd08      	pop	{r3, pc}
 80022b2:	bf00      	nop

080022b4 <HAL_UART_ErrorCallback>:
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop

080022b8 <UART_DMAError>:
{
 80022b8:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	6950      	ldr	r0, [r2, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80022c0:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
 80022c4:	2921      	cmp	r1, #33	; 0x21
 80022c6:	d01c      	beq.n	8002302 <UART_DMAError+0x4a>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 80022c8:	6950      	ldr	r0, [r2, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80022ca:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 80022ce:	2922      	cmp	r1, #34	; 0x22
 80022d0:	d007      	beq.n	80022e2 <UART_DMAError+0x2a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80022d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80022d4:	4618      	mov	r0, r3
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80022d6:	f042 0210 	orr.w	r2, r2, #16
 80022da:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80022dc:	f7ff ffea 	bl	80022b4 <HAL_UART_ErrorCallback>
 80022e0:	bd08      	pop	{r3, pc}
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80022e2:	0641      	lsls	r1, r0, #25
 80022e4:	d5f5      	bpl.n	80022d2 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 80022e6:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_READY;
 80022e8:	2020      	movs	r0, #32
    huart->RxXferCount = 0U;
 80022ea:	85d9      	strh	r1, [r3, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022ec:	68d1      	ldr	r1, [r2, #12]
 80022ee:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 80022f2:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022f4:	6951      	ldr	r1, [r2, #20]
 80022f6:	f021 0101 	bic.w	r1, r1, #1
 80022fa:	6151      	str	r1, [r2, #20]
  huart->RxState = HAL_UART_STATE_READY;
 80022fc:	f883 003a 	strb.w	r0, [r3, #58]	; 0x3a
 8002300:	e7e7      	b.n	80022d2 <UART_DMAError+0x1a>
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002302:	0600      	lsls	r0, r0, #24
 8002304:	d5e0      	bpl.n	80022c8 <UART_DMAError+0x10>
    huart->TxXferCount = 0U;
 8002306:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8002308:	2020      	movs	r0, #32
    huart->TxXferCount = 0U;
 800230a:	84d9      	strh	r1, [r3, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800230c:	68d1      	ldr	r1, [r2, #12]
 800230e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002312:	60d1      	str	r1, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002314:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
 8002318:	e7d6      	b.n	80022c8 <UART_DMAError+0x10>
 800231a:	bf00      	nop

0800231c <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800231c:	6803      	ldr	r3, [r0, #0]
{
 800231e:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002320:	681a      	ldr	r2, [r3, #0]
{
 8002322:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8002324:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002326:	68dd      	ldr	r5, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002328:	6959      	ldr	r1, [r3, #20]
  if(errorflags == RESET)
 800232a:	d04a      	beq.n	80023c2 <HAL_UART_IRQHandler+0xa6>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800232c:	f011 0101 	ands.w	r1, r1, #1
 8002330:	d053      	beq.n	80023da <HAL_UART_IRQHandler+0xbe>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002332:	07d6      	lsls	r6, r2, #31
 8002334:	d505      	bpl.n	8002342 <HAL_UART_IRQHandler+0x26>
 8002336:	05e8      	lsls	r0, r5, #23
 8002338:	d503      	bpl.n	8002342 <HAL_UART_IRQHandler+0x26>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800233a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800233c:	f040 0001 	orr.w	r0, r0, #1
 8002340:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002342:	0756      	lsls	r6, r2, #29
 8002344:	d57b      	bpl.n	800243e <HAL_UART_IRQHandler+0x122>
 8002346:	2900      	cmp	r1, #0
 8002348:	f000 8085 	beq.w	8002456 <HAL_UART_IRQHandler+0x13a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800234c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800234e:	0790      	lsls	r0, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002350:	f041 0102 	orr.w	r1, r1, #2
 8002354:	63e1      	str	r1, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002356:	d577      	bpl.n	8002448 <HAL_UART_IRQHandler+0x12c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002358:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800235a:	f041 0104 	orr.w	r1, r1, #4
 800235e:	63e1      	str	r1, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002360:	0711      	lsls	r1, r2, #28
 8002362:	d473      	bmi.n	800244c <HAL_UART_IRQHandler+0x130>
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002364:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002366:	2900      	cmp	r1, #0
 8002368:	d02a      	beq.n	80023c0 <HAL_UART_IRQHandler+0xa4>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800236a:	0691      	lsls	r1, r2, #26
 800236c:	d505      	bpl.n	800237a <HAL_UART_IRQHandler+0x5e>
 800236e:	06aa      	lsls	r2, r5, #26
 8002370:	d503      	bpl.n	800237a <HAL_UART_IRQHandler+0x5e>
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002372:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 8002376:	2a22      	cmp	r2, #34	; 0x22
 8002378:	d07d      	beq.n	8002476 <HAL_UART_IRQHandler+0x15a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800237a:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800237c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800237e:	070e      	lsls	r6, r1, #28
 8002380:	d402      	bmi.n	8002388 <HAL_UART_IRQHandler+0x6c>
 8002382:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002386:	d07b      	beq.n	8002480 <HAL_UART_IRQHandler+0x164>
  huart->RxState = HAL_UART_STATE_READY;
 8002388:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002390:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002392:	695a      	ldr	r2, [r3, #20]
 8002394:	f022 0201 	bic.w	r2, r2, #1
 8002398:	615a      	str	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 800239a:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800239e:	695a      	ldr	r2, [r3, #20]
 80023a0:	0655      	lsls	r5, r2, #25
 80023a2:	d55f      	bpl.n	8002464 <HAL_UART_IRQHandler+0x148>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023a4:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80023a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023ac:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80023ae:	2900      	cmp	r1, #0
 80023b0:	d058      	beq.n	8002464 <HAL_UART_IRQHandler+0x148>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023b2:	4b3c      	ldr	r3, [pc, #240]	; (80024a4 <HAL_UART_IRQHandler+0x188>)
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023b4:	4608      	mov	r0, r1
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023b6:	634b      	str	r3, [r1, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023b8:	f7ff f9ac 	bl	8001714 <HAL_DMA_Abort_IT>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d155      	bne.n	800246c <HAL_UART_IRQHandler+0x150>
 80023c0:	bd70      	pop	{r4, r5, r6, pc}
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023c2:	0696      	lsls	r6, r2, #26
 80023c4:	d50c      	bpl.n	80023e0 <HAL_UART_IRQHandler+0xc4>
 80023c6:	06a9      	lsls	r1, r5, #26
 80023c8:	d50a      	bpl.n	80023e0 <HAL_UART_IRQHandler+0xc4>
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80023ca:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80023ce:	2b22      	cmp	r3, #34	; 0x22
 80023d0:	d1f6      	bne.n	80023c0 <HAL_UART_IRQHandler+0xa4>
}
 80023d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80023d6:	f7ff bf21 	b.w	800221c <UART_Receive_IT.part.1>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023da:	f415 7f90 	tst.w	r5, #288	; 0x120
 80023de:	d1a8      	bne.n	8002332 <HAL_UART_IRQHandler+0x16>
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80023e0:	0610      	lsls	r0, r2, #24
 80023e2:	d40e      	bmi.n	8002402 <HAL_UART_IRQHandler+0xe6>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80023e4:	0656      	lsls	r6, r2, #25
 80023e6:	d5eb      	bpl.n	80023c0 <HAL_UART_IRQHandler+0xa4>
 80023e8:	066d      	lsls	r5, r5, #25
 80023ea:	d5e9      	bpl.n	80023c0 <HAL_UART_IRQHandler+0xa4>
  huart->gState = HAL_UART_STATE_READY;
 80023ec:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80023ee:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80023f0:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80023f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023f6:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80023f8:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80023fc:	f000 fa32 	bl	8002864 <HAL_UART_TxCpltCallback>
 8002400:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002402:	0629      	lsls	r1, r5, #24
 8002404:	d5ee      	bpl.n	80023e4 <HAL_UART_IRQHandler+0xc8>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002406:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800240a:	2a21      	cmp	r2, #33	; 0x21
 800240c:	d1d8      	bne.n	80023c0 <HAL_UART_IRQHandler+0xa4>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800240e:	68a2      	ldr	r2, [r4, #8]
 8002410:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8002414:	6a22      	ldr	r2, [r4, #32]
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002416:	d038      	beq.n	800248a <HAL_UART_IRQHandler+0x16e>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002418:	1c51      	adds	r1, r2, #1
 800241a:	6221      	str	r1, [r4, #32]
 800241c:	7812      	ldrb	r2, [r2, #0]
 800241e:	605a      	str	r2, [r3, #4]
    if(--huart->TxXferCount == 0U)
 8002420:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002422:	3a01      	subs	r2, #1
 8002424:	b292      	uxth	r2, r2
 8002426:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002428:	2a00      	cmp	r2, #0
 800242a:	d1c9      	bne.n	80023c0 <HAL_UART_IRQHandler+0xa4>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002432:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800243a:	60da      	str	r2, [r3, #12]
 800243c:	bd70      	pop	{r4, r5, r6, pc}
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800243e:	0796      	lsls	r6, r2, #30
 8002440:	d50b      	bpl.n	800245a <HAL_UART_IRQHandler+0x13e>
 8002442:	2900      	cmp	r1, #0
 8002444:	d188      	bne.n	8002358 <HAL_UART_IRQHandler+0x3c>
 8002446:	e78d      	b.n	8002364 <HAL_UART_IRQHandler+0x48>
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002448:	0711      	lsls	r1, r2, #28
 800244a:	d58b      	bpl.n	8002364 <HAL_UART_IRQHandler+0x48>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800244c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800244e:	f041 0108 	orr.w	r1, r1, #8
 8002452:	63e1      	str	r1, [r4, #60]	; 0x3c
 8002454:	e786      	b.n	8002364 <HAL_UART_IRQHandler+0x48>
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002456:	0790      	lsls	r0, r2, #30
 8002458:	d484      	bmi.n	8002364 <HAL_UART_IRQHandler+0x48>
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800245a:	0710      	lsls	r0, r2, #28
 800245c:	d582      	bpl.n	8002364 <HAL_UART_IRQHandler+0x48>
 800245e:	2900      	cmp	r1, #0
 8002460:	d080      	beq.n	8002364 <HAL_UART_IRQHandler+0x48>
 8002462:	e7f3      	b.n	800244c <HAL_UART_IRQHandler+0x130>
            HAL_UART_ErrorCallback(huart);
 8002464:	4620      	mov	r0, r4
 8002466:	f7ff ff25 	bl	80022b4 <HAL_UART_ErrorCallback>
 800246a:	bd70      	pop	{r4, r5, r6, pc}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800246c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800246e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002472:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002474:	4718      	bx	r3
 8002476:	4620      	mov	r0, r4
 8002478:	f7ff fed0 	bl	800221c <UART_Receive_IT.part.1>
 800247c:	6823      	ldr	r3, [r4, #0]
 800247e:	e77c      	b.n	800237a <HAL_UART_IRQHandler+0x5e>
        HAL_UART_ErrorCallback(huart);
 8002480:	4620      	mov	r0, r4
 8002482:	f7ff ff17 	bl	80022b4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002486:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002488:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800248a:	8811      	ldrh	r1, [r2, #0]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800248c:	6920      	ldr	r0, [r4, #16]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800248e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002492:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002494:	b910      	cbnz	r0, 800249c <HAL_UART_IRQHandler+0x180>
        huart->pTxBuffPtr += 2U;
 8002496:	3202      	adds	r2, #2
 8002498:	6222      	str	r2, [r4, #32]
 800249a:	e7c1      	b.n	8002420 <HAL_UART_IRQHandler+0x104>
        huart->pTxBuffPtr += 1U;
 800249c:	3201      	adds	r2, #1
 800249e:	6222      	str	r2, [r4, #32]
 80024a0:	e7be      	b.n	8002420 <HAL_UART_IRQHandler+0x104>
 80024a2:	bf00      	nop
 80024a4:	080024a9 	.word	0x080024a9

080024a8 <UART_DMAAbortOnError>:
  huart->RxXferCount = 0x00U;
 80024a8:	2200      	movs	r2, #0
{
 80024aa:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80024ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  HAL_UART_ErrorCallback(huart);
 80024b0:	4618      	mov	r0, r3
  huart->TxXferCount = 0x00U;
 80024b2:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80024b4:	f7ff fefe 	bl	80022b4 <HAL_UART_ErrorCallback>
 80024b8:	bd08      	pop	{r3, pc}
 80024ba:	bf00      	nop

080024bc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80024bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80024c0:	680d      	ldr	r5, [r1, #0]
 80024c2:	f3c5 250f 	ubfx	r5, r5, #8, #16
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	fa95 f4a5 	rbit	r4, r5
  pinpos = POSITION_VAL(pinmask);
 80024ca:	fab4 f484 	clz	r4, r4

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0U)
 80024ce:	fa35 f304 	lsrs.w	r3, r5, r4
 80024d2:	d073      	beq.n	80025bc <LL_GPIO_Init+0x100>
  {
    /* skip if bit is not set */
    if ((pinmask & (1U << pinpos)) != 0U)
 80024d4:	f04f 0b01 	mov.w	fp, #1
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80024d8:	f04f 0e0f 	mov.w	lr, #15
      {
        currentpin = (0x00000101U << pinpos);
      }
      else
      {
        currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
 80024dc:	f04f 1c01 	mov.w	ip, #65537	; 0x10001
        currentpin = (0x00000101U << pinpos);
 80024e0:	f240 1901 	movw	r9, #257	; 0x101
    if ((pinmask & (1U << pinpos)) != 0U)
 80024e4:	fa0b f304 	lsl.w	r3, fp, r4
 80024e8:	422b      	tst	r3, r5
 80024ea:	d063      	beq.n	80025b4 <LL_GPIO_Init+0xf8>
      if (pinpos < GPIO_PIN_MASK_POS)
 80024ec:	2c07      	cmp	r4, #7
        currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
 80024ee:	bf85      	ittet	hi
 80024f0:	f1a4 0308 	subhi.w	r3, r4, #8
 80024f4:	fa0c f303 	lslhi.w	r3, ip, r3
        currentpin = (0x00000101U << pinpos);
 80024f8:	fa09 f304 	lslls.w	r3, r9, r4
        currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
 80024fc:	f043 6380 	orrhi.w	r3, r3, #67108864	; 0x4000000
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8002500:	0e1e      	lsrs	r6, r3, #24
 8002502:	fa93 faa3 	rbit	sl, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002506:	faba fa8a 	clz	sl, sl
 800250a:	fa93 f8a3 	rbit	r8, r3
 800250e:	fab8 f888 	clz	r8, r8
 8002512:	5982      	ldr	r2, [r0, r6]
 8002514:	684f      	ldr	r7, [r1, #4]
 8002516:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800251a:	fa0e fa0a 	lsl.w	sl, lr, sl
 800251e:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8002522:	fa07 f808 	lsl.w	r8, r7, r8
 8002526:	ea22 020a 	bic.w	r2, r2, sl
 800252a:	ea42 0208 	orr.w	r2, r2, r8
 800252e:	5182      	str	r2, [r0, r6]
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8002530:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8002534:	0a1a      	lsrs	r2, r3, #8
 8002536:	fa92 faa2 	rbit	sl, r2
 800253a:	faba fa8a 	clz	sl, sl
 800253e:	ea28 0802 	bic.w	r8, r8, r2
 8002542:	690f      	ldr	r7, [r1, #16]
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002544:	684a      	ldr	r2, [r1, #4]
 8002546:	fa07 fa0a 	lsl.w	sl, r7, sl
 800254a:	f022 0208 	bic.w	r2, r2, #8
 800254e:	ea48 080a 	orr.w	r8, r8, sl
 8002552:	2a01      	cmp	r2, #1
 8002554:	f8c0 800c 	str.w	r8, [r0, #12]
 8002558:	d12c      	bne.n	80025b4 <LL_GPIO_Init+0xf8>
 800255a:	fa93 faa3 	rbit	sl, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800255e:	faba fa8a 	clz	sl, sl
 8002562:	fa93 f8a3 	rbit	r8, r3
 8002566:	2703      	movs	r7, #3
 8002568:	fab8 f888 	clz	r8, r8
 800256c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8002570:	5982      	ldr	r2, [r0, r6]
 8002572:	fa07 fa0a 	lsl.w	sl, r7, sl
 8002576:	688f      	ldr	r7, [r1, #8]
 8002578:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800257c:	ea22 020a 	bic.w	r2, r2, sl
 8002580:	fa07 f808 	lsl.w	r8, r7, r8
 8002584:	ea42 0208 	orr.w	r2, r2, r8
 8002588:	5182      	str	r2, [r0, r6]
 800258a:	fa93 f8a3 	rbit	r8, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800258e:	fab8 f888 	clz	r8, r8
 8002592:	fa93 f3a3 	rbit	r3, r3
 8002596:	2704      	movs	r7, #4
 8002598:	fab3 f383 	clz	r3, r3
 800259c:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80025a0:	fa07 f808 	lsl.w	r8, r7, r8
 80025a4:	68cf      	ldr	r7, [r1, #12]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	ea22 0208 	bic.w	r2, r2, r8
 80025ac:	fa07 f303 	lsl.w	r3, r7, r3
 80025b0:	431a      	orrs	r2, r3
 80025b2:	5182      	str	r2, [r0, r6]

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
      }
    }
    pinpos++;
 80025b4:	3401      	adds	r4, #1
  while ((pinmask  >> pinpos) != 0U)
 80025b6:	fa35 f304 	lsrs.w	r3, r5, r4
 80025ba:	d193      	bne.n	80024e4 <LL_GPIO_Init+0x28>
  }
  return (SUCCESS);
}
 80025bc:	2001      	movs	r0, #1
 80025be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025c2:	bf00      	nop

080025c4 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025c4:	4a1f      	ldr	r2, [pc, #124]	; (8002644 <LL_TIM_Init+0x80>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80025c6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025c8:	4290      	cmp	r0, r2
 80025ca:	d025      	beq.n	8002618 <LL_TIM_Init+0x54>
 80025cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 80025d0:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025d2:	d013      	beq.n	80025fc <LL_TIM_Init+0x38>
 80025d4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80025d8:	4290      	cmp	r0, r2
 80025da:	d00f      	beq.n	80025fc <LL_TIM_Init+0x38>
 80025dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025e0:	4290      	cmp	r0, r2
 80025e2:	d00b      	beq.n	80025fc <LL_TIM_Init+0x38>

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80025e4:	688c      	ldr	r4, [r1, #8]

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80025e6:	880a      	ldrh	r2, [r1, #0]
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80025e8:	6003      	str	r3, [r0, #0]
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
  WRITE_REG(TIMx->ARR, AutoReload);
 80025ea:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 80025ec:	6282      	str	r2, [r0, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80025ee:	6943      	ldr	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 80025f0:	bc30      	pop	{r4, r5}
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6143      	str	r3, [r0, #20]
 80025f8:	2001      	movs	r0, #1
 80025fa:	4770      	bx	lr
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80025fc:	684a      	ldr	r2, [r1, #4]
 80025fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002602:	68cd      	ldr	r5, [r1, #12]
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002604:	4313      	orrs	r3, r2
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002606:	688c      	ldr	r4, [r1, #8]
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002608:	880a      	ldrh	r2, [r1, #0]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800260a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800260e:	432b      	orrs	r3, r5
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002610:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002612:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8002614:	6282      	str	r2, [r0, #40]	; 0x28
 8002616:	e7ea      	b.n	80025ee <LL_TIM_Init+0x2a>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002618:	684a      	ldr	r2, [r1, #4]
 800261a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800261e:	4313      	orrs	r3, r2
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002620:	68ca      	ldr	r2, [r1, #12]
 8002622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002626:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002628:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800262a:	688a      	ldr	r2, [r1, #8]
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800262c:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800262e:	62c2      	str	r2, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8002630:	6283      	str	r3, [r0, #40]	; 0x28
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002632:	7c0b      	ldrb	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002634:	6303      	str	r3, [r0, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002636:	6943      	ldr	r3, [r0, #20]
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6143      	str	r3, [r0, #20]
}
 800263e:	2001      	movs	r0, #1
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40012c00 	.word	0x40012c00

08002648 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 8002648:	2910      	cmp	r1, #16
{
 800264a:	b4f0      	push	{r4, r5, r6, r7}
 800264c:	4603      	mov	r3, r0
  switch (Channel)
 800264e:	d06e      	beq.n	800272e <LL_TIM_OC_Init+0xe6>
 8002650:	d948      	bls.n	80026e4 <LL_TIM_OC_Init+0x9c>
 8002652:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002656:	d024      	beq.n	80026a2 <LL_TIM_OC_Init+0x5a>
 8002658:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800265c:	d164      	bne.n	8002728 <LL_TIM_OC_Init+0xe0>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800265e:	6a00      	ldr	r0, [r0, #32]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002660:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002662:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8002666:	6218      	str	r0, [r3, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002668:	6a19      	ldr	r1, [r3, #32]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800266a:	4f63      	ldr	r7, [pc, #396]	; (80027f8 <LL_TIM_OC_Init+0x1b0>)
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800266c:	685e      	ldr	r6, [r3, #4]
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800266e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002672:	69dc      	ldr	r4, [r3, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002674:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002678:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800267c:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002680:	42bb      	cmp	r3, r7
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002682:	e892 0021 	ldmia.w	r2, {r0, r5}
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002686:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800268a:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800268e:	f000 8084 	beq.w	800279a <LL_TIM_OC_Init+0x152>

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002692:	68d2      	ldr	r2, [r2, #12]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002694:	2001      	movs	r0, #1
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002696:	605e      	str	r6, [r3, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002698:	61dc      	str	r4, [r3, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800269a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800269c:	bcf0      	pop	{r4, r5, r6, r7}

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800269e:	6219      	str	r1, [r3, #32]
}
 80026a0:	4770      	bx	lr
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80026a2:	6a00      	ldr	r0, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80026a4:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80026a6:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 80026aa:	6218      	str	r0, [r3, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80026ac:	6a19      	ldr	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026ae:	4f52      	ldr	r7, [pc, #328]	; (80027f8 <LL_TIM_OC_Init+0x1b0>)
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80026b0:	685e      	ldr	r6, [r3, #4]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80026b2:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80026b6:	69dc      	ldr	r4, [r3, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80026b8:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80026bc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80026c0:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026c4:	42bb      	cmp	r3, r7
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80026c6:	e892 0021 	ldmia.w	r2, {r0, r5}
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80026ca:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80026ce:	ea44 0400 	orr.w	r4, r4, r0
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026d2:	d068      	beq.n	80027a6 <LL_TIM_OC_Init+0x15e>
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80026d4:	68d2      	ldr	r2, [r2, #12]
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80026d6:	2001      	movs	r0, #1
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80026d8:	605e      	str	r6, [r3, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80026da:	61dc      	str	r4, [r3, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80026dc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80026de:	bcf0      	pop	{r4, r5, r6, r7}
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80026e0:	6219      	str	r1, [r3, #32]
}
 80026e2:	4770      	bx	lr
  switch (Channel)
 80026e4:	2901      	cmp	r1, #1
 80026e6:	d11f      	bne.n	8002728 <LL_TIM_OC_Init+0xe0>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80026e8:	6a00      	ldr	r0, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80026ea:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80026ec:	f020 0001 	bic.w	r0, r0, #1
 80026f0:	6218      	str	r0, [r3, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80026f2:	6a19      	ldr	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026f4:	4f40      	ldr	r7, [pc, #256]	; (80027f8 <LL_TIM_OC_Init+0x1b0>)
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80026f6:	685e      	ldr	r6, [r3, #4]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80026f8:	f021 0102 	bic.w	r1, r1, #2
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80026fc:	699c      	ldr	r4, [r3, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80026fe:	4329      	orrs	r1, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002700:	f021 0101 	bic.w	r1, r1, #1
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002704:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002708:	42bb      	cmp	r3, r7
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800270a:	e892 0021 	ldmia.w	r2, {r0, r5}
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800270e:	ea41 0105 	orr.w	r1, r1, r5
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002712:	ea44 0400 	orr.w	r4, r4, r0
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002716:	d05b      	beq.n	80027d0 <LL_TIM_OC_Init+0x188>
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002718:	68d2      	ldr	r2, [r2, #12]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800271a:	2001      	movs	r0, #1
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800271c:	605e      	str	r6, [r3, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800271e:	619c      	str	r4, [r3, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002720:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002722:	bcf0      	pop	{r4, r5, r6, r7}
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002724:	6219      	str	r1, [r3, #32]
}
 8002726:	4770      	bx	lr
  ErrorStatus result = ERROR;
 8002728:	2000      	movs	r0, #0
}
 800272a:	bcf0      	pop	{r4, r5, r6, r7}
 800272c:	4770      	bx	lr
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800272e:	6a00      	ldr	r0, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002730:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002732:	f020 0010 	bic.w	r0, r0, #16
 8002736:	6218      	str	r0, [r3, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002738:	6a19      	ldr	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800273a:	4f2f      	ldr	r7, [pc, #188]	; (80027f8 <LL_TIM_OC_Init+0x1b0>)
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800273c:	685e      	ldr	r6, [r3, #4]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800273e:	f021 0120 	bic.w	r1, r1, #32
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002742:	699c      	ldr	r4, [r3, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002744:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002748:	f021 0110 	bic.w	r1, r1, #16
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800274c:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002750:	42bb      	cmp	r3, r7
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002752:	e892 0021 	ldmia.w	r2, {r0, r5}
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002756:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800275a:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800275e:	d007      	beq.n	8002770 <LL_TIM_OC_Init+0x128>
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002760:	68d2      	ldr	r2, [r2, #12]
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002762:	2001      	movs	r0, #1
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002764:	605e      	str	r6, [r3, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002766:	619c      	str	r4, [r3, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002768:	639a      	str	r2, [r3, #56]	; 0x38
}
 800276a:	bcf0      	pop	{r4, r5, r6, r7}
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800276c:	6219      	str	r1, [r3, #32]
}
 800276e:	4770      	bx	lr
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002770:	6955      	ldr	r5, [r2, #20]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002772:	6990      	ldr	r0, [r2, #24]
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002774:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002778:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800277c:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002780:	ea46 0680 	orr.w	r6, r6, r0, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002784:	6895      	ldr	r5, [r2, #8]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002786:	69d0      	ldr	r0, [r2, #28]
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002788:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800278c:	f426 6600 	bic.w	r6, r6, #2048	; 0x800
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002790:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002794:	ea46 06c0 	orr.w	r6, r6, r0, lsl #3
 8002798:	e7e2      	b.n	8002760 <LL_TIM_OC_Init+0x118>
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800279a:	6990      	ldr	r0, [r2, #24]
 800279c:	f426 4680 	bic.w	r6, r6, #16384	; 0x4000
 80027a0:	ea46 1680 	orr.w	r6, r6, r0, lsl #6
 80027a4:	e775      	b.n	8002692 <LL_TIM_OC_Init+0x4a>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80027a6:	6955      	ldr	r5, [r2, #20]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80027a8:	6990      	ldr	r0, [r2, #24]
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80027aa:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80027ae:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80027b2:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80027b6:	ea46 1600 	orr.w	r6, r6, r0, lsl #4
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80027ba:	6895      	ldr	r5, [r2, #8]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80027bc:	69d0      	ldr	r0, [r2, #28]
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80027be:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80027c2:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80027c6:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80027ca:	ea46 1640 	orr.w	r6, r6, r0, lsl #5
 80027ce:	e781      	b.n	80026d4 <LL_TIM_OC_Init+0x8c>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80027d0:	6955      	ldr	r5, [r2, #20]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80027d2:	6990      	ldr	r0, [r2, #24]
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80027d4:	f021 0108 	bic.w	r1, r1, #8
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80027d8:	f426 7680 	bic.w	r6, r6, #256	; 0x100
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80027dc:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80027e0:	4306      	orrs	r6, r0
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80027e2:	6895      	ldr	r5, [r2, #8]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80027e4:	69d0      	ldr	r0, [r2, #28]
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80027e6:	f021 0104 	bic.w	r1, r1, #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80027ea:	f426 7600 	bic.w	r6, r6, #512	; 0x200
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80027ee:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80027f2:	ea46 0640 	orr.w	r6, r6, r0, lsl #1
 80027f6:	e78f      	b.n	8002718 <LL_TIM_OC_Init+0xd0>
 80027f8:	40012c00 	.word	0x40012c00

080027fc <LL_TIM_BDTR_Init>:
{
 80027fc:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 80027fe:	7b0b      	ldrb	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8002800:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8002802:	684a      	ldr	r2, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8002804:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8002806:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800280a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 800280c:	680a      	ldr	r2, [r1, #0]
 800280e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002812:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8002814:	89ca      	ldrh	r2, [r1, #14]
 8002816:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800281a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 800281c:	690a      	ldr	r2, [r1, #16]
 800281e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002822:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002824:	694a      	ldr	r2, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002826:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800282a:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 800282c:	6443      	str	r3, [r0, #68]	; 0x44
}
 800282e:	bc10      	pop	{r4}
 8002830:	2001      	movs	r0, #1
 8002832:	4770      	bx	lr

08002834 <LL_Init1msTick>:
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002834:	2100      	movs	r1, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002836:	2205      	movs	r2, #5
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002838:	b410      	push	{r4}
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800283a:	4c05      	ldr	r4, [pc, #20]	; (8002850 <LL_Init1msTick+0x1c>)
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <LL_Init1msTick+0x20>)
 800283e:	fba4 4000 	umull	r4, r0, r4, r0
 8002842:	0980      	lsrs	r0, r0, #6
 8002844:	3801      	subs	r0, #1
 8002846:	6058      	str	r0, [r3, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 8002848:	bc10      	pop	{r4}
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800284a:	6099      	str	r1, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	4770      	bx	lr
 8002850:	10624dd3 	.word	0x10624dd3
 8002854:	e000e010 	.word	0xe000e010

08002858 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002858:	4b01      	ldr	r3, [pc, #4]	; (8002860 <LL_SetSystemCoreClock+0x8>)
 800285a:	6018      	str	r0, [r3, #0]
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	200000b0 	.word	0x200000b0

08002864 <HAL_UART_TxCpltCallback>:
SerialClass serial(huart1);

extern "C" void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
    // compare pointer
    if (huart->Instance == serial.get_handle()->Instance)
 8002864:	4b05      	ldr	r3, [pc, #20]	; (800287c <HAL_UART_TxCpltCallback+0x18>)
 8002866:	6801      	ldr	r1, [r0, #0]
 8002868:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	4291      	cmp	r1, r2
		}
	}

	inline void tx_cplt_callback(void)
	{
		tx_cplt = true;
 8002870:	bf04      	itt	eq
 8002872:	2201      	moveq	r2, #1
 8002874:	f883 2800 	strbeq.w	r2, [r3, #2048]	; 0x800
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000744 	.word	0x20000744

08002880 <_GLOBAL__sub_I_serial>:
	SerialClass(UART_HandleTypeDef &huart) : huart(huart)
 8002880:	2200      	movs	r2, #0
 8002882:	2001      	movs	r0, #1
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <_GLOBAL__sub_I_serial+0x20>)
 8002886:	4907      	ldr	r1, [pc, #28]	; (80028a4 <_GLOBAL__sub_I_serial+0x24>)
 8002888:	f883 0800 	strb.w	r0, [r3, #2048]	; 0x800
 800288c:	f8c3 1808 	str.w	r1, [r3, #2056]	; 0x808
 8002890:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
 8002894:	f8a3 2804 	strh.w	r2, [r3, #2052]	; 0x804
 8002898:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	20000744 	.word	0x20000744
 80028a4:	20001090 	.word	0x20001090

080028a8 <HAL_CAN_RxFifo0MsgPendingCallback>:

static constexpr uint16_t cmd_shutdown = 0x0000;
static constexpr uint16_t cmd_recover = 0x0001;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80028a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028aa:	b08b      	sub	sp, #44	; 0x2c
    uint32_t status;

    //hcan.pRxMsg = rx_msg;
    //status = HAL_CAN_Receive(&hcan, CAN_FIFO0, timeout);

    status = HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, rx_header, buf);
 80028ac:	ab01      	add	r3, sp, #4
 80028ae:	aa03      	add	r2, sp, #12
 80028b0:	2100      	movs	r1, #0
 80028b2:	4857      	ldr	r0, [pc, #348]	; (8002a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 80028b4:	f7fe fc6c 	bl	8001190 <HAL_CAN_GetRxMessage>
 80028b8:	4604      	mov	r4, r0

    led_on();
 80028ba:	f000 f975 	bl	8002ba8 <led_on>
    if (status != HAL_OK)
 80028be:	2c00      	cmp	r4, #0
 80028c0:	d152      	bne.n	8002968 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>
    if (rx_header.StdId == confStruct.can_id_cmd)
 80028c2:	4a54      	ldr	r2, [pc, #336]	; (8002a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 80028c4:	9b03      	ldr	r3, [sp, #12]
 80028c6:	8811      	ldrh	r1, [r2, #0]
 80028c8:	428b      	cmp	r3, r1
 80028ca:	d04f      	beq.n	800296c <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>
    else if (rx_header.StdId == confStruct.can_id_vel)
 80028cc:	8852      	ldrh	r2, [r2, #2]
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d148      	bne.n	8002964 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
 {
     _Encapsulator<T> _e;

     for (int i = 0; i < sizeof(T); i++)
     {
         _e.i = (_e.i << 8) | (uint64_t) (buf[i]);
 80028d2:	2500      	movs	r5, #0
 80028d4:	2100      	movs	r1, #0
 80028d6:	2400      	movs	r4, #0
 80028d8:	4329      	orrs	r1, r5
 80028da:	2500      	movs	r5, #0
 80028dc:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80028e0:	020b      	lsls	r3, r1, #8
 80028e2:	4320      	orrs	r0, r4
 80028e4:	2100      	movs	r1, #0
 80028e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80028ea:	431d      	orrs	r5, r3
 80028ec:	022b      	lsls	r3, r5, #8
 80028ee:	2500      	movs	r5, #0
 80028f0:	f89d 4005 	ldrb.w	r4, [sp, #5]
 80028f4:	0202      	lsls	r2, r0, #8
 80028f6:	4314      	orrs	r4, r2
 80028f8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80028fc:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8002900:	0222      	lsls	r2, r4, #8
 8002902:	4319      	orrs	r1, r3
 8002904:	4310      	orrs	r0, r2
 8002906:	020b      	lsls	r3, r1, #8
 8002908:	2100      	movs	r1, #0
 800290a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800290e:	431d      	orrs	r5, r3
 8002910:	022b      	lsls	r3, r5, #8
 8002912:	2500      	movs	r5, #0
 8002914:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8002918:	0202      	lsls	r2, r0, #8
 800291a:	4314      	orrs	r4, r2
 800291c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002920:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002924:	0222      	lsls	r2, r4, #8
 8002926:	4319      	orrs	r1, r3
 8002928:	4310      	orrs	r0, r2
 800292a:	020b      	lsls	r3, r1, #8
 800292c:	2100      	movs	r1, #0
 800292e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002932:	431d      	orrs	r5, r3
 8002934:	022b      	lsls	r3, r5, #8
 8002936:	2500      	movs	r5, #0
 8002938:	f89d 4009 	ldrb.w	r4, [sp, #9]
 800293c:	0202      	lsls	r2, r0, #8
 800293e:	4314      	orrs	r4, r2
 8002940:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002944:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8002948:	0222      	lsls	r2, r4, #8
 800294a:	4319      	orrs	r1, r3
 800294c:	4310      	orrs	r0, r2
 800294e:	f89d 400b 	ldrb.w	r4, [sp, #11]
 8002952:	020b      	lsls	r3, r1, #8
 8002954:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002958:	0202      	lsls	r2, r0, #8
        control.SetTarget(vel_cmd);
 800295a:	4322      	orrs	r2, r4
 800295c:	432b      	orrs	r3, r5
 800295e:	482e      	ldr	r0, [pc, #184]	; (8002a18 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8002960:	f000 fd96 	bl	8003490 <_ZN9MotorCtrl9SetTargetEd>
    led_process();
 8002964:	f000 f93a 	bl	8002bdc <led_process>
}
 8002968:	b00b      	add	sp, #44	; 0x2c
 800296a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800296c:	2000      	movs	r0, #0
 800296e:	f89d 6004 	ldrb.w	r6, [sp, #4]
 8002972:	4330      	orrs	r0, r6
 8002974:	f89d 6005 	ldrb.w	r6, [sp, #5]
 8002978:	0202      	lsls	r2, r0, #8
 800297a:	4332      	orrs	r2, r6
     }

     data = _e.data;
 800297c:	b292      	uxth	r2, r2
        switch (cmd)
 800297e:	2a00      	cmp	r2, #0
 8002980:	d025      	beq.n	80029ce <HAL_CAN_RxFifo0MsgPendingCallback+0x126>
 8002982:	2a01      	cmp	r2, #1
 8002984:	d1ee      	bne.n	8002964 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
    }

    inline void Recover(void)
    {
//#warning "ignore me if you know what you are doing."
        if ((GPIOC->IDR & GPIO_IDR_IDR14) != 0)
 8002986:	4b25      	ldr	r3, [pc, #148]	; (8002a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	045b      	lsls	r3, r3, #17
 800298c:	d5ea      	bpl.n	8002964 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
    inline void ResetState(void)
    {
        TIM2->CNT = 0;
        //this->enc_cnt = 0;
        this->pulse = 0;
        this->velocity = 0;
 800298e:	2000      	movs	r0, #0
 8002990:	2100      	movs	r1, #0
        TIM2->CNT = 0;
 8002992:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
            GPIOB->BSRR = GPIO_BSRR_BS15;
 8002996:	f44f 4600 	mov.w	r6, #32768	; 0x8000
        this->pulse = 0;
 800299a:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
            TIM1->CCR1 = 0;
 800299c:	4a20      	ldr	r2, [pc, #128]	; (8002a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
            GPIOB->BSRR = GPIO_BSRR_BS15;
 800299e:	4d21      	ldr	r5, [pc, #132]	; (8002a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
            TIM1->CCR1 = 0;
 80029a0:	6354      	str	r4, [r2, #52]	; 0x34
        this->velocity = 0;
 80029a2:	e9c3 0104 	strd	r0, r1, [r3, #16]
            TIM1->CCR2 = 0;
 80029a6:	6394      	str	r4, [r2, #56]	; 0x38
        this->pulse = 0;
 80029a8:	609c      	str	r4, [r3, #8]
        TIM2->CNT = 0;
 80029aa:	627c      	str	r4, [r7, #36]	; 0x24
        this->error = 0;
 80029ac:	e9c3 0106 	strd	r0, r1, [r3, #24]
        this->error_prev = 0;
 80029b0:	e9c3 0108 	strd	r0, r1, [r3, #32]
        this->u_p = 0;
 80029b4:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
        this->u_i = 0;
 80029b8:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
        this->target_velocity = 0;
 80029bc:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
        this->target_torque = 0;
 80029c0:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
        this->target_voltage = 0;
 80029c4:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
            this->shutdown = false;
 80029c8:	711c      	strb	r4, [r3, #4]
            GPIOB->BSRR = GPIO_BSRR_BS15;
 80029ca:	612e      	str	r6, [r5, #16]
 80029cc:	e7ca      	b.n	8002964 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
        GPIOB->BSRR = GPIO_BSRR_BR15;
 80029ce:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
        this->velocity = 0;
 80029d2:	2000      	movs	r0, #0
 80029d4:	2100      	movs	r1, #0
        this->shutdown = true;
 80029d6:	2601      	movs	r6, #1
        TIM2->CNT = 0;
 80029d8:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
        GPIOB->BSRR = GPIO_BSRR_BR15;
 80029dc:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
        TIM1->CCR1 = 0;
 80029de:	4c10      	ldr	r4, [pc, #64]	; (8002a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
        GPIOB->BSRR = GPIO_BSRR_BR15;
 80029e0:	611f      	str	r7, [r3, #16]
        this->shutdown = true;
 80029e2:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
        TIM1->CCR1 = 0;
 80029e4:	6362      	str	r2, [r4, #52]	; 0x34
        this->shutdown = true;
 80029e6:	711e      	strb	r6, [r3, #4]
        TIM1->CCR2 = 0;
 80029e8:	63a2      	str	r2, [r4, #56]	; 0x38
        this->pulse = 0;
 80029ea:	609a      	str	r2, [r3, #8]
        this->velocity = 0;
 80029ec:	e9c3 0104 	strd	r0, r1, [r3, #16]
        this->error = 0;
 80029f0:	e9c3 0106 	strd	r0, r1, [r3, #24]
        this->error_prev = 0;
 80029f4:	e9c3 0108 	strd	r0, r1, [r3, #32]
        this->u_p = 0;
 80029f8:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
        this->u_i = 0;
 80029fc:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
        this->target_velocity = 0;
 8002a00:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
        this->target_torque = 0;
 8002a04:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
        this->target_voltage = 0;
 8002a08:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
        TIM2->CNT = 0;
 8002a0c:	626a      	str	r2, [r5, #36]	; 0x24
 8002a0e:	e7a9      	b.n	8002964 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
 8002a10:	20000fe0 	.word	0x20000fe0
 8002a14:	20000f80 	.word	0x20000f80
 8002a18:	20000008 	.word	0x20000008
 8002a1c:	40011000 	.word	0x40011000
 8002a20:	40012c00 	.word	0x40012c00
 8002a24:	40010c00 	.word	0x40010c00

08002a28 <can_init>:
{
 8002a28:	b430      	push	{r4, r5}
    bus_state = OFF_BUS;
 8002a2a:	2000      	movs	r0, #0
    prescaler = 48;
 8002a2c:	2530      	movs	r5, #48	; 0x30
 8002a2e:	4c04      	ldr	r4, [pc, #16]	; (8002a40 <can_init+0x18>)
    bus_state = OFF_BUS;
 8002a30:	4904      	ldr	r1, [pc, #16]	; (8002a44 <can_init+0x1c>)
    hcan.Instance = CAN1;
 8002a32:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <can_init+0x20>)
 8002a34:	4a05      	ldr	r2, [pc, #20]	; (8002a4c <can_init+0x24>)
    prescaler = 48;
 8002a36:	6025      	str	r5, [r4, #0]
    bus_state = OFF_BUS;
 8002a38:	7008      	strb	r0, [r1, #0]
    hcan.Instance = CAN1;
 8002a3a:	601a      	str	r2, [r3, #0]
}
 8002a3c:	bc30      	pop	{r4, r5}
 8002a3e:	4770      	bx	lr
 8002a40:	20000f7c 	.word	0x20000f7c
 8002a44:	20000f50 	.word	0x20000f50
 8002a48:	20000fe0 	.word	0x20000fe0
 8002a4c:	40006400 	.word	0x40006400

08002a50 <can_enable>:
{
 8002a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (bus_state == OFF_BUS)
 8002a52:	4e1c      	ldr	r6, [pc, #112]	; (8002ac4 <can_enable+0x74>)
 8002a54:	7834      	ldrb	r4, [r6, #0]
 8002a56:	b104      	cbz	r4, 8002a5a <can_enable+0xa>
 8002a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hcan.Init.AutoRetransmission = ENABLE;
 8002a5a:	2701      	movs	r7, #1
        hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 8002a5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002a60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
        hcan.Init.Prescaler = prescaler;
 8002a64:	4918      	ldr	r1, [pc, #96]	; (8002ac8 <can_enable+0x78>)
 8002a66:	4d19      	ldr	r5, [pc, #100]	; (8002acc <can_enable+0x7c>)
 8002a68:	6809      	ldr	r1, [r1, #0]
        HAL_CAN_Init(&hcan);
 8002a6a:	4628      	mov	r0, r5
        hcan.Init.Prescaler = prescaler;
 8002a6c:	6069      	str	r1, [r5, #4]
        hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 8002a6e:	612a      	str	r2, [r5, #16]
        hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002a70:	616b      	str	r3, [r5, #20]
        hcan.Init.Mode = CAN_MODE_NORMAL;
 8002a72:	60ac      	str	r4, [r5, #8]
        hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002a74:	60ec      	str	r4, [r5, #12]
        hcan.Init.TimeTriggeredMode = DISABLE;
 8002a76:	762c      	strb	r4, [r5, #24]
        hcan.Init.AutoBusOff = DISABLE;
 8002a78:	766c      	strb	r4, [r5, #25]
        hcan.Init.AutoWakeUp = DISABLE;
 8002a7a:	76ac      	strb	r4, [r5, #26]
        hcan.Init.ReceiveFifoLocked = DISABLE;
 8002a7c:	772c      	strb	r4, [r5, #28]
        hcan.Init.TransmitFifoPriority = DISABLE;
 8002a7e:	776c      	strb	r4, [r5, #29]
        hcan.Init.AutoRetransmission = ENABLE;
 8002a80:	76ef      	strb	r7, [r5, #27]
        HAL_CAN_Init(&hcan);
 8002a82:	f7fe fa59 	bl	8000f38 <HAL_CAN_Init>
    filter.FilterIdHigh += (id >> 24) & 0xFFFF;
 8002a86:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <can_enable+0x80>)
        HAL_CAN_ConfigFilter(&hcan, &filter);
 8002a88:	4628      	mov	r0, r5
 8002a8a:	4619      	mov	r1, r3
        bus_state = ON_BUS;
 8002a8c:	7037      	strb	r7, [r6, #0]
    filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8002a8e:	61df      	str	r7, [r3, #28]
    filter.FilterIdHigh += (id >> 24) & 0xFFFF;
 8002a90:	601c      	str	r4, [r3, #0]
    filter.FilterMaskIdHigh += (mask >> 24) & 0xFFFF;
 8002a92:	609c      	str	r4, [r3, #8]
    filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8002a94:	619c      	str	r4, [r3, #24]
    filter.FilterBank = 0;
 8002a96:	615c      	str	r4, [r3, #20]
    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002a98:	611c      	str	r4, [r3, #16]
    filter.SlaveStartFilterBank = 0;
 8002a9a:	625c      	str	r4, [r3, #36]	; 0x24
    filter.FilterActivation = ENABLE;
 8002a9c:	621f      	str	r7, [r3, #32]
        HAL_CAN_ConfigFilter(&hcan, &filter);
 8002a9e:	f7fe facd 	bl	800103c <HAL_CAN_ConfigFilter>
        if (HAL_CAN_Start(&hcan) != HAL_OK)
 8002aa2:	4628      	mov	r0, r5
 8002aa4:	f7fe fb46 	bl	8001134 <HAL_CAN_Start>
 8002aa8:	b948      	cbnz	r0, 8002abe <can_enable+0x6e>
        if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8002aaa:	2102      	movs	r1, #2
 8002aac:	4807      	ldr	r0, [pc, #28]	; (8002acc <can_enable+0x7c>)
 8002aae:	f7fe fbf3 	bl	8001298 <HAL_CAN_ActivateNotification>
 8002ab2:	2800      	cmp	r0, #0
 8002ab4:	d0d0      	beq.n	8002a58 <can_enable+0x8>
}
 8002ab6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            Error_Handler();
 8002aba:	f000 bbc5 	b.w	8003248 <Error_Handler>
            Error_Handler();
 8002abe:	f000 fbc3 	bl	8003248 <Error_Handler>
 8002ac2:	e7f2      	b.n	8002aaa <can_enable+0x5a>
 8002ac4:	20000f50 	.word	0x20000f50
 8002ac8:	20000f7c 	.word	0x20000f7c
 8002acc:	20000fe0 	.word	0x20000fe0
 8002ad0:	20000f54 	.word	0x20000f54

08002ad4 <can_set_bitrate>:
    if (bus_state == ON_BUS)
 8002ad4:	4b18      	ldr	r3, [pc, #96]	; (8002b38 <can_set_bitrate+0x64>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d00b      	beq.n	8002af4 <can_set_bitrate+0x20>
    switch (bitrate)
 8002adc:	2808      	cmp	r0, #8
 8002ade:	d809      	bhi.n	8002af4 <can_set_bitrate+0x20>
 8002ae0:	e8df f000 	tbb	[pc, r0]
 8002ae4:	16120e09 	.word	0x16120e09
 8002ae8:	26221e1a 	.word	0x26221e1a
 8002aec:	05          	.byte	0x05
 8002aed:	00          	.byte	0x00
            prescaler = 4;
 8002aee:	2204      	movs	r2, #4
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <can_set_bitrate+0x68>)
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	4770      	bx	lr
            prescaler = 450;
 8002af6:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <can_set_bitrate+0x68>)
 8002afc:	601a      	str	r2, [r3, #0]
            break;
 8002afe:	4770      	bx	lr
            prescaler = 225;
 8002b00:	22e1      	movs	r2, #225	; 0xe1
 8002b02:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <can_set_bitrate+0x68>)
 8002b04:	601a      	str	r2, [r3, #0]
            break;
 8002b06:	4770      	bx	lr
            prescaler = 90;
 8002b08:	225a      	movs	r2, #90	; 0x5a
 8002b0a:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <can_set_bitrate+0x68>)
 8002b0c:	601a      	str	r2, [r3, #0]
            break;
 8002b0e:	4770      	bx	lr
            prescaler = 45;
 8002b10:	222d      	movs	r2, #45	; 0x2d
 8002b12:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <can_set_bitrate+0x68>)
 8002b14:	601a      	str	r2, [r3, #0]
            break;
 8002b16:	4770      	bx	lr
            prescaler = 36;
 8002b18:	2224      	movs	r2, #36	; 0x24
 8002b1a:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <can_set_bitrate+0x68>)
 8002b1c:	601a      	str	r2, [r3, #0]
            break;
 8002b1e:	4770      	bx	lr
            prescaler = 18;
 8002b20:	2212      	movs	r2, #18
 8002b22:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <can_set_bitrate+0x68>)
 8002b24:	601a      	str	r2, [r3, #0]
            break;
 8002b26:	4770      	bx	lr
            prescaler = 9;
 8002b28:	2209      	movs	r2, #9
 8002b2a:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <can_set_bitrate+0x68>)
 8002b2c:	601a      	str	r2, [r3, #0]
            break;
 8002b2e:	4770      	bx	lr
            prescaler = 6;
 8002b30:	2206      	movs	r2, #6
 8002b32:	4b02      	ldr	r3, [pc, #8]	; (8002b3c <can_set_bitrate+0x68>)
 8002b34:	601a      	str	r2, [r3, #0]
            break;
 8002b36:	4770      	bx	lr
 8002b38:	20000f50 	.word	0x20000f50
 8002b3c:	20000f7c 	.word	0x20000f7c

08002b40 <_Z8readConfv>:
#include "conf.h"

ConfStruct confStruct;

void readConf(void)
{
 8002b40:	b508      	push	{r3, lr}
    HAL_FLASH_Lock();       /* フラッシュをロック */
}

void loadFlash(uint32_t address, uint8_t *data, uint32_t size)
{
    memcpy(data, (uint8_t*)address, size);
 8002b42:	2250      	movs	r2, #80	; 0x50
 8002b44:	4902      	ldr	r1, [pc, #8]	; (8002b50 <_Z8readConfv+0x10>)
 8002b46:	4803      	ldr	r0, [pc, #12]	; (8002b54 <_Z8readConfv+0x14>)
 8002b48:	f001 fdc2 	bl	80046d0 <memcpy>
 8002b4c:	bd08      	pop	{r3, pc}
 8002b4e:	bf00      	nop
 8002b50:	0800fc00 	.word	0x0800fc00
 8002b54:	20000f80 	.word	0x20000f80

08002b58 <_Z9writeConfv>:
    loadFlash(DATA_PAGE_ADDR, (uint8_t*)&confStruct, sizeof(ConfStruct));
}

void writeConf(void)
{
 8002b58:	b570      	push	{r4, r5, r6, lr}
 8002b5a:	b086      	sub	sp, #24
    HAL_FLASH_Unlock();     /* フラッシュをアンロック */
 8002b5c:	f7fe ffac 	bl	8001ab8 <HAL_FLASH_Unlock>
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 8002b60:	2200      	movs	r2, #0
    erase.Banks = FLASH_BANK_1;
 8002b62:	2301      	movs	r3, #1
    uint32_t pageError = 0;
 8002b64:	a906      	add	r1, sp, #24
    erase.PageAddress = DATA_PAGE_ADDR;
 8002b66:	4c0e      	ldr	r4, [pc, #56]	; (8002ba0 <_Z9writeConfv+0x48>)
    uint32_t pageError = 0;
 8002b68:	f841 2d14 	str.w	r2, [r1, #-20]!
    HAL_FLASHEx_Erase(&erase, &pageError);
 8002b6c:	a802      	add	r0, sp, #8
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 8002b6e:	9202      	str	r2, [sp, #8]
    erase.Banks = FLASH_BANK_1;
 8002b70:	9303      	str	r3, [sp, #12]
    erase.NbPages = 1;
 8002b72:	9305      	str	r3, [sp, #20]
    erase.PageAddress = DATA_PAGE_ADDR;
 8002b74:	9404      	str	r4, [sp, #16]
    HAL_FLASHEx_Erase(&erase, &pageError);
 8002b76:	f7ff f819 	bl	8001bac <HAL_FLASHEx_Erase>
 8002b7a:	4d0a      	ldr	r5, [pc, #40]	; (8002ba4 <_Z9writeConfv+0x4c>)
 8002b7c:	f105 0650 	add.w	r6, r5, #80	; 0x50
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, *data);
 8002b80:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002b84:	4621      	mov	r1, r4
 8002b86:	2300      	movs	r3, #0
 8002b88:	2001      	movs	r0, #1
 8002b8a:	f7fe fea5 	bl	80018d8 <HAL_FLASH_Program>
    do {
 8002b8e:	42b5      	cmp	r5, r6
    } while (address+=2, data++, size-=2);
 8002b90:	f104 0402 	add.w	r4, r4, #2
    do {
 8002b94:	d1f4      	bne.n	8002b80 <_Z9writeConfv+0x28>
    HAL_FLASH_Lock();       /* フラッシュをロック */
 8002b96:	f7fe ffa3 	bl	8001ae0 <HAL_FLASH_Lock>
    writeFlash(DATA_PAGE_ADDR, (uint16_t*)&confStruct, sizeof(ConfStruct));
}
 8002b9a:	b006      	add	sp, #24
 8002b9c:	bd70      	pop	{r4, r5, r6, pc}
 8002b9e:	bf00      	nop
 8002ba0:	0800fc00 	.word	0x0800fc00
 8002ba4:	20000f80 	.word	0x20000f80

08002ba8 <led_on>:
static uint32_t led_laston_stat = 0;
static uint32_t led_lastoff_stat = 0;

// Attempt to turn on status LED
void led_on(void)
{
 8002ba8:	b510      	push	{r4, lr}
	// Make sure the LED has been off for at least LED_DURATION before turning on again
	// This prevents a solid status LED on a busy canbus
	if(led_laston == 0 && HAL_GetTick() - led_lastoff > LED_DURATION)
 8002baa:	4c09      	ldr	r4, [pc, #36]	; (8002bd0 <led_on+0x28>)
 8002bac:	6823      	ldr	r3, [r4, #0]
 8002bae:	b103      	cbz	r3, 8002bb2 <led_on+0xa>
 8002bb0:	bd10      	pop	{r4, pc}
 8002bb2:	f7fe f9a9 	bl	8000f08 <HAL_GetTick>
 8002bb6:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <led_on+0x2c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	1ac0      	subs	r0, r0, r3
 8002bbc:	280a      	cmp	r0, #10
 8002bbe:	d9f7      	bls.n	8002bb0 <led_on+0x8>
	{
        GPIOC->BSRR = GPIO_BSRR_BS13;
 8002bc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bc4:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <led_on+0x30>)
 8002bc6:	611a      	str	r2, [r3, #16]
		led_laston = HAL_GetTick();
 8002bc8:	f7fe f99e 	bl	8000f08 <HAL_GetTick>
 8002bcc:	6020      	str	r0, [r4, #0]
 8002bce:	bd10      	pop	{r4, pc}
 8002bd0:	20000fd0 	.word	0x20000fd0
 8002bd4:	20000fd4 	.word	0x20000fd4
 8002bd8:	40011000 	.word	0x40011000

08002bdc <led_process>:
}


// Process time-based LED events
void led_process(void)
{
 8002bdc:	b510      	push	{r4, lr}
	// If LED has been on for long enough, turn it off
	if(led_laston > 0 && HAL_GetTick() - led_laston > LED_DURATION)
 8002bde:	4c1e      	ldr	r4, [pc, #120]	; (8002c58 <led_process+0x7c>)
 8002be0:	6823      	ldr	r3, [r4, #0]
 8002be2:	bb3b      	cbnz	r3, 8002c34 <led_process+0x58>
        GPIOC->BSRR = GPIO_BSRR_BR13;
		led_laston = 0;
		led_lastoff = HAL_GetTick();
	}

    if(led_laston_stat > 0 && HAL_GetTick() - led_laston_stat > LED_STAT_ON_DUR)
 8002be4:	4c1d      	ldr	r4, [pc, #116]	; (8002c5c <led_process+0x80>)
 8002be6:	6823      	ldr	r3, [r4, #0]
 8002be8:	b973      	cbnz	r3, 8002c08 <led_process+0x2c>
        GPIOB->BSRR = GPIO_BSRR_BR0;
        led_laston_stat = 0;
        led_lastoff_stat = HAL_GetTick();
    }

    if(led_laston_stat == 0 && HAL_GetTick() - led_lastoff_stat > LED_STAT_OFF_DUR)
 8002bea:	f7fe f98d 	bl	8000f08 <HAL_GetTick>
 8002bee:	4b1c      	ldr	r3, [pc, #112]	; (8002c60 <led_process+0x84>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	1ac0      	subs	r0, r0, r3
 8002bf4:	2864      	cmp	r0, #100	; 0x64
 8002bf6:	d906      	bls.n	8002c06 <led_process+0x2a>
    {
        GPIOB->BSRR = GPIO_BSRR_BS0;
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <led_process+0x88>)
 8002bfc:	611a      	str	r2, [r3, #16]
        led_laston_stat = HAL_GetTick();
 8002bfe:	f7fe f983 	bl	8000f08 <HAL_GetTick>
 8002c02:	6020      	str	r0, [r4, #0]
 8002c04:	bd10      	pop	{r4, pc}
 8002c06:	bd10      	pop	{r4, pc}
    if(led_laston_stat > 0 && HAL_GetTick() - led_laston_stat > LED_STAT_ON_DUR)
 8002c08:	f7fe f97e 	bl	8000f08 <HAL_GetTick>
 8002c0c:	f640 3254 	movw	r2, #2900	; 0xb54
 8002c10:	6823      	ldr	r3, [r4, #0]
 8002c12:	1ac0      	subs	r0, r0, r3
 8002c14:	4290      	cmp	r0, r2
 8002c16:	d90a      	bls.n	8002c2e <led_process+0x52>
        GPIOB->BSRR = GPIO_BSRR_BR0;
 8002c18:	f44f 3180 	mov.w	r1, #65536	; 0x10000
        led_laston_stat = 0;
 8002c1c:	2300      	movs	r3, #0
        GPIOB->BSRR = GPIO_BSRR_BR0;
 8002c1e:	4a11      	ldr	r2, [pc, #68]	; (8002c64 <led_process+0x88>)
 8002c20:	6111      	str	r1, [r2, #16]
        led_laston_stat = 0;
 8002c22:	6023      	str	r3, [r4, #0]
        led_lastoff_stat = HAL_GetTick();
 8002c24:	f7fe f970 	bl	8000f08 <HAL_GetTick>
 8002c28:	4a0d      	ldr	r2, [pc, #52]	; (8002c60 <led_process+0x84>)
 8002c2a:	6823      	ldr	r3, [r4, #0]
 8002c2c:	6010      	str	r0, [r2, #0]
    if(led_laston_stat == 0 && HAL_GetTick() - led_lastoff_stat > LED_STAT_OFF_DUR)
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0db      	beq.n	8002bea <led_process+0xe>
 8002c32:	bd10      	pop	{r4, pc}
	if(led_laston > 0 && HAL_GetTick() - led_laston > LED_DURATION)
 8002c34:	f7fe f968 	bl	8000f08 <HAL_GetTick>
 8002c38:	6823      	ldr	r3, [r4, #0]
 8002c3a:	1ac0      	subs	r0, r0, r3
 8002c3c:	280a      	cmp	r0, #10
 8002c3e:	d9d1      	bls.n	8002be4 <led_process+0x8>
        GPIOC->BSRR = GPIO_BSRR_BR13;
 8002c40:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
		led_laston = 0;
 8002c44:	2300      	movs	r3, #0
        GPIOC->BSRR = GPIO_BSRR_BR13;
 8002c46:	4a08      	ldr	r2, [pc, #32]	; (8002c68 <led_process+0x8c>)
 8002c48:	6111      	str	r1, [r2, #16]
		led_laston = 0;
 8002c4a:	6023      	str	r3, [r4, #0]
		led_lastoff = HAL_GetTick();
 8002c4c:	f7fe f95c 	bl	8000f08 <HAL_GetTick>
 8002c50:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <led_process+0x90>)
 8002c52:	6018      	str	r0, [r3, #0]
 8002c54:	e7c6      	b.n	8002be4 <led_process+0x8>
 8002c56:	bf00      	nop
 8002c58:	20000fd0 	.word	0x20000fd0
 8002c5c:	20000fd8 	.word	0x20000fd8
 8002c60:	20000fdc 	.word	0x20000fdc
 8002c64:	40010c00 	.word	0x40010c00
 8002c68:	40011000 	.word	0x40011000
 8002c6c:	20000fd4 	.word	0x20000fd4

08002c70 <_ZN11SerialClass5writeEPKhi>:
	inline void write(const uint8_t * const c, const int length)
 8002c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (length > BUF_SIZE || length < 1)
 8002c74:	1e57      	subs	r7, r2, #1
 8002c76:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8002c7a:	d301      	bcc.n	8002c80 <_ZN11SerialClass5writeEPKhi+0x10>
 8002c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c80:	460c      	mov	r4, r1
 8002c82:	4605      	mov	r5, r0
 8002c84:	4616      	mov	r6, r2
		uint32_t offset = HAL_GetTick();
 8002c86:	f7fe f93f 	bl	8000f08 <HAL_GetTick>
		    if(offset + timeout < HAL_GetTick())
 8002c8a:	f100 080a 	add.w	r8, r0, #10
 8002c8e:	e003      	b.n	8002c98 <_ZN11SerialClass5writeEPKhi+0x28>
 8002c90:	f7fe f93a 	bl	8000f08 <HAL_GetTick>
 8002c94:	4580      	cmp	r8, r0
 8002c96:	d339      	bcc.n	8002d0c <_ZN11SerialClass5writeEPKhi+0x9c>
		while(!tx_cplt)
 8002c98:	f895 3800 	ldrb.w	r3, [r5, #2048]	; 0x800
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f7      	beq.n	8002c90 <_ZN11SerialClass5writeEPKhi+0x20>
 8002ca0:	1d23      	adds	r3, r4, #4
 8002ca2:	1d2a      	adds	r2, r5, #4
 8002ca4:	4294      	cmp	r4, r2
 8002ca6:	bf38      	it	cc
 8002ca8:	429d      	cmpcc	r5, r3
 8002caa:	d336      	bcc.n	8002d1a <_ZN11SerialClass5writeEPKhi+0xaa>
 8002cac:	2e08      	cmp	r6, #8
 8002cae:	d934      	bls.n	8002d1a <_ZN11SerialClass5writeEPKhi+0xaa>
 8002cb0:	f1a6 0e04 	sub.w	lr, r6, #4
 8002cb4:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 8002cb8:	f10e 0e01 	add.w	lr, lr, #1
 8002cbc:	2f02      	cmp	r7, #2
 8002cbe:	ea4f 0c8e 	mov.w	ip, lr, lsl #2
 8002cc2:	d928      	bls.n	8002d16 <_ZN11SerialClass5writeEPKhi+0xa6>
 8002cc4:	4621      	mov	r1, r4
 8002cc6:	462a      	mov	r2, r5
 8002cc8:	2300      	movs	r3, #0
			tx_buf[i] = c[i];
 8002cca:	f851 0b04 	ldr.w	r0, [r1], #4
 8002cce:	3301      	adds	r3, #1
 8002cd0:	459e      	cmp	lr, r3
 8002cd2:	f842 0b04 	str.w	r0, [r2], #4
 8002cd6:	d8f8      	bhi.n	8002cca <_ZN11SerialClass5writeEPKhi+0x5a>
 8002cd8:	4566      	cmp	r6, ip
 8002cda:	4663      	mov	r3, ip
 8002cdc:	d00b      	beq.n	8002cf6 <_ZN11SerialClass5writeEPKhi+0x86>
 8002cde:	5ce1      	ldrb	r1, [r4, r3]
		for (int i = 0; i < length; i++)
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	4296      	cmp	r6, r2
			tx_buf[i] = c[i];
 8002ce4:	54e9      	strb	r1, [r5, r3]
		for (int i = 0; i < length; i++)
 8002ce6:	dd06      	ble.n	8002cf6 <_ZN11SerialClass5writeEPKhi+0x86>
			tx_buf[i] = c[i];
 8002ce8:	5ca1      	ldrb	r1, [r4, r2]
		for (int i = 0; i < length; i++)
 8002cea:	3302      	adds	r3, #2
 8002cec:	429e      	cmp	r6, r3
			tx_buf[i] = c[i];
 8002cee:	54a9      	strb	r1, [r5, r2]
		for (int i = 0; i < length; i++)
 8002cf0:	dd01      	ble.n	8002cf6 <_ZN11SerialClass5writeEPKhi+0x86>
			tx_buf[i] = c[i];
 8002cf2:	5ce2      	ldrb	r2, [r4, r3]
 8002cf4:	54ea      	strb	r2, [r5, r3]
			tx_cplt = false;
 8002cf6:	2300      	movs	r3, #0
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8002cf8:	b2b2      	uxth	r2, r6
			tx_cplt = false;
 8002cfa:	f885 3800 	strb.w	r3, [r5, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8002cfe:	4629      	mov	r1, r5
 8002d00:	f8d5 0808 	ldr.w	r0, [r5, #2056]	; 0x808
 8002d04:	f7ff f9c8 	bl	8002098 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 8002d08:	2800      	cmp	r0, #0
 8002d0a:	d0b7      	beq.n	8002c7c <_ZN11SerialClass5writeEPKhi+0xc>
                tx_cplt = true;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	f885 3800 	strb.w	r3, [r5, #2048]	; 0x800
 8002d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		while(!tx_cplt)
 8002d16:	2300      	movs	r3, #0
 8002d18:	e7e1      	b.n	8002cde <_ZN11SerialClass5writeEPKhi+0x6e>
 8002d1a:	19e2      	adds	r2, r4, r7
 8002d1c:	1e63      	subs	r3, r4, #1
 8002d1e:	1e69      	subs	r1, r5, #1
			tx_buf[i] = c[i];
 8002d20:	f813 0f01 	ldrb.w	r0, [r3, #1]!
		for (int i = 0; i < length; i++)
 8002d24:	4293      	cmp	r3, r2
			tx_buf[i] = c[i];
 8002d26:	f801 0f01 	strb.w	r0, [r1, #1]!
		for (int i = 0; i < length; i++)
 8002d2a:	d1f9      	bne.n	8002d20 <_ZN11SerialClass5writeEPKhi+0xb0>
 8002d2c:	e7e3      	b.n	8002cf6 <_ZN11SerialClass5writeEPKhi+0x86>
 8002d2e:	bf00      	nop

08002d30 <_Z18SystemClock_Configv>:
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002d30:	4a23      	ldr	r2, [pc, #140]	; (8002dc0 <_Z18SystemClock_Configv+0x90>)
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002d32:	4824      	ldr	r0, [pc, #144]	; (8002dc4 <_Z18SystemClock_Configv+0x94>)
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8002d34:	4611      	mov	r1, r2
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002d36:	b508      	push	{r3, lr}
 8002d38:	6803      	ldr	r3, [r0, #0]
 8002d3a:	f023 0307 	bic.w	r3, r3, #7
 8002d3e:	f043 0302 	orr.w	r3, r3, #2
 8002d42:	6003      	str	r3, [r0, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002d44:	6803      	ldr	r3, [r0, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002d46:	6813      	ldr	r3, [r2, #0]
 8002d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d4c:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8002d4e:	680b      	ldr	r3, [r1, #0]
        Error_Handler();
    }
    LL_RCC_HSE_Enable();

    /* Wait till HSE is ready */
    while (LL_RCC_HSE_IsReady() != 1)
 8002d50:	039a      	lsls	r2, r3, #14
 8002d52:	d5fc      	bpl.n	8002d4e <_Z18SystemClock_Configv+0x1e>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8002d54:	684b      	ldr	r3, [r1, #4]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8002d56:	4a1a      	ldr	r2, [pc, #104]	; (8002dc0 <_Z18SystemClock_Configv+0x90>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8002d58:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002d5c:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8002d60:	604b      	str	r3, [r1, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002d62:	680b      	ldr	r3, [r1, #0]
 8002d64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d68:	600b      	str	r3, [r1, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8002d6a:	6813      	ldr	r3, [r2, #0]
    }
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
    LL_RCC_PLL_Enable();
    
    /* Wait till PLL is ready */
    while (LL_RCC_PLL_IsReady() != 1)
 8002d6c:	019b      	lsls	r3, r3, #6
 8002d6e:	d5fc      	bpl.n	8002d6a <_Z18SystemClock_Configv+0x3a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002d70:	6853      	ldr	r3, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d72:	4913      	ldr	r1, [pc, #76]	; (8002dc0 <_Z18SystemClock_Configv+0x90>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002d74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d78:	6053      	str	r3, [r2, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002d7a:	6853      	ldr	r3, [r2, #4]
 8002d7c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002d80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d84:	6053      	str	r3, [r2, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002d86:	6853      	ldr	r3, [r2, #4]
 8002d88:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002d8c:	6053      	str	r3, [r2, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002d8e:	6853      	ldr	r3, [r2, #4]
 8002d90:	f023 0303 	bic.w	r3, r3, #3
 8002d94:	f043 0302 	orr.w	r3, r3, #2
 8002d98:	6053      	str	r3, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d9a:	684b      	ldr	r3, [r1, #4]
 8002d9c:	f003 030c 	and.w	r3, r3, #12
    LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
    LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    
    /* Wait till System clock is ready */
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d1fa      	bne.n	8002d9a <_Z18SystemClock_Configv+0x6a>
    {

    }
    LL_Init1msTick(72000000);
 8002da4:	4808      	ldr	r0, [pc, #32]	; (8002dc8 <_Z18SystemClock_Configv+0x98>)
 8002da6:	f7ff fd45 	bl	8002834 <LL_Init1msTick>
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002daa:	4a08      	ldr	r2, [pc, #32]	; (8002dcc <_Z18SystemClock_Configv+0x9c>)
    LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
    LL_SetSystemCoreClock(72000000);
 8002dac:	4806      	ldr	r0, [pc, #24]	; (8002dc8 <_Z18SystemClock_Configv+0x98>)
 8002dae:	6813      	ldr	r3, [r2, #0]
 8002db0:	f043 0304 	orr.w	r3, r3, #4
 8002db4:	6013      	str	r3, [r2, #0]
}
 8002db6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    LL_SetSystemCoreClock(72000000);
 8002dba:	f7ff bd4d 	b.w	8002858 <LL_SetSystemCoreClock>
 8002dbe:	bf00      	nop
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40022000 	.word	0x40022000
 8002dc8:	044aa200 	.word	0x044aa200
 8002dcc:	e000e010 	.word	0xe000e010

08002dd0 <main>:
{
 8002dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
    LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002dd4:	2400      	movs	r4, #0
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
    LL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /**/
    GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
    GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002dd6:	2704      	movs	r7, #4
{
 8002dd8:	b0a1      	sub	sp, #132	; 0x84
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002dda:	4dab      	ldr	r5, [pc, #684]	; (8003088 <main+0x2b8>)
    HAL_Init();
 8002ddc:	f7fe f876 	bl	8000ecc <HAL_Init>
    SystemClock_Config();
 8002de0:	f7ff ffa6 	bl	8002d30 <_Z18SystemClock_Configv>
    LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002de4:	9418      	str	r4, [sp, #96]	; 0x60
 8002de6:	9419      	str	r4, [sp, #100]	; 0x64
 8002de8:	941a      	str	r4, [sp, #104]	; 0x68
 8002dea:	941b      	str	r4, [sp, #108]	; 0x6c
 8002dec:	941c      	str	r4, [sp, #112]	; 0x70
 8002dee:	69ab      	ldr	r3, [r5, #24]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002df0:	f248 0e07 	movw	lr, #32775	; 0x8007
 8002df4:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002df8:	f04f 0801 	mov.w	r8, #1
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002dfc:	f04f 0902 	mov.w	r9, #2
 8002e00:	f043 0310 	orr.w	r3, r3, #16
 8002e04:	61ab      	str	r3, [r5, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002e06:	69ab      	ldr	r3, [r5, #24]
 8002e08:	4ea0      	ldr	r6, [pc, #640]	; (800308c <main+0x2bc>)
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8002e10:	9b04      	ldr	r3, [sp, #16]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002e12:	69ab      	ldr	r3, [r5, #24]
 8002e14:	f8df b29c 	ldr.w	fp, [pc, #668]	; 80030b4 <main+0x2e4>
 8002e18:	f043 0320 	orr.w	r3, r3, #32
 8002e1c:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002e1e:	69ab      	ldr	r3, [r5, #24]
    GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8002e20:	4a9b      	ldr	r2, [pc, #620]	; (8003090 <main+0x2c0>)
 8002e22:	f003 0320 	and.w	r3, r3, #32
 8002e26:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8002e28:	9b05      	ldr	r3, [sp, #20]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002e2a:	69ab      	ldr	r3, [r5, #24]
    LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e2c:	a918      	add	r1, sp, #96	; 0x60
 8002e2e:	433b      	orrs	r3, r7
 8002e30:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002e32:	69ab      	ldr	r3, [r5, #24]
 8002e34:	4630      	mov	r0, r6
 8002e36:	403b      	ands	r3, r7
 8002e38:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
 8002e3a:	9b06      	ldr	r3, [sp, #24]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002e3c:	69ab      	ldr	r3, [r5, #24]
 8002e3e:	f043 0308 	orr.w	r3, r3, #8
 8002e42:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002e44:	69ab      	ldr	r3, [r5, #24]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	9307      	str	r3, [sp, #28]
  (void)tmpreg;
 8002e4c:	9b07      	ldr	r3, [sp, #28]
 8002e4e:	f8c6 a014 	str.w	sl, [r6, #20]
 8002e52:	f8cb e014 	str.w	lr, [fp, #20]
    GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8002e56:	9218      	str	r2, [sp, #96]	; 0x60
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e58:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002e5c:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
    LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e60:	f7ff fb2c 	bl	80024bc <LL_GPIO_Init>
    GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8002e64:	4b8b      	ldr	r3, [pc, #556]	; (8003094 <main+0x2c4>)
    LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e66:	4630      	mov	r0, r6
 8002e68:	a918      	add	r1, sp, #96	; 0x60
    GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002e6a:	9719      	str	r7, [sp, #100]	; 0x64
    GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8002e6c:	9318      	str	r3, [sp, #96]	; 0x60
    LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e6e:	f7ff fb25 	bl	80024bc <LL_GPIO_Init>

    /**/
    GPIO_InitStruct.Pin = LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2 | LL_GPIO_PIN_15;
 8002e72:	4b89      	ldr	r3, [pc, #548]	; (8003098 <main+0x2c8>)
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e74:	a918      	add	r1, sp, #96	; 0x60
 8002e76:	4658      	mov	r0, fp
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e78:	941b      	str	r4, [sp, #108]	; 0x6c
    GPIO_InitStruct.Pin = LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2 | LL_GPIO_PIN_15;
 8002e7a:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e7c:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002e80:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e84:	f7ff fb1a 	bl	80024bc <LL_GPIO_Init>
    LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = { 0 };
 8002e88:	4621      	mov	r1, r4
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	a818      	add	r0, sp, #96	; 0x60
    LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 8002e8e:	9408      	str	r4, [sp, #32]
 8002e90:	9409      	str	r4, [sp, #36]	; 0x24
 8002e92:	940a      	str	r4, [sp, #40]	; 0x28
 8002e94:	940b      	str	r4, [sp, #44]	; 0x2c
 8002e96:	940c      	str	r4, [sp, #48]	; 0x30
    LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = { 0 };
 8002e98:	f001 fc25 	bl	80046e6 <memset>
    TIM_InitStruct.Autoreload = 720 - 1;    //720 - 1;
 8002e9c:	f240 22cf 	movw	r2, #719	; 0x2cf
    LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = { 0 };
 8002ea0:	9412      	str	r4, [sp, #72]	; 0x48
    LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002ea2:	940d      	str	r4, [sp, #52]	; 0x34
    LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = { 0 };
 8002ea4:	9413      	str	r4, [sp, #76]	; 0x4c
 8002ea6:	9414      	str	r4, [sp, #80]	; 0x50
 8002ea8:	9415      	str	r4, [sp, #84]	; 0x54
 8002eaa:	9416      	str	r4, [sp, #88]	; 0x58
 8002eac:	9417      	str	r4, [sp, #92]	; 0x5c
    LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002eae:	940e      	str	r4, [sp, #56]	; 0x38
 8002eb0:	940f      	str	r4, [sp, #60]	; 0x3c
 8002eb2:	9410      	str	r4, [sp, #64]	; 0x40
 8002eb4:	9411      	str	r4, [sp, #68]	; 0x44
  SET_BIT(RCC->APB2ENR, Periphs);
 8002eb6:	69ab      	ldr	r3, [r5, #24]
    LL_TIM_Init(TIM1, &TIM_InitStruct);
 8002eb8:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 8002ebc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ec0:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002ec2:	69ab      	ldr	r3, [r5, #24]
 8002ec4:	a908      	add	r1, sp, #32
 8002ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eca:	9302      	str	r3, [sp, #8]
 8002ecc:	4630      	mov	r0, r6
  (void)tmpreg;
 8002ece:	9b02      	ldr	r3, [sp, #8]
    TIM_InitStruct.Autoreload = 720 - 1;    //720 - 1;
 8002ed0:	920a      	str	r2, [sp, #40]	; 0x28
    LL_TIM_Init(TIM1, &TIM_InitStruct);
 8002ed2:	f7ff fb77 	bl	80025c4 <LL_TIM_Init>
    TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002ed6:	f04f 0e60 	mov.w	lr, #96	; 0x60
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002eda:	6833      	ldr	r3, [r6, #0]
    LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002edc:	eb0d 020e 	add.w	r2, sp, lr
 8002ee0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ee4:	6033      	str	r3, [r6, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002ee6:	68b3      	ldr	r3, [r6, #8]
 8002ee8:	4641      	mov	r1, r8
 8002eea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eee:	f023 0307 	bic.w	r3, r3, #7
 8002ef2:	60b3      	str	r3, [r6, #8]
 8002ef4:	4630      	mov	r0, r6
    TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002ef6:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
    TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002efa:	9419      	str	r4, [sp, #100]	; 0x64
    TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002efc:	941a      	str	r4, [sp, #104]	; 0x68
    TIM_OC_InitStruct.CompareValue = 0;
 8002efe:	941b      	str	r4, [sp, #108]	; 0x6c
    TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002f00:	941c      	str	r4, [sp, #112]	; 0x70
    TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002f02:	941d      	str	r4, [sp, #116]	; 0x74
    TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002f04:	941e      	str	r4, [sp, #120]	; 0x78
    TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002f06:	941f      	str	r4, [sp, #124]	; 0x7c
    LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002f08:	f7ff fb9e 	bl	8002648 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002f0c:	69b3      	ldr	r3, [r6, #24]
    LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8002f0e:	aa18      	add	r2, sp, #96	; 0x60
 8002f10:	f023 0304 	bic.w	r3, r3, #4
 8002f14:	61b3      	str	r3, [r6, #24]
 8002f16:	4630      	mov	r0, r6
 8002f18:	2110      	movs	r1, #16
    TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002f1a:	9419      	str	r4, [sp, #100]	; 0x64
    TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002f1c:	941a      	str	r4, [sp, #104]	; 0x68
    LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8002f1e:	f7ff fb93 	bl	8002648 <LL_TIM_OC_Init>
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002f22:	6873      	ldr	r3, [r6, #4]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002f24:	69b2      	ldr	r2, [r6, #24]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f2a:	6073      	str	r3, [r6, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002f2c:	68b3      	ldr	r3, [r6, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002f36:	61b2      	str	r2, [r6, #24]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002f38:	60b3      	str	r3, [r6, #8]
    LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8002f3a:	4630      	mov	r0, r6
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002f3c:	2609      	movs	r6, #9
    LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8002f3e:	a912      	add	r1, sp, #72	; 0x48
    TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8002f40:	9412      	str	r4, [sp, #72]	; 0x48
    TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8002f42:	9413      	str	r4, [sp, #76]	; 0x4c
    TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8002f44:	9414      	str	r4, [sp, #80]	; 0x50
    TIM_BDTRInitStruct.DeadTime = 0;
 8002f46:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
    TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8002f4a:	f8ad 4056 	strh.w	r4, [sp, #86]	; 0x56
    TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8002f4e:	9417      	str	r4, [sp, #92]	; 0x5c
    TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8002f50:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
    LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8002f54:	f7ff fc52 	bl	80027fc <LL_TIM_BDTR_Init>
  SET_BIT(RCC->APB2ENR, Periphs);
 8002f58:	69ab      	ldr	r3, [r5, #24]
    GPIO_InitStruct.Pin = LL_GPIO_PIN_8 | LL_GPIO_PIN_9;
 8002f5a:	4a50      	ldr	r2, [pc, #320]	; (800309c <main+0x2cc>)
 8002f5c:	433b      	orrs	r3, r7
 8002f5e:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002f60:	69ab      	ldr	r3, [r5, #24]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f62:	a90d      	add	r1, sp, #52	; 0x34
 8002f64:	403b      	ands	r3, r7
 8002f66:	9303      	str	r3, [sp, #12]
 8002f68:	484d      	ldr	r0, [pc, #308]	; (80030a0 <main+0x2d0>)
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f6a:	9410      	str	r4, [sp, #64]	; 0x40
  (void)tmpreg;
 8002f6c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002f6e:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Pin = LL_GPIO_PIN_8 | LL_GPIO_PIN_9;
 8002f70:	920d      	str	r2, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002f72:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002f76:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7a:	f7ff fa9f 	bl	80024bc <LL_GPIO_Init>
    __HAL_RCC_DMA1_CLK_ENABLE()
 8002f7e:	696b      	ldr	r3, [r5, #20]
    HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002f80:	4622      	mov	r2, r4
    __HAL_RCC_DMA1_CLK_ENABLE()
 8002f82:	ea43 0308 	orr.w	r3, r3, r8
 8002f86:	616b      	str	r3, [r5, #20]
 8002f88:	696b      	ldr	r3, [r5, #20]
    HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002f8a:	4621      	mov	r1, r4
    __HAL_RCC_DMA1_CLK_ENABLE()
 8002f8c:	ea03 0308 	and.w	r3, r3, r8
 8002f90:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002f92:	200e      	movs	r0, #14
    __HAL_RCC_DMA1_CLK_ENABLE()
 8002f94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002f96:	f7fe fae5 	bl	8001564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002f9a:	200e      	movs	r0, #14
 8002f9c:	f7fe fb18 	bl	80015d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002fa0:	4622      	mov	r2, r4
 8002fa2:	4621      	mov	r1, r4
 8002fa4:	200f      	movs	r0, #15
 8002fa6:	f7fe fadd 	bl	8001564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002faa:	200f      	movs	r0, #15
 8002fac:	f7fe fb10 	bl	80015d0 <HAL_NVIC_EnableIRQ>
    huart1.Init.BaudRate = 460800;
 8002fb0:	f44f 21e1 	mov.w	r1, #460800	; 0x70800
    huart1.Init.Mode = UART_MODE_TX_RX;
 8002fb4:	220c      	movs	r2, #12
    huart1.Instance = USART1;
 8002fb6:	4b3b      	ldr	r3, [pc, #236]	; (80030a4 <main+0x2d4>)
 8002fb8:	4e3b      	ldr	r6, [pc, #236]	; (80030a8 <main+0x2d8>)
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fba:	4618      	mov	r0, r3
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fbc:	609c      	str	r4, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8002fbe:	60dc      	str	r4, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8002fc0:	611c      	str	r4, [r3, #16]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fc2:	619c      	str	r4, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fc4:	61dc      	str	r4, [r3, #28]
    huart1.Instance = USART1;
 8002fc6:	601e      	str	r6, [r3, #0]
    huart1.Init.BaudRate = 460800;
 8002fc8:	6059      	str	r1, [r3, #4]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8002fca:	615a      	str	r2, [r3, #20]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fcc:	f7ff f834 	bl	8002038 <HAL_UART_Init>
    LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002fd0:	9418      	str	r4, [sp, #96]	; 0x60
 8002fd2:	9419      	str	r4, [sp, #100]	; 0x64
    LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 8002fd4:	9412      	str	r4, [sp, #72]	; 0x48
 8002fd6:	9413      	str	r4, [sp, #76]	; 0x4c
 8002fd8:	9414      	str	r4, [sp, #80]	; 0x50
 8002fda:	9415      	str	r4, [sp, #84]	; 0x54
 8002fdc:	9416      	str	r4, [sp, #88]	; 0x58
    LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002fde:	941a      	str	r4, [sp, #104]	; 0x68
 8002fe0:	941b      	str	r4, [sp, #108]	; 0x6c
 8002fe2:	941c      	str	r4, [sp, #112]	; 0x70
  SET_BIT(RCC->APB1ENR, Periphs);
 8002fe4:	69eb      	ldr	r3, [r5, #28]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8002fe6:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    GPIO_InitStruct.Pin = LL_GPIO_PIN_0 | LL_GPIO_PIN_1;
 8002fea:	f240 3203 	movw	r2, #771	; 0x303
 8002fee:	ea43 0308 	orr.w	r3, r3, r8
 8002ff2:	61eb      	str	r3, [r5, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002ff4:	69eb      	ldr	r3, [r5, #28]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff6:	a918      	add	r1, sp, #96	; 0x60
 8002ff8:	ea03 0308 	and.w	r3, r3, r8
 8002ffc:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002ffe:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003000:	69ab      	ldr	r3, [r5, #24]
 8003002:	4827      	ldr	r0, [pc, #156]	; (80030a0 <main+0x2d0>)
 8003004:	433b      	orrs	r3, r7
 8003006:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003008:	69ab      	ldr	r3, [r5, #24]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800300a:	9719      	str	r7, [sp, #100]	; 0x64
 800300c:	403b      	ands	r3, r7
    TIM_InitStruct.Autoreload = 0xffff;
 800300e:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8003012:	9308      	str	r3, [sp, #32]
  (void)tmpreg;
 8003014:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = LL_GPIO_PIN_0 | LL_GPIO_PIN_1;
 8003016:	9218      	str	r2, [sp, #96]	; 0x60
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003018:	f7ff fa50 	bl	80024bc <LL_GPIO_Init>
 800301c:	68b2      	ldr	r2, [r6, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800301e:	69b3      	ldr	r3, [r6, #24]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8003020:	f022 0207 	bic.w	r2, r2, #7
 8003024:	f042 0203 	orr.w	r2, r2, #3
 8003028:	60b2      	str	r2, [r6, #8]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 800302a:	6a32      	ldr	r2, [r6, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800302c:	0c1b      	lsrs	r3, r3, #16
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 800302e:	f022 020a 	bic.w	r2, r2, #10
 8003032:	6232      	str	r2, [r6, #32]
 8003034:	6a32      	ldr	r2, [r6, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8003036:	041b      	lsls	r3, r3, #16
 8003038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303c:	ea43 0308 	orr.w	r3, r3, r8
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8003040:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8003044:	61b3      	str	r3, [r6, #24]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8003046:	6232      	str	r2, [r6, #32]
    LL_TIM_Init(TIM2, &TIM_InitStruct);
 8003048:	a912      	add	r1, sp, #72	; 0x48
 800304a:	4630      	mov	r0, r6
    TIM_InitStruct.Prescaler = 0;
 800304c:	f8ad 4048 	strh.w	r4, [sp, #72]	; 0x48
    TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003050:	9413      	str	r4, [sp, #76]	; 0x4c
    TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003052:	9415      	str	r4, [sp, #84]	; 0x54
    TIM_InitStruct.Autoreload = 0xffff;
 8003054:	9714      	str	r7, [sp, #80]	; 0x50
    LL_TIM_Init(TIM2, &TIM_InitStruct);
 8003056:	f7ff fab5 	bl	80025c4 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800305a:	6833      	ldr	r3, [r6, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800305c:	4a13      	ldr	r2, [pc, #76]	; (80030ac <main+0x2dc>)
 800305e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003062:	6033      	str	r3, [r6, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003064:	6873      	ldr	r3, [r6, #4]
    TIM_InitStruct.Prescaler = 72 - 1;
 8003066:	2747      	movs	r7, #71	; 0x47
 8003068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306c:	6073      	str	r3, [r6, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800306e:	68b3      	ldr	r3, [r6, #8]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003070:	480f      	ldr	r0, [pc, #60]	; (80030b0 <main+0x2e0>)
 8003072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003076:	60b3      	str	r3, [r6, #8]
    LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 8003078:	9418      	str	r4, [sp, #96]	; 0x60
 800307a:	941a      	str	r4, [sp, #104]	; 0x68
 800307c:	9419      	str	r4, [sp, #100]	; 0x64
 800307e:	941b      	str	r4, [sp, #108]	; 0x6c
 8003080:	941c      	str	r4, [sp, #112]	; 0x70
  SET_BIT(RCC->APB1ENR, Periphs);
 8003082:	69eb      	ldr	r3, [r5, #28]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003084:	2601      	movs	r6, #1
 8003086:	e017      	b.n	80030b8 <main+0x2e8>
 8003088:	40021000 	.word	0x40021000
 800308c:	40011000 	.word	0x40011000
 8003090:	04200020 	.word	0x04200020
 8003094:	04400040 	.word	0x04400040
 8003098:	04800787 	.word	0x04800787
 800309c:	04030003 	.word	0x04030003
 80030a0:	40010800 	.word	0x40010800
 80030a4:	20001090 	.word	0x20001090
 80030a8:	40013800 	.word	0x40013800
 80030ac:	e000ed00 	.word	0xe000ed00
 80030b0:	e000e100 	.word	0xe000e100
 80030b4:	40010c00 	.word	0x40010c00
 80030b8:	ea43 0309 	orr.w	r3, r3, r9
 80030bc:	61eb      	str	r3, [r5, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80030be:	69eb      	ldr	r3, [r5, #28]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80030c0:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
 80030c4:	ea03 0309 	and.w	r3, r3, r9
 80030c8:	9312      	str	r3, [sp, #72]	; 0x48
  (void)tmpreg;
 80030ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030cc:	68d2      	ldr	r2, [r2, #12]
 80030ce:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030d2:	f1c2 0307 	rsb	r3, r2, #7
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	bf28      	it	cs
 80030da:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030dc:	1d11      	adds	r1, r2, #4
 80030de:	2906      	cmp	r1, #6
 80030e0:	bf88      	it	hi
 80030e2:	1ed4      	subhi	r4, r2, #3
    TIM_InitStruct.Autoreload = 1000 - 1;
 80030e4:	f240 32e7 	movw	r2, #999	; 0x3e7
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e8:	fa06 f303 	lsl.w	r3, r6, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	4033      	ands	r3, r6
 80030f0:	40a3      	lsls	r3, r4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f2:	011b      	lsls	r3, r3, #4
    LL_TIM_Init(TIM3, &TIM_InitStruct);
 80030f4:	4c4a      	ldr	r4, [pc, #296]	; (8003220 <main+0x450>)
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	f880 331d 	strb.w	r3, [r0, #797]	; 0x31d
 80030fc:	a918      	add	r1, sp, #96	; 0x60
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80030fe:	6005      	str	r5, [r0, #0]
 8003100:	4620      	mov	r0, r4
    TIM_InitStruct.Prescaler = 72 - 1;
 8003102:	f8ad 7060 	strh.w	r7, [sp, #96]	; 0x60
    TIM_InitStruct.Autoreload = 1000 - 1;
 8003106:	921a      	str	r2, [sp, #104]	; 0x68
    LL_TIM_Init(TIM3, &TIM_InitStruct);
 8003108:	f7ff fa5c 	bl	80025c4 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800310c:	6823      	ldr	r3, [r4, #0]
  SET_BIT(RCC->AHBENR, Periphs);
 800310e:	4a45      	ldr	r2, [pc, #276]	; (8003224 <main+0x454>)
 8003110:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003114:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8003116:	68a3      	ldr	r3, [r4, #8]
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003118:	4943      	ldr	r1, [pc, #268]	; (8003228 <main+0x458>)
 800311a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800311e:	f023 0307 	bic.w	r3, r3, #7
 8003122:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003124:	6863      	ldr	r3, [r4, #4]
    HAL_Delay(100);
 8003126:	2064      	movs	r0, #100	; 0x64
 8003128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312c:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800312e:	68a3      	ldr	r3, [r4, #8]
		tx_cplt = true;
 8003130:	4f3e      	ldr	r7, [pc, #248]	; (800322c <main+0x45c>)
 8003132:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003136:	60a3      	str	r3, [r4, #8]
 8003138:	6953      	ldr	r3, [r2, #20]
 800313a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800313e:	6153      	str	r3, [r2, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003140:	6953      	ldr	r3, [r2, #20]
 8003142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003146:	9318      	str	r3, [sp, #96]	; 0x60
  (void)tmpreg;
 8003148:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800314a:	680b      	ldr	r3, [r1, #0]
 800314c:	f043 0302 	orr.w	r3, r3, #2
 8003150:	600b      	str	r3, [r1, #0]
 8003152:	f7fd fedf 	bl	8000f14 <HAL_Delay>
		rx_tail = 0;
 8003156:	2300      	movs	r3, #0
		auto status = HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 8003158:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 800315c:	f8d7 0808 	ldr.w	r0, [r7, #2056]	; 0x808
 8003160:	f44f 6280 	mov.w	r2, #1024	; 0x400
		tx_cplt = true;
 8003164:	f887 6800 	strb.w	r6, [r7, #2048]	; 0x800
		rx_tail = 0;
 8003168:	f8a7 3802 	strh.w	r3, [r7, #2050]	; 0x802
		auto status = HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 800316c:	f7fe ffd0 	bl	8002110 <HAL_UART_Receive_DMA>
		if(status != HAL_OK)
 8003170:	b108      	cbz	r0, 8003176 <main+0x3a6>
  __ASM volatile ("nop");
 8003172:	bf00      	nop
 8003174:	e7fd      	b.n	8003172 <main+0x3a2>
    can_init();
 8003176:	f7ff fc57 	bl	8002a28 <can_init>
    can_set_bitrate(CAN_BITRATE_500K);
 800317a:	2006      	movs	r0, #6
 800317c:	f7ff fcaa 	bl	8002ad4 <can_set_bitrate>
    serial.write((const uint8_t *)buf, strlen(buf));
 8003180:	492b      	ldr	r1, [pc, #172]	; (8003230 <main+0x460>)
 8003182:	2229      	movs	r2, #41	; 0x29
 8003184:	4638      	mov	r0, r7
 8003186:	f7ff fd73 	bl	8002c70 <_ZN11SerialClass5writeEPKhi>
    GPIOB->BSRR = GPIO_BSRR_BS0 | GPIO_BSRR_BS1 | GPIO_BSRR_BS2;
 800318a:	2607      	movs	r6, #7
    GPIOC->BSRR = GPIO_BSRR_BS13;
 800318c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIOB->BSRR = GPIO_BSRR_BS0 | GPIO_BSRR_BS1 | GPIO_BSRR_BS2;
 8003190:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8003240 <main+0x470>
    GPIOC->BSRR = GPIO_BSRR_BS13;
 8003194:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8003244 <main+0x474>
    HAL_Delay(100);
 8003198:	2064      	movs	r0, #100	; 0x64
    GPIOB->BSRR = GPIO_BSRR_BS0 | GPIO_BSRR_BS1 | GPIO_BSRR_BS2;
 800319a:	f8c9 6010 	str.w	r6, [r9, #16]
    GPIOC->BSRR = GPIO_BSRR_BS13;
 800319e:	f8c8 3010 	str.w	r3, [r8, #16]
    HAL_Delay(100);
 80031a2:	f7fd feb7 	bl	8000f14 <HAL_Delay>
    GPIOB->BSRR = GPIO_BSRR_BR0 | GPIO_BSRR_BR1 | GPIO_BSRR_BR2;
 80031a6:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80031aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031ae:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOC->BSRR = GPIO_BSRR_BR13;
 80031b2:	f8c8 5010 	str.w	r5, [r8, #16]
 80031b6:	6813      	ldr	r3, [r2, #0]
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	6013      	str	r3, [r2, #0]
    readConf();
 80031be:	f7ff fcbf 	bl	8002b40 <_Z8readConfv>
    control.ReadConfig();
 80031c2:	481c      	ldr	r0, [pc, #112]	; (8003234 <main+0x464>)
 80031c4:	f000 f98c 	bl	80034e0 <_ZN9MotorCtrl10ReadConfigEv>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80031c8:	68e1      	ldr	r1, [r4, #12]
    control.SetTarget(0);
 80031ca:	2200      	movs	r2, #0
 80031cc:	f041 0101 	orr.w	r1, r1, #1
 80031d0:	60e1      	str	r1, [r4, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80031d2:	6821      	ldr	r1, [r4, #0]
 80031d4:	2300      	movs	r3, #0
 80031d6:	f041 0101 	orr.w	r1, r1, #1
 80031da:	6021      	str	r1, [r4, #0]
 80031dc:	4815      	ldr	r0, [pc, #84]	; (8003234 <main+0x464>)
 80031de:	f000 f957 	bl	8003490 <_ZN9MotorCtrl9SetTargetEd>
    HAL_Delay(100);
 80031e2:	2064      	movs	r0, #100	; 0x64
 80031e4:	f7fd fe96 	bl	8000f14 <HAL_Delay>
  SET_BIT(TIMx->CCER, Channels);
 80031e8:	4b13      	ldr	r3, [pc, #76]	; (8003238 <main+0x468>)
 80031ea:	6a1a      	ldr	r2, [r3, #32]
 80031ec:	f042 0211 	orr.w	r2, r2, #17
 80031f0:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	f042 0201 	orr.w	r2, r2, #1
 80031f8:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80031fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003200:	645a      	str	r2, [r3, #68]	; 0x44
    can_enable();
 8003202:	f7ff fc25 	bl	8002a50 <can_enable>
    serial.write((const uint8_t *) buf, strlen(buf));
 8003206:	4632      	mov	r2, r6
 8003208:	4638      	mov	r0, r7
 800320a:	490c      	ldr	r1, [pc, #48]	; (800323c <main+0x46c>)
 800320c:	f7ff fd30 	bl	8002c70 <_ZN11SerialClass5writeEPKhi>
    uart_prompt();
 8003210:	f000 fb62 	bl	80038d8 <_Z11uart_promptv>
        uart_process();
 8003214:	f000 fc90 	bl	8003b38 <_Z12uart_processv>
        led_process();
 8003218:	f7ff fce0 	bl	8002bdc <led_process>
 800321c:	e7fa      	b.n	8003214 <main+0x444>
 800321e:	bf00      	nop
 8003220:	40000400 	.word	0x40000400
 8003224:	40021000 	.word	0x40021000
 8003228:	e000e010 	.word	0xe000e010
 800322c:	20000744 	.word	0x20000744
 8003230:	08009ce0 	.word	0x08009ce0
 8003234:	20000008 	.word	0x20000008
 8003238:	40012c00 	.word	0x40012c00
 800323c:	08009d0c 	.word	0x08009d0c
 8003240:	40010c00 	.word	0x40010c00
 8003244:	40011000 	.word	0x40011000

08003248 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop

0800324c <_ZN9MotorCtrl7ControlEv>:
 */

#include "motor_ctrl.hpp"

void MotorCtrl::Control(void)
{
 800324c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if((GPIOC->IDR & GPIO_IDR_IDR14) == 0)
 8003250:	4b88      	ldr	r3, [pc, #544]	; (8003474 <_ZN9MotorCtrl7ControlEv+0x228>)
{
 8003252:	b083      	sub	sp, #12
    if((GPIOC->IDR & GPIO_IDR_IDR14) == 0)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
 800325a:	d12e      	bne.n	80032ba <_ZN9MotorCtrl7ControlEv+0x6e>
        GPIOB->BSRR = GPIO_BSRR_BR15;
 800325c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
        this->shutdown = true;
 8003260:	2401      	movs	r4, #1
        TIM2->CNT = 0;
 8003262:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
        TIM1->CCR1 = 0;
 8003266:	4a84      	ldr	r2, [pc, #528]	; (8003478 <_ZN9MotorCtrl7ControlEv+0x22c>)
        GPIOB->BSRR = GPIO_BSRR_BR15;
 8003268:	4d84      	ldr	r5, [pc, #528]	; (800347c <_ZN9MotorCtrl7ControlEv+0x230>)
 800326a:	612e      	str	r6, [r5, #16]
        TIM1->CCR1 = 0;
 800326c:	6353      	str	r3, [r2, #52]	; 0x34
        TIM1->CCR2 = 0;
 800326e:	6393      	str	r3, [r2, #56]	; 0x38
        this->shutdown = true;
 8003270:	7104      	strb	r4, [r0, #4]
        TIM2->CNT = 0;
 8003272:	624b      	str	r3, [r1, #36]	; 0x24
    }

    if(this->shutdown)
    {
        // disable gate drivers
        GPIOB->BSRR = GPIO_BSRR_BR15;
 8003274:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
        this->velocity = 0;
 8003278:	2200      	movs	r2, #0
 800327a:	2300      	movs	r3, #0
        TIM1->CCR1 = 0;
 800327c:	2100      	movs	r1, #0
        TIM2->CNT = 0;
 800327e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
        GPIOB->BSRR = GPIO_BSRR_BR15;
 8003282:	4c7e      	ldr	r4, [pc, #504]	; (800347c <_ZN9MotorCtrl7ControlEv+0x230>)
        TIM1->CCR1 = 0;
 8003284:	4d7c      	ldr	r5, [pc, #496]	; (8003478 <_ZN9MotorCtrl7ControlEv+0x22c>)
        GPIOB->BSRR = GPIO_BSRR_BR15;
 8003286:	6127      	str	r7, [r4, #16]
        TIM1->CCR2 = 0;

        // turn red led on, yellow off
        GPIOB->BSRR = GPIO_BSRR_BS2 | GPIO_BSRR_BR1;
 8003288:	4f7d      	ldr	r7, [pc, #500]	; (8003480 <_ZN9MotorCtrl7ControlEv+0x234>)
        TIM1->CCR1 = 0;
 800328a:	6369      	str	r1, [r5, #52]	; 0x34
        TIM1->CCR2 = 0;
 800328c:	63a9      	str	r1, [r5, #56]	; 0x38
        GPIOB->BSRR = GPIO_BSRR_BS2 | GPIO_BSRR_BR1;
 800328e:	6127      	str	r7, [r4, #16]
 8003290:	6271      	str	r1, [r6, #36]	; 0x24
        this->pulse = 0;
 8003292:	6081      	str	r1, [r0, #8]
        this->velocity = 0;
 8003294:	e9c0 2304 	strd	r2, r3, [r0, #16]
        this->error = 0;
 8003298:	e9c0 2306 	strd	r2, r3, [r0, #24]
        this->error_prev = 0;
 800329c:	e9c0 2308 	strd	r2, r3, [r0, #32]
        this->u_p = 0;
 80032a0:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        this->u_i = 0;
 80032a4:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        this->target_velocity = 0;
 80032a8:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        this->target_torque = 0;
 80032ac:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        this->target_voltage = 0;
 80032b0:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48

    // apply output voltage
    SetDuty(target_voltage * 1000 / MaximumVoltage);

    GPIOB->BSRR = GPIO_BSRR_BR1;
}
 80032b4:	b003      	add	sp, #12
 80032b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(this->shutdown)
 80032ba:	7902      	ldrb	r2, [r0, #4]
 80032bc:	2a00      	cmp	r2, #0
 80032be:	d1d9      	bne.n	8003274 <_ZN9MotorCtrl7ControlEv+0x28>
    this->error_prev = this->error;
 80032c0:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
    this->pulse = static_cast<int16_t>(TIM2->CNT);
 80032c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032c8:	4682      	mov	sl, r0
    GPIOB->BSRR = GPIO_BSRR_BR2 | GPIO_BSRR_BS1;
 80032ca:	496c      	ldr	r1, [pc, #432]	; (800347c <_ZN9MotorCtrl7ControlEv+0x230>)
 80032cc:	486d      	ldr	r0, [pc, #436]	; (8003484 <_ZN9MotorCtrl7ControlEv+0x238>)
 80032ce:	6108      	str	r0, [r1, #16]
    this->pulse = static_cast<int16_t>(TIM2->CNT);
 80032d0:	6a58      	ldr	r0, [r3, #36]	; 0x24
    this->error_prev = this->error;
 80032d2:	e9ca 6708 	strd	r6, r7, [sl, #32]
    this->pulse = static_cast<int16_t>(TIM2->CNT);
 80032d6:	b200      	sxth	r0, r0
 80032d8:	f8ca 0008 	str.w	r0, [sl, #8]
    TIM2->CNT = 0;
 80032dc:	625a      	str	r2, [r3, #36]	; 0x24
    this->velocity = pulse * Kh;
 80032de:	f7fd f89b 	bl	8000418 <__aeabi_i2d>
 80032e2:	e9da 231c 	ldrd	r2, r3, [sl, #112]	; 0x70
 80032e6:	f7fd f8fd 	bl	80004e4 <__aeabi_dmul>
 80032ea:	4604      	mov	r4, r0
 80032ec:	460d      	mov	r5, r1
    this->error = this->target_velocity - this->velocity;
 80032ee:	e9da 010e 	ldrd	r0, r1, [sl, #56]	; 0x38
 80032f2:	4622      	mov	r2, r4
 80032f4:	462b      	mov	r3, r5
    this->velocity = pulse * Kh;
 80032f6:	e9ca 4504 	strd	r4, r5, [sl, #16]
    this->error = this->target_velocity - this->velocity;
 80032fa:	f7fc ff3f 	bl	800017c <__aeabi_dsub>
 80032fe:	4680      	mov	r8, r0
 8003300:	4689      	mov	r9, r1
    this->u_p = Kp * (this->error - this->error_prev);
 8003302:	4632      	mov	r2, r6
 8003304:	463b      	mov	r3, r7
    this->error = this->target_velocity - this->velocity;
 8003306:	e9ca 8906 	strd	r8, r9, [sl, #24]
    this->u_p = Kp * (this->error - this->error_prev);
 800330a:	f7fc ff37 	bl	800017c <__aeabi_dsub>
 800330e:	e9da 2316 	ldrd	r2, r3, [sl, #88]	; 0x58
 8003312:	f7fd f8e7 	bl	80004e4 <__aeabi_dmul>
    this->u_i = KiTc * this->error;
 8003316:	e9da 2318 	ldrd	r2, r3, [sl, #96]	; 0x60
    this->u_p = Kp * (this->error - this->error_prev);
 800331a:	4606      	mov	r6, r0
 800331c:	460f      	mov	r7, r1
    this->u_i = KiTc * this->error;
 800331e:	4640      	mov	r0, r8
    this->u_p = Kp * (this->error - this->error_prev);
 8003320:	e9ca 670a 	strd	r6, r7, [sl, #40]	; 0x28
    this->u_i = KiTc * this->error;
 8003324:	4649      	mov	r1, r9
 8003326:	f7fd f8dd 	bl	80004e4 <__aeabi_dmul>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
    this->target_torque += (u_p + u_i);
 800332e:	4630      	mov	r0, r6
 8003330:	4639      	mov	r1, r7
    this->u_i = KiTc * this->error;
 8003332:	e9ca 230c 	strd	r2, r3, [sl, #48]	; 0x30
    this->target_torque += (u_p + u_i);
 8003336:	f7fc ff23 	bl	8000180 <__adddf3>
 800333a:	e9da 2310 	ldrd	r2, r3, [sl, #64]	; 0x40
 800333e:	f7fc ff1f 	bl	8000180 <__adddf3>
 8003342:	4680      	mov	r8, r0
 8003344:	4689      	mov	r9, r1
    if (MaximumTorque < target_torque)
 8003346:	f8da 7090 	ldr.w	r7, [sl, #144]	; 0x90
 800334a:	f8da 6094 	ldr.w	r6, [sl, #148]	; 0x94
 800334e:	463a      	mov	r2, r7
 8003350:	4633      	mov	r3, r6
    this->target_torque += (u_p + u_i);
 8003352:	e9ca 8910 	strd	r8, r9, [sl, #64]	; 0x40
 8003356:	4683      	mov	fp, r0
 8003358:	9101      	str	r1, [sp, #4]
    if (MaximumTorque < target_torque)
 800335a:	f7fd fb53 	bl	8000a04 <__aeabi_dcmpgt>
 800335e:	2800      	cmp	r0, #0
 8003360:	d055      	beq.n	800340e <_ZN9MotorCtrl7ControlEv+0x1c2>
        target_torque = -MaximumTorque;
 8003362:	463a      	mov	r2, r7
 8003364:	4633      	mov	r3, r6
 8003366:	e9ca 2310 	strd	r2, r3, [sl, #64]	; 0x40
    target_voltage = (target_torque * Kg) + (this->velocity * Ke);
 800336a:	e9da 2320 	ldrd	r2, r3, [sl, #128]	; 0x80
 800336e:	4638      	mov	r0, r7
 8003370:	4631      	mov	r1, r6
 8003372:	f7fd f8b7 	bl	80004e4 <__aeabi_dmul>
 8003376:	e9da 231e 	ldrd	r2, r3, [sl, #120]	; 0x78
 800337a:	4606      	mov	r6, r0
 800337c:	460f      	mov	r7, r1
 800337e:	4620      	mov	r0, r4
 8003380:	4629      	mov	r1, r5
 8003382:	f7fd f8af 	bl	80004e4 <__aeabi_dmul>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	4630      	mov	r0, r6
 800338c:	4639      	mov	r1, r7
 800338e:	f7fc fef7 	bl	8000180 <__adddf3>
 8003392:	4680      	mov	r8, r0
 8003394:	4689      	mov	r9, r1
    if (MaximumVoltage < target_voltage)
 8003396:	f8da 6098 	ldr.w	r6, [sl, #152]	; 0x98
 800339a:	f8da 709c 	ldr.w	r7, [sl, #156]	; 0x9c
 800339e:	4632      	mov	r2, r6
 80033a0:	463b      	mov	r3, r7
    target_voltage = (target_torque * Kg) + (this->velocity * Ke);
 80033a2:	e9ca 8912 	strd	r8, r9, [sl, #72]	; 0x48
 80033a6:	460c      	mov	r4, r1
 80033a8:	4605      	mov	r5, r0
    if (MaximumVoltage < target_voltage)
 80033aa:	f7fd fb2b 	bl	8000a04 <__aeabi_dcmpgt>
 80033ae:	2800      	cmp	r0, #0
 80033b0:	d03a      	beq.n	8003428 <_ZN9MotorCtrl7ControlEv+0x1dc>
        target_voltage = MaximumVoltage;
 80033b2:	4632      	mov	r2, r6
 80033b4:	463b      	mov	r3, r7
 80033b6:	4635      	mov	r5, r6
 80033b8:	463c      	mov	r4, r7
 80033ba:	e9ca 2312 	strd	r2, r3, [sl, #72]	; 0x48
    SetDuty(target_voltage * 1000 / MaximumVoltage);
 80033be:	2200      	movs	r2, #0
 80033c0:	4b31      	ldr	r3, [pc, #196]	; (8003488 <_ZN9MotorCtrl7ControlEv+0x23c>)
 80033c2:	4628      	mov	r0, r5
 80033c4:	4621      	mov	r1, r4
 80033c6:	f7fd f88d 	bl	80004e4 <__aeabi_dmul>
 80033ca:	463b      	mov	r3, r7
 80033cc:	4632      	mov	r2, r6
 80033ce:	f7fd f9b3 	bl	8000738 <__aeabi_ddiv>
 80033d2:	f7fd fb37 	bl	8000a44 <__aeabi_d2iz>
        if (d < -1000 || 1000 < d)
 80033d6:	f500 737a 	add.w	r3, r0, #1000	; 0x3e8
 80033da:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80033de:	d80f      	bhi.n	8003400 <_ZN9MotorCtrl7ControlEv+0x1b4>
        if (0 < d)
 80033e0:	2800      	cmp	r0, #0
 80033e2:	dd32      	ble.n	800344a <_ZN9MotorCtrl7ControlEv+0x1fe>
            TIM1->CCR2 = 0;
 80033e4:	2100      	movs	r1, #0
            TIM1->CCR1 = d * ccr_max / 1000;
 80033e6:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 80033ea:	4b28      	ldr	r3, [pc, #160]	; (800348c <_ZN9MotorCtrl7ControlEv+0x240>)
 80033ec:	fb00 f002 	mul.w	r0, r0, r2
 80033f0:	fb83 2300 	smull	r2, r3, r3, r0
 80033f4:	4a20      	ldr	r2, [pc, #128]	; (8003478 <_ZN9MotorCtrl7ControlEv+0x22c>)
 80033f6:	17c0      	asrs	r0, r0, #31
 80033f8:	ebc0 10a3 	rsb	r0, r0, r3, asr #6
 80033fc:	6350      	str	r0, [r2, #52]	; 0x34
            TIM1->CCR2 = 0;
 80033fe:	6391      	str	r1, [r2, #56]	; 0x38
    GPIOB->BSRR = GPIO_BSRR_BR1;
 8003400:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003404:	4b1d      	ldr	r3, [pc, #116]	; (800347c <_ZN9MotorCtrl7ControlEv+0x230>)
 8003406:	611a      	str	r2, [r3, #16]
}
 8003408:	b003      	add	sp, #12
 800340a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (target_torque < -MaximumTorque)
 800340e:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8003412:	463a      	mov	r2, r7
 8003414:	4658      	mov	r0, fp
 8003416:	9901      	ldr	r1, [sp, #4]
 8003418:	4633      	mov	r3, r6
 800341a:	f7fd fad5 	bl	80009c8 <__aeabi_dcmplt>
 800341e:	2800      	cmp	r0, #0
 8003420:	d19f      	bne.n	8003362 <_ZN9MotorCtrl7ControlEv+0x116>
 8003422:	465f      	mov	r7, fp
 8003424:	9e01      	ldr	r6, [sp, #4]
 8003426:	e7a0      	b.n	800336a <_ZN9MotorCtrl7ControlEv+0x11e>
    else if (target_voltage < -MaximumVoltage)
 8003428:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800342c:	4632      	mov	r2, r6
 800342e:	4628      	mov	r0, r5
 8003430:	4621      	mov	r1, r4
 8003432:	4643      	mov	r3, r8
 8003434:	f7fd fac8 	bl	80009c8 <__aeabi_dcmplt>
 8003438:	2800      	cmp	r0, #0
 800343a:	d0c0      	beq.n	80033be <_ZN9MotorCtrl7ControlEv+0x172>
        target_voltage = -MaximumVoltage;
 800343c:	4632      	mov	r2, r6
 800343e:	4643      	mov	r3, r8
 8003440:	4644      	mov	r4, r8
 8003442:	4635      	mov	r5, r6
 8003444:	e9ca 2312 	strd	r2, r3, [sl, #72]	; 0x48
 8003448:	e7b9      	b.n	80033be <_ZN9MotorCtrl7ControlEv+0x172>
        else if (d < 0)
 800344a:	d103      	bne.n	8003454 <_ZN9MotorCtrl7ControlEv+0x208>
            TIM1->CCR1 = 0;
 800344c:	4b0a      	ldr	r3, [pc, #40]	; (8003478 <_ZN9MotorCtrl7ControlEv+0x22c>)
 800344e:	6358      	str	r0, [r3, #52]	; 0x34
            TIM1->CCR2 = 0;
 8003450:	6398      	str	r0, [r3, #56]	; 0x38
 8003452:	e7d5      	b.n	8003400 <_ZN9MotorCtrl7ControlEv+0x1b4>
            TIM1->CCR1 = 0;
 8003454:	2100      	movs	r1, #0
            TIM1->CCR2 = -d * ccr_max / 1000;
 8003456:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 800345a:	4240      	negs	r0, r0
 800345c:	fb03 f000 	mul.w	r0, r3, r0
 8003460:	4a0a      	ldr	r2, [pc, #40]	; (800348c <_ZN9MotorCtrl7ControlEv+0x240>)
 8003462:	17c3      	asrs	r3, r0, #31
 8003464:	fb82 2000 	smull	r2, r0, r2, r0
            TIM1->CCR1 = 0;
 8003468:	4a03      	ldr	r2, [pc, #12]	; (8003478 <_ZN9MotorCtrl7ControlEv+0x22c>)
            TIM1->CCR2 = -d * ccr_max / 1000;
 800346a:	ebc3 10a0 	rsb	r0, r3, r0, asr #6
            TIM1->CCR1 = 0;
 800346e:	6351      	str	r1, [r2, #52]	; 0x34
            TIM1->CCR2 = -d * ccr_max / 1000;
 8003470:	6390      	str	r0, [r2, #56]	; 0x38
 8003472:	e7c5      	b.n	8003400 <_ZN9MotorCtrl7ControlEv+0x1b4>
 8003474:	40011000 	.word	0x40011000
 8003478:	40012c00 	.word	0x40012c00
 800347c:	40010c00 	.word	0x40010c00
 8003480:	00020004 	.word	0x00020004
 8003484:	00040002 	.word	0x00040002
 8003488:	408f4000 	.word	0x408f4000
 800348c:	10624dd3 	.word	0x10624dd3

08003490 <_ZN9MotorCtrl9SetTargetEd>:

void MotorCtrl::SetTarget(double target)
{
 8003490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003494:	4604      	mov	r4, r0
 8003496:	4619      	mov	r1, r3
 8003498:	4610      	mov	r0, r2
    double tmp = target * Kr;
 800349a:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
 800349e:	f7fd f821 	bl	80004e4 <__aeabi_dmul>

    if (MaximumVelocity < tmp)
 80034a2:	f8d4 8088 	ldr.w	r8, [r4, #136]	; 0x88
 80034a6:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
 80034aa:	4642      	mov	r2, r8
 80034ac:	462b      	mov	r3, r5
    double tmp = target * Kr;
 80034ae:	4606      	mov	r6, r0
 80034b0:	460f      	mov	r7, r1
    if (MaximumVelocity < tmp)
 80034b2:	f7fd faa7 	bl	8000a04 <__aeabi_dcmpgt>
    {
        this->target_velocity = MaximumVelocity;
 80034b6:	4642      	mov	r2, r8
    if (MaximumVelocity < tmp)
 80034b8:	b960      	cbnz	r0, 80034d4 <_ZN9MotorCtrl9SetTargetEd+0x44>
    }
    else if (tmp < -MaximumVelocity)
 80034ba:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80034be:	462b      	mov	r3, r5
 80034c0:	4630      	mov	r0, r6
 80034c2:	4639      	mov	r1, r7
 80034c4:	f7fd fa80 	bl	80009c8 <__aeabi_dcmplt>
 80034c8:	b918      	cbnz	r0, 80034d2 <_ZN9MotorCtrl9SetTargetEd+0x42>
    {
        this->target_velocity = -MaximumVelocity;
    }
    else
    {
        this->target_velocity = tmp;
 80034ca:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
 80034ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        this->target_velocity = -MaximumVelocity;
 80034d2:	4642      	mov	r2, r8
 80034d4:	462b      	mov	r3, r5
 80034d6:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 80034da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034de:	bf00      	nop

080034e0 <_ZN9MotorCtrl10ReadConfigEv>:
    serial.write((const uint8_t *) buf, ret);
}


void MotorCtrl::ReadConfig(void)
{
 80034e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034e4:	4606      	mov	r6, r0
    this->Kp = confStruct.Kp;
 80034e6:	4f22      	ldr	r7, [pc, #136]	; (8003570 <_ZN9MotorCtrl10ReadConfigEv+0x90>)
        return this->MaximumTorque;
    }

    inline int SetSupplyVoltage(double vs)
    {
        if (vs < 0)
 80034e8:	2200      	movs	r2, #0
 80034ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    this->KiTc = confStruct.KiTc;
 80034ee:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
    this->Kg = confStruct.Kg;
    this->Kh = confStruct.Kh;
    this->Kr = confStruct.Kr;
    this->MaximumVelocity = confStruct.MaxVel;
    this->MaximumTorque = confStruct.MaxTrq;
    this->SetSupplyVoltage(confStruct.Vsup);
 80034f2:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
    this->Kp = confStruct.Kp;
 80034f6:	e9c6 0116 	strd	r0, r1, [r6, #88]	; 0x58
    this->Ke = confStruct.Ke;
 80034fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
    this->KiTc = confStruct.KiTc;
 80034fe:	e9c6 4518 	strd	r4, r5, [r6, #96]	; 0x60
    this->Kg = confStruct.Kg;
 8003502:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
    this->Ke = confStruct.Ke;
 8003506:	e9c6 011e 	strd	r0, r1, [r6, #120]	; 0x78
    this->Kh = confStruct.Kh;
 800350a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
    this->Kg = confStruct.Kg;
 800350e:	e9c6 4520 	strd	r4, r5, [r6, #128]	; 0x80
    this->Kr = confStruct.Kr;
 8003512:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
    this->Kh = confStruct.Kh;
 8003516:	e9c6 011c 	strd	r0, r1, [r6, #112]	; 0x70
    this->MaximumVelocity = confStruct.MaxVel;
 800351a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
    this->Kr = confStruct.Kr;
 800351e:	e9c6 4514 	strd	r4, r5, [r6, #80]	; 0x50
    this->MaximumTorque = confStruct.MaxTrq;
 8003522:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
    this->MaximumVelocity = confStruct.MaxVel;
 8003526:	e9c6 0122 	strd	r0, r1, [r6, #136]	; 0x88
 800352a:	2300      	movs	r3, #0
    this->MaximumTorque = confStruct.MaxTrq;
 800352c:	e9c6 4524 	strd	r4, r5, [r6, #144]	; 0x90
 8003530:	4640      	mov	r0, r8
 8003532:	4649      	mov	r1, r9
 8003534:	f7fd fa48 	bl	80009c8 <__aeabi_dcmplt>
 8003538:	b9b8      	cbnz	r0, 800356a <_ZN9MotorCtrl10ReadConfigEv+0x8a>
            return -1;

        this->SupplyVoltage = vs;
        this->MaximumVoltage = vs * (ccr_max + 1) / (ccr_arr + 1);
 800353a:	8870      	ldrh	r0, [r6, #2]
        this->SupplyVoltage = vs;
 800353c:	e9c6 8928 	strd	r8, r9, [r6, #160]	; 0xa0
        this->MaximumVoltage = vs * (ccr_max + 1) / (ccr_arr + 1);
 8003540:	3001      	adds	r0, #1
 8003542:	f7fc ff69 	bl	8000418 <__aeabi_i2d>
 8003546:	4642      	mov	r2, r8
 8003548:	464b      	mov	r3, r9
 800354a:	f7fc ffcb 	bl	80004e4 <__aeabi_dmul>
 800354e:	4604      	mov	r4, r0
 8003550:	8830      	ldrh	r0, [r6, #0]
 8003552:	460d      	mov	r5, r1
 8003554:	3001      	adds	r0, #1
 8003556:	f7fc ff5f 	bl	8000418 <__aeabi_i2d>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4620      	mov	r0, r4
 8003560:	4629      	mov	r1, r5
 8003562:	f7fd f8e9 	bl	8000738 <__aeabi_ddiv>
 8003566:	e9c6 0126 	strd	r0, r1, [r6, #152]	; 0x98
 800356a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800356e:	bf00      	nop
 8003570:	20000f80 	.word	0x20000f80

08003574 <_ZN9MotorCtrl11WriteConfigEv>:
}

void MotorCtrl::WriteConfig(void)
{
 8003574:	b4f0      	push	{r4, r5, r6, r7}
    confStruct.Kp = this->Kp;
 8003576:	e9d0 2316 	ldrd	r2, r3, [r0, #88]	; 0x58
    confStruct.KiTc = this->KiTc;
 800357a:	e9d0 4518 	ldrd	r4, r5, [r0, #96]	; 0x60
    confStruct.Ke = this->Ke;
    confStruct.Kg = this->Kg;
 800357e:	e9d0 6720 	ldrd	r6, r7, [r0, #128]	; 0x80
    confStruct.Kp = this->Kp;
 8003582:	4910      	ldr	r1, [pc, #64]	; (80035c4 <_ZN9MotorCtrl11WriteConfigEv+0x50>)
 8003584:	e9c1 2302 	strd	r2, r3, [r1, #8]
    confStruct.Ke = this->Ke;
 8003588:	e9d0 231e 	ldrd	r2, r3, [r0, #120]	; 0x78
    confStruct.KiTc = this->KiTc;
 800358c:	e9c1 4504 	strd	r4, r5, [r1, #16]
    confStruct.Kh = this->Kh;
 8003590:	e9d0 451c 	ldrd	r4, r5, [r0, #112]	; 0x70
    confStruct.Ke = this->Ke;
 8003594:	e9c1 2306 	strd	r2, r3, [r1, #24]
    confStruct.Kr = this->Kr;
 8003598:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
    confStruct.Kg = this->Kg;
 800359c:	e9c1 6708 	strd	r6, r7, [r1, #32]
    confStruct.MaxVel = this->MaximumVelocity;
 80035a0:	e9d0 6722 	ldrd	r6, r7, [r0, #136]	; 0x88
    confStruct.Kh = this->Kh;
 80035a4:	e9c1 450a 	strd	r4, r5, [r1, #40]	; 0x28
    confStruct.MaxTrq = this->MaximumTorque;
 80035a8:	e9d0 4524 	ldrd	r4, r5, [r0, #144]	; 0x90
    confStruct.Kr = this->Kr;
 80035ac:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    confStruct.Vsup = this->SupplyVoltage;
 80035b0:	e9d0 2328 	ldrd	r2, r3, [r0, #160]	; 0xa0
    confStruct.MaxVel = this->MaximumVelocity;
 80035b4:	e9c1 670e 	strd	r6, r7, [r1, #56]	; 0x38
    confStruct.MaxTrq = this->MaximumTorque;
 80035b8:	e9c1 4510 	strd	r4, r5, [r1, #64]	; 0x40
}
 80035bc:	bcf0      	pop	{r4, r5, r6, r7}
    confStruct.Vsup = this->SupplyVoltage;
 80035be:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 80035c2:	4770      	bx	lr
 80035c4:	20000f80 	.word	0x20000f80

080035c8 <HAL_MspInit>:
{
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_AFIO_CLK_ENABLE()
 80035c8:	4b25      	ldr	r3, [pc, #148]	; (8003660 <HAL_MspInit+0x98>)
{
 80035ca:	b500      	push	{lr}
    __HAL_RCC_AFIO_CLK_ENABLE()
 80035cc:	699a      	ldr	r2, [r3, #24]
{
 80035ce:	b083      	sub	sp, #12
    __HAL_RCC_AFIO_CLK_ENABLE()
 80035d0:	f042 0201 	orr.w	r2, r2, #1
 80035d4:	619a      	str	r2, [r3, #24]
 80035d6:	699a      	ldr	r2, [r3, #24]
    ;
    __HAL_RCC_PWR_CLK_ENABLE()
    ;

    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035d8:	2003      	movs	r0, #3
    __HAL_RCC_AFIO_CLK_ENABLE()
 80035da:	f002 0201 	and.w	r2, r2, #1
 80035de:	9200      	str	r2, [sp, #0]
 80035e0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_PWR_CLK_ENABLE()
 80035e2:	69da      	ldr	r2, [r3, #28]
 80035e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80035e8:	61da      	str	r2, [r3, #28]
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f0:	9301      	str	r3, [sp, #4]
 80035f2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035f4:	f7fd ffa4 	bl	8001540 <HAL_NVIC_SetPriorityGrouping>

    /* System interrupt init*/
    /* MemoryManagement_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80035f8:	2200      	movs	r2, #0
 80035fa:	f06f 000b 	mvn.w	r0, #11
 80035fe:	4611      	mov	r1, r2
 8003600:	f7fd ffb0 	bl	8001564 <HAL_NVIC_SetPriority>
    /* BusFault_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003604:	2200      	movs	r2, #0
 8003606:	f06f 000a 	mvn.w	r0, #10
 800360a:	4611      	mov	r1, r2
 800360c:	f7fd ffaa 	bl	8001564 <HAL_NVIC_SetPriority>
    /* UsageFault_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003610:	2200      	movs	r2, #0
 8003612:	f06f 0009 	mvn.w	r0, #9
 8003616:	4611      	mov	r1, r2
 8003618:	f7fd ffa4 	bl	8001564 <HAL_NVIC_SetPriority>
    /* SVCall_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800361c:	2200      	movs	r2, #0
 800361e:	f06f 0004 	mvn.w	r0, #4
 8003622:	4611      	mov	r1, r2
 8003624:	f7fd ff9e 	bl	8001564 <HAL_NVIC_SetPriority>
    /* DebugMonitor_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003628:	2200      	movs	r2, #0
 800362a:	f06f 0003 	mvn.w	r0, #3
 800362e:	4611      	mov	r1, r2
 8003630:	f7fd ff98 	bl	8001564 <HAL_NVIC_SetPriority>
    /* PendSV_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003634:	2200      	movs	r2, #0
 8003636:	f06f 0001 	mvn.w	r0, #1
 800363a:	4611      	mov	r1, r2
 800363c:	f7fd ff92 	bl	8001564 <HAL_NVIC_SetPriority>
    /* SysTick_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003640:	2200      	movs	r2, #0
 8003642:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003646:	4611      	mov	r1, r2
 8003648:	f7fd ff8c 	bl	8001564 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled
     */
    __HAL_AFIO_REMAP_SWJ_NOJTAG()
 800364c:	4a05      	ldr	r2, [pc, #20]	; (8003664 <HAL_MspInit+0x9c>)
 800364e:	6853      	ldr	r3, [r2, #4]
 8003650:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003654:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003658:	6053      	str	r3, [r2, #4]
    ;

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 800365a:	b003      	add	sp, #12
 800365c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003660:	40021000 	.word	0x40021000
 8003664:	40010000 	.word	0x40010000

08003668 <HAL_CAN_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hcan: CAN handle pointer
 * @retval None
 */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003668:	b530      	push	{r4, r5, lr}

    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800366a:	2400      	movs	r4, #0
    if (hcan->Instance == CAN1)
 800366c:	6802      	ldr	r2, [r0, #0]
 800366e:	4b21      	ldr	r3, [pc, #132]	; (80036f4 <HAL_CAN_MspInit+0x8c>)
{
 8003670:	b087      	sub	sp, #28
    if (hcan->Instance == CAN1)
 8003672:	429a      	cmp	r2, r3
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003674:	9402      	str	r4, [sp, #8]
 8003676:	9403      	str	r4, [sp, #12]
 8003678:	9404      	str	r4, [sp, #16]
 800367a:	9405      	str	r4, [sp, #20]
    if (hcan->Instance == CAN1)
 800367c:	d001      	beq.n	8003682 <HAL_CAN_MspInit+0x1a>
        /* USER CODE BEGIN CAN1_MspInit 1 */

        /* USER CODE END CAN1_MspInit 1 */
    }

}
 800367e:	b007      	add	sp, #28
 8003680:	bd30      	pop	{r4, r5, pc}
        GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003682:	f44f 7580 	mov.w	r5, #256	; 0x100
        __HAL_RCC_CAN1_CLK_ENABLE()
 8003686:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 800368a:	69da      	ldr	r2, [r3, #28]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800368c:	a902      	add	r1, sp, #8
        __HAL_RCC_CAN1_CLK_ENABLE()
 800368e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003692:	61da      	str	r2, [r3, #28]
 8003694:	69da      	ldr	r2, [r3, #28]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003696:	4818      	ldr	r0, [pc, #96]	; (80036f8 <HAL_CAN_MspInit+0x90>)
        __HAL_RCC_CAN1_CLK_ENABLE()
 8003698:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800369c:	9200      	str	r2, [sp, #0]
 800369e:	9a00      	ldr	r2, [sp, #0]
        __HAL_RCC_GPIOB_CLK_ENABLE()
 80036a0:	699a      	ldr	r2, [r3, #24]
 80036a2:	f042 0208 	orr.w	r2, r2, #8
 80036a6:	619a      	str	r2, [r3, #24]
 80036a8:	699b      	ldr	r3, [r3, #24]
        GPIO_InitStruct.Pin = GPIO_PIN_8;
 80036aa:	9502      	str	r5, [sp, #8]
        __HAL_RCC_GPIOB_CLK_ENABLE()
 80036ac:	f003 0308 	and.w	r3, r3, #8
 80036b0:	9301      	str	r3, [sp, #4]
 80036b2:	9b01      	ldr	r3, [sp, #4]
        GPIO_InitStruct.Pin = GPIO_PIN_9;
 80036b4:	f44f 7500 	mov.w	r5, #512	; 0x200
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b8:	f7fe fadc 	bl	8001c74 <HAL_GPIO_Init>
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036bc:	2202      	movs	r2, #2
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036be:	2303      	movs	r3, #3
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036c0:	a902      	add	r1, sp, #8
 80036c2:	480d      	ldr	r0, [pc, #52]	; (80036f8 <HAL_CAN_MspInit+0x90>)
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c4:	9203      	str	r2, [sp, #12]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036c6:	9305      	str	r3, [sp, #20]
        GPIO_InitStruct.Pin = GPIO_PIN_9;
 80036c8:	9502      	str	r5, [sp, #8]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ca:	f7fe fad3 	bl	8001c74 <HAL_GPIO_Init>
        __HAL_AFIO_REMAP_CAN1_2()
 80036ce:	480b      	ldr	r0, [pc, #44]	; (80036fc <HAL_CAN_MspInit+0x94>)
        HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80036d0:	4622      	mov	r2, r4
        __HAL_AFIO_REMAP_CAN1_2()
 80036d2:	6843      	ldr	r3, [r0, #4]
        HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80036d4:	4621      	mov	r1, r4
        __HAL_AFIO_REMAP_CAN1_2()
 80036d6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80036da:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80036de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036e2:	6043      	str	r3, [r0, #4]
        HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80036e4:	2014      	movs	r0, #20
 80036e6:	f7fd ff3d 	bl	8001564 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80036ea:	2014      	movs	r0, #20
 80036ec:	f7fd ff70 	bl	80015d0 <HAL_NVIC_EnableIRQ>
}
 80036f0:	b007      	add	sp, #28
 80036f2:	bd30      	pop	{r4, r5, pc}
 80036f4:	40006400 	.word	0x40006400
 80036f8:	40010c00 	.word	0x40010c00
 80036fc:	40010000 	.word	0x40010000

08003700 <HAL_UART_MspInit>:
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
    GPIO_InitTypeDef GPIO_InitStruct;
    if (huart->Instance == USART1)
 8003700:	4b35      	ldr	r3, [pc, #212]	; (80037d8 <HAL_UART_MspInit+0xd8>)
 8003702:	6802      	ldr	r2, [r0, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d000      	beq.n	800370a <HAL_UART_MspInit+0xa>
 8003708:	4770      	bx	lr
{
 800370a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800370c:	4604      	mov	r4, r0

        /**USART1 GPIO Configuration
         PB6   ------> USART1_TX
         PB7   ------> USART1_RX
         */
        GPIO_InitStruct.Pin = GPIO_PIN_6;
 800370e:	2040      	movs	r0, #64	; 0x40
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003710:	f04f 0e02 	mov.w	lr, #2
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003714:	2603      	movs	r6, #3
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

        GPIO_InitStruct.Pin = GPIO_PIN_7;
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003716:	2500      	movs	r5, #0
        GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003718:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_USART1_CLK_ENABLE();
 800371a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800371e:	699a      	ldr	r2, [r3, #24]
{
 8003720:	b087      	sub	sp, #28
        __HAL_RCC_USART1_CLK_ENABLE();
 8003722:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003726:	619a      	str	r2, [r3, #24]
 8003728:	699b      	ldr	r3, [r3, #24]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800372a:	a902      	add	r1, sp, #8
        __HAL_RCC_USART1_CLK_ENABLE();
 800372c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003730:	9301      	str	r3, [sp, #4]
        GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003732:	9002      	str	r0, [sp, #8]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003734:	4829      	ldr	r0, [pc, #164]	; (80037dc <HAL_UART_MspInit+0xdc>)
        __HAL_RCC_USART1_CLK_ENABLE();
 8003736:	9b01      	ldr	r3, [sp, #4]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003738:	f8cd e00c 	str.w	lr, [sp, #12]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800373c:	9605      	str	r6, [sp, #20]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800373e:	f7fe fa99 	bl	8001c74 <HAL_GPIO_Init>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003742:	a902      	add	r1, sp, #8
 8003744:	4825      	ldr	r0, [pc, #148]	; (80037dc <HAL_UART_MspInit+0xdc>)
        GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003746:	9702      	str	r7, [sp, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003748:	9503      	str	r5, [sp, #12]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374a:	9504      	str	r5, [sp, #16]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800374c:	f7fe fa92 	bl	8001c74 <HAL_GPIO_Init>
        hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
        hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
        hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
        hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
        hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
        hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003750:	f04f 0e20 	mov.w	lr, #32
        hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003754:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        __HAL_AFIO_REMAP_USART1_ENABLE();
 8003758:	4a21      	ldr	r2, [pc, #132]	; (80037e0 <HAL_UART_MspInit+0xe0>)
        hdma_usart1_rx.Instance = DMA1_Channel5;
 800375a:	4e22      	ldr	r6, [pc, #136]	; (80037e4 <HAL_UART_MspInit+0xe4>)
        __HAL_AFIO_REMAP_USART1_ENABLE();
 800375c:	6853      	ldr	r3, [r2, #4]
        hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800375e:	60f7      	str	r7, [r6, #12]
        __HAL_AFIO_REMAP_USART1_ENABLE();
 8003760:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003764:	f043 0304 	orr.w	r3, r3, #4
        hdma_usart1_rx.Instance = DMA1_Channel5;
 8003768:	4f1f      	ldr	r7, [pc, #124]	; (80037e8 <HAL_UART_MspInit+0xe8>)
        __HAL_AFIO_REMAP_USART1_ENABLE();
 800376a:	6053      	str	r3, [r2, #4]
        if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800376c:	4630      	mov	r0, r6
        hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800376e:	6075      	str	r5, [r6, #4]
        hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003770:	60b5      	str	r5, [r6, #8]
        hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003772:	6135      	str	r5, [r6, #16]
        hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003774:	6175      	str	r5, [r6, #20]
        hdma_usart1_rx.Instance = DMA1_Channel5;
 8003776:	6037      	str	r7, [r6, #0]
        hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003778:	f8c6 e018 	str.w	lr, [r6, #24]
        hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800377c:	61f1      	str	r1, [r6, #28]
        if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800377e:	f7fd ff51 	bl	8001624 <HAL_DMA_Init>
 8003782:	bb10      	cbnz	r0, 80037ca <HAL_UART_MspInit+0xca>

        __HAL_LINKDMA(huart, hdmarx, hdma_usart1_rx);

        /* USART1_TX Init */
        hdma_usart1_tx.Instance = DMA1_Channel4;
        hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003784:	2010      	movs	r0, #16
        hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003786:	2300      	movs	r3, #0
        hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003788:	2780      	movs	r7, #128	; 0x80
        hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800378a:	f44f 7100 	mov.w	r1, #512	; 0x200
        hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
        hdma_usart1_tx.Init.Mode = DMA_NORMAL;
        hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800378e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
        hdma_usart1_tx.Instance = DMA1_Channel4;
 8003792:	4d16      	ldr	r5, [pc, #88]	; (80037ec <HAL_UART_MspInit+0xec>)
        __HAL_LINKDMA(huart, hdmarx, hdma_usart1_rx);
 8003794:	6366      	str	r6, [r4, #52]	; 0x34
 8003796:	6274      	str	r4, [r6, #36]	; 0x24
        hdma_usart1_tx.Instance = DMA1_Channel4;
 8003798:	4e15      	ldr	r6, [pc, #84]	; (80037f0 <HAL_UART_MspInit+0xf0>)
        hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800379a:	6068      	str	r0, [r5, #4]
        if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800379c:	4628      	mov	r0, r5
        hdma_usart1_tx.Instance = DMA1_Channel4;
 800379e:	602e      	str	r6, [r5, #0]
        hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037a0:	60ef      	str	r7, [r5, #12]
        hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80037a2:	6129      	str	r1, [r5, #16]
        hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80037a4:	61ea      	str	r2, [r5, #28]
        hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037a6:	60ab      	str	r3, [r5, #8]
        hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037a8:	616b      	str	r3, [r5, #20]
        hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80037aa:	61ab      	str	r3, [r5, #24]
        if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80037ac:	f7fd ff3a 	bl	8001624 <HAL_DMA_Init>
 80037b0:	b970      	cbnz	r0, 80037d0 <HAL_UART_MspInit+0xd0>

        __HAL_LINKDMA(huart, hdmatx, hdma_usart1_tx);

        /* USER CODE BEGIN USART1_MspInit 1 */

        HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80037b2:	2200      	movs	r2, #0
        __HAL_LINKDMA(huart, hdmatx, hdma_usart1_tx);
 80037b4:	6325      	str	r5, [r4, #48]	; 0x30
        HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80037b6:	4611      	mov	r1, r2
 80037b8:	2025      	movs	r0, #37	; 0x25
        __HAL_LINKDMA(huart, hdmatx, hdma_usart1_tx);
 80037ba:	626c      	str	r4, [r5, #36]	; 0x24
        HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80037bc:	f7fd fed2 	bl	8001564 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 80037c0:	2025      	movs	r0, #37	; 0x25
 80037c2:	f7fd ff05 	bl	80015d0 <HAL_NVIC_EnableIRQ>

        /* USER CODE END USART1_MspInit 1 */
    }
}
 80037c6:	b007      	add	sp, #28
 80037c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            Error_Handler();
 80037ca:	f7ff fd3d 	bl	8003248 <Error_Handler>
 80037ce:	e7d9      	b.n	8003784 <HAL_UART_MspInit+0x84>
            Error_Handler();
 80037d0:	f7ff fd3a 	bl	8003248 <Error_Handler>
 80037d4:	e7ed      	b.n	80037b2 <HAL_UART_MspInit+0xb2>
 80037d6:	bf00      	nop
 80037d8:	40013800 	.word	0x40013800
 80037dc:	40010c00 	.word	0x40010c00
 80037e0:	40010000 	.word	0x40010000
 80037e4:	20001008 	.word	0x20001008
 80037e8:	40020058 	.word	0x40020058
 80037ec:	2000104c 	.word	0x2000104c
 80037f0:	40020044 	.word	0x40020044

080037f4 <NMI_Handler>:
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop

080037f8 <HardFault_Handler>:

    /**
     * @brief This function handles Hard fault interrupt.
     */
    void HardFault_Handler(void)
    {
 80037f8:	e7fe      	b.n	80037f8 <HardFault_Handler>
 80037fa:	bf00      	nop

080037fc <MemManage_Handler>:

    /**
     * @brief This function handles Memory management fault.
     */
    void MemManage_Handler(void)
    {
 80037fc:	e7fe      	b.n	80037fc <MemManage_Handler>
 80037fe:	bf00      	nop

08003800 <BusFault_Handler>:

    /**
     * @brief This function handles Prefetch fault, memory access fault.
     */
    void BusFault_Handler(void)
    {
 8003800:	e7fe      	b.n	8003800 <BusFault_Handler>
 8003802:	bf00      	nop

08003804 <UsageFault_Handler>:

    /**
     * @brief This function handles Undefined instruction or illegal state.
     */
    void UsageFault_Handler(void)
    {
 8003804:	e7fe      	b.n	8003804 <UsageFault_Handler>
 8003806:	bf00      	nop

08003808 <SVC_Handler>:
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop

0800380c <DebugMon_Handler>:
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop

08003810 <PendSV_Handler>:

    /**
     * @brief This function handles Pendable request for system service.
     */
    void PendSV_Handler(void)
    {
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop

08003814 <SysTick_Handler>:

    /**
     * @brief This function handles System tick timer.
     */
    void SysTick_Handler(void)
    {
 8003814:	b508      	push	{r3, lr}
        /* USER CODE BEGIN SysTick_IRQn 0 */

        /* USER CODE END SysTick_IRQn 0 */
        HAL_IncTick();
 8003816:	f7fd fb6b 	bl	8000ef0 <HAL_IncTick>
        HAL_SYSTICK_IRQHandler();
        /* USER CODE BEGIN SysTick_IRQn 1 */

        /* USER CODE END SysTick_IRQn 1 */
    }
 800381a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        HAL_SYSTICK_IRQHandler();
 800381e:	f7fd befd 	b.w	800161c <HAL_SYSTICK_IRQHandler>
 8003822:	bf00      	nop

08003824 <USB_LP_CAN1_RX0_IRQHandler>:
    void USB_LP_CAN1_RX0_IRQHandler(void)
    {
        /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

        /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
        HAL_CAN_IRQHandler(&hcan);
 8003824:	4801      	ldr	r0, [pc, #4]	; (800382c <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8003826:	f7fd bd61 	b.w	80012ec <HAL_CAN_IRQHandler>
 800382a:	bf00      	nop
 800382c:	20000fe0 	.word	0x20000fe0

08003830 <TIM1_UP_IRQHandler>:
        /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
    }

    void TIM1_UP_IRQHandler(void)
    {
        if((TIM1->SR & TIM_SR_UIF) != RESET)
 8003830:	4b03      	ldr	r3, [pc, #12]	; (8003840 <TIM1_UP_IRQHandler+0x10>)
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	07d2      	lsls	r2, r2, #31
        {
            TIM1->SR = ~TIM_SR_UIF;
 8003836:	bf44      	itt	mi
 8003838:	f06f 0201 	mvnmi.w	r2, #1
 800383c:	611a      	strmi	r2, [r3, #16]
 800383e:	4770      	bx	lr
 8003840:	40012c00 	.word	0x40012c00

08003844 <TIM3_IRQHandler>:
     * This is the workhorse of the md201x.
     * this handler is called @ 1 kHz.
     */
    void TIM3_IRQHandler(void)
    {
        if((TIM3->SR & TIM_SR_UIF) != RESET)
 8003844:	4b05      	ldr	r3, [pc, #20]	; (800385c <TIM3_IRQHandler+0x18>)
 8003846:	691a      	ldr	r2, [r3, #16]
 8003848:	07d2      	lsls	r2, r2, #31
 800384a:	d400      	bmi.n	800384e <TIM3_IRQHandler+0xa>
 800384c:	4770      	bx	lr
        {
            TIM3->SR = ~TIM_SR_UIF;
 800384e:	f06f 0201 	mvn.w	r2, #1

            control.Control();
 8003852:	4803      	ldr	r0, [pc, #12]	; (8003860 <TIM3_IRQHandler+0x1c>)
            TIM3->SR = ~TIM_SR_UIF;
 8003854:	611a      	str	r2, [r3, #16]
            control.Control();
 8003856:	f7ff bcf9 	b.w	800324c <_ZN9MotorCtrl7ControlEv>
 800385a:	bf00      	nop
 800385c:	40000400 	.word	0x40000400
 8003860:	20000008 	.word	0x20000008

08003864 <DMA1_Channel4_IRQHandler>:
    /**
    * @brief This function handles DMA1 channel4 global interrupt.
    */
    void DMA1_Channel4_IRQHandler(void)
    {
      HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003864:	4801      	ldr	r0, [pc, #4]	; (800386c <DMA1_Channel4_IRQHandler+0x8>)
 8003866:	f7fd bfa1 	b.w	80017ac <HAL_DMA_IRQHandler>
 800386a:	bf00      	nop
 800386c:	2000104c 	.word	0x2000104c

08003870 <DMA1_Channel5_IRQHandler>:
    /**
    * @brief This function handles DMA1 channel5 global interrupt.
    */
    void DMA1_Channel5_IRQHandler(void)
    {
      HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003870:	4801      	ldr	r0, [pc, #4]	; (8003878 <DMA1_Channel5_IRQHandler+0x8>)
 8003872:	f7fd bf9b 	b.w	80017ac <HAL_DMA_IRQHandler>
 8003876:	bf00      	nop
 8003878:	20001008 	.word	0x20001008

0800387c <USART1_IRQHandler>:
    }

    void USART1_IRQHandler(void)
    {
        HAL_UART_IRQHandler(&huart1);
 800387c:	4801      	ldr	r0, [pc, #4]	; (8003884 <USART1_IRQHandler+0x8>)
 800387e:	f7fe bd4d 	b.w	800231c <HAL_UART_IRQHandler>
 8003882:	bf00      	nop
 8003884:	20001090 	.word	0x20001090

08003888 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003888:	b430      	push	{r4, r5}

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800388a:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800388e:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR |= 0x00000001U;
 8003892:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <SystemInit+0x44>)
  RCC->CFGR &= 0xF8FF0000U;
 8003894:	4a0e      	ldr	r2, [pc, #56]	; (80038d0 <SystemInit+0x48>)
  RCC->CR |= 0x00000001U;
 8003896:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003898:	480e      	ldr	r0, [pc, #56]	; (80038d4 <SystemInit+0x4c>)
  RCC->CR |= 0x00000001U;
 800389a:	f041 0101 	orr.w	r1, r1, #1
 800389e:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= 0xF8FF0000U;
 80038a0:	6859      	ldr	r1, [r3, #4]
 80038a2:	400a      	ands	r2, r1
 80038a4:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80038ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038b0:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038b8:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80038c0:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000U;
 80038c2:	609d      	str	r5, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80038c4:	6084      	str	r4, [r0, #8]
#endif 
}
 80038c6:	bc30      	pop	{r4, r5}
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40021000 	.word	0x40021000
 80038d0:	f8ff0000 	.word	0xf8ff0000
 80038d4:	e000ed00 	.word	0xe000ed00

080038d8 <_Z11uart_promptv>:

    uart_prompt();
}

void uart_prompt(void)
{
 80038d8:	b570      	push	{r4, r5, r6, lr}
 80038da:	2280      	movs	r2, #128	; 0x80
 80038dc:	2100      	movs	r1, #0
 80038de:	4813      	ldr	r0, [pc, #76]	; (800392c <_Z11uart_promptv+0x54>)
 80038e0:	f000 ff01 	bl	80046e6 <memset>
    for (unsigned int i = 0; i < cmd_buf_size; i++)
    {
        cmd_buf[i] = 0x00;
    }
    cmd_buf_ptr = 0;
 80038e4:	2200      	movs	r2, #0
 80038e6:	4b12      	ldr	r3, [pc, #72]	; (8003930 <_Z11uart_promptv+0x58>)
 80038e8:	4c12      	ldr	r4, [pc, #72]	; (8003934 <_Z11uart_promptv+0x5c>)
 80038ea:	601a      	str	r2, [r3, #0]
		uint32_t offset = HAL_GetTick();
 80038ec:	f7fd fb0c 	bl	8000f08 <HAL_GetTick>
		    if(offset + timeout < HAL_GetTick())
 80038f0:	f100 050a 	add.w	r5, r0, #10
 80038f4:	e003      	b.n	80038fe <_Z11uart_promptv+0x26>
 80038f6:	f7fd fb07 	bl	8000f08 <HAL_GetTick>
 80038fa:	4285      	cmp	r5, r0
 80038fc:	d311      	bcc.n	8003922 <_Z11uart_promptv+0x4a>
		while(!tx_cplt)
 80038fe:	f894 3800 	ldrb.w	r3, [r4, #2048]	; 0x800
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0f7      	beq.n	80038f6 <_Z11uart_promptv+0x1e>
			tx_buf[i] = c[i];
 8003906:	263e      	movs	r6, #62	; 0x3e
 8003908:	2520      	movs	r5, #32
			tx_cplt = false;
 800390a:	2300      	movs	r3, #0
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 800390c:	2202      	movs	r2, #2
 800390e:	4909      	ldr	r1, [pc, #36]	; (8003934 <_Z11uart_promptv+0x5c>)
 8003910:	f8d4 0808 	ldr.w	r0, [r4, #2056]	; 0x808
			tx_buf[i] = c[i];
 8003914:	7026      	strb	r6, [r4, #0]
 8003916:	7065      	strb	r5, [r4, #1]
			tx_cplt = false;
 8003918:	f884 3800 	strb.w	r3, [r4, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 800391c:	f7fe fbbc 	bl	8002098 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 8003920:	b118      	cbz	r0, 800392a <_Z11uart_promptv+0x52>
                tx_cplt = true;
 8003922:	2301      	movs	r3, #1
 8003924:	f884 3800 	strb.w	r3, [r4, #2048]	; 0x800
 8003928:	bd70      	pop	{r4, r5, r6, pc}
 800392a:	bd70      	pop	{r4, r5, r6, pc}
 800392c:	200010d0 	.word	0x200010d0
 8003930:	20001150 	.word	0x20001150
 8003934:	20000744 	.word	0x20000744

08003938 <_Z15uart_dump_valuePKcS0_d>:
    serial.write((const uint8_t *) "> ", 2);
}

void uart_dump_value(const char * name, const char * unit, double value)
{
 8003938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800393a:	b085      	sub	sp, #20
    //char tx_buf[128];
    int ret = sprintf(tx_buf, "Current %s: %lf [%s]\r\n", name, value, unit);
 800393c:	e9cd 2300 	strd	r2, r3, [sp]
 8003940:	9102      	str	r1, [sp, #8]
 8003942:	4602      	mov	r2, r0
 8003944:	493a      	ldr	r1, [pc, #232]	; (8003a30 <_Z15uart_dump_valuePKcS0_d+0xf8>)
 8003946:	483b      	ldr	r0, [pc, #236]	; (8003a34 <_Z15uart_dump_valuePKcS0_d+0xfc>)
 8003948:	f000 fed6 	bl	80046f8 <sprintf>
    if (ret < 0)
 800394c:	1e06      	subs	r6, r0, #0
 800394e:	db28      	blt.n	80039a2 <_Z15uart_dump_valuePKcS0_d+0x6a>
		if (length > BUF_SIZE || length < 1)
 8003950:	1e73      	subs	r3, r6, #1
 8003952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003956:	d301      	bcc.n	800395c <_Z15uart_dump_valuePKcS0_d+0x24>
    }
    else
    {
        serial.write((const uint8_t *) tx_buf, ret);
    }
}
 8003958:	b005      	add	sp, #20
 800395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint32_t offset = HAL_GetTick();
 800395c:	f7fd fad4 	bl	8000f08 <HAL_GetTick>
 8003960:	4c35      	ldr	r4, [pc, #212]	; (8003a38 <_Z15uart_dump_valuePKcS0_d+0x100>)
		    if(offset + timeout < HAL_GetTick())
 8003962:	f100 050a 	add.w	r5, r0, #10
 8003966:	e003      	b.n	8003970 <_Z15uart_dump_valuePKcS0_d+0x38>
 8003968:	f7fd face 	bl	8000f08 <HAL_GetTick>
 800396c:	4285      	cmp	r5, r0
 800396e:	d313      	bcc.n	8003998 <_Z15uart_dump_valuePKcS0_d+0x60>
		while(!tx_cplt)
 8003970:	f894 3800 	ldrb.w	r3, [r4, #2048]	; 0x800
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0f7      	beq.n	8003968 <_Z15uart_dump_valuePKcS0_d+0x30>
 8003978:	4632      	mov	r2, r6
 800397a:	492e      	ldr	r1, [pc, #184]	; (8003a34 <_Z15uart_dump_valuePKcS0_d+0xfc>)
 800397c:	482e      	ldr	r0, [pc, #184]	; (8003a38 <_Z15uart_dump_valuePKcS0_d+0x100>)
 800397e:	f000 fea7 	bl	80046d0 <memcpy>
			tx_cplt = false;
 8003982:	2300      	movs	r3, #0
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8003984:	b2b2      	uxth	r2, r6
 8003986:	492c      	ldr	r1, [pc, #176]	; (8003a38 <_Z15uart_dump_valuePKcS0_d+0x100>)
 8003988:	f8d4 0808 	ldr.w	r0, [r4, #2056]	; 0x808
			tx_cplt = false;
 800398c:	f884 3800 	strb.w	r3, [r4, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8003990:	f7fe fb82 	bl	8002098 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 8003994:	2800      	cmp	r0, #0
 8003996:	d0df      	beq.n	8003958 <_Z15uart_dump_valuePKcS0_d+0x20>
                tx_cplt = true;
 8003998:	2301      	movs	r3, #1
 800399a:	f884 3800 	strb.w	r3, [r4, #2048]	; 0x800
 800399e:	b005      	add	sp, #20
 80039a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint32_t offset = HAL_GetTick();
 80039a2:	f7fd fab1 	bl	8000f08 <HAL_GetTick>
 80039a6:	4c24      	ldr	r4, [pc, #144]	; (8003a38 <_Z15uart_dump_valuePKcS0_d+0x100>)
		    if(offset + timeout < HAL_GetTick())
 80039a8:	f100 050a 	add.w	r5, r0, #10
 80039ac:	e003      	b.n	80039b6 <_Z15uart_dump_valuePKcS0_d+0x7e>
 80039ae:	f7fd faab 	bl	8000f08 <HAL_GetTick>
 80039b2:	4285      	cmp	r5, r0
 80039b4:	d3f0      	bcc.n	8003998 <_Z15uart_dump_valuePKcS0_d+0x60>
		while(!tx_cplt)
 80039b6:	f894 3800 	ldrb.w	r3, [r4, #2048]	; 0x800
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0f7      	beq.n	80039ae <_Z15uart_dump_valuePKcS0_d+0x76>
 80039be:	4a1f      	ldr	r2, [pc, #124]	; (8003a3c <_Z15uart_dump_valuePKcS0_d+0x104>)
 80039c0:	f04f 0301 	mov.w	r3, #1
 80039c4:	42a2      	cmp	r2, r4
 80039c6:	bf88      	it	hi
 80039c8:	2300      	movhi	r3, #0
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	b94b      	cbnz	r3, 80039e2 <_Z15uart_dump_valuePKcS0_d+0xaa>
 80039ce:	481c      	ldr	r0, [pc, #112]	; (8003a40 <_Z15uart_dump_valuePKcS0_d+0x108>)
 80039d0:	491c      	ldr	r1, [pc, #112]	; (8003a44 <_Z15uart_dump_valuePKcS0_d+0x10c>)
 80039d2:	f04f 0201 	mov.w	r2, #1
 80039d6:	4288      	cmp	r0, r1
 80039d8:	bf88      	it	hi
 80039da:	461a      	movhi	r2, r3
 80039dc:	f012 0fff 	tst.w	r2, #255	; 0xff
 80039e0:	d00c      	beq.n	80039fc <_Z15uart_dump_valuePKcS0_d+0xc4>
			tx_buf[i] = c[i];
 80039e2:	256e      	movs	r5, #110	; 0x6e
 80039e4:	2074      	movs	r0, #116	; 0x74
 80039e6:	2166      	movs	r1, #102	; 0x66
 80039e8:	4a17      	ldr	r2, [pc, #92]	; (8003a48 <_Z15uart_dump_valuePKcS0_d+0x110>)
 80039ea:	4b18      	ldr	r3, [pc, #96]	; (8003a4c <_Z15uart_dump_valuePKcS0_d+0x114>)
 80039ec:	7225      	strb	r5, [r4, #8]
 80039ee:	e884 000c 	stmia.w	r4, {r2, r3}
 80039f2:	7260      	strb	r0, [r4, #9]
 80039f4:	72a1      	strb	r1, [r4, #10]
			tx_cplt = false;
 80039f6:	2300      	movs	r3, #0
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 80039f8:	220b      	movs	r2, #11
 80039fa:	e7c4      	b.n	8003986 <_Z15uart_dump_valuePKcS0_d+0x4e>
			tx_buf[i] = c[i];
 80039fc:	2372      	movs	r3, #114	; 0x72
 80039fe:	f04f 0c65 	mov.w	ip, #101	; 0x65
 8003a02:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8003a06:	2773      	movs	r7, #115	; 0x73
 8003a08:	2670      	movs	r6, #112	; 0x70
 8003a0a:	2569      	movs	r5, #105	; 0x69
 8003a0c:	206e      	movs	r0, #110	; 0x6e
 8003a0e:	2174      	movs	r1, #116	; 0x74
 8003a10:	2266      	movs	r2, #102	; 0x66
 8003a12:	f884 c000 	strb.w	ip, [r4]
 8003a16:	7063      	strb	r3, [r4, #1]
 8003a18:	70a3      	strb	r3, [r4, #2]
 8003a1a:	71a3      	strb	r3, [r4, #6]
 8003a1c:	f884 e003 	strb.w	lr, [r4, #3]
 8003a20:	7127      	strb	r7, [r4, #4]
 8003a22:	7166      	strb	r6, [r4, #5]
 8003a24:	71e5      	strb	r5, [r4, #7]
 8003a26:	7220      	strb	r0, [r4, #8]
 8003a28:	7261      	strb	r1, [r4, #9]
 8003a2a:	72a2      	strb	r2, [r4, #10]
 8003a2c:	e7e3      	b.n	80039f6 <_Z15uart_dump_valuePKcS0_d+0xbe>
 8003a2e:	bf00      	nop
 8003a30:	08009f24 	.word	0x08009f24
 8003a34:	20001154 	.word	0x20001154
 8003a38:	20000744 	.word	0x20000744
 8003a3c:	08009f40 	.word	0x08009f40
 8003a40:	20000748 	.word	0x20000748
 8003a44:	08009f3c 	.word	0x08009f3c
 8003a48:	40727265 	.word	0x40727265
 8003a4c:	69727073 	.word	0x69727073

08003a50 <_Z18uart_invalid_valuePKcd>:

void uart_invalid_value(const char * name, double value)
{
 8003a50:	b570      	push	{r4, r5, r6, lr}
 8003a52:	b082      	sub	sp, #8
    int ret = sprintf(tx_buf, "Invalid value for %s: %lf\r\n", name, value);
 8003a54:	e9cd 2300 	strd	r2, r3, [sp]
 8003a58:	4917      	ldr	r1, [pc, #92]	; (8003ab8 <_Z18uart_invalid_valuePKcd+0x68>)
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	4817      	ldr	r0, [pc, #92]	; (8003abc <_Z18uart_invalid_valuePKcd+0x6c>)
 8003a5e:	f000 fe4b 	bl	80046f8 <sprintf>
		if (length > BUF_SIZE || length < 1)
 8003a62:	1e43      	subs	r3, r0, #1
 8003a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a68:	d301      	bcc.n	8003a6e <_Z18uart_invalid_valuePKcd+0x1e>
    serial.write((const uint8_t *) tx_buf, ret);
}
 8003a6a:	b002      	add	sp, #8
 8003a6c:	bd70      	pop	{r4, r5, r6, pc}
 8003a6e:	4606      	mov	r6, r0
		uint32_t offset = HAL_GetTick();
 8003a70:	f7fd fa4a 	bl	8000f08 <HAL_GetTick>
 8003a74:	4c12      	ldr	r4, [pc, #72]	; (8003ac0 <_Z18uart_invalid_valuePKcd+0x70>)
		    if(offset + timeout < HAL_GetTick())
 8003a76:	f100 050a 	add.w	r5, r0, #10
 8003a7a:	e003      	b.n	8003a84 <_Z18uart_invalid_valuePKcd+0x34>
 8003a7c:	f7fd fa44 	bl	8000f08 <HAL_GetTick>
 8003a80:	4285      	cmp	r5, r0
 8003a82:	d313      	bcc.n	8003aac <_Z18uart_invalid_valuePKcd+0x5c>
		while(!tx_cplt)
 8003a84:	f894 3800 	ldrb.w	r3, [r4, #2048]	; 0x800
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0f7      	beq.n	8003a7c <_Z18uart_invalid_valuePKcd+0x2c>
 8003a8c:	4632      	mov	r2, r6
 8003a8e:	490b      	ldr	r1, [pc, #44]	; (8003abc <_Z18uart_invalid_valuePKcd+0x6c>)
 8003a90:	480b      	ldr	r0, [pc, #44]	; (8003ac0 <_Z18uart_invalid_valuePKcd+0x70>)
 8003a92:	f000 fe1d 	bl	80046d0 <memcpy>
			tx_cplt = false;
 8003a96:	2300      	movs	r3, #0
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8003a98:	b2b2      	uxth	r2, r6
 8003a9a:	4909      	ldr	r1, [pc, #36]	; (8003ac0 <_Z18uart_invalid_valuePKcd+0x70>)
 8003a9c:	f8d4 0808 	ldr.w	r0, [r4, #2056]	; 0x808
			tx_cplt = false;
 8003aa0:	f884 3800 	strb.w	r3, [r4, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8003aa4:	f7fe faf8 	bl	8002098 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 8003aa8:	2800      	cmp	r0, #0
 8003aaa:	d0de      	beq.n	8003a6a <_Z18uart_invalid_valuePKcd+0x1a>
                tx_cplt = true;
 8003aac:	2301      	movs	r3, #1
 8003aae:	f884 3800 	strb.w	r3, [r4, #2048]	; 0x800
 8003ab2:	b002      	add	sp, #8
 8003ab4:	bd70      	pop	{r4, r5, r6, pc}
 8003ab6:	bf00      	nop
 8003ab8:	08009f48 	.word	0x08009f48
 8003abc:	20001154 	.word	0x20001154
 8003ac0:	20000744 	.word	0x20000744

08003ac4 <_Z20uart_valid_value_setPKcS0_d>:

void uart_valid_value_set(const char * name, const char * unit, double value)
{
 8003ac4:	b570      	push	{r4, r5, r6, lr}
 8003ac6:	b084      	sub	sp, #16
    int ret = sprintf(tx_buf, "Set %s: %lf [%s]\r\n", name, value, unit);
 8003ac8:	e9cd 2300 	strd	r2, r3, [sp]
 8003acc:	9102      	str	r1, [sp, #8]
 8003ace:	4602      	mov	r2, r0
 8003ad0:	4916      	ldr	r1, [pc, #88]	; (8003b2c <_Z20uart_valid_value_setPKcS0_d+0x68>)
 8003ad2:	4817      	ldr	r0, [pc, #92]	; (8003b30 <_Z20uart_valid_value_setPKcS0_d+0x6c>)
 8003ad4:	f000 fe10 	bl	80046f8 <sprintf>
		if (length > BUF_SIZE || length < 1)
 8003ad8:	1e43      	subs	r3, r0, #1
 8003ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ade:	d301      	bcc.n	8003ae4 <_Z20uart_valid_value_setPKcS0_d+0x20>
    serial.write((const uint8_t *) tx_buf, ret);
}
 8003ae0:	b004      	add	sp, #16
 8003ae2:	bd70      	pop	{r4, r5, r6, pc}
 8003ae4:	4606      	mov	r6, r0
		uint32_t offset = HAL_GetTick();
 8003ae6:	f7fd fa0f 	bl	8000f08 <HAL_GetTick>
 8003aea:	4c12      	ldr	r4, [pc, #72]	; (8003b34 <_Z20uart_valid_value_setPKcS0_d+0x70>)
		    if(offset + timeout < HAL_GetTick())
 8003aec:	f100 050a 	add.w	r5, r0, #10
 8003af0:	e003      	b.n	8003afa <_Z20uart_valid_value_setPKcS0_d+0x36>
 8003af2:	f7fd fa09 	bl	8000f08 <HAL_GetTick>
 8003af6:	4285      	cmp	r5, r0
 8003af8:	d313      	bcc.n	8003b22 <_Z20uart_valid_value_setPKcS0_d+0x5e>
		while(!tx_cplt)
 8003afa:	f894 3800 	ldrb.w	r3, [r4, #2048]	; 0x800
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f7      	beq.n	8003af2 <_Z20uart_valid_value_setPKcS0_d+0x2e>
 8003b02:	4632      	mov	r2, r6
 8003b04:	490a      	ldr	r1, [pc, #40]	; (8003b30 <_Z20uart_valid_value_setPKcS0_d+0x6c>)
 8003b06:	480b      	ldr	r0, [pc, #44]	; (8003b34 <_Z20uart_valid_value_setPKcS0_d+0x70>)
 8003b08:	f000 fde2 	bl	80046d0 <memcpy>
			tx_cplt = false;
 8003b0c:	2300      	movs	r3, #0
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8003b0e:	b2b2      	uxth	r2, r6
 8003b10:	4908      	ldr	r1, [pc, #32]	; (8003b34 <_Z20uart_valid_value_setPKcS0_d+0x70>)
 8003b12:	f8d4 0808 	ldr.w	r0, [r4, #2056]	; 0x808
			tx_cplt = false;
 8003b16:	f884 3800 	strb.w	r3, [r4, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8003b1a:	f7fe fabd 	bl	8002098 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 8003b1e:	2800      	cmp	r0, #0
 8003b20:	d0de      	beq.n	8003ae0 <_Z20uart_valid_value_setPKcS0_d+0x1c>
                tx_cplt = true;
 8003b22:	2301      	movs	r3, #1
 8003b24:	f884 3800 	strb.w	r3, [r4, #2048]	; 0x800
 8003b28:	b004      	add	sp, #16
 8003b2a:	bd70      	pop	{r4, r5, r6, pc}
 8003b2c:	08009f64 	.word	0x08009f64
 8003b30:	20001154 	.word	0x20001154
 8003b34:	20000744 	.word	0x20000744

08003b38 <_Z12uart_processv>:
{
 8003b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		uint16_t rx_head = (BUF_SIZE - huart.hdmarx->Instance->CNDTR)
 8003b3c:	4cb2      	ldr	r4, [pc, #712]	; (8003e08 <_Z12uart_processv+0x2d0>)
 8003b3e:	b088      	sub	sp, #32
 8003b40:	f8d4 2808 	ldr.w	r2, [r4, #2056]	; 0x808
		if (rx_tail == rx_head)
 8003b44:	f8b4 3802 	ldrh.w	r3, [r4, #2050]	; 0x802
		uint16_t rx_head = (BUF_SIZE - huart.hdmarx->Instance->CNDTR)
 8003b48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b4a:	6812      	ldr	r2, [r2, #0]
 8003b4c:	6852      	ldr	r2, [r2, #4]
				& buf_mask;
 8003b4e:	4252      	negs	r2, r2
		if (rx_tail == rx_head)
 8003b50:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d036      	beq.n	8003bc6 <_Z12uart_processv+0x8e>
		int c = (int) rx_buf[rx_tail++];
 8003b58:	18e2      	adds	r2, r4, r3
 8003b5a:	f892 2400 	ldrb.w	r2, [r2, #1024]	; 0x400
 8003b5e:	3301      	adds	r3, #1
    if('a' <= c && c <= 'z')
 8003b60:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
		rx_tail &= buf_mask;
 8003b64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b68:	2919      	cmp	r1, #25
 8003b6a:	f8a4 3802 	strh.w	r3, [r4, #2050]	; 0x802
 8003b6e:	d82d      	bhi.n	8003bcc <_Z12uart_processv+0x94>
        c += 'A' - 'a';
 8003b70:	3a20      	subs	r2, #32
 8003b72:	b2d6      	uxtb	r6, r2
    cmd_buf[cmd_buf_ptr] = c;
 8003b74:	4da5      	ldr	r5, [pc, #660]	; (8003e0c <_Z12uart_processv+0x2d4>)
 8003b76:	4aa6      	ldr	r2, [pc, #664]	; (8003e10 <_Z12uart_processv+0x2d8>)
 8003b78:	682b      	ldr	r3, [r5, #0]
    cmd_buf_ptr++;
 8003b7a:	1c59      	adds	r1, r3, #1
 8003b7c:	6029      	str	r1, [r5, #0]
    cmd_buf[cmd_buf_ptr] = c;
 8003b7e:	54d6      	strb	r6, [r2, r3]
		uint32_t offset = HAL_GetTick();
 8003b80:	f7fd f9c2 	bl	8000f08 <HAL_GetTick>
		    if(offset + timeout < HAL_GetTick())
 8003b84:	f100 070a 	add.w	r7, r0, #10
 8003b88:	e003      	b.n	8003b92 <_Z12uart_processv+0x5a>
 8003b8a:	f7fd f9bd 	bl	8000f08 <HAL_GetTick>
 8003b8e:	4287      	cmp	r7, r0
 8003b90:	d30e      	bcc.n	8003bb0 <_Z12uart_processv+0x78>
		while(!tx_cplt)
 8003b92:	f894 3800 	ldrb.w	r3, [r4, #2048]	; 0x800
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f7      	beq.n	8003b8a <_Z12uart_processv+0x52>
			tx_cplt = false;
 8003b9a:	2300      	movs	r3, #0
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	499a      	ldr	r1, [pc, #616]	; (8003e08 <_Z12uart_processv+0x2d0>)
 8003ba0:	f8d4 0808 	ldr.w	r0, [r4, #2056]	; 0x808
			tx_buf[i] = c[i];
 8003ba4:	7026      	strb	r6, [r4, #0]
			tx_cplt = false;
 8003ba6:	f884 3800 	strb.w	r3, [r4, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8003baa:	f7fe fa75 	bl	8002098 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 8003bae:	b110      	cbz	r0, 8003bb6 <_Z12uart_processv+0x7e>
                tx_cplt = true;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	f884 3800 	strb.w	r3, [r4, #2048]	; 0x800
    if (cmd_buf_ptr >= cmd_buf_size)
 8003bb6:	682b      	ldr	r3, [r5, #0]
 8003bb8:	2b7f      	cmp	r3, #127	; 0x7f
 8003bba:	f200 80ae 	bhi.w	8003d1a <_Z12uart_processv+0x1e2>
    if (c != '\r' && c != '\n')
 8003bbe:	2e0d      	cmp	r6, #13
 8003bc0:	d016      	beq.n	8003bf0 <_Z12uart_processv+0xb8>
 8003bc2:	2e0a      	cmp	r6, #10
 8003bc4:	d014      	beq.n	8003bf0 <_Z12uart_processv+0xb8>
}
 8003bc6:	b008      	add	sp, #32
 8003bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if('A' <= c && c <= 'Z')
 8003bcc:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 8003bd0:	2b19      	cmp	r3, #25
 8003bd2:	d90b      	bls.n	8003bec <_Z12uart_processv+0xb4>
    else if(c == '.' || c == '-' || c == ' ')
 8003bd4:	f1a2 0320 	sub.w	r3, r2, #32
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b19      	cmp	r3, #25
 8003bdc:	f200 8090 	bhi.w	8003d00 <_Z12uart_processv+0x1c8>
 8003be0:	498c      	ldr	r1, [pc, #560]	; (8003e14 <_Z12uart_processv+0x2dc>)
 8003be2:	fa21 f303 	lsr.w	r3, r1, r3
 8003be6:	07db      	lsls	r3, r3, #31
 8003be8:	f140 808d 	bpl.w	8003d06 <_Z12uart_processv+0x1ce>
    char c = static_cast<char>(ch);
 8003bec:	4616      	mov	r6, r2
 8003bee:	e7c1      	b.n	8003b74 <_Z12uart_processv+0x3c>
		uint32_t offset = HAL_GetTick();
 8003bf0:	f7fd f98a 	bl	8000f08 <HAL_GetTick>
		    if(offset + timeout < HAL_GetTick())
 8003bf4:	f100 060a 	add.w	r6, r0, #10
 8003bf8:	e003      	b.n	8003c02 <_Z12uart_processv+0xca>
 8003bfa:	f7fd f985 	bl	8000f08 <HAL_GetTick>
 8003bfe:	4286      	cmp	r6, r0
 8003c00:	d311      	bcc.n	8003c26 <_Z12uart_processv+0xee>
		while(!tx_cplt)
 8003c02:	f894 3800 	ldrb.w	r3, [r4, #2048]	; 0x800
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f7      	beq.n	8003bfa <_Z12uart_processv+0xc2>
			tx_buf[i] = c[i];
 8003c0a:	270d      	movs	r7, #13
 8003c0c:	260a      	movs	r6, #10
			tx_cplt = false;
 8003c0e:	2300      	movs	r3, #0
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8003c10:	2202      	movs	r2, #2
 8003c12:	497d      	ldr	r1, [pc, #500]	; (8003e08 <_Z12uart_processv+0x2d0>)
 8003c14:	f8d4 0808 	ldr.w	r0, [r4, #2056]	; 0x808
			tx_buf[i] = c[i];
 8003c18:	7027      	strb	r7, [r4, #0]
 8003c1a:	7066      	strb	r6, [r4, #1]
			tx_cplt = false;
 8003c1c:	f884 3800 	strb.w	r3, [r4, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8003c20:	f7fe fa3a 	bl	8002098 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 8003c24:	b110      	cbz	r0, 8003c2c <_Z12uart_processv+0xf4>
                tx_cplt = true;
 8003c26:	2301      	movs	r3, #1
 8003c28:	f884 3800 	strb.w	r3, [r4, #2048]	; 0x800
    double payload = 0.0;
 8003c2c:	2600      	movs	r6, #0
 8003c2e:	2700      	movs	r7, #0
 8003c30:	ab08      	add	r3, sp, #32
 8003c32:	e963 6704 	strd	r6, r7, [r3, #-16]!
    if (sscanf(cmd_buf, "%s %lf", cmd, &payload) < 1)
 8003c36:	aa06      	add	r2, sp, #24
 8003c38:	4977      	ldr	r1, [pc, #476]	; (8003e18 <_Z12uart_processv+0x2e0>)
 8003c3a:	4875      	ldr	r0, [pc, #468]	; (8003e10 <_Z12uart_processv+0x2d8>)
 8003c3c:	f000 fd80 	bl	8004740 <sscanf>
 8003c40:	2800      	cmp	r0, #0
 8003c42:	f340 81af 	ble.w	8003fa4 <_Z12uart_processv+0x46c>
    if (strcmp(cmd, "SCID") == 0)
 8003c46:	4975      	ldr	r1, [pc, #468]	; (8003e1c <_Z12uart_processv+0x2e4>)
 8003c48:	a806      	add	r0, sp, #24
 8003c4a:	f7fc fa81 	bl	8000150 <strcmp>
 8003c4e:	2800      	cmp	r0, #0
 8003c50:	f000 80bd 	beq.w	8003dce <_Z12uart_processv+0x296>
    else if (strcmp(cmd, "GCID") == 0)
 8003c54:	4972      	ldr	r1, [pc, #456]	; (8003e20 <_Z12uart_processv+0x2e8>)
 8003c56:	a806      	add	r0, sp, #24
 8003c58:	f7fc fa7a 	bl	8000150 <strcmp>
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	f000 8187 	beq.w	8003f70 <_Z12uart_processv+0x438>
    else if (strcmp(cmd, "SVID") == 0)
 8003c62:	4970      	ldr	r1, [pc, #448]	; (8003e24 <_Z12uart_processv+0x2ec>)
 8003c64:	a806      	add	r0, sp, #24
 8003c66:	f7fc fa73 	bl	8000150 <strcmp>
 8003c6a:	2800      	cmp	r0, #0
 8003c6c:	f000 81b0 	beq.w	8003fd0 <_Z12uart_processv+0x498>
    else if (strcmp(cmd, "GVID") == 0)
 8003c70:	496d      	ldr	r1, [pc, #436]	; (8003e28 <_Z12uart_processv+0x2f0>)
 8003c72:	a806      	add	r0, sp, #24
 8003c74:	f7fc fa6c 	bl	8000150 <strcmp>
 8003c78:	2800      	cmp	r0, #0
 8003c7a:	f000 81ca 	beq.w	8004012 <_Z12uart_processv+0x4da>
    else if (strcmp(cmd, "SSID") == 0)
 8003c7e:	496b      	ldr	r1, [pc, #428]	; (8003e2c <_Z12uart_processv+0x2f4>)
 8003c80:	a806      	add	r0, sp, #24
 8003c82:	f7fc fa65 	bl	8000150 <strcmp>
 8003c86:	2800      	cmp	r0, #0
 8003c88:	f000 8135 	beq.w	8003ef6 <_Z12uart_processv+0x3be>
    else if (strcmp(cmd, "SKPR") == 0)
 8003c8c:	4968      	ldr	r1, [pc, #416]	; (8003e30 <_Z12uart_processv+0x2f8>)
 8003c8e:	a806      	add	r0, sp, #24
 8003c90:	f7fc fa5e 	bl	8000150 <strcmp>
 8003c94:	2800      	cmp	r0, #0
 8003c96:	f040 81d7 	bne.w	8004048 <_Z12uart_processv+0x510>
        int ret = control.SetKp(payload);
 8003c9a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
        if (kp < 0)
 8003c9e:	4632      	mov	r2, r6
 8003ca0:	463b      	mov	r3, r7
 8003ca2:	4640      	mov	r0, r8
 8003ca4:	4649      	mov	r1, r9
 8003ca6:	f7fc fe8f 	bl	80009c8 <__aeabi_dcmplt>
 8003caa:	2800      	cmp	r0, #0
 8003cac:	f040 820c 	bne.w	80040c8 <_Z12uart_processv+0x590>
        this->Kp = kp;
 8003cb0:	4b60      	ldr	r3, [pc, #384]	; (8003e34 <_Z12uart_processv+0x2fc>)
    int ret = sprintf(tx_buf, "Set %s: %lf [%s]\r\n", name, value, unit);
 8003cb2:	4a61      	ldr	r2, [pc, #388]	; (8003e38 <_Z12uart_processv+0x300>)
 8003cb4:	e9cd 8900 	strd	r8, r9, [sp]
 8003cb8:	9202      	str	r2, [sp, #8]
 8003cba:	4960      	ldr	r1, [pc, #384]	; (8003e3c <_Z12uart_processv+0x304>)
 8003cbc:	e9c3 8916 	strd	r8, r9, [r3, #88]	; 0x58
 8003cc0:	4a5f      	ldr	r2, [pc, #380]	; (8003e40 <_Z12uart_processv+0x308>)
 8003cc2:	4860      	ldr	r0, [pc, #384]	; (8003e44 <_Z12uart_processv+0x30c>)
 8003cc4:	f000 fd18 	bl	80046f8 <sprintf>
		if (length > BUF_SIZE || length < 1)
 8003cc8:	1e43      	subs	r3, r0, #1
 8003cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cce:	4606      	mov	r6, r0
 8003cd0:	f080 808e 	bcs.w	8003df0 <_Z12uart_processv+0x2b8>
		uint32_t offset = HAL_GetTick();
 8003cd4:	f7fd f918 	bl	8000f08 <HAL_GetTick>
		    if(offset + timeout < HAL_GetTick())
 8003cd8:	f100 070a 	add.w	r7, r0, #10
 8003cdc:	e004      	b.n	8003ce8 <_Z12uart_processv+0x1b0>
 8003cde:	f7fd f913 	bl	8000f08 <HAL_GetTick>
 8003ce2:	4287      	cmp	r7, r0
 8003ce4:	f0c0 8103 	bcc.w	8003eee <_Z12uart_processv+0x3b6>
		while(!tx_cplt)
 8003ce8:	f894 3800 	ldrb.w	r3, [r4, #2048]	; 0x800
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f6      	beq.n	8003cde <_Z12uart_processv+0x1a6>
 8003cf0:	4632      	mov	r2, r6
 8003cf2:	4954      	ldr	r1, [pc, #336]	; (8003e44 <_Z12uart_processv+0x30c>)
 8003cf4:	4844      	ldr	r0, [pc, #272]	; (8003e08 <_Z12uart_processv+0x2d0>)
 8003cf6:	f000 fceb 	bl	80046d0 <memcpy>
			tx_cplt = false;
 8003cfa:	2300      	movs	r3, #0
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8003cfc:	b2b2      	uxth	r2, r6
 8003cfe:	e0ed      	b.n	8003edc <_Z12uart_processv+0x3a4>
    else if(c == '\b' || c == 127)
 8003d00:	2a08      	cmp	r2, #8
 8003d02:	f000 8115 	beq.w	8003f30 <_Z12uart_processv+0x3f8>
 8003d06:	2a7f      	cmp	r2, #127	; 0x7f
 8003d08:	f000 8112 	beq.w	8003f30 <_Z12uart_processv+0x3f8>
    else if(c == '\r' || c == '\n')
 8003d0c:	2a0d      	cmp	r2, #13
 8003d0e:	f43f af6d 	beq.w	8003bec <_Z12uart_processv+0xb4>
 8003d12:	2a0a      	cmp	r2, #10
 8003d14:	f47f af57 	bne.w	8003bc6 <_Z12uart_processv+0x8e>
 8003d18:	e768      	b.n	8003bec <_Z12uart_processv+0xb4>
		uint32_t offset = HAL_GetTick();
 8003d1a:	f7fd f8f5 	bl	8000f08 <HAL_GetTick>
		    if(offset + timeout < HAL_GetTick())
 8003d1e:	f100 070a 	add.w	r7, r0, #10
 8003d22:	e003      	b.n	8003d2c <_Z12uart_processv+0x1f4>
 8003d24:	f7fd f8f0 	bl	8000f08 <HAL_GetTick>
 8003d28:	4287      	cmp	r7, r0
 8003d2a:	d34c      	bcc.n	8003dc6 <_Z12uart_processv+0x28e>
		while(!tx_cplt)
 8003d2c:	f894 3800 	ldrb.w	r3, [r4, #2048]	; 0x800
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f7      	beq.n	8003d24 <_Z12uart_processv+0x1ec>
 8003d34:	4944      	ldr	r1, [pc, #272]	; (8003e48 <_Z12uart_processv+0x310>)
 8003d36:	4a45      	ldr	r2, [pc, #276]	; (8003e4c <_Z12uart_processv+0x314>)
 8003d38:	f04f 0301 	mov.w	r3, #1
 8003d3c:	4291      	cmp	r1, r2
 8003d3e:	bf88      	it	hi
 8003d40:	2300      	movhi	r3, #0
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	b94b      	cbnz	r3, 8003d5a <_Z12uart_processv+0x222>
 8003d46:	4942      	ldr	r1, [pc, #264]	; (8003e50 <_Z12uart_processv+0x318>)
 8003d48:	f04f 0201 	mov.w	r2, #1
 8003d4c:	42a1      	cmp	r1, r4
 8003d4e:	bf88      	it	hi
 8003d50:	461a      	movhi	r2, r3
 8003d52:	f012 0fff 	tst.w	r2, #255	; 0xff
 8003d56:	f000 8207 	beq.w	8004168 <_Z12uart_processv+0x630>
			tx_buf[i] = c[i];
 8003d5a:	4a3e      	ldr	r2, [pc, #248]	; (8003e54 <_Z12uart_processv+0x31c>)
 8003d5c:	4b3e      	ldr	r3, [pc, #248]	; (8003e58 <_Z12uart_processv+0x320>)
 8003d5e:	4f3f      	ldr	r7, [pc, #252]	; (8003e5c <_Z12uart_processv+0x324>)
 8003d60:	483f      	ldr	r0, [pc, #252]	; (8003e60 <_Z12uart_processv+0x328>)
 8003d62:	6022      	str	r2, [r4, #0]
 8003d64:	f102 6234 	add.w	r2, r2, #188743680	; 0xb400000
 8003d68:	493e      	ldr	r1, [pc, #248]	; (8003e64 <_Z12uart_processv+0x32c>)
 8003d6a:	f502 220f 	add.w	r2, r2, #585728	; 0x8f000
 8003d6e:	6063      	str	r3, [r4, #4]
 8003d70:	f503 033a 	add.w	r3, r3, #12189696	; 0xba0000
 8003d74:	f602 72ef 	addw	r2, r2, #4079	; 0xfef
 8003d78:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8003d7c:	60a7      	str	r7, [r4, #8]
 8003d7e:	60e0      	str	r0, [r4, #12]
 8003d80:	f107 476e 	add.w	r7, r7, #3992977408	; 0xee000000
 8003d84:	f1a0 60e1 	sub.w	r0, r0, #117964800	; 0x7080000
 8003d88:	f507 077e 	add.w	r7, r7, #16646144	; 0xfe0000
 8003d8c:	f5a0 20a0 	sub.w	r0, r0, #327680	; 0x50000
 8003d90:	6121      	str	r1, [r4, #16]
 8003d92:	6162      	str	r2, [r4, #20]
 8003d94:	4934      	ldr	r1, [pc, #208]	; (8003e68 <_Z12uart_processv+0x330>)
 8003d96:	4a35      	ldr	r2, [pc, #212]	; (8003e6c <_Z12uart_processv+0x334>)
 8003d98:	61a3      	str	r3, [r4, #24]
 8003d9a:	4b35      	ldr	r3, [pc, #212]	; (8003e70 <_Z12uart_processv+0x338>)
 8003d9c:	f507 4782 	add.w	r7, r7, #16640	; 0x4100
 8003da0:	f2a0 6045 	subw	r0, r0, #1605	; 0x645
 8003da4:	61e7      	str	r7, [r4, #28]
 8003da6:	6220      	str	r0, [r4, #32]
 8003da8:	6261      	str	r1, [r4, #36]	; 0x24
 8003daa:	62a2      	str	r2, [r4, #40]	; 0x28
 8003dac:	62e3      	str	r3, [r4, #44]	; 0x2c
			tx_cplt = false;
 8003dae:	2300      	movs	r3, #0
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8003db0:	2230      	movs	r2, #48	; 0x30
 8003db2:	4915      	ldr	r1, [pc, #84]	; (8003e08 <_Z12uart_processv+0x2d0>)
 8003db4:	f8d4 0808 	ldr.w	r0, [r4, #2056]	; 0x808
			tx_cplt = false;
 8003db8:	f884 3800 	strb.w	r3, [r4, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8003dbc:	f7fe f96c 	bl	8002098 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 8003dc0:	2800      	cmp	r0, #0
 8003dc2:	f43f aefc 	beq.w	8003bbe <_Z12uart_processv+0x86>
                tx_cplt = true;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	f884 3800 	strb.w	r3, [r4, #2048]	; 0x800
 8003dcc:	e6f7      	b.n	8003bbe <_Z12uart_processv+0x86>
        confStruct.can_id_cmd = static_cast<uint16_t>(payload);
 8003dce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003dd2:	f7fc fe5f 	bl	8000a94 <__aeabi_d2uiz>
 8003dd6:	4e27      	ldr	r6, [pc, #156]	; (8003e74 <_Z12uart_processv+0x33c>)
 8003dd8:	b283      	uxth	r3, r0
        int ret = sprintf(tx_buf, "Set CAN ID (cmd): 0x%x\r\n", confStruct.can_id_cmd);
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4926      	ldr	r1, [pc, #152]	; (8003e78 <_Z12uart_processv+0x340>)
 8003dde:	4819      	ldr	r0, [pc, #100]	; (8003e44 <_Z12uart_processv+0x30c>)
        confStruct.can_id_cmd = static_cast<uint16_t>(payload);
 8003de0:	8033      	strh	r3, [r6, #0]
        int ret = sprintf(tx_buf, "Set CAN ID (cmd): 0x%x\r\n", confStruct.can_id_cmd);
 8003de2:	f000 fc89 	bl	80046f8 <sprintf>
		if (length > BUF_SIZE || length < 1)
 8003de6:	1e43      	subs	r3, r0, #1
 8003de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dec:	4607      	mov	r7, r0
 8003dee:	d361      	bcc.n	8003eb4 <_Z12uart_processv+0x37c>
 8003df0:	2280      	movs	r2, #128	; 0x80
 8003df2:	2100      	movs	r1, #0
 8003df4:	4806      	ldr	r0, [pc, #24]	; (8003e10 <_Z12uart_processv+0x2d8>)
 8003df6:	f000 fc76 	bl	80046e6 <memset>
    cmd_buf_ptr = 0;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	602b      	str	r3, [r5, #0]
		uint32_t offset = HAL_GetTick();
 8003dfe:	f7fd f883 	bl	8000f08 <HAL_GetTick>
		    if(offset + timeout < HAL_GetTick())
 8003e02:	f100 050a 	add.w	r5, r0, #10
 8003e06:	e03d      	b.n	8003e84 <_Z12uart_processv+0x34c>
 8003e08:	20000744 	.word	0x20000744
 8003e0c:	20001150 	.word	0x20001150
 8003e10:	200010d0 	.word	0x200010d0
 8003e14:	03ff6001 	.word	0x03ff6001
 8003e18:	08009d58 	.word	0x08009d58
 8003e1c:	08009d60 	.word	0x08009d60
 8003e20:	08009d84 	.word	0x08009d84
 8003e24:	08009d8c 	.word	0x08009d8c
 8003e28:	08009db0 	.word	0x08009db0
 8003e2c:	08009db8 	.word	0x08009db8
 8003e30:	08009dd8 	.word	0x08009dd8
 8003e34:	20000008 	.word	0x20000008
 8003e38:	08009de4 	.word	0x08009de4
 8003e3c:	08009f64 	.word	0x08009f64
 8003e40:	08009de0 	.word	0x08009de0
 8003e44:	20001154 	.word	0x20001154
 8003e48:	20000748 	.word	0x20000748
 8003e4c:	08009d24 	.word	0x08009d24
 8003e50:	08009d28 	.word	0x08009d28
 8003e54:	62207872 	.word	0x62207872
 8003e58:	65666675 	.word	0x65666675
 8003e5c:	766f2072 	.word	0x766f2072
 8003e60:	75727265 	.word	0x75727265
 8003e64:	6d202e6e 	.word	0x6d202e6e
 8003e68:	20687467 	.word	0x20687467
 8003e6c:	3231203d 	.word	0x3231203d
 8003e70:	0a0d2e37 	.word	0x0a0d2e37
 8003e74:	20000f80 	.word	0x20000f80
 8003e78:	08009d68 	.word	0x08009d68
 8003e7c:	f7fd f844 	bl	8000f08 <HAL_GetTick>
 8003e80:	4285      	cmp	r5, r0
 8003e82:	d313      	bcc.n	8003eac <_Z12uart_processv+0x374>
		while(!tx_cplt)
 8003e84:	f894 3800 	ldrb.w	r3, [r4, #2048]	; 0x800
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f7      	beq.n	8003e7c <_Z12uart_processv+0x344>
			tx_buf[i] = c[i];
 8003e8c:	263e      	movs	r6, #62	; 0x3e
 8003e8e:	2520      	movs	r5, #32
			tx_cplt = false;
 8003e90:	2300      	movs	r3, #0
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8003e92:	2202      	movs	r2, #2
 8003e94:	49ba      	ldr	r1, [pc, #744]	; (8004180 <_Z12uart_processv+0x648>)
 8003e96:	f8d4 0808 	ldr.w	r0, [r4, #2056]	; 0x808
			tx_buf[i] = c[i];
 8003e9a:	7026      	strb	r6, [r4, #0]
 8003e9c:	7065      	strb	r5, [r4, #1]
			tx_cplt = false;
 8003e9e:	f884 3800 	strb.w	r3, [r4, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8003ea2:	f7fe f8f9 	bl	8002098 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 8003ea6:	2800      	cmp	r0, #0
 8003ea8:	f43f ae8d 	beq.w	8003bc6 <_Z12uart_processv+0x8e>
                tx_cplt = true;
 8003eac:	2301      	movs	r3, #1
 8003eae:	f884 3800 	strb.w	r3, [r4, #2048]	; 0x800
 8003eb2:	e688      	b.n	8003bc6 <_Z12uart_processv+0x8e>
		uint32_t offset = HAL_GetTick();
 8003eb4:	f7fd f828 	bl	8000f08 <HAL_GetTick>
		    if(offset + timeout < HAL_GetTick())
 8003eb8:	f100 060a 	add.w	r6, r0, #10
 8003ebc:	e003      	b.n	8003ec6 <_Z12uart_processv+0x38e>
 8003ebe:	f7fd f823 	bl	8000f08 <HAL_GetTick>
 8003ec2:	4286      	cmp	r6, r0
 8003ec4:	d313      	bcc.n	8003eee <_Z12uart_processv+0x3b6>
		while(!tx_cplt)
 8003ec6:	f894 3800 	ldrb.w	r3, [r4, #2048]	; 0x800
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0f7      	beq.n	8003ebe <_Z12uart_processv+0x386>
 8003ece:	463a      	mov	r2, r7
 8003ed0:	49ac      	ldr	r1, [pc, #688]	; (8004184 <_Z12uart_processv+0x64c>)
 8003ed2:	48ab      	ldr	r0, [pc, #684]	; (8004180 <_Z12uart_processv+0x648>)
 8003ed4:	f000 fbfc 	bl	80046d0 <memcpy>
			tx_cplt = false;
 8003ed8:	2300      	movs	r3, #0
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8003eda:	b2ba      	uxth	r2, r7
 8003edc:	49a8      	ldr	r1, [pc, #672]	; (8004180 <_Z12uart_processv+0x648>)
 8003ede:	f8d4 0808 	ldr.w	r0, [r4, #2056]	; 0x808
			tx_cplt = false;
 8003ee2:	f884 3800 	strb.w	r3, [r4, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8003ee6:	f7fe f8d7 	bl	8002098 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 8003eea:	2800      	cmp	r0, #0
 8003eec:	d080      	beq.n	8003df0 <_Z12uart_processv+0x2b8>
                tx_cplt = true;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	f884 3800 	strb.w	r3, [r4, #2048]	; 0x800
 8003ef4:	e77c      	b.n	8003df0 <_Z12uart_processv+0x2b8>
        uint16_t can_stat_id = static_cast<uint16_t>(payload);
 8003ef6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003efa:	f7fc fdcb 	bl	8000a94 <__aeabi_d2uiz>
        int ret = sprintf(tx_buf, "Set CAN ID (stat): %d\r\n", can_stat_id);
 8003efe:	49a2      	ldr	r1, [pc, #648]	; (8004188 <_Z12uart_processv+0x650>)
 8003f00:	b282      	uxth	r2, r0
 8003f02:	48a0      	ldr	r0, [pc, #640]	; (8004184 <_Z12uart_processv+0x64c>)
 8003f04:	f000 fbf8 	bl	80046f8 <sprintf>
		if (length > BUF_SIZE || length < 1)
 8003f08:	1e43      	subs	r3, r0, #1
 8003f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f0e:	4606      	mov	r6, r0
 8003f10:	f4bf af6e 	bcs.w	8003df0 <_Z12uart_processv+0x2b8>
		uint32_t offset = HAL_GetTick();
 8003f14:	f7fc fff8 	bl	8000f08 <HAL_GetTick>
		    if(offset + timeout < HAL_GetTick())
 8003f18:	f100 070a 	add.w	r7, r0, #10
 8003f1c:	e003      	b.n	8003f26 <_Z12uart_processv+0x3ee>
 8003f1e:	f7fc fff3 	bl	8000f08 <HAL_GetTick>
 8003f22:	4287      	cmp	r7, r0
 8003f24:	d3e3      	bcc.n	8003eee <_Z12uart_processv+0x3b6>
		while(!tx_cplt)
 8003f26:	f894 3800 	ldrb.w	r3, [r4, #2048]	; 0x800
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f7      	beq.n	8003f1e <_Z12uart_processv+0x3e6>
 8003f2e:	e6df      	b.n	8003cf0 <_Z12uart_processv+0x1b8>
        if(cmd_buf_ptr > 0)
 8003f30:	4a96      	ldr	r2, [pc, #600]	; (800418c <_Z12uart_processv+0x654>)
 8003f32:	6813      	ldr	r3, [r2, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f040 80e3 	bne.w	8004100 <_Z12uart_processv+0x5c8>
		uint32_t offset = HAL_GetTick();
 8003f3a:	f7fc ffe5 	bl	8000f08 <HAL_GetTick>
		    if(offset + timeout < HAL_GetTick())
 8003f3e:	f100 050a 	add.w	r5, r0, #10
 8003f42:	e003      	b.n	8003f4c <_Z12uart_processv+0x414>
 8003f44:	f7fc ffe0 	bl	8000f08 <HAL_GetTick>
 8003f48:	4285      	cmp	r5, r0
 8003f4a:	d3af      	bcc.n	8003eac <_Z12uart_processv+0x374>
		while(!tx_cplt)
 8003f4c:	f894 3800 	ldrb.w	r3, [r4, #2048]	; 0x800
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f7      	beq.n	8003f44 <_Z12uart_processv+0x40c>
			tx_buf[i] = c[i];
 8003f54:	2507      	movs	r5, #7
			tx_cplt = false;
 8003f56:	2300      	movs	r3, #0
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8003f58:	2201      	movs	r2, #1
 8003f5a:	4989      	ldr	r1, [pc, #548]	; (8004180 <_Z12uart_processv+0x648>)
 8003f5c:	f8d4 0808 	ldr.w	r0, [r4, #2056]	; 0x808
			tx_buf[i] = c[i];
 8003f60:	7025      	strb	r5, [r4, #0]
			tx_cplt = false;
 8003f62:	f884 3800 	strb.w	r3, [r4, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8003f66:	f7fe f897 	bl	8002098 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 8003f6a:	2800      	cmp	r0, #0
 8003f6c:	d19e      	bne.n	8003eac <_Z12uart_processv+0x374>
 8003f6e:	e62a      	b.n	8003bc6 <_Z12uart_processv+0x8e>
        int ret = sprintf(tx_buf, "Set CAN ID (cmd): 0x%x\r\n", confStruct.can_id_cmd);
 8003f70:	4b87      	ldr	r3, [pc, #540]	; (8004190 <_Z12uart_processv+0x658>)
 8003f72:	4988      	ldr	r1, [pc, #544]	; (8004194 <_Z12uart_processv+0x65c>)
 8003f74:	881a      	ldrh	r2, [r3, #0]
 8003f76:	4883      	ldr	r0, [pc, #524]	; (8004184 <_Z12uart_processv+0x64c>)
 8003f78:	f000 fbbe 	bl	80046f8 <sprintf>
		if (length > BUF_SIZE || length < 1)
 8003f7c:	1e43      	subs	r3, r0, #1
 8003f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f82:	4607      	mov	r7, r0
 8003f84:	f4bf af34 	bcs.w	8003df0 <_Z12uart_processv+0x2b8>
		uint32_t offset = HAL_GetTick();
 8003f88:	f7fc ffbe 	bl	8000f08 <HAL_GetTick>
		    if(offset + timeout < HAL_GetTick())
 8003f8c:	f100 060a 	add.w	r6, r0, #10
 8003f90:	e003      	b.n	8003f9a <_Z12uart_processv+0x462>
 8003f92:	f7fc ffb9 	bl	8000f08 <HAL_GetTick>
 8003f96:	4286      	cmp	r6, r0
 8003f98:	d3a9      	bcc.n	8003eee <_Z12uart_processv+0x3b6>
		while(!tx_cplt)
 8003f9a:	f894 3800 	ldrb.w	r3, [r4, #2048]	; 0x800
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0f7      	beq.n	8003f92 <_Z12uart_processv+0x45a>
 8003fa2:	e794      	b.n	8003ece <_Z12uart_processv+0x396>
 8003fa4:	2280      	movs	r2, #128	; 0x80
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	487b      	ldr	r0, [pc, #492]	; (8004198 <_Z12uart_processv+0x660>)
 8003faa:	f000 fb9c 	bl	80046e6 <memset>
    cmd_buf_ptr = 0;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	602b      	str	r3, [r5, #0]
		uint32_t offset = HAL_GetTick();
 8003fb2:	f7fc ffa9 	bl	8000f08 <HAL_GetTick>
		    if(offset + timeout < HAL_GetTick())
 8003fb6:	f100 050a 	add.w	r5, r0, #10
 8003fba:	e004      	b.n	8003fc6 <_Z12uart_processv+0x48e>
 8003fbc:	f7fc ffa4 	bl	8000f08 <HAL_GetTick>
 8003fc0:	4285      	cmp	r5, r0
 8003fc2:	f4ff af73 	bcc.w	8003eac <_Z12uart_processv+0x374>
		while(!tx_cplt)
 8003fc6:	f894 3800 	ldrb.w	r3, [r4, #2048]	; 0x800
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f6      	beq.n	8003fbc <_Z12uart_processv+0x484>
 8003fce:	e75d      	b.n	8003e8c <_Z12uart_processv+0x354>
        confStruct.can_id_vel = static_cast<uint16_t>(payload);
 8003fd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003fd4:	f7fc fd5e 	bl	8000a94 <__aeabi_d2uiz>
 8003fd8:	4e6d      	ldr	r6, [pc, #436]	; (8004190 <_Z12uart_processv+0x658>)
 8003fda:	b283      	uxth	r3, r0
        int ret = sprintf(tx_buf, "Set CAN ID (vel): 0x%x\r\n", confStruct.can_id_vel);
 8003fdc:	461a      	mov	r2, r3
 8003fde:	496f      	ldr	r1, [pc, #444]	; (800419c <_Z12uart_processv+0x664>)
 8003fe0:	4868      	ldr	r0, [pc, #416]	; (8004184 <_Z12uart_processv+0x64c>)
        confStruct.can_id_vel = static_cast<uint16_t>(payload);
 8003fe2:	8073      	strh	r3, [r6, #2]
        int ret = sprintf(tx_buf, "Set CAN ID (vel): 0x%x\r\n", confStruct.can_id_vel);
 8003fe4:	f000 fb88 	bl	80046f8 <sprintf>
		if (length > BUF_SIZE || length < 1)
 8003fe8:	1e43      	subs	r3, r0, #1
 8003fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fee:	4607      	mov	r7, r0
 8003ff0:	f4bf aefe 	bcs.w	8003df0 <_Z12uart_processv+0x2b8>
		uint32_t offset = HAL_GetTick();
 8003ff4:	f7fc ff88 	bl	8000f08 <HAL_GetTick>
		    if(offset + timeout < HAL_GetTick())
 8003ff8:	f100 060a 	add.w	r6, r0, #10
 8003ffc:	e004      	b.n	8004008 <_Z12uart_processv+0x4d0>
 8003ffe:	f7fc ff83 	bl	8000f08 <HAL_GetTick>
 8004002:	4286      	cmp	r6, r0
 8004004:	f4ff af73 	bcc.w	8003eee <_Z12uart_processv+0x3b6>
		while(!tx_cplt)
 8004008:	f894 3800 	ldrb.w	r3, [r4, #2048]	; 0x800
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f6      	beq.n	8003ffe <_Z12uart_processv+0x4c6>
 8004010:	e75d      	b.n	8003ece <_Z12uart_processv+0x396>
        int ret = sprintf(tx_buf, "Set CAN ID (vel): 0x%x\r\n", confStruct.can_id_vel);
 8004012:	4b5f      	ldr	r3, [pc, #380]	; (8004190 <_Z12uart_processv+0x658>)
 8004014:	4961      	ldr	r1, [pc, #388]	; (800419c <_Z12uart_processv+0x664>)
 8004016:	885a      	ldrh	r2, [r3, #2]
 8004018:	485a      	ldr	r0, [pc, #360]	; (8004184 <_Z12uart_processv+0x64c>)
 800401a:	f000 fb6d 	bl	80046f8 <sprintf>
		if (length > BUF_SIZE || length < 1)
 800401e:	1e43      	subs	r3, r0, #1
 8004020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004024:	4607      	mov	r7, r0
 8004026:	f4bf aee3 	bcs.w	8003df0 <_Z12uart_processv+0x2b8>
		uint32_t offset = HAL_GetTick();
 800402a:	f7fc ff6d 	bl	8000f08 <HAL_GetTick>
		    if(offset + timeout < HAL_GetTick())
 800402e:	f100 060a 	add.w	r6, r0, #10
 8004032:	e004      	b.n	800403e <_Z12uart_processv+0x506>
 8004034:	f7fc ff68 	bl	8000f08 <HAL_GetTick>
 8004038:	4286      	cmp	r6, r0
 800403a:	f4ff af58 	bcc.w	8003eee <_Z12uart_processv+0x3b6>
		while(!tx_cplt)
 800403e:	f894 3800 	ldrb.w	r3, [r4, #2048]	; 0x800
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f6      	beq.n	8004034 <_Z12uart_processv+0x4fc>
 8004046:	e742      	b.n	8003ece <_Z12uart_processv+0x396>
    else if (strcmp(cmd, "GKPR") == 0)
 8004048:	4955      	ldr	r1, [pc, #340]	; (80041a0 <_Z12uart_processv+0x668>)
 800404a:	a806      	add	r0, sp, #24
 800404c:	f7fc f880 	bl	8000150 <strcmp>
 8004050:	2800      	cmp	r0, #0
 8004052:	f000 80e0 	beq.w	8004216 <_Z12uart_processv+0x6de>
    else if (strcmp(cmd, "SKIT") == 0)
 8004056:	4953      	ldr	r1, [pc, #332]	; (80041a4 <_Z12uart_processv+0x66c>)
 8004058:	a806      	add	r0, sp, #24
 800405a:	f7fc f879 	bl	8000150 <strcmp>
 800405e:	2800      	cmp	r0, #0
 8004060:	f040 80ba 	bne.w	80041d8 <_Z12uart_processv+0x6a0>
        int ret = control.SetKi(payload);
 8004064:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
        if (ki < 0)
 8004068:	4632      	mov	r2, r6
 800406a:	463b      	mov	r3, r7
 800406c:	4640      	mov	r0, r8
 800406e:	4649      	mov	r1, r9
 8004070:	f7fc fcaa 	bl	80009c8 <__aeabi_dcmplt>
 8004074:	2800      	cmp	r0, #0
 8004076:	f040 80d6 	bne.w	8004226 <_Z12uart_processv+0x6ee>
        this->KiTc = ki * Tc;
 800407a:	4e4b      	ldr	r6, [pc, #300]	; (80041a8 <_Z12uart_processv+0x670>)
 800407c:	4642      	mov	r2, r8
 800407e:	e9d6 011a 	ldrd	r0, r1, [r6, #104]	; 0x68
 8004082:	464b      	mov	r3, r9
 8004084:	f7fc fa2e 	bl	80004e4 <__aeabi_dmul>
    int ret = sprintf(tx_buf, "Set %s: %lf [%s]\r\n", name, value, unit);
 8004088:	4b48      	ldr	r3, [pc, #288]	; (80041ac <_Z12uart_processv+0x674>)
 800408a:	e9c6 0118 	strd	r0, r1, [r6, #96]	; 0x60
 800408e:	4a48      	ldr	r2, [pc, #288]	; (80041b0 <_Z12uart_processv+0x678>)
 8004090:	9302      	str	r3, [sp, #8]
 8004092:	e9cd 8900 	strd	r8, r9, [sp]
 8004096:	4947      	ldr	r1, [pc, #284]	; (80041b4 <_Z12uart_processv+0x67c>)
 8004098:	483a      	ldr	r0, [pc, #232]	; (8004184 <_Z12uart_processv+0x64c>)
 800409a:	f000 fb2d 	bl	80046f8 <sprintf>
		if (length > BUF_SIZE || length < 1)
 800409e:	1e43      	subs	r3, r0, #1
 80040a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a4:	4606      	mov	r6, r0
 80040a6:	f4bf aea3 	bcs.w	8003df0 <_Z12uart_processv+0x2b8>
		uint32_t offset = HAL_GetTick();
 80040aa:	f7fc ff2d 	bl	8000f08 <HAL_GetTick>
		    if(offset + timeout < HAL_GetTick())
 80040ae:	f100 070a 	add.w	r7, r0, #10
 80040b2:	e004      	b.n	80040be <_Z12uart_processv+0x586>
 80040b4:	f7fc ff28 	bl	8000f08 <HAL_GetTick>
 80040b8:	4287      	cmp	r7, r0
 80040ba:	f4ff af18 	bcc.w	8003eee <_Z12uart_processv+0x3b6>
		while(!tx_cplt)
 80040be:	f894 3800 	ldrb.w	r3, [r4, #2048]	; 0x800
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0f6      	beq.n	80040b4 <_Z12uart_processv+0x57c>
 80040c6:	e613      	b.n	8003cf0 <_Z12uart_processv+0x1b8>
    int ret = sprintf(tx_buf, "Invalid value for %s: %lf\r\n", name, value);
 80040c8:	e9cd 8900 	strd	r8, r9, [sp]
 80040cc:	4a3a      	ldr	r2, [pc, #232]	; (80041b8 <_Z12uart_processv+0x680>)
 80040ce:	493b      	ldr	r1, [pc, #236]	; (80041bc <_Z12uart_processv+0x684>)
 80040d0:	482c      	ldr	r0, [pc, #176]	; (8004184 <_Z12uart_processv+0x64c>)
 80040d2:	f000 fb11 	bl	80046f8 <sprintf>
		if (length > BUF_SIZE || length < 1)
 80040d6:	1e43      	subs	r3, r0, #1
 80040d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040dc:	4606      	mov	r6, r0
 80040de:	f4bf ae87 	bcs.w	8003df0 <_Z12uart_processv+0x2b8>
		uint32_t offset = HAL_GetTick();
 80040e2:	f7fc ff11 	bl	8000f08 <HAL_GetTick>
		    if(offset + timeout < HAL_GetTick())
 80040e6:	f100 070a 	add.w	r7, r0, #10
 80040ea:	e004      	b.n	80040f6 <_Z12uart_processv+0x5be>
 80040ec:	f7fc ff0c 	bl	8000f08 <HAL_GetTick>
 80040f0:	4287      	cmp	r7, r0
 80040f2:	f4ff aefc 	bcc.w	8003eee <_Z12uart_processv+0x3b6>
		while(!tx_cplt)
 80040f6:	f894 3800 	ldrb.w	r3, [r4, #2048]	; 0x800
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0f6      	beq.n	80040ec <_Z12uart_processv+0x5b4>
 80040fe:	e5f7      	b.n	8003cf0 <_Z12uart_processv+0x1b8>
            cmd_buf_ptr--;
 8004100:	3b01      	subs	r3, #1
 8004102:	6013      	str	r3, [r2, #0]
		uint32_t offset = HAL_GetTick();
 8004104:	f7fc ff00 	bl	8000f08 <HAL_GetTick>
		    if(offset + timeout < HAL_GetTick())
 8004108:	f100 050a 	add.w	r5, r0, #10
 800410c:	e004      	b.n	8004118 <_Z12uart_processv+0x5e0>
 800410e:	f7fc fefb 	bl	8000f08 <HAL_GetTick>
 8004112:	4285      	cmp	r5, r0
 8004114:	f4ff aeca 	bcc.w	8003eac <_Z12uart_processv+0x374>
		while(!tx_cplt)
 8004118:	f894 3800 	ldrb.w	r3, [r4, #2048]	; 0x800
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0f6      	beq.n	800410e <_Z12uart_processv+0x5d6>
 8004120:	4a27      	ldr	r2, [pc, #156]	; (80041c0 <_Z12uart_processv+0x688>)
 8004122:	f04f 0301 	mov.w	r3, #1
 8004126:	42a2      	cmp	r2, r4
 8004128:	bf88      	it	hi
 800412a:	2300      	movhi	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	b953      	cbnz	r3, 8004146 <_Z12uart_processv+0x60e>
 8004130:	4824      	ldr	r0, [pc, #144]	; (80041c4 <_Z12uart_processv+0x68c>)
 8004132:	4925      	ldr	r1, [pc, #148]	; (80041c8 <_Z12uart_processv+0x690>)
 8004134:	f04f 0201 	mov.w	r2, #1
 8004138:	4288      	cmp	r0, r1
 800413a:	bf88      	it	hi
 800413c:	461a      	movhi	r2, r3
 800413e:	f012 0fff 	tst.w	r2, #255	; 0xff
 8004142:	f000 80bf 	beq.w	80042c4 <_Z12uart_processv+0x78c>
			tx_buf[i] = c[i];
 8004146:	2244      	movs	r2, #68	; 0x44
 8004148:	4b20      	ldr	r3, [pc, #128]	; (80041cc <_Z12uart_processv+0x694>)
 800414a:	7122      	strb	r2, [r4, #4]
 800414c:	6023      	str	r3, [r4, #0]
			tx_cplt = false;
 800414e:	2300      	movs	r3, #0
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8004150:	2205      	movs	r2, #5
 8004152:	490b      	ldr	r1, [pc, #44]	; (8004180 <_Z12uart_processv+0x648>)
 8004154:	f8d4 0808 	ldr.w	r0, [r4, #2056]	; 0x808
			tx_cplt = false;
 8004158:	f884 3800 	strb.w	r3, [r4, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 800415c:	f7fd ff9c 	bl	8002098 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 8004160:	2800      	cmp	r0, #0
 8004162:	f47f aea3 	bne.w	8003eac <_Z12uart_processv+0x374>
 8004166:	e52e      	b.n	8003bc6 <_Z12uart_processv+0x8e>
 8004168:	4b19      	ldr	r3, [pc, #100]	; (80041d0 <_Z12uart_processv+0x698>)
 800416a:	4a1a      	ldr	r2, [pc, #104]	; (80041d4 <_Z12uart_processv+0x69c>)
 800416c:	f103 0030 	add.w	r0, r3, #48	; 0x30
			tx_buf[i] = c[i];
 8004170:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		for (int i = 0; i < length; i++)
 8004174:	4298      	cmp	r0, r3
			tx_buf[i] = c[i];
 8004176:	f802 1f01 	strb.w	r1, [r2, #1]!
		for (int i = 0; i < length; i++)
 800417a:	d1f9      	bne.n	8004170 <_Z12uart_processv+0x638>
 800417c:	e617      	b.n	8003dae <_Z12uart_processv+0x276>
 800417e:	bf00      	nop
 8004180:	20000744 	.word	0x20000744
 8004184:	20001154 	.word	0x20001154
 8004188:	08009dc0 	.word	0x08009dc0
 800418c:	20001150 	.word	0x20001150
 8004190:	20000f80 	.word	0x20000f80
 8004194:	08009d68 	.word	0x08009d68
 8004198:	200010d0 	.word	0x200010d0
 800419c:	08009d94 	.word	0x08009d94
 80041a0:	08009df0 	.word	0x08009df0
 80041a4:	08009df8 	.word	0x08009df8
 80041a8:	20000008 	.word	0x20000008
 80041ac:	08009e04 	.word	0x08009e04
 80041b0:	08009e00 	.word	0x08009e00
 80041b4:	08009f64 	.word	0x08009f64
 80041b8:	08009de0 	.word	0x08009de0
 80041bc:	08009f48 	.word	0x08009f48
 80041c0:	08009d20 	.word	0x08009d20
 80041c4:	20000748 	.word	0x20000748
 80041c8:	08009d1c 	.word	0x08009d1c
 80041cc:	5b1b2008 	.word	0x5b1b2008
 80041d0:	08009d23 	.word	0x08009d23
 80041d4:	20000743 	.word	0x20000743
    else if (strcmp(cmd, "GKIT") == 0)
 80041d8:	4995      	ldr	r1, [pc, #596]	; (8004430 <_Z12uart_processv+0x8f8>)
 80041da:	a806      	add	r0, sp, #24
 80041dc:	f7fb ffb8 	bl	8000150 <strcmp>
 80041e0:	2800      	cmp	r0, #0
 80041e2:	d061      	beq.n	80042a8 <_Z12uart_processv+0x770>
    else if (strcmp(cmd, "SKEM") == 0)
 80041e4:	4993      	ldr	r1, [pc, #588]	; (8004434 <_Z12uart_processv+0x8fc>)
 80041e6:	a806      	add	r0, sp, #24
 80041e8:	f7fb ffb2 	bl	8000150 <strcmp>
 80041ec:	2800      	cmp	r0, #0
 80041ee:	d13c      	bne.n	800426a <_Z12uart_processv+0x732>
        int ret = control.SetKe(payload);
 80041f0:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
        if (ke < 0)
 80041f4:	2200      	movs	r2, #0
 80041f6:	2300      	movs	r3, #0
 80041f8:	4630      	mov	r0, r6
 80041fa:	4639      	mov	r1, r7
 80041fc:	f7fc fbe4 	bl	80009c8 <__aeabi_dcmplt>
 8004200:	bb68      	cbnz	r0, 800425e <_Z12uart_processv+0x726>
        this->Ke = ke;
 8004202:	488d      	ldr	r0, [pc, #564]	; (8004438 <_Z12uart_processv+0x900>)
            uart_valid_value_set("Ke", "V/(rad/s)", payload);
 8004204:	4632      	mov	r2, r6
 8004206:	e9c0 671e 	strd	r6, r7, [r0, #120]	; 0x78
 800420a:	463b      	mov	r3, r7
 800420c:	498b      	ldr	r1, [pc, #556]	; (800443c <_Z12uart_processv+0x904>)
 800420e:	488c      	ldr	r0, [pc, #560]	; (8004440 <_Z12uart_processv+0x908>)
 8004210:	f7ff fc58 	bl	8003ac4 <_Z20uart_valid_value_setPKcS0_d>
 8004214:	e5ec      	b.n	8003df0 <_Z12uart_processv+0x2b8>
        uart_dump_value("Kp", "N.m/(rad/s)", control.GetKp());
 8004216:	4b88      	ldr	r3, [pc, #544]	; (8004438 <_Z12uart_processv+0x900>)
 8004218:	498a      	ldr	r1, [pc, #552]	; (8004444 <_Z12uart_processv+0x90c>)
 800421a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800421e:	488a      	ldr	r0, [pc, #552]	; (8004448 <_Z12uart_processv+0x910>)
 8004220:	f7ff fb8a 	bl	8003938 <_Z15uart_dump_valuePKcS0_d>
 8004224:	e5e4      	b.n	8003df0 <_Z12uart_processv+0x2b8>
    int ret = sprintf(tx_buf, "Invalid value for %s: %lf\r\n", name, value);
 8004226:	e9cd 8900 	strd	r8, r9, [sp]
 800422a:	4a88      	ldr	r2, [pc, #544]	; (800444c <_Z12uart_processv+0x914>)
 800422c:	4988      	ldr	r1, [pc, #544]	; (8004450 <_Z12uart_processv+0x918>)
 800422e:	4889      	ldr	r0, [pc, #548]	; (8004454 <_Z12uart_processv+0x91c>)
 8004230:	f000 fa62 	bl	80046f8 <sprintf>
		if (length > BUF_SIZE || length < 1)
 8004234:	1e43      	subs	r3, r0, #1
 8004236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800423a:	4606      	mov	r6, r0
 800423c:	f4bf add8 	bcs.w	8003df0 <_Z12uart_processv+0x2b8>
		uint32_t offset = HAL_GetTick();
 8004240:	f7fc fe62 	bl	8000f08 <HAL_GetTick>
		    if(offset + timeout < HAL_GetTick())
 8004244:	f100 070a 	add.w	r7, r0, #10
 8004248:	e004      	b.n	8004254 <_Z12uart_processv+0x71c>
 800424a:	f7fc fe5d 	bl	8000f08 <HAL_GetTick>
 800424e:	4287      	cmp	r7, r0
 8004250:	f4ff ae4d 	bcc.w	8003eee <_Z12uart_processv+0x3b6>
		while(!tx_cplt)
 8004254:	f894 3800 	ldrb.w	r3, [r4, #2048]	; 0x800
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0f6      	beq.n	800424a <_Z12uart_processv+0x712>
 800425c:	e548      	b.n	8003cf0 <_Z12uart_processv+0x1b8>
            uart_invalid_value("Ke", payload);
 800425e:	4632      	mov	r2, r6
 8004260:	463b      	mov	r3, r7
 8004262:	4877      	ldr	r0, [pc, #476]	; (8004440 <_Z12uart_processv+0x908>)
 8004264:	f7ff fbf4 	bl	8003a50 <_Z18uart_invalid_valuePKcd>
 8004268:	e5c2      	b.n	8003df0 <_Z12uart_processv+0x2b8>
    else if (strcmp(cmd, "GKEM") == 0)
 800426a:	497b      	ldr	r1, [pc, #492]	; (8004458 <_Z12uart_processv+0x920>)
 800426c:	a806      	add	r0, sp, #24
 800426e:	f7fb ff6f 	bl	8000150 <strcmp>
 8004272:	2800      	cmp	r0, #0
 8004274:	d063      	beq.n	800433e <_Z12uart_processv+0x806>
    else if (strcmp(cmd, "SKGT") == 0)
 8004276:	4979      	ldr	r1, [pc, #484]	; (800445c <_Z12uart_processv+0x924>)
 8004278:	a806      	add	r0, sp, #24
 800427a:	f7fb ff69 	bl	8000150 <strcmp>
 800427e:	2800      	cmp	r0, #0
 8004280:	d131      	bne.n	80042e6 <_Z12uart_processv+0x7ae>
        int ret = control.SetKg(payload);
 8004282:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
        if (kg < 0)
 8004286:	2200      	movs	r2, #0
 8004288:	2300      	movs	r3, #0
 800428a:	4630      	mov	r0, r6
 800428c:	4639      	mov	r1, r7
 800428e:	f7fc fb9b 	bl	80009c8 <__aeabi_dcmplt>
 8004292:	bb10      	cbnz	r0, 80042da <_Z12uart_processv+0x7a2>
        this->Kg = kg;
 8004294:	4868      	ldr	r0, [pc, #416]	; (8004438 <_Z12uart_processv+0x900>)
            uart_valid_value_set("Kg", "V/(N.m)", payload);
 8004296:	4632      	mov	r2, r6
 8004298:	e9c0 6720 	strd	r6, r7, [r0, #128]	; 0x80
 800429c:	463b      	mov	r3, r7
 800429e:	4970      	ldr	r1, [pc, #448]	; (8004460 <_Z12uart_processv+0x928>)
 80042a0:	4870      	ldr	r0, [pc, #448]	; (8004464 <_Z12uart_processv+0x92c>)
 80042a2:	f7ff fc0f 	bl	8003ac4 <_Z20uart_valid_value_setPKcS0_d>
 80042a6:	e5a3      	b.n	8003df0 <_Z12uart_processv+0x2b8>
        return this->KiTc / Tc;
 80042a8:	4963      	ldr	r1, [pc, #396]	; (8004438 <_Z12uart_processv+0x900>)
 80042aa:	e9d1 231a 	ldrd	r2, r3, [r1, #104]	; 0x68
 80042ae:	e9d1 0118 	ldrd	r0, r1, [r1, #96]	; 0x60
 80042b2:	f7fc fa41 	bl	8000738 <__aeabi_ddiv>
        uart_dump_value("Ki", "N.m/rad", control.GetKi());
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4864      	ldr	r0, [pc, #400]	; (800444c <_Z12uart_processv+0x914>)
 80042bc:	496a      	ldr	r1, [pc, #424]	; (8004468 <_Z12uart_processv+0x930>)
 80042be:	f7ff fb3b 	bl	8003938 <_Z15uart_dump_valuePKcS0_d>
 80042c2:	e595      	b.n	8003df0 <_Z12uart_processv+0x2b8>
			tx_buf[i] = c[i];
 80042c4:	2508      	movs	r5, #8
 80042c6:	2020      	movs	r0, #32
 80042c8:	211b      	movs	r1, #27
 80042ca:	225b      	movs	r2, #91	; 0x5b
 80042cc:	2344      	movs	r3, #68	; 0x44
 80042ce:	7025      	strb	r5, [r4, #0]
 80042d0:	7060      	strb	r0, [r4, #1]
 80042d2:	70a1      	strb	r1, [r4, #2]
 80042d4:	70e2      	strb	r2, [r4, #3]
 80042d6:	7123      	strb	r3, [r4, #4]
 80042d8:	e739      	b.n	800414e <_Z12uart_processv+0x616>
            uart_invalid_value("Kg", payload);
 80042da:	4632      	mov	r2, r6
 80042dc:	463b      	mov	r3, r7
 80042de:	4861      	ldr	r0, [pc, #388]	; (8004464 <_Z12uart_processv+0x92c>)
 80042e0:	f7ff fbb6 	bl	8003a50 <_Z18uart_invalid_valuePKcd>
 80042e4:	e584      	b.n	8003df0 <_Z12uart_processv+0x2b8>
    else if (strcmp(cmd, "GKGT") == 0)
 80042e6:	4961      	ldr	r1, [pc, #388]	; (800446c <_Z12uart_processv+0x934>)
 80042e8:	a806      	add	r0, sp, #24
 80042ea:	f7fb ff31 	bl	8000150 <strcmp>
 80042ee:	2800      	cmp	r0, #0
 80042f0:	f000 8172 	beq.w	80045d8 <_Z12uart_processv+0xaa0>
    else if (strcmp(cmd, "SPPR") == 0)
 80042f4:	495e      	ldr	r1, [pc, #376]	; (8004470 <_Z12uart_processv+0x938>)
 80042f6:	a806      	add	r0, sp, #24
 80042f8:	f7fb ff2a 	bl	8000150 <strcmp>
 80042fc:	2800      	cmp	r0, #0
 80042fe:	f000 8152 	beq.w	80045a6 <_Z12uart_processv+0xa6e>
    else if (strcmp(cmd, "GPPR") == 0)
 8004302:	495c      	ldr	r1, [pc, #368]	; (8004474 <_Z12uart_processv+0x93c>)
 8004304:	a806      	add	r0, sp, #24
 8004306:	f7fb ff23 	bl	8000150 <strcmp>
 800430a:	2800      	cmp	r0, #0
 800430c:	d043      	beq.n	8004396 <_Z12uart_processv+0x85e>
    else if (strcmp(cmd, "SKRF") == 0)
 800430e:	495a      	ldr	r1, [pc, #360]	; (8004478 <_Z12uart_processv+0x940>)
 8004310:	a806      	add	r0, sp, #24
 8004312:	f7fb ff1d 	bl	8000150 <strcmp>
 8004316:	bb00      	cbnz	r0, 800435a <_Z12uart_processv+0x822>
        int ret = control.SetKr(payload);
 8004318:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
        if (kr < 0)
 800431c:	2200      	movs	r2, #0
 800431e:	2300      	movs	r3, #0
 8004320:	4630      	mov	r0, r6
 8004322:	4639      	mov	r1, r7
 8004324:	f7fc fb50 	bl	80009c8 <__aeabi_dcmplt>
 8004328:	b988      	cbnz	r0, 800434e <_Z12uart_processv+0x816>
        this->Kr = kr;
 800432a:	4843      	ldr	r0, [pc, #268]	; (8004438 <_Z12uart_processv+0x900>)
            uart_valid_value_set("Kr", "(rad/s)/cmd", payload);
 800432c:	4632      	mov	r2, r6
 800432e:	e9c0 6714 	strd	r6, r7, [r0, #80]	; 0x50
 8004332:	463b      	mov	r3, r7
 8004334:	4951      	ldr	r1, [pc, #324]	; (800447c <_Z12uart_processv+0x944>)
 8004336:	4852      	ldr	r0, [pc, #328]	; (8004480 <_Z12uart_processv+0x948>)
 8004338:	f7ff fbc4 	bl	8003ac4 <_Z20uart_valid_value_setPKcS0_d>
 800433c:	e558      	b.n	8003df0 <_Z12uart_processv+0x2b8>
        uart_dump_value("Ke", "V/(rad/s)", control.GetKe());
 800433e:	4b3e      	ldr	r3, [pc, #248]	; (8004438 <_Z12uart_processv+0x900>)
 8004340:	493e      	ldr	r1, [pc, #248]	; (800443c <_Z12uart_processv+0x904>)
 8004342:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004346:	483e      	ldr	r0, [pc, #248]	; (8004440 <_Z12uart_processv+0x908>)
 8004348:	f7ff faf6 	bl	8003938 <_Z15uart_dump_valuePKcS0_d>
 800434c:	e550      	b.n	8003df0 <_Z12uart_processv+0x2b8>
            uart_invalid_value("Kr", payload);
 800434e:	4632      	mov	r2, r6
 8004350:	463b      	mov	r3, r7
 8004352:	484b      	ldr	r0, [pc, #300]	; (8004480 <_Z12uart_processv+0x948>)
 8004354:	f7ff fb7c 	bl	8003a50 <_Z18uart_invalid_valuePKcd>
 8004358:	e54a      	b.n	8003df0 <_Z12uart_processv+0x2b8>
    else if (strcmp(cmd, "GKRF") == 0)
 800435a:	494a      	ldr	r1, [pc, #296]	; (8004484 <_Z12uart_processv+0x94c>)
 800435c:	a806      	add	r0, sp, #24
 800435e:	f7fb fef7 	bl	8000150 <strcmp>
 8004362:	2800      	cmp	r0, #0
 8004364:	d052      	beq.n	800440c <_Z12uart_processv+0x8d4>
    else if (strcmp(cmd, "SMVL") == 0)
 8004366:	4948      	ldr	r1, [pc, #288]	; (8004488 <_Z12uart_processv+0x950>)
 8004368:	a806      	add	r0, sp, #24
 800436a:	f7fb fef1 	bl	8000150 <strcmp>
 800436e:	bb68      	cbnz	r0, 80043cc <_Z12uart_processv+0x894>
        int ret = control.SetMaximumVelocity(payload);
 8004370:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
        if (om < 0)
 8004374:	2200      	movs	r2, #0
 8004376:	2300      	movs	r3, #0
 8004378:	4630      	mov	r0, r6
 800437a:	4639      	mov	r1, r7
 800437c:	f7fc fb24 	bl	80009c8 <__aeabi_dcmplt>
 8004380:	b9f0      	cbnz	r0, 80043c0 <_Z12uart_processv+0x888>
        this->MaximumVelocity = om;
 8004382:	482d      	ldr	r0, [pc, #180]	; (8004438 <_Z12uart_processv+0x900>)
            uart_valid_value_set("Omega_max", "rad/s", payload);
 8004384:	4632      	mov	r2, r6
 8004386:	e9c0 6722 	strd	r6, r7, [r0, #136]	; 0x88
 800438a:	463b      	mov	r3, r7
 800438c:	493f      	ldr	r1, [pc, #252]	; (800448c <_Z12uart_processv+0x954>)
 800438e:	4840      	ldr	r0, [pc, #256]	; (8004490 <_Z12uart_processv+0x958>)
 8004390:	f7ff fb98 	bl	8003ac4 <_Z20uart_valid_value_setPKcS0_d>
 8004394:	e52c      	b.n	8003df0 <_Z12uart_processv+0x2b8>
        return 2 * M_PI / (this->Kh * Tc);
 8004396:	4928      	ldr	r1, [pc, #160]	; (8004438 <_Z12uart_processv+0x900>)
 8004398:	e9d1 231a 	ldrd	r2, r3, [r1, #104]	; 0x68
 800439c:	e9d1 011c 	ldrd	r0, r1, [r1, #112]	; 0x70
 80043a0:	f7fc f8a0 	bl	80004e4 <__aeabi_dmul>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	a11f      	add	r1, pc, #124	; (adr r1, 8004428 <_Z12uart_processv+0x8f0>)
 80043aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043ae:	f7fc f9c3 	bl	8000738 <__aeabi_ddiv>
        uart_dump_value("PPR", "pulse/rev.", control.GetPPR());
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	4837      	ldr	r0, [pc, #220]	; (8004494 <_Z12uart_processv+0x95c>)
 80043b8:	4937      	ldr	r1, [pc, #220]	; (8004498 <_Z12uart_processv+0x960>)
 80043ba:	f7ff fabd 	bl	8003938 <_Z15uart_dump_valuePKcS0_d>
 80043be:	e517      	b.n	8003df0 <_Z12uart_processv+0x2b8>
            uart_invalid_value("Omega_max", payload);
 80043c0:	4632      	mov	r2, r6
 80043c2:	463b      	mov	r3, r7
 80043c4:	4832      	ldr	r0, [pc, #200]	; (8004490 <_Z12uart_processv+0x958>)
 80043c6:	f7ff fb43 	bl	8003a50 <_Z18uart_invalid_valuePKcd>
 80043ca:	e511      	b.n	8003df0 <_Z12uart_processv+0x2b8>
    else if (strcmp(cmd, "GMVL") == 0)
 80043cc:	4933      	ldr	r1, [pc, #204]	; (800449c <_Z12uart_processv+0x964>)
 80043ce:	a806      	add	r0, sp, #24
 80043d0:	f7fb febe 	bl	8000150 <strcmp>
 80043d4:	2800      	cmp	r0, #0
 80043d6:	f000 80a1 	beq.w	800451c <_Z12uart_processv+0x9e4>
    else if (strcmp(cmd, "SMTQ") == 0)
 80043da:	4931      	ldr	r1, [pc, #196]	; (80044a0 <_Z12uart_processv+0x968>)
 80043dc:	a806      	add	r0, sp, #24
 80043de:	f7fb feb7 	bl	8000150 <strcmp>
 80043e2:	2800      	cmp	r0, #0
 80043e4:	d162      	bne.n	80044ac <_Z12uart_processv+0x974>
        int ret = control.SetMaximumTorque(payload);
 80043e6:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
        if (tm < 0)
 80043ea:	2200      	movs	r2, #0
 80043ec:	2300      	movs	r3, #0
 80043ee:	4630      	mov	r0, r6
 80043f0:	4639      	mov	r1, r7
 80043f2:	f7fc fae9 	bl	80009c8 <__aeabi_dcmplt>
 80043f6:	b988      	cbnz	r0, 800441c <_Z12uart_processv+0x8e4>
        this->MaximumTorque = tm;
 80043f8:	480f      	ldr	r0, [pc, #60]	; (8004438 <_Z12uart_processv+0x900>)
            uart_valid_value_set("Tmax", "N.m", payload);
 80043fa:	4632      	mov	r2, r6
 80043fc:	e9c0 6724 	strd	r6, r7, [r0, #144]	; 0x90
 8004400:	463b      	mov	r3, r7
 8004402:	4928      	ldr	r1, [pc, #160]	; (80044a4 <_Z12uart_processv+0x96c>)
 8004404:	4828      	ldr	r0, [pc, #160]	; (80044a8 <_Z12uart_processv+0x970>)
 8004406:	f7ff fb5d 	bl	8003ac4 <_Z20uart_valid_value_setPKcS0_d>
 800440a:	e4f1      	b.n	8003df0 <_Z12uart_processv+0x2b8>
        uart_dump_value("Kr", "(rad/s)/cmd", control.GetKr());
 800440c:	4b0a      	ldr	r3, [pc, #40]	; (8004438 <_Z12uart_processv+0x900>)
 800440e:	491b      	ldr	r1, [pc, #108]	; (800447c <_Z12uart_processv+0x944>)
 8004410:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8004414:	481a      	ldr	r0, [pc, #104]	; (8004480 <_Z12uart_processv+0x948>)
 8004416:	f7ff fa8f 	bl	8003938 <_Z15uart_dump_valuePKcS0_d>
 800441a:	e4e9      	b.n	8003df0 <_Z12uart_processv+0x2b8>
            uart_invalid_value("Tmax", payload);
 800441c:	4632      	mov	r2, r6
 800441e:	463b      	mov	r3, r7
 8004420:	4821      	ldr	r0, [pc, #132]	; (80044a8 <_Z12uart_processv+0x970>)
 8004422:	f7ff fb15 	bl	8003a50 <_Z18uart_invalid_valuePKcd>
 8004426:	e4e3      	b.n	8003df0 <_Z12uart_processv+0x2b8>
 8004428:	54442d18 	.word	0x54442d18
 800442c:	401921fb 	.word	0x401921fb
 8004430:	08009e0c 	.word	0x08009e0c
 8004434:	08009e14 	.word	0x08009e14
 8004438:	20000008 	.word	0x20000008
 800443c:	08009e1c 	.word	0x08009e1c
 8004440:	08009e28 	.word	0x08009e28
 8004444:	08009de4 	.word	0x08009de4
 8004448:	08009de0 	.word	0x08009de0
 800444c:	08009e00 	.word	0x08009e00
 8004450:	08009f48 	.word	0x08009f48
 8004454:	20001154 	.word	0x20001154
 8004458:	08009e2c 	.word	0x08009e2c
 800445c:	08009e34 	.word	0x08009e34
 8004460:	08009e3c 	.word	0x08009e3c
 8004464:	08009e44 	.word	0x08009e44
 8004468:	08009e04 	.word	0x08009e04
 800446c:	08009e48 	.word	0x08009e48
 8004470:	08009e50 	.word	0x08009e50
 8004474:	08009e68 	.word	0x08009e68
 8004478:	08009e70 	.word	0x08009e70
 800447c:	08009e78 	.word	0x08009e78
 8004480:	08009e84 	.word	0x08009e84
 8004484:	08009e88 	.word	0x08009e88
 8004488:	08009e90 	.word	0x08009e90
 800448c:	08009e98 	.word	0x08009e98
 8004490:	08009ea0 	.word	0x08009ea0
 8004494:	08009e64 	.word	0x08009e64
 8004498:	08009e58 	.word	0x08009e58
 800449c:	08009eac 	.word	0x08009eac
 80044a0:	08009eb4 	.word	0x08009eb4
 80044a4:	08009ebc 	.word	0x08009ebc
 80044a8:	08009ec0 	.word	0x08009ec0
    else if (strcmp(cmd, "GMTQ") == 0)
 80044ac:	4950      	ldr	r1, [pc, #320]	; (80045f0 <_Z12uart_processv+0xab8>)
 80044ae:	a806      	add	r0, sp, #24
 80044b0:	f7fb fe4e 	bl	8000150 <strcmp>
 80044b4:	2800      	cmp	r0, #0
 80044b6:	d05b      	beq.n	8004570 <_Z12uart_processv+0xa38>
    else if (strcmp(cmd, "SVSP") == 0)
 80044b8:	494e      	ldr	r1, [pc, #312]	; (80045f4 <_Z12uart_processv+0xabc>)
 80044ba:	a806      	add	r0, sp, #24
 80044bc:	f7fb fe48 	bl	8000150 <strcmp>
 80044c0:	2800      	cmp	r0, #0
 80044c2:	d139      	bne.n	8004538 <_Z12uart_processv+0xa00>
        int ret = control.SetSupplyVoltage(payload);
 80044c4:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
        if (vs < 0)
 80044c8:	2200      	movs	r2, #0
 80044ca:	2300      	movs	r3, #0
 80044cc:	4630      	mov	r0, r6
 80044ce:	4639      	mov	r1, r7
 80044d0:	f7fc fa7a 	bl	80009c8 <__aeabi_dcmplt>
 80044d4:	bb50      	cbnz	r0, 800452c <_Z12uart_processv+0x9f4>
        this->SupplyVoltage = vs;
 80044d6:	f8df a128 	ldr.w	sl, [pc, #296]	; 8004600 <_Z12uart_processv+0xac8>
        this->MaximumVoltage = vs * (ccr_max + 1) / (ccr_arr + 1);
 80044da:	f8ba 0002 	ldrh.w	r0, [sl, #2]
        this->SupplyVoltage = vs;
 80044de:	e9ca 6728 	strd	r6, r7, [sl, #160]	; 0xa0
        this->MaximumVoltage = vs * (ccr_max + 1) / (ccr_arr + 1);
 80044e2:	3001      	adds	r0, #1
 80044e4:	f7fb ff98 	bl	8000418 <__aeabi_i2d>
 80044e8:	4632      	mov	r2, r6
 80044ea:	463b      	mov	r3, r7
 80044ec:	f7fb fffa 	bl	80004e4 <__aeabi_dmul>
 80044f0:	4680      	mov	r8, r0
 80044f2:	f8ba 0000 	ldrh.w	r0, [sl]
 80044f6:	4689      	mov	r9, r1
 80044f8:	3001      	adds	r0, #1
 80044fa:	f7fb ff8d 	bl	8000418 <__aeabi_i2d>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	4640      	mov	r0, r8
 8004504:	4649      	mov	r1, r9
 8004506:	f7fc f917 	bl	8000738 <__aeabi_ddiv>
            uart_valid_value_set(name, "V", payload);
 800450a:	4632      	mov	r2, r6
 800450c:	e9ca 0126 	strd	r0, r1, [sl, #152]	; 0x98
 8004510:	463b      	mov	r3, r7
 8004512:	4939      	ldr	r1, [pc, #228]	; (80045f8 <_Z12uart_processv+0xac0>)
 8004514:	4839      	ldr	r0, [pc, #228]	; (80045fc <_Z12uart_processv+0xac4>)
 8004516:	f7ff fad5 	bl	8003ac4 <_Z20uart_valid_value_setPKcS0_d>
 800451a:	e469      	b.n	8003df0 <_Z12uart_processv+0x2b8>
        uart_dump_value("Omega_max", "rad/s", control.GetMaximumVelocity());
 800451c:	4b38      	ldr	r3, [pc, #224]	; (8004600 <_Z12uart_processv+0xac8>)
 800451e:	4939      	ldr	r1, [pc, #228]	; (8004604 <_Z12uart_processv+0xacc>)
 8004520:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8004524:	4838      	ldr	r0, [pc, #224]	; (8004608 <_Z12uart_processv+0xad0>)
 8004526:	f7ff fa07 	bl	8003938 <_Z15uart_dump_valuePKcS0_d>
 800452a:	e461      	b.n	8003df0 <_Z12uart_processv+0x2b8>
            uart_invalid_value(name, payload);
 800452c:	4632      	mov	r2, r6
 800452e:	463b      	mov	r3, r7
 8004530:	4832      	ldr	r0, [pc, #200]	; (80045fc <_Z12uart_processv+0xac4>)
 8004532:	f7ff fa8d 	bl	8003a50 <_Z18uart_invalid_valuePKcd>
 8004536:	e45b      	b.n	8003df0 <_Z12uart_processv+0x2b8>
    else if (strcmp(cmd, "GVSP") == 0)
 8004538:	4934      	ldr	r1, [pc, #208]	; (800460c <_Z12uart_processv+0xad4>)
 800453a:	a806      	add	r0, sp, #24
 800453c:	f7fb fe08 	bl	8000150 <strcmp>
 8004540:	b348      	cbz	r0, 8004596 <_Z12uart_processv+0xa5e>
    else if(strcmp(cmd, "WCFG") == 0)
 8004542:	4933      	ldr	r1, [pc, #204]	; (8004610 <_Z12uart_processv+0xad8>)
 8004544:	a806      	add	r0, sp, #24
 8004546:	f7fb fe03 	bl	8000150 <strcmp>
 800454a:	b1c8      	cbz	r0, 8004580 <_Z12uart_processv+0xa48>
    else if(strcmp(cmd, "RCFG") == 0)
 800454c:	a806      	add	r0, sp, #24
 800454e:	4931      	ldr	r1, [pc, #196]	; (8004614 <_Z12uart_processv+0xadc>)
 8004550:	f7fb fdfe 	bl	8000150 <strcmp>
 8004554:	2800      	cmp	r0, #0
 8004556:	f47f ac4b 	bne.w	8003df0 <_Z12uart_processv+0x2b8>
        readConf();
 800455a:	f7fe faf1 	bl	8002b40 <_Z8readConfv>
        control.ReadConfig();
 800455e:	4828      	ldr	r0, [pc, #160]	; (8004600 <_Z12uart_processv+0xac8>)
 8004560:	f7fe ffbe 	bl	80034e0 <_ZN9MotorCtrl10ReadConfigEv>
        serial.write((const uint8_t *) msg, strlen(msg));
 8004564:	2211      	movs	r2, #17
 8004566:	492c      	ldr	r1, [pc, #176]	; (8004618 <_Z12uart_processv+0xae0>)
 8004568:	482c      	ldr	r0, [pc, #176]	; (800461c <_Z12uart_processv+0xae4>)
 800456a:	f7fe fb81 	bl	8002c70 <_ZN11SerialClass5writeEPKhi>
 800456e:	e43f      	b.n	8003df0 <_Z12uart_processv+0x2b8>
        uart_dump_value("Tmax", "N.m", control.GetMaximumTorque());
 8004570:	4b23      	ldr	r3, [pc, #140]	; (8004600 <_Z12uart_processv+0xac8>)
 8004572:	492b      	ldr	r1, [pc, #172]	; (8004620 <_Z12uart_processv+0xae8>)
 8004574:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8004578:	482a      	ldr	r0, [pc, #168]	; (8004624 <_Z12uart_processv+0xaec>)
 800457a:	f7ff f9dd 	bl	8003938 <_Z15uart_dump_valuePKcS0_d>
 800457e:	e437      	b.n	8003df0 <_Z12uart_processv+0x2b8>
        control.WriteConfig();
 8004580:	481f      	ldr	r0, [pc, #124]	; (8004600 <_Z12uart_processv+0xac8>)
 8004582:	f7fe fff7 	bl	8003574 <_ZN9MotorCtrl11WriteConfigEv>
        writeConf();
 8004586:	f7fe fae7 	bl	8002b58 <_Z9writeConfv>
        serial.write((const uint8_t *) msg, strlen(msg));
 800458a:	2212      	movs	r2, #18
 800458c:	4926      	ldr	r1, [pc, #152]	; (8004628 <_Z12uart_processv+0xaf0>)
 800458e:	4823      	ldr	r0, [pc, #140]	; (800461c <_Z12uart_processv+0xae4>)
 8004590:	f7fe fb6e 	bl	8002c70 <_ZN11SerialClass5writeEPKhi>
 8004594:	e42c      	b.n	8003df0 <_Z12uart_processv+0x2b8>
        uart_dump_value("Vsup", "V", control.GetSupplyVoltage());
 8004596:	4b1a      	ldr	r3, [pc, #104]	; (8004600 <_Z12uart_processv+0xac8>)
 8004598:	4917      	ldr	r1, [pc, #92]	; (80045f8 <_Z12uart_processv+0xac0>)
 800459a:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800459e:	4817      	ldr	r0, [pc, #92]	; (80045fc <_Z12uart_processv+0xac4>)
 80045a0:	f7ff f9ca 	bl	8003938 <_Z15uart_dump_valuePKcS0_d>
 80045a4:	e424      	b.n	8003df0 <_Z12uart_processv+0x2b8>
        this->Kh = 2 * M_PI / (ppr * Tc);
 80045a6:	4e16      	ldr	r6, [pc, #88]	; (8004600 <_Z12uart_processv+0xac8>)
        int ret = control.SetPPR(payload);
 80045a8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80045ac:	e9d6 231a 	ldrd	r2, r3, [r6, #104]	; 0x68
 80045b0:	4640      	mov	r0, r8
 80045b2:	4649      	mov	r1, r9
 80045b4:	f7fb ff96 	bl	80004e4 <__aeabi_dmul>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	a10a      	add	r1, pc, #40	; (adr r1, 80045e8 <_Z12uart_processv+0xab0>)
 80045be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045c2:	f7fc f8b9 	bl	8000738 <__aeabi_ddiv>
            uart_valid_value_set("PPR", "pulse/rev.", payload);
 80045c6:	4642      	mov	r2, r8
 80045c8:	e9c6 011c 	strd	r0, r1, [r6, #112]	; 0x70
 80045cc:	464b      	mov	r3, r9
 80045ce:	4917      	ldr	r1, [pc, #92]	; (800462c <_Z12uart_processv+0xaf4>)
 80045d0:	4817      	ldr	r0, [pc, #92]	; (8004630 <_Z12uart_processv+0xaf8>)
 80045d2:	f7ff fa77 	bl	8003ac4 <_Z20uart_valid_value_setPKcS0_d>
 80045d6:	e40b      	b.n	8003df0 <_Z12uart_processv+0x2b8>
        uart_dump_value("Kg", "V/(N.m)", control.GetKg());
 80045d8:	4b09      	ldr	r3, [pc, #36]	; (8004600 <_Z12uart_processv+0xac8>)
 80045da:	4916      	ldr	r1, [pc, #88]	; (8004634 <_Z12uart_processv+0xafc>)
 80045dc:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80045e0:	4815      	ldr	r0, [pc, #84]	; (8004638 <_Z12uart_processv+0xb00>)
 80045e2:	f7ff f9a9 	bl	8003938 <_Z15uart_dump_valuePKcS0_d>
 80045e6:	e403      	b.n	8003df0 <_Z12uart_processv+0x2b8>
 80045e8:	54442d18 	.word	0x54442d18
 80045ec:	401921fb 	.word	0x401921fb
 80045f0:	08009ec8 	.word	0x08009ec8
 80045f4:	08009ed0 	.word	0x08009ed0
 80045f8:	08009ed8 	.word	0x08009ed8
 80045fc:	08009edc 	.word	0x08009edc
 8004600:	20000008 	.word	0x20000008
 8004604:	08009e98 	.word	0x08009e98
 8004608:	08009ea0 	.word	0x08009ea0
 800460c:	08009ee4 	.word	0x08009ee4
 8004610:	08009eec 	.word	0x08009eec
 8004614:	08009f08 	.word	0x08009f08
 8004618:	08009f10 	.word	0x08009f10
 800461c:	20000744 	.word	0x20000744
 8004620:	08009ebc 	.word	0x08009ebc
 8004624:	08009ec0 	.word	0x08009ec0
 8004628:	08009ef4 	.word	0x08009ef4
 800462c:	08009e58 	.word	0x08009e58
 8004630:	08009e64 	.word	0x08009e64
 8004634:	08009e3c 	.word	0x08009e3c
 8004638:	08009e44 	.word	0x08009e44

0800463c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800463c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800463e:	e003      	b.n	8004648 <LoopCopyDataInit>

08004640 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004640:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004642:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004644:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004646:	3104      	adds	r1, #4

08004648 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004648:	480a      	ldr	r0, [pc, #40]	; (8004674 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800464a:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800464c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800464e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004650:	d3f6      	bcc.n	8004640 <CopyDataInit>
  ldr r2, =_sbss
 8004652:	4a0a      	ldr	r2, [pc, #40]	; (800467c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004654:	e002      	b.n	800465c <LoopFillZerobss>

08004656 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004656:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004658:	f842 3b04 	str.w	r3, [r2], #4

0800465c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800465c:	4b08      	ldr	r3, [pc, #32]	; (8004680 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800465e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004660:	d3f9      	bcc.n	8004656 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004662:	f7ff f911 	bl	8003888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004666:	f000 f80f 	bl	8004688 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800466a:	f7fe fbb1 	bl	8002dd0 <main>
  bx lr
 800466e:	4770      	bx	lr
  ldr r3, =_sidata
 8004670:	0800a2d8 	.word	0x0800a2d8
  ldr r0, =_sdata
 8004674:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004678:	20000724 	.word	0x20000724
  ldr r2, =_sbss
 800467c:	20000728 	.word	0x20000728
  ldr r3, = _ebss
 8004680:	20001240 	.word	0x20001240

08004684 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004684:	e7fe      	b.n	8004684 <ADC1_2_IRQHandler>
	...

08004688 <__libc_init_array>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	2500      	movs	r5, #0
 800468c:	4e0c      	ldr	r6, [pc, #48]	; (80046c0 <__libc_init_array+0x38>)
 800468e:	4c0d      	ldr	r4, [pc, #52]	; (80046c4 <__libc_init_array+0x3c>)
 8004690:	1ba4      	subs	r4, r4, r6
 8004692:	10a4      	asrs	r4, r4, #2
 8004694:	42a5      	cmp	r5, r4
 8004696:	d109      	bne.n	80046ac <__libc_init_array+0x24>
 8004698:	f005 fb14 	bl	8009cc4 <_init>
 800469c:	2500      	movs	r5, #0
 800469e:	4e0a      	ldr	r6, [pc, #40]	; (80046c8 <__libc_init_array+0x40>)
 80046a0:	4c0a      	ldr	r4, [pc, #40]	; (80046cc <__libc_init_array+0x44>)
 80046a2:	1ba4      	subs	r4, r4, r6
 80046a4:	10a4      	asrs	r4, r4, #2
 80046a6:	42a5      	cmp	r5, r4
 80046a8:	d105      	bne.n	80046b6 <__libc_init_array+0x2e>
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
 80046ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046b0:	4798      	blx	r3
 80046b2:	3501      	adds	r5, #1
 80046b4:	e7ee      	b.n	8004694 <__libc_init_array+0xc>
 80046b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046ba:	4798      	blx	r3
 80046bc:	3501      	adds	r5, #1
 80046be:	e7f2      	b.n	80046a6 <__libc_init_array+0x1e>
 80046c0:	0800a2cc 	.word	0x0800a2cc
 80046c4:	0800a2cc 	.word	0x0800a2cc
 80046c8:	0800a2cc 	.word	0x0800a2cc
 80046cc:	0800a2d4 	.word	0x0800a2d4

080046d0 <memcpy>:
 80046d0:	b510      	push	{r4, lr}
 80046d2:	1e43      	subs	r3, r0, #1
 80046d4:	440a      	add	r2, r1
 80046d6:	4291      	cmp	r1, r2
 80046d8:	d100      	bne.n	80046dc <memcpy+0xc>
 80046da:	bd10      	pop	{r4, pc}
 80046dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046e4:	e7f7      	b.n	80046d6 <memcpy+0x6>

080046e6 <memset>:
 80046e6:	4603      	mov	r3, r0
 80046e8:	4402      	add	r2, r0
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d100      	bne.n	80046f0 <memset+0xa>
 80046ee:	4770      	bx	lr
 80046f0:	f803 1b01 	strb.w	r1, [r3], #1
 80046f4:	e7f9      	b.n	80046ea <memset+0x4>
	...

080046f8 <sprintf>:
 80046f8:	b40e      	push	{r1, r2, r3}
 80046fa:	f44f 7102 	mov.w	r1, #520	; 0x208
 80046fe:	b500      	push	{lr}
 8004700:	b09c      	sub	sp, #112	; 0x70
 8004702:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004706:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800470a:	9104      	str	r1, [sp, #16]
 800470c:	9107      	str	r1, [sp, #28]
 800470e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004712:	ab1d      	add	r3, sp, #116	; 0x74
 8004714:	9002      	str	r0, [sp, #8]
 8004716:	9006      	str	r0, [sp, #24]
 8004718:	4808      	ldr	r0, [pc, #32]	; (800473c <sprintf+0x44>)
 800471a:	f853 2b04 	ldr.w	r2, [r3], #4
 800471e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004722:	6800      	ldr	r0, [r0, #0]
 8004724:	a902      	add	r1, sp, #8
 8004726:	9301      	str	r3, [sp, #4]
 8004728:	f000 f836 	bl	8004798 <_svfprintf_r>
 800472c:	2200      	movs	r2, #0
 800472e:	9b02      	ldr	r3, [sp, #8]
 8004730:	701a      	strb	r2, [r3, #0]
 8004732:	b01c      	add	sp, #112	; 0x70
 8004734:	f85d eb04 	ldr.w	lr, [sp], #4
 8004738:	b003      	add	sp, #12
 800473a:	4770      	bx	lr
 800473c:	200000b4 	.word	0x200000b4

08004740 <sscanf>:
 8004740:	b40e      	push	{r1, r2, r3}
 8004742:	f44f 7201 	mov.w	r2, #516	; 0x204
 8004746:	b530      	push	{r4, r5, lr}
 8004748:	b09c      	sub	sp, #112	; 0x70
 800474a:	ac1f      	add	r4, sp, #124	; 0x7c
 800474c:	f854 5b04 	ldr.w	r5, [r4], #4
 8004750:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004754:	9002      	str	r0, [sp, #8]
 8004756:	9006      	str	r0, [sp, #24]
 8004758:	f7fb fd04 	bl	8000164 <strlen>
 800475c:	4b0b      	ldr	r3, [pc, #44]	; (800478c <sscanf+0x4c>)
 800475e:	9003      	str	r0, [sp, #12]
 8004760:	930b      	str	r3, [sp, #44]	; 0x2c
 8004762:	2300      	movs	r3, #0
 8004764:	930f      	str	r3, [sp, #60]	; 0x3c
 8004766:	9314      	str	r3, [sp, #80]	; 0x50
 8004768:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800476c:	9007      	str	r0, [sp, #28]
 800476e:	4808      	ldr	r0, [pc, #32]	; (8004790 <sscanf+0x50>)
 8004770:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004774:	462a      	mov	r2, r5
 8004776:	4623      	mov	r3, r4
 8004778:	a902      	add	r1, sp, #8
 800477a:	6800      	ldr	r0, [r0, #0]
 800477c:	9401      	str	r4, [sp, #4]
 800477e:	f000 ffdb 	bl	8005738 <__ssvfscanf_r>
 8004782:	b01c      	add	sp, #112	; 0x70
 8004784:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004788:	b003      	add	sp, #12
 800478a:	4770      	bx	lr
 800478c:	08004795 	.word	0x08004795
 8004790:	200000b4 	.word	0x200000b4

08004794 <__seofread>:
 8004794:	2000      	movs	r0, #0
 8004796:	4770      	bx	lr

08004798 <_svfprintf_r>:
 8004798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800479c:	b0bf      	sub	sp, #252	; 0xfc
 800479e:	4689      	mov	r9, r1
 80047a0:	4615      	mov	r5, r2
 80047a2:	461f      	mov	r7, r3
 80047a4:	4682      	mov	sl, r0
 80047a6:	f002 fbc7 	bl	8006f38 <_localeconv_r>
 80047aa:	6803      	ldr	r3, [r0, #0]
 80047ac:	4618      	mov	r0, r3
 80047ae:	9311      	str	r3, [sp, #68]	; 0x44
 80047b0:	f7fb fcd8 	bl	8000164 <strlen>
 80047b4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80047b8:	900a      	str	r0, [sp, #40]	; 0x28
 80047ba:	061b      	lsls	r3, r3, #24
 80047bc:	d518      	bpl.n	80047f0 <_svfprintf_r+0x58>
 80047be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80047c2:	b9ab      	cbnz	r3, 80047f0 <_svfprintf_r+0x58>
 80047c4:	2140      	movs	r1, #64	; 0x40
 80047c6:	4650      	mov	r0, sl
 80047c8:	f002 fbcc 	bl	8006f64 <_malloc_r>
 80047cc:	f8c9 0000 	str.w	r0, [r9]
 80047d0:	f8c9 0010 	str.w	r0, [r9, #16]
 80047d4:	b948      	cbnz	r0, 80047ea <_svfprintf_r+0x52>
 80047d6:	230c      	movs	r3, #12
 80047d8:	f8ca 3000 	str.w	r3, [sl]
 80047dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80047e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80047e4:	b03f      	add	sp, #252	; 0xfc
 80047e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ea:	2340      	movs	r3, #64	; 0x40
 80047ec:	f8c9 3014 	str.w	r3, [r9, #20]
 80047f0:	2300      	movs	r3, #0
 80047f2:	ac2e      	add	r4, sp, #184	; 0xb8
 80047f4:	9421      	str	r4, [sp, #132]	; 0x84
 80047f6:	9323      	str	r3, [sp, #140]	; 0x8c
 80047f8:	9322      	str	r3, [sp, #136]	; 0x88
 80047fa:	9509      	str	r5, [sp, #36]	; 0x24
 80047fc:	9307      	str	r3, [sp, #28]
 80047fe:	930d      	str	r3, [sp, #52]	; 0x34
 8004800:	930e      	str	r3, [sp, #56]	; 0x38
 8004802:	9315      	str	r3, [sp, #84]	; 0x54
 8004804:	9314      	str	r3, [sp, #80]	; 0x50
 8004806:	930b      	str	r3, [sp, #44]	; 0x2c
 8004808:	9312      	str	r3, [sp, #72]	; 0x48
 800480a:	9313      	str	r3, [sp, #76]	; 0x4c
 800480c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800480e:	462b      	mov	r3, r5
 8004810:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004814:	b112      	cbz	r2, 800481c <_svfprintf_r+0x84>
 8004816:	2a25      	cmp	r2, #37	; 0x25
 8004818:	f040 8083 	bne.w	8004922 <_svfprintf_r+0x18a>
 800481c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800481e:	1aee      	subs	r6, r5, r3
 8004820:	d00d      	beq.n	800483e <_svfprintf_r+0xa6>
 8004822:	e884 0048 	stmia.w	r4, {r3, r6}
 8004826:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004828:	4433      	add	r3, r6
 800482a:	9323      	str	r3, [sp, #140]	; 0x8c
 800482c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800482e:	3301      	adds	r3, #1
 8004830:	2b07      	cmp	r3, #7
 8004832:	9322      	str	r3, [sp, #136]	; 0x88
 8004834:	dc77      	bgt.n	8004926 <_svfprintf_r+0x18e>
 8004836:	3408      	adds	r4, #8
 8004838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800483a:	4433      	add	r3, r6
 800483c:	930b      	str	r3, [sp, #44]	; 0x2c
 800483e:	782b      	ldrb	r3, [r5, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 8725 	beq.w	8005690 <_svfprintf_r+0xef8>
 8004846:	2300      	movs	r3, #0
 8004848:	1c69      	adds	r1, r5, #1
 800484a:	461a      	mov	r2, r3
 800484c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8004850:	461d      	mov	r5, r3
 8004852:	200a      	movs	r0, #10
 8004854:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8004858:	930c      	str	r3, [sp, #48]	; 0x30
 800485a:	1c4e      	adds	r6, r1, #1
 800485c:	7809      	ldrb	r1, [r1, #0]
 800485e:	9609      	str	r6, [sp, #36]	; 0x24
 8004860:	9106      	str	r1, [sp, #24]
 8004862:	9906      	ldr	r1, [sp, #24]
 8004864:	3920      	subs	r1, #32
 8004866:	2958      	cmp	r1, #88	; 0x58
 8004868:	f200 8414 	bhi.w	8005094 <_svfprintf_r+0x8fc>
 800486c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004870:	041200a5 	.word	0x041200a5
 8004874:	00aa0412 	.word	0x00aa0412
 8004878:	04120412 	.word	0x04120412
 800487c:	04120412 	.word	0x04120412
 8004880:	04120412 	.word	0x04120412
 8004884:	006500ad 	.word	0x006500ad
 8004888:	00b50412 	.word	0x00b50412
 800488c:	041200b8 	.word	0x041200b8
 8004890:	00d800d5 	.word	0x00d800d5
 8004894:	00d800d8 	.word	0x00d800d8
 8004898:	00d800d8 	.word	0x00d800d8
 800489c:	00d800d8 	.word	0x00d800d8
 80048a0:	00d800d8 	.word	0x00d800d8
 80048a4:	04120412 	.word	0x04120412
 80048a8:	04120412 	.word	0x04120412
 80048ac:	04120412 	.word	0x04120412
 80048b0:	04120412 	.word	0x04120412
 80048b4:	04120412 	.word	0x04120412
 80048b8:	0122010c 	.word	0x0122010c
 80048bc:	01220412 	.word	0x01220412
 80048c0:	04120412 	.word	0x04120412
 80048c4:	04120412 	.word	0x04120412
 80048c8:	041200eb 	.word	0x041200eb
 80048cc:	033c0412 	.word	0x033c0412
 80048d0:	04120412 	.word	0x04120412
 80048d4:	04120412 	.word	0x04120412
 80048d8:	03a40412 	.word	0x03a40412
 80048dc:	04120412 	.word	0x04120412
 80048e0:	04120085 	.word	0x04120085
 80048e4:	04120412 	.word	0x04120412
 80048e8:	04120412 	.word	0x04120412
 80048ec:	04120412 	.word	0x04120412
 80048f0:	04120412 	.word	0x04120412
 80048f4:	00fe0412 	.word	0x00fe0412
 80048f8:	0122006b 	.word	0x0122006b
 80048fc:	01220122 	.word	0x01220122
 8004900:	006b00ee 	.word	0x006b00ee
 8004904:	04120412 	.word	0x04120412
 8004908:	041200f1 	.word	0x041200f1
 800490c:	033e031e 	.word	0x033e031e
 8004910:	00f80372 	.word	0x00f80372
 8004914:	03830412 	.word	0x03830412
 8004918:	03a60412 	.word	0x03a60412
 800491c:	04120412 	.word	0x04120412
 8004920:	03be      	.short	0x03be
 8004922:	461d      	mov	r5, r3
 8004924:	e773      	b.n	800480e <_svfprintf_r+0x76>
 8004926:	aa21      	add	r2, sp, #132	; 0x84
 8004928:	4649      	mov	r1, r9
 800492a:	4650      	mov	r0, sl
 800492c:	f004 fa5e 	bl	8008dec <__ssprint_r>
 8004930:	2800      	cmp	r0, #0
 8004932:	f040 868e 	bne.w	8005652 <_svfprintf_r+0xeba>
 8004936:	ac2e      	add	r4, sp, #184	; 0xb8
 8004938:	e77e      	b.n	8004838 <_svfprintf_r+0xa0>
 800493a:	2301      	movs	r3, #1
 800493c:	222b      	movs	r2, #43	; 0x2b
 800493e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004940:	e78b      	b.n	800485a <_svfprintf_r+0xc2>
 8004942:	460f      	mov	r7, r1
 8004944:	e7fb      	b.n	800493e <_svfprintf_r+0x1a6>
 8004946:	b10b      	cbz	r3, 800494c <_svfprintf_r+0x1b4>
 8004948:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800494c:	06ae      	lsls	r6, r5, #26
 800494e:	f140 80a1 	bpl.w	8004a94 <_svfprintf_r+0x2fc>
 8004952:	3707      	adds	r7, #7
 8004954:	f027 0707 	bic.w	r7, r7, #7
 8004958:	f107 0308 	add.w	r3, r7, #8
 800495c:	9308      	str	r3, [sp, #32]
 800495e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004962:	2e00      	cmp	r6, #0
 8004964:	f177 0300 	sbcs.w	r3, r7, #0
 8004968:	da05      	bge.n	8004976 <_svfprintf_r+0x1de>
 800496a:	232d      	movs	r3, #45	; 0x2d
 800496c:	4276      	negs	r6, r6
 800496e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8004972:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8004976:	2301      	movs	r3, #1
 8004978:	e2c7      	b.n	8004f0a <_svfprintf_r+0x772>
 800497a:	b10b      	cbz	r3, 8004980 <_svfprintf_r+0x1e8>
 800497c:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8004980:	4ba0      	ldr	r3, [pc, #640]	; (8004c04 <_svfprintf_r+0x46c>)
 8004982:	9315      	str	r3, [sp, #84]	; 0x54
 8004984:	06ab      	lsls	r3, r5, #26
 8004986:	f140 8336 	bpl.w	8004ff6 <_svfprintf_r+0x85e>
 800498a:	3707      	adds	r7, #7
 800498c:	f027 0707 	bic.w	r7, r7, #7
 8004990:	f107 0308 	add.w	r3, r7, #8
 8004994:	9308      	str	r3, [sp, #32]
 8004996:	e9d7 6700 	ldrd	r6, r7, [r7]
 800499a:	07e8      	lsls	r0, r5, #31
 800499c:	d50b      	bpl.n	80049b6 <_svfprintf_r+0x21e>
 800499e:	ea56 0307 	orrs.w	r3, r6, r7
 80049a2:	d008      	beq.n	80049b6 <_svfprintf_r+0x21e>
 80049a4:	2330      	movs	r3, #48	; 0x30
 80049a6:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 80049aa:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80049ae:	f045 0502 	orr.w	r5, r5, #2
 80049b2:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 80049b6:	2302      	movs	r3, #2
 80049b8:	e2a4      	b.n	8004f04 <_svfprintf_r+0x76c>
 80049ba:	2a00      	cmp	r2, #0
 80049bc:	d1bf      	bne.n	800493e <_svfprintf_r+0x1a6>
 80049be:	2301      	movs	r3, #1
 80049c0:	2220      	movs	r2, #32
 80049c2:	e7bc      	b.n	800493e <_svfprintf_r+0x1a6>
 80049c4:	f045 0501 	orr.w	r5, r5, #1
 80049c8:	e7b9      	b.n	800493e <_svfprintf_r+0x1a6>
 80049ca:	683e      	ldr	r6, [r7, #0]
 80049cc:	1d39      	adds	r1, r7, #4
 80049ce:	2e00      	cmp	r6, #0
 80049d0:	960c      	str	r6, [sp, #48]	; 0x30
 80049d2:	dab6      	bge.n	8004942 <_svfprintf_r+0x1aa>
 80049d4:	460f      	mov	r7, r1
 80049d6:	4276      	negs	r6, r6
 80049d8:	960c      	str	r6, [sp, #48]	; 0x30
 80049da:	f045 0504 	orr.w	r5, r5, #4
 80049de:	e7ae      	b.n	800493e <_svfprintf_r+0x1a6>
 80049e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049e2:	1c4e      	adds	r6, r1, #1
 80049e4:	7809      	ldrb	r1, [r1, #0]
 80049e6:	292a      	cmp	r1, #42	; 0x2a
 80049e8:	9106      	str	r1, [sp, #24]
 80049ea:	d010      	beq.n	8004a0e <_svfprintf_r+0x276>
 80049ec:	f04f 0b00 	mov.w	fp, #0
 80049f0:	9609      	str	r6, [sp, #36]	; 0x24
 80049f2:	9906      	ldr	r1, [sp, #24]
 80049f4:	3930      	subs	r1, #48	; 0x30
 80049f6:	2909      	cmp	r1, #9
 80049f8:	f63f af33 	bhi.w	8004862 <_svfprintf_r+0xca>
 80049fc:	fb00 1b0b 	mla	fp, r0, fp, r1
 8004a00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a02:	460e      	mov	r6, r1
 8004a04:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004a08:	9106      	str	r1, [sp, #24]
 8004a0a:	9609      	str	r6, [sp, #36]	; 0x24
 8004a0c:	e7f1      	b.n	80049f2 <_svfprintf_r+0x25a>
 8004a0e:	6839      	ldr	r1, [r7, #0]
 8004a10:	9609      	str	r6, [sp, #36]	; 0x24
 8004a12:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 8004a16:	3704      	adds	r7, #4
 8004a18:	e791      	b.n	800493e <_svfprintf_r+0x1a6>
 8004a1a:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8004a1e:	e78e      	b.n	800493e <_svfprintf_r+0x1a6>
 8004a20:	2100      	movs	r1, #0
 8004a22:	910c      	str	r1, [sp, #48]	; 0x30
 8004a24:	9906      	ldr	r1, [sp, #24]
 8004a26:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004a28:	3930      	subs	r1, #48	; 0x30
 8004a2a:	fb00 1106 	mla	r1, r0, r6, r1
 8004a2e:	910c      	str	r1, [sp, #48]	; 0x30
 8004a30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a32:	460e      	mov	r6, r1
 8004a34:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004a38:	9106      	str	r1, [sp, #24]
 8004a3a:	9906      	ldr	r1, [sp, #24]
 8004a3c:	9609      	str	r6, [sp, #36]	; 0x24
 8004a3e:	3930      	subs	r1, #48	; 0x30
 8004a40:	2909      	cmp	r1, #9
 8004a42:	d9ef      	bls.n	8004a24 <_svfprintf_r+0x28c>
 8004a44:	e70d      	b.n	8004862 <_svfprintf_r+0xca>
 8004a46:	f045 0508 	orr.w	r5, r5, #8
 8004a4a:	e778      	b.n	800493e <_svfprintf_r+0x1a6>
 8004a4c:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8004a50:	e775      	b.n	800493e <_svfprintf_r+0x1a6>
 8004a52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a54:	7809      	ldrb	r1, [r1, #0]
 8004a56:	296c      	cmp	r1, #108	; 0x6c
 8004a58:	d105      	bne.n	8004a66 <_svfprintf_r+0x2ce>
 8004a5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a5c:	3101      	adds	r1, #1
 8004a5e:	9109      	str	r1, [sp, #36]	; 0x24
 8004a60:	f045 0520 	orr.w	r5, r5, #32
 8004a64:	e76b      	b.n	800493e <_svfprintf_r+0x1a6>
 8004a66:	f045 0510 	orr.w	r5, r5, #16
 8004a6a:	e768      	b.n	800493e <_svfprintf_r+0x1a6>
 8004a6c:	2600      	movs	r6, #0
 8004a6e:	1d3b      	adds	r3, r7, #4
 8004a70:	9308      	str	r3, [sp, #32]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8004a78:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8004a7c:	f04f 0b01 	mov.w	fp, #1
 8004a80:	4637      	mov	r7, r6
 8004a82:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8004a86:	e11c      	b.n	8004cc2 <_svfprintf_r+0x52a>
 8004a88:	b10b      	cbz	r3, 8004a8e <_svfprintf_r+0x2f6>
 8004a8a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8004a8e:	f045 0510 	orr.w	r5, r5, #16
 8004a92:	e75b      	b.n	800494c <_svfprintf_r+0x1b4>
 8004a94:	f015 0f10 	tst.w	r5, #16
 8004a98:	f107 0304 	add.w	r3, r7, #4
 8004a9c:	d003      	beq.n	8004aa6 <_svfprintf_r+0x30e>
 8004a9e:	683e      	ldr	r6, [r7, #0]
 8004aa0:	9308      	str	r3, [sp, #32]
 8004aa2:	17f7      	asrs	r7, r6, #31
 8004aa4:	e75d      	b.n	8004962 <_svfprintf_r+0x1ca>
 8004aa6:	683e      	ldr	r6, [r7, #0]
 8004aa8:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004aac:	9308      	str	r3, [sp, #32]
 8004aae:	bf18      	it	ne
 8004ab0:	b236      	sxthne	r6, r6
 8004ab2:	e7f6      	b.n	8004aa2 <_svfprintf_r+0x30a>
 8004ab4:	b10b      	cbz	r3, 8004aba <_svfprintf_r+0x322>
 8004ab6:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8004aba:	3707      	adds	r7, #7
 8004abc:	f027 0707 	bic.w	r7, r7, #7
 8004ac0:	f107 0308 	add.w	r3, r7, #8
 8004ac4:	9308      	str	r3, [sp, #32]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004acc:	930d      	str	r3, [sp, #52]	; 0x34
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004ad2:	930e      	str	r3, [sp, #56]	; 0x38
 8004ad4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ad6:	4638      	mov	r0, r7
 8004ad8:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8004adc:	4631      	mov	r1, r6
 8004ade:	4b4a      	ldr	r3, [pc, #296]	; (8004c08 <_svfprintf_r+0x470>)
 8004ae0:	f7fb ff9a 	bl	8000a18 <__aeabi_dcmpun>
 8004ae4:	2800      	cmp	r0, #0
 8004ae6:	f040 85dc 	bne.w	80056a2 <_svfprintf_r+0xf0a>
 8004aea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004aee:	4b46      	ldr	r3, [pc, #280]	; (8004c08 <_svfprintf_r+0x470>)
 8004af0:	4638      	mov	r0, r7
 8004af2:	4631      	mov	r1, r6
 8004af4:	f7fb ff72 	bl	80009dc <__aeabi_dcmple>
 8004af8:	2800      	cmp	r0, #0
 8004afa:	f040 85d2 	bne.w	80056a2 <_svfprintf_r+0xf0a>
 8004afe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004b00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004b02:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004b04:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004b06:	f7fb ff5f 	bl	80009c8 <__aeabi_dcmplt>
 8004b0a:	b110      	cbz	r0, 8004b12 <_svfprintf_r+0x37a>
 8004b0c:	232d      	movs	r3, #45	; 0x2d
 8004b0e:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8004b12:	4b3e      	ldr	r3, [pc, #248]	; (8004c0c <_svfprintf_r+0x474>)
 8004b14:	4a3e      	ldr	r2, [pc, #248]	; (8004c10 <_svfprintf_r+0x478>)
 8004b16:	9906      	ldr	r1, [sp, #24]
 8004b18:	f04f 0b03 	mov.w	fp, #3
 8004b1c:	2947      	cmp	r1, #71	; 0x47
 8004b1e:	bfcc      	ite	gt
 8004b20:	4690      	movgt	r8, r2
 8004b22:	4698      	movle	r8, r3
 8004b24:	2600      	movs	r6, #0
 8004b26:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8004b2a:	4637      	mov	r7, r6
 8004b2c:	e0c9      	b.n	8004cc2 <_svfprintf_r+0x52a>
 8004b2e:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8004b32:	d026      	beq.n	8004b82 <_svfprintf_r+0x3ea>
 8004b34:	9b06      	ldr	r3, [sp, #24]
 8004b36:	f023 0320 	bic.w	r3, r3, #32
 8004b3a:	2b47      	cmp	r3, #71	; 0x47
 8004b3c:	d104      	bne.n	8004b48 <_svfprintf_r+0x3b0>
 8004b3e:	f1bb 0f00 	cmp.w	fp, #0
 8004b42:	bf08      	it	eq
 8004b44:	f04f 0b01 	moveq.w	fp, #1
 8004b48:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8004b4c:	9317      	str	r3, [sp, #92]	; 0x5c
 8004b4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b50:	1e1f      	subs	r7, r3, #0
 8004b52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b54:	bfa8      	it	ge
 8004b56:	9710      	strge	r7, [sp, #64]	; 0x40
 8004b58:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b5a:	bfbd      	ittte	lt
 8004b5c:	463b      	movlt	r3, r7
 8004b5e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004b62:	9310      	strlt	r3, [sp, #64]	; 0x40
 8004b64:	2300      	movge	r3, #0
 8004b66:	bfb8      	it	lt
 8004b68:	232d      	movlt	r3, #45	; 0x2d
 8004b6a:	9316      	str	r3, [sp, #88]	; 0x58
 8004b6c:	9b06      	ldr	r3, [sp, #24]
 8004b6e:	f023 0720 	bic.w	r7, r3, #32
 8004b72:	2f46      	cmp	r7, #70	; 0x46
 8004b74:	d008      	beq.n	8004b88 <_svfprintf_r+0x3f0>
 8004b76:	2f45      	cmp	r7, #69	; 0x45
 8004b78:	d142      	bne.n	8004c00 <_svfprintf_r+0x468>
 8004b7a:	f10b 0601 	add.w	r6, fp, #1
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e004      	b.n	8004b8c <_svfprintf_r+0x3f4>
 8004b82:	f04f 0b06 	mov.w	fp, #6
 8004b86:	e7df      	b.n	8004b48 <_svfprintf_r+0x3b0>
 8004b88:	465e      	mov	r6, fp
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	aa1f      	add	r2, sp, #124	; 0x7c
 8004b8e:	9204      	str	r2, [sp, #16]
 8004b90:	aa1c      	add	r2, sp, #112	; 0x70
 8004b92:	9203      	str	r2, [sp, #12]
 8004b94:	aa1b      	add	r2, sp, #108	; 0x6c
 8004b96:	9202      	str	r2, [sp, #8]
 8004b98:	e88d 0048 	stmia.w	sp, {r3, r6}
 8004b9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004ba0:	4650      	mov	r0, sl
 8004ba2:	f001 fbc5 	bl	8006330 <_dtoa_r>
 8004ba6:	2f47      	cmp	r7, #71	; 0x47
 8004ba8:	4680      	mov	r8, r0
 8004baa:	d102      	bne.n	8004bb2 <_svfprintf_r+0x41a>
 8004bac:	07e8      	lsls	r0, r5, #31
 8004bae:	f140 8585 	bpl.w	80056bc <_svfprintf_r+0xf24>
 8004bb2:	eb08 0306 	add.w	r3, r8, r6
 8004bb6:	2f46      	cmp	r7, #70	; 0x46
 8004bb8:	9307      	str	r3, [sp, #28]
 8004bba:	d111      	bne.n	8004be0 <_svfprintf_r+0x448>
 8004bbc:	f898 3000 	ldrb.w	r3, [r8]
 8004bc0:	2b30      	cmp	r3, #48	; 0x30
 8004bc2:	d109      	bne.n	8004bd8 <_svfprintf_r+0x440>
 8004bc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004bc6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004bc8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004bca:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004bcc:	f7fb fef2 	bl	80009b4 <__aeabi_dcmpeq>
 8004bd0:	b910      	cbnz	r0, 8004bd8 <_svfprintf_r+0x440>
 8004bd2:	f1c6 0601 	rsb	r6, r6, #1
 8004bd6:	961b      	str	r6, [sp, #108]	; 0x6c
 8004bd8:	9a07      	ldr	r2, [sp, #28]
 8004bda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004bdc:	441a      	add	r2, r3
 8004bde:	9207      	str	r2, [sp, #28]
 8004be0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004be2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004be4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004be6:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004be8:	f7fb fee4 	bl	80009b4 <__aeabi_dcmpeq>
 8004bec:	b990      	cbnz	r0, 8004c14 <_svfprintf_r+0x47c>
 8004bee:	2230      	movs	r2, #48	; 0x30
 8004bf0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004bf2:	9907      	ldr	r1, [sp, #28]
 8004bf4:	4299      	cmp	r1, r3
 8004bf6:	d90f      	bls.n	8004c18 <_svfprintf_r+0x480>
 8004bf8:	1c59      	adds	r1, r3, #1
 8004bfa:	911f      	str	r1, [sp, #124]	; 0x7c
 8004bfc:	701a      	strb	r2, [r3, #0]
 8004bfe:	e7f7      	b.n	8004bf0 <_svfprintf_r+0x458>
 8004c00:	465e      	mov	r6, fp
 8004c02:	e7bc      	b.n	8004b7e <_svfprintf_r+0x3e6>
 8004c04:	08009f88 	.word	0x08009f88
 8004c08:	7fefffff 	.word	0x7fefffff
 8004c0c:	08009f78 	.word	0x08009f78
 8004c10:	08009f7c 	.word	0x08009f7c
 8004c14:	9b07      	ldr	r3, [sp, #28]
 8004c16:	931f      	str	r3, [sp, #124]	; 0x7c
 8004c18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004c1a:	2f47      	cmp	r7, #71	; 0x47
 8004c1c:	eba3 0308 	sub.w	r3, r3, r8
 8004c20:	9307      	str	r3, [sp, #28]
 8004c22:	f040 8100 	bne.w	8004e26 <_svfprintf_r+0x68e>
 8004c26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c28:	1cd9      	adds	r1, r3, #3
 8004c2a:	db02      	blt.n	8004c32 <_svfprintf_r+0x49a>
 8004c2c:	459b      	cmp	fp, r3
 8004c2e:	f280 8126 	bge.w	8004e7e <_svfprintf_r+0x6e6>
 8004c32:	9b06      	ldr	r3, [sp, #24]
 8004c34:	3b02      	subs	r3, #2
 8004c36:	9306      	str	r3, [sp, #24]
 8004c38:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004c3a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8004c3e:	1e53      	subs	r3, r2, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	bfa8      	it	ge
 8004c44:	222b      	movge	r2, #43	; 0x2b
 8004c46:	931b      	str	r3, [sp, #108]	; 0x6c
 8004c48:	bfbc      	itt	lt
 8004c4a:	f1c2 0301 	rsblt	r3, r2, #1
 8004c4e:	222d      	movlt	r2, #45	; 0x2d
 8004c50:	2b09      	cmp	r3, #9
 8004c52:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
 8004c56:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 8004c5a:	f340 8100 	ble.w	8004e5e <_svfprintf_r+0x6c6>
 8004c5e:	260a      	movs	r6, #10
 8004c60:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 8004c64:	fb93 f0f6 	sdiv	r0, r3, r6
 8004c68:	fb06 3310 	mls	r3, r6, r0, r3
 8004c6c:	2809      	cmp	r0, #9
 8004c6e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8004c72:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004c76:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	f300 80e8 	bgt.w	8004e50 <_svfprintf_r+0x6b8>
 8004c80:	3330      	adds	r3, #48	; 0x30
 8004c82:	f801 3c01 	strb.w	r3, [r1, #-1]
 8004c86:	3a02      	subs	r2, #2
 8004c88:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 8004c8c:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 8004c90:	4282      	cmp	r2, r0
 8004c92:	4619      	mov	r1, r3
 8004c94:	f0c0 80de 	bcc.w	8004e54 <_svfprintf_r+0x6bc>
 8004c98:	9a07      	ldr	r2, [sp, #28]
 8004c9a:	ab1d      	add	r3, sp, #116	; 0x74
 8004c9c:	1acb      	subs	r3, r1, r3
 8004c9e:	2a01      	cmp	r2, #1
 8004ca0:	9314      	str	r3, [sp, #80]	; 0x50
 8004ca2:	eb03 0b02 	add.w	fp, r3, r2
 8004ca6:	dc02      	bgt.n	8004cae <_svfprintf_r+0x516>
 8004ca8:	f015 0701 	ands.w	r7, r5, #1
 8004cac:	d002      	beq.n	8004cb4 <_svfprintf_r+0x51c>
 8004cae:	2700      	movs	r7, #0
 8004cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cb2:	449b      	add	fp, r3
 8004cb4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004cb6:	b113      	cbz	r3, 8004cbe <_svfprintf_r+0x526>
 8004cb8:	232d      	movs	r3, #45	; 0x2d
 8004cba:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8004cbe:	2600      	movs	r6, #0
 8004cc0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8004cc2:	455e      	cmp	r6, fp
 8004cc4:	4633      	mov	r3, r6
 8004cc6:	bfb8      	it	lt
 8004cc8:	465b      	movlt	r3, fp
 8004cca:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ccc:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8004cd0:	b113      	cbz	r3, 8004cd8 <_svfprintf_r+0x540>
 8004cd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004cd8:	f015 0302 	ands.w	r3, r5, #2
 8004cdc:	9316      	str	r3, [sp, #88]	; 0x58
 8004cde:	bf1e      	ittt	ne
 8004ce0:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 8004ce2:	3302      	addne	r3, #2
 8004ce4:	930f      	strne	r3, [sp, #60]	; 0x3c
 8004ce6:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8004cea:	9317      	str	r3, [sp, #92]	; 0x5c
 8004cec:	d118      	bne.n	8004d20 <_svfprintf_r+0x588>
 8004cee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004cf0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004cf2:	1a9b      	subs	r3, r3, r2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	9310      	str	r3, [sp, #64]	; 0x40
 8004cf8:	dd12      	ble.n	8004d20 <_svfprintf_r+0x588>
 8004cfa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004cfc:	2b10      	cmp	r3, #16
 8004cfe:	4bab      	ldr	r3, [pc, #684]	; (8004fac <_svfprintf_r+0x814>)
 8004d00:	6023      	str	r3, [r4, #0]
 8004d02:	f300 81d9 	bgt.w	80050b8 <_svfprintf_r+0x920>
 8004d06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d08:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004d0a:	6063      	str	r3, [r4, #4]
 8004d0c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d0e:	4413      	add	r3, r2
 8004d10:	9323      	str	r3, [sp, #140]	; 0x8c
 8004d12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d14:	3301      	adds	r3, #1
 8004d16:	2b07      	cmp	r3, #7
 8004d18:	9322      	str	r3, [sp, #136]	; 0x88
 8004d1a:	f300 81e6 	bgt.w	80050ea <_svfprintf_r+0x952>
 8004d1e:	3408      	adds	r4, #8
 8004d20:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8004d24:	b173      	cbz	r3, 8004d44 <_svfprintf_r+0x5ac>
 8004d26:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8004d2a:	6023      	str	r3, [r4, #0]
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	6063      	str	r3, [r4, #4]
 8004d30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d32:	3301      	adds	r3, #1
 8004d34:	9323      	str	r3, [sp, #140]	; 0x8c
 8004d36:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d38:	3301      	adds	r3, #1
 8004d3a:	2b07      	cmp	r3, #7
 8004d3c:	9322      	str	r3, [sp, #136]	; 0x88
 8004d3e:	f300 81de 	bgt.w	80050fe <_svfprintf_r+0x966>
 8004d42:	3408      	adds	r4, #8
 8004d44:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004d46:	b16b      	cbz	r3, 8004d64 <_svfprintf_r+0x5cc>
 8004d48:	ab1a      	add	r3, sp, #104	; 0x68
 8004d4a:	6023      	str	r3, [r4, #0]
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	6063      	str	r3, [r4, #4]
 8004d50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d52:	3302      	adds	r3, #2
 8004d54:	9323      	str	r3, [sp, #140]	; 0x8c
 8004d56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d58:	3301      	adds	r3, #1
 8004d5a:	2b07      	cmp	r3, #7
 8004d5c:	9322      	str	r3, [sp, #136]	; 0x88
 8004d5e:	f300 81d8 	bgt.w	8005112 <_svfprintf_r+0x97a>
 8004d62:	3408      	adds	r4, #8
 8004d64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d66:	2b80      	cmp	r3, #128	; 0x80
 8004d68:	d118      	bne.n	8004d9c <_svfprintf_r+0x604>
 8004d6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004d6e:	1a9b      	subs	r3, r3, r2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	9310      	str	r3, [sp, #64]	; 0x40
 8004d74:	dd12      	ble.n	8004d9c <_svfprintf_r+0x604>
 8004d76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d78:	2b10      	cmp	r3, #16
 8004d7a:	4b8d      	ldr	r3, [pc, #564]	; (8004fb0 <_svfprintf_r+0x818>)
 8004d7c:	6023      	str	r3, [r4, #0]
 8004d7e:	f300 81d2 	bgt.w	8005126 <_svfprintf_r+0x98e>
 8004d82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004d86:	6063      	str	r3, [r4, #4]
 8004d88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d8a:	4413      	add	r3, r2
 8004d8c:	9323      	str	r3, [sp, #140]	; 0x8c
 8004d8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d90:	3301      	adds	r3, #1
 8004d92:	2b07      	cmp	r3, #7
 8004d94:	9322      	str	r3, [sp, #136]	; 0x88
 8004d96:	f300 81df 	bgt.w	8005158 <_svfprintf_r+0x9c0>
 8004d9a:	3408      	adds	r4, #8
 8004d9c:	eba6 060b 	sub.w	r6, r6, fp
 8004da0:	2e00      	cmp	r6, #0
 8004da2:	dd0f      	ble.n	8004dc4 <_svfprintf_r+0x62c>
 8004da4:	4b82      	ldr	r3, [pc, #520]	; (8004fb0 <_svfprintf_r+0x818>)
 8004da6:	2e10      	cmp	r6, #16
 8004da8:	6023      	str	r3, [r4, #0]
 8004daa:	f300 81df 	bgt.w	800516c <_svfprintf_r+0x9d4>
 8004dae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004db0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8004db2:	3301      	adds	r3, #1
 8004db4:	6066      	str	r6, [r4, #4]
 8004db6:	2b07      	cmp	r3, #7
 8004db8:	4406      	add	r6, r0
 8004dba:	9623      	str	r6, [sp, #140]	; 0x8c
 8004dbc:	9322      	str	r3, [sp, #136]	; 0x88
 8004dbe:	f300 81ec 	bgt.w	800519a <_svfprintf_r+0xa02>
 8004dc2:	3408      	adds	r4, #8
 8004dc4:	05eb      	lsls	r3, r5, #23
 8004dc6:	f100 81f2 	bmi.w	80051ae <_svfprintf_r+0xa16>
 8004dca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004dcc:	e884 0900 	stmia.w	r4, {r8, fp}
 8004dd0:	445b      	add	r3, fp
 8004dd2:	9323      	str	r3, [sp, #140]	; 0x8c
 8004dd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	2b07      	cmp	r3, #7
 8004dda:	9322      	str	r3, [sp, #136]	; 0x88
 8004ddc:	f340 8419 	ble.w	8005612 <_svfprintf_r+0xe7a>
 8004de0:	aa21      	add	r2, sp, #132	; 0x84
 8004de2:	4649      	mov	r1, r9
 8004de4:	4650      	mov	r0, sl
 8004de6:	f004 f801 	bl	8008dec <__ssprint_r>
 8004dea:	2800      	cmp	r0, #0
 8004dec:	f040 8431 	bne.w	8005652 <_svfprintf_r+0xeba>
 8004df0:	ac2e      	add	r4, sp, #184	; 0xb8
 8004df2:	076b      	lsls	r3, r5, #29
 8004df4:	f100 8410 	bmi.w	8005618 <_svfprintf_r+0xe80>
 8004df8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004dfc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004dfe:	428a      	cmp	r2, r1
 8004e00:	bfac      	ite	ge
 8004e02:	189b      	addge	r3, r3, r2
 8004e04:	185b      	addlt	r3, r3, r1
 8004e06:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e0a:	b13b      	cbz	r3, 8004e1c <_svfprintf_r+0x684>
 8004e0c:	aa21      	add	r2, sp, #132	; 0x84
 8004e0e:	4649      	mov	r1, r9
 8004e10:	4650      	mov	r0, sl
 8004e12:	f003 ffeb 	bl	8008dec <__ssprint_r>
 8004e16:	2800      	cmp	r0, #0
 8004e18:	f040 841b 	bne.w	8005652 <_svfprintf_r+0xeba>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	9f08      	ldr	r7, [sp, #32]
 8004e20:	9322      	str	r3, [sp, #136]	; 0x88
 8004e22:	ac2e      	add	r4, sp, #184	; 0xb8
 8004e24:	e4f2      	b.n	800480c <_svfprintf_r+0x74>
 8004e26:	9b06      	ldr	r3, [sp, #24]
 8004e28:	2b65      	cmp	r3, #101	; 0x65
 8004e2a:	f77f af05 	ble.w	8004c38 <_svfprintf_r+0x4a0>
 8004e2e:	9b06      	ldr	r3, [sp, #24]
 8004e30:	2b66      	cmp	r3, #102	; 0x66
 8004e32:	d124      	bne.n	8004e7e <_svfprintf_r+0x6e6>
 8004e34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	dd19      	ble.n	8004e6e <_svfprintf_r+0x6d6>
 8004e3a:	f1bb 0f00 	cmp.w	fp, #0
 8004e3e:	d101      	bne.n	8004e44 <_svfprintf_r+0x6ac>
 8004e40:	07ea      	lsls	r2, r5, #31
 8004e42:	d502      	bpl.n	8004e4a <_svfprintf_r+0x6b2>
 8004e44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e46:	4413      	add	r3, r2
 8004e48:	445b      	add	r3, fp
 8004e4a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8004e4c:	469b      	mov	fp, r3
 8004e4e:	e731      	b.n	8004cb4 <_svfprintf_r+0x51c>
 8004e50:	460a      	mov	r2, r1
 8004e52:	e707      	b.n	8004c64 <_svfprintf_r+0x4cc>
 8004e54:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004e58:	f803 1b01 	strb.w	r1, [r3], #1
 8004e5c:	e718      	b.n	8004c90 <_svfprintf_r+0x4f8>
 8004e5e:	2230      	movs	r2, #48	; 0x30
 8004e60:	4413      	add	r3, r2
 8004e62:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 8004e66:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8004e6a:	a91e      	add	r1, sp, #120	; 0x78
 8004e6c:	e714      	b.n	8004c98 <_svfprintf_r+0x500>
 8004e6e:	f1bb 0f00 	cmp.w	fp, #0
 8004e72:	d101      	bne.n	8004e78 <_svfprintf_r+0x6e0>
 8004e74:	07eb      	lsls	r3, r5, #31
 8004e76:	d515      	bpl.n	8004ea4 <_svfprintf_r+0x70c>
 8004e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	e7e4      	b.n	8004e48 <_svfprintf_r+0x6b0>
 8004e7e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004e80:	9b07      	ldr	r3, [sp, #28]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	db06      	blt.n	8004e94 <_svfprintf_r+0x6fc>
 8004e86:	07ef      	lsls	r7, r5, #31
 8004e88:	d50e      	bpl.n	8004ea8 <_svfprintf_r+0x710>
 8004e8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e8c:	4413      	add	r3, r2
 8004e8e:	2267      	movs	r2, #103	; 0x67
 8004e90:	9206      	str	r2, [sp, #24]
 8004e92:	e7da      	b.n	8004e4a <_svfprintf_r+0x6b2>
 8004e94:	9b07      	ldr	r3, [sp, #28]
 8004e96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004e98:	2a00      	cmp	r2, #0
 8004e9a:	440b      	add	r3, r1
 8004e9c:	dcf7      	bgt.n	8004e8e <_svfprintf_r+0x6f6>
 8004e9e:	f1c2 0201 	rsb	r2, r2, #1
 8004ea2:	e7f3      	b.n	8004e8c <_svfprintf_r+0x6f4>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e7d0      	b.n	8004e4a <_svfprintf_r+0x6b2>
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	e7f0      	b.n	8004e8e <_svfprintf_r+0x6f6>
 8004eac:	b10b      	cbz	r3, 8004eb2 <_svfprintf_r+0x71a>
 8004eae:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8004eb2:	f015 0f20 	tst.w	r5, #32
 8004eb6:	f107 0304 	add.w	r3, r7, #4
 8004eba:	d008      	beq.n	8004ece <_svfprintf_r+0x736>
 8004ebc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	17ce      	asrs	r6, r1, #31
 8004ec2:	4608      	mov	r0, r1
 8004ec4:	4631      	mov	r1, r6
 8004ec6:	e9c2 0100 	strd	r0, r1, [r2]
 8004eca:	461f      	mov	r7, r3
 8004ecc:	e49e      	b.n	800480c <_svfprintf_r+0x74>
 8004ece:	06ee      	lsls	r6, r5, #27
 8004ed0:	d503      	bpl.n	8004eda <_svfprintf_r+0x742>
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ed6:	6011      	str	r1, [r2, #0]
 8004ed8:	e7f7      	b.n	8004eca <_svfprintf_r+0x732>
 8004eda:	0668      	lsls	r0, r5, #25
 8004edc:	d5f9      	bpl.n	8004ed2 <_svfprintf_r+0x73a>
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8004ee4:	8011      	strh	r1, [r2, #0]
 8004ee6:	e7f0      	b.n	8004eca <_svfprintf_r+0x732>
 8004ee8:	f045 0510 	orr.w	r5, r5, #16
 8004eec:	f015 0320 	ands.w	r3, r5, #32
 8004ef0:	d022      	beq.n	8004f38 <_svfprintf_r+0x7a0>
 8004ef2:	3707      	adds	r7, #7
 8004ef4:	f027 0707 	bic.w	r7, r7, #7
 8004ef8:	f107 0308 	add.w	r3, r7, #8
 8004efc:	9308      	str	r3, [sp, #32]
 8004efe:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004f02:	2300      	movs	r3, #0
 8004f04:	2200      	movs	r2, #0
 8004f06:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8004f0a:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8004f0e:	f000 83db 	beq.w	80056c8 <_svfprintf_r+0xf30>
 8004f12:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8004f16:	920f      	str	r2, [sp, #60]	; 0x3c
 8004f18:	ea56 0207 	orrs.w	r2, r6, r7
 8004f1c:	f040 83d9 	bne.w	80056d2 <_svfprintf_r+0xf3a>
 8004f20:	f1bb 0f00 	cmp.w	fp, #0
 8004f24:	f000 80aa 	beq.w	800507c <_svfprintf_r+0x8e4>
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d076      	beq.n	800501a <_svfprintf_r+0x882>
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	f000 8091 	beq.w	8005054 <_svfprintf_r+0x8bc>
 8004f32:	2600      	movs	r6, #0
 8004f34:	2700      	movs	r7, #0
 8004f36:	e3d2      	b.n	80056de <_svfprintf_r+0xf46>
 8004f38:	1d3a      	adds	r2, r7, #4
 8004f3a:	f015 0110 	ands.w	r1, r5, #16
 8004f3e:	9208      	str	r2, [sp, #32]
 8004f40:	d002      	beq.n	8004f48 <_svfprintf_r+0x7b0>
 8004f42:	683e      	ldr	r6, [r7, #0]
 8004f44:	2700      	movs	r7, #0
 8004f46:	e7dd      	b.n	8004f04 <_svfprintf_r+0x76c>
 8004f48:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8004f4c:	d0f9      	beq.n	8004f42 <_svfprintf_r+0x7aa>
 8004f4e:	883e      	ldrh	r6, [r7, #0]
 8004f50:	2700      	movs	r7, #0
 8004f52:	e7d6      	b.n	8004f02 <_svfprintf_r+0x76a>
 8004f54:	1d3b      	adds	r3, r7, #4
 8004f56:	9308      	str	r3, [sp, #32]
 8004f58:	2330      	movs	r3, #48	; 0x30
 8004f5a:	2278      	movs	r2, #120	; 0x78
 8004f5c:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8004f60:	4b14      	ldr	r3, [pc, #80]	; (8004fb4 <_svfprintf_r+0x81c>)
 8004f62:	683e      	ldr	r6, [r7, #0]
 8004f64:	9315      	str	r3, [sp, #84]	; 0x54
 8004f66:	2700      	movs	r7, #0
 8004f68:	f045 0502 	orr.w	r5, r5, #2
 8004f6c:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 8004f70:	2302      	movs	r3, #2
 8004f72:	9206      	str	r2, [sp, #24]
 8004f74:	e7c6      	b.n	8004f04 <_svfprintf_r+0x76c>
 8004f76:	2600      	movs	r6, #0
 8004f78:	1d3b      	adds	r3, r7, #4
 8004f7a:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8004f7e:	9308      	str	r3, [sp, #32]
 8004f80:	f8d7 8000 	ldr.w	r8, [r7]
 8004f84:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8004f88:	d00a      	beq.n	8004fa0 <_svfprintf_r+0x808>
 8004f8a:	465a      	mov	r2, fp
 8004f8c:	4631      	mov	r1, r6
 8004f8e:	4640      	mov	r0, r8
 8004f90:	f002 fa32 	bl	80073f8 <memchr>
 8004f94:	2800      	cmp	r0, #0
 8004f96:	f000 808d 	beq.w	80050b4 <_svfprintf_r+0x91c>
 8004f9a:	eba0 0b08 	sub.w	fp, r0, r8
 8004f9e:	e5c4      	b.n	8004b2a <_svfprintf_r+0x392>
 8004fa0:	4640      	mov	r0, r8
 8004fa2:	f7fb f8df 	bl	8000164 <strlen>
 8004fa6:	4683      	mov	fp, r0
 8004fa8:	e5bf      	b.n	8004b2a <_svfprintf_r+0x392>
 8004faa:	bf00      	nop
 8004fac:	08009fac 	.word	0x08009fac
 8004fb0:	08009fbc 	.word	0x08009fbc
 8004fb4:	08009f99 	.word	0x08009f99
 8004fb8:	f045 0510 	orr.w	r5, r5, #16
 8004fbc:	06a9      	lsls	r1, r5, #26
 8004fbe:	d509      	bpl.n	8004fd4 <_svfprintf_r+0x83c>
 8004fc0:	3707      	adds	r7, #7
 8004fc2:	f027 0707 	bic.w	r7, r7, #7
 8004fc6:	f107 0308 	add.w	r3, r7, #8
 8004fca:	9308      	str	r3, [sp, #32]
 8004fcc:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e797      	b.n	8004f04 <_svfprintf_r+0x76c>
 8004fd4:	1d3b      	adds	r3, r7, #4
 8004fd6:	f015 0f10 	tst.w	r5, #16
 8004fda:	9308      	str	r3, [sp, #32]
 8004fdc:	d001      	beq.n	8004fe2 <_svfprintf_r+0x84a>
 8004fde:	683e      	ldr	r6, [r7, #0]
 8004fe0:	e002      	b.n	8004fe8 <_svfprintf_r+0x850>
 8004fe2:	066a      	lsls	r2, r5, #25
 8004fe4:	d5fb      	bpl.n	8004fde <_svfprintf_r+0x846>
 8004fe6:	883e      	ldrh	r6, [r7, #0]
 8004fe8:	2700      	movs	r7, #0
 8004fea:	e7f1      	b.n	8004fd0 <_svfprintf_r+0x838>
 8004fec:	b10b      	cbz	r3, 8004ff2 <_svfprintf_r+0x85a>
 8004fee:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8004ff2:	4ba3      	ldr	r3, [pc, #652]	; (8005280 <_svfprintf_r+0xae8>)
 8004ff4:	e4c5      	b.n	8004982 <_svfprintf_r+0x1ea>
 8004ff6:	1d3b      	adds	r3, r7, #4
 8004ff8:	f015 0f10 	tst.w	r5, #16
 8004ffc:	9308      	str	r3, [sp, #32]
 8004ffe:	d001      	beq.n	8005004 <_svfprintf_r+0x86c>
 8005000:	683e      	ldr	r6, [r7, #0]
 8005002:	e002      	b.n	800500a <_svfprintf_r+0x872>
 8005004:	066e      	lsls	r6, r5, #25
 8005006:	d5fb      	bpl.n	8005000 <_svfprintf_r+0x868>
 8005008:	883e      	ldrh	r6, [r7, #0]
 800500a:	2700      	movs	r7, #0
 800500c:	e4c5      	b.n	800499a <_svfprintf_r+0x202>
 800500e:	4643      	mov	r3, r8
 8005010:	e366      	b.n	80056e0 <_svfprintf_r+0xf48>
 8005012:	2f00      	cmp	r7, #0
 8005014:	bf08      	it	eq
 8005016:	2e0a      	cmpeq	r6, #10
 8005018:	d205      	bcs.n	8005026 <_svfprintf_r+0x88e>
 800501a:	3630      	adds	r6, #48	; 0x30
 800501c:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8005020:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8005024:	e377      	b.n	8005716 <_svfprintf_r+0xf7e>
 8005026:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800502a:	4630      	mov	r0, r6
 800502c:	4639      	mov	r1, r7
 800502e:	220a      	movs	r2, #10
 8005030:	2300      	movs	r3, #0
 8005032:	f7fb fd9f 	bl	8000b74 <__aeabi_uldivmod>
 8005036:	3230      	adds	r2, #48	; 0x30
 8005038:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800503c:	2300      	movs	r3, #0
 800503e:	4630      	mov	r0, r6
 8005040:	4639      	mov	r1, r7
 8005042:	220a      	movs	r2, #10
 8005044:	f7fb fd96 	bl	8000b74 <__aeabi_uldivmod>
 8005048:	4606      	mov	r6, r0
 800504a:	460f      	mov	r7, r1
 800504c:	ea56 0307 	orrs.w	r3, r6, r7
 8005050:	d1eb      	bne.n	800502a <_svfprintf_r+0x892>
 8005052:	e360      	b.n	8005716 <_svfprintf_r+0xf7e>
 8005054:	2600      	movs	r6, #0
 8005056:	2700      	movs	r7, #0
 8005058:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800505c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800505e:	f006 030f 	and.w	r3, r6, #15
 8005062:	5cd3      	ldrb	r3, [r2, r3]
 8005064:	093a      	lsrs	r2, r7, #4
 8005066:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800506a:	0933      	lsrs	r3, r6, #4
 800506c:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8005070:	461e      	mov	r6, r3
 8005072:	4617      	mov	r7, r2
 8005074:	ea56 0307 	orrs.w	r3, r6, r7
 8005078:	d1f0      	bne.n	800505c <_svfprintf_r+0x8c4>
 800507a:	e34c      	b.n	8005716 <_svfprintf_r+0xf7e>
 800507c:	b93b      	cbnz	r3, 800508e <_svfprintf_r+0x8f6>
 800507e:	07ea      	lsls	r2, r5, #31
 8005080:	d505      	bpl.n	800508e <_svfprintf_r+0x8f6>
 8005082:	2330      	movs	r3, #48	; 0x30
 8005084:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8005088:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800508c:	e343      	b.n	8005716 <_svfprintf_r+0xf7e>
 800508e:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8005092:	e340      	b.n	8005716 <_svfprintf_r+0xf7e>
 8005094:	b10b      	cbz	r3, 800509a <_svfprintf_r+0x902>
 8005096:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800509a:	9b06      	ldr	r3, [sp, #24]
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 82f7 	beq.w	8005690 <_svfprintf_r+0xef8>
 80050a2:	2600      	movs	r6, #0
 80050a4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80050a8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 80050ac:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 80050b0:	9708      	str	r7, [sp, #32]
 80050b2:	e4e3      	b.n	8004a7c <_svfprintf_r+0x2e4>
 80050b4:	4606      	mov	r6, r0
 80050b6:	e538      	b.n	8004b2a <_svfprintf_r+0x392>
 80050b8:	2310      	movs	r3, #16
 80050ba:	6063      	str	r3, [r4, #4]
 80050bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050be:	3310      	adds	r3, #16
 80050c0:	9323      	str	r3, [sp, #140]	; 0x8c
 80050c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050c4:	3301      	adds	r3, #1
 80050c6:	2b07      	cmp	r3, #7
 80050c8:	9322      	str	r3, [sp, #136]	; 0x88
 80050ca:	dc04      	bgt.n	80050d6 <_svfprintf_r+0x93e>
 80050cc:	3408      	adds	r4, #8
 80050ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80050d0:	3b10      	subs	r3, #16
 80050d2:	9310      	str	r3, [sp, #64]	; 0x40
 80050d4:	e611      	b.n	8004cfa <_svfprintf_r+0x562>
 80050d6:	aa21      	add	r2, sp, #132	; 0x84
 80050d8:	4649      	mov	r1, r9
 80050da:	4650      	mov	r0, sl
 80050dc:	f003 fe86 	bl	8008dec <__ssprint_r>
 80050e0:	2800      	cmp	r0, #0
 80050e2:	f040 82b6 	bne.w	8005652 <_svfprintf_r+0xeba>
 80050e6:	ac2e      	add	r4, sp, #184	; 0xb8
 80050e8:	e7f1      	b.n	80050ce <_svfprintf_r+0x936>
 80050ea:	aa21      	add	r2, sp, #132	; 0x84
 80050ec:	4649      	mov	r1, r9
 80050ee:	4650      	mov	r0, sl
 80050f0:	f003 fe7c 	bl	8008dec <__ssprint_r>
 80050f4:	2800      	cmp	r0, #0
 80050f6:	f040 82ac 	bne.w	8005652 <_svfprintf_r+0xeba>
 80050fa:	ac2e      	add	r4, sp, #184	; 0xb8
 80050fc:	e610      	b.n	8004d20 <_svfprintf_r+0x588>
 80050fe:	aa21      	add	r2, sp, #132	; 0x84
 8005100:	4649      	mov	r1, r9
 8005102:	4650      	mov	r0, sl
 8005104:	f003 fe72 	bl	8008dec <__ssprint_r>
 8005108:	2800      	cmp	r0, #0
 800510a:	f040 82a2 	bne.w	8005652 <_svfprintf_r+0xeba>
 800510e:	ac2e      	add	r4, sp, #184	; 0xb8
 8005110:	e618      	b.n	8004d44 <_svfprintf_r+0x5ac>
 8005112:	aa21      	add	r2, sp, #132	; 0x84
 8005114:	4649      	mov	r1, r9
 8005116:	4650      	mov	r0, sl
 8005118:	f003 fe68 	bl	8008dec <__ssprint_r>
 800511c:	2800      	cmp	r0, #0
 800511e:	f040 8298 	bne.w	8005652 <_svfprintf_r+0xeba>
 8005122:	ac2e      	add	r4, sp, #184	; 0xb8
 8005124:	e61e      	b.n	8004d64 <_svfprintf_r+0x5cc>
 8005126:	2310      	movs	r3, #16
 8005128:	6063      	str	r3, [r4, #4]
 800512a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800512c:	3310      	adds	r3, #16
 800512e:	9323      	str	r3, [sp, #140]	; 0x8c
 8005130:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005132:	3301      	adds	r3, #1
 8005134:	2b07      	cmp	r3, #7
 8005136:	9322      	str	r3, [sp, #136]	; 0x88
 8005138:	dc04      	bgt.n	8005144 <_svfprintf_r+0x9ac>
 800513a:	3408      	adds	r4, #8
 800513c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800513e:	3b10      	subs	r3, #16
 8005140:	9310      	str	r3, [sp, #64]	; 0x40
 8005142:	e618      	b.n	8004d76 <_svfprintf_r+0x5de>
 8005144:	aa21      	add	r2, sp, #132	; 0x84
 8005146:	4649      	mov	r1, r9
 8005148:	4650      	mov	r0, sl
 800514a:	f003 fe4f 	bl	8008dec <__ssprint_r>
 800514e:	2800      	cmp	r0, #0
 8005150:	f040 827f 	bne.w	8005652 <_svfprintf_r+0xeba>
 8005154:	ac2e      	add	r4, sp, #184	; 0xb8
 8005156:	e7f1      	b.n	800513c <_svfprintf_r+0x9a4>
 8005158:	aa21      	add	r2, sp, #132	; 0x84
 800515a:	4649      	mov	r1, r9
 800515c:	4650      	mov	r0, sl
 800515e:	f003 fe45 	bl	8008dec <__ssprint_r>
 8005162:	2800      	cmp	r0, #0
 8005164:	f040 8275 	bne.w	8005652 <_svfprintf_r+0xeba>
 8005168:	ac2e      	add	r4, sp, #184	; 0xb8
 800516a:	e617      	b.n	8004d9c <_svfprintf_r+0x604>
 800516c:	2310      	movs	r3, #16
 800516e:	6063      	str	r3, [r4, #4]
 8005170:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005172:	3310      	adds	r3, #16
 8005174:	9323      	str	r3, [sp, #140]	; 0x8c
 8005176:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005178:	3301      	adds	r3, #1
 800517a:	2b07      	cmp	r3, #7
 800517c:	9322      	str	r3, [sp, #136]	; 0x88
 800517e:	dc02      	bgt.n	8005186 <_svfprintf_r+0x9ee>
 8005180:	3408      	adds	r4, #8
 8005182:	3e10      	subs	r6, #16
 8005184:	e60e      	b.n	8004da4 <_svfprintf_r+0x60c>
 8005186:	aa21      	add	r2, sp, #132	; 0x84
 8005188:	4649      	mov	r1, r9
 800518a:	4650      	mov	r0, sl
 800518c:	f003 fe2e 	bl	8008dec <__ssprint_r>
 8005190:	2800      	cmp	r0, #0
 8005192:	f040 825e 	bne.w	8005652 <_svfprintf_r+0xeba>
 8005196:	ac2e      	add	r4, sp, #184	; 0xb8
 8005198:	e7f3      	b.n	8005182 <_svfprintf_r+0x9ea>
 800519a:	aa21      	add	r2, sp, #132	; 0x84
 800519c:	4649      	mov	r1, r9
 800519e:	4650      	mov	r0, sl
 80051a0:	f003 fe24 	bl	8008dec <__ssprint_r>
 80051a4:	2800      	cmp	r0, #0
 80051a6:	f040 8254 	bne.w	8005652 <_svfprintf_r+0xeba>
 80051aa:	ac2e      	add	r4, sp, #184	; 0xb8
 80051ac:	e60a      	b.n	8004dc4 <_svfprintf_r+0x62c>
 80051ae:	9b06      	ldr	r3, [sp, #24]
 80051b0:	2b65      	cmp	r3, #101	; 0x65
 80051b2:	f340 81a9 	ble.w	8005508 <_svfprintf_r+0xd70>
 80051b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80051b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80051ba:	980d      	ldr	r0, [sp, #52]	; 0x34
 80051bc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80051be:	f7fb fbf9 	bl	80009b4 <__aeabi_dcmpeq>
 80051c2:	2800      	cmp	r0, #0
 80051c4:	d062      	beq.n	800528c <_svfprintf_r+0xaf4>
 80051c6:	4b2f      	ldr	r3, [pc, #188]	; (8005284 <_svfprintf_r+0xaec>)
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	2301      	movs	r3, #1
 80051cc:	6063      	str	r3, [r4, #4]
 80051ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051d0:	3301      	adds	r3, #1
 80051d2:	9323      	str	r3, [sp, #140]	; 0x8c
 80051d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051d6:	3301      	adds	r3, #1
 80051d8:	2b07      	cmp	r3, #7
 80051da:	9322      	str	r3, [sp, #136]	; 0x88
 80051dc:	dc25      	bgt.n	800522a <_svfprintf_r+0xa92>
 80051de:	3408      	adds	r4, #8
 80051e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80051e2:	9a07      	ldr	r2, [sp, #28]
 80051e4:	4293      	cmp	r3, r2
 80051e6:	db02      	blt.n	80051ee <_svfprintf_r+0xa56>
 80051e8:	07ee      	lsls	r6, r5, #31
 80051ea:	f57f ae02 	bpl.w	8004df2 <_svfprintf_r+0x65a>
 80051ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80051f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051f2:	6023      	str	r3, [r4, #0]
 80051f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051f6:	6063      	str	r3, [r4, #4]
 80051f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051fa:	4413      	add	r3, r2
 80051fc:	9323      	str	r3, [sp, #140]	; 0x8c
 80051fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005200:	3301      	adds	r3, #1
 8005202:	2b07      	cmp	r3, #7
 8005204:	9322      	str	r3, [sp, #136]	; 0x88
 8005206:	dc1a      	bgt.n	800523e <_svfprintf_r+0xaa6>
 8005208:	3408      	adds	r4, #8
 800520a:	9b07      	ldr	r3, [sp, #28]
 800520c:	1e5e      	subs	r6, r3, #1
 800520e:	2e00      	cmp	r6, #0
 8005210:	f77f adef 	ble.w	8004df2 <_svfprintf_r+0x65a>
 8005214:	f04f 0810 	mov.w	r8, #16
 8005218:	4f1b      	ldr	r7, [pc, #108]	; (8005288 <_svfprintf_r+0xaf0>)
 800521a:	2e10      	cmp	r6, #16
 800521c:	6027      	str	r7, [r4, #0]
 800521e:	dc18      	bgt.n	8005252 <_svfprintf_r+0xaba>
 8005220:	6066      	str	r6, [r4, #4]
 8005222:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005224:	441e      	add	r6, r3
 8005226:	9623      	str	r6, [sp, #140]	; 0x8c
 8005228:	e5d4      	b.n	8004dd4 <_svfprintf_r+0x63c>
 800522a:	aa21      	add	r2, sp, #132	; 0x84
 800522c:	4649      	mov	r1, r9
 800522e:	4650      	mov	r0, sl
 8005230:	f003 fddc 	bl	8008dec <__ssprint_r>
 8005234:	2800      	cmp	r0, #0
 8005236:	f040 820c 	bne.w	8005652 <_svfprintf_r+0xeba>
 800523a:	ac2e      	add	r4, sp, #184	; 0xb8
 800523c:	e7d0      	b.n	80051e0 <_svfprintf_r+0xa48>
 800523e:	aa21      	add	r2, sp, #132	; 0x84
 8005240:	4649      	mov	r1, r9
 8005242:	4650      	mov	r0, sl
 8005244:	f003 fdd2 	bl	8008dec <__ssprint_r>
 8005248:	2800      	cmp	r0, #0
 800524a:	f040 8202 	bne.w	8005652 <_svfprintf_r+0xeba>
 800524e:	ac2e      	add	r4, sp, #184	; 0xb8
 8005250:	e7db      	b.n	800520a <_svfprintf_r+0xa72>
 8005252:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005254:	f8c4 8004 	str.w	r8, [r4, #4]
 8005258:	3310      	adds	r3, #16
 800525a:	9323      	str	r3, [sp, #140]	; 0x8c
 800525c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800525e:	3301      	adds	r3, #1
 8005260:	2b07      	cmp	r3, #7
 8005262:	9322      	str	r3, [sp, #136]	; 0x88
 8005264:	dc02      	bgt.n	800526c <_svfprintf_r+0xad4>
 8005266:	3408      	adds	r4, #8
 8005268:	3e10      	subs	r6, #16
 800526a:	e7d6      	b.n	800521a <_svfprintf_r+0xa82>
 800526c:	aa21      	add	r2, sp, #132	; 0x84
 800526e:	4649      	mov	r1, r9
 8005270:	4650      	mov	r0, sl
 8005272:	f003 fdbb 	bl	8008dec <__ssprint_r>
 8005276:	2800      	cmp	r0, #0
 8005278:	f040 81eb 	bne.w	8005652 <_svfprintf_r+0xeba>
 800527c:	ac2e      	add	r4, sp, #184	; 0xb8
 800527e:	e7f3      	b.n	8005268 <_svfprintf_r+0xad0>
 8005280:	08009f99 	.word	0x08009f99
 8005284:	08009faa 	.word	0x08009faa
 8005288:	08009fbc 	.word	0x08009fbc
 800528c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800528e:	2b00      	cmp	r3, #0
 8005290:	dc7a      	bgt.n	8005388 <_svfprintf_r+0xbf0>
 8005292:	4b9b      	ldr	r3, [pc, #620]	; (8005500 <_svfprintf_r+0xd68>)
 8005294:	6023      	str	r3, [r4, #0]
 8005296:	2301      	movs	r3, #1
 8005298:	6063      	str	r3, [r4, #4]
 800529a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800529c:	3301      	adds	r3, #1
 800529e:	9323      	str	r3, [sp, #140]	; 0x8c
 80052a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052a2:	3301      	adds	r3, #1
 80052a4:	2b07      	cmp	r3, #7
 80052a6:	9322      	str	r3, [sp, #136]	; 0x88
 80052a8:	dc44      	bgt.n	8005334 <_svfprintf_r+0xb9c>
 80052aa:	3408      	adds	r4, #8
 80052ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80052ae:	b923      	cbnz	r3, 80052ba <_svfprintf_r+0xb22>
 80052b0:	9b07      	ldr	r3, [sp, #28]
 80052b2:	b913      	cbnz	r3, 80052ba <_svfprintf_r+0xb22>
 80052b4:	07e8      	lsls	r0, r5, #31
 80052b6:	f57f ad9c 	bpl.w	8004df2 <_svfprintf_r+0x65a>
 80052ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80052bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052be:	6023      	str	r3, [r4, #0]
 80052c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052c2:	6063      	str	r3, [r4, #4]
 80052c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80052c6:	4413      	add	r3, r2
 80052c8:	9323      	str	r3, [sp, #140]	; 0x8c
 80052ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052cc:	3301      	adds	r3, #1
 80052ce:	2b07      	cmp	r3, #7
 80052d0:	9322      	str	r3, [sp, #136]	; 0x88
 80052d2:	dc39      	bgt.n	8005348 <_svfprintf_r+0xbb0>
 80052d4:	f104 0308 	add.w	r3, r4, #8
 80052d8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80052da:	2e00      	cmp	r6, #0
 80052dc:	da19      	bge.n	8005312 <_svfprintf_r+0xb7a>
 80052de:	2410      	movs	r4, #16
 80052e0:	4f88      	ldr	r7, [pc, #544]	; (8005504 <_svfprintf_r+0xd6c>)
 80052e2:	4276      	negs	r6, r6
 80052e4:	2e10      	cmp	r6, #16
 80052e6:	601f      	str	r7, [r3, #0]
 80052e8:	dc38      	bgt.n	800535c <_svfprintf_r+0xbc4>
 80052ea:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80052ec:	605e      	str	r6, [r3, #4]
 80052ee:	4416      	add	r6, r2
 80052f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80052f2:	9623      	str	r6, [sp, #140]	; 0x8c
 80052f4:	3201      	adds	r2, #1
 80052f6:	2a07      	cmp	r2, #7
 80052f8:	f103 0308 	add.w	r3, r3, #8
 80052fc:	9222      	str	r2, [sp, #136]	; 0x88
 80052fe:	dd08      	ble.n	8005312 <_svfprintf_r+0xb7a>
 8005300:	aa21      	add	r2, sp, #132	; 0x84
 8005302:	4649      	mov	r1, r9
 8005304:	4650      	mov	r0, sl
 8005306:	f003 fd71 	bl	8008dec <__ssprint_r>
 800530a:	2800      	cmp	r0, #0
 800530c:	f040 81a1 	bne.w	8005652 <_svfprintf_r+0xeba>
 8005310:	ab2e      	add	r3, sp, #184	; 0xb8
 8005312:	9a07      	ldr	r2, [sp, #28]
 8005314:	9907      	ldr	r1, [sp, #28]
 8005316:	605a      	str	r2, [r3, #4]
 8005318:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800531a:	f8c3 8000 	str.w	r8, [r3]
 800531e:	440a      	add	r2, r1
 8005320:	9223      	str	r2, [sp, #140]	; 0x8c
 8005322:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005324:	3201      	adds	r2, #1
 8005326:	2a07      	cmp	r2, #7
 8005328:	9222      	str	r2, [sp, #136]	; 0x88
 800532a:	f73f ad59 	bgt.w	8004de0 <_svfprintf_r+0x648>
 800532e:	f103 0408 	add.w	r4, r3, #8
 8005332:	e55e      	b.n	8004df2 <_svfprintf_r+0x65a>
 8005334:	aa21      	add	r2, sp, #132	; 0x84
 8005336:	4649      	mov	r1, r9
 8005338:	4650      	mov	r0, sl
 800533a:	f003 fd57 	bl	8008dec <__ssprint_r>
 800533e:	2800      	cmp	r0, #0
 8005340:	f040 8187 	bne.w	8005652 <_svfprintf_r+0xeba>
 8005344:	ac2e      	add	r4, sp, #184	; 0xb8
 8005346:	e7b1      	b.n	80052ac <_svfprintf_r+0xb14>
 8005348:	aa21      	add	r2, sp, #132	; 0x84
 800534a:	4649      	mov	r1, r9
 800534c:	4650      	mov	r0, sl
 800534e:	f003 fd4d 	bl	8008dec <__ssprint_r>
 8005352:	2800      	cmp	r0, #0
 8005354:	f040 817d 	bne.w	8005652 <_svfprintf_r+0xeba>
 8005358:	ab2e      	add	r3, sp, #184	; 0xb8
 800535a:	e7bd      	b.n	80052d8 <_svfprintf_r+0xb40>
 800535c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800535e:	605c      	str	r4, [r3, #4]
 8005360:	3210      	adds	r2, #16
 8005362:	9223      	str	r2, [sp, #140]	; 0x8c
 8005364:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005366:	3201      	adds	r2, #1
 8005368:	2a07      	cmp	r2, #7
 800536a:	9222      	str	r2, [sp, #136]	; 0x88
 800536c:	dc02      	bgt.n	8005374 <_svfprintf_r+0xbdc>
 800536e:	3308      	adds	r3, #8
 8005370:	3e10      	subs	r6, #16
 8005372:	e7b7      	b.n	80052e4 <_svfprintf_r+0xb4c>
 8005374:	aa21      	add	r2, sp, #132	; 0x84
 8005376:	4649      	mov	r1, r9
 8005378:	4650      	mov	r0, sl
 800537a:	f003 fd37 	bl	8008dec <__ssprint_r>
 800537e:	2800      	cmp	r0, #0
 8005380:	f040 8167 	bne.w	8005652 <_svfprintf_r+0xeba>
 8005384:	ab2e      	add	r3, sp, #184	; 0xb8
 8005386:	e7f3      	b.n	8005370 <_svfprintf_r+0xbd8>
 8005388:	9b07      	ldr	r3, [sp, #28]
 800538a:	42bb      	cmp	r3, r7
 800538c:	bfa8      	it	ge
 800538e:	463b      	movge	r3, r7
 8005390:	2b00      	cmp	r3, #0
 8005392:	461e      	mov	r6, r3
 8005394:	dd0b      	ble.n	80053ae <_svfprintf_r+0xc16>
 8005396:	6063      	str	r3, [r4, #4]
 8005398:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800539a:	f8c4 8000 	str.w	r8, [r4]
 800539e:	4433      	add	r3, r6
 80053a0:	9323      	str	r3, [sp, #140]	; 0x8c
 80053a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053a4:	3301      	adds	r3, #1
 80053a6:	2b07      	cmp	r3, #7
 80053a8:	9322      	str	r3, [sp, #136]	; 0x88
 80053aa:	dc5f      	bgt.n	800546c <_svfprintf_r+0xcd4>
 80053ac:	3408      	adds	r4, #8
 80053ae:	2e00      	cmp	r6, #0
 80053b0:	bfb4      	ite	lt
 80053b2:	463e      	movlt	r6, r7
 80053b4:	1bbe      	subge	r6, r7, r6
 80053b6:	2e00      	cmp	r6, #0
 80053b8:	dd0f      	ble.n	80053da <_svfprintf_r+0xc42>
 80053ba:	f8df b148 	ldr.w	fp, [pc, #328]	; 8005504 <_svfprintf_r+0xd6c>
 80053be:	2e10      	cmp	r6, #16
 80053c0:	f8c4 b000 	str.w	fp, [r4]
 80053c4:	dc5c      	bgt.n	8005480 <_svfprintf_r+0xce8>
 80053c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053c8:	6066      	str	r6, [r4, #4]
 80053ca:	441e      	add	r6, r3
 80053cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053ce:	9623      	str	r6, [sp, #140]	; 0x8c
 80053d0:	3301      	adds	r3, #1
 80053d2:	2b07      	cmp	r3, #7
 80053d4:	9322      	str	r3, [sp, #136]	; 0x88
 80053d6:	dc6a      	bgt.n	80054ae <_svfprintf_r+0xd16>
 80053d8:	3408      	adds	r4, #8
 80053da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053dc:	9a07      	ldr	r2, [sp, #28]
 80053de:	4293      	cmp	r3, r2
 80053e0:	db01      	blt.n	80053e6 <_svfprintf_r+0xc4e>
 80053e2:	07e9      	lsls	r1, r5, #31
 80053e4:	d50d      	bpl.n	8005402 <_svfprintf_r+0xc6a>
 80053e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053ea:	6023      	str	r3, [r4, #0]
 80053ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053ee:	6063      	str	r3, [r4, #4]
 80053f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053f2:	4413      	add	r3, r2
 80053f4:	9323      	str	r3, [sp, #140]	; 0x8c
 80053f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053f8:	3301      	adds	r3, #1
 80053fa:	2b07      	cmp	r3, #7
 80053fc:	9322      	str	r3, [sp, #136]	; 0x88
 80053fe:	dc60      	bgt.n	80054c2 <_svfprintf_r+0xd2a>
 8005400:	3408      	adds	r4, #8
 8005402:	9b07      	ldr	r3, [sp, #28]
 8005404:	9a07      	ldr	r2, [sp, #28]
 8005406:	1bde      	subs	r6, r3, r7
 8005408:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	429e      	cmp	r6, r3
 800540e:	bfa8      	it	ge
 8005410:	461e      	movge	r6, r3
 8005412:	2e00      	cmp	r6, #0
 8005414:	dd0b      	ble.n	800542e <_svfprintf_r+0xc96>
 8005416:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005418:	4447      	add	r7, r8
 800541a:	4433      	add	r3, r6
 800541c:	9323      	str	r3, [sp, #140]	; 0x8c
 800541e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005420:	6027      	str	r7, [r4, #0]
 8005422:	3301      	adds	r3, #1
 8005424:	2b07      	cmp	r3, #7
 8005426:	6066      	str	r6, [r4, #4]
 8005428:	9322      	str	r3, [sp, #136]	; 0x88
 800542a:	dc54      	bgt.n	80054d6 <_svfprintf_r+0xd3e>
 800542c:	3408      	adds	r4, #8
 800542e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005430:	9a07      	ldr	r2, [sp, #28]
 8005432:	2e00      	cmp	r6, #0
 8005434:	eba2 0303 	sub.w	r3, r2, r3
 8005438:	bfb4      	ite	lt
 800543a:	461e      	movlt	r6, r3
 800543c:	1b9e      	subge	r6, r3, r6
 800543e:	2e00      	cmp	r6, #0
 8005440:	f77f acd7 	ble.w	8004df2 <_svfprintf_r+0x65a>
 8005444:	f04f 0810 	mov.w	r8, #16
 8005448:	4f2e      	ldr	r7, [pc, #184]	; (8005504 <_svfprintf_r+0xd6c>)
 800544a:	2e10      	cmp	r6, #16
 800544c:	6027      	str	r7, [r4, #0]
 800544e:	f77f aee7 	ble.w	8005220 <_svfprintf_r+0xa88>
 8005452:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005454:	f8c4 8004 	str.w	r8, [r4, #4]
 8005458:	3310      	adds	r3, #16
 800545a:	9323      	str	r3, [sp, #140]	; 0x8c
 800545c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800545e:	3301      	adds	r3, #1
 8005460:	2b07      	cmp	r3, #7
 8005462:	9322      	str	r3, [sp, #136]	; 0x88
 8005464:	dc41      	bgt.n	80054ea <_svfprintf_r+0xd52>
 8005466:	3408      	adds	r4, #8
 8005468:	3e10      	subs	r6, #16
 800546a:	e7ee      	b.n	800544a <_svfprintf_r+0xcb2>
 800546c:	aa21      	add	r2, sp, #132	; 0x84
 800546e:	4649      	mov	r1, r9
 8005470:	4650      	mov	r0, sl
 8005472:	f003 fcbb 	bl	8008dec <__ssprint_r>
 8005476:	2800      	cmp	r0, #0
 8005478:	f040 80eb 	bne.w	8005652 <_svfprintf_r+0xeba>
 800547c:	ac2e      	add	r4, sp, #184	; 0xb8
 800547e:	e796      	b.n	80053ae <_svfprintf_r+0xc16>
 8005480:	2310      	movs	r3, #16
 8005482:	6063      	str	r3, [r4, #4]
 8005484:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005486:	3310      	adds	r3, #16
 8005488:	9323      	str	r3, [sp, #140]	; 0x8c
 800548a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800548c:	3301      	adds	r3, #1
 800548e:	2b07      	cmp	r3, #7
 8005490:	9322      	str	r3, [sp, #136]	; 0x88
 8005492:	dc02      	bgt.n	800549a <_svfprintf_r+0xd02>
 8005494:	3408      	adds	r4, #8
 8005496:	3e10      	subs	r6, #16
 8005498:	e791      	b.n	80053be <_svfprintf_r+0xc26>
 800549a:	aa21      	add	r2, sp, #132	; 0x84
 800549c:	4649      	mov	r1, r9
 800549e:	4650      	mov	r0, sl
 80054a0:	f003 fca4 	bl	8008dec <__ssprint_r>
 80054a4:	2800      	cmp	r0, #0
 80054a6:	f040 80d4 	bne.w	8005652 <_svfprintf_r+0xeba>
 80054aa:	ac2e      	add	r4, sp, #184	; 0xb8
 80054ac:	e7f3      	b.n	8005496 <_svfprintf_r+0xcfe>
 80054ae:	aa21      	add	r2, sp, #132	; 0x84
 80054b0:	4649      	mov	r1, r9
 80054b2:	4650      	mov	r0, sl
 80054b4:	f003 fc9a 	bl	8008dec <__ssprint_r>
 80054b8:	2800      	cmp	r0, #0
 80054ba:	f040 80ca 	bne.w	8005652 <_svfprintf_r+0xeba>
 80054be:	ac2e      	add	r4, sp, #184	; 0xb8
 80054c0:	e78b      	b.n	80053da <_svfprintf_r+0xc42>
 80054c2:	aa21      	add	r2, sp, #132	; 0x84
 80054c4:	4649      	mov	r1, r9
 80054c6:	4650      	mov	r0, sl
 80054c8:	f003 fc90 	bl	8008dec <__ssprint_r>
 80054cc:	2800      	cmp	r0, #0
 80054ce:	f040 80c0 	bne.w	8005652 <_svfprintf_r+0xeba>
 80054d2:	ac2e      	add	r4, sp, #184	; 0xb8
 80054d4:	e795      	b.n	8005402 <_svfprintf_r+0xc6a>
 80054d6:	aa21      	add	r2, sp, #132	; 0x84
 80054d8:	4649      	mov	r1, r9
 80054da:	4650      	mov	r0, sl
 80054dc:	f003 fc86 	bl	8008dec <__ssprint_r>
 80054e0:	2800      	cmp	r0, #0
 80054e2:	f040 80b6 	bne.w	8005652 <_svfprintf_r+0xeba>
 80054e6:	ac2e      	add	r4, sp, #184	; 0xb8
 80054e8:	e7a1      	b.n	800542e <_svfprintf_r+0xc96>
 80054ea:	aa21      	add	r2, sp, #132	; 0x84
 80054ec:	4649      	mov	r1, r9
 80054ee:	4650      	mov	r0, sl
 80054f0:	f003 fc7c 	bl	8008dec <__ssprint_r>
 80054f4:	2800      	cmp	r0, #0
 80054f6:	f040 80ac 	bne.w	8005652 <_svfprintf_r+0xeba>
 80054fa:	ac2e      	add	r4, sp, #184	; 0xb8
 80054fc:	e7b4      	b.n	8005468 <_svfprintf_r+0xcd0>
 80054fe:	bf00      	nop
 8005500:	08009faa 	.word	0x08009faa
 8005504:	08009fbc 	.word	0x08009fbc
 8005508:	9b07      	ldr	r3, [sp, #28]
 800550a:	2b01      	cmp	r3, #1
 800550c:	dc01      	bgt.n	8005512 <_svfprintf_r+0xd7a>
 800550e:	07ea      	lsls	r2, r5, #31
 8005510:	d576      	bpl.n	8005600 <_svfprintf_r+0xe68>
 8005512:	2301      	movs	r3, #1
 8005514:	6063      	str	r3, [r4, #4]
 8005516:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005518:	f8c4 8000 	str.w	r8, [r4]
 800551c:	3301      	adds	r3, #1
 800551e:	9323      	str	r3, [sp, #140]	; 0x8c
 8005520:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005522:	3301      	adds	r3, #1
 8005524:	2b07      	cmp	r3, #7
 8005526:	9322      	str	r3, [sp, #136]	; 0x88
 8005528:	dc36      	bgt.n	8005598 <_svfprintf_r+0xe00>
 800552a:	3408      	adds	r4, #8
 800552c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800552e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005530:	6023      	str	r3, [r4, #0]
 8005532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005534:	6063      	str	r3, [r4, #4]
 8005536:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005538:	4413      	add	r3, r2
 800553a:	9323      	str	r3, [sp, #140]	; 0x8c
 800553c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800553e:	3301      	adds	r3, #1
 8005540:	2b07      	cmp	r3, #7
 8005542:	9322      	str	r3, [sp, #136]	; 0x88
 8005544:	dc31      	bgt.n	80055aa <_svfprintf_r+0xe12>
 8005546:	3408      	adds	r4, #8
 8005548:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800554a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800554c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800554e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005550:	f7fb fa30 	bl	80009b4 <__aeabi_dcmpeq>
 8005554:	9b07      	ldr	r3, [sp, #28]
 8005556:	1e5e      	subs	r6, r3, #1
 8005558:	2800      	cmp	r0, #0
 800555a:	d12f      	bne.n	80055bc <_svfprintf_r+0xe24>
 800555c:	f108 0301 	add.w	r3, r8, #1
 8005560:	e884 0048 	stmia.w	r4, {r3, r6}
 8005564:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005566:	9a07      	ldr	r2, [sp, #28]
 8005568:	3b01      	subs	r3, #1
 800556a:	4413      	add	r3, r2
 800556c:	9323      	str	r3, [sp, #140]	; 0x8c
 800556e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005570:	3301      	adds	r3, #1
 8005572:	2b07      	cmp	r3, #7
 8005574:	9322      	str	r3, [sp, #136]	; 0x88
 8005576:	dd4a      	ble.n	800560e <_svfprintf_r+0xe76>
 8005578:	aa21      	add	r2, sp, #132	; 0x84
 800557a:	4649      	mov	r1, r9
 800557c:	4650      	mov	r0, sl
 800557e:	f003 fc35 	bl	8008dec <__ssprint_r>
 8005582:	2800      	cmp	r0, #0
 8005584:	d165      	bne.n	8005652 <_svfprintf_r+0xeba>
 8005586:	ac2e      	add	r4, sp, #184	; 0xb8
 8005588:	ab1d      	add	r3, sp, #116	; 0x74
 800558a:	6023      	str	r3, [r4, #0]
 800558c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800558e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005590:	6063      	str	r3, [r4, #4]
 8005592:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005594:	4413      	add	r3, r2
 8005596:	e41c      	b.n	8004dd2 <_svfprintf_r+0x63a>
 8005598:	aa21      	add	r2, sp, #132	; 0x84
 800559a:	4649      	mov	r1, r9
 800559c:	4650      	mov	r0, sl
 800559e:	f003 fc25 	bl	8008dec <__ssprint_r>
 80055a2:	2800      	cmp	r0, #0
 80055a4:	d155      	bne.n	8005652 <_svfprintf_r+0xeba>
 80055a6:	ac2e      	add	r4, sp, #184	; 0xb8
 80055a8:	e7c0      	b.n	800552c <_svfprintf_r+0xd94>
 80055aa:	aa21      	add	r2, sp, #132	; 0x84
 80055ac:	4649      	mov	r1, r9
 80055ae:	4650      	mov	r0, sl
 80055b0:	f003 fc1c 	bl	8008dec <__ssprint_r>
 80055b4:	2800      	cmp	r0, #0
 80055b6:	d14c      	bne.n	8005652 <_svfprintf_r+0xeba>
 80055b8:	ac2e      	add	r4, sp, #184	; 0xb8
 80055ba:	e7c5      	b.n	8005548 <_svfprintf_r+0xdb0>
 80055bc:	2e00      	cmp	r6, #0
 80055be:	dde3      	ble.n	8005588 <_svfprintf_r+0xdf0>
 80055c0:	f04f 0810 	mov.w	r8, #16
 80055c4:	4f58      	ldr	r7, [pc, #352]	; (8005728 <_svfprintf_r+0xf90>)
 80055c6:	2e10      	cmp	r6, #16
 80055c8:	6027      	str	r7, [r4, #0]
 80055ca:	dc04      	bgt.n	80055d6 <_svfprintf_r+0xe3e>
 80055cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055ce:	6066      	str	r6, [r4, #4]
 80055d0:	441e      	add	r6, r3
 80055d2:	9623      	str	r6, [sp, #140]	; 0x8c
 80055d4:	e7cb      	b.n	800556e <_svfprintf_r+0xdd6>
 80055d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055d8:	f8c4 8004 	str.w	r8, [r4, #4]
 80055dc:	3310      	adds	r3, #16
 80055de:	9323      	str	r3, [sp, #140]	; 0x8c
 80055e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055e2:	3301      	adds	r3, #1
 80055e4:	2b07      	cmp	r3, #7
 80055e6:	9322      	str	r3, [sp, #136]	; 0x88
 80055e8:	dc02      	bgt.n	80055f0 <_svfprintf_r+0xe58>
 80055ea:	3408      	adds	r4, #8
 80055ec:	3e10      	subs	r6, #16
 80055ee:	e7ea      	b.n	80055c6 <_svfprintf_r+0xe2e>
 80055f0:	aa21      	add	r2, sp, #132	; 0x84
 80055f2:	4649      	mov	r1, r9
 80055f4:	4650      	mov	r0, sl
 80055f6:	f003 fbf9 	bl	8008dec <__ssprint_r>
 80055fa:	bb50      	cbnz	r0, 8005652 <_svfprintf_r+0xeba>
 80055fc:	ac2e      	add	r4, sp, #184	; 0xb8
 80055fe:	e7f5      	b.n	80055ec <_svfprintf_r+0xe54>
 8005600:	2301      	movs	r3, #1
 8005602:	6063      	str	r3, [r4, #4]
 8005604:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005606:	f8c4 8000 	str.w	r8, [r4]
 800560a:	3301      	adds	r3, #1
 800560c:	e7ae      	b.n	800556c <_svfprintf_r+0xdd4>
 800560e:	3408      	adds	r4, #8
 8005610:	e7ba      	b.n	8005588 <_svfprintf_r+0xdf0>
 8005612:	3408      	adds	r4, #8
 8005614:	f7ff bbed 	b.w	8004df2 <_svfprintf_r+0x65a>
 8005618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800561a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800561c:	1a9d      	subs	r5, r3, r2
 800561e:	2d00      	cmp	r5, #0
 8005620:	f77f abea 	ble.w	8004df8 <_svfprintf_r+0x660>
 8005624:	2610      	movs	r6, #16
 8005626:	4b41      	ldr	r3, [pc, #260]	; (800572c <_svfprintf_r+0xf94>)
 8005628:	2d10      	cmp	r5, #16
 800562a:	6023      	str	r3, [r4, #0]
 800562c:	dc1b      	bgt.n	8005666 <_svfprintf_r+0xece>
 800562e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005630:	6065      	str	r5, [r4, #4]
 8005632:	441d      	add	r5, r3
 8005634:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005636:	9523      	str	r5, [sp, #140]	; 0x8c
 8005638:	3301      	adds	r3, #1
 800563a:	2b07      	cmp	r3, #7
 800563c:	9322      	str	r3, [sp, #136]	; 0x88
 800563e:	f77f abdb 	ble.w	8004df8 <_svfprintf_r+0x660>
 8005642:	aa21      	add	r2, sp, #132	; 0x84
 8005644:	4649      	mov	r1, r9
 8005646:	4650      	mov	r0, sl
 8005648:	f003 fbd0 	bl	8008dec <__ssprint_r>
 800564c:	2800      	cmp	r0, #0
 800564e:	f43f abd3 	beq.w	8004df8 <_svfprintf_r+0x660>
 8005652:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005656:	f013 0f40 	tst.w	r3, #64	; 0x40
 800565a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800565c:	bf18      	it	ne
 800565e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8005662:	f7ff b8bd 	b.w	80047e0 <_svfprintf_r+0x48>
 8005666:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005668:	6066      	str	r6, [r4, #4]
 800566a:	3310      	adds	r3, #16
 800566c:	9323      	str	r3, [sp, #140]	; 0x8c
 800566e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005670:	3301      	adds	r3, #1
 8005672:	2b07      	cmp	r3, #7
 8005674:	9322      	str	r3, [sp, #136]	; 0x88
 8005676:	dc02      	bgt.n	800567e <_svfprintf_r+0xee6>
 8005678:	3408      	adds	r4, #8
 800567a:	3d10      	subs	r5, #16
 800567c:	e7d3      	b.n	8005626 <_svfprintf_r+0xe8e>
 800567e:	aa21      	add	r2, sp, #132	; 0x84
 8005680:	4649      	mov	r1, r9
 8005682:	4650      	mov	r0, sl
 8005684:	f003 fbb2 	bl	8008dec <__ssprint_r>
 8005688:	2800      	cmp	r0, #0
 800568a:	d1e2      	bne.n	8005652 <_svfprintf_r+0xeba>
 800568c:	ac2e      	add	r4, sp, #184	; 0xb8
 800568e:	e7f4      	b.n	800567a <_svfprintf_r+0xee2>
 8005690:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0dd      	beq.n	8005652 <_svfprintf_r+0xeba>
 8005696:	aa21      	add	r2, sp, #132	; 0x84
 8005698:	4649      	mov	r1, r9
 800569a:	4650      	mov	r0, sl
 800569c:	f003 fba6 	bl	8008dec <__ssprint_r>
 80056a0:	e7d7      	b.n	8005652 <_svfprintf_r+0xeba>
 80056a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80056a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056a6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80056a8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80056aa:	f7fb f9b5 	bl	8000a18 <__aeabi_dcmpun>
 80056ae:	2800      	cmp	r0, #0
 80056b0:	f43f aa3d 	beq.w	8004b2e <_svfprintf_r+0x396>
 80056b4:	4b1e      	ldr	r3, [pc, #120]	; (8005730 <_svfprintf_r+0xf98>)
 80056b6:	4a1f      	ldr	r2, [pc, #124]	; (8005734 <_svfprintf_r+0xf9c>)
 80056b8:	f7ff ba2d 	b.w	8004b16 <_svfprintf_r+0x37e>
 80056bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80056be:	eba3 0308 	sub.w	r3, r3, r8
 80056c2:	9307      	str	r3, [sp, #28]
 80056c4:	f7ff baaf 	b.w	8004c26 <_svfprintf_r+0x48e>
 80056c8:	ea56 0207 	orrs.w	r2, r6, r7
 80056cc:	950f      	str	r5, [sp, #60]	; 0x3c
 80056ce:	f43f ac2b 	beq.w	8004f28 <_svfprintf_r+0x790>
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	f43f ac9d 	beq.w	8005012 <_svfprintf_r+0x87a>
 80056d8:	2b02      	cmp	r3, #2
 80056da:	f43f acbd 	beq.w	8005058 <_svfprintf_r+0x8c0>
 80056de:	ab2e      	add	r3, sp, #184	; 0xb8
 80056e0:	08f1      	lsrs	r1, r6, #3
 80056e2:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 80056e6:	08f8      	lsrs	r0, r7, #3
 80056e8:	f006 0207 	and.w	r2, r6, #7
 80056ec:	4607      	mov	r7, r0
 80056ee:	460e      	mov	r6, r1
 80056f0:	3230      	adds	r2, #48	; 0x30
 80056f2:	ea56 0107 	orrs.w	r1, r6, r7
 80056f6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80056fa:	f803 2c01 	strb.w	r2, [r3, #-1]
 80056fe:	f47f ac86 	bne.w	800500e <_svfprintf_r+0x876>
 8005702:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005704:	07c9      	lsls	r1, r1, #31
 8005706:	d506      	bpl.n	8005716 <_svfprintf_r+0xf7e>
 8005708:	2a30      	cmp	r2, #48	; 0x30
 800570a:	d004      	beq.n	8005716 <_svfprintf_r+0xf7e>
 800570c:	2230      	movs	r2, #48	; 0x30
 800570e:	f808 2c01 	strb.w	r2, [r8, #-1]
 8005712:	f1a3 0802 	sub.w	r8, r3, #2
 8005716:	ab2e      	add	r3, sp, #184	; 0xb8
 8005718:	465e      	mov	r6, fp
 800571a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800571c:	eba3 0b08 	sub.w	fp, r3, r8
 8005720:	2700      	movs	r7, #0
 8005722:	f7ff bace 	b.w	8004cc2 <_svfprintf_r+0x52a>
 8005726:	bf00      	nop
 8005728:	08009fbc 	.word	0x08009fbc
 800572c:	08009fac 	.word	0x08009fac
 8005730:	08009f80 	.word	0x08009f80
 8005734:	08009f84 	.word	0x08009f84

08005738 <__ssvfscanf_r>:
 8005738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800573c:	461f      	mov	r7, r3
 800573e:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8005742:	460d      	mov	r5, r1
 8005744:	0499      	lsls	r1, r3, #18
 8005746:	f5ad 7d2b 	sub.w	sp, sp, #684	; 0x2ac
 800574a:	4680      	mov	r8, r0
 800574c:	d406      	bmi.n	800575c <__ssvfscanf_r+0x24>
 800574e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005752:	81ab      	strh	r3, [r5, #12]
 8005754:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005756:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800575a:	666b      	str	r3, [r5, #100]	; 0x64
 800575c:	2300      	movs	r3, #0
 800575e:	469b      	mov	fp, r3
 8005760:	9206      	str	r2, [sp, #24]
 8005762:	9305      	str	r3, [sp, #20]
 8005764:	9303      	str	r3, [sp, #12]
 8005766:	9304      	str	r3, [sp, #16]
 8005768:	9a06      	ldr	r2, [sp, #24]
 800576a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800576e:	9206      	str	r2, [sp, #24]
 8005770:	930f      	str	r3, [sp, #60]	; 0x3c
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 80c8 	beq.w	8005908 <__ssvfscanf_r+0x1d0>
 8005778:	f001 fbce 	bl	8006f18 <__locale_ctype_ptr>
 800577c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800577e:	4418      	add	r0, r3
 8005780:	f890 9001 	ldrb.w	r9, [r0, #1]
 8005784:	f019 0908 	ands.w	r9, r9, #8
 8005788:	d019      	beq.n	80057be <__ssvfscanf_r+0x86>
 800578a:	686b      	ldr	r3, [r5, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	dd0f      	ble.n	80057b0 <__ssvfscanf_r+0x78>
 8005790:	f001 fbc2 	bl	8006f18 <__locale_ctype_ptr>
 8005794:	682b      	ldr	r3, [r5, #0]
 8005796:	781a      	ldrb	r2, [r3, #0]
 8005798:	4410      	add	r0, r2
 800579a:	7842      	ldrb	r2, [r0, #1]
 800579c:	0712      	lsls	r2, r2, #28
 800579e:	d5e3      	bpl.n	8005768 <__ssvfscanf_r+0x30>
 80057a0:	686a      	ldr	r2, [r5, #4]
 80057a2:	3301      	adds	r3, #1
 80057a4:	3a01      	subs	r2, #1
 80057a6:	f10b 0b01 	add.w	fp, fp, #1
 80057aa:	606a      	str	r2, [r5, #4]
 80057ac:	602b      	str	r3, [r5, #0]
 80057ae:	e7ec      	b.n	800578a <__ssvfscanf_r+0x52>
 80057b0:	4629      	mov	r1, r5
 80057b2:	4640      	mov	r0, r8
 80057b4:	f003 fbd1 	bl	8008f5a <__ssrefill_r>
 80057b8:	2800      	cmp	r0, #0
 80057ba:	d0e9      	beq.n	8005790 <__ssvfscanf_r+0x58>
 80057bc:	e7d4      	b.n	8005768 <__ssvfscanf_r+0x30>
 80057be:	2b25      	cmp	r3, #37	; 0x25
 80057c0:	f040 8098 	bne.w	80058f4 <__ssvfscanf_r+0x1bc>
 80057c4:	464c      	mov	r4, r9
 80057c6:	464e      	mov	r6, r9
 80057c8:	220a      	movs	r2, #10
 80057ca:	9b06      	ldr	r3, [sp, #24]
 80057cc:	9906      	ldr	r1, [sp, #24]
 80057ce:	f893 a000 	ldrb.w	sl, [r3]
 80057d2:	3101      	adds	r1, #1
 80057d4:	f1ba 0f63 	cmp.w	sl, #99	; 0x63
 80057d8:	9106      	str	r1, [sp, #24]
 80057da:	f000 80db 	beq.w	8005994 <__ssvfscanf_r+0x25c>
 80057de:	d856      	bhi.n	800588e <__ssvfscanf_r+0x156>
 80057e0:	f1ba 0f44 	cmp.w	sl, #68	; 0x44
 80057e4:	d014      	beq.n	8005810 <__ssvfscanf_r+0xd8>
 80057e6:	d81e      	bhi.n	8005826 <__ssvfscanf_r+0xee>
 80057e8:	f1ba 0f2a 	cmp.w	sl, #42	; 0x2a
 80057ec:	f000 80ac 	beq.w	8005948 <__ssvfscanf_r+0x210>
 80057f0:	d811      	bhi.n	8005816 <__ssvfscanf_r+0xde>
 80057f2:	f1ba 0f00 	cmp.w	sl, #0
 80057f6:	f000 8507 	beq.w	8006208 <__ssvfscanf_r+0xad0>
 80057fa:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80057fe:	d079      	beq.n	80058f4 <__ssvfscanf_r+0x1bc>
 8005800:	f001 fb8a 	bl	8006f18 <__locale_ctype_ptr>
 8005804:	4450      	add	r0, sl
 8005806:	7843      	ldrb	r3, [r0, #1]
 8005808:	f003 0303 	and.w	r3, r3, #3
 800580c:	2b01      	cmp	r3, #1
 800580e:	d148      	bne.n	80058a2 <__ssvfscanf_r+0x16a>
 8005810:	f044 0401 	orr.w	r4, r4, #1
 8005814:	e045      	b.n	80058a2 <__ssvfscanf_r+0x16a>
 8005816:	f1aa 0330 	sub.w	r3, sl, #48	; 0x30
 800581a:	2b09      	cmp	r3, #9
 800581c:	d8f0      	bhi.n	8005800 <__ssvfscanf_r+0xc8>
 800581e:	fb02 a606 	mla	r6, r2, r6, sl
 8005822:	3e30      	subs	r6, #48	; 0x30
 8005824:	e092      	b.n	800594c <__ssvfscanf_r+0x214>
 8005826:	f1ba 0f4c 	cmp.w	sl, #76	; 0x4c
 800582a:	f000 8096 	beq.w	800595a <__ssvfscanf_r+0x222>
 800582e:	d822      	bhi.n	8005876 <__ssvfscanf_r+0x13e>
 8005830:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
 8005834:	d002      	beq.n	800583c <__ssvfscanf_r+0x104>
 8005836:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800583a:	d1e1      	bne.n	8005800 <__ssvfscanf_r+0xc8>
 800583c:	f04f 0a04 	mov.w	sl, #4
 8005840:	686b      	ldr	r3, [r5, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	f340 80c7 	ble.w	80059d6 <__ssvfscanf_r+0x29e>
 8005848:	0663      	lsls	r3, r4, #25
 800584a:	d408      	bmi.n	800585e <__ssvfscanf_r+0x126>
 800584c:	f001 fb64 	bl	8006f18 <__locale_ctype_ptr>
 8005850:	682b      	ldr	r3, [r5, #0]
 8005852:	781a      	ldrb	r2, [r3, #0]
 8005854:	4410      	add	r0, r2
 8005856:	7842      	ldrb	r2, [r0, #1]
 8005858:	0710      	lsls	r0, r2, #28
 800585a:	f100 80c4 	bmi.w	80059e6 <__ssvfscanf_r+0x2ae>
 800585e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005862:	f1ba 0f03 	cmp.w	sl, #3
 8005866:	f200 80d0 	bhi.w	8005a0a <__ssvfscanf_r+0x2d2>
 800586a:	e8df f01a 	tbh	[pc, sl, lsl #1]
 800586e:	0150      	.short	0x0150
 8005870:	025a01a3 	.word	0x025a01a3
 8005874:	0323      	.short	0x0323
 8005876:	f1ba 0f58 	cmp.w	sl, #88	; 0x58
 800587a:	d07b      	beq.n	8005974 <__ssvfscanf_r+0x23c>
 800587c:	f1ba 0f5b 	cmp.w	sl, #91	; 0x5b
 8005880:	d07e      	beq.n	8005980 <__ssvfscanf_r+0x248>
 8005882:	f1ba 0f4f 	cmp.w	sl, #79	; 0x4f
 8005886:	d1bb      	bne.n	8005800 <__ssvfscanf_r+0xc8>
 8005888:	f044 0401 	orr.w	r4, r4, #1
 800588c:	e022      	b.n	80058d4 <__ssvfscanf_r+0x19c>
 800588e:	f1ba 0f6c 	cmp.w	sl, #108	; 0x6c
 8005892:	d05d      	beq.n	8005950 <__ssvfscanf_r+0x218>
 8005894:	d814      	bhi.n	80058c0 <__ssvfscanf_r+0x188>
 8005896:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800589a:	d804      	bhi.n	80058a6 <__ssvfscanf_r+0x16e>
 800589c:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80058a0:	d2cc      	bcs.n	800583c <__ssvfscanf_r+0x104>
 80058a2:	4bac      	ldr	r3, [pc, #688]	; (8005b54 <__ssvfscanf_r+0x41c>)
 80058a4:	e063      	b.n	800596e <__ssvfscanf_r+0x236>
 80058a6:	f1ba 0f68 	cmp.w	sl, #104	; 0x68
 80058aa:	d05c      	beq.n	8005966 <__ssvfscanf_r+0x22e>
 80058ac:	f1ba 0f69 	cmp.w	sl, #105	; 0x69
 80058b0:	d1a6      	bne.n	8005800 <__ssvfscanf_r+0xc8>
 80058b2:	4ba8      	ldr	r3, [pc, #672]	; (8005b54 <__ssvfscanf_r+0x41c>)
 80058b4:	9305      	str	r3, [sp, #20]
 80058b6:	2300      	movs	r3, #0
 80058b8:	9303      	str	r3, [sp, #12]
 80058ba:	f04f 0a03 	mov.w	sl, #3
 80058be:	e7bf      	b.n	8005840 <__ssvfscanf_r+0x108>
 80058c0:	f1ba 0f70 	cmp.w	sl, #112	; 0x70
 80058c4:	d06b      	beq.n	800599e <__ssvfscanf_r+0x266>
 80058c6:	d809      	bhi.n	80058dc <__ssvfscanf_r+0x1a4>
 80058c8:	f1ba 0f6e 	cmp.w	sl, #110	; 0x6e
 80058cc:	d06a      	beq.n	80059a4 <__ssvfscanf_r+0x26c>
 80058ce:	f1ba 0f6f 	cmp.w	sl, #111	; 0x6f
 80058d2:	d195      	bne.n	8005800 <__ssvfscanf_r+0xc8>
 80058d4:	4ba0      	ldr	r3, [pc, #640]	; (8005b58 <__ssvfscanf_r+0x420>)
 80058d6:	9305      	str	r3, [sp, #20]
 80058d8:	2308      	movs	r3, #8
 80058da:	e7ed      	b.n	80058b8 <__ssvfscanf_r+0x180>
 80058dc:	f1ba 0f75 	cmp.w	sl, #117	; 0x75
 80058e0:	d044      	beq.n	800596c <__ssvfscanf_r+0x234>
 80058e2:	f1ba 0f78 	cmp.w	sl, #120	; 0x78
 80058e6:	d045      	beq.n	8005974 <__ssvfscanf_r+0x23c>
 80058e8:	f1ba 0f73 	cmp.w	sl, #115	; 0x73
 80058ec:	d188      	bne.n	8005800 <__ssvfscanf_r+0xc8>
 80058ee:	f04f 0a02 	mov.w	sl, #2
 80058f2:	e7a5      	b.n	8005840 <__ssvfscanf_r+0x108>
 80058f4:	686b      	ldr	r3, [r5, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	dd0b      	ble.n	8005912 <__ssvfscanf_r+0x1da>
 80058fa:	9a06      	ldr	r2, [sp, #24]
 80058fc:	682b      	ldr	r3, [r5, #0]
 80058fe:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8005902:	781a      	ldrb	r2, [r3, #0]
 8005904:	4291      	cmp	r1, r2
 8005906:	d017      	beq.n	8005938 <__ssvfscanf_r+0x200>
 8005908:	9804      	ldr	r0, [sp, #16]
 800590a:	f50d 7d2b 	add.w	sp, sp, #684	; 0x2ac
 800590e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005912:	4629      	mov	r1, r5
 8005914:	4640      	mov	r0, r8
 8005916:	f003 fb20 	bl	8008f5a <__ssrefill_r>
 800591a:	2800      	cmp	r0, #0
 800591c:	d0ed      	beq.n	80058fa <__ssvfscanf_r+0x1c2>
 800591e:	9b04      	ldr	r3, [sp, #16]
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 8471 	beq.w	8006208 <__ssvfscanf_r+0xad0>
 8005926:	89ab      	ldrh	r3, [r5, #12]
 8005928:	f013 0f40 	tst.w	r3, #64	; 0x40
 800592c:	9b04      	ldr	r3, [sp, #16]
 800592e:	bf18      	it	ne
 8005930:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8005934:	9304      	str	r3, [sp, #16]
 8005936:	e7e7      	b.n	8005908 <__ssvfscanf_r+0x1d0>
 8005938:	686a      	ldr	r2, [r5, #4]
 800593a:	3301      	adds	r3, #1
 800593c:	3a01      	subs	r2, #1
 800593e:	606a      	str	r2, [r5, #4]
 8005940:	602b      	str	r3, [r5, #0]
 8005942:	f10b 0b01 	add.w	fp, fp, #1
 8005946:	e70f      	b.n	8005768 <__ssvfscanf_r+0x30>
 8005948:	f044 0410 	orr.w	r4, r4, #16
 800594c:	9b06      	ldr	r3, [sp, #24]
 800594e:	e73d      	b.n	80057cc <__ssvfscanf_r+0x94>
 8005950:	7859      	ldrb	r1, [r3, #1]
 8005952:	296c      	cmp	r1, #108	; 0x6c
 8005954:	d104      	bne.n	8005960 <__ssvfscanf_r+0x228>
 8005956:	3302      	adds	r3, #2
 8005958:	9306      	str	r3, [sp, #24]
 800595a:	f044 0402 	orr.w	r4, r4, #2
 800595e:	e7f5      	b.n	800594c <__ssvfscanf_r+0x214>
 8005960:	f044 0401 	orr.w	r4, r4, #1
 8005964:	e7f2      	b.n	800594c <__ssvfscanf_r+0x214>
 8005966:	f044 0404 	orr.w	r4, r4, #4
 800596a:	e7ef      	b.n	800594c <__ssvfscanf_r+0x214>
 800596c:	4b7a      	ldr	r3, [pc, #488]	; (8005b58 <__ssvfscanf_r+0x420>)
 800596e:	9305      	str	r3, [sp, #20]
 8005970:	230a      	movs	r3, #10
 8005972:	e7a1      	b.n	80058b8 <__ssvfscanf_r+0x180>
 8005974:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8005978:	4b77      	ldr	r3, [pc, #476]	; (8005b58 <__ssvfscanf_r+0x420>)
 800597a:	9305      	str	r3, [sp, #20]
 800597c:	2310      	movs	r3, #16
 800597e:	e79b      	b.n	80058b8 <__ssvfscanf_r+0x180>
 8005980:	9906      	ldr	r1, [sp, #24]
 8005982:	a812      	add	r0, sp, #72	; 0x48
 8005984:	f002 f94a 	bl	8007c1c <__sccl>
 8005988:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 800598c:	9006      	str	r0, [sp, #24]
 800598e:	f04f 0a01 	mov.w	sl, #1
 8005992:	e755      	b.n	8005840 <__ssvfscanf_r+0x108>
 8005994:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8005998:	f04f 0a00 	mov.w	sl, #0
 800599c:	e750      	b.n	8005840 <__ssvfscanf_r+0x108>
 800599e:	f444 7408 	orr.w	r4, r4, #544	; 0x220
 80059a2:	e7e9      	b.n	8005978 <__ssvfscanf_r+0x240>
 80059a4:	06e6      	lsls	r6, r4, #27
 80059a6:	f53f aedf 	bmi.w	8005768 <__ssvfscanf_r+0x30>
 80059aa:	f014 0f04 	tst.w	r4, #4
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	f107 0304 	add.w	r3, r7, #4
 80059b4:	d003      	beq.n	80059be <__ssvfscanf_r+0x286>
 80059b6:	f8a2 b000 	strh.w	fp, [r2]
 80059ba:	461f      	mov	r7, r3
 80059bc:	e6d4      	b.n	8005768 <__ssvfscanf_r+0x30>
 80059be:	07e0      	lsls	r0, r4, #31
 80059c0:	d502      	bpl.n	80059c8 <__ssvfscanf_r+0x290>
 80059c2:	f8c2 b000 	str.w	fp, [r2]
 80059c6:	e7f8      	b.n	80059ba <__ssvfscanf_r+0x282>
 80059c8:	07a1      	lsls	r1, r4, #30
 80059ca:	d5fa      	bpl.n	80059c2 <__ssvfscanf_r+0x28a>
 80059cc:	4658      	mov	r0, fp
 80059ce:	17c1      	asrs	r1, r0, #31
 80059d0:	e9c2 0100 	strd	r0, r1, [r2]
 80059d4:	e7f1      	b.n	80059ba <__ssvfscanf_r+0x282>
 80059d6:	4629      	mov	r1, r5
 80059d8:	4640      	mov	r0, r8
 80059da:	f003 fabe 	bl	8008f5a <__ssrefill_r>
 80059de:	2800      	cmp	r0, #0
 80059e0:	f43f af32 	beq.w	8005848 <__ssvfscanf_r+0x110>
 80059e4:	e79b      	b.n	800591e <__ssvfscanf_r+0x1e6>
 80059e6:	686a      	ldr	r2, [r5, #4]
 80059e8:	f10b 0b01 	add.w	fp, fp, #1
 80059ec:	3a01      	subs	r2, #1
 80059ee:	2a00      	cmp	r2, #0
 80059f0:	606a      	str	r2, [r5, #4]
 80059f2:	dd02      	ble.n	80059fa <__ssvfscanf_r+0x2c2>
 80059f4:	3301      	adds	r3, #1
 80059f6:	602b      	str	r3, [r5, #0]
 80059f8:	e728      	b.n	800584c <__ssvfscanf_r+0x114>
 80059fa:	4629      	mov	r1, r5
 80059fc:	4640      	mov	r0, r8
 80059fe:	f003 faac 	bl	8008f5a <__ssrefill_r>
 8005a02:	2800      	cmp	r0, #0
 8005a04:	f43f af22 	beq.w	800584c <__ssvfscanf_r+0x114>
 8005a08:	e789      	b.n	800591e <__ssvfscanf_r+0x1e6>
 8005a0a:	2e00      	cmp	r6, #0
 8005a0c:	bf08      	it	eq
 8005a0e:	2601      	moveq	r6, #1
 8005a10:	f014 0301 	ands.w	r3, r4, #1
 8005a14:	f004 0410 	and.w	r4, r4, #16
 8005a18:	d04d      	beq.n	8005ab6 <__ssvfscanf_r+0x37e>
 8005a1a:	2208      	movs	r2, #8
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	a810      	add	r0, sp, #64	; 0x40
 8005a20:	f7fe fe61 	bl	80046e6 <memset>
 8005a24:	bb74      	cbnz	r4, 8005a84 <__ssvfscanf_r+0x34c>
 8005a26:	f8d7 a000 	ldr.w	sl, [r7]
 8005a2a:	3704      	adds	r7, #4
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	2e00      	cmp	r6, #0
 8005a30:	d039      	beq.n	8005aa6 <__ssvfscanf_r+0x36e>
 8005a32:	9307      	str	r3, [sp, #28]
 8005a34:	f001 fa5e 	bl	8006ef4 <__locale_mb_cur_max>
 8005a38:	9b07      	ldr	r3, [sp, #28]
 8005a3a:	4283      	cmp	r3, r0
 8005a3c:	f43f af6f 	beq.w	800591e <__ssvfscanf_r+0x1e6>
 8005a40:	682a      	ldr	r2, [r5, #0]
 8005a42:	a852      	add	r0, sp, #328	; 0x148
 8005a44:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005a48:	f103 0901 	add.w	r9, r3, #1
 8005a4c:	54c1      	strb	r1, [r0, r3]
 8005a4e:	686b      	ldr	r3, [r5, #4]
 8005a50:	4651      	mov	r1, sl
 8005a52:	3b01      	subs	r3, #1
 8005a54:	e885 000c 	stmia.w	r5, {r2, r3}
 8005a58:	ab10      	add	r3, sp, #64	; 0x40
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	464b      	mov	r3, r9
 8005a60:	4640      	mov	r0, r8
 8005a62:	f001 fc8b 	bl	800737c <_mbrtowc_r>
 8005a66:	1c41      	adds	r1, r0, #1
 8005a68:	f43f af59 	beq.w	800591e <__ssvfscanf_r+0x1e6>
 8005a6c:	b968      	cbnz	r0, 8005a8a <__ssvfscanf_r+0x352>
 8005a6e:	b90c      	cbnz	r4, 8005a74 <__ssvfscanf_r+0x33c>
 8005a70:	f8ca 4000 	str.w	r4, [sl]
 8005a74:	44cb      	add	fp, r9
 8005a76:	3e01      	subs	r6, #1
 8005a78:	b90c      	cbnz	r4, 8005a7e <__ssvfscanf_r+0x346>
 8005a7a:	f10a 0a04 	add.w	sl, sl, #4
 8005a7e:	f04f 0900 	mov.w	r9, #0
 8005a82:	e004      	b.n	8005a8e <__ssvfscanf_r+0x356>
 8005a84:	f04f 0a00 	mov.w	sl, #0
 8005a88:	e7d0      	b.n	8005a2c <__ssvfscanf_r+0x2f4>
 8005a8a:	3002      	adds	r0, #2
 8005a8c:	d1f2      	bne.n	8005a74 <__ssvfscanf_r+0x33c>
 8005a8e:	686b      	ldr	r3, [r5, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	dc0e      	bgt.n	8005ab2 <__ssvfscanf_r+0x37a>
 8005a94:	4629      	mov	r1, r5
 8005a96:	4640      	mov	r0, r8
 8005a98:	f003 fa5f 	bl	8008f5a <__ssrefill_r>
 8005a9c:	b148      	cbz	r0, 8005ab2 <__ssvfscanf_r+0x37a>
 8005a9e:	f1b9 0f00 	cmp.w	r9, #0
 8005aa2:	f47f af3c 	bne.w	800591e <__ssvfscanf_r+0x1e6>
 8005aa6:	2c00      	cmp	r4, #0
 8005aa8:	f47f ae5e 	bne.w	8005768 <__ssvfscanf_r+0x30>
 8005aac:	9b04      	ldr	r3, [sp, #16]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	e659      	b.n	8005766 <__ssvfscanf_r+0x2e>
 8005ab2:	464b      	mov	r3, r9
 8005ab4:	e7bb      	b.n	8005a2e <__ssvfscanf_r+0x2f6>
 8005ab6:	b1cc      	cbz	r4, 8005aec <__ssvfscanf_r+0x3b4>
 8005ab8:	461c      	mov	r4, r3
 8005aba:	686b      	ldr	r3, [r5, #4]
 8005abc:	682a      	ldr	r2, [r5, #0]
 8005abe:	42b3      	cmp	r3, r6
 8005ac0:	da0e      	bge.n	8005ae0 <__ssvfscanf_r+0x3a8>
 8005ac2:	441c      	add	r4, r3
 8005ac4:	1af6      	subs	r6, r6, r3
 8005ac6:	4413      	add	r3, r2
 8005ac8:	602b      	str	r3, [r5, #0]
 8005aca:	4629      	mov	r1, r5
 8005acc:	4640      	mov	r0, r8
 8005ace:	f003 fa44 	bl	8008f5a <__ssrefill_r>
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	d0f1      	beq.n	8005aba <__ssvfscanf_r+0x382>
 8005ad6:	2c00      	cmp	r4, #0
 8005ad8:	f43f af21 	beq.w	800591e <__ssvfscanf_r+0x1e6>
 8005adc:	44a3      	add	fp, r4
 8005ade:	e643      	b.n	8005768 <__ssvfscanf_r+0x30>
 8005ae0:	1b9b      	subs	r3, r3, r6
 8005ae2:	4434      	add	r4, r6
 8005ae4:	4416      	add	r6, r2
 8005ae6:	606b      	str	r3, [r5, #4]
 8005ae8:	602e      	str	r6, [r5, #0]
 8005aea:	e7f7      	b.n	8005adc <__ssvfscanf_r+0x3a4>
 8005aec:	9500      	str	r5, [sp, #0]
 8005aee:	4633      	mov	r3, r6
 8005af0:	2201      	movs	r2, #1
 8005af2:	6839      	ldr	r1, [r7, #0]
 8005af4:	4640      	mov	r0, r8
 8005af6:	1d3c      	adds	r4, r7, #4
 8005af8:	f003 fa4c 	bl	8008f94 <_sfread_r>
 8005afc:	2800      	cmp	r0, #0
 8005afe:	f43f af0e 	beq.w	800591e <__ssvfscanf_r+0x1e6>
 8005b02:	4483      	add	fp, r0
 8005b04:	9b04      	ldr	r3, [sp, #16]
 8005b06:	4627      	mov	r7, r4
 8005b08:	3301      	adds	r3, #1
 8005b0a:	9304      	str	r3, [sp, #16]
 8005b0c:	e62c      	b.n	8005768 <__ssvfscanf_r+0x30>
 8005b0e:	2e00      	cmp	r6, #0
 8005b10:	bf08      	it	eq
 8005b12:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
 8005b16:	06e2      	lsls	r2, r4, #27
 8005b18:	d520      	bpl.n	8005b5c <__ssvfscanf_r+0x424>
 8005b1a:	2400      	movs	r4, #0
 8005b1c:	f10d 0948 	add.w	r9, sp, #72	; 0x48
 8005b20:	682b      	ldr	r3, [r5, #0]
 8005b22:	781a      	ldrb	r2, [r3, #0]
 8005b24:	f819 2002 	ldrb.w	r2, [r9, r2]
 8005b28:	b912      	cbnz	r2, 8005b30 <__ssvfscanf_r+0x3f8>
 8005b2a:	2c00      	cmp	r4, #0
 8005b2c:	d1d6      	bne.n	8005adc <__ssvfscanf_r+0x3a4>
 8005b2e:	e6eb      	b.n	8005908 <__ssvfscanf_r+0x1d0>
 8005b30:	686a      	ldr	r2, [r5, #4]
 8005b32:	3401      	adds	r4, #1
 8005b34:	3a01      	subs	r2, #1
 8005b36:	3301      	adds	r3, #1
 8005b38:	42a6      	cmp	r6, r4
 8005b3a:	606a      	str	r2, [r5, #4]
 8005b3c:	602b      	str	r3, [r5, #0]
 8005b3e:	d0cd      	beq.n	8005adc <__ssvfscanf_r+0x3a4>
 8005b40:	2a00      	cmp	r2, #0
 8005b42:	dced      	bgt.n	8005b20 <__ssvfscanf_r+0x3e8>
 8005b44:	4629      	mov	r1, r5
 8005b46:	4640      	mov	r0, r8
 8005b48:	f003 fa07 	bl	8008f5a <__ssrefill_r>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d0e7      	beq.n	8005b20 <__ssvfscanf_r+0x3e8>
 8005b50:	e7c4      	b.n	8005adc <__ssvfscanf_r+0x3a4>
 8005b52:	bf00      	nop
 8005b54:	080089d9 	.word	0x080089d9
 8005b58:	08008c65 	.word	0x08008c65
 8005b5c:	683c      	ldr	r4, [r7, #0]
 8005b5e:	f107 0904 	add.w	r9, r7, #4
 8005b62:	4627      	mov	r7, r4
 8005b64:	f10d 0a48 	add.w	sl, sp, #72	; 0x48
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	781a      	ldrb	r2, [r3, #0]
 8005b6c:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8005b70:	b1b2      	cbz	r2, 8005ba0 <__ssvfscanf_r+0x468>
 8005b72:	686a      	ldr	r2, [r5, #4]
 8005b74:	3a01      	subs	r2, #1
 8005b76:	606a      	str	r2, [r5, #4]
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	602a      	str	r2, [r5, #0]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	f807 3b01 	strb.w	r3, [r7], #1
 8005b82:	1bf3      	subs	r3, r6, r7
 8005b84:	42dc      	cmn	r4, r3
 8005b86:	d00b      	beq.n	8005ba0 <__ssvfscanf_r+0x468>
 8005b88:	686b      	ldr	r3, [r5, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	dcec      	bgt.n	8005b68 <__ssvfscanf_r+0x430>
 8005b8e:	4629      	mov	r1, r5
 8005b90:	4640      	mov	r0, r8
 8005b92:	f003 f9e2 	bl	8008f5a <__ssrefill_r>
 8005b96:	2800      	cmp	r0, #0
 8005b98:	d0e6      	beq.n	8005b68 <__ssvfscanf_r+0x430>
 8005b9a:	42bc      	cmp	r4, r7
 8005b9c:	f43f aebf 	beq.w	800591e <__ssvfscanf_r+0x1e6>
 8005ba0:	1b3c      	subs	r4, r7, r4
 8005ba2:	f43f aeb1 	beq.w	8005908 <__ssvfscanf_r+0x1d0>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	703b      	strb	r3, [r7, #0]
 8005baa:	9b04      	ldr	r3, [sp, #16]
 8005bac:	464f      	mov	r7, r9
 8005bae:	3301      	adds	r3, #1
 8005bb0:	9304      	str	r3, [sp, #16]
 8005bb2:	e793      	b.n	8005adc <__ssvfscanf_r+0x3a4>
 8005bb4:	2e00      	cmp	r6, #0
 8005bb6:	bf08      	it	eq
 8005bb8:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
 8005bbc:	f014 0901 	ands.w	r9, r4, #1
 8005bc0:	f004 0410 	and.w	r4, r4, #16
 8005bc4:	d06a      	beq.n	8005c9c <__ssvfscanf_r+0x564>
 8005bc6:	2208      	movs	r2, #8
 8005bc8:	2100      	movs	r1, #0
 8005bca:	a810      	add	r0, sp, #64	; 0x40
 8005bcc:	f7fe fd8b 	bl	80046e6 <memset>
 8005bd0:	2c00      	cmp	r4, #0
 8005bd2:	d13e      	bne.n	8005c52 <__ssvfscanf_r+0x51a>
 8005bd4:	f8d7 9000 	ldr.w	r9, [r7]
 8005bd8:	3704      	adds	r7, #4
 8005bda:	2300      	movs	r3, #0
 8005bdc:	9307      	str	r3, [sp, #28]
 8005bde:	f001 f99b 	bl	8006f18 <__locale_ctype_ptr>
 8005be2:	682a      	ldr	r2, [r5, #0]
 8005be4:	7812      	ldrb	r2, [r2, #0]
 8005be6:	4410      	add	r0, r2
 8005be8:	7842      	ldrb	r2, [r0, #1]
 8005bea:	0711      	lsls	r1, r2, #28
 8005bec:	d42b      	bmi.n	8005c46 <__ssvfscanf_r+0x50e>
 8005bee:	9b07      	ldr	r3, [sp, #28]
 8005bf0:	b34e      	cbz	r6, 8005c46 <__ssvfscanf_r+0x50e>
 8005bf2:	9307      	str	r3, [sp, #28]
 8005bf4:	f001 f97e 	bl	8006ef4 <__locale_mb_cur_max>
 8005bf8:	9b07      	ldr	r3, [sp, #28]
 8005bfa:	4283      	cmp	r3, r0
 8005bfc:	f43f ae8f 	beq.w	800591e <__ssvfscanf_r+0x1e6>
 8005c00:	682a      	ldr	r2, [r5, #0]
 8005c02:	a852      	add	r0, sp, #328	; 0x148
 8005c04:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005c08:	f103 0a01 	add.w	sl, r3, #1
 8005c0c:	54c1      	strb	r1, [r0, r3]
 8005c0e:	686b      	ldr	r3, [r5, #4]
 8005c10:	4649      	mov	r1, r9
 8005c12:	3b01      	subs	r3, #1
 8005c14:	e885 000c 	stmia.w	r5, {r2, r3}
 8005c18:	ab10      	add	r3, sp, #64	; 0x40
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	4653      	mov	r3, sl
 8005c20:	4640      	mov	r0, r8
 8005c22:	f001 fbab 	bl	800737c <_mbrtowc_r>
 8005c26:	1c43      	adds	r3, r0, #1
 8005c28:	f43f ae79 	beq.w	800591e <__ssvfscanf_r+0x1e6>
 8005c2c:	b9a0      	cbnz	r0, 8005c58 <__ssvfscanf_r+0x520>
 8005c2e:	f8c9 0000 	str.w	r0, [r9]
 8005c32:	f8d9 0000 	ldr.w	r0, [r9]
 8005c36:	f001 f94f 	bl	8006ed8 <iswspace>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	b1c8      	cbz	r0, 8005c72 <__ssvfscanf_r+0x53a>
 8005c3e:	ae52      	add	r6, sp, #328	; 0x148
 8005c40:	f1ba 0f00 	cmp.w	sl, #0
 8005c44:	d10c      	bne.n	8005c60 <__ssvfscanf_r+0x528>
 8005c46:	2c00      	cmp	r4, #0
 8005c48:	f47f ad8e 	bne.w	8005768 <__ssvfscanf_r+0x30>
 8005c4c:	f8c9 4000 	str.w	r4, [r9]
 8005c50:	e72c      	b.n	8005aac <__ssvfscanf_r+0x374>
 8005c52:	f10d 093c 	add.w	r9, sp, #60	; 0x3c
 8005c56:	e7c0      	b.n	8005bda <__ssvfscanf_r+0x4a2>
 8005c58:	3002      	adds	r0, #2
 8005c5a:	d1ea      	bne.n	8005c32 <__ssvfscanf_r+0x4fa>
 8005c5c:	4653      	mov	r3, sl
 8005c5e:	e00e      	b.n	8005c7e <__ssvfscanf_r+0x546>
 8005c60:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005c64:	462a      	mov	r2, r5
 8005c66:	f816 100a 	ldrb.w	r1, [r6, sl]
 8005c6a:	4640      	mov	r0, r8
 8005c6c:	f003 f938 	bl	8008ee0 <_sungetc_r>
 8005c70:	e7e6      	b.n	8005c40 <__ssvfscanf_r+0x508>
 8005c72:	44d3      	add	fp, sl
 8005c74:	3e01      	subs	r6, #1
 8005c76:	b914      	cbnz	r4, 8005c7e <__ssvfscanf_r+0x546>
 8005c78:	4623      	mov	r3, r4
 8005c7a:	f109 0904 	add.w	r9, r9, #4
 8005c7e:	686a      	ldr	r2, [r5, #4]
 8005c80:	2a00      	cmp	r2, #0
 8005c82:	dcab      	bgt.n	8005bdc <__ssvfscanf_r+0x4a4>
 8005c84:	4629      	mov	r1, r5
 8005c86:	4640      	mov	r0, r8
 8005c88:	9307      	str	r3, [sp, #28]
 8005c8a:	f003 f966 	bl	8008f5a <__ssrefill_r>
 8005c8e:	9b07      	ldr	r3, [sp, #28]
 8005c90:	2800      	cmp	r0, #0
 8005c92:	d0a3      	beq.n	8005bdc <__ssvfscanf_r+0x4a4>
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f47f ae42 	bne.w	800591e <__ssvfscanf_r+0x1e6>
 8005c9a:	e7d4      	b.n	8005c46 <__ssvfscanf_r+0x50e>
 8005c9c:	2c00      	cmp	r4, #0
 8005c9e:	d136      	bne.n	8005d0e <__ssvfscanf_r+0x5d6>
 8005ca0:	f8d7 9000 	ldr.w	r9, [r7]
 8005ca4:	1d3c      	adds	r4, r7, #4
 8005ca6:	464f      	mov	r7, r9
 8005ca8:	f001 f936 	bl	8006f18 <__locale_ctype_ptr>
 8005cac:	682a      	ldr	r2, [r5, #0]
 8005cae:	7813      	ldrb	r3, [r2, #0]
 8005cb0:	4418      	add	r0, r3
 8005cb2:	7843      	ldrb	r3, [r0, #1]
 8005cb4:	071b      	lsls	r3, r3, #28
 8005cb6:	d414      	bmi.n	8005ce2 <__ssvfscanf_r+0x5aa>
 8005cb8:	686b      	ldr	r3, [r5, #4]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	606b      	str	r3, [r5, #4]
 8005cbe:	1c53      	adds	r3, r2, #1
 8005cc0:	602b      	str	r3, [r5, #0]
 8005cc2:	7813      	ldrb	r3, [r2, #0]
 8005cc4:	f807 3b01 	strb.w	r3, [r7], #1
 8005cc8:	1bf3      	subs	r3, r6, r7
 8005cca:	eb19 0f03 	cmn.w	r9, r3
 8005cce:	d008      	beq.n	8005ce2 <__ssvfscanf_r+0x5aa>
 8005cd0:	686b      	ldr	r3, [r5, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	dce8      	bgt.n	8005ca8 <__ssvfscanf_r+0x570>
 8005cd6:	4629      	mov	r1, r5
 8005cd8:	4640      	mov	r0, r8
 8005cda:	f003 f93e 	bl	8008f5a <__ssrefill_r>
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	d0e2      	beq.n	8005ca8 <__ssvfscanf_r+0x570>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	703b      	strb	r3, [r7, #0]
 8005ce6:	eba7 0709 	sub.w	r7, r7, r9
 8005cea:	44bb      	add	fp, r7
 8005cec:	e70a      	b.n	8005b04 <__ssvfscanf_r+0x3cc>
 8005cee:	686a      	ldr	r2, [r5, #4]
 8005cf0:	f109 0901 	add.w	r9, r9, #1
 8005cf4:	3a01      	subs	r2, #1
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	454e      	cmp	r6, r9
 8005cfa:	606a      	str	r2, [r5, #4]
 8005cfc:	602b      	str	r3, [r5, #0]
 8005cfe:	d00e      	beq.n	8005d1e <__ssvfscanf_r+0x5e6>
 8005d00:	2a00      	cmp	r2, #0
 8005d02:	dc04      	bgt.n	8005d0e <__ssvfscanf_r+0x5d6>
 8005d04:	4629      	mov	r1, r5
 8005d06:	4640      	mov	r0, r8
 8005d08:	f003 f927 	bl	8008f5a <__ssrefill_r>
 8005d0c:	b938      	cbnz	r0, 8005d1e <__ssvfscanf_r+0x5e6>
 8005d0e:	f001 f903 	bl	8006f18 <__locale_ctype_ptr>
 8005d12:	682b      	ldr	r3, [r5, #0]
 8005d14:	781a      	ldrb	r2, [r3, #0]
 8005d16:	4410      	add	r0, r2
 8005d18:	7842      	ldrb	r2, [r0, #1]
 8005d1a:	0712      	lsls	r2, r2, #28
 8005d1c:	d5e7      	bpl.n	8005cee <__ssvfscanf_r+0x5b6>
 8005d1e:	44cb      	add	fp, r9
 8005d20:	e522      	b.n	8005768 <__ssvfscanf_r+0x30>
 8005d22:	1e73      	subs	r3, r6, #1
 8005d24:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8005d28:	bf88      	it	hi
 8005d2a:	f46f 70ae 	mvnhi.w	r0, #348	; 0x15c
 8005d2e:	f04f 0300 	mov.w	r3, #0
 8005d32:	bf8a      	itet	hi
 8005d34:	eb06 0a00 	addhi.w	sl, r6, r0
 8005d38:	f04f 0a00 	movls.w	sl, #0
 8005d3c:	f240 165d 	movwhi	r6, #349	; 0x15d
 8005d40:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
 8005d44:	9307      	str	r3, [sp, #28]
 8005d46:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 8005d4a:	682a      	ldr	r2, [r5, #0]
 8005d4c:	7813      	ldrb	r3, [r2, #0]
 8005d4e:	2b39      	cmp	r3, #57	; 0x39
 8005d50:	d82d      	bhi.n	8005dae <__ssvfscanf_r+0x676>
 8005d52:	2b38      	cmp	r3, #56	; 0x38
 8005d54:	d275      	bcs.n	8005e42 <__ssvfscanf_r+0x70a>
 8005d56:	2b30      	cmp	r3, #48	; 0x30
 8005d58:	d045      	beq.n	8005de6 <__ssvfscanf_r+0x6ae>
 8005d5a:	d86a      	bhi.n	8005e32 <__ssvfscanf_r+0x6fa>
 8005d5c:	2b2b      	cmp	r3, #43	; 0x2b
 8005d5e:	d078      	beq.n	8005e52 <__ssvfscanf_r+0x71a>
 8005d60:	2b2d      	cmp	r3, #45	; 0x2d
 8005d62:	d076      	beq.n	8005e52 <__ssvfscanf_r+0x71a>
 8005d64:	05e3      	lsls	r3, r4, #23
 8005d66:	d50f      	bpl.n	8005d88 <__ssvfscanf_r+0x650>
 8005d68:	ab52      	add	r3, sp, #328	; 0x148
 8005d6a:	4599      	cmp	r9, r3
 8005d6c:	d908      	bls.n	8005d80 <__ssvfscanf_r+0x648>
 8005d6e:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 8005d72:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 8005d76:	462a      	mov	r2, r5
 8005d78:	4640      	mov	r0, r8
 8005d7a:	f003 f8b1 	bl	8008ee0 <_sungetc_r>
 8005d7e:	46b1      	mov	r9, r6
 8005d80:	ab52      	add	r3, sp, #328	; 0x148
 8005d82:	4599      	cmp	r9, r3
 8005d84:	f43f adc0 	beq.w	8005908 <__ssvfscanf_r+0x1d0>
 8005d88:	f014 0210 	ands.w	r2, r4, #16
 8005d8c:	f040 8088 	bne.w	8005ea0 <__ssvfscanf_r+0x768>
 8005d90:	9b03      	ldr	r3, [sp, #12]
 8005d92:	a952      	add	r1, sp, #328	; 0x148
 8005d94:	4640      	mov	r0, r8
 8005d96:	9e05      	ldr	r6, [sp, #20]
 8005d98:	f889 2000 	strb.w	r2, [r9]
 8005d9c:	47b0      	blx	r6
 8005d9e:	f014 0f20 	tst.w	r4, #32
 8005da2:	f107 0304 	add.w	r3, r7, #4
 8005da6:	d060      	beq.n	8005e6a <__ssvfscanf_r+0x732>
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	6010      	str	r0, [r2, #0]
 8005dac:	e061      	b.n	8005e72 <__ssvfscanf_r+0x73a>
 8005dae:	2b58      	cmp	r3, #88	; 0x58
 8005db0:	d00d      	beq.n	8005dce <__ssvfscanf_r+0x696>
 8005db2:	d806      	bhi.n	8005dc2 <__ssvfscanf_r+0x68a>
 8005db4:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
 8005db8:	2905      	cmp	r1, #5
 8005dba:	d8d3      	bhi.n	8005d64 <__ssvfscanf_r+0x62c>
 8005dbc:	9903      	ldr	r1, [sp, #12]
 8005dbe:	290a      	cmp	r1, #10
 8005dc0:	e045      	b.n	8005e4e <__ssvfscanf_r+0x716>
 8005dc2:	2b61      	cmp	r3, #97	; 0x61
 8005dc4:	d3ce      	bcc.n	8005d64 <__ssvfscanf_r+0x62c>
 8005dc6:	2b66      	cmp	r3, #102	; 0x66
 8005dc8:	d9f8      	bls.n	8005dbc <__ssvfscanf_r+0x684>
 8005dca:	2b78      	cmp	r3, #120	; 0x78
 8005dcc:	d1ca      	bne.n	8005d64 <__ssvfscanf_r+0x62c>
 8005dce:	f404 61c0 	and.w	r1, r4, #1536	; 0x600
 8005dd2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005dd6:	d1c5      	bne.n	8005d64 <__ssvfscanf_r+0x62c>
 8005dd8:	2110      	movs	r1, #16
 8005dda:	f424 7400 	bic.w	r4, r4, #512	; 0x200
 8005dde:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
 8005de2:	9103      	str	r1, [sp, #12]
 8005de4:	e00b      	b.n	8005dfe <__ssvfscanf_r+0x6c6>
 8005de6:	0521      	lsls	r1, r4, #20
 8005de8:	d509      	bpl.n	8005dfe <__ssvfscanf_r+0x6c6>
 8005dea:	9903      	ldr	r1, [sp, #12]
 8005dec:	b919      	cbnz	r1, 8005df6 <__ssvfscanf_r+0x6be>
 8005dee:	2108      	movs	r1, #8
 8005df0:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8005df4:	9103      	str	r1, [sp, #12]
 8005df6:	0560      	lsls	r0, r4, #21
 8005df8:	d506      	bpl.n	8005e08 <__ssvfscanf_r+0x6d0>
 8005dfa:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
 8005dfe:	f889 3000 	strb.w	r3, [r9]
 8005e02:	f109 0901 	add.w	r9, r9, #1
 8005e06:	e00a      	b.n	8005e1e <__ssvfscanf_r+0x6e6>
 8005e08:	f424 7460 	bic.w	r4, r4, #896	; 0x380
 8005e0c:	f1ba 0f00 	cmp.w	sl, #0
 8005e10:	d002      	beq.n	8005e18 <__ssvfscanf_r+0x6e0>
 8005e12:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005e16:	3601      	adds	r6, #1
 8005e18:	9b07      	ldr	r3, [sp, #28]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	9307      	str	r3, [sp, #28]
 8005e1e:	686b      	ldr	r3, [r5, #4]
 8005e20:	3b01      	subs	r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	606b      	str	r3, [r5, #4]
 8005e26:	dd19      	ble.n	8005e5c <__ssvfscanf_r+0x724>
 8005e28:	3201      	adds	r2, #1
 8005e2a:	602a      	str	r2, [r5, #0]
 8005e2c:	3e01      	subs	r6, #1
 8005e2e:	d18c      	bne.n	8005d4a <__ssvfscanf_r+0x612>
 8005e30:	e798      	b.n	8005d64 <__ssvfscanf_r+0x62c>
 8005e32:	9803      	ldr	r0, [sp, #12]
 8005e34:	49ad      	ldr	r1, [pc, #692]	; (80060ec <__ssvfscanf_r+0x9b4>)
 8005e36:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8005e3a:	9103      	str	r1, [sp, #12]
 8005e3c:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
 8005e40:	e7dd      	b.n	8005dfe <__ssvfscanf_r+0x6c6>
 8005e42:	9803      	ldr	r0, [sp, #12]
 8005e44:	49a9      	ldr	r1, [pc, #676]	; (80060ec <__ssvfscanf_r+0x9b4>)
 8005e46:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8005e4a:	9103      	str	r1, [sp, #12]
 8005e4c:	2908      	cmp	r1, #8
 8005e4e:	dcf5      	bgt.n	8005e3c <__ssvfscanf_r+0x704>
 8005e50:	e788      	b.n	8005d64 <__ssvfscanf_r+0x62c>
 8005e52:	0621      	lsls	r1, r4, #24
 8005e54:	d586      	bpl.n	8005d64 <__ssvfscanf_r+0x62c>
 8005e56:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 8005e5a:	e7d0      	b.n	8005dfe <__ssvfscanf_r+0x6c6>
 8005e5c:	4629      	mov	r1, r5
 8005e5e:	4640      	mov	r0, r8
 8005e60:	f003 f87b 	bl	8008f5a <__ssrefill_r>
 8005e64:	2800      	cmp	r0, #0
 8005e66:	d0e1      	beq.n	8005e2c <__ssvfscanf_r+0x6f4>
 8005e68:	e77c      	b.n	8005d64 <__ssvfscanf_r+0x62c>
 8005e6a:	0766      	lsls	r6, r4, #29
 8005e6c:	d503      	bpl.n	8005e76 <__ssvfscanf_r+0x73e>
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	8010      	strh	r0, [r2, #0]
 8005e72:	461f      	mov	r7, r3
 8005e74:	e011      	b.n	8005e9a <__ssvfscanf_r+0x762>
 8005e76:	f014 0201 	ands.w	r2, r4, #1
 8005e7a:	d195      	bne.n	8005da8 <__ssvfscanf_r+0x670>
 8005e7c:	07a1      	lsls	r1, r4, #30
 8005e7e:	d593      	bpl.n	8005da8 <__ssvfscanf_r+0x670>
 8005e80:	4b9b      	ldr	r3, [pc, #620]	; (80060f0 <__ssvfscanf_r+0x9b8>)
 8005e82:	9905      	ldr	r1, [sp, #20]
 8005e84:	4640      	mov	r0, r8
 8005e86:	4299      	cmp	r1, r3
 8005e88:	9b03      	ldr	r3, [sp, #12]
 8005e8a:	a952      	add	r1, sp, #328	; 0x148
 8005e8c:	d10f      	bne.n	8005eae <__ssvfscanf_r+0x776>
 8005e8e:	f002 ff9b 	bl	8008dc8 <_strtoull_r>
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	3704      	adds	r7, #4
 8005e96:	e9c3 0100 	strd	r0, r1, [r3]
 8005e9a:	9b04      	ldr	r3, [sp, #16]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	9304      	str	r3, [sp, #16]
 8005ea0:	ab52      	add	r3, sp, #328	; 0x148
 8005ea2:	eba9 0903 	sub.w	r9, r9, r3
 8005ea6:	9b07      	ldr	r3, [sp, #28]
 8005ea8:	444b      	add	r3, r9
 8005eaa:	449b      	add	fp, r3
 8005eac:	e45c      	b.n	8005768 <__ssvfscanf_r+0x30>
 8005eae:	f002 fe49 	bl	8008b44 <_strtoll_r>
 8005eb2:	e7ee      	b.n	8005e92 <__ssvfscanf_r+0x75a>
 8005eb4:	4640      	mov	r0, r8
 8005eb6:	f001 f83f 	bl	8006f38 <_localeconv_r>
 8005eba:	6803      	ldr	r3, [r0, #0]
 8005ebc:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
 8005ec0:	930c      	str	r3, [sp, #48]	; 0x30
 8005ec2:	1e73      	subs	r3, r6, #1
 8005ec4:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8005ec8:	bf88      	it	hi
 8005eca:	f46f 7cae 	mvnhi.w	ip, #348	; 0x15c
 8005ece:	f04f 0300 	mov.w	r3, #0
 8005ed2:	bf8a      	itet	hi
 8005ed4:	44b4      	addhi	ip, r6
 8005ed6:	f04f 0c00 	movls.w	ip, #0
 8005eda:	f240 165d 	movwhi	r6, #349	; 0x15d
 8005ede:	930a      	str	r3, [sp, #40]	; 0x28
 8005ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ee2:	9307      	str	r3, [sp, #28]
 8005ee4:	9308      	str	r3, [sp, #32]
 8005ee6:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 8005eea:	682a      	ldr	r2, [r5, #0]
 8005eec:	7811      	ldrb	r1, [r2, #0]
 8005eee:	920b      	str	r2, [sp, #44]	; 0x2c
 8005ef0:	294e      	cmp	r1, #78	; 0x4e
 8005ef2:	f000 809f 	beq.w	8006034 <__ssvfscanf_r+0x8fc>
 8005ef6:	d83c      	bhi.n	8005f72 <__ssvfscanf_r+0x83a>
 8005ef8:	2939      	cmp	r1, #57	; 0x39
 8005efa:	d80e      	bhi.n	8005f1a <__ssvfscanf_r+0x7e2>
 8005efc:	2931      	cmp	r1, #49	; 0x31
 8005efe:	f080 808f 	bcs.w	8006020 <__ssvfscanf_r+0x8e8>
 8005f02:	292d      	cmp	r1, #45	; 0x2d
 8005f04:	d003      	beq.n	8005f0e <__ssvfscanf_r+0x7d6>
 8005f06:	2930      	cmp	r1, #48	; 0x30
 8005f08:	d06e      	beq.n	8005fe8 <__ssvfscanf_r+0x8b0>
 8005f0a:	292b      	cmp	r1, #43	; 0x2b
 8005f0c:	d10b      	bne.n	8005f26 <__ssvfscanf_r+0x7ee>
 8005f0e:	0622      	lsls	r2, r4, #24
 8005f10:	f140 80ab 	bpl.w	800606a <__ssvfscanf_r+0x932>
 8005f14:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 8005f18:	e087      	b.n	800602a <__ssvfscanf_r+0x8f2>
 8005f1a:	2945      	cmp	r1, #69	; 0x45
 8005f1c:	d03c      	beq.n	8005f98 <__ssvfscanf_r+0x860>
 8005f1e:	d810      	bhi.n	8005f42 <__ssvfscanf_r+0x80a>
 8005f20:	2941      	cmp	r1, #65	; 0x41
 8005f22:	f000 80a0 	beq.w	8006066 <__ssvfscanf_r+0x92e>
 8005f26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f28:	f892 e000 	ldrb.w	lr, [r2]
 8005f2c:	458e      	cmp	lr, r1
 8005f2e:	f040 809c 	bne.w	800606a <__ssvfscanf_r+0x932>
 8005f32:	05a0      	lsls	r0, r4, #22
 8005f34:	f140 8099 	bpl.w	800606a <__ssvfscanf_r+0x932>
 8005f38:	9a07      	ldr	r2, [sp, #28]
 8005f3a:	f424 7420 	bic.w	r4, r4, #640	; 0x280
 8005f3e:	9208      	str	r2, [sp, #32]
 8005f40:	e073      	b.n	800602a <__ssvfscanf_r+0x8f2>
 8005f42:	2946      	cmp	r1, #70	; 0x46
 8005f44:	f000 80a9 	beq.w	800609a <__ssvfscanf_r+0x962>
 8005f48:	2949      	cmp	r1, #73	; 0x49
 8005f4a:	d1ec      	bne.n	8005f26 <__ssvfscanf_r+0x7ee>
 8005f4c:	f1b9 0f00 	cmp.w	r9, #0
 8005f50:	f040 809d 	bne.w	800608e <__ssvfscanf_r+0x956>
 8005f54:	9807      	ldr	r0, [sp, #28]
 8005f56:	2800      	cmp	r0, #0
 8005f58:	f040 8089 	bne.w	800606e <__ssvfscanf_r+0x936>
 8005f5c:	f404 6ee0 	and.w	lr, r4, #1792	; 0x700
 8005f60:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
 8005f64:	f040 8085 	bne.w	8006072 <__ssvfscanf_r+0x93a>
 8005f68:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
 8005f6c:	f04f 0901 	mov.w	r9, #1
 8005f70:	e05b      	b.n	800602a <__ssvfscanf_r+0x8f2>
 8005f72:	2966      	cmp	r1, #102	; 0x66
 8005f74:	f000 8091 	beq.w	800609a <__ssvfscanf_r+0x962>
 8005f78:	d827      	bhi.n	8005fca <__ssvfscanf_r+0x892>
 8005f7a:	2959      	cmp	r1, #89	; 0x59
 8005f7c:	d02e      	beq.n	8005fdc <__ssvfscanf_r+0x8a4>
 8005f7e:	d807      	bhi.n	8005f90 <__ssvfscanf_r+0x858>
 8005f80:	2954      	cmp	r1, #84	; 0x54
 8005f82:	d1d0      	bne.n	8005f26 <__ssvfscanf_r+0x7ee>
 8005f84:	f1b9 0f06 	cmp.w	r9, #6
 8005f88:	d16f      	bne.n	800606a <__ssvfscanf_r+0x932>
 8005f8a:	f04f 0907 	mov.w	r9, #7
 8005f8e:	e04c      	b.n	800602a <__ssvfscanf_r+0x8f2>
 8005f90:	2961      	cmp	r1, #97	; 0x61
 8005f92:	d068      	beq.n	8006066 <__ssvfscanf_r+0x92e>
 8005f94:	2965      	cmp	r1, #101	; 0x65
 8005f96:	d1c6      	bne.n	8005f26 <__ssvfscanf_r+0x7ee>
 8005f98:	f404 6ea0 	and.w	lr, r4, #1280	; 0x500
 8005f9c:	f5be 6f80 	cmp.w	lr, #1024	; 0x400
 8005fa0:	d004      	beq.n	8005fac <__ssvfscanf_r+0x874>
 8005fa2:	0560      	lsls	r0, r4, #21
 8005fa4:	d561      	bpl.n	800606a <__ssvfscanf_r+0x932>
 8005fa6:	9807      	ldr	r0, [sp, #28]
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	d062      	beq.n	8006072 <__ssvfscanf_r+0x93a>
 8005fac:	05a2      	lsls	r2, r4, #22
 8005fae:	d405      	bmi.n	8005fbc <__ssvfscanf_r+0x884>
 8005fb0:	9807      	ldr	r0, [sp, #28]
 8005fb2:	9a08      	ldr	r2, [sp, #32]
 8005fb4:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8005fb8:	1a80      	subs	r0, r0, r2
 8005fba:	9009      	str	r0, [sp, #36]	; 0x24
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
 8005fc2:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
 8005fc6:	9207      	str	r2, [sp, #28]
 8005fc8:	e02f      	b.n	800602a <__ssvfscanf_r+0x8f2>
 8005fca:	296e      	cmp	r1, #110	; 0x6e
 8005fcc:	d032      	beq.n	8006034 <__ssvfscanf_r+0x8fc>
 8005fce:	d801      	bhi.n	8005fd4 <__ssvfscanf_r+0x89c>
 8005fd0:	2969      	cmp	r1, #105	; 0x69
 8005fd2:	e7ba      	b.n	8005f4a <__ssvfscanf_r+0x812>
 8005fd4:	2974      	cmp	r1, #116	; 0x74
 8005fd6:	d0d5      	beq.n	8005f84 <__ssvfscanf_r+0x84c>
 8005fd8:	2979      	cmp	r1, #121	; 0x79
 8005fda:	d1a4      	bne.n	8005f26 <__ssvfscanf_r+0x7ee>
 8005fdc:	f1b9 0f07 	cmp.w	r9, #7
 8005fe0:	d143      	bne.n	800606a <__ssvfscanf_r+0x932>
 8005fe2:	f04f 0908 	mov.w	r9, #8
 8005fe6:	e020      	b.n	800602a <__ssvfscanf_r+0x8f2>
 8005fe8:	05e0      	lsls	r0, r4, #23
 8005fea:	d519      	bpl.n	8006020 <__ssvfscanf_r+0x8e8>
 8005fec:	9907      	ldr	r1, [sp, #28]
 8005fee:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 8005ff2:	3101      	adds	r1, #1
 8005ff4:	9107      	str	r1, [sp, #28]
 8005ff6:	f1bc 0f00 	cmp.w	ip, #0
 8005ffa:	d002      	beq.n	8006002 <__ssvfscanf_r+0x8ca>
 8005ffc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8006000:	3601      	adds	r6, #1
 8006002:	6869      	ldr	r1, [r5, #4]
 8006004:	3e01      	subs	r6, #1
 8006006:	3901      	subs	r1, #1
 8006008:	2900      	cmp	r1, #0
 800600a:	f10b 0b01 	add.w	fp, fp, #1
 800600e:	6069      	str	r1, [r5, #4]
 8006010:	dd4d      	ble.n	80060ae <__ssvfscanf_r+0x976>
 8006012:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006014:	3001      	adds	r0, #1
 8006016:	6028      	str	r0, [r5, #0]
 8006018:	2e00      	cmp	r6, #0
 800601a:	f47f af66 	bne.w	8005eea <__ssvfscanf_r+0x7b2>
 800601e:	e024      	b.n	800606a <__ssvfscanf_r+0x932>
 8006020:	eb13 0f09 	cmn.w	r3, r9
 8006024:	d121      	bne.n	800606a <__ssvfscanf_r+0x932>
 8006026:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
 800602a:	f88a 1000 	strb.w	r1, [sl]
 800602e:	f10a 0a01 	add.w	sl, sl, #1
 8006032:	e7e6      	b.n	8006002 <__ssvfscanf_r+0x8ca>
 8006034:	b953      	cbnz	r3, 800604c <__ssvfscanf_r+0x914>
 8006036:	9807      	ldr	r0, [sp, #28]
 8006038:	b950      	cbnz	r0, 8006050 <__ssvfscanf_r+0x918>
 800603a:	f404 6ee0 	and.w	lr, r4, #1792	; 0x700
 800603e:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
 8006042:	d105      	bne.n	8006050 <__ssvfscanf_r+0x918>
 8006044:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
 8006048:	2301      	movs	r3, #1
 800604a:	e7ee      	b.n	800602a <__ssvfscanf_r+0x8f2>
 800604c:	2b02      	cmp	r3, #2
 800604e:	d02a      	beq.n	80060a6 <__ssvfscanf_r+0x96e>
 8006050:	f1b9 0f01 	cmp.w	r9, #1
 8006054:	d002      	beq.n	800605c <__ssvfscanf_r+0x924>
 8006056:	f1b9 0f04 	cmp.w	r9, #4
 800605a:	d106      	bne.n	800606a <__ssvfscanf_r+0x932>
 800605c:	f109 0901 	add.w	r9, r9, #1
 8006060:	fa5f f989 	uxtb.w	r9, r9
 8006064:	e7e1      	b.n	800602a <__ssvfscanf_r+0x8f2>
 8006066:	2b01      	cmp	r3, #1
 8006068:	d01f      	beq.n	80060aa <__ssvfscanf_r+0x972>
 800606a:	9a07      	ldr	r2, [sp, #28]
 800606c:	b10a      	cbz	r2, 8006072 <__ssvfscanf_r+0x93a>
 800606e:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8006072:	3b01      	subs	r3, #1
 8006074:	2b01      	cmp	r3, #1
 8006076:	d827      	bhi.n	80060c8 <__ssvfscanf_r+0x990>
 8006078:	ac52      	add	r4, sp, #328	; 0x148
 800607a:	45a2      	cmp	sl, r4
 800607c:	f67f ac44 	bls.w	8005908 <__ssvfscanf_r+0x1d0>
 8006080:	462a      	mov	r2, r5
 8006082:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
 8006086:	4640      	mov	r0, r8
 8006088:	f002 ff2a 	bl	8008ee0 <_sungetc_r>
 800608c:	e7f5      	b.n	800607a <__ssvfscanf_r+0x942>
 800608e:	f1b9 0f03 	cmp.w	r9, #3
 8006092:	d0e3      	beq.n	800605c <__ssvfscanf_r+0x924>
 8006094:	f1b9 0f05 	cmp.w	r9, #5
 8006098:	e7df      	b.n	800605a <__ssvfscanf_r+0x922>
 800609a:	f1b9 0f02 	cmp.w	r9, #2
 800609e:	d1e4      	bne.n	800606a <__ssvfscanf_r+0x932>
 80060a0:	f04f 0903 	mov.w	r9, #3
 80060a4:	e7c1      	b.n	800602a <__ssvfscanf_r+0x8f2>
 80060a6:	2303      	movs	r3, #3
 80060a8:	e7bf      	b.n	800602a <__ssvfscanf_r+0x8f2>
 80060aa:	2302      	movs	r3, #2
 80060ac:	e7bd      	b.n	800602a <__ssvfscanf_r+0x8f2>
 80060ae:	4629      	mov	r1, r5
 80060b0:	4640      	mov	r0, r8
 80060b2:	930d      	str	r3, [sp, #52]	; 0x34
 80060b4:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80060b8:	f002 ff4f 	bl	8008f5a <__ssrefill_r>
 80060bc:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 80060c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060c2:	2800      	cmp	r0, #0
 80060c4:	d0a8      	beq.n	8006018 <__ssvfscanf_r+0x8e0>
 80060c6:	e7d0      	b.n	800606a <__ssvfscanf_r+0x932>
 80060c8:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 80060cc:	2b06      	cmp	r3, #6
 80060ce:	d81b      	bhi.n	8006108 <__ssvfscanf_r+0x9d0>
 80060d0:	f1b9 0f02 	cmp.w	r9, #2
 80060d4:	d80e      	bhi.n	80060f4 <__ssvfscanf_r+0x9bc>
 80060d6:	ac52      	add	r4, sp, #328	; 0x148
 80060d8:	45a2      	cmp	sl, r4
 80060da:	f67f ac15 	bls.w	8005908 <__ssvfscanf_r+0x1d0>
 80060de:	462a      	mov	r2, r5
 80060e0:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
 80060e4:	4640      	mov	r0, r8
 80060e6:	f002 fefb 	bl	8008ee0 <_sungetc_r>
 80060ea:	e7f5      	b.n	80060d8 <__ssvfscanf_r+0x9a0>
 80060ec:	08009fd2 	.word	0x08009fd2
 80060f0:	08008c65 	.word	0x08008c65
 80060f4:	f1a9 0903 	sub.w	r9, r9, #3
 80060f8:	fa5f f989 	uxtb.w	r9, r9
 80060fc:	ebaa 0609 	sub.w	r6, sl, r9
 8006100:	45b2      	cmp	sl, r6
 8006102:	d110      	bne.n	8006126 <__ssvfscanf_r+0x9ee>
 8006104:	ebab 0b09 	sub.w	fp, fp, r9
 8006108:	05e2      	lsls	r2, r4, #23
 800610a:	d52d      	bpl.n	8006168 <__ssvfscanf_r+0xa30>
 800610c:	0563      	lsls	r3, r4, #21
 800610e:	d511      	bpl.n	8006134 <__ssvfscanf_r+0x9fc>
 8006110:	ac52      	add	r4, sp, #328	; 0x148
 8006112:	45a2      	cmp	sl, r4
 8006114:	f67f abf8 	bls.w	8005908 <__ssvfscanf_r+0x1d0>
 8006118:	462a      	mov	r2, r5
 800611a:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
 800611e:	4640      	mov	r0, r8
 8006120:	f002 fede 	bl	8008ee0 <_sungetc_r>
 8006124:	e7f5      	b.n	8006112 <__ssvfscanf_r+0x9da>
 8006126:	462a      	mov	r2, r5
 8006128:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
 800612c:	4640      	mov	r0, r8
 800612e:	f002 fed7 	bl	8008ee0 <_sungetc_r>
 8006132:	e7e5      	b.n	8006100 <__ssvfscanf_r+0x9c8>
 8006134:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 8006138:	f10a 36ff 	add.w	r6, sl, #4294967295	; 0xffffffff
 800613c:	2965      	cmp	r1, #101	; 0x65
 800613e:	f10b 39ff 	add.w	r9, fp, #4294967295	; 0xffffffff
 8006142:	d00b      	beq.n	800615c <__ssvfscanf_r+0xa24>
 8006144:	2945      	cmp	r1, #69	; 0x45
 8006146:	d009      	beq.n	800615c <__ssvfscanf_r+0xa24>
 8006148:	462a      	mov	r2, r5
 800614a:	4640      	mov	r0, r8
 800614c:	f002 fec8 	bl	8008ee0 <_sungetc_r>
 8006150:	f81a 1c02 	ldrb.w	r1, [sl, #-2]
 8006154:	f1aa 0602 	sub.w	r6, sl, #2
 8006158:	f1ab 0902 	sub.w	r9, fp, #2
 800615c:	462a      	mov	r2, r5
 800615e:	4640      	mov	r0, r8
 8006160:	f002 febe 	bl	8008ee0 <_sungetc_r>
 8006164:	46cb      	mov	fp, r9
 8006166:	46b2      	mov	sl, r6
 8006168:	f014 0210 	ands.w	r2, r4, #16
 800616c:	f47f aafc 	bne.w	8005768 <__ssvfscanf_r+0x30>
 8006170:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
 8006174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006178:	f88a 2000 	strb.w	r2, [sl]
 800617c:	d119      	bne.n	80061b2 <__ssvfscanf_r+0xa7a>
 800617e:	9a08      	ldr	r2, [sp, #32]
 8006180:	9b07      	ldr	r3, [sp, #28]
 8006182:	1a9b      	subs	r3, r3, r2
 8006184:	425a      	negs	r2, r3
 8006186:	bb0b      	cbnz	r3, 80061cc <__ssvfscanf_r+0xa94>
 8006188:	2200      	movs	r2, #0
 800618a:	a952      	add	r1, sp, #328	; 0x148
 800618c:	4640      	mov	r0, r8
 800618e:	f002 fb93 	bl	80088b8 <_strtod_r>
 8006192:	f014 0f01 	tst.w	r4, #1
 8006196:	4681      	mov	r9, r0
 8006198:	468a      	mov	sl, r1
 800619a:	f107 0604 	add.w	r6, r7, #4
 800619e:	d020      	beq.n	80061e2 <__ssvfscanf_r+0xaaa>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	e883 0600 	stmia.w	r3, {r9, sl}
 80061a6:	9b04      	ldr	r3, [sp, #16]
 80061a8:	4637      	mov	r7, r6
 80061aa:	3301      	adds	r3, #1
 80061ac:	9304      	str	r3, [sp, #16]
 80061ae:	f7ff badb 	b.w	8005768 <__ssvfscanf_r+0x30>
 80061b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d0e7      	beq.n	8006188 <__ssvfscanf_r+0xa50>
 80061b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80061ba:	230a      	movs	r3, #10
 80061bc:	3101      	adds	r1, #1
 80061be:	4640      	mov	r0, r8
 80061c0:	f002 fc0a 	bl	80089d8 <_strtol_r>
 80061c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061c6:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80061ca:	1ac2      	subs	r2, r0, r3
 80061cc:	f20d 239b 	addw	r3, sp, #667	; 0x29b
 80061d0:	459a      	cmp	sl, r3
 80061d2:	bf28      	it	cs
 80061d4:	f20d 2a9a 	addwcs	sl, sp, #666	; 0x29a
 80061d8:	490d      	ldr	r1, [pc, #52]	; (8006210 <__ssvfscanf_r+0xad8>)
 80061da:	4650      	mov	r0, sl
 80061dc:	f7fe fa8c 	bl	80046f8 <sprintf>
 80061e0:	e7d2      	b.n	8006188 <__ssvfscanf_r+0xa50>
 80061e2:	f014 0402 	ands.w	r4, r4, #2
 80061e6:	d1db      	bne.n	80061a0 <__ssvfscanf_r+0xa68>
 80061e8:	4602      	mov	r2, r0
 80061ea:	460b      	mov	r3, r1
 80061ec:	683f      	ldr	r7, [r7, #0]
 80061ee:	f7fa fc13 	bl	8000a18 <__aeabi_dcmpun>
 80061f2:	b120      	cbz	r0, 80061fe <__ssvfscanf_r+0xac6>
 80061f4:	4620      	mov	r0, r4
 80061f6:	f001 fd41 	bl	8007c7c <nanf>
 80061fa:	6038      	str	r0, [r7, #0]
 80061fc:	e7d3      	b.n	80061a6 <__ssvfscanf_r+0xa6e>
 80061fe:	4648      	mov	r0, r9
 8006200:	4651      	mov	r1, sl
 8006202:	f7fa fc67 	bl	8000ad4 <__aeabi_d2f>
 8006206:	e7f8      	b.n	80061fa <__ssvfscanf_r+0xac2>
 8006208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800620c:	f7ff bb92 	b.w	8005934 <__ssvfscanf_r+0x1fc>
 8006210:	08009fcc 	.word	0x08009fcc

08006214 <quorem>:
 8006214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006218:	6903      	ldr	r3, [r0, #16]
 800621a:	690c      	ldr	r4, [r1, #16]
 800621c:	4680      	mov	r8, r0
 800621e:	429c      	cmp	r4, r3
 8006220:	f300 8082 	bgt.w	8006328 <quorem+0x114>
 8006224:	3c01      	subs	r4, #1
 8006226:	f101 0714 	add.w	r7, r1, #20
 800622a:	f100 0614 	add.w	r6, r0, #20
 800622e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006232:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006236:	3501      	adds	r5, #1
 8006238:	fbb0 f5f5 	udiv	r5, r0, r5
 800623c:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8006240:	eb06 030e 	add.w	r3, r6, lr
 8006244:	eb07 090e 	add.w	r9, r7, lr
 8006248:	9301      	str	r3, [sp, #4]
 800624a:	b38d      	cbz	r5, 80062b0 <quorem+0x9c>
 800624c:	f04f 0a00 	mov.w	sl, #0
 8006250:	4638      	mov	r0, r7
 8006252:	46b4      	mov	ip, r6
 8006254:	46d3      	mov	fp, sl
 8006256:	f850 2b04 	ldr.w	r2, [r0], #4
 800625a:	b293      	uxth	r3, r2
 800625c:	fb05 a303 	mla	r3, r5, r3, sl
 8006260:	0c12      	lsrs	r2, r2, #16
 8006262:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006266:	fb05 a202 	mla	r2, r5, r2, sl
 800626a:	b29b      	uxth	r3, r3
 800626c:	ebab 0303 	sub.w	r3, fp, r3
 8006270:	f8bc b000 	ldrh.w	fp, [ip]
 8006274:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006278:	445b      	add	r3, fp
 800627a:	fa1f fb82 	uxth.w	fp, r2
 800627e:	f8dc 2000 	ldr.w	r2, [ip]
 8006282:	4581      	cmp	r9, r0
 8006284:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006288:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800628c:	b29b      	uxth	r3, r3
 800628e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006292:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006296:	f84c 3b04 	str.w	r3, [ip], #4
 800629a:	d2dc      	bcs.n	8006256 <quorem+0x42>
 800629c:	f856 300e 	ldr.w	r3, [r6, lr]
 80062a0:	b933      	cbnz	r3, 80062b0 <quorem+0x9c>
 80062a2:	9b01      	ldr	r3, [sp, #4]
 80062a4:	3b04      	subs	r3, #4
 80062a6:	429e      	cmp	r6, r3
 80062a8:	461a      	mov	r2, r3
 80062aa:	d331      	bcc.n	8006310 <quorem+0xfc>
 80062ac:	f8c8 4010 	str.w	r4, [r8, #16]
 80062b0:	4640      	mov	r0, r8
 80062b2:	f001 fb02 	bl	80078ba <__mcmp>
 80062b6:	2800      	cmp	r0, #0
 80062b8:	db26      	blt.n	8006308 <quorem+0xf4>
 80062ba:	4630      	mov	r0, r6
 80062bc:	f04f 0e00 	mov.w	lr, #0
 80062c0:	3501      	adds	r5, #1
 80062c2:	f857 1b04 	ldr.w	r1, [r7], #4
 80062c6:	f8d0 c000 	ldr.w	ip, [r0]
 80062ca:	b28b      	uxth	r3, r1
 80062cc:	ebae 0303 	sub.w	r3, lr, r3
 80062d0:	fa1f f28c 	uxth.w	r2, ip
 80062d4:	4413      	add	r3, r2
 80062d6:	0c0a      	lsrs	r2, r1, #16
 80062d8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80062dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062e6:	45b9      	cmp	r9, r7
 80062e8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80062ec:	f840 3b04 	str.w	r3, [r0], #4
 80062f0:	d2e7      	bcs.n	80062c2 <quorem+0xae>
 80062f2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80062f6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80062fa:	b92a      	cbnz	r2, 8006308 <quorem+0xf4>
 80062fc:	3b04      	subs	r3, #4
 80062fe:	429e      	cmp	r6, r3
 8006300:	461a      	mov	r2, r3
 8006302:	d30b      	bcc.n	800631c <quorem+0x108>
 8006304:	f8c8 4010 	str.w	r4, [r8, #16]
 8006308:	4628      	mov	r0, r5
 800630a:	b003      	add	sp, #12
 800630c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006310:	6812      	ldr	r2, [r2, #0]
 8006312:	3b04      	subs	r3, #4
 8006314:	2a00      	cmp	r2, #0
 8006316:	d1c9      	bne.n	80062ac <quorem+0x98>
 8006318:	3c01      	subs	r4, #1
 800631a:	e7c4      	b.n	80062a6 <quorem+0x92>
 800631c:	6812      	ldr	r2, [r2, #0]
 800631e:	3b04      	subs	r3, #4
 8006320:	2a00      	cmp	r2, #0
 8006322:	d1ef      	bne.n	8006304 <quorem+0xf0>
 8006324:	3c01      	subs	r4, #1
 8006326:	e7ea      	b.n	80062fe <quorem+0xea>
 8006328:	2000      	movs	r0, #0
 800632a:	e7ee      	b.n	800630a <quorem+0xf6>
 800632c:	0000      	movs	r0, r0
	...

08006330 <_dtoa_r>:
 8006330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006334:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006336:	b095      	sub	sp, #84	; 0x54
 8006338:	4604      	mov	r4, r0
 800633a:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800633c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006340:	b93e      	cbnz	r6, 8006352 <_dtoa_r+0x22>
 8006342:	2010      	movs	r0, #16
 8006344:	f000 fe06 	bl	8006f54 <malloc>
 8006348:	6260      	str	r0, [r4, #36]	; 0x24
 800634a:	6046      	str	r6, [r0, #4]
 800634c:	6086      	str	r6, [r0, #8]
 800634e:	6006      	str	r6, [r0, #0]
 8006350:	60c6      	str	r6, [r0, #12]
 8006352:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006354:	6819      	ldr	r1, [r3, #0]
 8006356:	b151      	cbz	r1, 800636e <_dtoa_r+0x3e>
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	2301      	movs	r3, #1
 800635c:	4093      	lsls	r3, r2
 800635e:	604a      	str	r2, [r1, #4]
 8006360:	608b      	str	r3, [r1, #8]
 8006362:	4620      	mov	r0, r4
 8006364:	f001 f896 	bl	8007494 <_Bfree>
 8006368:	2200      	movs	r2, #0
 800636a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	9b03      	ldr	r3, [sp, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	bfb7      	itett	lt
 8006374:	2301      	movlt	r3, #1
 8006376:	2300      	movge	r3, #0
 8006378:	602b      	strlt	r3, [r5, #0]
 800637a:	9b03      	ldrlt	r3, [sp, #12]
 800637c:	bfae      	itee	ge
 800637e:	602b      	strge	r3, [r5, #0]
 8006380:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006384:	9303      	strlt	r3, [sp, #12]
 8006386:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800638a:	4bab      	ldr	r3, [pc, #684]	; (8006638 <_dtoa_r+0x308>)
 800638c:	ea33 0309 	bics.w	r3, r3, r9
 8006390:	d11b      	bne.n	80063ca <_dtoa_r+0x9a>
 8006392:	f242 730f 	movw	r3, #9999	; 0x270f
 8006396:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	9b02      	ldr	r3, [sp, #8]
 800639c:	b923      	cbnz	r3, 80063a8 <_dtoa_r+0x78>
 800639e:	f3c9 0013 	ubfx	r0, r9, #0, #20
 80063a2:	2800      	cmp	r0, #0
 80063a4:	f000 8583 	beq.w	8006eae <_dtoa_r+0xb7e>
 80063a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063aa:	b953      	cbnz	r3, 80063c2 <_dtoa_r+0x92>
 80063ac:	4ba3      	ldr	r3, [pc, #652]	; (800663c <_dtoa_r+0x30c>)
 80063ae:	e021      	b.n	80063f4 <_dtoa_r+0xc4>
 80063b0:	4ba3      	ldr	r3, [pc, #652]	; (8006640 <_dtoa_r+0x310>)
 80063b2:	9306      	str	r3, [sp, #24]
 80063b4:	3308      	adds	r3, #8
 80063b6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	9806      	ldr	r0, [sp, #24]
 80063bc:	b015      	add	sp, #84	; 0x54
 80063be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c2:	4b9e      	ldr	r3, [pc, #632]	; (800663c <_dtoa_r+0x30c>)
 80063c4:	9306      	str	r3, [sp, #24]
 80063c6:	3303      	adds	r3, #3
 80063c8:	e7f5      	b.n	80063b6 <_dtoa_r+0x86>
 80063ca:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80063ce:	2200      	movs	r2, #0
 80063d0:	2300      	movs	r3, #0
 80063d2:	4630      	mov	r0, r6
 80063d4:	4639      	mov	r1, r7
 80063d6:	f7fa faed 	bl	80009b4 <__aeabi_dcmpeq>
 80063da:	4680      	mov	r8, r0
 80063dc:	b160      	cbz	r0, 80063f8 <_dtoa_r+0xc8>
 80063de:	2301      	movs	r3, #1
 80063e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80063e2:	6013      	str	r3, [r2, #0]
 80063e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 855e 	beq.w	8006ea8 <_dtoa_r+0xb78>
 80063ec:	4b95      	ldr	r3, [pc, #596]	; (8006644 <_dtoa_r+0x314>)
 80063ee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	3b01      	subs	r3, #1
 80063f4:	9306      	str	r3, [sp, #24]
 80063f6:	e7e0      	b.n	80063ba <_dtoa_r+0x8a>
 80063f8:	ab12      	add	r3, sp, #72	; 0x48
 80063fa:	9301      	str	r3, [sp, #4]
 80063fc:	ab13      	add	r3, sp, #76	; 0x4c
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	4632      	mov	r2, r6
 8006402:	463b      	mov	r3, r7
 8006404:	4620      	mov	r0, r4
 8006406:	f001 fb47 	bl	8007a98 <__d2b>
 800640a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800640e:	4682      	mov	sl, r0
 8006410:	2d00      	cmp	r5, #0
 8006412:	d07d      	beq.n	8006510 <_dtoa_r+0x1e0>
 8006414:	4630      	mov	r0, r6
 8006416:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800641a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800641e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006422:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006426:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800642a:	2200      	movs	r2, #0
 800642c:	4b86      	ldr	r3, [pc, #536]	; (8006648 <_dtoa_r+0x318>)
 800642e:	f7f9 fea5 	bl	800017c <__aeabi_dsub>
 8006432:	a37b      	add	r3, pc, #492	; (adr r3, 8006620 <_dtoa_r+0x2f0>)
 8006434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006438:	f7fa f854 	bl	80004e4 <__aeabi_dmul>
 800643c:	a37a      	add	r3, pc, #488	; (adr r3, 8006628 <_dtoa_r+0x2f8>)
 800643e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006442:	f7f9 fe9d 	bl	8000180 <__adddf3>
 8006446:	4606      	mov	r6, r0
 8006448:	4628      	mov	r0, r5
 800644a:	460f      	mov	r7, r1
 800644c:	f7f9 ffe4 	bl	8000418 <__aeabi_i2d>
 8006450:	a377      	add	r3, pc, #476	; (adr r3, 8006630 <_dtoa_r+0x300>)
 8006452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006456:	f7fa f845 	bl	80004e4 <__aeabi_dmul>
 800645a:	4602      	mov	r2, r0
 800645c:	460b      	mov	r3, r1
 800645e:	4630      	mov	r0, r6
 8006460:	4639      	mov	r1, r7
 8006462:	f7f9 fe8d 	bl	8000180 <__adddf3>
 8006466:	4606      	mov	r6, r0
 8006468:	460f      	mov	r7, r1
 800646a:	f7fa faeb 	bl	8000a44 <__aeabi_d2iz>
 800646e:	2200      	movs	r2, #0
 8006470:	4683      	mov	fp, r0
 8006472:	2300      	movs	r3, #0
 8006474:	4630      	mov	r0, r6
 8006476:	4639      	mov	r1, r7
 8006478:	f7fa faa6 	bl	80009c8 <__aeabi_dcmplt>
 800647c:	b158      	cbz	r0, 8006496 <_dtoa_r+0x166>
 800647e:	4658      	mov	r0, fp
 8006480:	f7f9 ffca 	bl	8000418 <__aeabi_i2d>
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	4630      	mov	r0, r6
 800648a:	4639      	mov	r1, r7
 800648c:	f7fa fa92 	bl	80009b4 <__aeabi_dcmpeq>
 8006490:	b908      	cbnz	r0, 8006496 <_dtoa_r+0x166>
 8006492:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006496:	f1bb 0f16 	cmp.w	fp, #22
 800649a:	d858      	bhi.n	800654e <_dtoa_r+0x21e>
 800649c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064a0:	496a      	ldr	r1, [pc, #424]	; (800664c <_dtoa_r+0x31c>)
 80064a2:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80064a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064aa:	f7fa faab 	bl	8000a04 <__aeabi_dcmpgt>
 80064ae:	2800      	cmp	r0, #0
 80064b0:	d04f      	beq.n	8006552 <_dtoa_r+0x222>
 80064b2:	2300      	movs	r3, #0
 80064b4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80064b8:	930d      	str	r3, [sp, #52]	; 0x34
 80064ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064bc:	1b5d      	subs	r5, r3, r5
 80064be:	1e6b      	subs	r3, r5, #1
 80064c0:	9307      	str	r3, [sp, #28]
 80064c2:	bf43      	ittte	mi
 80064c4:	2300      	movmi	r3, #0
 80064c6:	f1c5 0801 	rsbmi	r8, r5, #1
 80064ca:	9307      	strmi	r3, [sp, #28]
 80064cc:	f04f 0800 	movpl.w	r8, #0
 80064d0:	f1bb 0f00 	cmp.w	fp, #0
 80064d4:	db3f      	blt.n	8006556 <_dtoa_r+0x226>
 80064d6:	9b07      	ldr	r3, [sp, #28]
 80064d8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80064dc:	445b      	add	r3, fp
 80064de:	9307      	str	r3, [sp, #28]
 80064e0:	2300      	movs	r3, #0
 80064e2:	9308      	str	r3, [sp, #32]
 80064e4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80064e6:	2b09      	cmp	r3, #9
 80064e8:	f200 80b4 	bhi.w	8006654 <_dtoa_r+0x324>
 80064ec:	2b05      	cmp	r3, #5
 80064ee:	bfc4      	itt	gt
 80064f0:	3b04      	subgt	r3, #4
 80064f2:	931e      	strgt	r3, [sp, #120]	; 0x78
 80064f4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80064f6:	bfc8      	it	gt
 80064f8:	2600      	movgt	r6, #0
 80064fa:	f1a3 0302 	sub.w	r3, r3, #2
 80064fe:	bfd8      	it	le
 8006500:	2601      	movle	r6, #1
 8006502:	2b03      	cmp	r3, #3
 8006504:	f200 80b2 	bhi.w	800666c <_dtoa_r+0x33c>
 8006508:	e8df f003 	tbb	[pc, r3]
 800650c:	782d8684 	.word	0x782d8684
 8006510:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006512:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8006514:	441d      	add	r5, r3
 8006516:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800651a:	2b20      	cmp	r3, #32
 800651c:	dd11      	ble.n	8006542 <_dtoa_r+0x212>
 800651e:	9a02      	ldr	r2, [sp, #8]
 8006520:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006524:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006528:	fa22 f000 	lsr.w	r0, r2, r0
 800652c:	fa09 f303 	lsl.w	r3, r9, r3
 8006530:	4318      	orrs	r0, r3
 8006532:	f7f9 ff61 	bl	80003f8 <__aeabi_ui2d>
 8006536:	2301      	movs	r3, #1
 8006538:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800653c:	3d01      	subs	r5, #1
 800653e:	9310      	str	r3, [sp, #64]	; 0x40
 8006540:	e773      	b.n	800642a <_dtoa_r+0xfa>
 8006542:	f1c3 0020 	rsb	r0, r3, #32
 8006546:	9b02      	ldr	r3, [sp, #8]
 8006548:	fa03 f000 	lsl.w	r0, r3, r0
 800654c:	e7f1      	b.n	8006532 <_dtoa_r+0x202>
 800654e:	2301      	movs	r3, #1
 8006550:	e7b2      	b.n	80064b8 <_dtoa_r+0x188>
 8006552:	900d      	str	r0, [sp, #52]	; 0x34
 8006554:	e7b1      	b.n	80064ba <_dtoa_r+0x18a>
 8006556:	f1cb 0300 	rsb	r3, fp, #0
 800655a:	9308      	str	r3, [sp, #32]
 800655c:	2300      	movs	r3, #0
 800655e:	eba8 080b 	sub.w	r8, r8, fp
 8006562:	930c      	str	r3, [sp, #48]	; 0x30
 8006564:	e7be      	b.n	80064e4 <_dtoa_r+0x1b4>
 8006566:	2301      	movs	r3, #1
 8006568:	9309      	str	r3, [sp, #36]	; 0x24
 800656a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800656c:	2b00      	cmp	r3, #0
 800656e:	f340 8080 	ble.w	8006672 <_dtoa_r+0x342>
 8006572:	4699      	mov	r9, r3
 8006574:	9304      	str	r3, [sp, #16]
 8006576:	2200      	movs	r2, #0
 8006578:	2104      	movs	r1, #4
 800657a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800657c:	606a      	str	r2, [r5, #4]
 800657e:	f101 0214 	add.w	r2, r1, #20
 8006582:	429a      	cmp	r2, r3
 8006584:	d97a      	bls.n	800667c <_dtoa_r+0x34c>
 8006586:	6869      	ldr	r1, [r5, #4]
 8006588:	4620      	mov	r0, r4
 800658a:	f000 ff4f 	bl	800742c <_Balloc>
 800658e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006590:	6028      	str	r0, [r5, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f1b9 0f0e 	cmp.w	r9, #14
 8006598:	9306      	str	r3, [sp, #24]
 800659a:	f200 80f0 	bhi.w	800677e <_dtoa_r+0x44e>
 800659e:	2e00      	cmp	r6, #0
 80065a0:	f000 80ed 	beq.w	800677e <_dtoa_r+0x44e>
 80065a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065a8:	f1bb 0f00 	cmp.w	fp, #0
 80065ac:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80065b0:	dd79      	ble.n	80066a6 <_dtoa_r+0x376>
 80065b2:	4a26      	ldr	r2, [pc, #152]	; (800664c <_dtoa_r+0x31c>)
 80065b4:	f00b 030f 	and.w	r3, fp, #15
 80065b8:	ea4f 162b 	mov.w	r6, fp, asr #4
 80065bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80065c0:	06f0      	lsls	r0, r6, #27
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80065ca:	d55c      	bpl.n	8006686 <_dtoa_r+0x356>
 80065cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80065d0:	4b1f      	ldr	r3, [pc, #124]	; (8006650 <_dtoa_r+0x320>)
 80065d2:	2503      	movs	r5, #3
 80065d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80065d8:	f7fa f8ae 	bl	8000738 <__aeabi_ddiv>
 80065dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065e0:	f006 060f 	and.w	r6, r6, #15
 80065e4:	4f1a      	ldr	r7, [pc, #104]	; (8006650 <_dtoa_r+0x320>)
 80065e6:	2e00      	cmp	r6, #0
 80065e8:	d14f      	bne.n	800668a <_dtoa_r+0x35a>
 80065ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80065ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065f2:	f7fa f8a1 	bl	8000738 <__aeabi_ddiv>
 80065f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065fa:	e06e      	b.n	80066da <_dtoa_r+0x3aa>
 80065fc:	2301      	movs	r3, #1
 80065fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006600:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006602:	445b      	add	r3, fp
 8006604:	f103 0901 	add.w	r9, r3, #1
 8006608:	9304      	str	r3, [sp, #16]
 800660a:	464b      	mov	r3, r9
 800660c:	2b01      	cmp	r3, #1
 800660e:	bfb8      	it	lt
 8006610:	2301      	movlt	r3, #1
 8006612:	e7b0      	b.n	8006576 <_dtoa_r+0x246>
 8006614:	2300      	movs	r3, #0
 8006616:	e7a7      	b.n	8006568 <_dtoa_r+0x238>
 8006618:	2300      	movs	r3, #0
 800661a:	e7f0      	b.n	80065fe <_dtoa_r+0x2ce>
 800661c:	f3af 8000 	nop.w
 8006620:	636f4361 	.word	0x636f4361
 8006624:	3fd287a7 	.word	0x3fd287a7
 8006628:	8b60c8b3 	.word	0x8b60c8b3
 800662c:	3fc68a28 	.word	0x3fc68a28
 8006630:	509f79fb 	.word	0x509f79fb
 8006634:	3fd34413 	.word	0x3fd34413
 8006638:	7ff00000 	.word	0x7ff00000
 800663c:	08009ffd 	.word	0x08009ffd
 8006640:	08009ff4 	.word	0x08009ff4
 8006644:	08009fab 	.word	0x08009fab
 8006648:	3ff80000 	.word	0x3ff80000
 800664c:	0800a038 	.word	0x0800a038
 8006650:	0800a010 	.word	0x0800a010
 8006654:	2601      	movs	r6, #1
 8006656:	2300      	movs	r3, #0
 8006658:	9609      	str	r6, [sp, #36]	; 0x24
 800665a:	931e      	str	r3, [sp, #120]	; 0x78
 800665c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006660:	2200      	movs	r2, #0
 8006662:	9304      	str	r3, [sp, #16]
 8006664:	4699      	mov	r9, r3
 8006666:	2312      	movs	r3, #18
 8006668:	921f      	str	r2, [sp, #124]	; 0x7c
 800666a:	e784      	b.n	8006576 <_dtoa_r+0x246>
 800666c:	2301      	movs	r3, #1
 800666e:	9309      	str	r3, [sp, #36]	; 0x24
 8006670:	e7f4      	b.n	800665c <_dtoa_r+0x32c>
 8006672:	2301      	movs	r3, #1
 8006674:	9304      	str	r3, [sp, #16]
 8006676:	4699      	mov	r9, r3
 8006678:	461a      	mov	r2, r3
 800667a:	e7f5      	b.n	8006668 <_dtoa_r+0x338>
 800667c:	686a      	ldr	r2, [r5, #4]
 800667e:	0049      	lsls	r1, r1, #1
 8006680:	3201      	adds	r2, #1
 8006682:	606a      	str	r2, [r5, #4]
 8006684:	e77b      	b.n	800657e <_dtoa_r+0x24e>
 8006686:	2502      	movs	r5, #2
 8006688:	e7ac      	b.n	80065e4 <_dtoa_r+0x2b4>
 800668a:	07f1      	lsls	r1, r6, #31
 800668c:	d508      	bpl.n	80066a0 <_dtoa_r+0x370>
 800668e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006692:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006696:	f7f9 ff25 	bl	80004e4 <__aeabi_dmul>
 800669a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800669e:	3501      	adds	r5, #1
 80066a0:	1076      	asrs	r6, r6, #1
 80066a2:	3708      	adds	r7, #8
 80066a4:	e79f      	b.n	80065e6 <_dtoa_r+0x2b6>
 80066a6:	f000 80a5 	beq.w	80067f4 <_dtoa_r+0x4c4>
 80066aa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80066ae:	f1cb 0600 	rsb	r6, fp, #0
 80066b2:	4ba2      	ldr	r3, [pc, #648]	; (800693c <_dtoa_r+0x60c>)
 80066b4:	f006 020f 	and.w	r2, r6, #15
 80066b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c0:	f7f9 ff10 	bl	80004e4 <__aeabi_dmul>
 80066c4:	2502      	movs	r5, #2
 80066c6:	2300      	movs	r3, #0
 80066c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066cc:	4f9c      	ldr	r7, [pc, #624]	; (8006940 <_dtoa_r+0x610>)
 80066ce:	1136      	asrs	r6, r6, #4
 80066d0:	2e00      	cmp	r6, #0
 80066d2:	f040 8084 	bne.w	80067de <_dtoa_r+0x4ae>
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d18d      	bne.n	80065f6 <_dtoa_r+0x2c6>
 80066da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 808b 	beq.w	80067f8 <_dtoa_r+0x4c8>
 80066e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80066ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80066ee:	2200      	movs	r2, #0
 80066f0:	4b94      	ldr	r3, [pc, #592]	; (8006944 <_dtoa_r+0x614>)
 80066f2:	f7fa f969 	bl	80009c8 <__aeabi_dcmplt>
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d07e      	beq.n	80067f8 <_dtoa_r+0x4c8>
 80066fa:	f1b9 0f00 	cmp.w	r9, #0
 80066fe:	d07b      	beq.n	80067f8 <_dtoa_r+0x4c8>
 8006700:	9b04      	ldr	r3, [sp, #16]
 8006702:	2b00      	cmp	r3, #0
 8006704:	dd37      	ble.n	8006776 <_dtoa_r+0x446>
 8006706:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800670a:	2200      	movs	r2, #0
 800670c:	4b8e      	ldr	r3, [pc, #568]	; (8006948 <_dtoa_r+0x618>)
 800670e:	f7f9 fee9 	bl	80004e4 <__aeabi_dmul>
 8006712:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006716:	9e04      	ldr	r6, [sp, #16]
 8006718:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800671c:	3501      	adds	r5, #1
 800671e:	4628      	mov	r0, r5
 8006720:	f7f9 fe7a 	bl	8000418 <__aeabi_i2d>
 8006724:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006728:	f7f9 fedc 	bl	80004e4 <__aeabi_dmul>
 800672c:	4b87      	ldr	r3, [pc, #540]	; (800694c <_dtoa_r+0x61c>)
 800672e:	2200      	movs	r2, #0
 8006730:	f7f9 fd26 	bl	8000180 <__adddf3>
 8006734:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800673a:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 800673e:	950b      	str	r5, [sp, #44]	; 0x2c
 8006740:	2e00      	cmp	r6, #0
 8006742:	d15c      	bne.n	80067fe <_dtoa_r+0x4ce>
 8006744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006748:	2200      	movs	r2, #0
 800674a:	4b81      	ldr	r3, [pc, #516]	; (8006950 <_dtoa_r+0x620>)
 800674c:	f7f9 fd16 	bl	800017c <__aeabi_dsub>
 8006750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006752:	462b      	mov	r3, r5
 8006754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006758:	f7fa f954 	bl	8000a04 <__aeabi_dcmpgt>
 800675c:	2800      	cmp	r0, #0
 800675e:	f040 82f7 	bne.w	8006d50 <_dtoa_r+0xa20>
 8006762:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006766:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006768:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800676c:	f7fa f92c 	bl	80009c8 <__aeabi_dcmplt>
 8006770:	2800      	cmp	r0, #0
 8006772:	f040 82eb 	bne.w	8006d4c <_dtoa_r+0xa1c>
 8006776:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800677a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800677e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006780:	2b00      	cmp	r3, #0
 8006782:	f2c0 8150 	blt.w	8006a26 <_dtoa_r+0x6f6>
 8006786:	f1bb 0f0e 	cmp.w	fp, #14
 800678a:	f300 814c 	bgt.w	8006a26 <_dtoa_r+0x6f6>
 800678e:	4b6b      	ldr	r3, [pc, #428]	; (800693c <_dtoa_r+0x60c>)
 8006790:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006798:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800679c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f280 80da 	bge.w	8006958 <_dtoa_r+0x628>
 80067a4:	f1b9 0f00 	cmp.w	r9, #0
 80067a8:	f300 80d6 	bgt.w	8006958 <_dtoa_r+0x628>
 80067ac:	f040 82cd 	bne.w	8006d4a <_dtoa_r+0xa1a>
 80067b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067b4:	2200      	movs	r2, #0
 80067b6:	4b66      	ldr	r3, [pc, #408]	; (8006950 <_dtoa_r+0x620>)
 80067b8:	f7f9 fe94 	bl	80004e4 <__aeabi_dmul>
 80067bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067c0:	f7fa f916 	bl	80009f0 <__aeabi_dcmpge>
 80067c4:	464e      	mov	r6, r9
 80067c6:	464f      	mov	r7, r9
 80067c8:	2800      	cmp	r0, #0
 80067ca:	f040 82a4 	bne.w	8006d16 <_dtoa_r+0x9e6>
 80067ce:	9b06      	ldr	r3, [sp, #24]
 80067d0:	9a06      	ldr	r2, [sp, #24]
 80067d2:	1c5d      	adds	r5, r3, #1
 80067d4:	2331      	movs	r3, #49	; 0x31
 80067d6:	f10b 0b01 	add.w	fp, fp, #1
 80067da:	7013      	strb	r3, [r2, #0]
 80067dc:	e29f      	b.n	8006d1e <_dtoa_r+0x9ee>
 80067de:	07f2      	lsls	r2, r6, #31
 80067e0:	d505      	bpl.n	80067ee <_dtoa_r+0x4be>
 80067e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067e6:	f7f9 fe7d 	bl	80004e4 <__aeabi_dmul>
 80067ea:	2301      	movs	r3, #1
 80067ec:	3501      	adds	r5, #1
 80067ee:	1076      	asrs	r6, r6, #1
 80067f0:	3708      	adds	r7, #8
 80067f2:	e76d      	b.n	80066d0 <_dtoa_r+0x3a0>
 80067f4:	2502      	movs	r5, #2
 80067f6:	e770      	b.n	80066da <_dtoa_r+0x3aa>
 80067f8:	465f      	mov	r7, fp
 80067fa:	464e      	mov	r6, r9
 80067fc:	e78f      	b.n	800671e <_dtoa_r+0x3ee>
 80067fe:	9a06      	ldr	r2, [sp, #24]
 8006800:	4b4e      	ldr	r3, [pc, #312]	; (800693c <_dtoa_r+0x60c>)
 8006802:	4432      	add	r2, r6
 8006804:	9211      	str	r2, [sp, #68]	; 0x44
 8006806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006808:	1e71      	subs	r1, r6, #1
 800680a:	2a00      	cmp	r2, #0
 800680c:	d048      	beq.n	80068a0 <_dtoa_r+0x570>
 800680e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006816:	2000      	movs	r0, #0
 8006818:	494e      	ldr	r1, [pc, #312]	; (8006954 <_dtoa_r+0x624>)
 800681a:	f7f9 ff8d 	bl	8000738 <__aeabi_ddiv>
 800681e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006822:	f7f9 fcab 	bl	800017c <__aeabi_dsub>
 8006826:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800682a:	9d06      	ldr	r5, [sp, #24]
 800682c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006830:	f7fa f908 	bl	8000a44 <__aeabi_d2iz>
 8006834:	4606      	mov	r6, r0
 8006836:	f7f9 fdef 	bl	8000418 <__aeabi_i2d>
 800683a:	4602      	mov	r2, r0
 800683c:	460b      	mov	r3, r1
 800683e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006842:	f7f9 fc9b 	bl	800017c <__aeabi_dsub>
 8006846:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800684a:	3630      	adds	r6, #48	; 0x30
 800684c:	f805 6b01 	strb.w	r6, [r5], #1
 8006850:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006854:	f7fa f8b8 	bl	80009c8 <__aeabi_dcmplt>
 8006858:	2800      	cmp	r0, #0
 800685a:	d164      	bne.n	8006926 <_dtoa_r+0x5f6>
 800685c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006860:	2000      	movs	r0, #0
 8006862:	4938      	ldr	r1, [pc, #224]	; (8006944 <_dtoa_r+0x614>)
 8006864:	f7f9 fc8a 	bl	800017c <__aeabi_dsub>
 8006868:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800686c:	f7fa f8ac 	bl	80009c8 <__aeabi_dcmplt>
 8006870:	2800      	cmp	r0, #0
 8006872:	f040 80b9 	bne.w	80069e8 <_dtoa_r+0x6b8>
 8006876:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006878:	429d      	cmp	r5, r3
 800687a:	f43f af7c 	beq.w	8006776 <_dtoa_r+0x446>
 800687e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006882:	2200      	movs	r2, #0
 8006884:	4b30      	ldr	r3, [pc, #192]	; (8006948 <_dtoa_r+0x618>)
 8006886:	f7f9 fe2d 	bl	80004e4 <__aeabi_dmul>
 800688a:	2200      	movs	r2, #0
 800688c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006890:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006894:	4b2c      	ldr	r3, [pc, #176]	; (8006948 <_dtoa_r+0x618>)
 8006896:	f7f9 fe25 	bl	80004e4 <__aeabi_dmul>
 800689a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800689e:	e7c5      	b.n	800682c <_dtoa_r+0x4fc>
 80068a0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80068a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80068ac:	f7f9 fe1a 	bl	80004e4 <__aeabi_dmul>
 80068b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80068b4:	9d06      	ldr	r5, [sp, #24]
 80068b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068ba:	f7fa f8c3 	bl	8000a44 <__aeabi_d2iz>
 80068be:	4606      	mov	r6, r0
 80068c0:	f7f9 fdaa 	bl	8000418 <__aeabi_i2d>
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068cc:	f7f9 fc56 	bl	800017c <__aeabi_dsub>
 80068d0:	3630      	adds	r6, #48	; 0x30
 80068d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068d4:	f805 6b01 	strb.w	r6, [r5], #1
 80068d8:	42ab      	cmp	r3, r5
 80068da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068de:	f04f 0200 	mov.w	r2, #0
 80068e2:	d124      	bne.n	800692e <_dtoa_r+0x5fe>
 80068e4:	4b1b      	ldr	r3, [pc, #108]	; (8006954 <_dtoa_r+0x624>)
 80068e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80068ea:	f7f9 fc49 	bl	8000180 <__adddf3>
 80068ee:	4602      	mov	r2, r0
 80068f0:	460b      	mov	r3, r1
 80068f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068f6:	f7fa f885 	bl	8000a04 <__aeabi_dcmpgt>
 80068fa:	2800      	cmp	r0, #0
 80068fc:	d174      	bne.n	80069e8 <_dtoa_r+0x6b8>
 80068fe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006902:	2000      	movs	r0, #0
 8006904:	4913      	ldr	r1, [pc, #76]	; (8006954 <_dtoa_r+0x624>)
 8006906:	f7f9 fc39 	bl	800017c <__aeabi_dsub>
 800690a:	4602      	mov	r2, r0
 800690c:	460b      	mov	r3, r1
 800690e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006912:	f7fa f859 	bl	80009c8 <__aeabi_dcmplt>
 8006916:	2800      	cmp	r0, #0
 8006918:	f43f af2d 	beq.w	8006776 <_dtoa_r+0x446>
 800691c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006920:	1e6a      	subs	r2, r5, #1
 8006922:	2b30      	cmp	r3, #48	; 0x30
 8006924:	d001      	beq.n	800692a <_dtoa_r+0x5fa>
 8006926:	46bb      	mov	fp, r7
 8006928:	e04d      	b.n	80069c6 <_dtoa_r+0x696>
 800692a:	4615      	mov	r5, r2
 800692c:	e7f6      	b.n	800691c <_dtoa_r+0x5ec>
 800692e:	4b06      	ldr	r3, [pc, #24]	; (8006948 <_dtoa_r+0x618>)
 8006930:	f7f9 fdd8 	bl	80004e4 <__aeabi_dmul>
 8006934:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006938:	e7bd      	b.n	80068b6 <_dtoa_r+0x586>
 800693a:	bf00      	nop
 800693c:	0800a038 	.word	0x0800a038
 8006940:	0800a010 	.word	0x0800a010
 8006944:	3ff00000 	.word	0x3ff00000
 8006948:	40240000 	.word	0x40240000
 800694c:	401c0000 	.word	0x401c0000
 8006950:	40140000 	.word	0x40140000
 8006954:	3fe00000 	.word	0x3fe00000
 8006958:	9d06      	ldr	r5, [sp, #24]
 800695a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800695e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006962:	4630      	mov	r0, r6
 8006964:	4639      	mov	r1, r7
 8006966:	f7f9 fee7 	bl	8000738 <__aeabi_ddiv>
 800696a:	f7fa f86b 	bl	8000a44 <__aeabi_d2iz>
 800696e:	4680      	mov	r8, r0
 8006970:	f7f9 fd52 	bl	8000418 <__aeabi_i2d>
 8006974:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006978:	f7f9 fdb4 	bl	80004e4 <__aeabi_dmul>
 800697c:	4602      	mov	r2, r0
 800697e:	460b      	mov	r3, r1
 8006980:	4630      	mov	r0, r6
 8006982:	4639      	mov	r1, r7
 8006984:	f7f9 fbfa 	bl	800017c <__aeabi_dsub>
 8006988:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800698c:	f805 6b01 	strb.w	r6, [r5], #1
 8006990:	9e06      	ldr	r6, [sp, #24]
 8006992:	4602      	mov	r2, r0
 8006994:	1bae      	subs	r6, r5, r6
 8006996:	45b1      	cmp	r9, r6
 8006998:	460b      	mov	r3, r1
 800699a:	d137      	bne.n	8006a0c <_dtoa_r+0x6dc>
 800699c:	f7f9 fbf0 	bl	8000180 <__adddf3>
 80069a0:	4606      	mov	r6, r0
 80069a2:	460f      	mov	r7, r1
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069ac:	f7fa f80c 	bl	80009c8 <__aeabi_dcmplt>
 80069b0:	b9c8      	cbnz	r0, 80069e6 <_dtoa_r+0x6b6>
 80069b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069b6:	4632      	mov	r2, r6
 80069b8:	463b      	mov	r3, r7
 80069ba:	f7f9 fffb 	bl	80009b4 <__aeabi_dcmpeq>
 80069be:	b110      	cbz	r0, 80069c6 <_dtoa_r+0x696>
 80069c0:	f018 0f01 	tst.w	r8, #1
 80069c4:	d10f      	bne.n	80069e6 <_dtoa_r+0x6b6>
 80069c6:	4651      	mov	r1, sl
 80069c8:	4620      	mov	r0, r4
 80069ca:	f000 fd63 	bl	8007494 <_Bfree>
 80069ce:	2300      	movs	r3, #0
 80069d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80069d2:	702b      	strb	r3, [r5, #0]
 80069d4:	f10b 0301 	add.w	r3, fp, #1
 80069d8:	6013      	str	r3, [r2, #0]
 80069da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f43f acec 	beq.w	80063ba <_dtoa_r+0x8a>
 80069e2:	601d      	str	r5, [r3, #0]
 80069e4:	e4e9      	b.n	80063ba <_dtoa_r+0x8a>
 80069e6:	465f      	mov	r7, fp
 80069e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80069ec:	1e6b      	subs	r3, r5, #1
 80069ee:	2a39      	cmp	r2, #57	; 0x39
 80069f0:	d106      	bne.n	8006a00 <_dtoa_r+0x6d0>
 80069f2:	9a06      	ldr	r2, [sp, #24]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d107      	bne.n	8006a08 <_dtoa_r+0x6d8>
 80069f8:	2330      	movs	r3, #48	; 0x30
 80069fa:	7013      	strb	r3, [r2, #0]
 80069fc:	4613      	mov	r3, r2
 80069fe:	3701      	adds	r7, #1
 8006a00:	781a      	ldrb	r2, [r3, #0]
 8006a02:	3201      	adds	r2, #1
 8006a04:	701a      	strb	r2, [r3, #0]
 8006a06:	e78e      	b.n	8006926 <_dtoa_r+0x5f6>
 8006a08:	461d      	mov	r5, r3
 8006a0a:	e7ed      	b.n	80069e8 <_dtoa_r+0x6b8>
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	4bb5      	ldr	r3, [pc, #724]	; (8006ce4 <_dtoa_r+0x9b4>)
 8006a10:	f7f9 fd68 	bl	80004e4 <__aeabi_dmul>
 8006a14:	2200      	movs	r2, #0
 8006a16:	2300      	movs	r3, #0
 8006a18:	4606      	mov	r6, r0
 8006a1a:	460f      	mov	r7, r1
 8006a1c:	f7f9 ffca 	bl	80009b4 <__aeabi_dcmpeq>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	d09c      	beq.n	800695e <_dtoa_r+0x62e>
 8006a24:	e7cf      	b.n	80069c6 <_dtoa_r+0x696>
 8006a26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a28:	2a00      	cmp	r2, #0
 8006a2a:	f000 8129 	beq.w	8006c80 <_dtoa_r+0x950>
 8006a2e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006a30:	2a01      	cmp	r2, #1
 8006a32:	f300 810e 	bgt.w	8006c52 <_dtoa_r+0x922>
 8006a36:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a38:	2a00      	cmp	r2, #0
 8006a3a:	f000 8106 	beq.w	8006c4a <_dtoa_r+0x91a>
 8006a3e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a42:	4645      	mov	r5, r8
 8006a44:	9e08      	ldr	r6, [sp, #32]
 8006a46:	9a07      	ldr	r2, [sp, #28]
 8006a48:	2101      	movs	r1, #1
 8006a4a:	441a      	add	r2, r3
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	4498      	add	r8, r3
 8006a50:	9207      	str	r2, [sp, #28]
 8006a52:	f000 fdfd 	bl	8007650 <__i2b>
 8006a56:	4607      	mov	r7, r0
 8006a58:	2d00      	cmp	r5, #0
 8006a5a:	dd0b      	ble.n	8006a74 <_dtoa_r+0x744>
 8006a5c:	9b07      	ldr	r3, [sp, #28]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	dd08      	ble.n	8006a74 <_dtoa_r+0x744>
 8006a62:	42ab      	cmp	r3, r5
 8006a64:	bfa8      	it	ge
 8006a66:	462b      	movge	r3, r5
 8006a68:	9a07      	ldr	r2, [sp, #28]
 8006a6a:	eba8 0803 	sub.w	r8, r8, r3
 8006a6e:	1aed      	subs	r5, r5, r3
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	9307      	str	r3, [sp, #28]
 8006a74:	9b08      	ldr	r3, [sp, #32]
 8006a76:	b1fb      	cbz	r3, 8006ab8 <_dtoa_r+0x788>
 8006a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 8104 	beq.w	8006c88 <_dtoa_r+0x958>
 8006a80:	2e00      	cmp	r6, #0
 8006a82:	dd11      	ble.n	8006aa8 <_dtoa_r+0x778>
 8006a84:	4639      	mov	r1, r7
 8006a86:	4632      	mov	r2, r6
 8006a88:	4620      	mov	r0, r4
 8006a8a:	f000 fe77 	bl	800777c <__pow5mult>
 8006a8e:	4652      	mov	r2, sl
 8006a90:	4601      	mov	r1, r0
 8006a92:	4607      	mov	r7, r0
 8006a94:	4620      	mov	r0, r4
 8006a96:	f000 fde4 	bl	8007662 <__multiply>
 8006a9a:	4651      	mov	r1, sl
 8006a9c:	900a      	str	r0, [sp, #40]	; 0x28
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f000 fcf8 	bl	8007494 <_Bfree>
 8006aa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aa6:	469a      	mov	sl, r3
 8006aa8:	9b08      	ldr	r3, [sp, #32]
 8006aaa:	1b9a      	subs	r2, r3, r6
 8006aac:	d004      	beq.n	8006ab8 <_dtoa_r+0x788>
 8006aae:	4651      	mov	r1, sl
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f000 fe63 	bl	800777c <__pow5mult>
 8006ab6:	4682      	mov	sl, r0
 8006ab8:	2101      	movs	r1, #1
 8006aba:	4620      	mov	r0, r4
 8006abc:	f000 fdc8 	bl	8007650 <__i2b>
 8006ac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ac2:	4606      	mov	r6, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f340 80e1 	ble.w	8006c8c <_dtoa_r+0x95c>
 8006aca:	461a      	mov	r2, r3
 8006acc:	4601      	mov	r1, r0
 8006ace:	4620      	mov	r0, r4
 8006ad0:	f000 fe54 	bl	800777c <__pow5mult>
 8006ad4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006ad6:	4606      	mov	r6, r0
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	f340 80da 	ble.w	8006c92 <_dtoa_r+0x962>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	9308      	str	r3, [sp, #32]
 8006ae2:	6933      	ldr	r3, [r6, #16]
 8006ae4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006ae8:	6918      	ldr	r0, [r3, #16]
 8006aea:	f000 fd63 	bl	80075b4 <__hi0bits>
 8006aee:	f1c0 0020 	rsb	r0, r0, #32
 8006af2:	9b07      	ldr	r3, [sp, #28]
 8006af4:	4418      	add	r0, r3
 8006af6:	f010 001f 	ands.w	r0, r0, #31
 8006afa:	f000 80f0 	beq.w	8006cde <_dtoa_r+0x9ae>
 8006afe:	f1c0 0320 	rsb	r3, r0, #32
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	f340 80e2 	ble.w	8006ccc <_dtoa_r+0x99c>
 8006b08:	9b07      	ldr	r3, [sp, #28]
 8006b0a:	f1c0 001c 	rsb	r0, r0, #28
 8006b0e:	4480      	add	r8, r0
 8006b10:	4405      	add	r5, r0
 8006b12:	4403      	add	r3, r0
 8006b14:	9307      	str	r3, [sp, #28]
 8006b16:	f1b8 0f00 	cmp.w	r8, #0
 8006b1a:	dd05      	ble.n	8006b28 <_dtoa_r+0x7f8>
 8006b1c:	4651      	mov	r1, sl
 8006b1e:	4642      	mov	r2, r8
 8006b20:	4620      	mov	r0, r4
 8006b22:	f000 fe79 	bl	8007818 <__lshift>
 8006b26:	4682      	mov	sl, r0
 8006b28:	9b07      	ldr	r3, [sp, #28]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	dd05      	ble.n	8006b3a <_dtoa_r+0x80a>
 8006b2e:	4631      	mov	r1, r6
 8006b30:	461a      	mov	r2, r3
 8006b32:	4620      	mov	r0, r4
 8006b34:	f000 fe70 	bl	8007818 <__lshift>
 8006b38:	4606      	mov	r6, r0
 8006b3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 80d3 	beq.w	8006ce8 <_dtoa_r+0x9b8>
 8006b42:	4631      	mov	r1, r6
 8006b44:	4650      	mov	r0, sl
 8006b46:	f000 feb8 	bl	80078ba <__mcmp>
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	f280 80cc 	bge.w	8006ce8 <_dtoa_r+0x9b8>
 8006b50:	2300      	movs	r3, #0
 8006b52:	4651      	mov	r1, sl
 8006b54:	220a      	movs	r2, #10
 8006b56:	4620      	mov	r0, r4
 8006b58:	f000 fcb3 	bl	80074c2 <__multadd>
 8006b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b5e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006b62:	4682      	mov	sl, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 81a9 	beq.w	8006ebc <_dtoa_r+0xb8c>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	4639      	mov	r1, r7
 8006b6e:	220a      	movs	r2, #10
 8006b70:	4620      	mov	r0, r4
 8006b72:	f000 fca6 	bl	80074c2 <__multadd>
 8006b76:	9b04      	ldr	r3, [sp, #16]
 8006b78:	4607      	mov	r7, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	dc03      	bgt.n	8006b86 <_dtoa_r+0x856>
 8006b7e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	f300 80b9 	bgt.w	8006cf8 <_dtoa_r+0x9c8>
 8006b86:	2d00      	cmp	r5, #0
 8006b88:	dd05      	ble.n	8006b96 <_dtoa_r+0x866>
 8006b8a:	4639      	mov	r1, r7
 8006b8c:	462a      	mov	r2, r5
 8006b8e:	4620      	mov	r0, r4
 8006b90:	f000 fe42 	bl	8007818 <__lshift>
 8006b94:	4607      	mov	r7, r0
 8006b96:	9b08      	ldr	r3, [sp, #32]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 8110 	beq.w	8006dbe <_dtoa_r+0xa8e>
 8006b9e:	6879      	ldr	r1, [r7, #4]
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f000 fc43 	bl	800742c <_Balloc>
 8006ba6:	4605      	mov	r5, r0
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	f107 010c 	add.w	r1, r7, #12
 8006bae:	3202      	adds	r2, #2
 8006bb0:	0092      	lsls	r2, r2, #2
 8006bb2:	300c      	adds	r0, #12
 8006bb4:	f7fd fd8c 	bl	80046d0 <memcpy>
 8006bb8:	2201      	movs	r2, #1
 8006bba:	4629      	mov	r1, r5
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f000 fe2b 	bl	8007818 <__lshift>
 8006bc2:	9707      	str	r7, [sp, #28]
 8006bc4:	4607      	mov	r7, r0
 8006bc6:	9b02      	ldr	r3, [sp, #8]
 8006bc8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	9308      	str	r3, [sp, #32]
 8006bd2:	4631      	mov	r1, r6
 8006bd4:	4650      	mov	r0, sl
 8006bd6:	f7ff fb1d 	bl	8006214 <quorem>
 8006bda:	9907      	ldr	r1, [sp, #28]
 8006bdc:	4605      	mov	r5, r0
 8006bde:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006be2:	4650      	mov	r0, sl
 8006be4:	f000 fe69 	bl	80078ba <__mcmp>
 8006be8:	463a      	mov	r2, r7
 8006bea:	9002      	str	r0, [sp, #8]
 8006bec:	4631      	mov	r1, r6
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f000 fe7d 	bl	80078ee <__mdiff>
 8006bf4:	68c3      	ldr	r3, [r0, #12]
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f040 80e2 	bne.w	8006dc2 <_dtoa_r+0xa92>
 8006bfe:	4601      	mov	r1, r0
 8006c00:	9009      	str	r0, [sp, #36]	; 0x24
 8006c02:	4650      	mov	r0, sl
 8006c04:	f000 fe59 	bl	80078ba <__mcmp>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c0c:	4611      	mov	r1, r2
 8006c0e:	4620      	mov	r0, r4
 8006c10:	9309      	str	r3, [sp, #36]	; 0x24
 8006c12:	f000 fc3f 	bl	8007494 <_Bfree>
 8006c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f040 80d4 	bne.w	8006dc6 <_dtoa_r+0xa96>
 8006c1e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006c20:	2a00      	cmp	r2, #0
 8006c22:	f040 80d0 	bne.w	8006dc6 <_dtoa_r+0xa96>
 8006c26:	9a08      	ldr	r2, [sp, #32]
 8006c28:	2a00      	cmp	r2, #0
 8006c2a:	f040 80cc 	bne.w	8006dc6 <_dtoa_r+0xa96>
 8006c2e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006c32:	f000 80e8 	beq.w	8006e06 <_dtoa_r+0xad6>
 8006c36:	9b02      	ldr	r3, [sp, #8]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	dd01      	ble.n	8006c40 <_dtoa_r+0x910>
 8006c3c:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8006c40:	f108 0501 	add.w	r5, r8, #1
 8006c44:	f888 9000 	strb.w	r9, [r8]
 8006c48:	e06b      	b.n	8006d22 <_dtoa_r+0x9f2>
 8006c4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c4c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c50:	e6f7      	b.n	8006a42 <_dtoa_r+0x712>
 8006c52:	9b08      	ldr	r3, [sp, #32]
 8006c54:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 8006c58:	42b3      	cmp	r3, r6
 8006c5a:	bfb7      	itett	lt
 8006c5c:	9b08      	ldrlt	r3, [sp, #32]
 8006c5e:	1b9e      	subge	r6, r3, r6
 8006c60:	1af2      	sublt	r2, r6, r3
 8006c62:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006c64:	bfbf      	itttt	lt
 8006c66:	9608      	strlt	r6, [sp, #32]
 8006c68:	189b      	addlt	r3, r3, r2
 8006c6a:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006c6c:	2600      	movlt	r6, #0
 8006c6e:	f1b9 0f00 	cmp.w	r9, #0
 8006c72:	bfb9      	ittee	lt
 8006c74:	eba8 0509 	sublt.w	r5, r8, r9
 8006c78:	2300      	movlt	r3, #0
 8006c7a:	4645      	movge	r5, r8
 8006c7c:	464b      	movge	r3, r9
 8006c7e:	e6e2      	b.n	8006a46 <_dtoa_r+0x716>
 8006c80:	9e08      	ldr	r6, [sp, #32]
 8006c82:	4645      	mov	r5, r8
 8006c84:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006c86:	e6e7      	b.n	8006a58 <_dtoa_r+0x728>
 8006c88:	9a08      	ldr	r2, [sp, #32]
 8006c8a:	e710      	b.n	8006aae <_dtoa_r+0x77e>
 8006c8c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	dc18      	bgt.n	8006cc4 <_dtoa_r+0x994>
 8006c92:	9b02      	ldr	r3, [sp, #8]
 8006c94:	b9b3      	cbnz	r3, 8006cc4 <_dtoa_r+0x994>
 8006c96:	9b03      	ldr	r3, [sp, #12]
 8006c98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c9c:	b9a3      	cbnz	r3, 8006cc8 <_dtoa_r+0x998>
 8006c9e:	9b03      	ldr	r3, [sp, #12]
 8006ca0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ca4:	0d1b      	lsrs	r3, r3, #20
 8006ca6:	051b      	lsls	r3, r3, #20
 8006ca8:	b12b      	cbz	r3, 8006cb6 <_dtoa_r+0x986>
 8006caa:	9b07      	ldr	r3, [sp, #28]
 8006cac:	f108 0801 	add.w	r8, r8, #1
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	9307      	str	r3, [sp, #28]
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	9308      	str	r3, [sp, #32]
 8006cb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f47f af11 	bne.w	8006ae2 <_dtoa_r+0x7b2>
 8006cc0:	2001      	movs	r0, #1
 8006cc2:	e716      	b.n	8006af2 <_dtoa_r+0x7c2>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	e7f6      	b.n	8006cb6 <_dtoa_r+0x986>
 8006cc8:	9b02      	ldr	r3, [sp, #8]
 8006cca:	e7f4      	b.n	8006cb6 <_dtoa_r+0x986>
 8006ccc:	f43f af23 	beq.w	8006b16 <_dtoa_r+0x7e6>
 8006cd0:	9a07      	ldr	r2, [sp, #28]
 8006cd2:	331c      	adds	r3, #28
 8006cd4:	441a      	add	r2, r3
 8006cd6:	4498      	add	r8, r3
 8006cd8:	441d      	add	r5, r3
 8006cda:	4613      	mov	r3, r2
 8006cdc:	e71a      	b.n	8006b14 <_dtoa_r+0x7e4>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	e7f6      	b.n	8006cd0 <_dtoa_r+0x9a0>
 8006ce2:	bf00      	nop
 8006ce4:	40240000 	.word	0x40240000
 8006ce8:	f1b9 0f00 	cmp.w	r9, #0
 8006cec:	dc33      	bgt.n	8006d56 <_dtoa_r+0xa26>
 8006cee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	dd30      	ble.n	8006d56 <_dtoa_r+0xa26>
 8006cf4:	f8cd 9010 	str.w	r9, [sp, #16]
 8006cf8:	9b04      	ldr	r3, [sp, #16]
 8006cfa:	b963      	cbnz	r3, 8006d16 <_dtoa_r+0x9e6>
 8006cfc:	4631      	mov	r1, r6
 8006cfe:	2205      	movs	r2, #5
 8006d00:	4620      	mov	r0, r4
 8006d02:	f000 fbde 	bl	80074c2 <__multadd>
 8006d06:	4601      	mov	r1, r0
 8006d08:	4606      	mov	r6, r0
 8006d0a:	4650      	mov	r0, sl
 8006d0c:	f000 fdd5 	bl	80078ba <__mcmp>
 8006d10:	2800      	cmp	r0, #0
 8006d12:	f73f ad5c 	bgt.w	80067ce <_dtoa_r+0x49e>
 8006d16:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006d18:	9d06      	ldr	r5, [sp, #24]
 8006d1a:	ea6f 0b03 	mvn.w	fp, r3
 8006d1e:	2300      	movs	r3, #0
 8006d20:	9307      	str	r3, [sp, #28]
 8006d22:	4631      	mov	r1, r6
 8006d24:	4620      	mov	r0, r4
 8006d26:	f000 fbb5 	bl	8007494 <_Bfree>
 8006d2a:	2f00      	cmp	r7, #0
 8006d2c:	f43f ae4b 	beq.w	80069c6 <_dtoa_r+0x696>
 8006d30:	9b07      	ldr	r3, [sp, #28]
 8006d32:	b12b      	cbz	r3, 8006d40 <_dtoa_r+0xa10>
 8006d34:	42bb      	cmp	r3, r7
 8006d36:	d003      	beq.n	8006d40 <_dtoa_r+0xa10>
 8006d38:	4619      	mov	r1, r3
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f000 fbaa 	bl	8007494 <_Bfree>
 8006d40:	4639      	mov	r1, r7
 8006d42:	4620      	mov	r0, r4
 8006d44:	f000 fba6 	bl	8007494 <_Bfree>
 8006d48:	e63d      	b.n	80069c6 <_dtoa_r+0x696>
 8006d4a:	2600      	movs	r6, #0
 8006d4c:	4637      	mov	r7, r6
 8006d4e:	e7e2      	b.n	8006d16 <_dtoa_r+0x9e6>
 8006d50:	46bb      	mov	fp, r7
 8006d52:	4637      	mov	r7, r6
 8006d54:	e53b      	b.n	80067ce <_dtoa_r+0x49e>
 8006d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d58:	f8cd 9010 	str.w	r9, [sp, #16]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f47f af12 	bne.w	8006b86 <_dtoa_r+0x856>
 8006d62:	9d06      	ldr	r5, [sp, #24]
 8006d64:	4631      	mov	r1, r6
 8006d66:	4650      	mov	r0, sl
 8006d68:	f7ff fa54 	bl	8006214 <quorem>
 8006d6c:	9b06      	ldr	r3, [sp, #24]
 8006d6e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006d72:	f805 9b01 	strb.w	r9, [r5], #1
 8006d76:	9a04      	ldr	r2, [sp, #16]
 8006d78:	1aeb      	subs	r3, r5, r3
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	f300 8081 	bgt.w	8006e82 <_dtoa_r+0xb52>
 8006d80:	9b06      	ldr	r3, [sp, #24]
 8006d82:	2a01      	cmp	r2, #1
 8006d84:	bfac      	ite	ge
 8006d86:	189b      	addge	r3, r3, r2
 8006d88:	3301      	addlt	r3, #1
 8006d8a:	4698      	mov	r8, r3
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	9307      	str	r3, [sp, #28]
 8006d90:	4651      	mov	r1, sl
 8006d92:	2201      	movs	r2, #1
 8006d94:	4620      	mov	r0, r4
 8006d96:	f000 fd3f 	bl	8007818 <__lshift>
 8006d9a:	4631      	mov	r1, r6
 8006d9c:	4682      	mov	sl, r0
 8006d9e:	f000 fd8c 	bl	80078ba <__mcmp>
 8006da2:	2800      	cmp	r0, #0
 8006da4:	dc34      	bgt.n	8006e10 <_dtoa_r+0xae0>
 8006da6:	d102      	bne.n	8006dae <_dtoa_r+0xa7e>
 8006da8:	f019 0f01 	tst.w	r9, #1
 8006dac:	d130      	bne.n	8006e10 <_dtoa_r+0xae0>
 8006dae:	4645      	mov	r5, r8
 8006db0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006db4:	1e6a      	subs	r2, r5, #1
 8006db6:	2b30      	cmp	r3, #48	; 0x30
 8006db8:	d1b3      	bne.n	8006d22 <_dtoa_r+0x9f2>
 8006dba:	4615      	mov	r5, r2
 8006dbc:	e7f8      	b.n	8006db0 <_dtoa_r+0xa80>
 8006dbe:	4638      	mov	r0, r7
 8006dc0:	e6ff      	b.n	8006bc2 <_dtoa_r+0x892>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e722      	b.n	8006c0c <_dtoa_r+0x8dc>
 8006dc6:	9a02      	ldr	r2, [sp, #8]
 8006dc8:	2a00      	cmp	r2, #0
 8006dca:	db04      	blt.n	8006dd6 <_dtoa_r+0xaa6>
 8006dcc:	d128      	bne.n	8006e20 <_dtoa_r+0xaf0>
 8006dce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006dd0:	bb32      	cbnz	r2, 8006e20 <_dtoa_r+0xaf0>
 8006dd2:	9a08      	ldr	r2, [sp, #32]
 8006dd4:	bb22      	cbnz	r2, 8006e20 <_dtoa_r+0xaf0>
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f77f af32 	ble.w	8006c40 <_dtoa_r+0x910>
 8006ddc:	4651      	mov	r1, sl
 8006dde:	2201      	movs	r2, #1
 8006de0:	4620      	mov	r0, r4
 8006de2:	f000 fd19 	bl	8007818 <__lshift>
 8006de6:	4631      	mov	r1, r6
 8006de8:	4682      	mov	sl, r0
 8006dea:	f000 fd66 	bl	80078ba <__mcmp>
 8006dee:	2800      	cmp	r0, #0
 8006df0:	dc05      	bgt.n	8006dfe <_dtoa_r+0xace>
 8006df2:	f47f af25 	bne.w	8006c40 <_dtoa_r+0x910>
 8006df6:	f019 0f01 	tst.w	r9, #1
 8006dfa:	f43f af21 	beq.w	8006c40 <_dtoa_r+0x910>
 8006dfe:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006e02:	f47f af1b 	bne.w	8006c3c <_dtoa_r+0x90c>
 8006e06:	2339      	movs	r3, #57	; 0x39
 8006e08:	f108 0801 	add.w	r8, r8, #1
 8006e0c:	f808 3c01 	strb.w	r3, [r8, #-1]
 8006e10:	4645      	mov	r5, r8
 8006e12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006e16:	1e6a      	subs	r2, r5, #1
 8006e18:	2b39      	cmp	r3, #57	; 0x39
 8006e1a:	d03a      	beq.n	8006e92 <_dtoa_r+0xb62>
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	e03f      	b.n	8006ea0 <_dtoa_r+0xb70>
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f108 0501 	add.w	r5, r8, #1
 8006e26:	dd05      	ble.n	8006e34 <_dtoa_r+0xb04>
 8006e28:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006e2c:	d0eb      	beq.n	8006e06 <_dtoa_r+0xad6>
 8006e2e:	f109 0901 	add.w	r9, r9, #1
 8006e32:	e707      	b.n	8006c44 <_dtoa_r+0x914>
 8006e34:	9b06      	ldr	r3, [sp, #24]
 8006e36:	9a04      	ldr	r2, [sp, #16]
 8006e38:	1aeb      	subs	r3, r5, r3
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	46a8      	mov	r8, r5
 8006e3e:	f805 9c01 	strb.w	r9, [r5, #-1]
 8006e42:	d0a5      	beq.n	8006d90 <_dtoa_r+0xa60>
 8006e44:	4651      	mov	r1, sl
 8006e46:	2300      	movs	r3, #0
 8006e48:	220a      	movs	r2, #10
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f000 fb39 	bl	80074c2 <__multadd>
 8006e50:	9b07      	ldr	r3, [sp, #28]
 8006e52:	4682      	mov	sl, r0
 8006e54:	42bb      	cmp	r3, r7
 8006e56:	f04f 020a 	mov.w	r2, #10
 8006e5a:	f04f 0300 	mov.w	r3, #0
 8006e5e:	9907      	ldr	r1, [sp, #28]
 8006e60:	4620      	mov	r0, r4
 8006e62:	d104      	bne.n	8006e6e <_dtoa_r+0xb3e>
 8006e64:	f000 fb2d 	bl	80074c2 <__multadd>
 8006e68:	9007      	str	r0, [sp, #28]
 8006e6a:	4607      	mov	r7, r0
 8006e6c:	e6b1      	b.n	8006bd2 <_dtoa_r+0x8a2>
 8006e6e:	f000 fb28 	bl	80074c2 <__multadd>
 8006e72:	2300      	movs	r3, #0
 8006e74:	9007      	str	r0, [sp, #28]
 8006e76:	220a      	movs	r2, #10
 8006e78:	4639      	mov	r1, r7
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	f000 fb21 	bl	80074c2 <__multadd>
 8006e80:	e7f3      	b.n	8006e6a <_dtoa_r+0xb3a>
 8006e82:	4651      	mov	r1, sl
 8006e84:	2300      	movs	r3, #0
 8006e86:	220a      	movs	r2, #10
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f000 fb1a 	bl	80074c2 <__multadd>
 8006e8e:	4682      	mov	sl, r0
 8006e90:	e768      	b.n	8006d64 <_dtoa_r+0xa34>
 8006e92:	9b06      	ldr	r3, [sp, #24]
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d105      	bne.n	8006ea4 <_dtoa_r+0xb74>
 8006e98:	2331      	movs	r3, #49	; 0x31
 8006e9a:	9a06      	ldr	r2, [sp, #24]
 8006e9c:	f10b 0b01 	add.w	fp, fp, #1
 8006ea0:	7013      	strb	r3, [r2, #0]
 8006ea2:	e73e      	b.n	8006d22 <_dtoa_r+0x9f2>
 8006ea4:	4615      	mov	r5, r2
 8006ea6:	e7b4      	b.n	8006e12 <_dtoa_r+0xae2>
 8006ea8:	4b09      	ldr	r3, [pc, #36]	; (8006ed0 <_dtoa_r+0xba0>)
 8006eaa:	f7ff baa3 	b.w	80063f4 <_dtoa_r+0xc4>
 8006eae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f47f aa7d 	bne.w	80063b0 <_dtoa_r+0x80>
 8006eb6:	4b07      	ldr	r3, [pc, #28]	; (8006ed4 <_dtoa_r+0xba4>)
 8006eb8:	f7ff ba9c 	b.w	80063f4 <_dtoa_r+0xc4>
 8006ebc:	9b04      	ldr	r3, [sp, #16]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f73f af4f 	bgt.w	8006d62 <_dtoa_r+0xa32>
 8006ec4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	f77f af4b 	ble.w	8006d62 <_dtoa_r+0xa32>
 8006ecc:	e714      	b.n	8006cf8 <_dtoa_r+0x9c8>
 8006ece:	bf00      	nop
 8006ed0:	08009faa 	.word	0x08009faa
 8006ed4:	08009ff4 	.word	0x08009ff4

08006ed8 <iswspace>:
 8006ed8:	28ff      	cmp	r0, #255	; 0xff
 8006eda:	b510      	push	{r4, lr}
 8006edc:	4604      	mov	r4, r0
 8006ede:	d806      	bhi.n	8006eee <iswspace+0x16>
 8006ee0:	f000 f81a 	bl	8006f18 <__locale_ctype_ptr>
 8006ee4:	4420      	add	r0, r4
 8006ee6:	7840      	ldrb	r0, [r0, #1]
 8006ee8:	f000 0008 	and.w	r0, r0, #8
 8006eec:	bd10      	pop	{r4, pc}
 8006eee:	2000      	movs	r0, #0
 8006ef0:	bd10      	pop	{r4, pc}
	...

08006ef4 <__locale_mb_cur_max>:
 8006ef4:	4b04      	ldr	r3, [pc, #16]	; (8006f08 <__locale_mb_cur_max+0x14>)
 8006ef6:	4a05      	ldr	r2, [pc, #20]	; (8006f0c <__locale_mb_cur_max+0x18>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	bf08      	it	eq
 8006f00:	4613      	moveq	r3, r2
 8006f02:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8006f06:	4770      	bx	lr
 8006f08:	200000b4 	.word	0x200000b4
 8006f0c:	200001a8 	.word	0x200001a8

08006f10 <__locale_ctype_ptr_l>:
 8006f10:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006f14:	4770      	bx	lr
	...

08006f18 <__locale_ctype_ptr>:
 8006f18:	4b04      	ldr	r3, [pc, #16]	; (8006f2c <__locale_ctype_ptr+0x14>)
 8006f1a:	4a05      	ldr	r2, [pc, #20]	; (8006f30 <__locale_ctype_ptr+0x18>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	6a1b      	ldr	r3, [r3, #32]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	bf08      	it	eq
 8006f24:	4613      	moveq	r3, r2
 8006f26:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8006f2a:	4770      	bx	lr
 8006f2c:	200000b4 	.word	0x200000b4
 8006f30:	200001a8 	.word	0x200001a8

08006f34 <__localeconv_l>:
 8006f34:	30f0      	adds	r0, #240	; 0xf0
 8006f36:	4770      	bx	lr

08006f38 <_localeconv_r>:
 8006f38:	4b04      	ldr	r3, [pc, #16]	; (8006f4c <_localeconv_r+0x14>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6a18      	ldr	r0, [r3, #32]
 8006f3e:	4b04      	ldr	r3, [pc, #16]	; (8006f50 <_localeconv_r+0x18>)
 8006f40:	2800      	cmp	r0, #0
 8006f42:	bf08      	it	eq
 8006f44:	4618      	moveq	r0, r3
 8006f46:	30f0      	adds	r0, #240	; 0xf0
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	200000b4 	.word	0x200000b4
 8006f50:	200001a8 	.word	0x200001a8

08006f54 <malloc>:
 8006f54:	4b02      	ldr	r3, [pc, #8]	; (8006f60 <malloc+0xc>)
 8006f56:	4601      	mov	r1, r0
 8006f58:	6818      	ldr	r0, [r3, #0]
 8006f5a:	f000 b803 	b.w	8006f64 <_malloc_r>
 8006f5e:	bf00      	nop
 8006f60:	200000b4 	.word	0x200000b4

08006f64 <_malloc_r>:
 8006f64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f68:	f101 040b 	add.w	r4, r1, #11
 8006f6c:	2c16      	cmp	r4, #22
 8006f6e:	4681      	mov	r9, r0
 8006f70:	d907      	bls.n	8006f82 <_malloc_r+0x1e>
 8006f72:	f034 0407 	bics.w	r4, r4, #7
 8006f76:	d505      	bpl.n	8006f84 <_malloc_r+0x20>
 8006f78:	230c      	movs	r3, #12
 8006f7a:	f8c9 3000 	str.w	r3, [r9]
 8006f7e:	2600      	movs	r6, #0
 8006f80:	e131      	b.n	80071e6 <_malloc_r+0x282>
 8006f82:	2410      	movs	r4, #16
 8006f84:	428c      	cmp	r4, r1
 8006f86:	d3f7      	bcc.n	8006f78 <_malloc_r+0x14>
 8006f88:	4648      	mov	r0, r9
 8006f8a:	f000 fa43 	bl	8007414 <__malloc_lock>
 8006f8e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8006f92:	4d9b      	ldr	r5, [pc, #620]	; (8007200 <_malloc_r+0x29c>)
 8006f94:	d236      	bcs.n	8007004 <_malloc_r+0xa0>
 8006f96:	f104 0208 	add.w	r2, r4, #8
 8006f9a:	442a      	add	r2, r5
 8006f9c:	6856      	ldr	r6, [r2, #4]
 8006f9e:	f1a2 0108 	sub.w	r1, r2, #8
 8006fa2:	428e      	cmp	r6, r1
 8006fa4:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8006fa8:	d102      	bne.n	8006fb0 <_malloc_r+0x4c>
 8006faa:	68d6      	ldr	r6, [r2, #12]
 8006fac:	42b2      	cmp	r2, r6
 8006fae:	d010      	beq.n	8006fd2 <_malloc_r+0x6e>
 8006fb0:	6873      	ldr	r3, [r6, #4]
 8006fb2:	68f2      	ldr	r2, [r6, #12]
 8006fb4:	68b1      	ldr	r1, [r6, #8]
 8006fb6:	f023 0303 	bic.w	r3, r3, #3
 8006fba:	60ca      	str	r2, [r1, #12]
 8006fbc:	4433      	add	r3, r6
 8006fbe:	6091      	str	r1, [r2, #8]
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	f042 0201 	orr.w	r2, r2, #1
 8006fc6:	605a      	str	r2, [r3, #4]
 8006fc8:	4648      	mov	r0, r9
 8006fca:	f000 fa29 	bl	8007420 <__malloc_unlock>
 8006fce:	3608      	adds	r6, #8
 8006fd0:	e109      	b.n	80071e6 <_malloc_r+0x282>
 8006fd2:	3302      	adds	r3, #2
 8006fd4:	4a8b      	ldr	r2, [pc, #556]	; (8007204 <_malloc_r+0x2a0>)
 8006fd6:	692e      	ldr	r6, [r5, #16]
 8006fd8:	4611      	mov	r1, r2
 8006fda:	4296      	cmp	r6, r2
 8006fdc:	d06d      	beq.n	80070ba <_malloc_r+0x156>
 8006fde:	6870      	ldr	r0, [r6, #4]
 8006fe0:	f020 0003 	bic.w	r0, r0, #3
 8006fe4:	1b07      	subs	r7, r0, r4
 8006fe6:	2f0f      	cmp	r7, #15
 8006fe8:	dd47      	ble.n	800707a <_malloc_r+0x116>
 8006fea:	1933      	adds	r3, r6, r4
 8006fec:	f044 0401 	orr.w	r4, r4, #1
 8006ff0:	6074      	str	r4, [r6, #4]
 8006ff2:	616b      	str	r3, [r5, #20]
 8006ff4:	612b      	str	r3, [r5, #16]
 8006ff6:	60da      	str	r2, [r3, #12]
 8006ff8:	609a      	str	r2, [r3, #8]
 8006ffa:	f047 0201 	orr.w	r2, r7, #1
 8006ffe:	605a      	str	r2, [r3, #4]
 8007000:	5037      	str	r7, [r6, r0]
 8007002:	e7e1      	b.n	8006fc8 <_malloc_r+0x64>
 8007004:	0a63      	lsrs	r3, r4, #9
 8007006:	d02a      	beq.n	800705e <_malloc_r+0xfa>
 8007008:	2b04      	cmp	r3, #4
 800700a:	d812      	bhi.n	8007032 <_malloc_r+0xce>
 800700c:	09a3      	lsrs	r3, r4, #6
 800700e:	3338      	adds	r3, #56	; 0x38
 8007010:	1c5a      	adds	r2, r3, #1
 8007012:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8007016:	6856      	ldr	r6, [r2, #4]
 8007018:	f1a2 0008 	sub.w	r0, r2, #8
 800701c:	4286      	cmp	r6, r0
 800701e:	d006      	beq.n	800702e <_malloc_r+0xca>
 8007020:	6872      	ldr	r2, [r6, #4]
 8007022:	f022 0203 	bic.w	r2, r2, #3
 8007026:	1b11      	subs	r1, r2, r4
 8007028:	290f      	cmp	r1, #15
 800702a:	dd1c      	ble.n	8007066 <_malloc_r+0x102>
 800702c:	3b01      	subs	r3, #1
 800702e:	3301      	adds	r3, #1
 8007030:	e7d0      	b.n	8006fd4 <_malloc_r+0x70>
 8007032:	2b14      	cmp	r3, #20
 8007034:	d801      	bhi.n	800703a <_malloc_r+0xd6>
 8007036:	335b      	adds	r3, #91	; 0x5b
 8007038:	e7ea      	b.n	8007010 <_malloc_r+0xac>
 800703a:	2b54      	cmp	r3, #84	; 0x54
 800703c:	d802      	bhi.n	8007044 <_malloc_r+0xe0>
 800703e:	0b23      	lsrs	r3, r4, #12
 8007040:	336e      	adds	r3, #110	; 0x6e
 8007042:	e7e5      	b.n	8007010 <_malloc_r+0xac>
 8007044:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007048:	d802      	bhi.n	8007050 <_malloc_r+0xec>
 800704a:	0be3      	lsrs	r3, r4, #15
 800704c:	3377      	adds	r3, #119	; 0x77
 800704e:	e7df      	b.n	8007010 <_malloc_r+0xac>
 8007050:	f240 5254 	movw	r2, #1364	; 0x554
 8007054:	4293      	cmp	r3, r2
 8007056:	d804      	bhi.n	8007062 <_malloc_r+0xfe>
 8007058:	0ca3      	lsrs	r3, r4, #18
 800705a:	337c      	adds	r3, #124	; 0x7c
 800705c:	e7d8      	b.n	8007010 <_malloc_r+0xac>
 800705e:	233f      	movs	r3, #63	; 0x3f
 8007060:	e7d6      	b.n	8007010 <_malloc_r+0xac>
 8007062:	237e      	movs	r3, #126	; 0x7e
 8007064:	e7d4      	b.n	8007010 <_malloc_r+0xac>
 8007066:	2900      	cmp	r1, #0
 8007068:	68f1      	ldr	r1, [r6, #12]
 800706a:	db04      	blt.n	8007076 <_malloc_r+0x112>
 800706c:	68b3      	ldr	r3, [r6, #8]
 800706e:	60d9      	str	r1, [r3, #12]
 8007070:	608b      	str	r3, [r1, #8]
 8007072:	18b3      	adds	r3, r6, r2
 8007074:	e7a4      	b.n	8006fc0 <_malloc_r+0x5c>
 8007076:	460e      	mov	r6, r1
 8007078:	e7d0      	b.n	800701c <_malloc_r+0xb8>
 800707a:	2f00      	cmp	r7, #0
 800707c:	616a      	str	r2, [r5, #20]
 800707e:	612a      	str	r2, [r5, #16]
 8007080:	db05      	blt.n	800708e <_malloc_r+0x12a>
 8007082:	4430      	add	r0, r6
 8007084:	6843      	ldr	r3, [r0, #4]
 8007086:	f043 0301 	orr.w	r3, r3, #1
 800708a:	6043      	str	r3, [r0, #4]
 800708c:	e79c      	b.n	8006fc8 <_malloc_r+0x64>
 800708e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007092:	d244      	bcs.n	800711e <_malloc_r+0x1ba>
 8007094:	2201      	movs	r2, #1
 8007096:	08c0      	lsrs	r0, r0, #3
 8007098:	1087      	asrs	r7, r0, #2
 800709a:	fa02 f707 	lsl.w	r7, r2, r7
 800709e:	686a      	ldr	r2, [r5, #4]
 80070a0:	3001      	adds	r0, #1
 80070a2:	433a      	orrs	r2, r7
 80070a4:	606a      	str	r2, [r5, #4]
 80070a6:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 80070aa:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80070ae:	3a08      	subs	r2, #8
 80070b0:	60f2      	str	r2, [r6, #12]
 80070b2:	60b7      	str	r7, [r6, #8]
 80070b4:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 80070b8:	60fe      	str	r6, [r7, #12]
 80070ba:	2001      	movs	r0, #1
 80070bc:	109a      	asrs	r2, r3, #2
 80070be:	fa00 f202 	lsl.w	r2, r0, r2
 80070c2:	6868      	ldr	r0, [r5, #4]
 80070c4:	4282      	cmp	r2, r0
 80070c6:	f200 809f 	bhi.w	8007208 <_malloc_r+0x2a4>
 80070ca:	4202      	tst	r2, r0
 80070cc:	d106      	bne.n	80070dc <_malloc_r+0x178>
 80070ce:	f023 0303 	bic.w	r3, r3, #3
 80070d2:	0052      	lsls	r2, r2, #1
 80070d4:	4202      	tst	r2, r0
 80070d6:	f103 0304 	add.w	r3, r3, #4
 80070da:	d0fa      	beq.n	80070d2 <_malloc_r+0x16e>
 80070dc:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 80070e0:	46e0      	mov	r8, ip
 80070e2:	469e      	mov	lr, r3
 80070e4:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80070e8:	4546      	cmp	r6, r8
 80070ea:	d153      	bne.n	8007194 <_malloc_r+0x230>
 80070ec:	f10e 0e01 	add.w	lr, lr, #1
 80070f0:	f01e 0f03 	tst.w	lr, #3
 80070f4:	f108 0808 	add.w	r8, r8, #8
 80070f8:	d1f4      	bne.n	80070e4 <_malloc_r+0x180>
 80070fa:	0798      	lsls	r0, r3, #30
 80070fc:	d179      	bne.n	80071f2 <_malloc_r+0x28e>
 80070fe:	686b      	ldr	r3, [r5, #4]
 8007100:	ea23 0302 	bic.w	r3, r3, r2
 8007104:	606b      	str	r3, [r5, #4]
 8007106:	6868      	ldr	r0, [r5, #4]
 8007108:	0052      	lsls	r2, r2, #1
 800710a:	4282      	cmp	r2, r0
 800710c:	d87c      	bhi.n	8007208 <_malloc_r+0x2a4>
 800710e:	2a00      	cmp	r2, #0
 8007110:	d07a      	beq.n	8007208 <_malloc_r+0x2a4>
 8007112:	4673      	mov	r3, lr
 8007114:	4202      	tst	r2, r0
 8007116:	d1e1      	bne.n	80070dc <_malloc_r+0x178>
 8007118:	3304      	adds	r3, #4
 800711a:	0052      	lsls	r2, r2, #1
 800711c:	e7fa      	b.n	8007114 <_malloc_r+0x1b0>
 800711e:	0a42      	lsrs	r2, r0, #9
 8007120:	2a04      	cmp	r2, #4
 8007122:	d815      	bhi.n	8007150 <_malloc_r+0x1ec>
 8007124:	0982      	lsrs	r2, r0, #6
 8007126:	3238      	adds	r2, #56	; 0x38
 8007128:	1c57      	adds	r7, r2, #1
 800712a:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800712e:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8007132:	45be      	cmp	lr, r7
 8007134:	d126      	bne.n	8007184 <_malloc_r+0x220>
 8007136:	2001      	movs	r0, #1
 8007138:	1092      	asrs	r2, r2, #2
 800713a:	fa00 f202 	lsl.w	r2, r0, r2
 800713e:	6868      	ldr	r0, [r5, #4]
 8007140:	4310      	orrs	r0, r2
 8007142:	6068      	str	r0, [r5, #4]
 8007144:	f8c6 e00c 	str.w	lr, [r6, #12]
 8007148:	60b7      	str	r7, [r6, #8]
 800714a:	f8ce 6008 	str.w	r6, [lr, #8]
 800714e:	e7b3      	b.n	80070b8 <_malloc_r+0x154>
 8007150:	2a14      	cmp	r2, #20
 8007152:	d801      	bhi.n	8007158 <_malloc_r+0x1f4>
 8007154:	325b      	adds	r2, #91	; 0x5b
 8007156:	e7e7      	b.n	8007128 <_malloc_r+0x1c4>
 8007158:	2a54      	cmp	r2, #84	; 0x54
 800715a:	d802      	bhi.n	8007162 <_malloc_r+0x1fe>
 800715c:	0b02      	lsrs	r2, r0, #12
 800715e:	326e      	adds	r2, #110	; 0x6e
 8007160:	e7e2      	b.n	8007128 <_malloc_r+0x1c4>
 8007162:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007166:	d802      	bhi.n	800716e <_malloc_r+0x20a>
 8007168:	0bc2      	lsrs	r2, r0, #15
 800716a:	3277      	adds	r2, #119	; 0x77
 800716c:	e7dc      	b.n	8007128 <_malloc_r+0x1c4>
 800716e:	f240 5754 	movw	r7, #1364	; 0x554
 8007172:	42ba      	cmp	r2, r7
 8007174:	bf9a      	itte	ls
 8007176:	0c82      	lsrls	r2, r0, #18
 8007178:	327c      	addls	r2, #124	; 0x7c
 800717a:	227e      	movhi	r2, #126	; 0x7e
 800717c:	e7d4      	b.n	8007128 <_malloc_r+0x1c4>
 800717e:	68bf      	ldr	r7, [r7, #8]
 8007180:	45be      	cmp	lr, r7
 8007182:	d004      	beq.n	800718e <_malloc_r+0x22a>
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	f022 0203 	bic.w	r2, r2, #3
 800718a:	4290      	cmp	r0, r2
 800718c:	d3f7      	bcc.n	800717e <_malloc_r+0x21a>
 800718e:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8007192:	e7d7      	b.n	8007144 <_malloc_r+0x1e0>
 8007194:	6870      	ldr	r0, [r6, #4]
 8007196:	68f7      	ldr	r7, [r6, #12]
 8007198:	f020 0003 	bic.w	r0, r0, #3
 800719c:	eba0 0a04 	sub.w	sl, r0, r4
 80071a0:	f1ba 0f0f 	cmp.w	sl, #15
 80071a4:	dd10      	ble.n	80071c8 <_malloc_r+0x264>
 80071a6:	68b2      	ldr	r2, [r6, #8]
 80071a8:	1933      	adds	r3, r6, r4
 80071aa:	f044 0401 	orr.w	r4, r4, #1
 80071ae:	6074      	str	r4, [r6, #4]
 80071b0:	60d7      	str	r7, [r2, #12]
 80071b2:	60ba      	str	r2, [r7, #8]
 80071b4:	f04a 0201 	orr.w	r2, sl, #1
 80071b8:	616b      	str	r3, [r5, #20]
 80071ba:	612b      	str	r3, [r5, #16]
 80071bc:	60d9      	str	r1, [r3, #12]
 80071be:	6099      	str	r1, [r3, #8]
 80071c0:	605a      	str	r2, [r3, #4]
 80071c2:	f846 a000 	str.w	sl, [r6, r0]
 80071c6:	e6ff      	b.n	8006fc8 <_malloc_r+0x64>
 80071c8:	f1ba 0f00 	cmp.w	sl, #0
 80071cc:	db0f      	blt.n	80071ee <_malloc_r+0x28a>
 80071ce:	4430      	add	r0, r6
 80071d0:	6843      	ldr	r3, [r0, #4]
 80071d2:	f043 0301 	orr.w	r3, r3, #1
 80071d6:	6043      	str	r3, [r0, #4]
 80071d8:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80071dc:	4648      	mov	r0, r9
 80071de:	60df      	str	r7, [r3, #12]
 80071e0:	60bb      	str	r3, [r7, #8]
 80071e2:	f000 f91d 	bl	8007420 <__malloc_unlock>
 80071e6:	4630      	mov	r0, r6
 80071e8:	b003      	add	sp, #12
 80071ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ee:	463e      	mov	r6, r7
 80071f0:	e77a      	b.n	80070e8 <_malloc_r+0x184>
 80071f2:	f85c 0908 	ldr.w	r0, [ip], #-8
 80071f6:	3b01      	subs	r3, #1
 80071f8:	4584      	cmp	ip, r0
 80071fa:	f43f af7e 	beq.w	80070fa <_malloc_r+0x196>
 80071fe:	e782      	b.n	8007106 <_malloc_r+0x1a2>
 8007200:	20000314 	.word	0x20000314
 8007204:	2000031c 	.word	0x2000031c
 8007208:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800720c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8007210:	f026 0603 	bic.w	r6, r6, #3
 8007214:	42b4      	cmp	r4, r6
 8007216:	d803      	bhi.n	8007220 <_malloc_r+0x2bc>
 8007218:	1b33      	subs	r3, r6, r4
 800721a:	2b0f      	cmp	r3, #15
 800721c:	f300 8095 	bgt.w	800734a <_malloc_r+0x3e6>
 8007220:	4a4f      	ldr	r2, [pc, #316]	; (8007360 <_malloc_r+0x3fc>)
 8007222:	eb0b 0306 	add.w	r3, fp, r6
 8007226:	6817      	ldr	r7, [r2, #0]
 8007228:	4a4e      	ldr	r2, [pc, #312]	; (8007364 <_malloc_r+0x400>)
 800722a:	3710      	adds	r7, #16
 800722c:	6811      	ldr	r1, [r2, #0]
 800722e:	4427      	add	r7, r4
 8007230:	3101      	adds	r1, #1
 8007232:	d005      	beq.n	8007240 <_malloc_r+0x2dc>
 8007234:	494c      	ldr	r1, [pc, #304]	; (8007368 <_malloc_r+0x404>)
 8007236:	3901      	subs	r1, #1
 8007238:	440f      	add	r7, r1
 800723a:	3101      	adds	r1, #1
 800723c:	4249      	negs	r1, r1
 800723e:	400f      	ands	r7, r1
 8007240:	4639      	mov	r1, r7
 8007242:	4648      	mov	r0, r9
 8007244:	9201      	str	r2, [sp, #4]
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	f000 fcd8 	bl	8007bfc <_sbrk_r>
 800724c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007250:	4680      	mov	r8, r0
 8007252:	d055      	beq.n	8007300 <_malloc_r+0x39c>
 8007254:	9b00      	ldr	r3, [sp, #0]
 8007256:	9a01      	ldr	r2, [sp, #4]
 8007258:	4283      	cmp	r3, r0
 800725a:	d901      	bls.n	8007260 <_malloc_r+0x2fc>
 800725c:	45ab      	cmp	fp, r5
 800725e:	d14f      	bne.n	8007300 <_malloc_r+0x39c>
 8007260:	4842      	ldr	r0, [pc, #264]	; (800736c <_malloc_r+0x408>)
 8007262:	4543      	cmp	r3, r8
 8007264:	6801      	ldr	r1, [r0, #0]
 8007266:	4682      	mov	sl, r0
 8007268:	eb07 0e01 	add.w	lr, r7, r1
 800726c:	f8c0 e000 	str.w	lr, [r0]
 8007270:	493f      	ldr	r1, [pc, #252]	; (8007370 <_malloc_r+0x40c>)
 8007272:	d113      	bne.n	800729c <_malloc_r+0x338>
 8007274:	420b      	tst	r3, r1
 8007276:	d111      	bne.n	800729c <_malloc_r+0x338>
 8007278:	68ab      	ldr	r3, [r5, #8]
 800727a:	443e      	add	r6, r7
 800727c:	f046 0601 	orr.w	r6, r6, #1
 8007280:	605e      	str	r6, [r3, #4]
 8007282:	4a3c      	ldr	r2, [pc, #240]	; (8007374 <_malloc_r+0x410>)
 8007284:	f8da 3000 	ldr.w	r3, [sl]
 8007288:	6811      	ldr	r1, [r2, #0]
 800728a:	428b      	cmp	r3, r1
 800728c:	bf88      	it	hi
 800728e:	6013      	strhi	r3, [r2, #0]
 8007290:	4a39      	ldr	r2, [pc, #228]	; (8007378 <_malloc_r+0x414>)
 8007292:	6811      	ldr	r1, [r2, #0]
 8007294:	428b      	cmp	r3, r1
 8007296:	bf88      	it	hi
 8007298:	6013      	strhi	r3, [r2, #0]
 800729a:	e031      	b.n	8007300 <_malloc_r+0x39c>
 800729c:	6810      	ldr	r0, [r2, #0]
 800729e:	3001      	adds	r0, #1
 80072a0:	bf1b      	ittet	ne
 80072a2:	eba8 0303 	subne.w	r3, r8, r3
 80072a6:	4473      	addne	r3, lr
 80072a8:	f8c2 8000 	streq.w	r8, [r2]
 80072ac:	f8ca 3000 	strne.w	r3, [sl]
 80072b0:	f018 0007 	ands.w	r0, r8, #7
 80072b4:	bf1c      	itt	ne
 80072b6:	f1c0 0008 	rsbne	r0, r0, #8
 80072ba:	4480      	addne	r8, r0
 80072bc:	4b2a      	ldr	r3, [pc, #168]	; (8007368 <_malloc_r+0x404>)
 80072be:	4447      	add	r7, r8
 80072c0:	4418      	add	r0, r3
 80072c2:	400f      	ands	r7, r1
 80072c4:	1bc7      	subs	r7, r0, r7
 80072c6:	4639      	mov	r1, r7
 80072c8:	4648      	mov	r0, r9
 80072ca:	f000 fc97 	bl	8007bfc <_sbrk_r>
 80072ce:	1c43      	adds	r3, r0, #1
 80072d0:	bf04      	itt	eq
 80072d2:	4640      	moveq	r0, r8
 80072d4:	2700      	moveq	r7, #0
 80072d6:	f8da 3000 	ldr.w	r3, [sl]
 80072da:	eba0 0008 	sub.w	r0, r0, r8
 80072de:	443b      	add	r3, r7
 80072e0:	4407      	add	r7, r0
 80072e2:	f047 0701 	orr.w	r7, r7, #1
 80072e6:	45ab      	cmp	fp, r5
 80072e8:	f8c5 8008 	str.w	r8, [r5, #8]
 80072ec:	f8ca 3000 	str.w	r3, [sl]
 80072f0:	f8c8 7004 	str.w	r7, [r8, #4]
 80072f4:	d0c5      	beq.n	8007282 <_malloc_r+0x31e>
 80072f6:	2e0f      	cmp	r6, #15
 80072f8:	d810      	bhi.n	800731c <_malloc_r+0x3b8>
 80072fa:	2301      	movs	r3, #1
 80072fc:	f8c8 3004 	str.w	r3, [r8, #4]
 8007300:	68ab      	ldr	r3, [r5, #8]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	f022 0203 	bic.w	r2, r2, #3
 8007308:	4294      	cmp	r4, r2
 800730a:	eba2 0304 	sub.w	r3, r2, r4
 800730e:	d801      	bhi.n	8007314 <_malloc_r+0x3b0>
 8007310:	2b0f      	cmp	r3, #15
 8007312:	dc1a      	bgt.n	800734a <_malloc_r+0x3e6>
 8007314:	4648      	mov	r0, r9
 8007316:	f000 f883 	bl	8007420 <__malloc_unlock>
 800731a:	e630      	b.n	8006f7e <_malloc_r+0x1a>
 800731c:	2205      	movs	r2, #5
 800731e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007322:	3e0c      	subs	r6, #12
 8007324:	f026 0607 	bic.w	r6, r6, #7
 8007328:	f003 0301 	and.w	r3, r3, #1
 800732c:	4333      	orrs	r3, r6
 800732e:	f8cb 3004 	str.w	r3, [fp, #4]
 8007332:	2e0f      	cmp	r6, #15
 8007334:	eb0b 0306 	add.w	r3, fp, r6
 8007338:	605a      	str	r2, [r3, #4]
 800733a:	609a      	str	r2, [r3, #8]
 800733c:	d9a1      	bls.n	8007282 <_malloc_r+0x31e>
 800733e:	f10b 0108 	add.w	r1, fp, #8
 8007342:	4648      	mov	r0, r9
 8007344:	f001 ff26 	bl	8009194 <_free_r>
 8007348:	e79b      	b.n	8007282 <_malloc_r+0x31e>
 800734a:	68ae      	ldr	r6, [r5, #8]
 800734c:	f044 0201 	orr.w	r2, r4, #1
 8007350:	f043 0301 	orr.w	r3, r3, #1
 8007354:	4434      	add	r4, r6
 8007356:	6072      	str	r2, [r6, #4]
 8007358:	60ac      	str	r4, [r5, #8]
 800735a:	6063      	str	r3, [r4, #4]
 800735c:	e634      	b.n	8006fc8 <_malloc_r+0x64>
 800735e:	bf00      	nop
 8007360:	20001204 	.word	0x20001204
 8007364:	2000071c 	.word	0x2000071c
 8007368:	00001000 	.word	0x00001000
 800736c:	200011d4 	.word	0x200011d4
 8007370:	00000fff 	.word	0x00000fff
 8007374:	200011fc 	.word	0x200011fc
 8007378:	20001200 	.word	0x20001200

0800737c <_mbrtowc_r>:
 800737c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800737e:	9d08      	ldr	r5, [sp, #32]
 8007380:	4606      	mov	r6, r0
 8007382:	4617      	mov	r7, r2
 8007384:	4c10      	ldr	r4, [pc, #64]	; (80073c8 <_mbrtowc_r+0x4c>)
 8007386:	b9a2      	cbnz	r2, 80073b2 <_mbrtowc_r+0x36>
 8007388:	6823      	ldr	r3, [r4, #0]
 800738a:	4a10      	ldr	r2, [pc, #64]	; (80073cc <_mbrtowc_r+0x50>)
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	9500      	str	r5, [sp, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	bf08      	it	eq
 8007394:	4613      	moveq	r3, r2
 8007396:	4639      	mov	r1, r7
 8007398:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
 800739c:	2301      	movs	r3, #1
 800739e:	4a0c      	ldr	r2, [pc, #48]	; (80073d0 <_mbrtowc_r+0x54>)
 80073a0:	47a0      	blx	r4
 80073a2:	1c43      	adds	r3, r0, #1
 80073a4:	bf01      	itttt	eq
 80073a6:	2300      	moveq	r3, #0
 80073a8:	602b      	streq	r3, [r5, #0]
 80073aa:	238a      	moveq	r3, #138	; 0x8a
 80073ac:	6033      	streq	r3, [r6, #0]
 80073ae:	b003      	add	sp, #12
 80073b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073b2:	6824      	ldr	r4, [r4, #0]
 80073b4:	4f05      	ldr	r7, [pc, #20]	; (80073cc <_mbrtowc_r+0x50>)
 80073b6:	6a24      	ldr	r4, [r4, #32]
 80073b8:	9500      	str	r5, [sp, #0]
 80073ba:	2c00      	cmp	r4, #0
 80073bc:	bf08      	it	eq
 80073be:	463c      	moveq	r4, r7
 80073c0:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 80073c4:	e7ec      	b.n	80073a0 <_mbrtowc_r+0x24>
 80073c6:	bf00      	nop
 80073c8:	200000b4 	.word	0x200000b4
 80073cc:	200001a8 	.word	0x200001a8
 80073d0:	0800a00a 	.word	0x0800a00a

080073d4 <__ascii_mbtowc>:
 80073d4:	b082      	sub	sp, #8
 80073d6:	b901      	cbnz	r1, 80073da <__ascii_mbtowc+0x6>
 80073d8:	a901      	add	r1, sp, #4
 80073da:	b142      	cbz	r2, 80073ee <__ascii_mbtowc+0x1a>
 80073dc:	b14b      	cbz	r3, 80073f2 <__ascii_mbtowc+0x1e>
 80073de:	7813      	ldrb	r3, [r2, #0]
 80073e0:	600b      	str	r3, [r1, #0]
 80073e2:	7812      	ldrb	r2, [r2, #0]
 80073e4:	1c10      	adds	r0, r2, #0
 80073e6:	bf18      	it	ne
 80073e8:	2001      	movne	r0, #1
 80073ea:	b002      	add	sp, #8
 80073ec:	4770      	bx	lr
 80073ee:	4610      	mov	r0, r2
 80073f0:	e7fb      	b.n	80073ea <__ascii_mbtowc+0x16>
 80073f2:	f06f 0001 	mvn.w	r0, #1
 80073f6:	e7f8      	b.n	80073ea <__ascii_mbtowc+0x16>

080073f8 <memchr>:
 80073f8:	b510      	push	{r4, lr}
 80073fa:	b2c9      	uxtb	r1, r1
 80073fc:	4402      	add	r2, r0
 80073fe:	4290      	cmp	r0, r2
 8007400:	4603      	mov	r3, r0
 8007402:	d101      	bne.n	8007408 <memchr+0x10>
 8007404:	2000      	movs	r0, #0
 8007406:	bd10      	pop	{r4, pc}
 8007408:	781c      	ldrb	r4, [r3, #0]
 800740a:	3001      	adds	r0, #1
 800740c:	428c      	cmp	r4, r1
 800740e:	d1f6      	bne.n	80073fe <memchr+0x6>
 8007410:	4618      	mov	r0, r3
 8007412:	bd10      	pop	{r4, pc}

08007414 <__malloc_lock>:
 8007414:	4801      	ldr	r0, [pc, #4]	; (800741c <__malloc_lock+0x8>)
 8007416:	f002 ba97 	b.w	8009948 <__retarget_lock_acquire_recursive>
 800741a:	bf00      	nop
 800741c:	20001238 	.word	0x20001238

08007420 <__malloc_unlock>:
 8007420:	4801      	ldr	r0, [pc, #4]	; (8007428 <__malloc_unlock+0x8>)
 8007422:	f002 ba92 	b.w	800994a <__retarget_lock_release_recursive>
 8007426:	bf00      	nop
 8007428:	20001238 	.word	0x20001238

0800742c <_Balloc>:
 800742c:	b570      	push	{r4, r5, r6, lr}
 800742e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007430:	4604      	mov	r4, r0
 8007432:	460e      	mov	r6, r1
 8007434:	b93d      	cbnz	r5, 8007446 <_Balloc+0x1a>
 8007436:	2010      	movs	r0, #16
 8007438:	f7ff fd8c 	bl	8006f54 <malloc>
 800743c:	6260      	str	r0, [r4, #36]	; 0x24
 800743e:	6045      	str	r5, [r0, #4]
 8007440:	6085      	str	r5, [r0, #8]
 8007442:	6005      	str	r5, [r0, #0]
 8007444:	60c5      	str	r5, [r0, #12]
 8007446:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007448:	68eb      	ldr	r3, [r5, #12]
 800744a:	b183      	cbz	r3, 800746e <_Balloc+0x42>
 800744c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007454:	b9b8      	cbnz	r0, 8007486 <_Balloc+0x5a>
 8007456:	2101      	movs	r1, #1
 8007458:	fa01 f506 	lsl.w	r5, r1, r6
 800745c:	1d6a      	adds	r2, r5, #5
 800745e:	0092      	lsls	r2, r2, #2
 8007460:	4620      	mov	r0, r4
 8007462:	f001 fe14 	bl	800908e <_calloc_r>
 8007466:	b160      	cbz	r0, 8007482 <_Balloc+0x56>
 8007468:	6046      	str	r6, [r0, #4]
 800746a:	6085      	str	r5, [r0, #8]
 800746c:	e00e      	b.n	800748c <_Balloc+0x60>
 800746e:	2221      	movs	r2, #33	; 0x21
 8007470:	2104      	movs	r1, #4
 8007472:	4620      	mov	r0, r4
 8007474:	f001 fe0b 	bl	800908e <_calloc_r>
 8007478:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800747a:	60e8      	str	r0, [r5, #12]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1e4      	bne.n	800744c <_Balloc+0x20>
 8007482:	2000      	movs	r0, #0
 8007484:	bd70      	pop	{r4, r5, r6, pc}
 8007486:	6802      	ldr	r2, [r0, #0]
 8007488:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800748c:	2300      	movs	r3, #0
 800748e:	6103      	str	r3, [r0, #16]
 8007490:	60c3      	str	r3, [r0, #12]
 8007492:	bd70      	pop	{r4, r5, r6, pc}

08007494 <_Bfree>:
 8007494:	b570      	push	{r4, r5, r6, lr}
 8007496:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007498:	4606      	mov	r6, r0
 800749a:	460d      	mov	r5, r1
 800749c:	b93c      	cbnz	r4, 80074ae <_Bfree+0x1a>
 800749e:	2010      	movs	r0, #16
 80074a0:	f7ff fd58 	bl	8006f54 <malloc>
 80074a4:	6270      	str	r0, [r6, #36]	; 0x24
 80074a6:	6044      	str	r4, [r0, #4]
 80074a8:	6084      	str	r4, [r0, #8]
 80074aa:	6004      	str	r4, [r0, #0]
 80074ac:	60c4      	str	r4, [r0, #12]
 80074ae:	b13d      	cbz	r5, 80074c0 <_Bfree+0x2c>
 80074b0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80074b2:	686a      	ldr	r2, [r5, #4]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074ba:	6029      	str	r1, [r5, #0]
 80074bc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80074c0:	bd70      	pop	{r4, r5, r6, pc}

080074c2 <__multadd>:
 80074c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c6:	461f      	mov	r7, r3
 80074c8:	4606      	mov	r6, r0
 80074ca:	460c      	mov	r4, r1
 80074cc:	2300      	movs	r3, #0
 80074ce:	690d      	ldr	r5, [r1, #16]
 80074d0:	f101 0e14 	add.w	lr, r1, #20
 80074d4:	f8de 0000 	ldr.w	r0, [lr]
 80074d8:	3301      	adds	r3, #1
 80074da:	b281      	uxth	r1, r0
 80074dc:	fb02 7101 	mla	r1, r2, r1, r7
 80074e0:	0c00      	lsrs	r0, r0, #16
 80074e2:	0c0f      	lsrs	r7, r1, #16
 80074e4:	fb02 7000 	mla	r0, r2, r0, r7
 80074e8:	b289      	uxth	r1, r1
 80074ea:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80074ee:	429d      	cmp	r5, r3
 80074f0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80074f4:	f84e 1b04 	str.w	r1, [lr], #4
 80074f8:	dcec      	bgt.n	80074d4 <__multadd+0x12>
 80074fa:	b1d7      	cbz	r7, 8007532 <__multadd+0x70>
 80074fc:	68a3      	ldr	r3, [r4, #8]
 80074fe:	429d      	cmp	r5, r3
 8007500:	db12      	blt.n	8007528 <__multadd+0x66>
 8007502:	6861      	ldr	r1, [r4, #4]
 8007504:	4630      	mov	r0, r6
 8007506:	3101      	adds	r1, #1
 8007508:	f7ff ff90 	bl	800742c <_Balloc>
 800750c:	4680      	mov	r8, r0
 800750e:	6922      	ldr	r2, [r4, #16]
 8007510:	f104 010c 	add.w	r1, r4, #12
 8007514:	3202      	adds	r2, #2
 8007516:	0092      	lsls	r2, r2, #2
 8007518:	300c      	adds	r0, #12
 800751a:	f7fd f8d9 	bl	80046d0 <memcpy>
 800751e:	4621      	mov	r1, r4
 8007520:	4630      	mov	r0, r6
 8007522:	f7ff ffb7 	bl	8007494 <_Bfree>
 8007526:	4644      	mov	r4, r8
 8007528:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800752c:	3501      	adds	r5, #1
 800752e:	615f      	str	r7, [r3, #20]
 8007530:	6125      	str	r5, [r4, #16]
 8007532:	4620      	mov	r0, r4
 8007534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007538 <__s2b>:
 8007538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800753c:	4615      	mov	r5, r2
 800753e:	2209      	movs	r2, #9
 8007540:	461f      	mov	r7, r3
 8007542:	3308      	adds	r3, #8
 8007544:	460c      	mov	r4, r1
 8007546:	fb93 f3f2 	sdiv	r3, r3, r2
 800754a:	4606      	mov	r6, r0
 800754c:	2201      	movs	r2, #1
 800754e:	2100      	movs	r1, #0
 8007550:	429a      	cmp	r2, r3
 8007552:	db20      	blt.n	8007596 <__s2b+0x5e>
 8007554:	4630      	mov	r0, r6
 8007556:	f7ff ff69 	bl	800742c <_Balloc>
 800755a:	9b08      	ldr	r3, [sp, #32]
 800755c:	2d09      	cmp	r5, #9
 800755e:	6143      	str	r3, [r0, #20]
 8007560:	f04f 0301 	mov.w	r3, #1
 8007564:	6103      	str	r3, [r0, #16]
 8007566:	dd19      	ble.n	800759c <__s2b+0x64>
 8007568:	f104 0909 	add.w	r9, r4, #9
 800756c:	46c8      	mov	r8, r9
 800756e:	442c      	add	r4, r5
 8007570:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007574:	4601      	mov	r1, r0
 8007576:	3b30      	subs	r3, #48	; 0x30
 8007578:	220a      	movs	r2, #10
 800757a:	4630      	mov	r0, r6
 800757c:	f7ff ffa1 	bl	80074c2 <__multadd>
 8007580:	45a0      	cmp	r8, r4
 8007582:	d1f5      	bne.n	8007570 <__s2b+0x38>
 8007584:	f1a5 0408 	sub.w	r4, r5, #8
 8007588:	444c      	add	r4, r9
 800758a:	1b2d      	subs	r5, r5, r4
 800758c:	1963      	adds	r3, r4, r5
 800758e:	42bb      	cmp	r3, r7
 8007590:	db07      	blt.n	80075a2 <__s2b+0x6a>
 8007592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007596:	0052      	lsls	r2, r2, #1
 8007598:	3101      	adds	r1, #1
 800759a:	e7d9      	b.n	8007550 <__s2b+0x18>
 800759c:	340a      	adds	r4, #10
 800759e:	2509      	movs	r5, #9
 80075a0:	e7f3      	b.n	800758a <__s2b+0x52>
 80075a2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80075a6:	4601      	mov	r1, r0
 80075a8:	3b30      	subs	r3, #48	; 0x30
 80075aa:	220a      	movs	r2, #10
 80075ac:	4630      	mov	r0, r6
 80075ae:	f7ff ff88 	bl	80074c2 <__multadd>
 80075b2:	e7eb      	b.n	800758c <__s2b+0x54>

080075b4 <__hi0bits>:
 80075b4:	0c02      	lsrs	r2, r0, #16
 80075b6:	0412      	lsls	r2, r2, #16
 80075b8:	4603      	mov	r3, r0
 80075ba:	b9b2      	cbnz	r2, 80075ea <__hi0bits+0x36>
 80075bc:	0403      	lsls	r3, r0, #16
 80075be:	2010      	movs	r0, #16
 80075c0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80075c4:	bf04      	itt	eq
 80075c6:	021b      	lsleq	r3, r3, #8
 80075c8:	3008      	addeq	r0, #8
 80075ca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80075ce:	bf04      	itt	eq
 80075d0:	011b      	lsleq	r3, r3, #4
 80075d2:	3004      	addeq	r0, #4
 80075d4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80075d8:	bf04      	itt	eq
 80075da:	009b      	lsleq	r3, r3, #2
 80075dc:	3002      	addeq	r0, #2
 80075de:	2b00      	cmp	r3, #0
 80075e0:	db06      	blt.n	80075f0 <__hi0bits+0x3c>
 80075e2:	005b      	lsls	r3, r3, #1
 80075e4:	d503      	bpl.n	80075ee <__hi0bits+0x3a>
 80075e6:	3001      	adds	r0, #1
 80075e8:	4770      	bx	lr
 80075ea:	2000      	movs	r0, #0
 80075ec:	e7e8      	b.n	80075c0 <__hi0bits+0xc>
 80075ee:	2020      	movs	r0, #32
 80075f0:	4770      	bx	lr

080075f2 <__lo0bits>:
 80075f2:	6803      	ldr	r3, [r0, #0]
 80075f4:	4601      	mov	r1, r0
 80075f6:	f013 0207 	ands.w	r2, r3, #7
 80075fa:	d00b      	beq.n	8007614 <__lo0bits+0x22>
 80075fc:	07da      	lsls	r2, r3, #31
 80075fe:	d423      	bmi.n	8007648 <__lo0bits+0x56>
 8007600:	0798      	lsls	r0, r3, #30
 8007602:	bf49      	itett	mi
 8007604:	085b      	lsrmi	r3, r3, #1
 8007606:	089b      	lsrpl	r3, r3, #2
 8007608:	2001      	movmi	r0, #1
 800760a:	600b      	strmi	r3, [r1, #0]
 800760c:	bf5c      	itt	pl
 800760e:	600b      	strpl	r3, [r1, #0]
 8007610:	2002      	movpl	r0, #2
 8007612:	4770      	bx	lr
 8007614:	b298      	uxth	r0, r3
 8007616:	b9a8      	cbnz	r0, 8007644 <__lo0bits+0x52>
 8007618:	2010      	movs	r0, #16
 800761a:	0c1b      	lsrs	r3, r3, #16
 800761c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007620:	bf04      	itt	eq
 8007622:	0a1b      	lsreq	r3, r3, #8
 8007624:	3008      	addeq	r0, #8
 8007626:	071a      	lsls	r2, r3, #28
 8007628:	bf04      	itt	eq
 800762a:	091b      	lsreq	r3, r3, #4
 800762c:	3004      	addeq	r0, #4
 800762e:	079a      	lsls	r2, r3, #30
 8007630:	bf04      	itt	eq
 8007632:	089b      	lsreq	r3, r3, #2
 8007634:	3002      	addeq	r0, #2
 8007636:	07da      	lsls	r2, r3, #31
 8007638:	d402      	bmi.n	8007640 <__lo0bits+0x4e>
 800763a:	085b      	lsrs	r3, r3, #1
 800763c:	d006      	beq.n	800764c <__lo0bits+0x5a>
 800763e:	3001      	adds	r0, #1
 8007640:	600b      	str	r3, [r1, #0]
 8007642:	4770      	bx	lr
 8007644:	4610      	mov	r0, r2
 8007646:	e7e9      	b.n	800761c <__lo0bits+0x2a>
 8007648:	2000      	movs	r0, #0
 800764a:	4770      	bx	lr
 800764c:	2020      	movs	r0, #32
 800764e:	4770      	bx	lr

08007650 <__i2b>:
 8007650:	b510      	push	{r4, lr}
 8007652:	460c      	mov	r4, r1
 8007654:	2101      	movs	r1, #1
 8007656:	f7ff fee9 	bl	800742c <_Balloc>
 800765a:	2201      	movs	r2, #1
 800765c:	6144      	str	r4, [r0, #20]
 800765e:	6102      	str	r2, [r0, #16]
 8007660:	bd10      	pop	{r4, pc}

08007662 <__multiply>:
 8007662:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007666:	4614      	mov	r4, r2
 8007668:	690a      	ldr	r2, [r1, #16]
 800766a:	6923      	ldr	r3, [r4, #16]
 800766c:	4689      	mov	r9, r1
 800766e:	429a      	cmp	r2, r3
 8007670:	bfbe      	ittt	lt
 8007672:	460b      	movlt	r3, r1
 8007674:	46a1      	movlt	r9, r4
 8007676:	461c      	movlt	r4, r3
 8007678:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800767c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007680:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8007684:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007688:	eb07 060a 	add.w	r6, r7, sl
 800768c:	429e      	cmp	r6, r3
 800768e:	bfc8      	it	gt
 8007690:	3101      	addgt	r1, #1
 8007692:	f7ff fecb 	bl	800742c <_Balloc>
 8007696:	f100 0514 	add.w	r5, r0, #20
 800769a:	462b      	mov	r3, r5
 800769c:	2200      	movs	r2, #0
 800769e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80076a2:	4543      	cmp	r3, r8
 80076a4:	d316      	bcc.n	80076d4 <__multiply+0x72>
 80076a6:	f104 0214 	add.w	r2, r4, #20
 80076aa:	f109 0114 	add.w	r1, r9, #20
 80076ae:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80076b2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80076b6:	9301      	str	r3, [sp, #4]
 80076b8:	9c01      	ldr	r4, [sp, #4]
 80076ba:	4613      	mov	r3, r2
 80076bc:	4294      	cmp	r4, r2
 80076be:	d80c      	bhi.n	80076da <__multiply+0x78>
 80076c0:	2e00      	cmp	r6, #0
 80076c2:	dd03      	ble.n	80076cc <__multiply+0x6a>
 80076c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d054      	beq.n	8007776 <__multiply+0x114>
 80076cc:	6106      	str	r6, [r0, #16]
 80076ce:	b003      	add	sp, #12
 80076d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d4:	f843 2b04 	str.w	r2, [r3], #4
 80076d8:	e7e3      	b.n	80076a2 <__multiply+0x40>
 80076da:	f8b3 a000 	ldrh.w	sl, [r3]
 80076de:	3204      	adds	r2, #4
 80076e0:	f1ba 0f00 	cmp.w	sl, #0
 80076e4:	d020      	beq.n	8007728 <__multiply+0xc6>
 80076e6:	46ae      	mov	lr, r5
 80076e8:	4689      	mov	r9, r1
 80076ea:	f04f 0c00 	mov.w	ip, #0
 80076ee:	f859 4b04 	ldr.w	r4, [r9], #4
 80076f2:	f8be b000 	ldrh.w	fp, [lr]
 80076f6:	b2a3      	uxth	r3, r4
 80076f8:	fb0a b303 	mla	r3, sl, r3, fp
 80076fc:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8007700:	f8de 4000 	ldr.w	r4, [lr]
 8007704:	4463      	add	r3, ip
 8007706:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800770a:	fb0a c40b 	mla	r4, sl, fp, ip
 800770e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007712:	b29b      	uxth	r3, r3
 8007714:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007718:	454f      	cmp	r7, r9
 800771a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800771e:	f84e 3b04 	str.w	r3, [lr], #4
 8007722:	d8e4      	bhi.n	80076ee <__multiply+0x8c>
 8007724:	f8ce c000 	str.w	ip, [lr]
 8007728:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800772c:	f1b9 0f00 	cmp.w	r9, #0
 8007730:	d01f      	beq.n	8007772 <__multiply+0x110>
 8007732:	46ae      	mov	lr, r5
 8007734:	468c      	mov	ip, r1
 8007736:	f04f 0a00 	mov.w	sl, #0
 800773a:	682b      	ldr	r3, [r5, #0]
 800773c:	f8bc 4000 	ldrh.w	r4, [ip]
 8007740:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007744:	b29b      	uxth	r3, r3
 8007746:	fb09 b404 	mla	r4, r9, r4, fp
 800774a:	44a2      	add	sl, r4
 800774c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8007750:	f84e 3b04 	str.w	r3, [lr], #4
 8007754:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007758:	f8be 4000 	ldrh.w	r4, [lr]
 800775c:	0c1b      	lsrs	r3, r3, #16
 800775e:	fb09 4303 	mla	r3, r9, r3, r4
 8007762:	4567      	cmp	r7, ip
 8007764:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8007768:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800776c:	d8e6      	bhi.n	800773c <__multiply+0xda>
 800776e:	f8ce 3000 	str.w	r3, [lr]
 8007772:	3504      	adds	r5, #4
 8007774:	e7a0      	b.n	80076b8 <__multiply+0x56>
 8007776:	3e01      	subs	r6, #1
 8007778:	e7a2      	b.n	80076c0 <__multiply+0x5e>
	...

0800777c <__pow5mult>:
 800777c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007780:	4615      	mov	r5, r2
 8007782:	f012 0203 	ands.w	r2, r2, #3
 8007786:	4606      	mov	r6, r0
 8007788:	460f      	mov	r7, r1
 800778a:	d007      	beq.n	800779c <__pow5mult+0x20>
 800778c:	4c21      	ldr	r4, [pc, #132]	; (8007814 <__pow5mult+0x98>)
 800778e:	3a01      	subs	r2, #1
 8007790:	2300      	movs	r3, #0
 8007792:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007796:	f7ff fe94 	bl	80074c2 <__multadd>
 800779a:	4607      	mov	r7, r0
 800779c:	10ad      	asrs	r5, r5, #2
 800779e:	d035      	beq.n	800780c <__pow5mult+0x90>
 80077a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80077a2:	b93c      	cbnz	r4, 80077b4 <__pow5mult+0x38>
 80077a4:	2010      	movs	r0, #16
 80077a6:	f7ff fbd5 	bl	8006f54 <malloc>
 80077aa:	6270      	str	r0, [r6, #36]	; 0x24
 80077ac:	6044      	str	r4, [r0, #4]
 80077ae:	6084      	str	r4, [r0, #8]
 80077b0:	6004      	str	r4, [r0, #0]
 80077b2:	60c4      	str	r4, [r0, #12]
 80077b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80077b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077bc:	b94c      	cbnz	r4, 80077d2 <__pow5mult+0x56>
 80077be:	f240 2171 	movw	r1, #625	; 0x271
 80077c2:	4630      	mov	r0, r6
 80077c4:	f7ff ff44 	bl	8007650 <__i2b>
 80077c8:	2300      	movs	r3, #0
 80077ca:	4604      	mov	r4, r0
 80077cc:	f8c8 0008 	str.w	r0, [r8, #8]
 80077d0:	6003      	str	r3, [r0, #0]
 80077d2:	f04f 0800 	mov.w	r8, #0
 80077d6:	07eb      	lsls	r3, r5, #31
 80077d8:	d50a      	bpl.n	80077f0 <__pow5mult+0x74>
 80077da:	4639      	mov	r1, r7
 80077dc:	4622      	mov	r2, r4
 80077de:	4630      	mov	r0, r6
 80077e0:	f7ff ff3f 	bl	8007662 <__multiply>
 80077e4:	4681      	mov	r9, r0
 80077e6:	4639      	mov	r1, r7
 80077e8:	4630      	mov	r0, r6
 80077ea:	f7ff fe53 	bl	8007494 <_Bfree>
 80077ee:	464f      	mov	r7, r9
 80077f0:	106d      	asrs	r5, r5, #1
 80077f2:	d00b      	beq.n	800780c <__pow5mult+0x90>
 80077f4:	6820      	ldr	r0, [r4, #0]
 80077f6:	b938      	cbnz	r0, 8007808 <__pow5mult+0x8c>
 80077f8:	4622      	mov	r2, r4
 80077fa:	4621      	mov	r1, r4
 80077fc:	4630      	mov	r0, r6
 80077fe:	f7ff ff30 	bl	8007662 <__multiply>
 8007802:	6020      	str	r0, [r4, #0]
 8007804:	f8c0 8000 	str.w	r8, [r0]
 8007808:	4604      	mov	r4, r0
 800780a:	e7e4      	b.n	80077d6 <__pow5mult+0x5a>
 800780c:	4638      	mov	r0, r7
 800780e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007812:	bf00      	nop
 8007814:	0800a100 	.word	0x0800a100

08007818 <__lshift>:
 8007818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800781c:	460c      	mov	r4, r1
 800781e:	4607      	mov	r7, r0
 8007820:	4616      	mov	r6, r2
 8007822:	6923      	ldr	r3, [r4, #16]
 8007824:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007828:	eb0a 0903 	add.w	r9, sl, r3
 800782c:	6849      	ldr	r1, [r1, #4]
 800782e:	68a3      	ldr	r3, [r4, #8]
 8007830:	f109 0501 	add.w	r5, r9, #1
 8007834:	42ab      	cmp	r3, r5
 8007836:	db31      	blt.n	800789c <__lshift+0x84>
 8007838:	4638      	mov	r0, r7
 800783a:	f7ff fdf7 	bl	800742c <_Balloc>
 800783e:	2200      	movs	r2, #0
 8007840:	4680      	mov	r8, r0
 8007842:	4611      	mov	r1, r2
 8007844:	f100 0314 	add.w	r3, r0, #20
 8007848:	4552      	cmp	r2, sl
 800784a:	db2a      	blt.n	80078a2 <__lshift+0x8a>
 800784c:	6920      	ldr	r0, [r4, #16]
 800784e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007852:	f104 0114 	add.w	r1, r4, #20
 8007856:	f016 021f 	ands.w	r2, r6, #31
 800785a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800785e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8007862:	d022      	beq.n	80078aa <__lshift+0x92>
 8007864:	2000      	movs	r0, #0
 8007866:	f1c2 0c20 	rsb	ip, r2, #32
 800786a:	680e      	ldr	r6, [r1, #0]
 800786c:	4096      	lsls	r6, r2
 800786e:	4330      	orrs	r0, r6
 8007870:	f843 0b04 	str.w	r0, [r3], #4
 8007874:	f851 0b04 	ldr.w	r0, [r1], #4
 8007878:	458e      	cmp	lr, r1
 800787a:	fa20 f00c 	lsr.w	r0, r0, ip
 800787e:	d8f4      	bhi.n	800786a <__lshift+0x52>
 8007880:	6018      	str	r0, [r3, #0]
 8007882:	b108      	cbz	r0, 8007888 <__lshift+0x70>
 8007884:	f109 0502 	add.w	r5, r9, #2
 8007888:	3d01      	subs	r5, #1
 800788a:	4638      	mov	r0, r7
 800788c:	f8c8 5010 	str.w	r5, [r8, #16]
 8007890:	4621      	mov	r1, r4
 8007892:	f7ff fdff 	bl	8007494 <_Bfree>
 8007896:	4640      	mov	r0, r8
 8007898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800789c:	3101      	adds	r1, #1
 800789e:	005b      	lsls	r3, r3, #1
 80078a0:	e7c8      	b.n	8007834 <__lshift+0x1c>
 80078a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80078a6:	3201      	adds	r2, #1
 80078a8:	e7ce      	b.n	8007848 <__lshift+0x30>
 80078aa:	3b04      	subs	r3, #4
 80078ac:	f851 2b04 	ldr.w	r2, [r1], #4
 80078b0:	458e      	cmp	lr, r1
 80078b2:	f843 2f04 	str.w	r2, [r3, #4]!
 80078b6:	d8f9      	bhi.n	80078ac <__lshift+0x94>
 80078b8:	e7e6      	b.n	8007888 <__lshift+0x70>

080078ba <__mcmp>:
 80078ba:	6903      	ldr	r3, [r0, #16]
 80078bc:	690a      	ldr	r2, [r1, #16]
 80078be:	b530      	push	{r4, r5, lr}
 80078c0:	1a9b      	subs	r3, r3, r2
 80078c2:	d10c      	bne.n	80078de <__mcmp+0x24>
 80078c4:	0092      	lsls	r2, r2, #2
 80078c6:	3014      	adds	r0, #20
 80078c8:	3114      	adds	r1, #20
 80078ca:	1884      	adds	r4, r0, r2
 80078cc:	4411      	add	r1, r2
 80078ce:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80078d2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80078d6:	4295      	cmp	r5, r2
 80078d8:	d003      	beq.n	80078e2 <__mcmp+0x28>
 80078da:	d305      	bcc.n	80078e8 <__mcmp+0x2e>
 80078dc:	2301      	movs	r3, #1
 80078de:	4618      	mov	r0, r3
 80078e0:	bd30      	pop	{r4, r5, pc}
 80078e2:	42a0      	cmp	r0, r4
 80078e4:	d3f3      	bcc.n	80078ce <__mcmp+0x14>
 80078e6:	e7fa      	b.n	80078de <__mcmp+0x24>
 80078e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078ec:	e7f7      	b.n	80078de <__mcmp+0x24>

080078ee <__mdiff>:
 80078ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078f2:	460d      	mov	r5, r1
 80078f4:	4607      	mov	r7, r0
 80078f6:	4611      	mov	r1, r2
 80078f8:	4628      	mov	r0, r5
 80078fa:	4614      	mov	r4, r2
 80078fc:	f7ff ffdd 	bl	80078ba <__mcmp>
 8007900:	1e06      	subs	r6, r0, #0
 8007902:	d108      	bne.n	8007916 <__mdiff+0x28>
 8007904:	4631      	mov	r1, r6
 8007906:	4638      	mov	r0, r7
 8007908:	f7ff fd90 	bl	800742c <_Balloc>
 800790c:	2301      	movs	r3, #1
 800790e:	6146      	str	r6, [r0, #20]
 8007910:	6103      	str	r3, [r0, #16]
 8007912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007916:	bfa4      	itt	ge
 8007918:	4623      	movge	r3, r4
 800791a:	462c      	movge	r4, r5
 800791c:	4638      	mov	r0, r7
 800791e:	6861      	ldr	r1, [r4, #4]
 8007920:	bfa6      	itte	ge
 8007922:	461d      	movge	r5, r3
 8007924:	2600      	movge	r6, #0
 8007926:	2601      	movlt	r6, #1
 8007928:	f7ff fd80 	bl	800742c <_Balloc>
 800792c:	f04f 0c00 	mov.w	ip, #0
 8007930:	60c6      	str	r6, [r0, #12]
 8007932:	692b      	ldr	r3, [r5, #16]
 8007934:	6926      	ldr	r6, [r4, #16]
 8007936:	f104 0214 	add.w	r2, r4, #20
 800793a:	f105 0914 	add.w	r9, r5, #20
 800793e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007942:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007946:	f100 0114 	add.w	r1, r0, #20
 800794a:	f852 ab04 	ldr.w	sl, [r2], #4
 800794e:	f859 5b04 	ldr.w	r5, [r9], #4
 8007952:	fa1f f38a 	uxth.w	r3, sl
 8007956:	4463      	add	r3, ip
 8007958:	b2ac      	uxth	r4, r5
 800795a:	1b1b      	subs	r3, r3, r4
 800795c:	0c2c      	lsrs	r4, r5, #16
 800795e:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007962:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007966:	b29b      	uxth	r3, r3
 8007968:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800796c:	45c8      	cmp	r8, r9
 800796e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007972:	4696      	mov	lr, r2
 8007974:	f841 4b04 	str.w	r4, [r1], #4
 8007978:	d8e7      	bhi.n	800794a <__mdiff+0x5c>
 800797a:	45be      	cmp	lr, r7
 800797c:	d305      	bcc.n	800798a <__mdiff+0x9c>
 800797e:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007982:	b18b      	cbz	r3, 80079a8 <__mdiff+0xba>
 8007984:	6106      	str	r6, [r0, #16]
 8007986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800798a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800798e:	b2a2      	uxth	r2, r4
 8007990:	4462      	add	r2, ip
 8007992:	1413      	asrs	r3, r2, #16
 8007994:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007998:	b292      	uxth	r2, r2
 800799a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800799e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80079a2:	f841 2b04 	str.w	r2, [r1], #4
 80079a6:	e7e8      	b.n	800797a <__mdiff+0x8c>
 80079a8:	3e01      	subs	r6, #1
 80079aa:	e7e8      	b.n	800797e <__mdiff+0x90>

080079ac <__ulp>:
 80079ac:	4b10      	ldr	r3, [pc, #64]	; (80079f0 <__ulp+0x44>)
 80079ae:	400b      	ands	r3, r1
 80079b0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	dd02      	ble.n	80079be <__ulp+0x12>
 80079b8:	2000      	movs	r0, #0
 80079ba:	4619      	mov	r1, r3
 80079bc:	4770      	bx	lr
 80079be:	425b      	negs	r3, r3
 80079c0:	151b      	asrs	r3, r3, #20
 80079c2:	2b13      	cmp	r3, #19
 80079c4:	f04f 0000 	mov.w	r0, #0
 80079c8:	f04f 0100 	mov.w	r1, #0
 80079cc:	dc04      	bgt.n	80079d8 <__ulp+0x2c>
 80079ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80079d2:	fa42 f103 	asr.w	r1, r2, r3
 80079d6:	4770      	bx	lr
 80079d8:	2201      	movs	r2, #1
 80079da:	3b14      	subs	r3, #20
 80079dc:	2b1e      	cmp	r3, #30
 80079de:	bfce      	itee	gt
 80079e0:	4613      	movgt	r3, r2
 80079e2:	f1c3 031f 	rsble	r3, r3, #31
 80079e6:	fa02 f303 	lslle.w	r3, r2, r3
 80079ea:	4618      	mov	r0, r3
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	7ff00000 	.word	0x7ff00000

080079f4 <__b2d>:
 80079f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079f8:	6907      	ldr	r7, [r0, #16]
 80079fa:	f100 0914 	add.w	r9, r0, #20
 80079fe:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007a02:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007a06:	f1a7 0804 	sub.w	r8, r7, #4
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	f7ff fdd2 	bl	80075b4 <__hi0bits>
 8007a10:	f1c0 0320 	rsb	r3, r0, #32
 8007a14:	280a      	cmp	r0, #10
 8007a16:	600b      	str	r3, [r1, #0]
 8007a18:	491e      	ldr	r1, [pc, #120]	; (8007a94 <__b2d+0xa0>)
 8007a1a:	dc17      	bgt.n	8007a4c <__b2d+0x58>
 8007a1c:	45c1      	cmp	r9, r8
 8007a1e:	bf28      	it	cs
 8007a20:	2200      	movcs	r2, #0
 8007a22:	f1c0 0e0b 	rsb	lr, r0, #11
 8007a26:	fa26 f30e 	lsr.w	r3, r6, lr
 8007a2a:	bf38      	it	cc
 8007a2c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007a30:	ea43 0501 	orr.w	r5, r3, r1
 8007a34:	f100 0315 	add.w	r3, r0, #21
 8007a38:	fa06 f303 	lsl.w	r3, r6, r3
 8007a3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a40:	ea43 0402 	orr.w	r4, r3, r2
 8007a44:	4620      	mov	r0, r4
 8007a46:	4629      	mov	r1, r5
 8007a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a4c:	45c1      	cmp	r9, r8
 8007a4e:	bf3a      	itte	cc
 8007a50:	f1a7 0808 	subcc.w	r8, r7, #8
 8007a54:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007a58:	2200      	movcs	r2, #0
 8007a5a:	f1b0 030b 	subs.w	r3, r0, #11
 8007a5e:	d015      	beq.n	8007a8c <__b2d+0x98>
 8007a60:	409e      	lsls	r6, r3
 8007a62:	f1c3 0720 	rsb	r7, r3, #32
 8007a66:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8007a6a:	fa22 f107 	lsr.w	r1, r2, r7
 8007a6e:	45c8      	cmp	r8, r9
 8007a70:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8007a74:	ea46 0501 	orr.w	r5, r6, r1
 8007a78:	bf94      	ite	ls
 8007a7a:	2100      	movls	r1, #0
 8007a7c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007a80:	fa02 f003 	lsl.w	r0, r2, r3
 8007a84:	40f9      	lsrs	r1, r7
 8007a86:	ea40 0401 	orr.w	r4, r0, r1
 8007a8a:	e7db      	b.n	8007a44 <__b2d+0x50>
 8007a8c:	ea46 0501 	orr.w	r5, r6, r1
 8007a90:	4614      	mov	r4, r2
 8007a92:	e7d7      	b.n	8007a44 <__b2d+0x50>
 8007a94:	3ff00000 	.word	0x3ff00000

08007a98 <__d2b>:
 8007a98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007a9c:	461c      	mov	r4, r3
 8007a9e:	2101      	movs	r1, #1
 8007aa0:	4690      	mov	r8, r2
 8007aa2:	9e08      	ldr	r6, [sp, #32]
 8007aa4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007aa6:	f7ff fcc1 	bl	800742c <_Balloc>
 8007aaa:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007aae:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007ab2:	4607      	mov	r7, r0
 8007ab4:	bb34      	cbnz	r4, 8007b04 <__d2b+0x6c>
 8007ab6:	9201      	str	r2, [sp, #4]
 8007ab8:	f1b8 0f00 	cmp.w	r8, #0
 8007abc:	d027      	beq.n	8007b0e <__d2b+0x76>
 8007abe:	a802      	add	r0, sp, #8
 8007ac0:	f840 8d08 	str.w	r8, [r0, #-8]!
 8007ac4:	f7ff fd95 	bl	80075f2 <__lo0bits>
 8007ac8:	9900      	ldr	r1, [sp, #0]
 8007aca:	b1f0      	cbz	r0, 8007b0a <__d2b+0x72>
 8007acc:	9a01      	ldr	r2, [sp, #4]
 8007ace:	f1c0 0320 	rsb	r3, r0, #32
 8007ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad6:	430b      	orrs	r3, r1
 8007ad8:	40c2      	lsrs	r2, r0
 8007ada:	617b      	str	r3, [r7, #20]
 8007adc:	9201      	str	r2, [sp, #4]
 8007ade:	9b01      	ldr	r3, [sp, #4]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	bf14      	ite	ne
 8007ae4:	2102      	movne	r1, #2
 8007ae6:	2101      	moveq	r1, #1
 8007ae8:	61bb      	str	r3, [r7, #24]
 8007aea:	6139      	str	r1, [r7, #16]
 8007aec:	b1c4      	cbz	r4, 8007b20 <__d2b+0x88>
 8007aee:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007af2:	4404      	add	r4, r0
 8007af4:	6034      	str	r4, [r6, #0]
 8007af6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007afa:	6028      	str	r0, [r5, #0]
 8007afc:	4638      	mov	r0, r7
 8007afe:	b002      	add	sp, #8
 8007b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b04:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007b08:	e7d5      	b.n	8007ab6 <__d2b+0x1e>
 8007b0a:	6179      	str	r1, [r7, #20]
 8007b0c:	e7e7      	b.n	8007ade <__d2b+0x46>
 8007b0e:	a801      	add	r0, sp, #4
 8007b10:	f7ff fd6f 	bl	80075f2 <__lo0bits>
 8007b14:	2101      	movs	r1, #1
 8007b16:	9b01      	ldr	r3, [sp, #4]
 8007b18:	6139      	str	r1, [r7, #16]
 8007b1a:	617b      	str	r3, [r7, #20]
 8007b1c:	3020      	adds	r0, #32
 8007b1e:	e7e5      	b.n	8007aec <__d2b+0x54>
 8007b20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b24:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007b28:	6030      	str	r0, [r6, #0]
 8007b2a:	6918      	ldr	r0, [r3, #16]
 8007b2c:	f7ff fd42 	bl	80075b4 <__hi0bits>
 8007b30:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007b34:	e7e1      	b.n	8007afa <__d2b+0x62>

08007b36 <__ratio>:
 8007b36:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007b3a:	4688      	mov	r8, r1
 8007b3c:	4669      	mov	r1, sp
 8007b3e:	4681      	mov	r9, r0
 8007b40:	f7ff ff58 	bl	80079f4 <__b2d>
 8007b44:	460d      	mov	r5, r1
 8007b46:	4604      	mov	r4, r0
 8007b48:	a901      	add	r1, sp, #4
 8007b4a:	4640      	mov	r0, r8
 8007b4c:	f7ff ff52 	bl	80079f4 <__b2d>
 8007b50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b54:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007b58:	9e00      	ldr	r6, [sp, #0]
 8007b5a:	1a9a      	subs	r2, r3, r2
 8007b5c:	9b01      	ldr	r3, [sp, #4]
 8007b5e:	1af3      	subs	r3, r6, r3
 8007b60:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	bfd6      	itet	le
 8007b68:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007b6c:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 8007b70:	eb01 5103 	addle.w	r1, r1, r3, lsl #20
 8007b74:	4602      	mov	r2, r0
 8007b76:	460b      	mov	r3, r1
 8007b78:	4620      	mov	r0, r4
 8007b7a:	4629      	mov	r1, r5
 8007b7c:	f7f8 fddc 	bl	8000738 <__aeabi_ddiv>
 8007b80:	b002      	add	sp, #8
 8007b82:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08007b86 <__copybits>:
 8007b86:	3901      	subs	r1, #1
 8007b88:	b510      	push	{r4, lr}
 8007b8a:	1149      	asrs	r1, r1, #5
 8007b8c:	6914      	ldr	r4, [r2, #16]
 8007b8e:	3101      	adds	r1, #1
 8007b90:	f102 0314 	add.w	r3, r2, #20
 8007b94:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007b98:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007b9c:	42a3      	cmp	r3, r4
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	d303      	bcc.n	8007baa <__copybits+0x24>
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	428a      	cmp	r2, r1
 8007ba6:	d305      	bcc.n	8007bb4 <__copybits+0x2e>
 8007ba8:	bd10      	pop	{r4, pc}
 8007baa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bae:	f840 2b04 	str.w	r2, [r0], #4
 8007bb2:	e7f3      	b.n	8007b9c <__copybits+0x16>
 8007bb4:	f842 3b04 	str.w	r3, [r2], #4
 8007bb8:	e7f4      	b.n	8007ba4 <__copybits+0x1e>

08007bba <__any_on>:
 8007bba:	f100 0214 	add.w	r2, r0, #20
 8007bbe:	6900      	ldr	r0, [r0, #16]
 8007bc0:	114b      	asrs	r3, r1, #5
 8007bc2:	4298      	cmp	r0, r3
 8007bc4:	b510      	push	{r4, lr}
 8007bc6:	db11      	blt.n	8007bec <__any_on+0x32>
 8007bc8:	dd0a      	ble.n	8007be0 <__any_on+0x26>
 8007bca:	f011 011f 	ands.w	r1, r1, #31
 8007bce:	d007      	beq.n	8007be0 <__any_on+0x26>
 8007bd0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007bd4:	fa24 f001 	lsr.w	r0, r4, r1
 8007bd8:	fa00 f101 	lsl.w	r1, r0, r1
 8007bdc:	428c      	cmp	r4, r1
 8007bde:	d10b      	bne.n	8007bf8 <__any_on+0x3e>
 8007be0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d803      	bhi.n	8007bf0 <__any_on+0x36>
 8007be8:	2000      	movs	r0, #0
 8007bea:	bd10      	pop	{r4, pc}
 8007bec:	4603      	mov	r3, r0
 8007bee:	e7f7      	b.n	8007be0 <__any_on+0x26>
 8007bf0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007bf4:	2900      	cmp	r1, #0
 8007bf6:	d0f5      	beq.n	8007be4 <__any_on+0x2a>
 8007bf8:	2001      	movs	r0, #1
 8007bfa:	bd10      	pop	{r4, pc}

08007bfc <_sbrk_r>:
 8007bfc:	b538      	push	{r3, r4, r5, lr}
 8007bfe:	2300      	movs	r3, #0
 8007c00:	4c05      	ldr	r4, [pc, #20]	; (8007c18 <_sbrk_r+0x1c>)
 8007c02:	4605      	mov	r5, r0
 8007c04:	4608      	mov	r0, r1
 8007c06:	6023      	str	r3, [r4, #0]
 8007c08:	f002 f84e 	bl	8009ca8 <_sbrk>
 8007c0c:	1c43      	adds	r3, r0, #1
 8007c0e:	d102      	bne.n	8007c16 <_sbrk_r+0x1a>
 8007c10:	6823      	ldr	r3, [r4, #0]
 8007c12:	b103      	cbz	r3, 8007c16 <_sbrk_r+0x1a>
 8007c14:	602b      	str	r3, [r5, #0]
 8007c16:	bd38      	pop	{r3, r4, r5, pc}
 8007c18:	20001230 	.word	0x20001230

08007c1c <__sccl>:
 8007c1c:	b570      	push	{r4, r5, r6, lr}
 8007c1e:	780b      	ldrb	r3, [r1, #0]
 8007c20:	1e44      	subs	r4, r0, #1
 8007c22:	2b5e      	cmp	r3, #94	; 0x5e
 8007c24:	bf13      	iteet	ne
 8007c26:	1c4a      	addne	r2, r1, #1
 8007c28:	1c8a      	addeq	r2, r1, #2
 8007c2a:	784b      	ldrbeq	r3, [r1, #1]
 8007c2c:	2100      	movne	r1, #0
 8007c2e:	bf08      	it	eq
 8007c30:	2101      	moveq	r1, #1
 8007c32:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8007c36:	f804 1f01 	strb.w	r1, [r4, #1]!
 8007c3a:	42a5      	cmp	r5, r4
 8007c3c:	d1fb      	bne.n	8007c36 <__sccl+0x1a>
 8007c3e:	b913      	cbnz	r3, 8007c46 <__sccl+0x2a>
 8007c40:	3a01      	subs	r2, #1
 8007c42:	4610      	mov	r0, r2
 8007c44:	bd70      	pop	{r4, r5, r6, pc}
 8007c46:	f081 0401 	eor.w	r4, r1, #1
 8007c4a:	4611      	mov	r1, r2
 8007c4c:	54c4      	strb	r4, [r0, r3]
 8007c4e:	780d      	ldrb	r5, [r1, #0]
 8007c50:	1c4a      	adds	r2, r1, #1
 8007c52:	2d2d      	cmp	r5, #45	; 0x2d
 8007c54:	d006      	beq.n	8007c64 <__sccl+0x48>
 8007c56:	2d5d      	cmp	r5, #93	; 0x5d
 8007c58:	d0f3      	beq.n	8007c42 <__sccl+0x26>
 8007c5a:	b90d      	cbnz	r5, 8007c60 <__sccl+0x44>
 8007c5c:	460a      	mov	r2, r1
 8007c5e:	e7f0      	b.n	8007c42 <__sccl+0x26>
 8007c60:	462b      	mov	r3, r5
 8007c62:	e7f2      	b.n	8007c4a <__sccl+0x2e>
 8007c64:	784e      	ldrb	r6, [r1, #1]
 8007c66:	2e5d      	cmp	r6, #93	; 0x5d
 8007c68:	d0fa      	beq.n	8007c60 <__sccl+0x44>
 8007c6a:	42b3      	cmp	r3, r6
 8007c6c:	dcf8      	bgt.n	8007c60 <__sccl+0x44>
 8007c6e:	3102      	adds	r1, #2
 8007c70:	3301      	adds	r3, #1
 8007c72:	429e      	cmp	r6, r3
 8007c74:	54c4      	strb	r4, [r0, r3]
 8007c76:	dcfb      	bgt.n	8007c70 <__sccl+0x54>
 8007c78:	e7e9      	b.n	8007c4e <__sccl+0x32>
	...

08007c7c <nanf>:
 8007c7c:	4800      	ldr	r0, [pc, #0]	; (8007c80 <nanf+0x4>)
 8007c7e:	4770      	bx	lr
 8007c80:	7fc00000 	.word	0x7fc00000

08007c84 <sulp>:
 8007c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c88:	460f      	mov	r7, r1
 8007c8a:	4690      	mov	r8, r2
 8007c8c:	f7ff fe8e 	bl	80079ac <__ulp>
 8007c90:	4604      	mov	r4, r0
 8007c92:	460d      	mov	r5, r1
 8007c94:	f1b8 0f00 	cmp.w	r8, #0
 8007c98:	d011      	beq.n	8007cbe <sulp+0x3a>
 8007c9a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007c9e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	dd0b      	ble.n	8007cbe <sulp+0x3a>
 8007ca6:	2400      	movs	r4, #0
 8007ca8:	051b      	lsls	r3, r3, #20
 8007caa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007cae:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007cb2:	4622      	mov	r2, r4
 8007cb4:	462b      	mov	r3, r5
 8007cb6:	f7f8 fc15 	bl	80004e4 <__aeabi_dmul>
 8007cba:	4604      	mov	r4, r0
 8007cbc:	460d      	mov	r5, r1
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	4629      	mov	r1, r5
 8007cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007cc8 <_strtod_l>:
 8007cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ccc:	4699      	mov	r9, r3
 8007cce:	2300      	movs	r3, #0
 8007cd0:	b09f      	sub	sp, #124	; 0x7c
 8007cd2:	4680      	mov	r8, r0
 8007cd4:	4648      	mov	r0, r9
 8007cd6:	460c      	mov	r4, r1
 8007cd8:	9215      	str	r2, [sp, #84]	; 0x54
 8007cda:	931a      	str	r3, [sp, #104]	; 0x68
 8007cdc:	f7ff f92a 	bl	8006f34 <__localeconv_l>
 8007ce0:	4607      	mov	r7, r0
 8007ce2:	6800      	ldr	r0, [r0, #0]
 8007ce4:	f7f8 fa3e 	bl	8000164 <strlen>
 8007ce8:	f04f 0a00 	mov.w	sl, #0
 8007cec:	4605      	mov	r5, r0
 8007cee:	f04f 0b00 	mov.w	fp, #0
 8007cf2:	9419      	str	r4, [sp, #100]	; 0x64
 8007cf4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007cf6:	781a      	ldrb	r2, [r3, #0]
 8007cf8:	2a0d      	cmp	r2, #13
 8007cfa:	d833      	bhi.n	8007d64 <_strtod_l+0x9c>
 8007cfc:	2a09      	cmp	r2, #9
 8007cfe:	d237      	bcs.n	8007d70 <_strtod_l+0xa8>
 8007d00:	2a00      	cmp	r2, #0
 8007d02:	d03f      	beq.n	8007d84 <_strtod_l+0xbc>
 8007d04:	2300      	movs	r3, #0
 8007d06:	9309      	str	r3, [sp, #36]	; 0x24
 8007d08:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007d0a:	7833      	ldrb	r3, [r6, #0]
 8007d0c:	2b30      	cmp	r3, #48	; 0x30
 8007d0e:	f040 8101 	bne.w	8007f14 <_strtod_l+0x24c>
 8007d12:	7873      	ldrb	r3, [r6, #1]
 8007d14:	2b58      	cmp	r3, #88	; 0x58
 8007d16:	d001      	beq.n	8007d1c <_strtod_l+0x54>
 8007d18:	2b78      	cmp	r3, #120	; 0x78
 8007d1a:	d16b      	bne.n	8007df4 <_strtod_l+0x12c>
 8007d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d1e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007d22:	9301      	str	r3, [sp, #4]
 8007d24:	ab1a      	add	r3, sp, #104	; 0x68
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	4aaa      	ldr	r2, [pc, #680]	; (8007fd4 <_strtod_l+0x30c>)
 8007d2a:	ab1b      	add	r3, sp, #108	; 0x6c
 8007d2c:	a919      	add	r1, sp, #100	; 0x64
 8007d2e:	4640      	mov	r0, r8
 8007d30:	f001 fb36 	bl	80093a0 <__gethex>
 8007d34:	f010 0407 	ands.w	r4, r0, #7
 8007d38:	4605      	mov	r5, r0
 8007d3a:	d005      	beq.n	8007d48 <_strtod_l+0x80>
 8007d3c:	2c06      	cmp	r4, #6
 8007d3e:	d12b      	bne.n	8007d98 <_strtod_l+0xd0>
 8007d40:	2300      	movs	r3, #0
 8007d42:	3601      	adds	r6, #1
 8007d44:	9619      	str	r6, [sp, #100]	; 0x64
 8007d46:	9309      	str	r3, [sp, #36]	; 0x24
 8007d48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f040 859d 	bne.w	800888a <_strtod_l+0xbc2>
 8007d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d52:	b1e3      	cbz	r3, 8007d8e <_strtod_l+0xc6>
 8007d54:	4652      	mov	r2, sl
 8007d56:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007d5a:	4610      	mov	r0, r2
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	b01f      	add	sp, #124	; 0x7c
 8007d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d64:	2a2b      	cmp	r2, #43	; 0x2b
 8007d66:	d006      	beq.n	8007d76 <_strtod_l+0xae>
 8007d68:	2a2d      	cmp	r2, #45	; 0x2d
 8007d6a:	d013      	beq.n	8007d94 <_strtod_l+0xcc>
 8007d6c:	2a20      	cmp	r2, #32
 8007d6e:	d1c9      	bne.n	8007d04 <_strtod_l+0x3c>
 8007d70:	3301      	adds	r3, #1
 8007d72:	9319      	str	r3, [sp, #100]	; 0x64
 8007d74:	e7be      	b.n	8007cf4 <_strtod_l+0x2c>
 8007d76:	2200      	movs	r2, #0
 8007d78:	9209      	str	r2, [sp, #36]	; 0x24
 8007d7a:	1c5a      	adds	r2, r3, #1
 8007d7c:	9219      	str	r2, [sp, #100]	; 0x64
 8007d7e:	785b      	ldrb	r3, [r3, #1]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1c1      	bne.n	8007d08 <_strtod_l+0x40>
 8007d84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d86:	9419      	str	r4, [sp, #100]	; 0x64
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f040 857c 	bne.w	8008886 <_strtod_l+0xbbe>
 8007d8e:	4652      	mov	r2, sl
 8007d90:	465b      	mov	r3, fp
 8007d92:	e7e2      	b.n	8007d5a <_strtod_l+0x92>
 8007d94:	2201      	movs	r2, #1
 8007d96:	e7ef      	b.n	8007d78 <_strtod_l+0xb0>
 8007d98:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007d9a:	b13a      	cbz	r2, 8007dac <_strtod_l+0xe4>
 8007d9c:	2135      	movs	r1, #53	; 0x35
 8007d9e:	a81c      	add	r0, sp, #112	; 0x70
 8007da0:	f7ff fef1 	bl	8007b86 <__copybits>
 8007da4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007da6:	4640      	mov	r0, r8
 8007da8:	f7ff fb74 	bl	8007494 <_Bfree>
 8007dac:	3c01      	subs	r4, #1
 8007dae:	2c04      	cmp	r4, #4
 8007db0:	d808      	bhi.n	8007dc4 <_strtod_l+0xfc>
 8007db2:	e8df f004 	tbb	[pc, r4]
 8007db6:	030c      	.short	0x030c
 8007db8:	1a17      	.short	0x1a17
 8007dba:	0c          	.byte	0x0c
 8007dbb:	00          	.byte	0x00
 8007dbc:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8007dc0:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8007dc4:	0729      	lsls	r1, r5, #28
 8007dc6:	d5bf      	bpl.n	8007d48 <_strtod_l+0x80>
 8007dc8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007dcc:	e7bc      	b.n	8007d48 <_strtod_l+0x80>
 8007dce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007dd0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007dd2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007dd6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007dda:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8007dde:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007de2:	e7ef      	b.n	8007dc4 <_strtod_l+0xfc>
 8007de4:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8007fe0 <_strtod_l+0x318>
 8007de8:	e7ec      	b.n	8007dc4 <_strtod_l+0xfc>
 8007dea:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007dee:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007df2:	e7e7      	b.n	8007dc4 <_strtod_l+0xfc>
 8007df4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007df6:	1c5a      	adds	r2, r3, #1
 8007df8:	9219      	str	r2, [sp, #100]	; 0x64
 8007dfa:	785b      	ldrb	r3, [r3, #1]
 8007dfc:	2b30      	cmp	r3, #48	; 0x30
 8007dfe:	d0f9      	beq.n	8007df4 <_strtod_l+0x12c>
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d0a1      	beq.n	8007d48 <_strtod_l+0x80>
 8007e04:	2301      	movs	r3, #1
 8007e06:	9308      	str	r3, [sp, #32]
 8007e08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e0a:	220a      	movs	r2, #10
 8007e0c:	930a      	str	r3, [sp, #40]	; 0x28
 8007e0e:	2300      	movs	r3, #0
 8007e10:	9305      	str	r3, [sp, #20]
 8007e12:	9306      	str	r3, [sp, #24]
 8007e14:	9304      	str	r3, [sp, #16]
 8007e16:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007e18:	7806      	ldrb	r6, [r0, #0]
 8007e1a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007e1e:	b2d9      	uxtb	r1, r3
 8007e20:	2909      	cmp	r1, #9
 8007e22:	d979      	bls.n	8007f18 <_strtod_l+0x250>
 8007e24:	462a      	mov	r2, r5
 8007e26:	6839      	ldr	r1, [r7, #0]
 8007e28:	f001 ff2c 	bl	8009c84 <strncmp>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	f000 8085 	beq.w	8007f3c <_strtod_l+0x274>
 8007e32:	2000      	movs	r0, #0
 8007e34:	4633      	mov	r3, r6
 8007e36:	4602      	mov	r2, r0
 8007e38:	4601      	mov	r1, r0
 8007e3a:	9d04      	ldr	r5, [sp, #16]
 8007e3c:	2b65      	cmp	r3, #101	; 0x65
 8007e3e:	d002      	beq.n	8007e46 <_strtod_l+0x17e>
 8007e40:	2b45      	cmp	r3, #69	; 0x45
 8007e42:	f040 80ef 	bne.w	8008024 <_strtod_l+0x35c>
 8007e46:	b925      	cbnz	r5, 8007e52 <_strtod_l+0x18a>
 8007e48:	b910      	cbnz	r0, 8007e50 <_strtod_l+0x188>
 8007e4a:	9b08      	ldr	r3, [sp, #32]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d099      	beq.n	8007d84 <_strtod_l+0xbc>
 8007e50:	2500      	movs	r5, #0
 8007e52:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8007e54:	1c63      	adds	r3, r4, #1
 8007e56:	9319      	str	r3, [sp, #100]	; 0x64
 8007e58:	7863      	ldrb	r3, [r4, #1]
 8007e5a:	2b2b      	cmp	r3, #43	; 0x2b
 8007e5c:	f000 80cf 	beq.w	8007ffe <_strtod_l+0x336>
 8007e60:	2b2d      	cmp	r3, #45	; 0x2d
 8007e62:	f000 80d2 	beq.w	800800a <_strtod_l+0x342>
 8007e66:	2600      	movs	r6, #0
 8007e68:	9607      	str	r6, [sp, #28]
 8007e6a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8007e6e:	2e09      	cmp	r6, #9
 8007e70:	f200 80d7 	bhi.w	8008022 <_strtod_l+0x35a>
 8007e74:	2b30      	cmp	r3, #48	; 0x30
 8007e76:	f000 80ca 	beq.w	800800e <_strtod_l+0x346>
 8007e7a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 8007e7e:	2e08      	cmp	r6, #8
 8007e80:	f200 80d0 	bhi.w	8008024 <_strtod_l+0x35c>
 8007e84:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007e88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e8a:	f04f 0c0a 	mov.w	ip, #10
 8007e8e:	461f      	mov	r7, r3
 8007e90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e92:	1c5e      	adds	r6, r3, #1
 8007e94:	9619      	str	r6, [sp, #100]	; 0x64
 8007e96:	785b      	ldrb	r3, [r3, #1]
 8007e98:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
 8007e9c:	f1b9 0f09 	cmp.w	r9, #9
 8007ea0:	f240 80ba 	bls.w	8008018 <_strtod_l+0x350>
 8007ea4:	1bf6      	subs	r6, r6, r7
 8007ea6:	2e08      	cmp	r6, #8
 8007ea8:	f644 691f 	movw	r9, #19999	; 0x4e1f
 8007eac:	dc02      	bgt.n	8007eb4 <_strtod_l+0x1ec>
 8007eae:	45f1      	cmp	r9, lr
 8007eb0:	bfa8      	it	ge
 8007eb2:	46f1      	movge	r9, lr
 8007eb4:	9e07      	ldr	r6, [sp, #28]
 8007eb6:	b10e      	cbz	r6, 8007ebc <_strtod_l+0x1f4>
 8007eb8:	f1c9 0900 	rsb	r9, r9, #0
 8007ebc:	2d00      	cmp	r5, #0
 8007ebe:	f040 80d7 	bne.w	8008070 <_strtod_l+0x3a8>
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	f47f af40 	bne.w	8007d48 <_strtod_l+0x80>
 8007ec8:	9a08      	ldr	r2, [sp, #32]
 8007eca:	2a00      	cmp	r2, #0
 8007ecc:	f47f af3c 	bne.w	8007d48 <_strtod_l+0x80>
 8007ed0:	2900      	cmp	r1, #0
 8007ed2:	f47f af57 	bne.w	8007d84 <_strtod_l+0xbc>
 8007ed6:	2b4e      	cmp	r3, #78	; 0x4e
 8007ed8:	f000 80ad 	beq.w	8008036 <_strtod_l+0x36e>
 8007edc:	f300 80a5 	bgt.w	800802a <_strtod_l+0x362>
 8007ee0:	2b49      	cmp	r3, #73	; 0x49
 8007ee2:	f47f af4f 	bne.w	8007d84 <_strtod_l+0xbc>
 8007ee6:	493c      	ldr	r1, [pc, #240]	; (8007fd8 <_strtod_l+0x310>)
 8007ee8:	a819      	add	r0, sp, #100	; 0x64
 8007eea:	f001 fc8a 	bl	8009802 <__match>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	f43f af48 	beq.w	8007d84 <_strtod_l+0xbc>
 8007ef4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ef6:	4939      	ldr	r1, [pc, #228]	; (8007fdc <_strtod_l+0x314>)
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	a819      	add	r0, sp, #100	; 0x64
 8007efc:	9319      	str	r3, [sp, #100]	; 0x64
 8007efe:	f001 fc80 	bl	8009802 <__match>
 8007f02:	b910      	cbnz	r0, 8007f0a <_strtod_l+0x242>
 8007f04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f06:	3301      	adds	r3, #1
 8007f08:	9319      	str	r3, [sp, #100]	; 0x64
 8007f0a:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8007fe0 <_strtod_l+0x318>
 8007f0e:	f04f 0a00 	mov.w	sl, #0
 8007f12:	e719      	b.n	8007d48 <_strtod_l+0x80>
 8007f14:	2300      	movs	r3, #0
 8007f16:	e776      	b.n	8007e06 <_strtod_l+0x13e>
 8007f18:	9904      	ldr	r1, [sp, #16]
 8007f1a:	3001      	adds	r0, #1
 8007f1c:	2908      	cmp	r1, #8
 8007f1e:	bfd5      	itete	le
 8007f20:	9906      	ldrle	r1, [sp, #24]
 8007f22:	9905      	ldrgt	r1, [sp, #20]
 8007f24:	fb02 3301 	mlale	r3, r2, r1, r3
 8007f28:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007f2c:	bfd4      	ite	le
 8007f2e:	9306      	strle	r3, [sp, #24]
 8007f30:	9305      	strgt	r3, [sp, #20]
 8007f32:	9b04      	ldr	r3, [sp, #16]
 8007f34:	9019      	str	r0, [sp, #100]	; 0x64
 8007f36:	3301      	adds	r3, #1
 8007f38:	9304      	str	r3, [sp, #16]
 8007f3a:	e76c      	b.n	8007e16 <_strtod_l+0x14e>
 8007f3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f3e:	195a      	adds	r2, r3, r5
 8007f40:	9219      	str	r2, [sp, #100]	; 0x64
 8007f42:	9a04      	ldr	r2, [sp, #16]
 8007f44:	5d5b      	ldrb	r3, [r3, r5]
 8007f46:	2a00      	cmp	r2, #0
 8007f48:	d154      	bne.n	8007ff4 <_strtod_l+0x32c>
 8007f4a:	4610      	mov	r0, r2
 8007f4c:	2b30      	cmp	r3, #48	; 0x30
 8007f4e:	d02a      	beq.n	8007fa6 <_strtod_l+0x2de>
 8007f50:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007f54:	2a08      	cmp	r2, #8
 8007f56:	f200 849d 	bhi.w	8008894 <_strtod_l+0xbcc>
 8007f5a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007f5c:	920a      	str	r2, [sp, #40]	; 0x28
 8007f5e:	4602      	mov	r2, r0
 8007f60:	2000      	movs	r0, #0
 8007f62:	4605      	mov	r5, r0
 8007f64:	3b30      	subs	r3, #48	; 0x30
 8007f66:	f100 0101 	add.w	r1, r0, #1
 8007f6a:	d011      	beq.n	8007f90 <_strtod_l+0x2c8>
 8007f6c:	440a      	add	r2, r1
 8007f6e:	260a      	movs	r6, #10
 8007f70:	4629      	mov	r1, r5
 8007f72:	eb00 0c05 	add.w	ip, r0, r5
 8007f76:	4561      	cmp	r1, ip
 8007f78:	d11b      	bne.n	8007fb2 <_strtod_l+0x2ea>
 8007f7a:	4428      	add	r0, r5
 8007f7c:	2808      	cmp	r0, #8
 8007f7e:	f100 0501 	add.w	r5, r0, #1
 8007f82:	dc2f      	bgt.n	8007fe4 <_strtod_l+0x31c>
 8007f84:	210a      	movs	r1, #10
 8007f86:	9806      	ldr	r0, [sp, #24]
 8007f88:	fb01 3300 	mla	r3, r1, r0, r3
 8007f8c:	9306      	str	r3, [sp, #24]
 8007f8e:	2100      	movs	r1, #0
 8007f90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f92:	1c58      	adds	r0, r3, #1
 8007f94:	9019      	str	r0, [sp, #100]	; 0x64
 8007f96:	4608      	mov	r0, r1
 8007f98:	785b      	ldrb	r3, [r3, #1]
 8007f9a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007f9e:	2909      	cmp	r1, #9
 8007fa0:	d9e0      	bls.n	8007f64 <_strtod_l+0x29c>
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	e74a      	b.n	8007e3c <_strtod_l+0x174>
 8007fa6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007fa8:	3001      	adds	r0, #1
 8007faa:	1c5a      	adds	r2, r3, #1
 8007fac:	9219      	str	r2, [sp, #100]	; 0x64
 8007fae:	785b      	ldrb	r3, [r3, #1]
 8007fb0:	e7cc      	b.n	8007f4c <_strtod_l+0x284>
 8007fb2:	3101      	adds	r1, #1
 8007fb4:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8007fb8:	f1be 0f08 	cmp.w	lr, #8
 8007fbc:	dc03      	bgt.n	8007fc6 <_strtod_l+0x2fe>
 8007fbe:	9f06      	ldr	r7, [sp, #24]
 8007fc0:	4377      	muls	r7, r6
 8007fc2:	9706      	str	r7, [sp, #24]
 8007fc4:	e7d7      	b.n	8007f76 <_strtod_l+0x2ae>
 8007fc6:	2910      	cmp	r1, #16
 8007fc8:	bfde      	ittt	le
 8007fca:	9f05      	ldrle	r7, [sp, #20]
 8007fcc:	4377      	mulle	r7, r6
 8007fce:	9705      	strle	r7, [sp, #20]
 8007fd0:	e7d1      	b.n	8007f76 <_strtod_l+0x2ae>
 8007fd2:	bf00      	nop
 8007fd4:	0800a10c 	.word	0x0800a10c
 8007fd8:	08009f7d 	.word	0x08009f7d
 8007fdc:	08009ff7 	.word	0x08009ff7
 8007fe0:	7ff00000 	.word	0x7ff00000
 8007fe4:	2d10      	cmp	r5, #16
 8007fe6:	bfdf      	itttt	le
 8007fe8:	210a      	movle	r1, #10
 8007fea:	9805      	ldrle	r0, [sp, #20]
 8007fec:	fb01 3300 	mlale	r3, r1, r0, r3
 8007ff0:	9305      	strle	r3, [sp, #20]
 8007ff2:	e7cc      	b.n	8007f8e <_strtod_l+0x2c6>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	9d04      	ldr	r5, [sp, #16]
 8007ff8:	e7cf      	b.n	8007f9a <_strtod_l+0x2d2>
 8007ffa:	2101      	movs	r1, #1
 8007ffc:	e724      	b.n	8007e48 <_strtod_l+0x180>
 8007ffe:	2300      	movs	r3, #0
 8008000:	9307      	str	r3, [sp, #28]
 8008002:	1ca3      	adds	r3, r4, #2
 8008004:	9319      	str	r3, [sp, #100]	; 0x64
 8008006:	78a3      	ldrb	r3, [r4, #2]
 8008008:	e72f      	b.n	8007e6a <_strtod_l+0x1a2>
 800800a:	2301      	movs	r3, #1
 800800c:	e7f8      	b.n	8008000 <_strtod_l+0x338>
 800800e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008010:	1c5e      	adds	r6, r3, #1
 8008012:	9619      	str	r6, [sp, #100]	; 0x64
 8008014:	785b      	ldrb	r3, [r3, #1]
 8008016:	e72d      	b.n	8007e74 <_strtod_l+0x1ac>
 8008018:	fb0c 3e0e 	mla	lr, ip, lr, r3
 800801c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008020:	e736      	b.n	8007e90 <_strtod_l+0x1c8>
 8008022:	9419      	str	r4, [sp, #100]	; 0x64
 8008024:	f04f 0900 	mov.w	r9, #0
 8008028:	e748      	b.n	8007ebc <_strtod_l+0x1f4>
 800802a:	2b69      	cmp	r3, #105	; 0x69
 800802c:	f43f af5b 	beq.w	8007ee6 <_strtod_l+0x21e>
 8008030:	2b6e      	cmp	r3, #110	; 0x6e
 8008032:	f47f aea7 	bne.w	8007d84 <_strtod_l+0xbc>
 8008036:	498c      	ldr	r1, [pc, #560]	; (8008268 <_strtod_l+0x5a0>)
 8008038:	a819      	add	r0, sp, #100	; 0x64
 800803a:	f001 fbe2 	bl	8009802 <__match>
 800803e:	2800      	cmp	r0, #0
 8008040:	f43f aea0 	beq.w	8007d84 <_strtod_l+0xbc>
 8008044:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	2b28      	cmp	r3, #40	; 0x28
 800804a:	d10e      	bne.n	800806a <_strtod_l+0x3a2>
 800804c:	aa1c      	add	r2, sp, #112	; 0x70
 800804e:	4987      	ldr	r1, [pc, #540]	; (800826c <_strtod_l+0x5a4>)
 8008050:	a819      	add	r0, sp, #100	; 0x64
 8008052:	f001 fbe9 	bl	8009828 <__hexnan>
 8008056:	2805      	cmp	r0, #5
 8008058:	d107      	bne.n	800806a <_strtod_l+0x3a2>
 800805a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800805c:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8008060:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008064:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008068:	e66e      	b.n	8007d48 <_strtod_l+0x80>
 800806a:	f8df b210 	ldr.w	fp, [pc, #528]	; 800827c <_strtod_l+0x5b4>
 800806e:	e74e      	b.n	8007f0e <_strtod_l+0x246>
 8008070:	9b04      	ldr	r3, [sp, #16]
 8008072:	462c      	mov	r4, r5
 8008074:	2b00      	cmp	r3, #0
 8008076:	bf08      	it	eq
 8008078:	462b      	moveq	r3, r5
 800807a:	2d10      	cmp	r5, #16
 800807c:	bfa8      	it	ge
 800807e:	2410      	movge	r4, #16
 8008080:	9806      	ldr	r0, [sp, #24]
 8008082:	eba9 0902 	sub.w	r9, r9, r2
 8008086:	9304      	str	r3, [sp, #16]
 8008088:	f7f8 f9b6 	bl	80003f8 <__aeabi_ui2d>
 800808c:	2c09      	cmp	r4, #9
 800808e:	4682      	mov	sl, r0
 8008090:	468b      	mov	fp, r1
 8008092:	dd13      	ble.n	80080bc <_strtod_l+0x3f4>
 8008094:	4b76      	ldr	r3, [pc, #472]	; (8008270 <_strtod_l+0x5a8>)
 8008096:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800809a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800809e:	f7f8 fa21 	bl	80004e4 <__aeabi_dmul>
 80080a2:	4606      	mov	r6, r0
 80080a4:	9805      	ldr	r0, [sp, #20]
 80080a6:	460f      	mov	r7, r1
 80080a8:	f7f8 f9a6 	bl	80003f8 <__aeabi_ui2d>
 80080ac:	4602      	mov	r2, r0
 80080ae:	460b      	mov	r3, r1
 80080b0:	4630      	mov	r0, r6
 80080b2:	4639      	mov	r1, r7
 80080b4:	f7f8 f864 	bl	8000180 <__adddf3>
 80080b8:	4682      	mov	sl, r0
 80080ba:	468b      	mov	fp, r1
 80080bc:	2d0f      	cmp	r5, #15
 80080be:	dc36      	bgt.n	800812e <_strtod_l+0x466>
 80080c0:	f1b9 0f00 	cmp.w	r9, #0
 80080c4:	f43f ae40 	beq.w	8007d48 <_strtod_l+0x80>
 80080c8:	dd24      	ble.n	8008114 <_strtod_l+0x44c>
 80080ca:	f1b9 0f16 	cmp.w	r9, #22
 80080ce:	dc0b      	bgt.n	80080e8 <_strtod_l+0x420>
 80080d0:	4652      	mov	r2, sl
 80080d2:	465b      	mov	r3, fp
 80080d4:	4d66      	ldr	r5, [pc, #408]	; (8008270 <_strtod_l+0x5a8>)
 80080d6:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 80080da:	e9d9 0100 	ldrd	r0, r1, [r9]
 80080de:	f7f8 fa01 	bl	80004e4 <__aeabi_dmul>
 80080e2:	4682      	mov	sl, r0
 80080e4:	468b      	mov	fp, r1
 80080e6:	e62f      	b.n	8007d48 <_strtod_l+0x80>
 80080e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80080ec:	4599      	cmp	r9, r3
 80080ee:	dc1e      	bgt.n	800812e <_strtod_l+0x466>
 80080f0:	4c5f      	ldr	r4, [pc, #380]	; (8008270 <_strtod_l+0x5a8>)
 80080f2:	f1c5 050f 	rsb	r5, r5, #15
 80080f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80080fa:	eba9 0505 	sub.w	r5, r9, r5
 80080fe:	4652      	mov	r2, sl
 8008100:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008104:	465b      	mov	r3, fp
 8008106:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800810a:	f7f8 f9eb 	bl	80004e4 <__aeabi_dmul>
 800810e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008112:	e7e4      	b.n	80080de <_strtod_l+0x416>
 8008114:	f119 0f16 	cmn.w	r9, #22
 8008118:	db09      	blt.n	800812e <_strtod_l+0x466>
 800811a:	4d55      	ldr	r5, [pc, #340]	; (8008270 <_strtod_l+0x5a8>)
 800811c:	4650      	mov	r0, sl
 800811e:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
 8008122:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008126:	4659      	mov	r1, fp
 8008128:	f7f8 fb06 	bl	8000738 <__aeabi_ddiv>
 800812c:	e7d9      	b.n	80080e2 <_strtod_l+0x41a>
 800812e:	1b2c      	subs	r4, r5, r4
 8008130:	444c      	add	r4, r9
 8008132:	2c00      	cmp	r4, #0
 8008134:	dd73      	ble.n	800821e <_strtod_l+0x556>
 8008136:	f014 030f 	ands.w	r3, r4, #15
 800813a:	d00a      	beq.n	8008152 <_strtod_l+0x48a>
 800813c:	494c      	ldr	r1, [pc, #304]	; (8008270 <_strtod_l+0x5a8>)
 800813e:	4652      	mov	r2, sl
 8008140:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008144:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008148:	465b      	mov	r3, fp
 800814a:	f7f8 f9cb 	bl	80004e4 <__aeabi_dmul>
 800814e:	4682      	mov	sl, r0
 8008150:	468b      	mov	fp, r1
 8008152:	f034 040f 	bics.w	r4, r4, #15
 8008156:	d054      	beq.n	8008202 <_strtod_l+0x53a>
 8008158:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 800815c:	dd27      	ble.n	80081ae <_strtod_l+0x4e6>
 800815e:	f04f 0900 	mov.w	r9, #0
 8008162:	f8cd 9010 	str.w	r9, [sp, #16]
 8008166:	f8cd 901c 	str.w	r9, [sp, #28]
 800816a:	f8cd 9018 	str.w	r9, [sp, #24]
 800816e:	2322      	movs	r3, #34	; 0x22
 8008170:	f04f 0a00 	mov.w	sl, #0
 8008174:	f8df b108 	ldr.w	fp, [pc, #264]	; 8008280 <_strtod_l+0x5b8>
 8008178:	f8c8 3000 	str.w	r3, [r8]
 800817c:	9b07      	ldr	r3, [sp, #28]
 800817e:	2b00      	cmp	r3, #0
 8008180:	f43f ade2 	beq.w	8007d48 <_strtod_l+0x80>
 8008184:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008186:	4640      	mov	r0, r8
 8008188:	f7ff f984 	bl	8007494 <_Bfree>
 800818c:	9906      	ldr	r1, [sp, #24]
 800818e:	4640      	mov	r0, r8
 8008190:	f7ff f980 	bl	8007494 <_Bfree>
 8008194:	9904      	ldr	r1, [sp, #16]
 8008196:	4640      	mov	r0, r8
 8008198:	f7ff f97c 	bl	8007494 <_Bfree>
 800819c:	9907      	ldr	r1, [sp, #28]
 800819e:	4640      	mov	r0, r8
 80081a0:	f7ff f978 	bl	8007494 <_Bfree>
 80081a4:	4649      	mov	r1, r9
 80081a6:	4640      	mov	r0, r8
 80081a8:	f7ff f974 	bl	8007494 <_Bfree>
 80081ac:	e5cc      	b.n	8007d48 <_strtod_l+0x80>
 80081ae:	2300      	movs	r3, #0
 80081b0:	4650      	mov	r0, sl
 80081b2:	4659      	mov	r1, fp
 80081b4:	461f      	mov	r7, r3
 80081b6:	4e2f      	ldr	r6, [pc, #188]	; (8008274 <_strtod_l+0x5ac>)
 80081b8:	1124      	asrs	r4, r4, #4
 80081ba:	2c01      	cmp	r4, #1
 80081bc:	dc24      	bgt.n	8008208 <_strtod_l+0x540>
 80081be:	b10b      	cbz	r3, 80081c4 <_strtod_l+0x4fc>
 80081c0:	4682      	mov	sl, r0
 80081c2:	468b      	mov	fp, r1
 80081c4:	4b2b      	ldr	r3, [pc, #172]	; (8008274 <_strtod_l+0x5ac>)
 80081c6:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80081ca:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80081ce:	4652      	mov	r2, sl
 80081d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081d4:	465b      	mov	r3, fp
 80081d6:	f7f8 f985 	bl	80004e4 <__aeabi_dmul>
 80081da:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80081de:	468b      	mov	fp, r1
 80081e0:	460a      	mov	r2, r1
 80081e2:	0d1b      	lsrs	r3, r3, #20
 80081e4:	4924      	ldr	r1, [pc, #144]	; (8008278 <_strtod_l+0x5b0>)
 80081e6:	051b      	lsls	r3, r3, #20
 80081e8:	428b      	cmp	r3, r1
 80081ea:	4682      	mov	sl, r0
 80081ec:	d8b7      	bhi.n	800815e <_strtod_l+0x496>
 80081ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80081f2:	428b      	cmp	r3, r1
 80081f4:	bf86      	itte	hi
 80081f6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80081fa:	f8df b088 	ldrhi.w	fp, [pc, #136]	; 8008284 <_strtod_l+0x5bc>
 80081fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008202:	2300      	movs	r3, #0
 8008204:	9305      	str	r3, [sp, #20]
 8008206:	e070      	b.n	80082ea <_strtod_l+0x622>
 8008208:	07e2      	lsls	r2, r4, #31
 800820a:	d504      	bpl.n	8008216 <_strtod_l+0x54e>
 800820c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008210:	f7f8 f968 	bl	80004e4 <__aeabi_dmul>
 8008214:	2301      	movs	r3, #1
 8008216:	3701      	adds	r7, #1
 8008218:	1064      	asrs	r4, r4, #1
 800821a:	3608      	adds	r6, #8
 800821c:	e7cd      	b.n	80081ba <_strtod_l+0x4f2>
 800821e:	d0f0      	beq.n	8008202 <_strtod_l+0x53a>
 8008220:	4264      	negs	r4, r4
 8008222:	f014 020f 	ands.w	r2, r4, #15
 8008226:	d00a      	beq.n	800823e <_strtod_l+0x576>
 8008228:	4b11      	ldr	r3, [pc, #68]	; (8008270 <_strtod_l+0x5a8>)
 800822a:	4650      	mov	r0, sl
 800822c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008230:	4659      	mov	r1, fp
 8008232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008236:	f7f8 fa7f 	bl	8000738 <__aeabi_ddiv>
 800823a:	4682      	mov	sl, r0
 800823c:	468b      	mov	fp, r1
 800823e:	1124      	asrs	r4, r4, #4
 8008240:	d0df      	beq.n	8008202 <_strtod_l+0x53a>
 8008242:	2c1f      	cmp	r4, #31
 8008244:	dd20      	ble.n	8008288 <_strtod_l+0x5c0>
 8008246:	f04f 0900 	mov.w	r9, #0
 800824a:	f8cd 9010 	str.w	r9, [sp, #16]
 800824e:	f8cd 901c 	str.w	r9, [sp, #28]
 8008252:	f8cd 9018 	str.w	r9, [sp, #24]
 8008256:	2322      	movs	r3, #34	; 0x22
 8008258:	f04f 0a00 	mov.w	sl, #0
 800825c:	f04f 0b00 	mov.w	fp, #0
 8008260:	f8c8 3000 	str.w	r3, [r8]
 8008264:	e78a      	b.n	800817c <_strtod_l+0x4b4>
 8008266:	bf00      	nop
 8008268:	08009f85 	.word	0x08009f85
 800826c:	0800a120 	.word	0x0800a120
 8008270:	0800a038 	.word	0x0800a038
 8008274:	0800a010 	.word	0x0800a010
 8008278:	7ca00000 	.word	0x7ca00000
 800827c:	fff80000 	.word	0xfff80000
 8008280:	7ff00000 	.word	0x7ff00000
 8008284:	7fefffff 	.word	0x7fefffff
 8008288:	f014 0310 	ands.w	r3, r4, #16
 800828c:	bf18      	it	ne
 800828e:	236a      	movne	r3, #106	; 0x6a
 8008290:	4650      	mov	r0, sl
 8008292:	9305      	str	r3, [sp, #20]
 8008294:	4659      	mov	r1, fp
 8008296:	2300      	movs	r3, #0
 8008298:	4e9f      	ldr	r6, [pc, #636]	; (8008518 <_strtod_l+0x850>)
 800829a:	2c00      	cmp	r4, #0
 800829c:	f300 8109 	bgt.w	80084b2 <_strtod_l+0x7ea>
 80082a0:	b10b      	cbz	r3, 80082a6 <_strtod_l+0x5de>
 80082a2:	4682      	mov	sl, r0
 80082a4:	468b      	mov	fp, r1
 80082a6:	9b05      	ldr	r3, [sp, #20]
 80082a8:	b1bb      	cbz	r3, 80082da <_strtod_l+0x612>
 80082aa:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80082ae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	4659      	mov	r1, fp
 80082b6:	dd10      	ble.n	80082da <_strtod_l+0x612>
 80082b8:	2b1f      	cmp	r3, #31
 80082ba:	f340 8104 	ble.w	80084c6 <_strtod_l+0x7fe>
 80082be:	2b34      	cmp	r3, #52	; 0x34
 80082c0:	bfd8      	it	le
 80082c2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80082c6:	f04f 0a00 	mov.w	sl, #0
 80082ca:	bfcf      	iteee	gt
 80082cc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80082d0:	3b20      	suble	r3, #32
 80082d2:	fa02 f303 	lslle.w	r3, r2, r3
 80082d6:	ea03 0b01 	andle.w	fp, r3, r1
 80082da:	2200      	movs	r2, #0
 80082dc:	2300      	movs	r3, #0
 80082de:	4650      	mov	r0, sl
 80082e0:	4659      	mov	r1, fp
 80082e2:	f7f8 fb67 	bl	80009b4 <__aeabi_dcmpeq>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	d1ad      	bne.n	8008246 <_strtod_l+0x57e>
 80082ea:	9b06      	ldr	r3, [sp, #24]
 80082ec:	9a04      	ldr	r2, [sp, #16]
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80082f2:	462b      	mov	r3, r5
 80082f4:	4640      	mov	r0, r8
 80082f6:	f7ff f91f 	bl	8007538 <__s2b>
 80082fa:	9007      	str	r0, [sp, #28]
 80082fc:	2800      	cmp	r0, #0
 80082fe:	f43f af2e 	beq.w	800815e <_strtod_l+0x496>
 8008302:	f1b9 0f00 	cmp.w	r9, #0
 8008306:	f1c9 0300 	rsb	r3, r9, #0
 800830a:	bfa8      	it	ge
 800830c:	2300      	movge	r3, #0
 800830e:	930e      	str	r3, [sp, #56]	; 0x38
 8008310:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
 8008314:	f04f 0900 	mov.w	r9, #0
 8008318:	930f      	str	r3, [sp, #60]	; 0x3c
 800831a:	f8cd 9010 	str.w	r9, [sp, #16]
 800831e:	9b07      	ldr	r3, [sp, #28]
 8008320:	4640      	mov	r0, r8
 8008322:	6859      	ldr	r1, [r3, #4]
 8008324:	f7ff f882 	bl	800742c <_Balloc>
 8008328:	9006      	str	r0, [sp, #24]
 800832a:	2800      	cmp	r0, #0
 800832c:	f43f af1f 	beq.w	800816e <_strtod_l+0x4a6>
 8008330:	9b07      	ldr	r3, [sp, #28]
 8008332:	300c      	adds	r0, #12
 8008334:	691a      	ldr	r2, [r3, #16]
 8008336:	f103 010c 	add.w	r1, r3, #12
 800833a:	3202      	adds	r2, #2
 800833c:	0092      	lsls	r2, r2, #2
 800833e:	f7fc f9c7 	bl	80046d0 <memcpy>
 8008342:	ab1c      	add	r3, sp, #112	; 0x70
 8008344:	9301      	str	r3, [sp, #4]
 8008346:	ab1b      	add	r3, sp, #108	; 0x6c
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	4652      	mov	r2, sl
 800834c:	465b      	mov	r3, fp
 800834e:	4640      	mov	r0, r8
 8008350:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008354:	f7ff fba0 	bl	8007a98 <__d2b>
 8008358:	901a      	str	r0, [sp, #104]	; 0x68
 800835a:	2800      	cmp	r0, #0
 800835c:	f43f af07 	beq.w	800816e <_strtod_l+0x4a6>
 8008360:	2101      	movs	r1, #1
 8008362:	4640      	mov	r0, r8
 8008364:	f7ff f974 	bl	8007650 <__i2b>
 8008368:	9004      	str	r0, [sp, #16]
 800836a:	4603      	mov	r3, r0
 800836c:	2800      	cmp	r0, #0
 800836e:	f43f aefe 	beq.w	800816e <_strtod_l+0x4a6>
 8008372:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008374:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008376:	2d00      	cmp	r5, #0
 8008378:	bfab      	itete	ge
 800837a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800837c:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
 800837e:	195e      	addge	r6, r3, r5
 8008380:	1b5c      	sublt	r4, r3, r5
 8008382:	9b05      	ldr	r3, [sp, #20]
 8008384:	bfa8      	it	ge
 8008386:	9c0f      	ldrge	r4, [sp, #60]	; 0x3c
 8008388:	eba5 0503 	sub.w	r5, r5, r3
 800838c:	4415      	add	r5, r2
 800838e:	4b63      	ldr	r3, [pc, #396]	; (800851c <_strtod_l+0x854>)
 8008390:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8008394:	bfb8      	it	lt
 8008396:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008398:	429d      	cmp	r5, r3
 800839a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800839e:	f280 80a4 	bge.w	80084ea <_strtod_l+0x822>
 80083a2:	1b5b      	subs	r3, r3, r5
 80083a4:	2b1f      	cmp	r3, #31
 80083a6:	eba2 0203 	sub.w	r2, r2, r3
 80083aa:	f04f 0701 	mov.w	r7, #1
 80083ae:	f300 8091 	bgt.w	80084d4 <_strtod_l+0x80c>
 80083b2:	2500      	movs	r5, #0
 80083b4:	fa07 f303 	lsl.w	r3, r7, r3
 80083b8:	9314      	str	r3, [sp, #80]	; 0x50
 80083ba:	18b7      	adds	r7, r6, r2
 80083bc:	9b05      	ldr	r3, [sp, #20]
 80083be:	42be      	cmp	r6, r7
 80083c0:	4414      	add	r4, r2
 80083c2:	441c      	add	r4, r3
 80083c4:	4633      	mov	r3, r6
 80083c6:	bfa8      	it	ge
 80083c8:	463b      	movge	r3, r7
 80083ca:	42a3      	cmp	r3, r4
 80083cc:	bfa8      	it	ge
 80083ce:	4623      	movge	r3, r4
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	bfc2      	ittt	gt
 80083d4:	1aff      	subgt	r7, r7, r3
 80083d6:	1ae4      	subgt	r4, r4, r3
 80083d8:	1af6      	subgt	r6, r6, r3
 80083da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083dc:	b1bb      	cbz	r3, 800840e <_strtod_l+0x746>
 80083de:	461a      	mov	r2, r3
 80083e0:	9904      	ldr	r1, [sp, #16]
 80083e2:	4640      	mov	r0, r8
 80083e4:	f7ff f9ca 	bl	800777c <__pow5mult>
 80083e8:	9004      	str	r0, [sp, #16]
 80083ea:	2800      	cmp	r0, #0
 80083ec:	f43f aebf 	beq.w	800816e <_strtod_l+0x4a6>
 80083f0:	4601      	mov	r1, r0
 80083f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80083f4:	4640      	mov	r0, r8
 80083f6:	f7ff f934 	bl	8007662 <__multiply>
 80083fa:	9008      	str	r0, [sp, #32]
 80083fc:	2800      	cmp	r0, #0
 80083fe:	f43f aeb6 	beq.w	800816e <_strtod_l+0x4a6>
 8008402:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008404:	4640      	mov	r0, r8
 8008406:	f7ff f845 	bl	8007494 <_Bfree>
 800840a:	9b08      	ldr	r3, [sp, #32]
 800840c:	931a      	str	r3, [sp, #104]	; 0x68
 800840e:	2f00      	cmp	r7, #0
 8008410:	dc6f      	bgt.n	80084f2 <_strtod_l+0x82a>
 8008412:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008414:	2b00      	cmp	r3, #0
 8008416:	d175      	bne.n	8008504 <_strtod_l+0x83c>
 8008418:	2c00      	cmp	r4, #0
 800841a:	dd08      	ble.n	800842e <_strtod_l+0x766>
 800841c:	4622      	mov	r2, r4
 800841e:	9906      	ldr	r1, [sp, #24]
 8008420:	4640      	mov	r0, r8
 8008422:	f7ff f9f9 	bl	8007818 <__lshift>
 8008426:	9006      	str	r0, [sp, #24]
 8008428:	2800      	cmp	r0, #0
 800842a:	f43f aea0 	beq.w	800816e <_strtod_l+0x4a6>
 800842e:	2e00      	cmp	r6, #0
 8008430:	dd08      	ble.n	8008444 <_strtod_l+0x77c>
 8008432:	4632      	mov	r2, r6
 8008434:	9904      	ldr	r1, [sp, #16]
 8008436:	4640      	mov	r0, r8
 8008438:	f7ff f9ee 	bl	8007818 <__lshift>
 800843c:	9004      	str	r0, [sp, #16]
 800843e:	2800      	cmp	r0, #0
 8008440:	f43f ae95 	beq.w	800816e <_strtod_l+0x4a6>
 8008444:	9a06      	ldr	r2, [sp, #24]
 8008446:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008448:	4640      	mov	r0, r8
 800844a:	f7ff fa50 	bl	80078ee <__mdiff>
 800844e:	4681      	mov	r9, r0
 8008450:	2800      	cmp	r0, #0
 8008452:	f43f ae8c 	beq.w	800816e <_strtod_l+0x4a6>
 8008456:	2400      	movs	r4, #0
 8008458:	68c3      	ldr	r3, [r0, #12]
 800845a:	9904      	ldr	r1, [sp, #16]
 800845c:	60c4      	str	r4, [r0, #12]
 800845e:	9308      	str	r3, [sp, #32]
 8008460:	f7ff fa2b 	bl	80078ba <__mcmp>
 8008464:	42a0      	cmp	r0, r4
 8008466:	da5b      	bge.n	8008520 <_strtod_l+0x858>
 8008468:	9b08      	ldr	r3, [sp, #32]
 800846a:	b9f3      	cbnz	r3, 80084aa <_strtod_l+0x7e2>
 800846c:	f1ba 0f00 	cmp.w	sl, #0
 8008470:	d11b      	bne.n	80084aa <_strtod_l+0x7e2>
 8008472:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008476:	b9c3      	cbnz	r3, 80084aa <_strtod_l+0x7e2>
 8008478:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800847c:	0d1b      	lsrs	r3, r3, #20
 800847e:	051b      	lsls	r3, r3, #20
 8008480:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008484:	d911      	bls.n	80084aa <_strtod_l+0x7e2>
 8008486:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800848a:	b91b      	cbnz	r3, 8008494 <_strtod_l+0x7cc>
 800848c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008490:	2b01      	cmp	r3, #1
 8008492:	dd0a      	ble.n	80084aa <_strtod_l+0x7e2>
 8008494:	4649      	mov	r1, r9
 8008496:	2201      	movs	r2, #1
 8008498:	4640      	mov	r0, r8
 800849a:	f7ff f9bd 	bl	8007818 <__lshift>
 800849e:	9904      	ldr	r1, [sp, #16]
 80084a0:	4681      	mov	r9, r0
 80084a2:	f7ff fa0a 	bl	80078ba <__mcmp>
 80084a6:	2800      	cmp	r0, #0
 80084a8:	dc6b      	bgt.n	8008582 <_strtod_l+0x8ba>
 80084aa:	9b05      	ldr	r3, [sp, #20]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d175      	bne.n	800859c <_strtod_l+0x8d4>
 80084b0:	e668      	b.n	8008184 <_strtod_l+0x4bc>
 80084b2:	07e2      	lsls	r2, r4, #31
 80084b4:	d504      	bpl.n	80084c0 <_strtod_l+0x7f8>
 80084b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80084ba:	f7f8 f813 	bl	80004e4 <__aeabi_dmul>
 80084be:	2301      	movs	r3, #1
 80084c0:	1064      	asrs	r4, r4, #1
 80084c2:	3608      	adds	r6, #8
 80084c4:	e6e9      	b.n	800829a <_strtod_l+0x5d2>
 80084c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084ca:	fa02 f303 	lsl.w	r3, r2, r3
 80084ce:	ea03 0a0a 	and.w	sl, r3, sl
 80084d2:	e702      	b.n	80082da <_strtod_l+0x612>
 80084d4:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80084d8:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80084dc:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80084e0:	35e2      	adds	r5, #226	; 0xe2
 80084e2:	fa07 f505 	lsl.w	r5, r7, r5
 80084e6:	9714      	str	r7, [sp, #80]	; 0x50
 80084e8:	e767      	b.n	80083ba <_strtod_l+0x6f2>
 80084ea:	2301      	movs	r3, #1
 80084ec:	2500      	movs	r5, #0
 80084ee:	9314      	str	r3, [sp, #80]	; 0x50
 80084f0:	e763      	b.n	80083ba <_strtod_l+0x6f2>
 80084f2:	463a      	mov	r2, r7
 80084f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80084f6:	4640      	mov	r0, r8
 80084f8:	f7ff f98e 	bl	8007818 <__lshift>
 80084fc:	901a      	str	r0, [sp, #104]	; 0x68
 80084fe:	2800      	cmp	r0, #0
 8008500:	d187      	bne.n	8008412 <_strtod_l+0x74a>
 8008502:	e634      	b.n	800816e <_strtod_l+0x4a6>
 8008504:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008506:	9906      	ldr	r1, [sp, #24]
 8008508:	4640      	mov	r0, r8
 800850a:	f7ff f937 	bl	800777c <__pow5mult>
 800850e:	9006      	str	r0, [sp, #24]
 8008510:	2800      	cmp	r0, #0
 8008512:	d181      	bne.n	8008418 <_strtod_l+0x750>
 8008514:	e62b      	b.n	800816e <_strtod_l+0x4a6>
 8008516:	bf00      	nop
 8008518:	0800a138 	.word	0x0800a138
 800851c:	fffffc02 	.word	0xfffffc02
 8008520:	f040 8086 	bne.w	8008630 <_strtod_l+0x968>
 8008524:	9a08      	ldr	r2, [sp, #32]
 8008526:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800852a:	b332      	cbz	r2, 800857a <_strtod_l+0x8b2>
 800852c:	4aac      	ldr	r2, [pc, #688]	; (80087e0 <_strtod_l+0xb18>)
 800852e:	4659      	mov	r1, fp
 8008530:	4293      	cmp	r3, r2
 8008532:	d152      	bne.n	80085da <_strtod_l+0x912>
 8008534:	9b05      	ldr	r3, [sp, #20]
 8008536:	4650      	mov	r0, sl
 8008538:	b1d3      	cbz	r3, 8008570 <_strtod_l+0x8a8>
 800853a:	4aaa      	ldr	r2, [pc, #680]	; (80087e4 <_strtod_l+0xb1c>)
 800853c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008540:	400a      	ands	r2, r1
 8008542:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008546:	d816      	bhi.n	8008576 <_strtod_l+0x8ae>
 8008548:	0d12      	lsrs	r2, r2, #20
 800854a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800854e:	fa04 f303 	lsl.w	r3, r4, r3
 8008552:	4283      	cmp	r3, r0
 8008554:	d141      	bne.n	80085da <_strtod_l+0x912>
 8008556:	4aa4      	ldr	r2, [pc, #656]	; (80087e8 <_strtod_l+0xb20>)
 8008558:	4291      	cmp	r1, r2
 800855a:	d102      	bne.n	8008562 <_strtod_l+0x89a>
 800855c:	3301      	adds	r3, #1
 800855e:	f43f ae06 	beq.w	800816e <_strtod_l+0x4a6>
 8008562:	4ba0      	ldr	r3, [pc, #640]	; (80087e4 <_strtod_l+0xb1c>)
 8008564:	f04f 0a00 	mov.w	sl, #0
 8008568:	400b      	ands	r3, r1
 800856a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800856e:	e79c      	b.n	80084aa <_strtod_l+0x7e2>
 8008570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008574:	e7ed      	b.n	8008552 <_strtod_l+0x88a>
 8008576:	4623      	mov	r3, r4
 8008578:	e7eb      	b.n	8008552 <_strtod_l+0x88a>
 800857a:	bb73      	cbnz	r3, 80085da <_strtod_l+0x912>
 800857c:	f1ba 0f00 	cmp.w	sl, #0
 8008580:	d12b      	bne.n	80085da <_strtod_l+0x912>
 8008582:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008586:	9a05      	ldr	r2, [sp, #20]
 8008588:	0d1b      	lsrs	r3, r3, #20
 800858a:	051b      	lsls	r3, r3, #20
 800858c:	b1e2      	cbz	r2, 80085c8 <_strtod_l+0x900>
 800858e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008592:	dc19      	bgt.n	80085c8 <_strtod_l+0x900>
 8008594:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 8008598:	f77f ae5d 	ble.w	8008256 <_strtod_l+0x58e>
 800859c:	4b93      	ldr	r3, [pc, #588]	; (80087ec <_strtod_l+0xb24>)
 800859e:	4650      	mov	r0, sl
 80085a0:	930d      	str	r3, [sp, #52]	; 0x34
 80085a2:	2300      	movs	r3, #0
 80085a4:	930c      	str	r3, [sp, #48]	; 0x30
 80085a6:	4659      	mov	r1, fp
 80085a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80085ac:	f7f7 ff9a 	bl	80004e4 <__aeabi_dmul>
 80085b0:	4682      	mov	sl, r0
 80085b2:	468b      	mov	fp, r1
 80085b4:	2900      	cmp	r1, #0
 80085b6:	f47f ade5 	bne.w	8008184 <_strtod_l+0x4bc>
 80085ba:	2800      	cmp	r0, #0
 80085bc:	f47f ade2 	bne.w	8008184 <_strtod_l+0x4bc>
 80085c0:	2322      	movs	r3, #34	; 0x22
 80085c2:	f8c8 3000 	str.w	r3, [r8]
 80085c6:	e5dd      	b.n	8008184 <_strtod_l+0x4bc>
 80085c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80085cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80085d0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80085d4:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80085d8:	e767      	b.n	80084aa <_strtod_l+0x7e2>
 80085da:	b19d      	cbz	r5, 8008604 <_strtod_l+0x93c>
 80085dc:	ea15 0f0b 	tst.w	r5, fp
 80085e0:	f43f af63 	beq.w	80084aa <_strtod_l+0x7e2>
 80085e4:	9b08      	ldr	r3, [sp, #32]
 80085e6:	9a05      	ldr	r2, [sp, #20]
 80085e8:	4650      	mov	r0, sl
 80085ea:	4659      	mov	r1, fp
 80085ec:	b173      	cbz	r3, 800860c <_strtod_l+0x944>
 80085ee:	f7ff fb49 	bl	8007c84 <sulp>
 80085f2:	4602      	mov	r2, r0
 80085f4:	460b      	mov	r3, r1
 80085f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80085fa:	f7f7 fdc1 	bl	8000180 <__adddf3>
 80085fe:	4682      	mov	sl, r0
 8008600:	468b      	mov	fp, r1
 8008602:	e752      	b.n	80084aa <_strtod_l+0x7e2>
 8008604:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008606:	ea13 0f0a 	tst.w	r3, sl
 800860a:	e7e9      	b.n	80085e0 <_strtod_l+0x918>
 800860c:	f7ff fb3a 	bl	8007c84 <sulp>
 8008610:	4602      	mov	r2, r0
 8008612:	460b      	mov	r3, r1
 8008614:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008618:	f7f7 fdb0 	bl	800017c <__aeabi_dsub>
 800861c:	2200      	movs	r2, #0
 800861e:	2300      	movs	r3, #0
 8008620:	4682      	mov	sl, r0
 8008622:	468b      	mov	fp, r1
 8008624:	f7f8 f9c6 	bl	80009b4 <__aeabi_dcmpeq>
 8008628:	2800      	cmp	r0, #0
 800862a:	f47f ae14 	bne.w	8008256 <_strtod_l+0x58e>
 800862e:	e73c      	b.n	80084aa <_strtod_l+0x7e2>
 8008630:	9904      	ldr	r1, [sp, #16]
 8008632:	4648      	mov	r0, r9
 8008634:	f7ff fa7f 	bl	8007b36 <__ratio>
 8008638:	2200      	movs	r2, #0
 800863a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800863e:	4606      	mov	r6, r0
 8008640:	460f      	mov	r7, r1
 8008642:	f7f8 f9cb 	bl	80009dc <__aeabi_dcmple>
 8008646:	2800      	cmp	r0, #0
 8008648:	d070      	beq.n	800872c <_strtod_l+0xa64>
 800864a:	9b08      	ldr	r3, [sp, #32]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d043      	beq.n	80086d8 <_strtod_l+0xa10>
 8008650:	2600      	movs	r6, #0
 8008652:	4f67      	ldr	r7, [pc, #412]	; (80087f0 <_strtod_l+0xb28>)
 8008654:	4d66      	ldr	r5, [pc, #408]	; (80087f0 <_strtod_l+0xb28>)
 8008656:	4b63      	ldr	r3, [pc, #396]	; (80087e4 <_strtod_l+0xb1c>)
 8008658:	ea0b 0303 	and.w	r3, fp, r3
 800865c:	9314      	str	r3, [sp, #80]	; 0x50
 800865e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008660:	4b64      	ldr	r3, [pc, #400]	; (80087f4 <_strtod_l+0xb2c>)
 8008662:	429a      	cmp	r2, r3
 8008664:	f040 80ce 	bne.w	8008804 <_strtod_l+0xb3c>
 8008668:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800866c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008670:	4650      	mov	r0, sl
 8008672:	4659      	mov	r1, fp
 8008674:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008678:	f7ff f998 	bl	80079ac <__ulp>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	4630      	mov	r0, r6
 8008682:	4639      	mov	r1, r7
 8008684:	f7f7 ff2e 	bl	80004e4 <__aeabi_dmul>
 8008688:	4652      	mov	r2, sl
 800868a:	465b      	mov	r3, fp
 800868c:	f7f7 fd78 	bl	8000180 <__adddf3>
 8008690:	4a54      	ldr	r2, [pc, #336]	; (80087e4 <_strtod_l+0xb1c>)
 8008692:	4b59      	ldr	r3, [pc, #356]	; (80087f8 <_strtod_l+0xb30>)
 8008694:	400a      	ands	r2, r1
 8008696:	429a      	cmp	r2, r3
 8008698:	4682      	mov	sl, r0
 800869a:	d95d      	bls.n	8008758 <_strtod_l+0xa90>
 800869c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800869e:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d103      	bne.n	80086ae <_strtod_l+0x9e6>
 80086a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086a8:	3301      	adds	r3, #1
 80086aa:	f43f ad60 	beq.w	800816e <_strtod_l+0x4a6>
 80086ae:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80086b2:	f8df b134 	ldr.w	fp, [pc, #308]	; 80087e8 <_strtod_l+0xb20>
 80086b6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80086b8:	4640      	mov	r0, r8
 80086ba:	f7fe feeb 	bl	8007494 <_Bfree>
 80086be:	9906      	ldr	r1, [sp, #24]
 80086c0:	4640      	mov	r0, r8
 80086c2:	f7fe fee7 	bl	8007494 <_Bfree>
 80086c6:	9904      	ldr	r1, [sp, #16]
 80086c8:	4640      	mov	r0, r8
 80086ca:	f7fe fee3 	bl	8007494 <_Bfree>
 80086ce:	4649      	mov	r1, r9
 80086d0:	4640      	mov	r0, r8
 80086d2:	f7fe fedf 	bl	8007494 <_Bfree>
 80086d6:	e622      	b.n	800831e <_strtod_l+0x656>
 80086d8:	f1ba 0f00 	cmp.w	sl, #0
 80086dc:	d118      	bne.n	8008710 <_strtod_l+0xa48>
 80086de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80086e2:	b9e3      	cbnz	r3, 800871e <_strtod_l+0xa56>
 80086e4:	2200      	movs	r2, #0
 80086e6:	4b42      	ldr	r3, [pc, #264]	; (80087f0 <_strtod_l+0xb28>)
 80086e8:	4630      	mov	r0, r6
 80086ea:	4639      	mov	r1, r7
 80086ec:	f7f8 f96c 	bl	80009c8 <__aeabi_dcmplt>
 80086f0:	b9c8      	cbnz	r0, 8008726 <_strtod_l+0xa5e>
 80086f2:	2200      	movs	r2, #0
 80086f4:	4b41      	ldr	r3, [pc, #260]	; (80087fc <_strtod_l+0xb34>)
 80086f6:	4630      	mov	r0, r6
 80086f8:	4639      	mov	r1, r7
 80086fa:	f7f7 fef3 	bl	80004e4 <__aeabi_dmul>
 80086fe:	4604      	mov	r4, r0
 8008700:	460d      	mov	r5, r1
 8008702:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008706:	9416      	str	r4, [sp, #88]	; 0x58
 8008708:	9317      	str	r3, [sp, #92]	; 0x5c
 800870a:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800870e:	e7a2      	b.n	8008656 <_strtod_l+0x98e>
 8008710:	f1ba 0f01 	cmp.w	sl, #1
 8008714:	d103      	bne.n	800871e <_strtod_l+0xa56>
 8008716:	f1bb 0f00 	cmp.w	fp, #0
 800871a:	f43f ad9c 	beq.w	8008256 <_strtod_l+0x58e>
 800871e:	2600      	movs	r6, #0
 8008720:	4f37      	ldr	r7, [pc, #220]	; (8008800 <_strtod_l+0xb38>)
 8008722:	2400      	movs	r4, #0
 8008724:	e796      	b.n	8008654 <_strtod_l+0x98c>
 8008726:	9c08      	ldr	r4, [sp, #32]
 8008728:	4d34      	ldr	r5, [pc, #208]	; (80087fc <_strtod_l+0xb34>)
 800872a:	e7ea      	b.n	8008702 <_strtod_l+0xa3a>
 800872c:	4b33      	ldr	r3, [pc, #204]	; (80087fc <_strtod_l+0xb34>)
 800872e:	2200      	movs	r2, #0
 8008730:	4630      	mov	r0, r6
 8008732:	4639      	mov	r1, r7
 8008734:	f7f7 fed6 	bl	80004e4 <__aeabi_dmul>
 8008738:	9b08      	ldr	r3, [sp, #32]
 800873a:	4604      	mov	r4, r0
 800873c:	460d      	mov	r5, r1
 800873e:	b933      	cbnz	r3, 800874e <_strtod_l+0xa86>
 8008740:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008744:	9010      	str	r0, [sp, #64]	; 0x40
 8008746:	9311      	str	r3, [sp, #68]	; 0x44
 8008748:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800874c:	e783      	b.n	8008656 <_strtod_l+0x98e>
 800874e:	4602      	mov	r2, r0
 8008750:	460b      	mov	r3, r1
 8008752:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008756:	e7f7      	b.n	8008748 <_strtod_l+0xa80>
 8008758:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 800875c:	9b05      	ldr	r3, [sp, #20]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1a9      	bne.n	80086b6 <_strtod_l+0x9ee>
 8008762:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008766:	0d1b      	lsrs	r3, r3, #20
 8008768:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800876a:	051b      	lsls	r3, r3, #20
 800876c:	429a      	cmp	r2, r3
 800876e:	465e      	mov	r6, fp
 8008770:	d1a1      	bne.n	80086b6 <_strtod_l+0x9ee>
 8008772:	4629      	mov	r1, r5
 8008774:	4620      	mov	r0, r4
 8008776:	f7f8 f965 	bl	8000a44 <__aeabi_d2iz>
 800877a:	f7f7 fe4d 	bl	8000418 <__aeabi_i2d>
 800877e:	460b      	mov	r3, r1
 8008780:	4602      	mov	r2, r0
 8008782:	4629      	mov	r1, r5
 8008784:	4620      	mov	r0, r4
 8008786:	f7f7 fcf9 	bl	800017c <__aeabi_dsub>
 800878a:	9b08      	ldr	r3, [sp, #32]
 800878c:	4604      	mov	r4, r0
 800878e:	460d      	mov	r5, r1
 8008790:	b933      	cbnz	r3, 80087a0 <_strtod_l+0xad8>
 8008792:	f1ba 0f00 	cmp.w	sl, #0
 8008796:	d103      	bne.n	80087a0 <_strtod_l+0xad8>
 8008798:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800879c:	2e00      	cmp	r6, #0
 800879e:	d06c      	beq.n	800887a <_strtod_l+0xbb2>
 80087a0:	a30b      	add	r3, pc, #44	; (adr r3, 80087d0 <_strtod_l+0xb08>)
 80087a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a6:	4620      	mov	r0, r4
 80087a8:	4629      	mov	r1, r5
 80087aa:	f7f8 f90d 	bl	80009c8 <__aeabi_dcmplt>
 80087ae:	2800      	cmp	r0, #0
 80087b0:	f47f ace8 	bne.w	8008184 <_strtod_l+0x4bc>
 80087b4:	a308      	add	r3, pc, #32	; (adr r3, 80087d8 <_strtod_l+0xb10>)
 80087b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ba:	4620      	mov	r0, r4
 80087bc:	4629      	mov	r1, r5
 80087be:	f7f8 f921 	bl	8000a04 <__aeabi_dcmpgt>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	f43f af77 	beq.w	80086b6 <_strtod_l+0x9ee>
 80087c8:	e4dc      	b.n	8008184 <_strtod_l+0x4bc>
 80087ca:	bf00      	nop
 80087cc:	f3af 8000 	nop.w
 80087d0:	94a03595 	.word	0x94a03595
 80087d4:	3fdfffff 	.word	0x3fdfffff
 80087d8:	35afe535 	.word	0x35afe535
 80087dc:	3fe00000 	.word	0x3fe00000
 80087e0:	000fffff 	.word	0x000fffff
 80087e4:	7ff00000 	.word	0x7ff00000
 80087e8:	7fefffff 	.word	0x7fefffff
 80087ec:	39500000 	.word	0x39500000
 80087f0:	3ff00000 	.word	0x3ff00000
 80087f4:	7fe00000 	.word	0x7fe00000
 80087f8:	7c9fffff 	.word	0x7c9fffff
 80087fc:	3fe00000 	.word	0x3fe00000
 8008800:	bff00000 	.word	0xbff00000
 8008804:	9b05      	ldr	r3, [sp, #20]
 8008806:	b313      	cbz	r3, 800884e <_strtod_l+0xb86>
 8008808:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800880a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800880e:	d81e      	bhi.n	800884e <_strtod_l+0xb86>
 8008810:	a325      	add	r3, pc, #148	; (adr r3, 80088a8 <_strtod_l+0xbe0>)
 8008812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008816:	4620      	mov	r0, r4
 8008818:	4629      	mov	r1, r5
 800881a:	f7f8 f8df 	bl	80009dc <__aeabi_dcmple>
 800881e:	b190      	cbz	r0, 8008846 <_strtod_l+0xb7e>
 8008820:	4629      	mov	r1, r5
 8008822:	4620      	mov	r0, r4
 8008824:	f7f8 f936 	bl	8000a94 <__aeabi_d2uiz>
 8008828:	2800      	cmp	r0, #0
 800882a:	bf08      	it	eq
 800882c:	2001      	moveq	r0, #1
 800882e:	f7f7 fde3 	bl	80003f8 <__aeabi_ui2d>
 8008832:	9b08      	ldr	r3, [sp, #32]
 8008834:	4604      	mov	r4, r0
 8008836:	460d      	mov	r5, r1
 8008838:	b9d3      	cbnz	r3, 8008870 <_strtod_l+0xba8>
 800883a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800883e:	9012      	str	r0, [sp, #72]	; 0x48
 8008840:	9313      	str	r3, [sp, #76]	; 0x4c
 8008842:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8008846:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008848:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800884c:	1a9f      	subs	r7, r3, r2
 800884e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008852:	f7ff f8ab 	bl	80079ac <__ulp>
 8008856:	4602      	mov	r2, r0
 8008858:	460b      	mov	r3, r1
 800885a:	4630      	mov	r0, r6
 800885c:	4639      	mov	r1, r7
 800885e:	f7f7 fe41 	bl	80004e4 <__aeabi_dmul>
 8008862:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008866:	f7f7 fc8b 	bl	8000180 <__adddf3>
 800886a:	4682      	mov	sl, r0
 800886c:	468b      	mov	fp, r1
 800886e:	e775      	b.n	800875c <_strtod_l+0xa94>
 8008870:	4602      	mov	r2, r0
 8008872:	460b      	mov	r3, r1
 8008874:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008878:	e7e3      	b.n	8008842 <_strtod_l+0xb7a>
 800887a:	a30d      	add	r3, pc, #52	; (adr r3, 80088b0 <_strtod_l+0xbe8>)
 800887c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008880:	f7f8 f8a2 	bl	80009c8 <__aeabi_dcmplt>
 8008884:	e79d      	b.n	80087c2 <_strtod_l+0xafa>
 8008886:	2300      	movs	r3, #0
 8008888:	9309      	str	r3, [sp, #36]	; 0x24
 800888a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800888c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800888e:	6013      	str	r3, [r2, #0]
 8008890:	f7ff ba5e 	b.w	8007d50 <_strtod_l+0x88>
 8008894:	2b65      	cmp	r3, #101	; 0x65
 8008896:	f04f 0200 	mov.w	r2, #0
 800889a:	f43f abae 	beq.w	8007ffa <_strtod_l+0x332>
 800889e:	4615      	mov	r5, r2
 80088a0:	2101      	movs	r1, #1
 80088a2:	f7ff bacd 	b.w	8007e40 <_strtod_l+0x178>
 80088a6:	bf00      	nop
 80088a8:	ffc00000 	.word	0xffc00000
 80088ac:	41dfffff 	.word	0x41dfffff
 80088b0:	94a03595 	.word	0x94a03595
 80088b4:	3fcfffff 	.word	0x3fcfffff

080088b8 <_strtod_r>:
 80088b8:	4b05      	ldr	r3, [pc, #20]	; (80088d0 <_strtod_r+0x18>)
 80088ba:	b410      	push	{r4}
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4c05      	ldr	r4, [pc, #20]	; (80088d4 <_strtod_r+0x1c>)
 80088c0:	6a1b      	ldr	r3, [r3, #32]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	bf08      	it	eq
 80088c6:	4623      	moveq	r3, r4
 80088c8:	bc10      	pop	{r4}
 80088ca:	f7ff b9fd 	b.w	8007cc8 <_strtod_l>
 80088ce:	bf00      	nop
 80088d0:	200000b4 	.word	0x200000b4
 80088d4:	200001a8 	.word	0x200001a8

080088d8 <_strtol_l.isra.0>:
 80088d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088dc:	4680      	mov	r8, r0
 80088de:	4689      	mov	r9, r1
 80088e0:	4692      	mov	sl, r2
 80088e2:	461f      	mov	r7, r3
 80088e4:	468b      	mov	fp, r1
 80088e6:	465d      	mov	r5, fp
 80088e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80088ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088ee:	f7fe fb0f 	bl	8006f10 <__locale_ctype_ptr_l>
 80088f2:	4420      	add	r0, r4
 80088f4:	7846      	ldrb	r6, [r0, #1]
 80088f6:	f016 0608 	ands.w	r6, r6, #8
 80088fa:	d10b      	bne.n	8008914 <_strtol_l.isra.0+0x3c>
 80088fc:	2c2d      	cmp	r4, #45	; 0x2d
 80088fe:	d10b      	bne.n	8008918 <_strtol_l.isra.0+0x40>
 8008900:	2601      	movs	r6, #1
 8008902:	782c      	ldrb	r4, [r5, #0]
 8008904:	f10b 0502 	add.w	r5, fp, #2
 8008908:	b167      	cbz	r7, 8008924 <_strtol_l.isra.0+0x4c>
 800890a:	2f10      	cmp	r7, #16
 800890c:	d114      	bne.n	8008938 <_strtol_l.isra.0+0x60>
 800890e:	2c30      	cmp	r4, #48	; 0x30
 8008910:	d00a      	beq.n	8008928 <_strtol_l.isra.0+0x50>
 8008912:	e011      	b.n	8008938 <_strtol_l.isra.0+0x60>
 8008914:	46ab      	mov	fp, r5
 8008916:	e7e6      	b.n	80088e6 <_strtol_l.isra.0+0xe>
 8008918:	2c2b      	cmp	r4, #43	; 0x2b
 800891a:	bf04      	itt	eq
 800891c:	782c      	ldrbeq	r4, [r5, #0]
 800891e:	f10b 0502 	addeq.w	r5, fp, #2
 8008922:	e7f1      	b.n	8008908 <_strtol_l.isra.0+0x30>
 8008924:	2c30      	cmp	r4, #48	; 0x30
 8008926:	d127      	bne.n	8008978 <_strtol_l.isra.0+0xa0>
 8008928:	782b      	ldrb	r3, [r5, #0]
 800892a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800892e:	2b58      	cmp	r3, #88	; 0x58
 8008930:	d14b      	bne.n	80089ca <_strtol_l.isra.0+0xf2>
 8008932:	2710      	movs	r7, #16
 8008934:	786c      	ldrb	r4, [r5, #1]
 8008936:	3502      	adds	r5, #2
 8008938:	2e00      	cmp	r6, #0
 800893a:	bf0c      	ite	eq
 800893c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008940:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008944:	2200      	movs	r2, #0
 8008946:	fbb1 fef7 	udiv	lr, r1, r7
 800894a:	4610      	mov	r0, r2
 800894c:	fb07 1c1e 	mls	ip, r7, lr, r1
 8008950:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008954:	2b09      	cmp	r3, #9
 8008956:	d811      	bhi.n	800897c <_strtol_l.isra.0+0xa4>
 8008958:	461c      	mov	r4, r3
 800895a:	42a7      	cmp	r7, r4
 800895c:	dd1d      	ble.n	800899a <_strtol_l.isra.0+0xc2>
 800895e:	1c53      	adds	r3, r2, #1
 8008960:	d007      	beq.n	8008972 <_strtol_l.isra.0+0x9a>
 8008962:	4586      	cmp	lr, r0
 8008964:	d316      	bcc.n	8008994 <_strtol_l.isra.0+0xbc>
 8008966:	d101      	bne.n	800896c <_strtol_l.isra.0+0x94>
 8008968:	45a4      	cmp	ip, r4
 800896a:	db13      	blt.n	8008994 <_strtol_l.isra.0+0xbc>
 800896c:	2201      	movs	r2, #1
 800896e:	fb00 4007 	mla	r0, r0, r7, r4
 8008972:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008976:	e7eb      	b.n	8008950 <_strtol_l.isra.0+0x78>
 8008978:	270a      	movs	r7, #10
 800897a:	e7dd      	b.n	8008938 <_strtol_l.isra.0+0x60>
 800897c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008980:	2b19      	cmp	r3, #25
 8008982:	d801      	bhi.n	8008988 <_strtol_l.isra.0+0xb0>
 8008984:	3c37      	subs	r4, #55	; 0x37
 8008986:	e7e8      	b.n	800895a <_strtol_l.isra.0+0x82>
 8008988:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800898c:	2b19      	cmp	r3, #25
 800898e:	d804      	bhi.n	800899a <_strtol_l.isra.0+0xc2>
 8008990:	3c57      	subs	r4, #87	; 0x57
 8008992:	e7e2      	b.n	800895a <_strtol_l.isra.0+0x82>
 8008994:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008998:	e7eb      	b.n	8008972 <_strtol_l.isra.0+0x9a>
 800899a:	1c53      	adds	r3, r2, #1
 800899c:	d108      	bne.n	80089b0 <_strtol_l.isra.0+0xd8>
 800899e:	2322      	movs	r3, #34	; 0x22
 80089a0:	4608      	mov	r0, r1
 80089a2:	f8c8 3000 	str.w	r3, [r8]
 80089a6:	f1ba 0f00 	cmp.w	sl, #0
 80089aa:	d107      	bne.n	80089bc <_strtol_l.isra.0+0xe4>
 80089ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b0:	b106      	cbz	r6, 80089b4 <_strtol_l.isra.0+0xdc>
 80089b2:	4240      	negs	r0, r0
 80089b4:	f1ba 0f00 	cmp.w	sl, #0
 80089b8:	d00c      	beq.n	80089d4 <_strtol_l.isra.0+0xfc>
 80089ba:	b122      	cbz	r2, 80089c6 <_strtol_l.isra.0+0xee>
 80089bc:	3d01      	subs	r5, #1
 80089be:	f8ca 5000 	str.w	r5, [sl]
 80089c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c6:	464d      	mov	r5, r9
 80089c8:	e7f9      	b.n	80089be <_strtol_l.isra.0+0xe6>
 80089ca:	2430      	movs	r4, #48	; 0x30
 80089cc:	2f00      	cmp	r7, #0
 80089ce:	d1b3      	bne.n	8008938 <_strtol_l.isra.0+0x60>
 80089d0:	2708      	movs	r7, #8
 80089d2:	e7b1      	b.n	8008938 <_strtol_l.isra.0+0x60>
 80089d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080089d8 <_strtol_r>:
 80089d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089da:	4c06      	ldr	r4, [pc, #24]	; (80089f4 <_strtol_r+0x1c>)
 80089dc:	4d06      	ldr	r5, [pc, #24]	; (80089f8 <_strtol_r+0x20>)
 80089de:	6824      	ldr	r4, [r4, #0]
 80089e0:	6a24      	ldr	r4, [r4, #32]
 80089e2:	2c00      	cmp	r4, #0
 80089e4:	bf08      	it	eq
 80089e6:	462c      	moveq	r4, r5
 80089e8:	9400      	str	r4, [sp, #0]
 80089ea:	f7ff ff75 	bl	80088d8 <_strtol_l.isra.0>
 80089ee:	b003      	add	sp, #12
 80089f0:	bd30      	pop	{r4, r5, pc}
 80089f2:	bf00      	nop
 80089f4:	200000b4 	.word	0x200000b4
 80089f8:	200001a8 	.word	0x200001a8

080089fc <_strtoll_l.isra.0>:
 80089fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a00:	4688      	mov	r8, r1
 8008a02:	4693      	mov	fp, r2
 8008a04:	461f      	mov	r7, r3
 8008a06:	4689      	mov	r9, r1
 8008a08:	b087      	sub	sp, #28
 8008a0a:	9005      	str	r0, [sp, #20]
 8008a0c:	464d      	mov	r5, r9
 8008a0e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008a10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a14:	f7fe fa7c 	bl	8006f10 <__locale_ctype_ptr_l>
 8008a18:	4420      	add	r0, r4
 8008a1a:	7846      	ldrb	r6, [r0, #1]
 8008a1c:	f016 0608 	ands.w	r6, r6, #8
 8008a20:	d10b      	bne.n	8008a3a <_strtoll_l.isra.0+0x3e>
 8008a22:	2c2d      	cmp	r4, #45	; 0x2d
 8008a24:	d10b      	bne.n	8008a3e <_strtoll_l.isra.0+0x42>
 8008a26:	2601      	movs	r6, #1
 8008a28:	782c      	ldrb	r4, [r5, #0]
 8008a2a:	f109 0502 	add.w	r5, r9, #2
 8008a2e:	b167      	cbz	r7, 8008a4a <_strtoll_l.isra.0+0x4e>
 8008a30:	2f10      	cmp	r7, #16
 8008a32:	d114      	bne.n	8008a5e <_strtoll_l.isra.0+0x62>
 8008a34:	2c30      	cmp	r4, #48	; 0x30
 8008a36:	d00a      	beq.n	8008a4e <_strtoll_l.isra.0+0x52>
 8008a38:	e011      	b.n	8008a5e <_strtoll_l.isra.0+0x62>
 8008a3a:	46a9      	mov	r9, r5
 8008a3c:	e7e6      	b.n	8008a0c <_strtoll_l.isra.0+0x10>
 8008a3e:	2c2b      	cmp	r4, #43	; 0x2b
 8008a40:	bf04      	itt	eq
 8008a42:	782c      	ldrbeq	r4, [r5, #0]
 8008a44:	f109 0502 	addeq.w	r5, r9, #2
 8008a48:	e7f1      	b.n	8008a2e <_strtoll_l.isra.0+0x32>
 8008a4a:	2c30      	cmp	r4, #48	; 0x30
 8008a4c:	d144      	bne.n	8008ad8 <_strtoll_l.isra.0+0xdc>
 8008a4e:	782b      	ldrb	r3, [r5, #0]
 8008a50:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a54:	2b58      	cmp	r3, #88	; 0x58
 8008a56:	d170      	bne.n	8008b3a <_strtoll_l.isra.0+0x13e>
 8008a58:	2710      	movs	r7, #16
 8008a5a:	786c      	ldrb	r4, [r5, #1]
 8008a5c:	3502      	adds	r5, #2
 8008a5e:	2e00      	cmp	r6, #0
 8008a60:	d03c      	beq.n	8008adc <_strtoll_l.isra.0+0xe0>
 8008a62:	f04f 0a00 	mov.w	sl, #0
 8008a66:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8008a6a:	463a      	mov	r2, r7
 8008a6c:	17fb      	asrs	r3, r7, #31
 8008a6e:	4650      	mov	r0, sl
 8008a70:	4649      	mov	r1, r9
 8008a72:	e9cd 2300 	strd	r2, r3, [sp]
 8008a76:	f7f8 f87d 	bl	8000b74 <__aeabi_uldivmod>
 8008a7a:	17fb      	asrs	r3, r7, #31
 8008a7c:	9204      	str	r2, [sp, #16]
 8008a7e:	4650      	mov	r0, sl
 8008a80:	463a      	mov	r2, r7
 8008a82:	4649      	mov	r1, r9
 8008a84:	f7f8 f876 	bl	8000b74 <__aeabi_uldivmod>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a8e:	2000      	movs	r0, #0
 8008a90:	2100      	movs	r1, #0
 8008a92:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8008a96:	2a09      	cmp	r2, #9
 8008a98:	d825      	bhi.n	8008ae6 <_strtoll_l.isra.0+0xea>
 8008a9a:	4614      	mov	r4, r2
 8008a9c:	42a7      	cmp	r7, r4
 8008a9e:	dd31      	ble.n	8008b04 <_strtoll_l.isra.0+0x108>
 8008aa0:	1c5a      	adds	r2, r3, #1
 8008aa2:	d016      	beq.n	8008ad2 <_strtoll_l.isra.0+0xd6>
 8008aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008aa8:	428b      	cmp	r3, r1
 8008aaa:	bf08      	it	eq
 8008aac:	4282      	cmpeq	r2, r0
 8008aae:	d326      	bcc.n	8008afe <_strtoll_l.isra.0+0x102>
 8008ab0:	d102      	bne.n	8008ab8 <_strtoll_l.isra.0+0xbc>
 8008ab2:	9b04      	ldr	r3, [sp, #16]
 8008ab4:	42a3      	cmp	r3, r4
 8008ab6:	db22      	blt.n	8008afe <_strtoll_l.isra.0+0x102>
 8008ab8:	9b00      	ldr	r3, [sp, #0]
 8008aba:	9a01      	ldr	r2, [sp, #4]
 8008abc:	434b      	muls	r3, r1
 8008abe:	fb00 3302 	mla	r3, r0, r2, r3
 8008ac2:	9a00      	ldr	r2, [sp, #0]
 8008ac4:	fba2 0100 	umull	r0, r1, r2, r0
 8008ac8:	4419      	add	r1, r3
 8008aca:	2301      	movs	r3, #1
 8008acc:	1900      	adds	r0, r0, r4
 8008ace:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8008ad2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ad6:	e7dc      	b.n	8008a92 <_strtoll_l.isra.0+0x96>
 8008ad8:	270a      	movs	r7, #10
 8008ada:	e7c0      	b.n	8008a5e <_strtoll_l.isra.0+0x62>
 8008adc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008ae0:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008ae4:	e7c1      	b.n	8008a6a <_strtoll_l.isra.0+0x6e>
 8008ae6:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8008aea:	2a19      	cmp	r2, #25
 8008aec:	d801      	bhi.n	8008af2 <_strtoll_l.isra.0+0xf6>
 8008aee:	3c37      	subs	r4, #55	; 0x37
 8008af0:	e7d4      	b.n	8008a9c <_strtoll_l.isra.0+0xa0>
 8008af2:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8008af6:	2a19      	cmp	r2, #25
 8008af8:	d804      	bhi.n	8008b04 <_strtoll_l.isra.0+0x108>
 8008afa:	3c57      	subs	r4, #87	; 0x57
 8008afc:	e7ce      	b.n	8008a9c <_strtoll_l.isra.0+0xa0>
 8008afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b02:	e7e6      	b.n	8008ad2 <_strtoll_l.isra.0+0xd6>
 8008b04:	1c5a      	adds	r2, r3, #1
 8008b06:	d10a      	bne.n	8008b1e <_strtoll_l.isra.0+0x122>
 8008b08:	2322      	movs	r3, #34	; 0x22
 8008b0a:	9a05      	ldr	r2, [sp, #20]
 8008b0c:	4650      	mov	r0, sl
 8008b0e:	6013      	str	r3, [r2, #0]
 8008b10:	4649      	mov	r1, r9
 8008b12:	f1bb 0f00 	cmp.w	fp, #0
 8008b16:	d10a      	bne.n	8008b2e <_strtoll_l.isra.0+0x132>
 8008b18:	b007      	add	sp, #28
 8008b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b1e:	b116      	cbz	r6, 8008b26 <_strtoll_l.isra.0+0x12a>
 8008b20:	4240      	negs	r0, r0
 8008b22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008b26:	f1bb 0f00 	cmp.w	fp, #0
 8008b2a:	d0f5      	beq.n	8008b18 <_strtoll_l.isra.0+0x11c>
 8008b2c:	b11b      	cbz	r3, 8008b36 <_strtoll_l.isra.0+0x13a>
 8008b2e:	3d01      	subs	r5, #1
 8008b30:	f8cb 5000 	str.w	r5, [fp]
 8008b34:	e7f0      	b.n	8008b18 <_strtoll_l.isra.0+0x11c>
 8008b36:	4645      	mov	r5, r8
 8008b38:	e7fa      	b.n	8008b30 <_strtoll_l.isra.0+0x134>
 8008b3a:	2430      	movs	r4, #48	; 0x30
 8008b3c:	2f00      	cmp	r7, #0
 8008b3e:	d18e      	bne.n	8008a5e <_strtoll_l.isra.0+0x62>
 8008b40:	2708      	movs	r7, #8
 8008b42:	e78c      	b.n	8008a5e <_strtoll_l.isra.0+0x62>

08008b44 <_strtoll_r>:
 8008b44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b46:	4c06      	ldr	r4, [pc, #24]	; (8008b60 <_strtoll_r+0x1c>)
 8008b48:	4d06      	ldr	r5, [pc, #24]	; (8008b64 <_strtoll_r+0x20>)
 8008b4a:	6824      	ldr	r4, [r4, #0]
 8008b4c:	6a24      	ldr	r4, [r4, #32]
 8008b4e:	2c00      	cmp	r4, #0
 8008b50:	bf08      	it	eq
 8008b52:	462c      	moveq	r4, r5
 8008b54:	9400      	str	r4, [sp, #0]
 8008b56:	f7ff ff51 	bl	80089fc <_strtoll_l.isra.0>
 8008b5a:	b003      	add	sp, #12
 8008b5c:	bd30      	pop	{r4, r5, pc}
 8008b5e:	bf00      	nop
 8008b60:	200000b4 	.word	0x200000b4
 8008b64:	200001a8 	.word	0x200001a8

08008b68 <_strtoul_l.isra.0>:
 8008b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b6c:	4680      	mov	r8, r0
 8008b6e:	4689      	mov	r9, r1
 8008b70:	4692      	mov	sl, r2
 8008b72:	461e      	mov	r6, r3
 8008b74:	460f      	mov	r7, r1
 8008b76:	463d      	mov	r5, r7
 8008b78:	9808      	ldr	r0, [sp, #32]
 8008b7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b7e:	f7fe f9c7 	bl	8006f10 <__locale_ctype_ptr_l>
 8008b82:	4420      	add	r0, r4
 8008b84:	7843      	ldrb	r3, [r0, #1]
 8008b86:	f013 0308 	ands.w	r3, r3, #8
 8008b8a:	d10a      	bne.n	8008ba2 <_strtoul_l.isra.0+0x3a>
 8008b8c:	2c2d      	cmp	r4, #45	; 0x2d
 8008b8e:	d10a      	bne.n	8008ba6 <_strtoul_l.isra.0+0x3e>
 8008b90:	2301      	movs	r3, #1
 8008b92:	782c      	ldrb	r4, [r5, #0]
 8008b94:	1cbd      	adds	r5, r7, #2
 8008b96:	b15e      	cbz	r6, 8008bb0 <_strtoul_l.isra.0+0x48>
 8008b98:	2e10      	cmp	r6, #16
 8008b9a:	d113      	bne.n	8008bc4 <_strtoul_l.isra.0+0x5c>
 8008b9c:	2c30      	cmp	r4, #48	; 0x30
 8008b9e:	d009      	beq.n	8008bb4 <_strtoul_l.isra.0+0x4c>
 8008ba0:	e010      	b.n	8008bc4 <_strtoul_l.isra.0+0x5c>
 8008ba2:	462f      	mov	r7, r5
 8008ba4:	e7e7      	b.n	8008b76 <_strtoul_l.isra.0+0xe>
 8008ba6:	2c2b      	cmp	r4, #43	; 0x2b
 8008ba8:	bf04      	itt	eq
 8008baa:	782c      	ldrbeq	r4, [r5, #0]
 8008bac:	1cbd      	addeq	r5, r7, #2
 8008bae:	e7f2      	b.n	8008b96 <_strtoul_l.isra.0+0x2e>
 8008bb0:	2c30      	cmp	r4, #48	; 0x30
 8008bb2:	d125      	bne.n	8008c00 <_strtoul_l.isra.0+0x98>
 8008bb4:	782a      	ldrb	r2, [r5, #0]
 8008bb6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008bba:	2a58      	cmp	r2, #88	; 0x58
 8008bbc:	d14a      	bne.n	8008c54 <_strtoul_l.isra.0+0xec>
 8008bbe:	2610      	movs	r6, #16
 8008bc0:	786c      	ldrb	r4, [r5, #1]
 8008bc2:	3502      	adds	r5, #2
 8008bc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008bc8:	fbb1 f1f6 	udiv	r1, r1, r6
 8008bcc:	2700      	movs	r7, #0
 8008bce:	fb06 fe01 	mul.w	lr, r6, r1
 8008bd2:	4638      	mov	r0, r7
 8008bd4:	ea6f 0e0e 	mvn.w	lr, lr
 8008bd8:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8008bdc:	2a09      	cmp	r2, #9
 8008bde:	d811      	bhi.n	8008c04 <_strtoul_l.isra.0+0x9c>
 8008be0:	4614      	mov	r4, r2
 8008be2:	42a6      	cmp	r6, r4
 8008be4:	dd1d      	ble.n	8008c22 <_strtoul_l.isra.0+0xba>
 8008be6:	2f00      	cmp	r7, #0
 8008be8:	db18      	blt.n	8008c1c <_strtoul_l.isra.0+0xb4>
 8008bea:	4281      	cmp	r1, r0
 8008bec:	d316      	bcc.n	8008c1c <_strtoul_l.isra.0+0xb4>
 8008bee:	d101      	bne.n	8008bf4 <_strtoul_l.isra.0+0x8c>
 8008bf0:	45a6      	cmp	lr, r4
 8008bf2:	db13      	blt.n	8008c1c <_strtoul_l.isra.0+0xb4>
 8008bf4:	2701      	movs	r7, #1
 8008bf6:	fb00 4006 	mla	r0, r0, r6, r4
 8008bfa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bfe:	e7eb      	b.n	8008bd8 <_strtoul_l.isra.0+0x70>
 8008c00:	260a      	movs	r6, #10
 8008c02:	e7df      	b.n	8008bc4 <_strtoul_l.isra.0+0x5c>
 8008c04:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8008c08:	2a19      	cmp	r2, #25
 8008c0a:	d801      	bhi.n	8008c10 <_strtoul_l.isra.0+0xa8>
 8008c0c:	3c37      	subs	r4, #55	; 0x37
 8008c0e:	e7e8      	b.n	8008be2 <_strtoul_l.isra.0+0x7a>
 8008c10:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8008c14:	2a19      	cmp	r2, #25
 8008c16:	d804      	bhi.n	8008c22 <_strtoul_l.isra.0+0xba>
 8008c18:	3c57      	subs	r4, #87	; 0x57
 8008c1a:	e7e2      	b.n	8008be2 <_strtoul_l.isra.0+0x7a>
 8008c1c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008c20:	e7eb      	b.n	8008bfa <_strtoul_l.isra.0+0x92>
 8008c22:	2f00      	cmp	r7, #0
 8008c24:	da09      	bge.n	8008c3a <_strtoul_l.isra.0+0xd2>
 8008c26:	2322      	movs	r3, #34	; 0x22
 8008c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c2c:	f8c8 3000 	str.w	r3, [r8]
 8008c30:	f1ba 0f00 	cmp.w	sl, #0
 8008c34:	d107      	bne.n	8008c46 <_strtoul_l.isra.0+0xde>
 8008c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c3a:	b103      	cbz	r3, 8008c3e <_strtoul_l.isra.0+0xd6>
 8008c3c:	4240      	negs	r0, r0
 8008c3e:	f1ba 0f00 	cmp.w	sl, #0
 8008c42:	d00c      	beq.n	8008c5e <_strtoul_l.isra.0+0xf6>
 8008c44:	b127      	cbz	r7, 8008c50 <_strtoul_l.isra.0+0xe8>
 8008c46:	3d01      	subs	r5, #1
 8008c48:	f8ca 5000 	str.w	r5, [sl]
 8008c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c50:	464d      	mov	r5, r9
 8008c52:	e7f9      	b.n	8008c48 <_strtoul_l.isra.0+0xe0>
 8008c54:	2430      	movs	r4, #48	; 0x30
 8008c56:	2e00      	cmp	r6, #0
 8008c58:	d1b4      	bne.n	8008bc4 <_strtoul_l.isra.0+0x5c>
 8008c5a:	2608      	movs	r6, #8
 8008c5c:	e7b2      	b.n	8008bc4 <_strtoul_l.isra.0+0x5c>
 8008c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08008c64 <_strtoul_r>:
 8008c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c66:	4c06      	ldr	r4, [pc, #24]	; (8008c80 <_strtoul_r+0x1c>)
 8008c68:	4d06      	ldr	r5, [pc, #24]	; (8008c84 <_strtoul_r+0x20>)
 8008c6a:	6824      	ldr	r4, [r4, #0]
 8008c6c:	6a24      	ldr	r4, [r4, #32]
 8008c6e:	2c00      	cmp	r4, #0
 8008c70:	bf08      	it	eq
 8008c72:	462c      	moveq	r4, r5
 8008c74:	9400      	str	r4, [sp, #0]
 8008c76:	f7ff ff77 	bl	8008b68 <_strtoul_l.isra.0>
 8008c7a:	b003      	add	sp, #12
 8008c7c:	bd30      	pop	{r4, r5, pc}
 8008c7e:	bf00      	nop
 8008c80:	200000b4 	.word	0x200000b4
 8008c84:	200001a8 	.word	0x200001a8

08008c88 <_strtoull_l.isra.0>:
 8008c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c8c:	4688      	mov	r8, r1
 8008c8e:	4691      	mov	r9, r2
 8008c90:	461f      	mov	r7, r3
 8008c92:	468b      	mov	fp, r1
 8008c94:	b085      	sub	sp, #20
 8008c96:	9003      	str	r0, [sp, #12]
 8008c98:	465d      	mov	r5, fp
 8008c9a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008c9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ca0:	f7fe f936 	bl	8006f10 <__locale_ctype_ptr_l>
 8008ca4:	4420      	add	r0, r4
 8008ca6:	7846      	ldrb	r6, [r0, #1]
 8008ca8:	f016 0608 	ands.w	r6, r6, #8
 8008cac:	d10b      	bne.n	8008cc6 <_strtoull_l.isra.0+0x3e>
 8008cae:	2c2d      	cmp	r4, #45	; 0x2d
 8008cb0:	d10b      	bne.n	8008cca <_strtoull_l.isra.0+0x42>
 8008cb2:	2601      	movs	r6, #1
 8008cb4:	782c      	ldrb	r4, [r5, #0]
 8008cb6:	f10b 0502 	add.w	r5, fp, #2
 8008cba:	b167      	cbz	r7, 8008cd6 <_strtoull_l.isra.0+0x4e>
 8008cbc:	2f10      	cmp	r7, #16
 8008cbe:	d114      	bne.n	8008cea <_strtoull_l.isra.0+0x62>
 8008cc0:	2c30      	cmp	r4, #48	; 0x30
 8008cc2:	d00a      	beq.n	8008cda <_strtoull_l.isra.0+0x52>
 8008cc4:	e011      	b.n	8008cea <_strtoull_l.isra.0+0x62>
 8008cc6:	46ab      	mov	fp, r5
 8008cc8:	e7e6      	b.n	8008c98 <_strtoull_l.isra.0+0x10>
 8008cca:	2c2b      	cmp	r4, #43	; 0x2b
 8008ccc:	bf04      	itt	eq
 8008cce:	782c      	ldrbeq	r4, [r5, #0]
 8008cd0:	f10b 0502 	addeq.w	r5, fp, #2
 8008cd4:	e7f1      	b.n	8008cba <_strtoull_l.isra.0+0x32>
 8008cd6:	2c30      	cmp	r4, #48	; 0x30
 8008cd8:	d141      	bne.n	8008d5e <_strtoull_l.isra.0+0xd6>
 8008cda:	782b      	ldrb	r3, [r5, #0]
 8008cdc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ce0:	2b58      	cmp	r3, #88	; 0x58
 8008ce2:	d16c      	bne.n	8008dbe <_strtoull_l.isra.0+0x136>
 8008ce4:	2710      	movs	r7, #16
 8008ce6:	786c      	ldrb	r4, [r5, #1]
 8008ce8:	3502      	adds	r5, #2
 8008cea:	ea4f 7be7 	mov.w	fp, r7, asr #31
 8008cee:	463a      	mov	r2, r7
 8008cf0:	465b      	mov	r3, fp
 8008cf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cf6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008cfa:	f7f7 ff3b 	bl	8000b74 <__aeabi_uldivmod>
 8008cfe:	463a      	mov	r2, r7
 8008d00:	e9cd 0100 	strd	r0, r1, [sp]
 8008d04:	465b      	mov	r3, fp
 8008d06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008d0e:	f7f7 ff31 	bl	8000b74 <__aeabi_uldivmod>
 8008d12:	46ba      	mov	sl, r7
 8008d14:	4694      	mov	ip, r2
 8008d16:	2300      	movs	r3, #0
 8008d18:	2000      	movs	r0, #0
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008d20:	f1be 0f09 	cmp.w	lr, #9
 8008d24:	d81d      	bhi.n	8008d62 <_strtoull_l.isra.0+0xda>
 8008d26:	4674      	mov	r4, lr
 8008d28:	42a7      	cmp	r7, r4
 8008d2a:	dd2b      	ble.n	8008d84 <_strtoull_l.isra.0+0xfc>
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	db26      	blt.n	8008d7e <_strtoull_l.isra.0+0xf6>
 8008d30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d34:	428b      	cmp	r3, r1
 8008d36:	bf08      	it	eq
 8008d38:	4282      	cmpeq	r2, r0
 8008d3a:	d320      	bcc.n	8008d7e <_strtoull_l.isra.0+0xf6>
 8008d3c:	d101      	bne.n	8008d42 <_strtoull_l.isra.0+0xba>
 8008d3e:	45a4      	cmp	ip, r4
 8008d40:	db1d      	blt.n	8008d7e <_strtoull_l.isra.0+0xf6>
 8008d42:	fb0a f301 	mul.w	r3, sl, r1
 8008d46:	fb00 330b 	mla	r3, r0, fp, r3
 8008d4a:	fbaa 0100 	umull	r0, r1, sl, r0
 8008d4e:	4419      	add	r1, r3
 8008d50:	2301      	movs	r3, #1
 8008d52:	1900      	adds	r0, r0, r4
 8008d54:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8008d58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d5c:	e7de      	b.n	8008d1c <_strtoull_l.isra.0+0x94>
 8008d5e:	270a      	movs	r7, #10
 8008d60:	e7c3      	b.n	8008cea <_strtoull_l.isra.0+0x62>
 8008d62:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008d66:	f1be 0f19 	cmp.w	lr, #25
 8008d6a:	d801      	bhi.n	8008d70 <_strtoull_l.isra.0+0xe8>
 8008d6c:	3c37      	subs	r4, #55	; 0x37
 8008d6e:	e7db      	b.n	8008d28 <_strtoull_l.isra.0+0xa0>
 8008d70:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008d74:	f1be 0f19 	cmp.w	lr, #25
 8008d78:	d804      	bhi.n	8008d84 <_strtoull_l.isra.0+0xfc>
 8008d7a:	3c57      	subs	r4, #87	; 0x57
 8008d7c:	e7d4      	b.n	8008d28 <_strtoull_l.isra.0+0xa0>
 8008d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d82:	e7e9      	b.n	8008d58 <_strtoull_l.isra.0+0xd0>
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	da0c      	bge.n	8008da2 <_strtoull_l.isra.0+0x11a>
 8008d88:	2322      	movs	r3, #34	; 0x22
 8008d8a:	9a03      	ldr	r2, [sp, #12]
 8008d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d90:	6013      	str	r3, [r2, #0]
 8008d92:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008d96:	f1b9 0f00 	cmp.w	r9, #0
 8008d9a:	d10a      	bne.n	8008db2 <_strtoull_l.isra.0+0x12a>
 8008d9c:	b005      	add	sp, #20
 8008d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008da2:	b116      	cbz	r6, 8008daa <_strtoull_l.isra.0+0x122>
 8008da4:	4240      	negs	r0, r0
 8008da6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008daa:	f1b9 0f00 	cmp.w	r9, #0
 8008dae:	d0f5      	beq.n	8008d9c <_strtoull_l.isra.0+0x114>
 8008db0:	b11b      	cbz	r3, 8008dba <_strtoull_l.isra.0+0x132>
 8008db2:	3d01      	subs	r5, #1
 8008db4:	f8c9 5000 	str.w	r5, [r9]
 8008db8:	e7f0      	b.n	8008d9c <_strtoull_l.isra.0+0x114>
 8008dba:	4645      	mov	r5, r8
 8008dbc:	e7fa      	b.n	8008db4 <_strtoull_l.isra.0+0x12c>
 8008dbe:	2430      	movs	r4, #48	; 0x30
 8008dc0:	2f00      	cmp	r7, #0
 8008dc2:	d192      	bne.n	8008cea <_strtoull_l.isra.0+0x62>
 8008dc4:	2708      	movs	r7, #8
 8008dc6:	e790      	b.n	8008cea <_strtoull_l.isra.0+0x62>

08008dc8 <_strtoull_r>:
 8008dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dca:	4c06      	ldr	r4, [pc, #24]	; (8008de4 <_strtoull_r+0x1c>)
 8008dcc:	4d06      	ldr	r5, [pc, #24]	; (8008de8 <_strtoull_r+0x20>)
 8008dce:	6824      	ldr	r4, [r4, #0]
 8008dd0:	6a24      	ldr	r4, [r4, #32]
 8008dd2:	2c00      	cmp	r4, #0
 8008dd4:	bf08      	it	eq
 8008dd6:	462c      	moveq	r4, r5
 8008dd8:	9400      	str	r4, [sp, #0]
 8008dda:	f7ff ff55 	bl	8008c88 <_strtoull_l.isra.0>
 8008dde:	b003      	add	sp, #12
 8008de0:	bd30      	pop	{r4, r5, pc}
 8008de2:	bf00      	nop
 8008de4:	200000b4 	.word	0x200000b4
 8008de8:	200001a8 	.word	0x200001a8

08008dec <__ssprint_r>:
 8008dec:	6893      	ldr	r3, [r2, #8]
 8008dee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df2:	4681      	mov	r9, r0
 8008df4:	460c      	mov	r4, r1
 8008df6:	4617      	mov	r7, r2
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d060      	beq.n	8008ebe <__ssprint_r+0xd2>
 8008dfc:	f04f 0b00 	mov.w	fp, #0
 8008e00:	465e      	mov	r6, fp
 8008e02:	f8d2 a000 	ldr.w	sl, [r2]
 8008e06:	b356      	cbz	r6, 8008e5e <__ssprint_r+0x72>
 8008e08:	68a3      	ldr	r3, [r4, #8]
 8008e0a:	429e      	cmp	r6, r3
 8008e0c:	d344      	bcc.n	8008e98 <__ssprint_r+0xac>
 8008e0e:	89a2      	ldrh	r2, [r4, #12]
 8008e10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e14:	d03e      	beq.n	8008e94 <__ssprint_r+0xa8>
 8008e16:	2302      	movs	r3, #2
 8008e18:	6825      	ldr	r5, [r4, #0]
 8008e1a:	6921      	ldr	r1, [r4, #16]
 8008e1c:	eba5 0801 	sub.w	r8, r5, r1
 8008e20:	6965      	ldr	r5, [r4, #20]
 8008e22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e26:	fb95 f5f3 	sdiv	r5, r5, r3
 8008e2a:	f108 0301 	add.w	r3, r8, #1
 8008e2e:	4433      	add	r3, r6
 8008e30:	429d      	cmp	r5, r3
 8008e32:	bf38      	it	cc
 8008e34:	461d      	movcc	r5, r3
 8008e36:	0553      	lsls	r3, r2, #21
 8008e38:	d546      	bpl.n	8008ec8 <__ssprint_r+0xdc>
 8008e3a:	4629      	mov	r1, r5
 8008e3c:	4648      	mov	r0, r9
 8008e3e:	f7fe f891 	bl	8006f64 <_malloc_r>
 8008e42:	b998      	cbnz	r0, 8008e6c <__ssprint_r+0x80>
 8008e44:	230c      	movs	r3, #12
 8008e46:	f8c9 3000 	str.w	r3, [r9]
 8008e4a:	89a3      	ldrh	r3, [r4, #12]
 8008e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e54:	81a3      	strh	r3, [r4, #12]
 8008e56:	2300      	movs	r3, #0
 8008e58:	60bb      	str	r3, [r7, #8]
 8008e5a:	607b      	str	r3, [r7, #4]
 8008e5c:	e031      	b.n	8008ec2 <__ssprint_r+0xd6>
 8008e5e:	f8da b000 	ldr.w	fp, [sl]
 8008e62:	f8da 6004 	ldr.w	r6, [sl, #4]
 8008e66:	f10a 0a08 	add.w	sl, sl, #8
 8008e6a:	e7cc      	b.n	8008e06 <__ssprint_r+0x1a>
 8008e6c:	4642      	mov	r2, r8
 8008e6e:	6921      	ldr	r1, [r4, #16]
 8008e70:	9001      	str	r0, [sp, #4]
 8008e72:	f7fb fc2d 	bl	80046d0 <memcpy>
 8008e76:	89a2      	ldrh	r2, [r4, #12]
 8008e78:	9b01      	ldr	r3, [sp, #4]
 8008e7a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8008e7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008e82:	81a2      	strh	r2, [r4, #12]
 8008e84:	6123      	str	r3, [r4, #16]
 8008e86:	4443      	add	r3, r8
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	4633      	mov	r3, r6
 8008e8c:	6165      	str	r5, [r4, #20]
 8008e8e:	eba5 0508 	sub.w	r5, r5, r8
 8008e92:	60a5      	str	r5, [r4, #8]
 8008e94:	429e      	cmp	r6, r3
 8008e96:	d200      	bcs.n	8008e9a <__ssprint_r+0xae>
 8008e98:	4633      	mov	r3, r6
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	4659      	mov	r1, fp
 8008e9e:	6820      	ldr	r0, [r4, #0]
 8008ea0:	9301      	str	r3, [sp, #4]
 8008ea2:	f000 fd53 	bl	800994c <memmove>
 8008ea6:	68a2      	ldr	r2, [r4, #8]
 8008ea8:	9b01      	ldr	r3, [sp, #4]
 8008eaa:	1ad2      	subs	r2, r2, r3
 8008eac:	60a2      	str	r2, [r4, #8]
 8008eae:	6822      	ldr	r2, [r4, #0]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	6023      	str	r3, [r4, #0]
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	1b9e      	subs	r6, r3, r6
 8008eb8:	60be      	str	r6, [r7, #8]
 8008eba:	2e00      	cmp	r6, #0
 8008ebc:	d1cf      	bne.n	8008e5e <__ssprint_r+0x72>
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	b003      	add	sp, #12
 8008ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec8:	462a      	mov	r2, r5
 8008eca:	4648      	mov	r0, r9
 8008ecc:	f000 fd58 	bl	8009980 <_realloc_r>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2800      	cmp	r0, #0
 8008ed4:	d1d6      	bne.n	8008e84 <__ssprint_r+0x98>
 8008ed6:	6921      	ldr	r1, [r4, #16]
 8008ed8:	4648      	mov	r0, r9
 8008eda:	f000 f95b 	bl	8009194 <_free_r>
 8008ede:	e7b1      	b.n	8008e44 <__ssprint_r+0x58>

08008ee0 <_sungetc_r>:
 8008ee0:	b538      	push	{r3, r4, r5, lr}
 8008ee2:	1c4b      	adds	r3, r1, #1
 8008ee4:	4614      	mov	r4, r2
 8008ee6:	d103      	bne.n	8008ef0 <_sungetc_r+0x10>
 8008ee8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008eec:	4628      	mov	r0, r5
 8008eee:	bd38      	pop	{r3, r4, r5, pc}
 8008ef0:	8993      	ldrh	r3, [r2, #12]
 8008ef2:	b2cd      	uxtb	r5, r1
 8008ef4:	f023 0320 	bic.w	r3, r3, #32
 8008ef8:	8193      	strh	r3, [r2, #12]
 8008efa:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8008efc:	6852      	ldr	r2, [r2, #4]
 8008efe:	b18b      	cbz	r3, 8008f24 <_sungetc_r+0x44>
 8008f00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f02:	429a      	cmp	r2, r3
 8008f04:	da08      	bge.n	8008f18 <_sungetc_r+0x38>
 8008f06:	6823      	ldr	r3, [r4, #0]
 8008f08:	1e5a      	subs	r2, r3, #1
 8008f0a:	6022      	str	r2, [r4, #0]
 8008f0c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008f10:	6863      	ldr	r3, [r4, #4]
 8008f12:	3301      	adds	r3, #1
 8008f14:	6063      	str	r3, [r4, #4]
 8008f16:	e7e9      	b.n	8008eec <_sungetc_r+0xc>
 8008f18:	4621      	mov	r1, r4
 8008f1a:	f000 f872 	bl	8009002 <__submore>
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	d0f1      	beq.n	8008f06 <_sungetc_r+0x26>
 8008f22:	e7e1      	b.n	8008ee8 <_sungetc_r+0x8>
 8008f24:	6921      	ldr	r1, [r4, #16]
 8008f26:	6823      	ldr	r3, [r4, #0]
 8008f28:	b151      	cbz	r1, 8008f40 <_sungetc_r+0x60>
 8008f2a:	4299      	cmp	r1, r3
 8008f2c:	d208      	bcs.n	8008f40 <_sungetc_r+0x60>
 8008f2e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008f32:	428d      	cmp	r5, r1
 8008f34:	d104      	bne.n	8008f40 <_sungetc_r+0x60>
 8008f36:	3b01      	subs	r3, #1
 8008f38:	3201      	adds	r2, #1
 8008f3a:	6023      	str	r3, [r4, #0]
 8008f3c:	6062      	str	r2, [r4, #4]
 8008f3e:	e7d5      	b.n	8008eec <_sungetc_r+0xc>
 8008f40:	63e3      	str	r3, [r4, #60]	; 0x3c
 8008f42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f46:	6363      	str	r3, [r4, #52]	; 0x34
 8008f48:	2303      	movs	r3, #3
 8008f4a:	63a3      	str	r3, [r4, #56]	; 0x38
 8008f4c:	4623      	mov	r3, r4
 8008f4e:	6422      	str	r2, [r4, #64]	; 0x40
 8008f50:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008f54:	6023      	str	r3, [r4, #0]
 8008f56:	2301      	movs	r3, #1
 8008f58:	e7dc      	b.n	8008f14 <_sungetc_r+0x34>

08008f5a <__ssrefill_r>:
 8008f5a:	b510      	push	{r4, lr}
 8008f5c:	460c      	mov	r4, r1
 8008f5e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008f60:	b169      	cbz	r1, 8008f7e <__ssrefill_r+0x24>
 8008f62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f66:	4299      	cmp	r1, r3
 8008f68:	d001      	beq.n	8008f6e <__ssrefill_r+0x14>
 8008f6a:	f000 f913 	bl	8009194 <_free_r>
 8008f6e:	2000      	movs	r0, #0
 8008f70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f72:	6360      	str	r0, [r4, #52]	; 0x34
 8008f74:	6063      	str	r3, [r4, #4]
 8008f76:	b113      	cbz	r3, 8008f7e <__ssrefill_r+0x24>
 8008f78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008f7a:	6023      	str	r3, [r4, #0]
 8008f7c:	bd10      	pop	{r4, pc}
 8008f7e:	6923      	ldr	r3, [r4, #16]
 8008f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f84:	6023      	str	r3, [r4, #0]
 8008f86:	2300      	movs	r3, #0
 8008f88:	6063      	str	r3, [r4, #4]
 8008f8a:	89a3      	ldrh	r3, [r4, #12]
 8008f8c:	f043 0320 	orr.w	r3, r3, #32
 8008f90:	81a3      	strh	r3, [r4, #12]
 8008f92:	bd10      	pop	{r4, pc}

08008f94 <_sfread_r>:
 8008f94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f98:	4615      	mov	r5, r2
 8008f9a:	435d      	muls	r5, r3
 8008f9c:	4682      	mov	sl, r0
 8008f9e:	4691      	mov	r9, r2
 8008fa0:	4698      	mov	r8, r3
 8008fa2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008fa4:	d029      	beq.n	8008ffa <_sfread_r+0x66>
 8008fa6:	460f      	mov	r7, r1
 8008fa8:	462e      	mov	r6, r5
 8008faa:	f04f 0b00 	mov.w	fp, #0
 8008fae:	6863      	ldr	r3, [r4, #4]
 8008fb0:	429e      	cmp	r6, r3
 8008fb2:	d80c      	bhi.n	8008fce <_sfread_r+0x3a>
 8008fb4:	4632      	mov	r2, r6
 8008fb6:	6821      	ldr	r1, [r4, #0]
 8008fb8:	4638      	mov	r0, r7
 8008fba:	f7fb fb89 	bl	80046d0 <memcpy>
 8008fbe:	6863      	ldr	r3, [r4, #4]
 8008fc0:	6825      	ldr	r5, [r4, #0]
 8008fc2:	1b9b      	subs	r3, r3, r6
 8008fc4:	4435      	add	r5, r6
 8008fc6:	6025      	str	r5, [r4, #0]
 8008fc8:	6063      	str	r3, [r4, #4]
 8008fca:	4645      	mov	r5, r8
 8008fcc:	e015      	b.n	8008ffa <_sfread_r+0x66>
 8008fce:	461a      	mov	r2, r3
 8008fd0:	6821      	ldr	r1, [r4, #0]
 8008fd2:	4638      	mov	r0, r7
 8008fd4:	9301      	str	r3, [sp, #4]
 8008fd6:	f7fb fb7b 	bl	80046d0 <memcpy>
 8008fda:	9b01      	ldr	r3, [sp, #4]
 8008fdc:	6822      	ldr	r2, [r4, #0]
 8008fde:	4621      	mov	r1, r4
 8008fe0:	441a      	add	r2, r3
 8008fe2:	e884 0804 	stmia.w	r4, {r2, fp}
 8008fe6:	4650      	mov	r0, sl
 8008fe8:	441f      	add	r7, r3
 8008fea:	1af6      	subs	r6, r6, r3
 8008fec:	f7ff ffb5 	bl	8008f5a <__ssrefill_r>
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	d0dc      	beq.n	8008fae <_sfread_r+0x1a>
 8008ff4:	1bad      	subs	r5, r5, r6
 8008ff6:	fbb5 f5f9 	udiv	r5, r5, r9
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	b003      	add	sp, #12
 8008ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009002 <__submore>:
 8009002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009006:	460c      	mov	r4, r1
 8009008:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800900a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800900e:	4299      	cmp	r1, r3
 8009010:	d11c      	bne.n	800904c <__submore+0x4a>
 8009012:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009016:	f7fd ffa5 	bl	8006f64 <_malloc_r>
 800901a:	b918      	cbnz	r0, 8009024 <__submore+0x22>
 800901c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009024:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009028:	63a3      	str	r3, [r4, #56]	; 0x38
 800902a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800902e:	6360      	str	r0, [r4, #52]	; 0x34
 8009030:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009034:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009038:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800903c:	7043      	strb	r3, [r0, #1]
 800903e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009042:	7003      	strb	r3, [r0, #0]
 8009044:	6020      	str	r0, [r4, #0]
 8009046:	2000      	movs	r0, #0
 8009048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800904c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800904e:	0077      	lsls	r7, r6, #1
 8009050:	463a      	mov	r2, r7
 8009052:	f000 fc95 	bl	8009980 <_realloc_r>
 8009056:	4605      	mov	r5, r0
 8009058:	2800      	cmp	r0, #0
 800905a:	d0df      	beq.n	800901c <__submore+0x1a>
 800905c:	eb00 0806 	add.w	r8, r0, r6
 8009060:	4601      	mov	r1, r0
 8009062:	4632      	mov	r2, r6
 8009064:	4640      	mov	r0, r8
 8009066:	f7fb fb33 	bl	80046d0 <memcpy>
 800906a:	f8c4 8000 	str.w	r8, [r4]
 800906e:	6365      	str	r5, [r4, #52]	; 0x34
 8009070:	63a7      	str	r7, [r4, #56]	; 0x38
 8009072:	e7e8      	b.n	8009046 <__submore+0x44>

08009074 <__ascii_wctomb>:
 8009074:	b149      	cbz	r1, 800908a <__ascii_wctomb+0x16>
 8009076:	2aff      	cmp	r2, #255	; 0xff
 8009078:	bf8b      	itete	hi
 800907a:	238a      	movhi	r3, #138	; 0x8a
 800907c:	700a      	strbls	r2, [r1, #0]
 800907e:	6003      	strhi	r3, [r0, #0]
 8009080:	2001      	movls	r0, #1
 8009082:	bf88      	it	hi
 8009084:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009088:	4770      	bx	lr
 800908a:	4608      	mov	r0, r1
 800908c:	4770      	bx	lr

0800908e <_calloc_r>:
 800908e:	b510      	push	{r4, lr}
 8009090:	4351      	muls	r1, r2
 8009092:	f7fd ff67 	bl	8006f64 <_malloc_r>
 8009096:	4604      	mov	r4, r0
 8009098:	b198      	cbz	r0, 80090c2 <_calloc_r+0x34>
 800909a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800909e:	f022 0203 	bic.w	r2, r2, #3
 80090a2:	3a04      	subs	r2, #4
 80090a4:	2a24      	cmp	r2, #36	; 0x24
 80090a6:	d81b      	bhi.n	80090e0 <_calloc_r+0x52>
 80090a8:	2a13      	cmp	r2, #19
 80090aa:	d917      	bls.n	80090dc <_calloc_r+0x4e>
 80090ac:	2100      	movs	r1, #0
 80090ae:	2a1b      	cmp	r2, #27
 80090b0:	6001      	str	r1, [r0, #0]
 80090b2:	6041      	str	r1, [r0, #4]
 80090b4:	d807      	bhi.n	80090c6 <_calloc_r+0x38>
 80090b6:	f100 0308 	add.w	r3, r0, #8
 80090ba:	2200      	movs	r2, #0
 80090bc:	601a      	str	r2, [r3, #0]
 80090be:	605a      	str	r2, [r3, #4]
 80090c0:	609a      	str	r2, [r3, #8]
 80090c2:	4620      	mov	r0, r4
 80090c4:	bd10      	pop	{r4, pc}
 80090c6:	2a24      	cmp	r2, #36	; 0x24
 80090c8:	6081      	str	r1, [r0, #8]
 80090ca:	60c1      	str	r1, [r0, #12]
 80090cc:	bf11      	iteee	ne
 80090ce:	f100 0310 	addne.w	r3, r0, #16
 80090d2:	6101      	streq	r1, [r0, #16]
 80090d4:	f100 0318 	addeq.w	r3, r0, #24
 80090d8:	6141      	streq	r1, [r0, #20]
 80090da:	e7ee      	b.n	80090ba <_calloc_r+0x2c>
 80090dc:	4603      	mov	r3, r0
 80090de:	e7ec      	b.n	80090ba <_calloc_r+0x2c>
 80090e0:	2100      	movs	r1, #0
 80090e2:	f7fb fb00 	bl	80046e6 <memset>
 80090e6:	e7ec      	b.n	80090c2 <_calloc_r+0x34>

080090e8 <_malloc_trim_r>:
 80090e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090ec:	4689      	mov	r9, r1
 80090ee:	4f25      	ldr	r7, [pc, #148]	; (8009184 <_malloc_trim_r+0x9c>)
 80090f0:	4606      	mov	r6, r0
 80090f2:	f7fe f98f 	bl	8007414 <__malloc_lock>
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8009190 <_malloc_trim_r+0xa8>
 80090fc:	685d      	ldr	r5, [r3, #4]
 80090fe:	f1a8 0411 	sub.w	r4, r8, #17
 8009102:	f025 0503 	bic.w	r5, r5, #3
 8009106:	eba4 0409 	sub.w	r4, r4, r9
 800910a:	442c      	add	r4, r5
 800910c:	fbb4 f4f8 	udiv	r4, r4, r8
 8009110:	3c01      	subs	r4, #1
 8009112:	fb08 f404 	mul.w	r4, r8, r4
 8009116:	4544      	cmp	r4, r8
 8009118:	da05      	bge.n	8009126 <_malloc_trim_r+0x3e>
 800911a:	4630      	mov	r0, r6
 800911c:	f7fe f980 	bl	8007420 <__malloc_unlock>
 8009120:	2000      	movs	r0, #0
 8009122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009126:	2100      	movs	r1, #0
 8009128:	4630      	mov	r0, r6
 800912a:	f7fe fd67 	bl	8007bfc <_sbrk_r>
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	442b      	add	r3, r5
 8009132:	4298      	cmp	r0, r3
 8009134:	d1f1      	bne.n	800911a <_malloc_trim_r+0x32>
 8009136:	4261      	negs	r1, r4
 8009138:	4630      	mov	r0, r6
 800913a:	f7fe fd5f 	bl	8007bfc <_sbrk_r>
 800913e:	3001      	adds	r0, #1
 8009140:	d110      	bne.n	8009164 <_malloc_trim_r+0x7c>
 8009142:	2100      	movs	r1, #0
 8009144:	4630      	mov	r0, r6
 8009146:	f7fe fd59 	bl	8007bfc <_sbrk_r>
 800914a:	68ba      	ldr	r2, [r7, #8]
 800914c:	1a83      	subs	r3, r0, r2
 800914e:	2b0f      	cmp	r3, #15
 8009150:	dde3      	ble.n	800911a <_malloc_trim_r+0x32>
 8009152:	490d      	ldr	r1, [pc, #52]	; (8009188 <_malloc_trim_r+0xa0>)
 8009154:	f043 0301 	orr.w	r3, r3, #1
 8009158:	6809      	ldr	r1, [r1, #0]
 800915a:	6053      	str	r3, [r2, #4]
 800915c:	1a40      	subs	r0, r0, r1
 800915e:	490b      	ldr	r1, [pc, #44]	; (800918c <_malloc_trim_r+0xa4>)
 8009160:	6008      	str	r0, [r1, #0]
 8009162:	e7da      	b.n	800911a <_malloc_trim_r+0x32>
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	4a09      	ldr	r2, [pc, #36]	; (800918c <_malloc_trim_r+0xa4>)
 8009168:	1b2d      	subs	r5, r5, r4
 800916a:	f045 0501 	orr.w	r5, r5, #1
 800916e:	605d      	str	r5, [r3, #4]
 8009170:	6813      	ldr	r3, [r2, #0]
 8009172:	4630      	mov	r0, r6
 8009174:	1b1c      	subs	r4, r3, r4
 8009176:	6014      	str	r4, [r2, #0]
 8009178:	f7fe f952 	bl	8007420 <__malloc_unlock>
 800917c:	2001      	movs	r0, #1
 800917e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009182:	bf00      	nop
 8009184:	20000314 	.word	0x20000314
 8009188:	2000071c 	.word	0x2000071c
 800918c:	200011d4 	.word	0x200011d4
 8009190:	00001000 	.word	0x00001000

08009194 <_free_r>:
 8009194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009198:	4604      	mov	r4, r0
 800919a:	4688      	mov	r8, r1
 800919c:	2900      	cmp	r1, #0
 800919e:	f000 80ab 	beq.w	80092f8 <_free_r+0x164>
 80091a2:	f7fe f937 	bl	8007414 <__malloc_lock>
 80091a6:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80091aa:	4d54      	ldr	r5, [pc, #336]	; (80092fc <_free_r+0x168>)
 80091ac:	f022 0001 	bic.w	r0, r2, #1
 80091b0:	f1a8 0308 	sub.w	r3, r8, #8
 80091b4:	181f      	adds	r7, r3, r0
 80091b6:	68a9      	ldr	r1, [r5, #8]
 80091b8:	687e      	ldr	r6, [r7, #4]
 80091ba:	428f      	cmp	r7, r1
 80091bc:	f026 0603 	bic.w	r6, r6, #3
 80091c0:	f002 0201 	and.w	r2, r2, #1
 80091c4:	d11b      	bne.n	80091fe <_free_r+0x6a>
 80091c6:	4430      	add	r0, r6
 80091c8:	b93a      	cbnz	r2, 80091da <_free_r+0x46>
 80091ca:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80091ce:	1a9b      	subs	r3, r3, r2
 80091d0:	6899      	ldr	r1, [r3, #8]
 80091d2:	4410      	add	r0, r2
 80091d4:	68da      	ldr	r2, [r3, #12]
 80091d6:	60ca      	str	r2, [r1, #12]
 80091d8:	6091      	str	r1, [r2, #8]
 80091da:	f040 0201 	orr.w	r2, r0, #1
 80091de:	605a      	str	r2, [r3, #4]
 80091e0:	60ab      	str	r3, [r5, #8]
 80091e2:	4b47      	ldr	r3, [pc, #284]	; (8009300 <_free_r+0x16c>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4298      	cmp	r0, r3
 80091e8:	d304      	bcc.n	80091f4 <_free_r+0x60>
 80091ea:	4b46      	ldr	r3, [pc, #280]	; (8009304 <_free_r+0x170>)
 80091ec:	4620      	mov	r0, r4
 80091ee:	6819      	ldr	r1, [r3, #0]
 80091f0:	f7ff ff7a 	bl	80090e8 <_malloc_trim_r>
 80091f4:	4620      	mov	r0, r4
 80091f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091fa:	f7fe b911 	b.w	8007420 <__malloc_unlock>
 80091fe:	607e      	str	r6, [r7, #4]
 8009200:	2a00      	cmp	r2, #0
 8009202:	d139      	bne.n	8009278 <_free_r+0xe4>
 8009204:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8009208:	f105 0e08 	add.w	lr, r5, #8
 800920c:	1a5b      	subs	r3, r3, r1
 800920e:	4408      	add	r0, r1
 8009210:	6899      	ldr	r1, [r3, #8]
 8009212:	4571      	cmp	r1, lr
 8009214:	d032      	beq.n	800927c <_free_r+0xe8>
 8009216:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800921a:	f8c1 e00c 	str.w	lr, [r1, #12]
 800921e:	f8ce 1008 	str.w	r1, [lr, #8]
 8009222:	19b9      	adds	r1, r7, r6
 8009224:	6849      	ldr	r1, [r1, #4]
 8009226:	07c9      	lsls	r1, r1, #31
 8009228:	d40a      	bmi.n	8009240 <_free_r+0xac>
 800922a:	4430      	add	r0, r6
 800922c:	68b9      	ldr	r1, [r7, #8]
 800922e:	bb3a      	cbnz	r2, 8009280 <_free_r+0xec>
 8009230:	4e35      	ldr	r6, [pc, #212]	; (8009308 <_free_r+0x174>)
 8009232:	42b1      	cmp	r1, r6
 8009234:	d124      	bne.n	8009280 <_free_r+0xec>
 8009236:	2201      	movs	r2, #1
 8009238:	616b      	str	r3, [r5, #20]
 800923a:	612b      	str	r3, [r5, #16]
 800923c:	60d9      	str	r1, [r3, #12]
 800923e:	6099      	str	r1, [r3, #8]
 8009240:	f040 0101 	orr.w	r1, r0, #1
 8009244:	6059      	str	r1, [r3, #4]
 8009246:	5018      	str	r0, [r3, r0]
 8009248:	2a00      	cmp	r2, #0
 800924a:	d1d3      	bne.n	80091f4 <_free_r+0x60>
 800924c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009250:	d21a      	bcs.n	8009288 <_free_r+0xf4>
 8009252:	2201      	movs	r2, #1
 8009254:	08c0      	lsrs	r0, r0, #3
 8009256:	1081      	asrs	r1, r0, #2
 8009258:	408a      	lsls	r2, r1
 800925a:	6869      	ldr	r1, [r5, #4]
 800925c:	3001      	adds	r0, #1
 800925e:	430a      	orrs	r2, r1
 8009260:	606a      	str	r2, [r5, #4]
 8009262:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8009266:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800926a:	3a08      	subs	r2, #8
 800926c:	60da      	str	r2, [r3, #12]
 800926e:	6099      	str	r1, [r3, #8]
 8009270:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8009274:	60cb      	str	r3, [r1, #12]
 8009276:	e7bd      	b.n	80091f4 <_free_r+0x60>
 8009278:	2200      	movs	r2, #0
 800927a:	e7d2      	b.n	8009222 <_free_r+0x8e>
 800927c:	2201      	movs	r2, #1
 800927e:	e7d0      	b.n	8009222 <_free_r+0x8e>
 8009280:	68fe      	ldr	r6, [r7, #12]
 8009282:	60ce      	str	r6, [r1, #12]
 8009284:	60b1      	str	r1, [r6, #8]
 8009286:	e7db      	b.n	8009240 <_free_r+0xac>
 8009288:	0a42      	lsrs	r2, r0, #9
 800928a:	2a04      	cmp	r2, #4
 800928c:	d813      	bhi.n	80092b6 <_free_r+0x122>
 800928e:	0982      	lsrs	r2, r0, #6
 8009290:	3238      	adds	r2, #56	; 0x38
 8009292:	1c51      	adds	r1, r2, #1
 8009294:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8009298:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800929c:	428e      	cmp	r6, r1
 800929e:	d124      	bne.n	80092ea <_free_r+0x156>
 80092a0:	2001      	movs	r0, #1
 80092a2:	1092      	asrs	r2, r2, #2
 80092a4:	fa00 f202 	lsl.w	r2, r0, r2
 80092a8:	6868      	ldr	r0, [r5, #4]
 80092aa:	4302      	orrs	r2, r0
 80092ac:	606a      	str	r2, [r5, #4]
 80092ae:	60de      	str	r6, [r3, #12]
 80092b0:	6099      	str	r1, [r3, #8]
 80092b2:	60b3      	str	r3, [r6, #8]
 80092b4:	e7de      	b.n	8009274 <_free_r+0xe0>
 80092b6:	2a14      	cmp	r2, #20
 80092b8:	d801      	bhi.n	80092be <_free_r+0x12a>
 80092ba:	325b      	adds	r2, #91	; 0x5b
 80092bc:	e7e9      	b.n	8009292 <_free_r+0xfe>
 80092be:	2a54      	cmp	r2, #84	; 0x54
 80092c0:	d802      	bhi.n	80092c8 <_free_r+0x134>
 80092c2:	0b02      	lsrs	r2, r0, #12
 80092c4:	326e      	adds	r2, #110	; 0x6e
 80092c6:	e7e4      	b.n	8009292 <_free_r+0xfe>
 80092c8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80092cc:	d802      	bhi.n	80092d4 <_free_r+0x140>
 80092ce:	0bc2      	lsrs	r2, r0, #15
 80092d0:	3277      	adds	r2, #119	; 0x77
 80092d2:	e7de      	b.n	8009292 <_free_r+0xfe>
 80092d4:	f240 5154 	movw	r1, #1364	; 0x554
 80092d8:	428a      	cmp	r2, r1
 80092da:	bf9a      	itte	ls
 80092dc:	0c82      	lsrls	r2, r0, #18
 80092de:	327c      	addls	r2, #124	; 0x7c
 80092e0:	227e      	movhi	r2, #126	; 0x7e
 80092e2:	e7d6      	b.n	8009292 <_free_r+0xfe>
 80092e4:	6889      	ldr	r1, [r1, #8]
 80092e6:	428e      	cmp	r6, r1
 80092e8:	d004      	beq.n	80092f4 <_free_r+0x160>
 80092ea:	684a      	ldr	r2, [r1, #4]
 80092ec:	f022 0203 	bic.w	r2, r2, #3
 80092f0:	4290      	cmp	r0, r2
 80092f2:	d3f7      	bcc.n	80092e4 <_free_r+0x150>
 80092f4:	68ce      	ldr	r6, [r1, #12]
 80092f6:	e7da      	b.n	80092ae <_free_r+0x11a>
 80092f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092fc:	20000314 	.word	0x20000314
 8009300:	20000720 	.word	0x20000720
 8009304:	20001204 	.word	0x20001204
 8009308:	2000031c 	.word	0x2000031c

0800930c <rshift>:
 800930c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800930e:	6906      	ldr	r6, [r0, #16]
 8009310:	114b      	asrs	r3, r1, #5
 8009312:	42b3      	cmp	r3, r6
 8009314:	f100 0514 	add.w	r5, r0, #20
 8009318:	da2b      	bge.n	8009372 <rshift+0x66>
 800931a:	f011 011f 	ands.w	r1, r1, #31
 800931e:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8009322:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8009326:	d108      	bne.n	800933a <rshift+0x2e>
 8009328:	4629      	mov	r1, r5
 800932a:	42b2      	cmp	r2, r6
 800932c:	460b      	mov	r3, r1
 800932e:	d210      	bcs.n	8009352 <rshift+0x46>
 8009330:	f852 3b04 	ldr.w	r3, [r2], #4
 8009334:	f841 3b04 	str.w	r3, [r1], #4
 8009338:	e7f7      	b.n	800932a <rshift+0x1e>
 800933a:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800933e:	462b      	mov	r3, r5
 8009340:	f1c1 0e20 	rsb	lr, r1, #32
 8009344:	3204      	adds	r2, #4
 8009346:	40cc      	lsrs	r4, r1
 8009348:	42b2      	cmp	r2, r6
 800934a:	d308      	bcc.n	800935e <rshift+0x52>
 800934c:	601c      	str	r4, [r3, #0]
 800934e:	b104      	cbz	r4, 8009352 <rshift+0x46>
 8009350:	3304      	adds	r3, #4
 8009352:	1b5b      	subs	r3, r3, r5
 8009354:	109b      	asrs	r3, r3, #2
 8009356:	6103      	str	r3, [r0, #16]
 8009358:	b903      	cbnz	r3, 800935c <rshift+0x50>
 800935a:	6143      	str	r3, [r0, #20]
 800935c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800935e:	6817      	ldr	r7, [r2, #0]
 8009360:	fa07 f70e 	lsl.w	r7, r7, lr
 8009364:	433c      	orrs	r4, r7
 8009366:	f843 4b04 	str.w	r4, [r3], #4
 800936a:	f852 4b04 	ldr.w	r4, [r2], #4
 800936e:	40cc      	lsrs	r4, r1
 8009370:	e7ea      	b.n	8009348 <rshift+0x3c>
 8009372:	462b      	mov	r3, r5
 8009374:	e7ed      	b.n	8009352 <rshift+0x46>

08009376 <__hexdig_fun>:
 8009376:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800937a:	2b09      	cmp	r3, #9
 800937c:	d802      	bhi.n	8009384 <__hexdig_fun+0xe>
 800937e:	3820      	subs	r0, #32
 8009380:	b2c0      	uxtb	r0, r0
 8009382:	4770      	bx	lr
 8009384:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009388:	2b05      	cmp	r3, #5
 800938a:	d801      	bhi.n	8009390 <__hexdig_fun+0x1a>
 800938c:	3847      	subs	r0, #71	; 0x47
 800938e:	e7f7      	b.n	8009380 <__hexdig_fun+0xa>
 8009390:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009394:	2b05      	cmp	r3, #5
 8009396:	d801      	bhi.n	800939c <__hexdig_fun+0x26>
 8009398:	3827      	subs	r0, #39	; 0x27
 800939a:	e7f1      	b.n	8009380 <__hexdig_fun+0xa>
 800939c:	2000      	movs	r0, #0
 800939e:	4770      	bx	lr

080093a0 <__gethex>:
 80093a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a4:	b08b      	sub	sp, #44	; 0x2c
 80093a6:	9002      	str	r0, [sp, #8]
 80093a8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80093aa:	468a      	mov	sl, r1
 80093ac:	4690      	mov	r8, r2
 80093ae:	9306      	str	r3, [sp, #24]
 80093b0:	f7fd fdc0 	bl	8006f34 <__localeconv_l>
 80093b4:	6803      	ldr	r3, [r0, #0]
 80093b6:	f04f 0b00 	mov.w	fp, #0
 80093ba:	4618      	mov	r0, r3
 80093bc:	9303      	str	r3, [sp, #12]
 80093be:	f7f6 fed1 	bl	8000164 <strlen>
 80093c2:	9b03      	ldr	r3, [sp, #12]
 80093c4:	9001      	str	r0, [sp, #4]
 80093c6:	4403      	add	r3, r0
 80093c8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80093cc:	9307      	str	r3, [sp, #28]
 80093ce:	f8da 3000 	ldr.w	r3, [sl]
 80093d2:	3302      	adds	r3, #2
 80093d4:	461f      	mov	r7, r3
 80093d6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80093da:	2830      	cmp	r0, #48	; 0x30
 80093dc:	d06c      	beq.n	80094b8 <__gethex+0x118>
 80093de:	f7ff ffca 	bl	8009376 <__hexdig_fun>
 80093e2:	4604      	mov	r4, r0
 80093e4:	2800      	cmp	r0, #0
 80093e6:	d16a      	bne.n	80094be <__gethex+0x11e>
 80093e8:	9a01      	ldr	r2, [sp, #4]
 80093ea:	9903      	ldr	r1, [sp, #12]
 80093ec:	4638      	mov	r0, r7
 80093ee:	f000 fc49 	bl	8009c84 <strncmp>
 80093f2:	2800      	cmp	r0, #0
 80093f4:	d166      	bne.n	80094c4 <__gethex+0x124>
 80093f6:	9b01      	ldr	r3, [sp, #4]
 80093f8:	5cf8      	ldrb	r0, [r7, r3]
 80093fa:	18fe      	adds	r6, r7, r3
 80093fc:	f7ff ffbb 	bl	8009376 <__hexdig_fun>
 8009400:	2800      	cmp	r0, #0
 8009402:	d062      	beq.n	80094ca <__gethex+0x12a>
 8009404:	4633      	mov	r3, r6
 8009406:	7818      	ldrb	r0, [r3, #0]
 8009408:	461f      	mov	r7, r3
 800940a:	2830      	cmp	r0, #48	; 0x30
 800940c:	f103 0301 	add.w	r3, r3, #1
 8009410:	d0f9      	beq.n	8009406 <__gethex+0x66>
 8009412:	f7ff ffb0 	bl	8009376 <__hexdig_fun>
 8009416:	fab0 f580 	clz	r5, r0
 800941a:	4634      	mov	r4, r6
 800941c:	f04f 0b01 	mov.w	fp, #1
 8009420:	096d      	lsrs	r5, r5, #5
 8009422:	463a      	mov	r2, r7
 8009424:	4616      	mov	r6, r2
 8009426:	7830      	ldrb	r0, [r6, #0]
 8009428:	3201      	adds	r2, #1
 800942a:	f7ff ffa4 	bl	8009376 <__hexdig_fun>
 800942e:	2800      	cmp	r0, #0
 8009430:	d1f8      	bne.n	8009424 <__gethex+0x84>
 8009432:	9a01      	ldr	r2, [sp, #4]
 8009434:	9903      	ldr	r1, [sp, #12]
 8009436:	4630      	mov	r0, r6
 8009438:	f000 fc24 	bl	8009c84 <strncmp>
 800943c:	b950      	cbnz	r0, 8009454 <__gethex+0xb4>
 800943e:	b954      	cbnz	r4, 8009456 <__gethex+0xb6>
 8009440:	9b01      	ldr	r3, [sp, #4]
 8009442:	18f4      	adds	r4, r6, r3
 8009444:	4622      	mov	r2, r4
 8009446:	4616      	mov	r6, r2
 8009448:	7830      	ldrb	r0, [r6, #0]
 800944a:	3201      	adds	r2, #1
 800944c:	f7ff ff93 	bl	8009376 <__hexdig_fun>
 8009450:	2800      	cmp	r0, #0
 8009452:	d1f8      	bne.n	8009446 <__gethex+0xa6>
 8009454:	b10c      	cbz	r4, 800945a <__gethex+0xba>
 8009456:	1ba4      	subs	r4, r4, r6
 8009458:	00a4      	lsls	r4, r4, #2
 800945a:	7833      	ldrb	r3, [r6, #0]
 800945c:	2b50      	cmp	r3, #80	; 0x50
 800945e:	d001      	beq.n	8009464 <__gethex+0xc4>
 8009460:	2b70      	cmp	r3, #112	; 0x70
 8009462:	d140      	bne.n	80094e6 <__gethex+0x146>
 8009464:	7873      	ldrb	r3, [r6, #1]
 8009466:	2b2b      	cmp	r3, #43	; 0x2b
 8009468:	d035      	beq.n	80094d6 <__gethex+0x136>
 800946a:	2b2d      	cmp	r3, #45	; 0x2d
 800946c:	d02f      	beq.n	80094ce <__gethex+0x12e>
 800946e:	f04f 0900 	mov.w	r9, #0
 8009472:	1c71      	adds	r1, r6, #1
 8009474:	7808      	ldrb	r0, [r1, #0]
 8009476:	f7ff ff7e 	bl	8009376 <__hexdig_fun>
 800947a:	1e43      	subs	r3, r0, #1
 800947c:	b2db      	uxtb	r3, r3
 800947e:	2b18      	cmp	r3, #24
 8009480:	d831      	bhi.n	80094e6 <__gethex+0x146>
 8009482:	f1a0 0210 	sub.w	r2, r0, #16
 8009486:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800948a:	f7ff ff74 	bl	8009376 <__hexdig_fun>
 800948e:	1e43      	subs	r3, r0, #1
 8009490:	b2db      	uxtb	r3, r3
 8009492:	2b18      	cmp	r3, #24
 8009494:	d922      	bls.n	80094dc <__gethex+0x13c>
 8009496:	f1b9 0f00 	cmp.w	r9, #0
 800949a:	d000      	beq.n	800949e <__gethex+0xfe>
 800949c:	4252      	negs	r2, r2
 800949e:	4414      	add	r4, r2
 80094a0:	f8ca 1000 	str.w	r1, [sl]
 80094a4:	b30d      	cbz	r5, 80094ea <__gethex+0x14a>
 80094a6:	f1bb 0f00 	cmp.w	fp, #0
 80094aa:	bf14      	ite	ne
 80094ac:	2700      	movne	r7, #0
 80094ae:	2706      	moveq	r7, #6
 80094b0:	4638      	mov	r0, r7
 80094b2:	b00b      	add	sp, #44	; 0x2c
 80094b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094b8:	f10b 0b01 	add.w	fp, fp, #1
 80094bc:	e78a      	b.n	80093d4 <__gethex+0x34>
 80094be:	2500      	movs	r5, #0
 80094c0:	462c      	mov	r4, r5
 80094c2:	e7ae      	b.n	8009422 <__gethex+0x82>
 80094c4:	463e      	mov	r6, r7
 80094c6:	2501      	movs	r5, #1
 80094c8:	e7c7      	b.n	800945a <__gethex+0xba>
 80094ca:	4604      	mov	r4, r0
 80094cc:	e7fb      	b.n	80094c6 <__gethex+0x126>
 80094ce:	f04f 0901 	mov.w	r9, #1
 80094d2:	1cb1      	adds	r1, r6, #2
 80094d4:	e7ce      	b.n	8009474 <__gethex+0xd4>
 80094d6:	f04f 0900 	mov.w	r9, #0
 80094da:	e7fa      	b.n	80094d2 <__gethex+0x132>
 80094dc:	230a      	movs	r3, #10
 80094de:	fb03 0202 	mla	r2, r3, r2, r0
 80094e2:	3a10      	subs	r2, #16
 80094e4:	e7cf      	b.n	8009486 <__gethex+0xe6>
 80094e6:	4631      	mov	r1, r6
 80094e8:	e7da      	b.n	80094a0 <__gethex+0x100>
 80094ea:	4629      	mov	r1, r5
 80094ec:	1bf3      	subs	r3, r6, r7
 80094ee:	3b01      	subs	r3, #1
 80094f0:	2b07      	cmp	r3, #7
 80094f2:	dc49      	bgt.n	8009588 <__gethex+0x1e8>
 80094f4:	9802      	ldr	r0, [sp, #8]
 80094f6:	f7fd ff99 	bl	800742c <_Balloc>
 80094fa:	f04f 0b00 	mov.w	fp, #0
 80094fe:	4605      	mov	r5, r0
 8009500:	46da      	mov	sl, fp
 8009502:	9b01      	ldr	r3, [sp, #4]
 8009504:	f100 0914 	add.w	r9, r0, #20
 8009508:	f1c3 0301 	rsb	r3, r3, #1
 800950c:	f8cd 9010 	str.w	r9, [sp, #16]
 8009510:	9308      	str	r3, [sp, #32]
 8009512:	42b7      	cmp	r7, r6
 8009514:	d33b      	bcc.n	800958e <__gethex+0x1ee>
 8009516:	9804      	ldr	r0, [sp, #16]
 8009518:	f840 ab04 	str.w	sl, [r0], #4
 800951c:	eba0 0009 	sub.w	r0, r0, r9
 8009520:	1080      	asrs	r0, r0, #2
 8009522:	6128      	str	r0, [r5, #16]
 8009524:	0147      	lsls	r7, r0, #5
 8009526:	4650      	mov	r0, sl
 8009528:	f7fe f844 	bl	80075b4 <__hi0bits>
 800952c:	f8d8 6000 	ldr.w	r6, [r8]
 8009530:	1a3f      	subs	r7, r7, r0
 8009532:	42b7      	cmp	r7, r6
 8009534:	dd64      	ble.n	8009600 <__gethex+0x260>
 8009536:	1bbf      	subs	r7, r7, r6
 8009538:	4639      	mov	r1, r7
 800953a:	4628      	mov	r0, r5
 800953c:	f7fe fb3d 	bl	8007bba <__any_on>
 8009540:	4682      	mov	sl, r0
 8009542:	b178      	cbz	r0, 8009564 <__gethex+0x1c4>
 8009544:	f04f 0a01 	mov.w	sl, #1
 8009548:	1e7b      	subs	r3, r7, #1
 800954a:	1159      	asrs	r1, r3, #5
 800954c:	f003 021f 	and.w	r2, r3, #31
 8009550:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009554:	fa0a f202 	lsl.w	r2, sl, r2
 8009558:	420a      	tst	r2, r1
 800955a:	d003      	beq.n	8009564 <__gethex+0x1c4>
 800955c:	4553      	cmp	r3, sl
 800955e:	dc46      	bgt.n	80095ee <__gethex+0x24e>
 8009560:	f04f 0a02 	mov.w	sl, #2
 8009564:	4639      	mov	r1, r7
 8009566:	4628      	mov	r0, r5
 8009568:	f7ff fed0 	bl	800930c <rshift>
 800956c:	443c      	add	r4, r7
 800956e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009572:	429c      	cmp	r4, r3
 8009574:	dd52      	ble.n	800961c <__gethex+0x27c>
 8009576:	4629      	mov	r1, r5
 8009578:	9802      	ldr	r0, [sp, #8]
 800957a:	f7fd ff8b 	bl	8007494 <_Bfree>
 800957e:	2300      	movs	r3, #0
 8009580:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009582:	27a3      	movs	r7, #163	; 0xa3
 8009584:	6013      	str	r3, [r2, #0]
 8009586:	e793      	b.n	80094b0 <__gethex+0x110>
 8009588:	3101      	adds	r1, #1
 800958a:	105b      	asrs	r3, r3, #1
 800958c:	e7b0      	b.n	80094f0 <__gethex+0x150>
 800958e:	1e73      	subs	r3, r6, #1
 8009590:	9305      	str	r3, [sp, #20]
 8009592:	9a07      	ldr	r2, [sp, #28]
 8009594:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009598:	4293      	cmp	r3, r2
 800959a:	d018      	beq.n	80095ce <__gethex+0x22e>
 800959c:	f1bb 0f20 	cmp.w	fp, #32
 80095a0:	d107      	bne.n	80095b2 <__gethex+0x212>
 80095a2:	9b04      	ldr	r3, [sp, #16]
 80095a4:	f8c3 a000 	str.w	sl, [r3]
 80095a8:	f04f 0a00 	mov.w	sl, #0
 80095ac:	46d3      	mov	fp, sl
 80095ae:	3304      	adds	r3, #4
 80095b0:	9304      	str	r3, [sp, #16]
 80095b2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80095b6:	f7ff fede 	bl	8009376 <__hexdig_fun>
 80095ba:	f000 000f 	and.w	r0, r0, #15
 80095be:	fa00 f00b 	lsl.w	r0, r0, fp
 80095c2:	ea4a 0a00 	orr.w	sl, sl, r0
 80095c6:	f10b 0b04 	add.w	fp, fp, #4
 80095ca:	9b05      	ldr	r3, [sp, #20]
 80095cc:	e00d      	b.n	80095ea <__gethex+0x24a>
 80095ce:	9b05      	ldr	r3, [sp, #20]
 80095d0:	9a08      	ldr	r2, [sp, #32]
 80095d2:	4413      	add	r3, r2
 80095d4:	429f      	cmp	r7, r3
 80095d6:	d8e1      	bhi.n	800959c <__gethex+0x1fc>
 80095d8:	4618      	mov	r0, r3
 80095da:	9a01      	ldr	r2, [sp, #4]
 80095dc:	9903      	ldr	r1, [sp, #12]
 80095de:	9309      	str	r3, [sp, #36]	; 0x24
 80095e0:	f000 fb50 	bl	8009c84 <strncmp>
 80095e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095e6:	2800      	cmp	r0, #0
 80095e8:	d1d8      	bne.n	800959c <__gethex+0x1fc>
 80095ea:	461e      	mov	r6, r3
 80095ec:	e791      	b.n	8009512 <__gethex+0x172>
 80095ee:	1eb9      	subs	r1, r7, #2
 80095f0:	4628      	mov	r0, r5
 80095f2:	f7fe fae2 	bl	8007bba <__any_on>
 80095f6:	2800      	cmp	r0, #0
 80095f8:	d0b2      	beq.n	8009560 <__gethex+0x1c0>
 80095fa:	f04f 0a03 	mov.w	sl, #3
 80095fe:	e7b1      	b.n	8009564 <__gethex+0x1c4>
 8009600:	da09      	bge.n	8009616 <__gethex+0x276>
 8009602:	1bf7      	subs	r7, r6, r7
 8009604:	4629      	mov	r1, r5
 8009606:	463a      	mov	r2, r7
 8009608:	9802      	ldr	r0, [sp, #8]
 800960a:	f7fe f905 	bl	8007818 <__lshift>
 800960e:	4605      	mov	r5, r0
 8009610:	1be4      	subs	r4, r4, r7
 8009612:	f100 0914 	add.w	r9, r0, #20
 8009616:	f04f 0a00 	mov.w	sl, #0
 800961a:	e7a8      	b.n	800956e <__gethex+0x1ce>
 800961c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009620:	4284      	cmp	r4, r0
 8009622:	da6b      	bge.n	80096fc <__gethex+0x35c>
 8009624:	1b04      	subs	r4, r0, r4
 8009626:	42a6      	cmp	r6, r4
 8009628:	dc2e      	bgt.n	8009688 <__gethex+0x2e8>
 800962a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800962e:	2b02      	cmp	r3, #2
 8009630:	d022      	beq.n	8009678 <__gethex+0x2d8>
 8009632:	2b03      	cmp	r3, #3
 8009634:	d024      	beq.n	8009680 <__gethex+0x2e0>
 8009636:	2b01      	cmp	r3, #1
 8009638:	d115      	bne.n	8009666 <__gethex+0x2c6>
 800963a:	42a6      	cmp	r6, r4
 800963c:	d113      	bne.n	8009666 <__gethex+0x2c6>
 800963e:	2e01      	cmp	r6, #1
 8009640:	dc0b      	bgt.n	800965a <__gethex+0x2ba>
 8009642:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009646:	9a06      	ldr	r2, [sp, #24]
 8009648:	2762      	movs	r7, #98	; 0x62
 800964a:	6013      	str	r3, [r2, #0]
 800964c:	2301      	movs	r3, #1
 800964e:	612b      	str	r3, [r5, #16]
 8009650:	f8c9 3000 	str.w	r3, [r9]
 8009654:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009656:	601d      	str	r5, [r3, #0]
 8009658:	e72a      	b.n	80094b0 <__gethex+0x110>
 800965a:	1e71      	subs	r1, r6, #1
 800965c:	4628      	mov	r0, r5
 800965e:	f7fe faac 	bl	8007bba <__any_on>
 8009662:	2800      	cmp	r0, #0
 8009664:	d1ed      	bne.n	8009642 <__gethex+0x2a2>
 8009666:	4629      	mov	r1, r5
 8009668:	9802      	ldr	r0, [sp, #8]
 800966a:	f7fd ff13 	bl	8007494 <_Bfree>
 800966e:	2300      	movs	r3, #0
 8009670:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009672:	2750      	movs	r7, #80	; 0x50
 8009674:	6013      	str	r3, [r2, #0]
 8009676:	e71b      	b.n	80094b0 <__gethex+0x110>
 8009678:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800967a:	2b00      	cmp	r3, #0
 800967c:	d0e1      	beq.n	8009642 <__gethex+0x2a2>
 800967e:	e7f2      	b.n	8009666 <__gethex+0x2c6>
 8009680:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1dd      	bne.n	8009642 <__gethex+0x2a2>
 8009686:	e7ee      	b.n	8009666 <__gethex+0x2c6>
 8009688:	1e67      	subs	r7, r4, #1
 800968a:	f1ba 0f00 	cmp.w	sl, #0
 800968e:	d132      	bne.n	80096f6 <__gethex+0x356>
 8009690:	b127      	cbz	r7, 800969c <__gethex+0x2fc>
 8009692:	4639      	mov	r1, r7
 8009694:	4628      	mov	r0, r5
 8009696:	f7fe fa90 	bl	8007bba <__any_on>
 800969a:	4682      	mov	sl, r0
 800969c:	2301      	movs	r3, #1
 800969e:	117a      	asrs	r2, r7, #5
 80096a0:	f007 071f 	and.w	r7, r7, #31
 80096a4:	fa03 f707 	lsl.w	r7, r3, r7
 80096a8:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80096ac:	4621      	mov	r1, r4
 80096ae:	421f      	tst	r7, r3
 80096b0:	f04f 0702 	mov.w	r7, #2
 80096b4:	4628      	mov	r0, r5
 80096b6:	bf18      	it	ne
 80096b8:	f04a 0a02 	orrne.w	sl, sl, #2
 80096bc:	1b36      	subs	r6, r6, r4
 80096be:	f7ff fe25 	bl	800930c <rshift>
 80096c2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80096c6:	f1ba 0f00 	cmp.w	sl, #0
 80096ca:	d045      	beq.n	8009758 <__gethex+0x3b8>
 80096cc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	d015      	beq.n	8009700 <__gethex+0x360>
 80096d4:	2b03      	cmp	r3, #3
 80096d6:	d017      	beq.n	8009708 <__gethex+0x368>
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d109      	bne.n	80096f0 <__gethex+0x350>
 80096dc:	f01a 0f02 	tst.w	sl, #2
 80096e0:	d006      	beq.n	80096f0 <__gethex+0x350>
 80096e2:	f8d9 3000 	ldr.w	r3, [r9]
 80096e6:	ea4a 0a03 	orr.w	sl, sl, r3
 80096ea:	f01a 0f01 	tst.w	sl, #1
 80096ee:	d10e      	bne.n	800970e <__gethex+0x36e>
 80096f0:	f047 0710 	orr.w	r7, r7, #16
 80096f4:	e030      	b.n	8009758 <__gethex+0x3b8>
 80096f6:	f04f 0a01 	mov.w	sl, #1
 80096fa:	e7cf      	b.n	800969c <__gethex+0x2fc>
 80096fc:	2701      	movs	r7, #1
 80096fe:	e7e2      	b.n	80096c6 <__gethex+0x326>
 8009700:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009702:	f1c3 0301 	rsb	r3, r3, #1
 8009706:	9315      	str	r3, [sp, #84]	; 0x54
 8009708:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800970a:	2b00      	cmp	r3, #0
 800970c:	d0f0      	beq.n	80096f0 <__gethex+0x350>
 800970e:	2000      	movs	r0, #0
 8009710:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009714:	f105 0314 	add.w	r3, r5, #20
 8009718:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800971c:	eb03 010a 	add.w	r1, r3, sl
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009726:	d01c      	beq.n	8009762 <__gethex+0x3c2>
 8009728:	3201      	adds	r2, #1
 800972a:	601a      	str	r2, [r3, #0]
 800972c:	2f02      	cmp	r7, #2
 800972e:	f105 0314 	add.w	r3, r5, #20
 8009732:	d138      	bne.n	80097a6 <__gethex+0x406>
 8009734:	f8d8 2000 	ldr.w	r2, [r8]
 8009738:	3a01      	subs	r2, #1
 800973a:	4296      	cmp	r6, r2
 800973c:	d10a      	bne.n	8009754 <__gethex+0x3b4>
 800973e:	2201      	movs	r2, #1
 8009740:	1171      	asrs	r1, r6, #5
 8009742:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009746:	f006 061f 	and.w	r6, r6, #31
 800974a:	fa02 f606 	lsl.w	r6, r2, r6
 800974e:	421e      	tst	r6, r3
 8009750:	bf18      	it	ne
 8009752:	4617      	movne	r7, r2
 8009754:	f047 0720 	orr.w	r7, r7, #32
 8009758:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800975a:	601d      	str	r5, [r3, #0]
 800975c:	9b06      	ldr	r3, [sp, #24]
 800975e:	601c      	str	r4, [r3, #0]
 8009760:	e6a6      	b.n	80094b0 <__gethex+0x110>
 8009762:	f843 0b04 	str.w	r0, [r3], #4
 8009766:	4299      	cmp	r1, r3
 8009768:	d8da      	bhi.n	8009720 <__gethex+0x380>
 800976a:	68ab      	ldr	r3, [r5, #8]
 800976c:	4599      	cmp	r9, r3
 800976e:	db12      	blt.n	8009796 <__gethex+0x3f6>
 8009770:	6869      	ldr	r1, [r5, #4]
 8009772:	9802      	ldr	r0, [sp, #8]
 8009774:	3101      	adds	r1, #1
 8009776:	f7fd fe59 	bl	800742c <_Balloc>
 800977a:	4683      	mov	fp, r0
 800977c:	692a      	ldr	r2, [r5, #16]
 800977e:	f105 010c 	add.w	r1, r5, #12
 8009782:	3202      	adds	r2, #2
 8009784:	0092      	lsls	r2, r2, #2
 8009786:	300c      	adds	r0, #12
 8009788:	f7fa ffa2 	bl	80046d0 <memcpy>
 800978c:	4629      	mov	r1, r5
 800978e:	9802      	ldr	r0, [sp, #8]
 8009790:	f7fd fe80 	bl	8007494 <_Bfree>
 8009794:	465d      	mov	r5, fp
 8009796:	692b      	ldr	r3, [r5, #16]
 8009798:	1c5a      	adds	r2, r3, #1
 800979a:	612a      	str	r2, [r5, #16]
 800979c:	2201      	movs	r2, #1
 800979e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80097a2:	615a      	str	r2, [r3, #20]
 80097a4:	e7c2      	b.n	800972c <__gethex+0x38c>
 80097a6:	692a      	ldr	r2, [r5, #16]
 80097a8:	4591      	cmp	r9, r2
 80097aa:	da0b      	bge.n	80097c4 <__gethex+0x424>
 80097ac:	2101      	movs	r1, #1
 80097ae:	4628      	mov	r0, r5
 80097b0:	f7ff fdac 	bl	800930c <rshift>
 80097b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80097b8:	3401      	adds	r4, #1
 80097ba:	429c      	cmp	r4, r3
 80097bc:	f73f aedb 	bgt.w	8009576 <__gethex+0x1d6>
 80097c0:	2701      	movs	r7, #1
 80097c2:	e7c7      	b.n	8009754 <__gethex+0x3b4>
 80097c4:	f016 061f 	ands.w	r6, r6, #31
 80097c8:	d0fa      	beq.n	80097c0 <__gethex+0x420>
 80097ca:	449a      	add	sl, r3
 80097cc:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80097d0:	f7fd fef0 	bl	80075b4 <__hi0bits>
 80097d4:	f1c6 0620 	rsb	r6, r6, #32
 80097d8:	42b0      	cmp	r0, r6
 80097da:	dbe7      	blt.n	80097ac <__gethex+0x40c>
 80097dc:	e7f0      	b.n	80097c0 <__gethex+0x420>

080097de <L_shift>:
 80097de:	f1c2 0208 	rsb	r2, r2, #8
 80097e2:	0092      	lsls	r2, r2, #2
 80097e4:	b570      	push	{r4, r5, r6, lr}
 80097e6:	f1c2 0620 	rsb	r6, r2, #32
 80097ea:	6843      	ldr	r3, [r0, #4]
 80097ec:	6804      	ldr	r4, [r0, #0]
 80097ee:	fa03 f506 	lsl.w	r5, r3, r6
 80097f2:	432c      	orrs	r4, r5
 80097f4:	40d3      	lsrs	r3, r2
 80097f6:	6004      	str	r4, [r0, #0]
 80097f8:	f840 3f04 	str.w	r3, [r0, #4]!
 80097fc:	4288      	cmp	r0, r1
 80097fe:	d3f4      	bcc.n	80097ea <L_shift+0xc>
 8009800:	bd70      	pop	{r4, r5, r6, pc}

08009802 <__match>:
 8009802:	b530      	push	{r4, r5, lr}
 8009804:	6803      	ldr	r3, [r0, #0]
 8009806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800980a:	3301      	adds	r3, #1
 800980c:	b914      	cbnz	r4, 8009814 <__match+0x12>
 800980e:	6003      	str	r3, [r0, #0]
 8009810:	2001      	movs	r0, #1
 8009812:	bd30      	pop	{r4, r5, pc}
 8009814:	781a      	ldrb	r2, [r3, #0]
 8009816:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800981a:	2d19      	cmp	r5, #25
 800981c:	bf98      	it	ls
 800981e:	3220      	addls	r2, #32
 8009820:	42a2      	cmp	r2, r4
 8009822:	d0f0      	beq.n	8009806 <__match+0x4>
 8009824:	2000      	movs	r0, #0
 8009826:	bd30      	pop	{r4, r5, pc}

08009828 <__hexnan>:
 8009828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800982c:	2500      	movs	r5, #0
 800982e:	680b      	ldr	r3, [r1, #0]
 8009830:	4682      	mov	sl, r0
 8009832:	115f      	asrs	r7, r3, #5
 8009834:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009838:	f013 031f 	ands.w	r3, r3, #31
 800983c:	bf18      	it	ne
 800983e:	3704      	addne	r7, #4
 8009840:	1f3e      	subs	r6, r7, #4
 8009842:	4690      	mov	r8, r2
 8009844:	46b1      	mov	r9, r6
 8009846:	4634      	mov	r4, r6
 8009848:	46ab      	mov	fp, r5
 800984a:	b087      	sub	sp, #28
 800984c:	6801      	ldr	r1, [r0, #0]
 800984e:	9302      	str	r3, [sp, #8]
 8009850:	f847 5c04 	str.w	r5, [r7, #-4]
 8009854:	9501      	str	r5, [sp, #4]
 8009856:	784a      	ldrb	r2, [r1, #1]
 8009858:	1c4b      	adds	r3, r1, #1
 800985a:	9303      	str	r3, [sp, #12]
 800985c:	b342      	cbz	r2, 80098b0 <__hexnan+0x88>
 800985e:	4610      	mov	r0, r2
 8009860:	9105      	str	r1, [sp, #20]
 8009862:	9204      	str	r2, [sp, #16]
 8009864:	f7ff fd87 	bl	8009376 <__hexdig_fun>
 8009868:	2800      	cmp	r0, #0
 800986a:	d143      	bne.n	80098f4 <__hexnan+0xcc>
 800986c:	9a04      	ldr	r2, [sp, #16]
 800986e:	9905      	ldr	r1, [sp, #20]
 8009870:	2a20      	cmp	r2, #32
 8009872:	d818      	bhi.n	80098a6 <__hexnan+0x7e>
 8009874:	9b01      	ldr	r3, [sp, #4]
 8009876:	459b      	cmp	fp, r3
 8009878:	dd13      	ble.n	80098a2 <__hexnan+0x7a>
 800987a:	454c      	cmp	r4, r9
 800987c:	d206      	bcs.n	800988c <__hexnan+0x64>
 800987e:	2d07      	cmp	r5, #7
 8009880:	dc04      	bgt.n	800988c <__hexnan+0x64>
 8009882:	462a      	mov	r2, r5
 8009884:	4649      	mov	r1, r9
 8009886:	4620      	mov	r0, r4
 8009888:	f7ff ffa9 	bl	80097de <L_shift>
 800988c:	4544      	cmp	r4, r8
 800988e:	d944      	bls.n	800991a <__hexnan+0xf2>
 8009890:	2300      	movs	r3, #0
 8009892:	f1a4 0904 	sub.w	r9, r4, #4
 8009896:	f844 3c04 	str.w	r3, [r4, #-4]
 800989a:	461d      	mov	r5, r3
 800989c:	464c      	mov	r4, r9
 800989e:	f8cd b004 	str.w	fp, [sp, #4]
 80098a2:	9903      	ldr	r1, [sp, #12]
 80098a4:	e7d7      	b.n	8009856 <__hexnan+0x2e>
 80098a6:	2a29      	cmp	r2, #41	; 0x29
 80098a8:	d14a      	bne.n	8009940 <__hexnan+0x118>
 80098aa:	3102      	adds	r1, #2
 80098ac:	f8ca 1000 	str.w	r1, [sl]
 80098b0:	f1bb 0f00 	cmp.w	fp, #0
 80098b4:	d044      	beq.n	8009940 <__hexnan+0x118>
 80098b6:	454c      	cmp	r4, r9
 80098b8:	d206      	bcs.n	80098c8 <__hexnan+0xa0>
 80098ba:	2d07      	cmp	r5, #7
 80098bc:	dc04      	bgt.n	80098c8 <__hexnan+0xa0>
 80098be:	462a      	mov	r2, r5
 80098c0:	4649      	mov	r1, r9
 80098c2:	4620      	mov	r0, r4
 80098c4:	f7ff ff8b 	bl	80097de <L_shift>
 80098c8:	4544      	cmp	r4, r8
 80098ca:	d928      	bls.n	800991e <__hexnan+0xf6>
 80098cc:	4643      	mov	r3, r8
 80098ce:	f854 2b04 	ldr.w	r2, [r4], #4
 80098d2:	42a6      	cmp	r6, r4
 80098d4:	f843 2b04 	str.w	r2, [r3], #4
 80098d8:	d2f9      	bcs.n	80098ce <__hexnan+0xa6>
 80098da:	2200      	movs	r2, #0
 80098dc:	f843 2b04 	str.w	r2, [r3], #4
 80098e0:	429e      	cmp	r6, r3
 80098e2:	d2fb      	bcs.n	80098dc <__hexnan+0xb4>
 80098e4:	6833      	ldr	r3, [r6, #0]
 80098e6:	b91b      	cbnz	r3, 80098f0 <__hexnan+0xc8>
 80098e8:	4546      	cmp	r6, r8
 80098ea:	d127      	bne.n	800993c <__hexnan+0x114>
 80098ec:	2301      	movs	r3, #1
 80098ee:	6033      	str	r3, [r6, #0]
 80098f0:	2005      	movs	r0, #5
 80098f2:	e026      	b.n	8009942 <__hexnan+0x11a>
 80098f4:	3501      	adds	r5, #1
 80098f6:	2d08      	cmp	r5, #8
 80098f8:	f10b 0b01 	add.w	fp, fp, #1
 80098fc:	dd06      	ble.n	800990c <__hexnan+0xe4>
 80098fe:	4544      	cmp	r4, r8
 8009900:	d9cf      	bls.n	80098a2 <__hexnan+0x7a>
 8009902:	2300      	movs	r3, #0
 8009904:	2501      	movs	r5, #1
 8009906:	f844 3c04 	str.w	r3, [r4, #-4]
 800990a:	3c04      	subs	r4, #4
 800990c:	6822      	ldr	r2, [r4, #0]
 800990e:	f000 000f 	and.w	r0, r0, #15
 8009912:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009916:	6020      	str	r0, [r4, #0]
 8009918:	e7c3      	b.n	80098a2 <__hexnan+0x7a>
 800991a:	2508      	movs	r5, #8
 800991c:	e7c1      	b.n	80098a2 <__hexnan+0x7a>
 800991e:	9b02      	ldr	r3, [sp, #8]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d0df      	beq.n	80098e4 <__hexnan+0xbc>
 8009924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009928:	f1c3 0320 	rsb	r3, r3, #32
 800992c:	fa22 f303 	lsr.w	r3, r2, r3
 8009930:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009934:	401a      	ands	r2, r3
 8009936:	f847 2c04 	str.w	r2, [r7, #-4]
 800993a:	e7d3      	b.n	80098e4 <__hexnan+0xbc>
 800993c:	3e04      	subs	r6, #4
 800993e:	e7d1      	b.n	80098e4 <__hexnan+0xbc>
 8009940:	2004      	movs	r0, #4
 8009942:	b007      	add	sp, #28
 8009944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009948 <__retarget_lock_acquire_recursive>:
 8009948:	4770      	bx	lr

0800994a <__retarget_lock_release_recursive>:
 800994a:	4770      	bx	lr

0800994c <memmove>:
 800994c:	4288      	cmp	r0, r1
 800994e:	b510      	push	{r4, lr}
 8009950:	eb01 0302 	add.w	r3, r1, r2
 8009954:	d803      	bhi.n	800995e <memmove+0x12>
 8009956:	1e42      	subs	r2, r0, #1
 8009958:	4299      	cmp	r1, r3
 800995a:	d10c      	bne.n	8009976 <memmove+0x2a>
 800995c:	bd10      	pop	{r4, pc}
 800995e:	4298      	cmp	r0, r3
 8009960:	d2f9      	bcs.n	8009956 <memmove+0xa>
 8009962:	1881      	adds	r1, r0, r2
 8009964:	1ad2      	subs	r2, r2, r3
 8009966:	42d3      	cmn	r3, r2
 8009968:	d100      	bne.n	800996c <memmove+0x20>
 800996a:	bd10      	pop	{r4, pc}
 800996c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009970:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009974:	e7f7      	b.n	8009966 <memmove+0x1a>
 8009976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800997a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800997e:	e7eb      	b.n	8009958 <memmove+0xc>

08009980 <_realloc_r>:
 8009980:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009984:	4682      	mov	sl, r0
 8009986:	460c      	mov	r4, r1
 8009988:	b929      	cbnz	r1, 8009996 <_realloc_r+0x16>
 800998a:	4611      	mov	r1, r2
 800998c:	b003      	add	sp, #12
 800998e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009992:	f7fd bae7 	b.w	8006f64 <_malloc_r>
 8009996:	9201      	str	r2, [sp, #4]
 8009998:	f7fd fd3c 	bl	8007414 <__malloc_lock>
 800999c:	9a01      	ldr	r2, [sp, #4]
 800999e:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80099a2:	f102 080b 	add.w	r8, r2, #11
 80099a6:	f1b8 0f16 	cmp.w	r8, #22
 80099aa:	f1a4 0908 	sub.w	r9, r4, #8
 80099ae:	f025 0603 	bic.w	r6, r5, #3
 80099b2:	d90a      	bls.n	80099ca <_realloc_r+0x4a>
 80099b4:	f038 0807 	bics.w	r8, r8, #7
 80099b8:	d509      	bpl.n	80099ce <_realloc_r+0x4e>
 80099ba:	230c      	movs	r3, #12
 80099bc:	2700      	movs	r7, #0
 80099be:	f8ca 3000 	str.w	r3, [sl]
 80099c2:	4638      	mov	r0, r7
 80099c4:	b003      	add	sp, #12
 80099c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ca:	f04f 0810 	mov.w	r8, #16
 80099ce:	4590      	cmp	r8, r2
 80099d0:	d3f3      	bcc.n	80099ba <_realloc_r+0x3a>
 80099d2:	45b0      	cmp	r8, r6
 80099d4:	f340 8148 	ble.w	8009c68 <_realloc_r+0x2e8>
 80099d8:	4ba9      	ldr	r3, [pc, #676]	; (8009c80 <_realloc_r+0x300>)
 80099da:	eb09 0106 	add.w	r1, r9, r6
 80099de:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80099e2:	469b      	mov	fp, r3
 80099e4:	4571      	cmp	r1, lr
 80099e6:	684b      	ldr	r3, [r1, #4]
 80099e8:	d005      	beq.n	80099f6 <_realloc_r+0x76>
 80099ea:	f023 0001 	bic.w	r0, r3, #1
 80099ee:	4408      	add	r0, r1
 80099f0:	6840      	ldr	r0, [r0, #4]
 80099f2:	07c7      	lsls	r7, r0, #31
 80099f4:	d447      	bmi.n	8009a86 <_realloc_r+0x106>
 80099f6:	f023 0303 	bic.w	r3, r3, #3
 80099fa:	4571      	cmp	r1, lr
 80099fc:	eb06 0703 	add.w	r7, r6, r3
 8009a00:	d119      	bne.n	8009a36 <_realloc_r+0xb6>
 8009a02:	f108 0010 	add.w	r0, r8, #16
 8009a06:	4287      	cmp	r7, r0
 8009a08:	db3f      	blt.n	8009a8a <_realloc_r+0x10a>
 8009a0a:	eba7 0708 	sub.w	r7, r7, r8
 8009a0e:	eb09 0308 	add.w	r3, r9, r8
 8009a12:	f047 0701 	orr.w	r7, r7, #1
 8009a16:	f8cb 3008 	str.w	r3, [fp, #8]
 8009a1a:	605f      	str	r7, [r3, #4]
 8009a1c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009a20:	4650      	mov	r0, sl
 8009a22:	f003 0301 	and.w	r3, r3, #1
 8009a26:	ea43 0308 	orr.w	r3, r3, r8
 8009a2a:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a2e:	f7fd fcf7 	bl	8007420 <__malloc_unlock>
 8009a32:	4627      	mov	r7, r4
 8009a34:	e7c5      	b.n	80099c2 <_realloc_r+0x42>
 8009a36:	45b8      	cmp	r8, r7
 8009a38:	dc27      	bgt.n	8009a8a <_realloc_r+0x10a>
 8009a3a:	68cb      	ldr	r3, [r1, #12]
 8009a3c:	688a      	ldr	r2, [r1, #8]
 8009a3e:	60d3      	str	r3, [r2, #12]
 8009a40:	609a      	str	r2, [r3, #8]
 8009a42:	eba7 0008 	sub.w	r0, r7, r8
 8009a46:	280f      	cmp	r0, #15
 8009a48:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009a4c:	eb09 0207 	add.w	r2, r9, r7
 8009a50:	f240 810c 	bls.w	8009c6c <_realloc_r+0x2ec>
 8009a54:	f003 0301 	and.w	r3, r3, #1
 8009a58:	eb09 0108 	add.w	r1, r9, r8
 8009a5c:	ea43 0308 	orr.w	r3, r3, r8
 8009a60:	f040 0001 	orr.w	r0, r0, #1
 8009a64:	f8c9 3004 	str.w	r3, [r9, #4]
 8009a68:	6048      	str	r0, [r1, #4]
 8009a6a:	6853      	ldr	r3, [r2, #4]
 8009a6c:	3108      	adds	r1, #8
 8009a6e:	f043 0301 	orr.w	r3, r3, #1
 8009a72:	6053      	str	r3, [r2, #4]
 8009a74:	4650      	mov	r0, sl
 8009a76:	f7ff fb8d 	bl	8009194 <_free_r>
 8009a7a:	4650      	mov	r0, sl
 8009a7c:	f7fd fcd0 	bl	8007420 <__malloc_unlock>
 8009a80:	f109 0708 	add.w	r7, r9, #8
 8009a84:	e79d      	b.n	80099c2 <_realloc_r+0x42>
 8009a86:	2300      	movs	r3, #0
 8009a88:	4619      	mov	r1, r3
 8009a8a:	07e8      	lsls	r0, r5, #31
 8009a8c:	f100 8085 	bmi.w	8009b9a <_realloc_r+0x21a>
 8009a90:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8009a94:	eba9 0505 	sub.w	r5, r9, r5
 8009a98:	6868      	ldr	r0, [r5, #4]
 8009a9a:	f020 0003 	bic.w	r0, r0, #3
 8009a9e:	4430      	add	r0, r6
 8009aa0:	2900      	cmp	r1, #0
 8009aa2:	d077      	beq.n	8009b94 <_realloc_r+0x214>
 8009aa4:	4571      	cmp	r1, lr
 8009aa6:	d151      	bne.n	8009b4c <_realloc_r+0x1cc>
 8009aa8:	4403      	add	r3, r0
 8009aaa:	f108 0110 	add.w	r1, r8, #16
 8009aae:	428b      	cmp	r3, r1
 8009ab0:	db70      	blt.n	8009b94 <_realloc_r+0x214>
 8009ab2:	462f      	mov	r7, r5
 8009ab4:	68ea      	ldr	r2, [r5, #12]
 8009ab6:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8009aba:	60ca      	str	r2, [r1, #12]
 8009abc:	6091      	str	r1, [r2, #8]
 8009abe:	1f32      	subs	r2, r6, #4
 8009ac0:	2a24      	cmp	r2, #36	; 0x24
 8009ac2:	d83c      	bhi.n	8009b3e <_realloc_r+0x1be>
 8009ac4:	2a13      	cmp	r2, #19
 8009ac6:	d937      	bls.n	8009b38 <_realloc_r+0x1b8>
 8009ac8:	6821      	ldr	r1, [r4, #0]
 8009aca:	2a1b      	cmp	r2, #27
 8009acc:	60a9      	str	r1, [r5, #8]
 8009ace:	6861      	ldr	r1, [r4, #4]
 8009ad0:	60e9      	str	r1, [r5, #12]
 8009ad2:	d81c      	bhi.n	8009b0e <_realloc_r+0x18e>
 8009ad4:	f105 0210 	add.w	r2, r5, #16
 8009ad8:	f104 0108 	add.w	r1, r4, #8
 8009adc:	6808      	ldr	r0, [r1, #0]
 8009ade:	6010      	str	r0, [r2, #0]
 8009ae0:	6848      	ldr	r0, [r1, #4]
 8009ae2:	6050      	str	r0, [r2, #4]
 8009ae4:	6889      	ldr	r1, [r1, #8]
 8009ae6:	6091      	str	r1, [r2, #8]
 8009ae8:	eba3 0308 	sub.w	r3, r3, r8
 8009aec:	eb05 0208 	add.w	r2, r5, r8
 8009af0:	f043 0301 	orr.w	r3, r3, #1
 8009af4:	f8cb 2008 	str.w	r2, [fp, #8]
 8009af8:	6053      	str	r3, [r2, #4]
 8009afa:	686b      	ldr	r3, [r5, #4]
 8009afc:	f003 0301 	and.w	r3, r3, #1
 8009b00:	ea43 0308 	orr.w	r3, r3, r8
 8009b04:	606b      	str	r3, [r5, #4]
 8009b06:	4650      	mov	r0, sl
 8009b08:	f7fd fc8a 	bl	8007420 <__malloc_unlock>
 8009b0c:	e759      	b.n	80099c2 <_realloc_r+0x42>
 8009b0e:	68a1      	ldr	r1, [r4, #8]
 8009b10:	2a24      	cmp	r2, #36	; 0x24
 8009b12:	6129      	str	r1, [r5, #16]
 8009b14:	68e1      	ldr	r1, [r4, #12]
 8009b16:	bf18      	it	ne
 8009b18:	f105 0218 	addne.w	r2, r5, #24
 8009b1c:	6169      	str	r1, [r5, #20]
 8009b1e:	bf09      	itett	eq
 8009b20:	6922      	ldreq	r2, [r4, #16]
 8009b22:	f104 0110 	addne.w	r1, r4, #16
 8009b26:	61aa      	streq	r2, [r5, #24]
 8009b28:	6960      	ldreq	r0, [r4, #20]
 8009b2a:	bf02      	ittt	eq
 8009b2c:	f105 0220 	addeq.w	r2, r5, #32
 8009b30:	f104 0118 	addeq.w	r1, r4, #24
 8009b34:	61e8      	streq	r0, [r5, #28]
 8009b36:	e7d1      	b.n	8009adc <_realloc_r+0x15c>
 8009b38:	463a      	mov	r2, r7
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	e7ce      	b.n	8009adc <_realloc_r+0x15c>
 8009b3e:	4621      	mov	r1, r4
 8009b40:	4638      	mov	r0, r7
 8009b42:	9301      	str	r3, [sp, #4]
 8009b44:	f7ff ff02 	bl	800994c <memmove>
 8009b48:	9b01      	ldr	r3, [sp, #4]
 8009b4a:	e7cd      	b.n	8009ae8 <_realloc_r+0x168>
 8009b4c:	18c7      	adds	r7, r0, r3
 8009b4e:	45b8      	cmp	r8, r7
 8009b50:	dc20      	bgt.n	8009b94 <_realloc_r+0x214>
 8009b52:	68cb      	ldr	r3, [r1, #12]
 8009b54:	688a      	ldr	r2, [r1, #8]
 8009b56:	60d3      	str	r3, [r2, #12]
 8009b58:	609a      	str	r2, [r3, #8]
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	68eb      	ldr	r3, [r5, #12]
 8009b5e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8009b62:	60d3      	str	r3, [r2, #12]
 8009b64:	609a      	str	r2, [r3, #8]
 8009b66:	1f32      	subs	r2, r6, #4
 8009b68:	2a24      	cmp	r2, #36	; 0x24
 8009b6a:	d843      	bhi.n	8009bf4 <_realloc_r+0x274>
 8009b6c:	2a13      	cmp	r2, #19
 8009b6e:	d93f      	bls.n	8009bf0 <_realloc_r+0x270>
 8009b70:	6823      	ldr	r3, [r4, #0]
 8009b72:	2a1b      	cmp	r2, #27
 8009b74:	60ab      	str	r3, [r5, #8]
 8009b76:	6863      	ldr	r3, [r4, #4]
 8009b78:	60eb      	str	r3, [r5, #12]
 8009b7a:	d824      	bhi.n	8009bc6 <_realloc_r+0x246>
 8009b7c:	f105 0010 	add.w	r0, r5, #16
 8009b80:	f104 0308 	add.w	r3, r4, #8
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	6002      	str	r2, [r0, #0]
 8009b88:	685a      	ldr	r2, [r3, #4]
 8009b8a:	6042      	str	r2, [r0, #4]
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	6083      	str	r3, [r0, #8]
 8009b90:	46a9      	mov	r9, r5
 8009b92:	e756      	b.n	8009a42 <_realloc_r+0xc2>
 8009b94:	4580      	cmp	r8, r0
 8009b96:	4607      	mov	r7, r0
 8009b98:	dddf      	ble.n	8009b5a <_realloc_r+0x1da>
 8009b9a:	4611      	mov	r1, r2
 8009b9c:	4650      	mov	r0, sl
 8009b9e:	f7fd f9e1 	bl	8006f64 <_malloc_r>
 8009ba2:	4607      	mov	r7, r0
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	d0ae      	beq.n	8009b06 <_realloc_r+0x186>
 8009ba8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009bac:	f1a0 0208 	sub.w	r2, r0, #8
 8009bb0:	f023 0301 	bic.w	r3, r3, #1
 8009bb4:	444b      	add	r3, r9
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d120      	bne.n	8009bfc <_realloc_r+0x27c>
 8009bba:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8009bbe:	f027 0703 	bic.w	r7, r7, #3
 8009bc2:	4437      	add	r7, r6
 8009bc4:	e73d      	b.n	8009a42 <_realloc_r+0xc2>
 8009bc6:	68a3      	ldr	r3, [r4, #8]
 8009bc8:	2a24      	cmp	r2, #36	; 0x24
 8009bca:	612b      	str	r3, [r5, #16]
 8009bcc:	68e3      	ldr	r3, [r4, #12]
 8009bce:	bf18      	it	ne
 8009bd0:	f105 0018 	addne.w	r0, r5, #24
 8009bd4:	616b      	str	r3, [r5, #20]
 8009bd6:	bf09      	itett	eq
 8009bd8:	6923      	ldreq	r3, [r4, #16]
 8009bda:	f104 0310 	addne.w	r3, r4, #16
 8009bde:	61ab      	streq	r3, [r5, #24]
 8009be0:	6962      	ldreq	r2, [r4, #20]
 8009be2:	bf02      	ittt	eq
 8009be4:	f105 0020 	addeq.w	r0, r5, #32
 8009be8:	f104 0318 	addeq.w	r3, r4, #24
 8009bec:	61ea      	streq	r2, [r5, #28]
 8009bee:	e7c9      	b.n	8009b84 <_realloc_r+0x204>
 8009bf0:	4623      	mov	r3, r4
 8009bf2:	e7c7      	b.n	8009b84 <_realloc_r+0x204>
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	f7ff fea9 	bl	800994c <memmove>
 8009bfa:	e7c9      	b.n	8009b90 <_realloc_r+0x210>
 8009bfc:	1f32      	subs	r2, r6, #4
 8009bfe:	2a24      	cmp	r2, #36	; 0x24
 8009c00:	d82e      	bhi.n	8009c60 <_realloc_r+0x2e0>
 8009c02:	2a13      	cmp	r2, #19
 8009c04:	d929      	bls.n	8009c5a <_realloc_r+0x2da>
 8009c06:	6823      	ldr	r3, [r4, #0]
 8009c08:	2a1b      	cmp	r2, #27
 8009c0a:	6003      	str	r3, [r0, #0]
 8009c0c:	6863      	ldr	r3, [r4, #4]
 8009c0e:	6043      	str	r3, [r0, #4]
 8009c10:	d80e      	bhi.n	8009c30 <_realloc_r+0x2b0>
 8009c12:	f100 0308 	add.w	r3, r0, #8
 8009c16:	f104 0208 	add.w	r2, r4, #8
 8009c1a:	6811      	ldr	r1, [r2, #0]
 8009c1c:	6019      	str	r1, [r3, #0]
 8009c1e:	6851      	ldr	r1, [r2, #4]
 8009c20:	6059      	str	r1, [r3, #4]
 8009c22:	6892      	ldr	r2, [r2, #8]
 8009c24:	609a      	str	r2, [r3, #8]
 8009c26:	4621      	mov	r1, r4
 8009c28:	4650      	mov	r0, sl
 8009c2a:	f7ff fab3 	bl	8009194 <_free_r>
 8009c2e:	e76a      	b.n	8009b06 <_realloc_r+0x186>
 8009c30:	68a3      	ldr	r3, [r4, #8]
 8009c32:	2a24      	cmp	r2, #36	; 0x24
 8009c34:	6083      	str	r3, [r0, #8]
 8009c36:	68e3      	ldr	r3, [r4, #12]
 8009c38:	bf18      	it	ne
 8009c3a:	f104 0210 	addne.w	r2, r4, #16
 8009c3e:	60c3      	str	r3, [r0, #12]
 8009c40:	bf09      	itett	eq
 8009c42:	6923      	ldreq	r3, [r4, #16]
 8009c44:	f100 0310 	addne.w	r3, r0, #16
 8009c48:	6103      	streq	r3, [r0, #16]
 8009c4a:	6961      	ldreq	r1, [r4, #20]
 8009c4c:	bf02      	ittt	eq
 8009c4e:	f100 0318 	addeq.w	r3, r0, #24
 8009c52:	f104 0218 	addeq.w	r2, r4, #24
 8009c56:	6141      	streq	r1, [r0, #20]
 8009c58:	e7df      	b.n	8009c1a <_realloc_r+0x29a>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	4622      	mov	r2, r4
 8009c5e:	e7dc      	b.n	8009c1a <_realloc_r+0x29a>
 8009c60:	4621      	mov	r1, r4
 8009c62:	f7ff fe73 	bl	800994c <memmove>
 8009c66:	e7de      	b.n	8009c26 <_realloc_r+0x2a6>
 8009c68:	4637      	mov	r7, r6
 8009c6a:	e6ea      	b.n	8009a42 <_realloc_r+0xc2>
 8009c6c:	f003 0301 	and.w	r3, r3, #1
 8009c70:	431f      	orrs	r7, r3
 8009c72:	f8c9 7004 	str.w	r7, [r9, #4]
 8009c76:	6853      	ldr	r3, [r2, #4]
 8009c78:	f043 0301 	orr.w	r3, r3, #1
 8009c7c:	6053      	str	r3, [r2, #4]
 8009c7e:	e6fc      	b.n	8009a7a <_realloc_r+0xfa>
 8009c80:	20000314 	.word	0x20000314

08009c84 <strncmp>:
 8009c84:	b510      	push	{r4, lr}
 8009c86:	b16a      	cbz	r2, 8009ca4 <strncmp+0x20>
 8009c88:	3901      	subs	r1, #1
 8009c8a:	1884      	adds	r4, r0, r2
 8009c8c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009c90:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d103      	bne.n	8009ca0 <strncmp+0x1c>
 8009c98:	42a0      	cmp	r0, r4
 8009c9a:	d001      	beq.n	8009ca0 <strncmp+0x1c>
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d1f5      	bne.n	8009c8c <strncmp+0x8>
 8009ca0:	1a98      	subs	r0, r3, r2
 8009ca2:	bd10      	pop	{r4, pc}
 8009ca4:	4610      	mov	r0, r2
 8009ca6:	bd10      	pop	{r4, pc}

08009ca8 <_sbrk>:
 8009ca8:	4b04      	ldr	r3, [pc, #16]	; (8009cbc <_sbrk+0x14>)
 8009caa:	4602      	mov	r2, r0
 8009cac:	6819      	ldr	r1, [r3, #0]
 8009cae:	b909      	cbnz	r1, 8009cb4 <_sbrk+0xc>
 8009cb0:	4903      	ldr	r1, [pc, #12]	; (8009cc0 <_sbrk+0x18>)
 8009cb2:	6019      	str	r1, [r3, #0]
 8009cb4:	6818      	ldr	r0, [r3, #0]
 8009cb6:	4402      	add	r2, r0
 8009cb8:	601a      	str	r2, [r3, #0]
 8009cba:	4770      	bx	lr
 8009cbc:	20001208 	.word	0x20001208
 8009cc0:	20001240 	.word	0x20001240

08009cc4 <_init>:
 8009cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc6:	bf00      	nop
 8009cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cca:	bc08      	pop	{r3}
 8009ccc:	469e      	mov	lr, r3
 8009cce:	4770      	bx	lr

08009cd0 <_fini>:
 8009cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd2:	bf00      	nop
 8009cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cd6:	bc08      	pop	{r3}
 8009cd8:	469e      	mov	lr, r3
 8009cda:	4770      	bx	lr
