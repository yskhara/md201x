
md201x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aca8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  0800adb8  0800adb8  0001adb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000000a8  0800b3a4  0800b3a4  0001b3a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000001e0  0800b44c  0800b44c  0001b44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  0800b62c  0800b62c  0001b62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800b634  0800b634  0001b634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000724  20000000  0800b638  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000b18  20000728  0800bd5c  00020728  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  20001240  0800bd5c  00021240  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  00020724  2**0
                  CONTENTS, READONLY
 11 .debug_info   000202ae  00000000  00000000  0002074d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004660  00000000  00000000  000409fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000071f0  00000000  00000000  0004505b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b70  00000000  00000000  0004c250  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c98  00000000  00000000  0004cdc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00006fca  00000000  00000000  0004da58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000477a  00000000  00000000  00054a22  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0005919c  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003544  00000000  00000000  00059218  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         00000030  00000000  00000000  0005c8a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000014b  00000000  00000000  0005c75c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000728 	.word	0x20000728
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ada0 	.word	0x0800ada0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000072c 	.word	0x2000072c
 800014c:	0800ada0 	.word	0x0800ada0

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f092 0f00 	teq	r2, #0
 800045e:	bf14      	ite	ne
 8000460:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 7460 	mov.w	r4, #896	; 0x380
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000474:	e720      	b.n	80002b8 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_ul2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f04f 0500 	mov.w	r5, #0
 8000486:	e00a      	b.n	800049e <__aeabi_l2d+0x16>

08000488 <__aeabi_l2d>:
 8000488:	ea50 0201 	orrs.w	r2, r0, r1
 800048c:	bf08      	it	eq
 800048e:	4770      	bxeq	lr
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000496:	d502      	bpl.n	800049e <__aeabi_l2d+0x16>
 8000498:	4240      	negs	r0, r0
 800049a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800049e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004aa:	f43f aedc 	beq.w	8000266 <__adddf3+0xe6>
 80004ae:	f04f 0203 	mov.w	r2, #3
 80004b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b6:	bf18      	it	ne
 80004b8:	3203      	addne	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004c6:	f1c2 0320 	rsb	r3, r2, #32
 80004ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004d6:	ea40 000e 	orr.w	r0, r0, lr
 80004da:	fa21 f102 	lsr.w	r1, r1, r2
 80004de:	4414      	add	r4, r2
 80004e0:	e6c1      	b.n	8000266 <__adddf3+0xe6>
 80004e2:	bf00      	nop

080004e4 <__aeabi_dmul>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f2:	bf1d      	ittte	ne
 80004f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f8:	ea94 0f0c 	teqne	r4, ip
 80004fc:	ea95 0f0c 	teqne	r5, ip
 8000500:	f000 f8de 	bleq	80006c0 <__aeabi_dmul+0x1dc>
 8000504:	442c      	add	r4, r5
 8000506:	ea81 0603 	eor.w	r6, r1, r3
 800050a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800050e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000512:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000516:	bf18      	it	ne
 8000518:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800051c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000524:	d038      	beq.n	8000598 <__aeabi_dmul+0xb4>
 8000526:	fba0 ce02 	umull	ip, lr, r0, r2
 800052a:	f04f 0500 	mov.w	r5, #0
 800052e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000532:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000536:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053a:	f04f 0600 	mov.w	r6, #0
 800053e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000542:	f09c 0f00 	teq	ip, #0
 8000546:	bf18      	it	ne
 8000548:	f04e 0e01 	orrne.w	lr, lr, #1
 800054c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000550:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000554:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000558:	d204      	bcs.n	8000564 <__aeabi_dmul+0x80>
 800055a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800055e:	416d      	adcs	r5, r5
 8000560:	eb46 0606 	adc.w	r6, r6, r6
 8000564:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000568:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800056c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000570:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000574:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000578:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800057c:	bf88      	it	hi
 800057e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000582:	d81e      	bhi.n	80005c2 <__aeabi_dmul+0xde>
 8000584:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	bd70      	pop	{r4, r5, r6, pc}
 8000598:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800059c:	ea46 0101 	orr.w	r1, r6, r1
 80005a0:	ea40 0002 	orr.w	r0, r0, r2
 80005a4:	ea81 0103 	eor.w	r1, r1, r3
 80005a8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005ac:	bfc2      	ittt	gt
 80005ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005b6:	bd70      	popgt	{r4, r5, r6, pc}
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f04f 0e00 	mov.w	lr, #0
 80005c0:	3c01      	subs	r4, #1
 80005c2:	f300 80ab 	bgt.w	800071c <__aeabi_dmul+0x238>
 80005c6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ca:	bfde      	ittt	le
 80005cc:	2000      	movle	r0, #0
 80005ce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d2:	bd70      	pople	{r4, r5, r6, pc}
 80005d4:	f1c4 0400 	rsb	r4, r4, #0
 80005d8:	3c20      	subs	r4, #32
 80005da:	da35      	bge.n	8000648 <__aeabi_dmul+0x164>
 80005dc:	340c      	adds	r4, #12
 80005de:	dc1b      	bgt.n	8000618 <__aeabi_dmul+0x134>
 80005e0:	f104 0414 	add.w	r4, r4, #20
 80005e4:	f1c4 0520 	rsb	r5, r4, #32
 80005e8:	fa00 f305 	lsl.w	r3, r0, r5
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f205 	lsl.w	r2, r1, r5
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000600:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000604:	fa21 f604 	lsr.w	r6, r1, r4
 8000608:	eb42 0106 	adc.w	r1, r2, r6
 800060c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000610:	bf08      	it	eq
 8000612:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f1c4 040c 	rsb	r4, r4, #12
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f304 	lsl.w	r3, r0, r4
 8000624:	fa20 f005 	lsr.w	r0, r0, r5
 8000628:	fa01 f204 	lsl.w	r2, r1, r4
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000638:	f141 0100 	adc.w	r1, r1, #0
 800063c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000640:	bf08      	it	eq
 8000642:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000646:	bd70      	pop	{r4, r5, r6, pc}
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f205 	lsl.w	r2, r0, r5
 8000650:	ea4e 0e02 	orr.w	lr, lr, r2
 8000654:	fa20 f304 	lsr.w	r3, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea43 0302 	orr.w	r3, r3, r2
 8000660:	fa21 f004 	lsr.w	r0, r1, r4
 8000664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000668:	fa21 f204 	lsr.w	r2, r1, r4
 800066c:	ea20 0002 	bic.w	r0, r0, r2
 8000670:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f094 0f00 	teq	r4, #0
 8000684:	d10f      	bne.n	80006a6 <__aeabi_dmul+0x1c2>
 8000686:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068a:	0040      	lsls	r0, r0, #1
 800068c:	eb41 0101 	adc.w	r1, r1, r1
 8000690:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3c01      	subeq	r4, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1a6>
 800069a:	ea41 0106 	orr.w	r1, r1, r6
 800069e:	f095 0f00 	teq	r5, #0
 80006a2:	bf18      	it	ne
 80006a4:	4770      	bxne	lr
 80006a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006aa:	0052      	lsls	r2, r2, #1
 80006ac:	eb43 0303 	adc.w	r3, r3, r3
 80006b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b4:	bf08      	it	eq
 80006b6:	3d01      	subeq	r5, #1
 80006b8:	d0f7      	beq.n	80006aa <__aeabi_dmul+0x1c6>
 80006ba:	ea43 0306 	orr.w	r3, r3, r6
 80006be:	4770      	bx	lr
 80006c0:	ea94 0f0c 	teq	r4, ip
 80006c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c8:	bf18      	it	ne
 80006ca:	ea95 0f0c 	teqne	r5, ip
 80006ce:	d00c      	beq.n	80006ea <__aeabi_dmul+0x206>
 80006d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d4:	bf18      	it	ne
 80006d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006da:	d1d1      	bne.n	8000680 <__aeabi_dmul+0x19c>
 80006dc:	ea81 0103 	eor.w	r1, r1, r3
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	f04f 0000 	mov.w	r0, #0
 80006e8:	bd70      	pop	{r4, r5, r6, pc}
 80006ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ee:	bf06      	itte	eq
 80006f0:	4610      	moveq	r0, r2
 80006f2:	4619      	moveq	r1, r3
 80006f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f8:	d019      	beq.n	800072e <__aeabi_dmul+0x24a>
 80006fa:	ea94 0f0c 	teq	r4, ip
 80006fe:	d102      	bne.n	8000706 <__aeabi_dmul+0x222>
 8000700:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000704:	d113      	bne.n	800072e <__aeabi_dmul+0x24a>
 8000706:	ea95 0f0c 	teq	r5, ip
 800070a:	d105      	bne.n	8000718 <__aeabi_dmul+0x234>
 800070c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000710:	bf1c      	itt	ne
 8000712:	4610      	movne	r0, r2
 8000714:	4619      	movne	r1, r3
 8000716:	d10a      	bne.n	800072e <__aeabi_dmul+0x24a>
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000720:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd70      	pop	{r4, r5, r6, pc}
 800072e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000732:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000736:	bd70      	pop	{r4, r5, r6, pc}

08000738 <__aeabi_ddiv>:
 8000738:	b570      	push	{r4, r5, r6, lr}
 800073a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800073e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000742:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000746:	bf1d      	ittte	ne
 8000748:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800074c:	ea94 0f0c 	teqne	r4, ip
 8000750:	ea95 0f0c 	teqne	r5, ip
 8000754:	f000 f8a7 	bleq	80008a6 <__aeabi_ddiv+0x16e>
 8000758:	eba4 0405 	sub.w	r4, r4, r5
 800075c:	ea81 0e03 	eor.w	lr, r1, r3
 8000760:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000764:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000768:	f000 8088 	beq.w	800087c <__aeabi_ddiv+0x144>
 800076c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000770:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000774:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000778:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800077c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000780:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000784:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000788:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800078c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000790:	429d      	cmp	r5, r3
 8000792:	bf08      	it	eq
 8000794:	4296      	cmpeq	r6, r2
 8000796:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800079e:	d202      	bcs.n	80007a6 <__aeabi_ddiv+0x6e>
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	1ab6      	subs	r6, r6, r2
 80007a8:	eb65 0503 	sbc.w	r5, r5, r3
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80007be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c2:	bf22      	ittt	cs
 80007c4:	1ab6      	subcs	r6, r6, r2
 80007c6:	4675      	movcs	r5, lr
 80007c8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007cc:	085b      	lsrs	r3, r3, #1
 80007ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007da:	bf22      	ittt	cs
 80007dc:	1ab6      	subcs	r6, r6, r2
 80007de:	4675      	movcs	r5, lr
 80007e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f2:	bf22      	ittt	cs
 80007f4:	1ab6      	subcs	r6, r6, r2
 80007f6:	4675      	movcs	r5, lr
 80007f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	ebb6 0e02 	subs.w	lr, r6, r2
 8000806:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080a:	bf22      	ittt	cs
 800080c:	1ab6      	subcs	r6, r6, r2
 800080e:	4675      	movcs	r5, lr
 8000810:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000814:	ea55 0e06 	orrs.w	lr, r5, r6
 8000818:	d018      	beq.n	800084c <__aeabi_ddiv+0x114>
 800081a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800081e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000822:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000826:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800082e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000832:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000836:	d1c0      	bne.n	80007ba <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	d10b      	bne.n	8000856 <__aeabi_ddiv+0x11e>
 800083e:	ea41 0100 	orr.w	r1, r1, r0
 8000842:	f04f 0000 	mov.w	r0, #0
 8000846:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084a:	e7b6      	b.n	80007ba <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	bf04      	itt	eq
 8000852:	4301      	orreq	r1, r0
 8000854:	2000      	moveq	r0, #0
 8000856:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085a:	bf88      	it	hi
 800085c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000860:	f63f aeaf 	bhi.w	80005c2 <__aeabi_dmul+0xde>
 8000864:	ebb5 0c03 	subs.w	ip, r5, r3
 8000868:	bf04      	itt	eq
 800086a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800086e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000872:	f150 0000 	adcs.w	r0, r0, #0
 8000876:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000880:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000884:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000888:	bfc2      	ittt	gt
 800088a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800088e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000892:	bd70      	popgt	{r4, r5, r6, pc}
 8000894:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000898:	f04f 0e00 	mov.w	lr, #0
 800089c:	3c01      	subs	r4, #1
 800089e:	e690      	b.n	80005c2 <__aeabi_dmul+0xde>
 80008a0:	ea45 0e06 	orr.w	lr, r5, r6
 80008a4:	e68d      	b.n	80005c2 <__aeabi_dmul+0xde>
 80008a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008aa:	ea94 0f0c 	teq	r4, ip
 80008ae:	bf08      	it	eq
 80008b0:	ea95 0f0c 	teqeq	r5, ip
 80008b4:	f43f af3b 	beq.w	800072e <__aeabi_dmul+0x24a>
 80008b8:	ea94 0f0c 	teq	r4, ip
 80008bc:	d10a      	bne.n	80008d4 <__aeabi_ddiv+0x19c>
 80008be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c2:	f47f af34 	bne.w	800072e <__aeabi_dmul+0x24a>
 80008c6:	ea95 0f0c 	teq	r5, ip
 80008ca:	f47f af25 	bne.w	8000718 <__aeabi_dmul+0x234>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e72c      	b.n	800072e <__aeabi_dmul+0x24a>
 80008d4:	ea95 0f0c 	teq	r5, ip
 80008d8:	d106      	bne.n	80008e8 <__aeabi_ddiv+0x1b0>
 80008da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008de:	f43f aefd 	beq.w	80006dc <__aeabi_dmul+0x1f8>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e722      	b.n	800072e <__aeabi_dmul+0x24a>
 80008e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008ec:	bf18      	it	ne
 80008ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f2:	f47f aec5 	bne.w	8000680 <__aeabi_dmul+0x19c>
 80008f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fa:	f47f af0d 	bne.w	8000718 <__aeabi_dmul+0x234>
 80008fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000902:	f47f aeeb 	bne.w	80006dc <__aeabi_dmul+0x1f8>
 8000906:	e712      	b.n	800072e <__aeabi_dmul+0x24a>

08000908 <__gedf2>:
 8000908:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800090c:	e006      	b.n	800091c <__cmpdf2+0x4>
 800090e:	bf00      	nop

08000910 <__ledf2>:
 8000910:	f04f 0c01 	mov.w	ip, #1
 8000914:	e002      	b.n	800091c <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__cmpdf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000920:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000928:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800092c:	bf18      	it	ne
 800092e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000932:	d01b      	beq.n	800096c <__cmpdf2+0x54>
 8000934:	b001      	add	sp, #4
 8000936:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093a:	bf0c      	ite	eq
 800093c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000940:	ea91 0f03 	teqne	r1, r3
 8000944:	bf02      	ittt	eq
 8000946:	ea90 0f02 	teqeq	r0, r2
 800094a:	2000      	moveq	r0, #0
 800094c:	4770      	bxeq	lr
 800094e:	f110 0f00 	cmn.w	r0, #0
 8000952:	ea91 0f03 	teq	r1, r3
 8000956:	bf58      	it	pl
 8000958:	4299      	cmppl	r1, r3
 800095a:	bf08      	it	eq
 800095c:	4290      	cmpeq	r0, r2
 800095e:	bf2c      	ite	cs
 8000960:	17d8      	asrcs	r0, r3, #31
 8000962:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000966:	f040 0001 	orr.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000970:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000974:	d102      	bne.n	800097c <__cmpdf2+0x64>
 8000976:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097a:	d107      	bne.n	800098c <__cmpdf2+0x74>
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	d1d6      	bne.n	8000934 <__cmpdf2+0x1c>
 8000986:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098a:	d0d3      	beq.n	8000934 <__cmpdf2+0x1c>
 800098c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <__aeabi_cdrcmple>:
 8000994:	4684      	mov	ip, r0
 8000996:	4610      	mov	r0, r2
 8000998:	4662      	mov	r2, ip
 800099a:	468c      	mov	ip, r1
 800099c:	4619      	mov	r1, r3
 800099e:	4663      	mov	r3, ip
 80009a0:	e000      	b.n	80009a4 <__aeabi_cdcmpeq>
 80009a2:	bf00      	nop

080009a4 <__aeabi_cdcmpeq>:
 80009a4:	b501      	push	{r0, lr}
 80009a6:	f7ff ffb7 	bl	8000918 <__cmpdf2>
 80009aa:	2800      	cmp	r0, #0
 80009ac:	bf48      	it	mi
 80009ae:	f110 0f00 	cmnmi.w	r0, #0
 80009b2:	bd01      	pop	{r0, pc}

080009b4 <__aeabi_dcmpeq>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff fff4 	bl	80009a4 <__aeabi_cdcmpeq>
 80009bc:	bf0c      	ite	eq
 80009be:	2001      	moveq	r0, #1
 80009c0:	2000      	movne	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmplt>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffea 	bl	80009a4 <__aeabi_cdcmpeq>
 80009d0:	bf34      	ite	cc
 80009d2:	2001      	movcc	r0, #1
 80009d4:	2000      	movcs	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmple>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffe0 	bl	80009a4 <__aeabi_cdcmpeq>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpge>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffce 	bl	8000994 <__aeabi_cdrcmple>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpgt>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffc4 	bl	8000994 <__aeabi_cdrcmple>
 8000a0c:	bf34      	ite	cc
 8000a0e:	2001      	movcc	r0, #1
 8000a10:	2000      	movcs	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpun>:
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__aeabi_dcmpun+0x10>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d10a      	bne.n	8000a3e <__aeabi_dcmpun+0x26>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__aeabi_dcmpun+0x20>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_dcmpun+0x26>
 8000a38:	f04f 0000 	mov.w	r0, #0
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0001 	mov.w	r0, #1
 8000a42:	4770      	bx	lr

08000a44 <__aeabi_d2iz>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a4c:	d215      	bcs.n	8000a7a <__aeabi_d2iz+0x36>
 8000a4e:	d511      	bpl.n	8000a74 <__aeabi_d2iz+0x30>
 8000a50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a58:	d912      	bls.n	8000a80 <__aeabi_d2iz+0x3c>
 8000a5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a6e:	bf18      	it	ne
 8000a70:	4240      	negne	r0, r0
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d105      	bne.n	8000a8c <__aeabi_d2iz+0x48>
 8000a80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a84:	bf08      	it	eq
 8000a86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2uiz>:
 8000a94:	004a      	lsls	r2, r1, #1
 8000a96:	d211      	bcs.n	8000abc <__aeabi_d2uiz+0x28>
 8000a98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a9c:	d211      	bcs.n	8000ac2 <__aeabi_d2uiz+0x2e>
 8000a9e:	d50d      	bpl.n	8000abc <__aeabi_d2uiz+0x28>
 8000aa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa8:	d40e      	bmi.n	8000ac8 <__aeabi_d2uiz+0x34>
 8000aaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ab6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac6:	d102      	bne.n	8000ace <__aeabi_d2uiz+0x3a>
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000acc:	4770      	bx	lr
 8000ace:	f04f 0000 	mov.w	r0, #0
 8000ad2:	4770      	bx	lr

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b88:	f001 b900 	b.w	8001d8c <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	468c      	mov	ip, r1
 8000baa:	460e      	mov	r6, r1
 8000bac:	4604      	mov	r4, r0
 8000bae:	9d08      	ldr	r5, [sp, #32]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d150      	bne.n	8000c56 <__udivmoddi4+0xb2>
 8000bb4:	428a      	cmp	r2, r1
 8000bb6:	4617      	mov	r7, r2
 8000bb8:	d96c      	bls.n	8000c94 <__udivmoddi4+0xf0>
 8000bba:	fab2 fe82 	clz	lr, r2
 8000bbe:	f1be 0f00 	cmp.w	lr, #0
 8000bc2:	d00b      	beq.n	8000bdc <__udivmoddi4+0x38>
 8000bc4:	f1ce 0c20 	rsb	ip, lr, #32
 8000bc8:	fa01 f60e 	lsl.w	r6, r1, lr
 8000bcc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bd0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000bd4:	ea4c 0c06 	orr.w	ip, ip, r6
 8000bd8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bdc:	0c3a      	lsrs	r2, r7, #16
 8000bde:	fbbc f9f2 	udiv	r9, ip, r2
 8000be2:	b2bb      	uxth	r3, r7
 8000be4:	fb02 cc19 	mls	ip, r2, r9, ip
 8000be8:	fb09 fa03 	mul.w	sl, r9, r3
 8000bec:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8000bf0:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8000bf4:	45b2      	cmp	sl, r6
 8000bf6:	d90a      	bls.n	8000c0e <__udivmoddi4+0x6a>
 8000bf8:	19f6      	adds	r6, r6, r7
 8000bfa:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
 8000bfe:	f080 8125 	bcs.w	8000e4c <__udivmoddi4+0x2a8>
 8000c02:	45b2      	cmp	sl, r6
 8000c04:	f240 8122 	bls.w	8000e4c <__udivmoddi4+0x2a8>
 8000c08:	f1a9 0902 	sub.w	r9, r9, #2
 8000c0c:	443e      	add	r6, r7
 8000c0e:	eba6 060a 	sub.w	r6, r6, sl
 8000c12:	fbb6 f0f2 	udiv	r0, r6, r2
 8000c16:	fb02 6610 	mls	r6, r2, r0, r6
 8000c1a:	fb00 f303 	mul.w	r3, r0, r3
 8000c1e:	b2a4      	uxth	r4, r4
 8000c20:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000c24:	42a3      	cmp	r3, r4
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x98>
 8000c28:	19e4      	adds	r4, r4, r7
 8000c2a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c2e:	f080 810b 	bcs.w	8000e48 <__udivmoddi4+0x2a4>
 8000c32:	42a3      	cmp	r3, r4
 8000c34:	f240 8108 	bls.w	8000e48 <__udivmoddi4+0x2a4>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	443c      	add	r4, r7
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	1ae4      	subs	r4, r4, r3
 8000c40:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c44:	2d00      	cmp	r5, #0
 8000c46:	d062      	beq.n	8000d0e <__udivmoddi4+0x16a>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c4e:	602c      	str	r4, [r5, #0]
 8000c50:	606b      	str	r3, [r5, #4]
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d907      	bls.n	8000c6a <__udivmoddi4+0xc6>
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d055      	beq.n	8000d0a <__udivmoddi4+0x166>
 8000c5e:	2100      	movs	r1, #0
 8000c60:	e885 0041 	stmia.w	r5, {r0, r6}
 8000c64:	4608      	mov	r0, r1
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	fab3 f183 	clz	r1, r3
 8000c6e:	2900      	cmp	r1, #0
 8000c70:	f040 808f 	bne.w	8000d92 <__udivmoddi4+0x1ee>
 8000c74:	42b3      	cmp	r3, r6
 8000c76:	d302      	bcc.n	8000c7e <__udivmoddi4+0xda>
 8000c78:	4282      	cmp	r2, r0
 8000c7a:	f200 80fc 	bhi.w	8000e76 <__udivmoddi4+0x2d2>
 8000c7e:	1a84      	subs	r4, r0, r2
 8000c80:	eb66 0603 	sbc.w	r6, r6, r3
 8000c84:	2001      	movs	r0, #1
 8000c86:	46b4      	mov	ip, r6
 8000c88:	2d00      	cmp	r5, #0
 8000c8a:	d040      	beq.n	8000d0e <__udivmoddi4+0x16a>
 8000c8c:	e885 1010 	stmia.w	r5, {r4, ip}
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	b912      	cbnz	r2, 8000c9c <__udivmoddi4+0xf8>
 8000c96:	2701      	movs	r7, #1
 8000c98:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c9c:	fab7 fe87 	clz	lr, r7
 8000ca0:	f1be 0f00 	cmp.w	lr, #0
 8000ca4:	d135      	bne.n	8000d12 <__udivmoddi4+0x16e>
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	1bf6      	subs	r6, r6, r7
 8000caa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000cae:	fa1f f887 	uxth.w	r8, r7
 8000cb2:	fbb6 f2fc 	udiv	r2, r6, ip
 8000cb6:	fb0c 6612 	mls	r6, ip, r2, r6
 8000cba:	fb08 f002 	mul.w	r0, r8, r2
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8000cc4:	42b0      	cmp	r0, r6
 8000cc6:	d907      	bls.n	8000cd8 <__udivmoddi4+0x134>
 8000cc8:	19f6      	adds	r6, r6, r7
 8000cca:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x132>
 8000cd0:	42b0      	cmp	r0, r6
 8000cd2:	f200 80d2 	bhi.w	8000e7a <__udivmoddi4+0x2d6>
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	1a36      	subs	r6, r6, r0
 8000cda:	fbb6 f0fc 	udiv	r0, r6, ip
 8000cde:	fb0c 6610 	mls	r6, ip, r0, r6
 8000ce2:	fb08 f800 	mul.w	r8, r8, r0
 8000ce6:	b2a3      	uxth	r3, r4
 8000ce8:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0x15c>
 8000cf0:	19e4      	adds	r4, r4, r7
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x15a>
 8000cf8:	45a0      	cmp	r8, r4
 8000cfa:	f200 80b9 	bhi.w	8000e70 <__udivmoddi4+0x2cc>
 8000cfe:	4618      	mov	r0, r3
 8000d00:	eba4 0408 	sub.w	r4, r4, r8
 8000d04:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000d08:	e79c      	b.n	8000c44 <__udivmoddi4+0xa0>
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	4628      	mov	r0, r5
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d16:	f1ce 0320 	rsb	r3, lr, #32
 8000d1a:	fa26 f203 	lsr.w	r2, r6, r3
 8000d1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000d22:	fbb2 f1fc 	udiv	r1, r2, ip
 8000d26:	fa1f f887 	uxth.w	r8, r7
 8000d2a:	fb0c 2211 	mls	r2, ip, r1, r2
 8000d2e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000d32:	fa20 f303 	lsr.w	r3, r0, r3
 8000d36:	fb01 f908 	mul.w	r9, r1, r8
 8000d3a:	4333      	orrs	r3, r6
 8000d3c:	0c1e      	lsrs	r6, r3, #16
 8000d3e:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000d42:	45b1      	cmp	r9, r6
 8000d44:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d48:	d909      	bls.n	8000d5e <__udivmoddi4+0x1ba>
 8000d4a:	19f6      	adds	r6, r6, r7
 8000d4c:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 8000d50:	f080 808c 	bcs.w	8000e6c <__udivmoddi4+0x2c8>
 8000d54:	45b1      	cmp	r9, r6
 8000d56:	f240 8089 	bls.w	8000e6c <__udivmoddi4+0x2c8>
 8000d5a:	3902      	subs	r1, #2
 8000d5c:	443e      	add	r6, r7
 8000d5e:	eba6 0609 	sub.w	r6, r6, r9
 8000d62:	fbb6 f0fc 	udiv	r0, r6, ip
 8000d66:	fb0c 6210 	mls	r2, ip, r0, r6
 8000d6a:	fb00 f908 	mul.w	r9, r0, r8
 8000d6e:	b29e      	uxth	r6, r3
 8000d70:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000d74:	45b1      	cmp	r9, r6
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0x1e4>
 8000d78:	19f6      	adds	r6, r6, r7
 8000d7a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7e:	d271      	bcs.n	8000e64 <__udivmoddi4+0x2c0>
 8000d80:	45b1      	cmp	r9, r6
 8000d82:	d96f      	bls.n	8000e64 <__udivmoddi4+0x2c0>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443e      	add	r6, r7
 8000d88:	eba6 0609 	sub.w	r6, r6, r9
 8000d8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d90:	e78f      	b.n	8000cb2 <__udivmoddi4+0x10e>
 8000d92:	f1c1 0720 	rsb	r7, r1, #32
 8000d96:	fa22 f807 	lsr.w	r8, r2, r7
 8000d9a:	408b      	lsls	r3, r1
 8000d9c:	ea48 0303 	orr.w	r3, r8, r3
 8000da0:	fa26 f407 	lsr.w	r4, r6, r7
 8000da4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8000da8:	fbb4 f9fe 	udiv	r9, r4, lr
 8000dac:	fa1f fc83 	uxth.w	ip, r3
 8000db0:	fb0e 4419 	mls	r4, lr, r9, r4
 8000db4:	408e      	lsls	r6, r1
 8000db6:	fa20 f807 	lsr.w	r8, r0, r7
 8000dba:	fb09 fa0c 	mul.w	sl, r9, ip
 8000dbe:	ea48 0806 	orr.w	r8, r8, r6
 8000dc2:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8000dc6:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8000dca:	45a2      	cmp	sl, r4
 8000dcc:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd0:	fa00 f601 	lsl.w	r6, r0, r1
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x244>
 8000dd6:	18e4      	adds	r4, r4, r3
 8000dd8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ddc:	d244      	bcs.n	8000e68 <__udivmoddi4+0x2c4>
 8000dde:	45a2      	cmp	sl, r4
 8000de0:	d942      	bls.n	8000e68 <__udivmoddi4+0x2c4>
 8000de2:	f1a9 0902 	sub.w	r9, r9, #2
 8000de6:	441c      	add	r4, r3
 8000de8:	eba4 040a 	sub.w	r4, r4, sl
 8000dec:	fbb4 f0fe 	udiv	r0, r4, lr
 8000df0:	fb0e 4410 	mls	r4, lr, r0, r4
 8000df4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000df8:	fa1f f888 	uxth.w	r8, r8
 8000dfc:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000e00:	45a4      	cmp	ip, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x270>
 8000e04:	18e4      	adds	r4, r4, r3
 8000e06:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
 8000e0a:	d229      	bcs.n	8000e60 <__udivmoddi4+0x2bc>
 8000e0c:	45a4      	cmp	ip, r4
 8000e0e:	d927      	bls.n	8000e60 <__udivmoddi4+0x2bc>
 8000e10:	3802      	subs	r0, #2
 8000e12:	441c      	add	r4, r3
 8000e14:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e18:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1c:	eba4 0c0c 	sub.w	ip, r4, ip
 8000e20:	45cc      	cmp	ip, r9
 8000e22:	46c2      	mov	sl, r8
 8000e24:	46ce      	mov	lr, r9
 8000e26:	d315      	bcc.n	8000e54 <__udivmoddi4+0x2b0>
 8000e28:	d012      	beq.n	8000e50 <__udivmoddi4+0x2ac>
 8000e2a:	b155      	cbz	r5, 8000e42 <__udivmoddi4+0x29e>
 8000e2c:	ebb6 030a 	subs.w	r3, r6, sl
 8000e30:	eb6c 060e 	sbc.w	r6, ip, lr
 8000e34:	fa06 f707 	lsl.w	r7, r6, r7
 8000e38:	40cb      	lsrs	r3, r1
 8000e3a:	431f      	orrs	r7, r3
 8000e3c:	40ce      	lsrs	r6, r1
 8000e3e:	602f      	str	r7, [r5, #0]
 8000e40:	606e      	str	r6, [r5, #4]
 8000e42:	2100      	movs	r1, #0
 8000e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e6f7      	b.n	8000c3c <__udivmoddi4+0x98>
 8000e4c:	4689      	mov	r9, r1
 8000e4e:	e6de      	b.n	8000c0e <__udivmoddi4+0x6a>
 8000e50:	4546      	cmp	r6, r8
 8000e52:	d2ea      	bcs.n	8000e2a <__udivmoddi4+0x286>
 8000e54:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e58:	eb69 0e03 	sbc.w	lr, r9, r3
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7e4      	b.n	8000e2a <__udivmoddi4+0x286>
 8000e60:	4670      	mov	r0, lr
 8000e62:	e7d7      	b.n	8000e14 <__udivmoddi4+0x270>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e78f      	b.n	8000d88 <__udivmoddi4+0x1e4>
 8000e68:	4681      	mov	r9, r0
 8000e6a:	e7bd      	b.n	8000de8 <__udivmoddi4+0x244>
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	e776      	b.n	8000d5e <__udivmoddi4+0x1ba>
 8000e70:	3802      	subs	r0, #2
 8000e72:	443c      	add	r4, r7
 8000e74:	e744      	b.n	8000d00 <__udivmoddi4+0x15c>
 8000e76:	4608      	mov	r0, r1
 8000e78:	e706      	b.n	8000c88 <__udivmoddi4+0xe4>
 8000e7a:	3a02      	subs	r2, #2
 8000e7c:	443e      	add	r6, r7
 8000e7e:	e72b      	b.n	8000cd8 <__udivmoddi4+0x134>

08000e80 <selfrel_offset31>:
 8000e80:	6803      	ldr	r3, [r0, #0]
 8000e82:	005a      	lsls	r2, r3, #1
 8000e84:	bf4c      	ite	mi
 8000e86:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000e8a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000e8e:	4418      	add	r0, r3
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <search_EIT_table>:
 8000e94:	b361      	cbz	r1, 8000ef0 <search_EIT_table+0x5c>
 8000e96:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e9a:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8000e9e:	4690      	mov	r8, r2
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	46d1      	mov	r9, sl
 8000ea4:	2700      	movs	r7, #0
 8000ea6:	eb07 0409 	add.w	r4, r7, r9
 8000eaa:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8000eae:	1064      	asrs	r4, r4, #1
 8000eb0:	00e5      	lsls	r5, r4, #3
 8000eb2:	1971      	adds	r1, r6, r5
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	f7ff ffe3 	bl	8000e80 <selfrel_offset31>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	4683      	mov	fp, r0
 8000ebe:	f105 0008 	add.w	r0, r5, #8
 8000ec2:	4430      	add	r0, r6
 8000ec4:	d009      	beq.n	8000eda <search_EIT_table+0x46>
 8000ec6:	f7ff ffdb 	bl	8000e80 <selfrel_offset31>
 8000eca:	45c3      	cmp	fp, r8
 8000ecc:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8000ed0:	d805      	bhi.n	8000ede <search_EIT_table+0x4a>
 8000ed2:	4540      	cmp	r0, r8
 8000ed4:	d209      	bcs.n	8000eea <search_EIT_table+0x56>
 8000ed6:	1c67      	adds	r7, r4, #1
 8000ed8:	e7e5      	b.n	8000ea6 <search_EIT_table+0x12>
 8000eda:	45c3      	cmp	fp, r8
 8000edc:	d905      	bls.n	8000eea <search_EIT_table+0x56>
 8000ede:	42a7      	cmp	r7, r4
 8000ee0:	d002      	beq.n	8000ee8 <search_EIT_table+0x54>
 8000ee2:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8000ee6:	e7de      	b.n	8000ea6 <search_EIT_table+0x12>
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4608      	mov	r0, r1
 8000eec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	4770      	bx	lr

08000ef4 <__gnu_unwind_get_pr_addr>:
 8000ef4:	2801      	cmp	r0, #1
 8000ef6:	d007      	beq.n	8000f08 <__gnu_unwind_get_pr_addr+0x14>
 8000ef8:	2802      	cmp	r0, #2
 8000efa:	d007      	beq.n	8000f0c <__gnu_unwind_get_pr_addr+0x18>
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <__gnu_unwind_get_pr_addr+0x1c>)
 8000efe:	2800      	cmp	r0, #0
 8000f00:	bf0c      	ite	eq
 8000f02:	4618      	moveq	r0, r3
 8000f04:	2000      	movne	r0, #0
 8000f06:	4770      	bx	lr
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <__gnu_unwind_get_pr_addr+0x20>)
 8000f0a:	4770      	bx	lr
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <__gnu_unwind_get_pr_addr+0x24>)
 8000f0e:	4770      	bx	lr
 8000f10:	08001605 	.word	0x08001605
 8000f14:	08001609 	.word	0x08001609
 8000f18:	0800160d 	.word	0x0800160d

08000f1c <get_eit_entry>:
 8000f1c:	b530      	push	{r4, r5, lr}
 8000f1e:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <get_eit_entry+0x98>)
 8000f20:	b083      	sub	sp, #12
 8000f22:	4604      	mov	r4, r0
 8000f24:	1e8d      	subs	r5, r1, #2
 8000f26:	b373      	cbz	r3, 8000f86 <get_eit_entry+0x6a>
 8000f28:	a901      	add	r1, sp, #4
 8000f2a:	4628      	mov	r0, r5
 8000f2c:	f3af 8000 	nop.w
 8000f30:	b318      	cbz	r0, 8000f7a <get_eit_entry+0x5e>
 8000f32:	9901      	ldr	r1, [sp, #4]
 8000f34:	462a      	mov	r2, r5
 8000f36:	f7ff ffad 	bl	8000e94 <search_EIT_table>
 8000f3a:	4601      	mov	r1, r0
 8000f3c:	b1e8      	cbz	r0, 8000f7a <get_eit_entry+0x5e>
 8000f3e:	f7ff ff9f 	bl	8000e80 <selfrel_offset31>
 8000f42:	684b      	ldr	r3, [r1, #4]
 8000f44:	64a0      	str	r0, [r4, #72]	; 0x48
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d011      	beq.n	8000f6e <get_eit_entry+0x52>
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	db22      	blt.n	8000f94 <get_eit_entry+0x78>
 8000f4e:	1d08      	adds	r0, r1, #4
 8000f50:	f7ff ff96 	bl	8000e80 <selfrel_offset31>
 8000f54:	2300      	movs	r3, #0
 8000f56:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000f58:	6523      	str	r3, [r4, #80]	; 0x50
 8000f5a:	6803      	ldr	r3, [r0, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	db1e      	blt.n	8000f9e <get_eit_entry+0x82>
 8000f60:	f7ff ff8e 	bl	8000e80 <selfrel_offset31>
 8000f64:	2300      	movs	r3, #0
 8000f66:	6120      	str	r0, [r4, #16]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	b003      	add	sp, #12
 8000f6c:	bd30      	pop	{r4, r5, pc}
 8000f6e:	2305      	movs	r3, #5
 8000f70:	2200      	movs	r2, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	6122      	str	r2, [r4, #16]
 8000f76:	b003      	add	sp, #12
 8000f78:	bd30      	pop	{r4, r5, pc}
 8000f7a:	2309      	movs	r3, #9
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	6122      	str	r2, [r4, #16]
 8000f82:	b003      	add	sp, #12
 8000f84:	bd30      	pop	{r4, r5, pc}
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <get_eit_entry+0x9c>)
 8000f88:	490c      	ldr	r1, [pc, #48]	; (8000fbc <get_eit_entry+0xa0>)
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	1ac9      	subs	r1, r1, r3
 8000f8e:	10c9      	asrs	r1, r1, #3
 8000f90:	9101      	str	r1, [sp, #4]
 8000f92:	e7cf      	b.n	8000f34 <get_eit_entry+0x18>
 8000f94:	2301      	movs	r3, #1
 8000f96:	1d08      	adds	r0, r1, #4
 8000f98:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000f9a:	6523      	str	r3, [r4, #80]	; 0x50
 8000f9c:	e7dd      	b.n	8000f5a <get_eit_entry+0x3e>
 8000f9e:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000fa2:	f7ff ffa7 	bl	8000ef4 <__gnu_unwind_get_pr_addr>
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	6120      	str	r0, [r4, #16]
 8000faa:	bf14      	ite	ne
 8000fac:	2300      	movne	r3, #0
 8000fae:	2309      	moveq	r3, #9
 8000fb0:	e7da      	b.n	8000f68 <get_eit_entry+0x4c>
 8000fb2:	bf00      	nop
 8000fb4:	00000000 	.word	0x00000000
 8000fb8:	0800b44c 	.word	0x0800b44c
 8000fbc:	0800b62c 	.word	0x0800b62c

08000fc0 <restore_non_core_regs>:
 8000fc0:	6803      	ldr	r3, [r0, #0]
 8000fc2:	b510      	push	{r4, lr}
 8000fc4:	07da      	lsls	r2, r3, #31
 8000fc6:	4604      	mov	r4, r0
 8000fc8:	d406      	bmi.n	8000fd8 <restore_non_core_regs+0x18>
 8000fca:	079b      	lsls	r3, r3, #30
 8000fcc:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000fd0:	d509      	bpl.n	8000fe6 <restore_non_core_regs+0x26>
 8000fd2:	f000 fc57 	bl	8001884 <__gnu_Unwind_Restore_VFP_D>
 8000fd6:	6823      	ldr	r3, [r4, #0]
 8000fd8:	0759      	lsls	r1, r3, #29
 8000fda:	d509      	bpl.n	8000ff0 <restore_non_core_regs+0x30>
 8000fdc:	071a      	lsls	r2, r3, #28
 8000fde:	d50e      	bpl.n	8000ffe <restore_non_core_regs+0x3e>
 8000fe0:	06db      	lsls	r3, r3, #27
 8000fe2:	d513      	bpl.n	800100c <restore_non_core_regs+0x4c>
 8000fe4:	bd10      	pop	{r4, pc}
 8000fe6:	f000 fc45 	bl	8001874 <__gnu_Unwind_Restore_VFP>
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	0759      	lsls	r1, r3, #29
 8000fee:	d4f5      	bmi.n	8000fdc <restore_non_core_regs+0x1c>
 8000ff0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000ff4:	f000 fc4e 	bl	8001894 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000ff8:	6823      	ldr	r3, [r4, #0]
 8000ffa:	071a      	lsls	r2, r3, #28
 8000ffc:	d4f0      	bmi.n	8000fe0 <restore_non_core_regs+0x20>
 8000ffe:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8001002:	f000 fc4f 	bl	80018a4 <__gnu_Unwind_Restore_WMMXD>
 8001006:	6823      	ldr	r3, [r4, #0]
 8001008:	06db      	lsls	r3, r3, #27
 800100a:	d4eb      	bmi.n	8000fe4 <restore_non_core_regs+0x24>
 800100c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8001010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001014:	f000 bc8a 	b.w	800192c <__gnu_Unwind_Restore_WMMXC>

08001018 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8001018:	6803      	ldr	r3, [r0, #0]
 800101a:	b103      	cbz	r3, 800101e <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 800101c:	4403      	add	r3, r0
 800101e:	4618      	mov	r0, r3
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <__gnu_unwind_24bit.isra.1>:
 8001024:	2009      	movs	r0, #9
 8001026:	4770      	bx	lr

08001028 <_Unwind_DebugHook>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <unwind_phase2>:
 800102c:	b570      	push	{r4, r5, r6, lr}
 800102e:	4604      	mov	r4, r0
 8001030:	460d      	mov	r5, r1
 8001032:	e008      	b.n	8001046 <unwind_phase2+0x1a>
 8001034:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001036:	6923      	ldr	r3, [r4, #16]
 8001038:	6162      	str	r2, [r4, #20]
 800103a:	4621      	mov	r1, r4
 800103c:	462a      	mov	r2, r5
 800103e:	2001      	movs	r0, #1
 8001040:	4798      	blx	r3
 8001042:	2808      	cmp	r0, #8
 8001044:	d108      	bne.n	8001058 <unwind_phase2+0x2c>
 8001046:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8001048:	4620      	mov	r0, r4
 800104a:	f7ff ff67 	bl	8000f1c <get_eit_entry>
 800104e:	4606      	mov	r6, r0
 8001050:	2800      	cmp	r0, #0
 8001052:	d0ef      	beq.n	8001034 <unwind_phase2+0x8>
 8001054:	f009 fe38 	bl	800acc8 <abort>
 8001058:	2807      	cmp	r0, #7
 800105a:	d1fb      	bne.n	8001054 <unwind_phase2+0x28>
 800105c:	4630      	mov	r0, r6
 800105e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8001060:	f7ff ffe2 	bl	8001028 <_Unwind_DebugHook>
 8001064:	1d28      	adds	r0, r5, #4
 8001066:	f000 fbf9 	bl	800185c <__restore_core_regs>
 800106a:	bf00      	nop

0800106c <unwind_phase2_forced>:
 800106c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001070:	4605      	mov	r5, r0
 8001072:	2700      	movs	r7, #0
 8001074:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8001078:	ac03      	add	r4, sp, #12
 800107a:	1d0e      	adds	r6, r1, #4
 800107c:	4692      	mov	sl, r2
 800107e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001082:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001084:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001086:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001088:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800108a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800108e:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8001092:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8001096:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800109a:	ac02      	add	r4, sp, #8
 800109c:	4628      	mov	r0, r5
 800109e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80010a0:	6027      	str	r7, [r4, #0]
 80010a2:	f7ff ff3b 	bl	8000f1c <get_eit_entry>
 80010a6:	f1ba 0f00 	cmp.w	sl, #0
 80010aa:	4607      	mov	r7, r0
 80010ac:	bf14      	ite	ne
 80010ae:	260a      	movne	r6, #10
 80010b0:	2609      	moveq	r6, #9
 80010b2:	b17f      	cbz	r7, 80010d4 <unwind_phase2_forced+0x68>
 80010b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80010b6:	f046 0110 	orr.w	r1, r6, #16
 80010ba:	e88d 0210 	stmia.w	sp, {r4, r9}
 80010be:	462a      	mov	r2, r5
 80010c0:	6463      	str	r3, [r4, #68]	; 0x44
 80010c2:	2001      	movs	r0, #1
 80010c4:	462b      	mov	r3, r5
 80010c6:	47c0      	blx	r8
 80010c8:	bb78      	cbnz	r0, 800112a <unwind_phase2_forced+0xbe>
 80010ca:	4638      	mov	r0, r7
 80010cc:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80010d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010d6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80010da:	616b      	str	r3, [r5, #20]
 80010dc:	4621      	mov	r1, r4
 80010de:	a87a      	add	r0, sp, #488	; 0x1e8
 80010e0:	f004 fb08 	bl	80056f4 <memcpy>
 80010e4:	692b      	ldr	r3, [r5, #16]
 80010e6:	aa7a      	add	r2, sp, #488	; 0x1e8
 80010e8:	4629      	mov	r1, r5
 80010ea:	4630      	mov	r0, r6
 80010ec:	4798      	blx	r3
 80010ee:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80010f0:	4682      	mov	sl, r0
 80010f2:	e88d 0210 	stmia.w	sp, {r4, r9}
 80010f6:	4631      	mov	r1, r6
 80010f8:	6463      	str	r3, [r4, #68]	; 0x44
 80010fa:	462a      	mov	r2, r5
 80010fc:	462b      	mov	r3, r5
 80010fe:	2001      	movs	r0, #1
 8001100:	47c0      	blx	r8
 8001102:	b990      	cbnz	r0, 800112a <unwind_phase2_forced+0xbe>
 8001104:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001108:	a97a      	add	r1, sp, #488	; 0x1e8
 800110a:	4620      	mov	r0, r4
 800110c:	f004 faf2 	bl	80056f4 <memcpy>
 8001110:	f1ba 0f08 	cmp.w	sl, #8
 8001114:	d106      	bne.n	8001124 <unwind_phase2_forced+0xb8>
 8001116:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001118:	4628      	mov	r0, r5
 800111a:	f7ff feff 	bl	8000f1c <get_eit_entry>
 800111e:	2609      	movs	r6, #9
 8001120:	4607      	mov	r7, r0
 8001122:	e7c6      	b.n	80010b2 <unwind_phase2_forced+0x46>
 8001124:	f1ba 0f07 	cmp.w	sl, #7
 8001128:	d005      	beq.n	8001136 <unwind_phase2_forced+0xca>
 800112a:	2709      	movs	r7, #9
 800112c:	4638      	mov	r0, r7
 800112e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8001132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001136:	4638      	mov	r0, r7
 8001138:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800113a:	f7ff ff75 	bl	8001028 <_Unwind_DebugHook>
 800113e:	a803      	add	r0, sp, #12
 8001140:	f000 fb8c 	bl	800185c <__restore_core_regs>

08001144 <_Unwind_GetCFA>:
 8001144:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8001146:	4770      	bx	lr

08001148 <__gnu_Unwind_RaiseException>:
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800114e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001150:	b0f9      	sub	sp, #484	; 0x1e4
 8001152:	640b      	str	r3, [r1, #64]	; 0x40
 8001154:	1d0e      	adds	r6, r1, #4
 8001156:	ad01      	add	r5, sp, #4
 8001158:	460f      	mov	r7, r1
 800115a:	4604      	mov	r4, r0
 800115c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800115e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001160:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001164:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001168:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800116c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001170:	f8cd e000 	str.w	lr, [sp]
 8001174:	e006      	b.n	8001184 <__gnu_Unwind_RaiseException+0x3c>
 8001176:	6923      	ldr	r3, [r4, #16]
 8001178:	466a      	mov	r2, sp
 800117a:	4621      	mov	r1, r4
 800117c:	4798      	blx	r3
 800117e:	2808      	cmp	r0, #8
 8001180:	4605      	mov	r5, r0
 8001182:	d108      	bne.n	8001196 <__gnu_Unwind_RaiseException+0x4e>
 8001184:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001186:	4620      	mov	r0, r4
 8001188:	f7ff fec8 	bl	8000f1c <get_eit_entry>
 800118c:	2800      	cmp	r0, #0
 800118e:	d0f2      	beq.n	8001176 <__gnu_Unwind_RaiseException+0x2e>
 8001190:	2009      	movs	r0, #9
 8001192:	b079      	add	sp, #484	; 0x1e4
 8001194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001196:	4668      	mov	r0, sp
 8001198:	f7ff ff12 	bl	8000fc0 <restore_non_core_regs>
 800119c:	2d06      	cmp	r5, #6
 800119e:	d1f7      	bne.n	8001190 <__gnu_Unwind_RaiseException+0x48>
 80011a0:	4639      	mov	r1, r7
 80011a2:	4620      	mov	r0, r4
 80011a4:	f7ff ff42 	bl	800102c <unwind_phase2>

080011a8 <__gnu_Unwind_ForcedUnwind>:
 80011a8:	b430      	push	{r4, r5}
 80011aa:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80011ac:	60c1      	str	r1, [r0, #12]
 80011ae:	6182      	str	r2, [r0, #24]
 80011b0:	4619      	mov	r1, r3
 80011b2:	641d      	str	r5, [r3, #64]	; 0x40
 80011b4:	2200      	movs	r2, #0
 80011b6:	bc30      	pop	{r4, r5}
 80011b8:	e758      	b.n	800106c <unwind_phase2_forced>
 80011ba:	bf00      	nop

080011bc <__gnu_Unwind_Resume>:
 80011bc:	b570      	push	{r4, r5, r6, lr}
 80011be:	6943      	ldr	r3, [r0, #20]
 80011c0:	68c6      	ldr	r6, [r0, #12]
 80011c2:	640b      	str	r3, [r1, #64]	; 0x40
 80011c4:	b126      	cbz	r6, 80011d0 <__gnu_Unwind_Resume+0x14>
 80011c6:	2201      	movs	r2, #1
 80011c8:	f7ff ff50 	bl	800106c <unwind_phase2_forced>
 80011cc:	f009 fd7c 	bl	800acc8 <abort>
 80011d0:	6903      	ldr	r3, [r0, #16]
 80011d2:	460a      	mov	r2, r1
 80011d4:	4604      	mov	r4, r0
 80011d6:	460d      	mov	r5, r1
 80011d8:	4601      	mov	r1, r0
 80011da:	2002      	movs	r0, #2
 80011dc:	4798      	blx	r3
 80011de:	2807      	cmp	r0, #7
 80011e0:	d007      	beq.n	80011f2 <__gnu_Unwind_Resume+0x36>
 80011e2:	2808      	cmp	r0, #8
 80011e4:	d103      	bne.n	80011ee <__gnu_Unwind_Resume+0x32>
 80011e6:	4629      	mov	r1, r5
 80011e8:	4620      	mov	r0, r4
 80011ea:	f7ff ff1f 	bl	800102c <unwind_phase2>
 80011ee:	f009 fd6b 	bl	800acc8 <abort>
 80011f2:	4630      	mov	r0, r6
 80011f4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80011f6:	f7ff ff17 	bl	8001028 <_Unwind_DebugHook>
 80011fa:	1d28      	adds	r0, r5, #4
 80011fc:	f000 fb2e 	bl	800185c <__restore_core_regs>

08001200 <__gnu_Unwind_Resume_or_Rethrow>:
 8001200:	68c2      	ldr	r2, [r0, #12]
 8001202:	b12a      	cbz	r2, 8001210 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8001204:	b410      	push	{r4}
 8001206:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8001208:	2200      	movs	r2, #0
 800120a:	640c      	str	r4, [r1, #64]	; 0x40
 800120c:	bc10      	pop	{r4}
 800120e:	e72d      	b.n	800106c <unwind_phase2_forced>
 8001210:	e79a      	b.n	8001148 <__gnu_Unwind_RaiseException>
 8001212:	bf00      	nop

08001214 <_Unwind_Complete>:
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop

08001218 <_Unwind_DeleteException>:
 8001218:	6883      	ldr	r3, [r0, #8]
 800121a:	b113      	cbz	r3, 8001222 <_Unwind_DeleteException+0xa>
 800121c:	4601      	mov	r1, r0
 800121e:	2001      	movs	r0, #1
 8001220:	4718      	bx	r3
 8001222:	4770      	bx	lr

08001224 <_Unwind_VRS_Get>:
 8001224:	b500      	push	{lr}
 8001226:	2904      	cmp	r1, #4
 8001228:	d807      	bhi.n	800123a <_Unwind_VRS_Get+0x16>
 800122a:	e8df f001 	tbb	[pc, r1]
 800122e:	0903      	.short	0x0903
 8001230:	0906      	.short	0x0906
 8001232:	09          	.byte	0x09
 8001233:	00          	.byte	0x00
 8001234:	b90b      	cbnz	r3, 800123a <_Unwind_VRS_Get+0x16>
 8001236:	2a0f      	cmp	r2, #15
 8001238:	d905      	bls.n	8001246 <_Unwind_VRS_Get+0x22>
 800123a:	2002      	movs	r0, #2
 800123c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001240:	2001      	movs	r0, #1
 8001242:	f85d fb04 	ldr.w	pc, [sp], #4
 8001246:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800124a:	6852      	ldr	r2, [r2, #4]
 800124c:	4618      	mov	r0, r3
 800124e:	9b01      	ldr	r3, [sp, #4]
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	f85d fb04 	ldr.w	pc, [sp], #4
 8001256:	bf00      	nop

08001258 <_Unwind_GetGR>:
 8001258:	2300      	movs	r3, #0
 800125a:	b510      	push	{r4, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	ac03      	add	r4, sp, #12
 8001260:	460a      	mov	r2, r1
 8001262:	9400      	str	r4, [sp, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	f7ff ffdd 	bl	8001224 <_Unwind_VRS_Get>
 800126a:	9803      	ldr	r0, [sp, #12]
 800126c:	b004      	add	sp, #16
 800126e:	bd10      	pop	{r4, pc}

08001270 <_Unwind_VRS_Set>:
 8001270:	b500      	push	{lr}
 8001272:	2904      	cmp	r1, #4
 8001274:	d807      	bhi.n	8001286 <_Unwind_VRS_Set+0x16>
 8001276:	e8df f001 	tbb	[pc, r1]
 800127a:	0903      	.short	0x0903
 800127c:	0906      	.short	0x0906
 800127e:	09          	.byte	0x09
 800127f:	00          	.byte	0x00
 8001280:	b90b      	cbnz	r3, 8001286 <_Unwind_VRS_Set+0x16>
 8001282:	2a0f      	cmp	r2, #15
 8001284:	d905      	bls.n	8001292 <_Unwind_VRS_Set+0x22>
 8001286:	2002      	movs	r0, #2
 8001288:	f85d fb04 	ldr.w	pc, [sp], #4
 800128c:	2001      	movs	r0, #1
 800128e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001292:	9901      	ldr	r1, [sp, #4]
 8001294:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001298:	6809      	ldr	r1, [r1, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	6051      	str	r1, [r2, #4]
 800129e:	f85d fb04 	ldr.w	pc, [sp], #4
 80012a2:	bf00      	nop

080012a4 <_Unwind_SetGR>:
 80012a4:	2300      	movs	r3, #0
 80012a6:	b510      	push	{r4, lr}
 80012a8:	b084      	sub	sp, #16
 80012aa:	ac04      	add	r4, sp, #16
 80012ac:	f844 2d04 	str.w	r2, [r4, #-4]!
 80012b0:	9400      	str	r4, [sp, #0]
 80012b2:	460a      	mov	r2, r1
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff ffdb 	bl	8001270 <_Unwind_VRS_Set>
 80012ba:	b004      	add	sp, #16
 80012bc:	bd10      	pop	{r4, pc}
 80012be:	bf00      	nop

080012c0 <__gnu_Unwind_Backtrace>:
 80012c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012c2:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80012c6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80012c8:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	1d15      	adds	r5, r2, #4
 80012d0:	ac17      	add	r4, sp, #92	; 0x5c
 80012d2:	4607      	mov	r7, r0
 80012d4:	460e      	mov	r6, r1
 80012d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80012ea:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 80012ee:	e012      	b.n	8001316 <__gnu_Unwind_Backtrace+0x56>
 80012f0:	210c      	movs	r1, #12
 80012f2:	a816      	add	r0, sp, #88	; 0x58
 80012f4:	466a      	mov	r2, sp
 80012f6:	f7ff ffd5 	bl	80012a4 <_Unwind_SetGR>
 80012fa:	4631      	mov	r1, r6
 80012fc:	a816      	add	r0, sp, #88	; 0x58
 80012fe:	47b8      	blx	r7
 8001300:	b978      	cbnz	r0, 8001322 <__gnu_Unwind_Backtrace+0x62>
 8001302:	9b04      	ldr	r3, [sp, #16]
 8001304:	aa16      	add	r2, sp, #88	; 0x58
 8001306:	4669      	mov	r1, sp
 8001308:	2008      	movs	r0, #8
 800130a:	4798      	blx	r3
 800130c:	2805      	cmp	r0, #5
 800130e:	4604      	mov	r4, r0
 8001310:	d008      	beq.n	8001324 <__gnu_Unwind_Backtrace+0x64>
 8001312:	2809      	cmp	r0, #9
 8001314:	d005      	beq.n	8001322 <__gnu_Unwind_Backtrace+0x62>
 8001316:	9926      	ldr	r1, [sp, #152]	; 0x98
 8001318:	4668      	mov	r0, sp
 800131a:	f7ff fdff 	bl	8000f1c <get_eit_entry>
 800131e:	2800      	cmp	r0, #0
 8001320:	d0e6      	beq.n	80012f0 <__gnu_Unwind_Backtrace+0x30>
 8001322:	2409      	movs	r4, #9
 8001324:	a816      	add	r0, sp, #88	; 0x58
 8001326:	f7ff fe4b 	bl	8000fc0 <restore_non_core_regs>
 800132a:	4620      	mov	r0, r4
 800132c:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8001330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001332:	bf00      	nop

08001334 <__gnu_unwind_pr_common>:
 8001334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001338:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800133a:	4691      	mov	r9, r2
 800133c:	6822      	ldr	r2, [r4, #0]
 800133e:	b08b      	sub	sp, #44	; 0x2c
 8001340:	3404      	adds	r4, #4
 8001342:	460d      	mov	r5, r1
 8001344:	9207      	str	r2, [sp, #28]
 8001346:	9408      	str	r4, [sp, #32]
 8001348:	f000 0b03 	and.w	fp, r0, #3
 800134c:	461e      	mov	r6, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d160      	bne.n	8001414 <__gnu_unwind_pr_common+0xe0>
 8001352:	2303      	movs	r3, #3
 8001354:	0212      	lsls	r2, r2, #8
 8001356:	9207      	str	r2, [sp, #28]
 8001358:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 800135c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8001360:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8001362:	f1bb 0f02 	cmp.w	fp, #2
 8001366:	bf08      	it	eq
 8001368:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 800136a:	f013 0301 	ands.w	r3, r3, #1
 800136e:	d140      	bne.n	80013f2 <__gnu_unwind_pr_common+0xbe>
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	f000 0308 	and.w	r3, r0, #8
 8001376:	9303      	str	r3, [sp, #12]
 8001378:	f8d4 8000 	ldr.w	r8, [r4]
 800137c:	f1b8 0f00 	cmp.w	r8, #0
 8001380:	d039      	beq.n	80013f6 <__gnu_unwind_pr_common+0xc2>
 8001382:	2e02      	cmp	r6, #2
 8001384:	d043      	beq.n	800140e <__gnu_unwind_pr_common+0xda>
 8001386:	f8b4 8000 	ldrh.w	r8, [r4]
 800138a:	8867      	ldrh	r7, [r4, #2]
 800138c:	3404      	adds	r4, #4
 800138e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001390:	f027 0a01 	bic.w	sl, r7, #1
 8001394:	210f      	movs	r1, #15
 8001396:	4648      	mov	r0, r9
 8001398:	449a      	add	sl, r3
 800139a:	f7ff ff5d 	bl	8001258 <_Unwind_GetGR>
 800139e:	4582      	cmp	sl, r0
 80013a0:	d833      	bhi.n	800140a <__gnu_unwind_pr_common+0xd6>
 80013a2:	f028 0301 	bic.w	r3, r8, #1
 80013a6:	449a      	add	sl, r3
 80013a8:	4550      	cmp	r0, sl
 80013aa:	bf2c      	ite	cs
 80013ac:	2000      	movcs	r0, #0
 80013ae:	2001      	movcc	r0, #1
 80013b0:	007f      	lsls	r7, r7, #1
 80013b2:	f007 0702 	and.w	r7, r7, #2
 80013b6:	f008 0801 	and.w	r8, r8, #1
 80013ba:	ea47 0708 	orr.w	r7, r7, r8
 80013be:	2f01      	cmp	r7, #1
 80013c0:	d03e      	beq.n	8001440 <__gnu_unwind_pr_common+0x10c>
 80013c2:	d335      	bcc.n	8001430 <__gnu_unwind_pr_common+0xfc>
 80013c4:	2f02      	cmp	r7, #2
 80013c6:	d11c      	bne.n	8001402 <__gnu_unwind_pr_common+0xce>
 80013c8:	6823      	ldr	r3, [r4, #0]
 80013ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013ce:	9202      	str	r2, [sp, #8]
 80013d0:	f1bb 0f00 	cmp.w	fp, #0
 80013d4:	d176      	bne.n	80014c4 <__gnu_unwind_pr_common+0x190>
 80013d6:	b128      	cbz	r0, 80013e4 <__gnu_unwind_pr_common+0xb0>
 80013d8:	9903      	ldr	r1, [sp, #12]
 80013da:	2900      	cmp	r1, #0
 80013dc:	d07e      	beq.n	80014dc <__gnu_unwind_pr_common+0x1a8>
 80013de:	2a00      	cmp	r2, #0
 80013e0:	f000 80a6 	beq.w	8001530 <__gnu_unwind_pr_common+0x1fc>
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	db77      	blt.n	80014d8 <__gnu_unwind_pr_common+0x1a4>
 80013e8:	9b02      	ldr	r3, [sp, #8]
 80013ea:	3301      	adds	r3, #1
 80013ec:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80013f0:	e7c2      	b.n	8001378 <__gnu_unwind_pr_common+0x44>
 80013f2:	2300      	movs	r3, #0
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	2e02      	cmp	r6, #2
 80013f8:	dd3e      	ble.n	8001478 <__gnu_unwind_pr_common+0x144>
 80013fa:	f7ff fe13 	bl	8001024 <__gnu_unwind_24bit.isra.1>
 80013fe:	2800      	cmp	r0, #0
 8001400:	d040      	beq.n	8001484 <__gnu_unwind_pr_common+0x150>
 8001402:	2009      	movs	r0, #9
 8001404:	b00b      	add	sp, #44	; 0x2c
 8001406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800140a:	2000      	movs	r0, #0
 800140c:	e7d0      	b.n	80013b0 <__gnu_unwind_pr_common+0x7c>
 800140e:	6867      	ldr	r7, [r4, #4]
 8001410:	3408      	adds	r4, #8
 8001412:	e7bc      	b.n	800138e <__gnu_unwind_pr_common+0x5a>
 8001414:	2b02      	cmp	r3, #2
 8001416:	dca3      	bgt.n	8001360 <__gnu_unwind_pr_common+0x2c>
 8001418:	2102      	movs	r1, #2
 800141a:	0c13      	lsrs	r3, r2, #16
 800141c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8001420:	0412      	lsls	r2, r2, #16
 8001422:	b2db      	uxtb	r3, r3
 8001424:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8001428:	9207      	str	r2, [sp, #28]
 800142a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800142e:	e797      	b.n	8001360 <__gnu_unwind_pr_common+0x2c>
 8001430:	f1bb 0f00 	cmp.w	fp, #0
 8001434:	d002      	beq.n	800143c <__gnu_unwind_pr_common+0x108>
 8001436:	2800      	cmp	r0, #0
 8001438:	f040 80bd 	bne.w	80015b6 <__gnu_unwind_pr_common+0x282>
 800143c:	3404      	adds	r4, #4
 800143e:	e79b      	b.n	8001378 <__gnu_unwind_pr_common+0x44>
 8001440:	f1bb 0f00 	cmp.w	fp, #0
 8001444:	d125      	bne.n	8001492 <__gnu_unwind_pr_common+0x15e>
 8001446:	b1a8      	cbz	r0, 8001474 <__gnu_unwind_pr_common+0x140>
 8001448:	e894 000c 	ldmia.w	r4, {r2, r3}
 800144c:	1c99      	adds	r1, r3, #2
 800144e:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8001452:	d0d6      	beq.n	8001402 <__gnu_unwind_pr_common+0xce>
 8001454:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8001458:	3301      	adds	r3, #1
 800145a:	9106      	str	r1, [sp, #24]
 800145c:	f000 80a3 	beq.w	80015a6 <__gnu_unwind_pr_common+0x272>
 8001460:	1d20      	adds	r0, r4, #4
 8001462:	f7ff fdd9 	bl	8001018 <_Unwind_decode_typeinfo_ptr.isra.0>
 8001466:	ab06      	add	r3, sp, #24
 8001468:	4601      	mov	r1, r0
 800146a:	4628      	mov	r0, r5
 800146c:	f3af 8000 	nop.w
 8001470:	2800      	cmp	r0, #0
 8001472:	d177      	bne.n	8001564 <__gnu_unwind_pr_common+0x230>
 8001474:	3408      	adds	r4, #8
 8001476:	e77f      	b.n	8001378 <__gnu_unwind_pr_common+0x44>
 8001478:	a907      	add	r1, sp, #28
 800147a:	4648      	mov	r0, r9
 800147c:	f000 faf0 	bl	8001a60 <__gnu_unwind_execute>
 8001480:	2800      	cmp	r0, #0
 8001482:	d1be      	bne.n	8001402 <__gnu_unwind_pr_common+0xce>
 8001484:	9b01      	ldr	r3, [sp, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d15c      	bne.n	8001544 <__gnu_unwind_pr_common+0x210>
 800148a:	2008      	movs	r0, #8
 800148c:	b00b      	add	sp, #44	; 0x2c
 800148e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001492:	210d      	movs	r1, #13
 8001494:	4648      	mov	r0, r9
 8001496:	6a2f      	ldr	r7, [r5, #32]
 8001498:	f7ff fede 	bl	8001258 <_Unwind_GetGR>
 800149c:	4287      	cmp	r7, r0
 800149e:	d1e9      	bne.n	8001474 <__gnu_unwind_pr_common+0x140>
 80014a0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80014a2:	429c      	cmp	r4, r3
 80014a4:	d1e6      	bne.n	8001474 <__gnu_unwind_pr_common+0x140>
 80014a6:	4620      	mov	r0, r4
 80014a8:	f7ff fcea 	bl	8000e80 <selfrel_offset31>
 80014ac:	210f      	movs	r1, #15
 80014ae:	4602      	mov	r2, r0
 80014b0:	4648      	mov	r0, r9
 80014b2:	f7ff fef7 	bl	80012a4 <_Unwind_SetGR>
 80014b6:	4648      	mov	r0, r9
 80014b8:	462a      	mov	r2, r5
 80014ba:	2100      	movs	r1, #0
 80014bc:	f7ff fef2 	bl	80012a4 <_Unwind_SetGR>
 80014c0:	2007      	movs	r0, #7
 80014c2:	e79f      	b.n	8001404 <__gnu_unwind_pr_common+0xd0>
 80014c4:	210d      	movs	r1, #13
 80014c6:	4648      	mov	r0, r9
 80014c8:	6a2f      	ldr	r7, [r5, #32]
 80014ca:	f7ff fec5 	bl	8001258 <_Unwind_GetGR>
 80014ce:	4287      	cmp	r7, r0
 80014d0:	d058      	beq.n	8001584 <__gnu_unwind_pr_common+0x250>
 80014d2:	6823      	ldr	r3, [r4, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	da87      	bge.n	80013e8 <__gnu_unwind_pr_common+0xb4>
 80014d8:	3404      	adds	r4, #4
 80014da:	e785      	b.n	80013e8 <__gnu_unwind_pr_common+0xb4>
 80014dc:	9b02      	ldr	r3, [sp, #8]
 80014de:	b33b      	cbz	r3, 8001530 <__gnu_unwind_pr_common+0x1fc>
 80014e0:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80014e4:	1d27      	adds	r7, r4, #4
 80014e6:	f8cd b010 	str.w	fp, [sp, #16]
 80014ea:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80014ee:	46a3      	mov	fp, r4
 80014f0:	f8dd a008 	ldr.w	sl, [sp, #8]
 80014f4:	461c      	mov	r4, r3
 80014f6:	9605      	str	r6, [sp, #20]
 80014f8:	e002      	b.n	8001500 <__gnu_unwind_pr_common+0x1cc>
 80014fa:	45b2      	cmp	sl, r6
 80014fc:	46b0      	mov	r8, r6
 80014fe:	d016      	beq.n	800152e <__gnu_unwind_pr_common+0x1fa>
 8001500:	4638      	mov	r0, r7
 8001502:	9406      	str	r4, [sp, #24]
 8001504:	f7ff fd88 	bl	8001018 <_Unwind_decode_typeinfo_ptr.isra.0>
 8001508:	ab06      	add	r3, sp, #24
 800150a:	4601      	mov	r1, r0
 800150c:	2200      	movs	r2, #0
 800150e:	4628      	mov	r0, r5
 8001510:	f3af 8000 	nop.w
 8001514:	f108 0601 	add.w	r6, r8, #1
 8001518:	3704      	adds	r7, #4
 800151a:	2800      	cmp	r0, #0
 800151c:	d0ed      	beq.n	80014fa <__gnu_unwind_pr_common+0x1c6>
 800151e:	9b02      	ldr	r3, [sp, #8]
 8001520:	465c      	mov	r4, fp
 8001522:	4543      	cmp	r3, r8
 8001524:	f8dd b010 	ldr.w	fp, [sp, #16]
 8001528:	9e05      	ldr	r6, [sp, #20]
 800152a:	d1d2      	bne.n	80014d2 <__gnu_unwind_pr_common+0x19e>
 800152c:	e000      	b.n	8001530 <__gnu_unwind_pr_common+0x1fc>
 800152e:	465c      	mov	r4, fp
 8001530:	4648      	mov	r0, r9
 8001532:	210d      	movs	r1, #13
 8001534:	f7ff fe90 	bl	8001258 <_Unwind_GetGR>
 8001538:	9b06      	ldr	r3, [sp, #24]
 800153a:	6228      	str	r0, [r5, #32]
 800153c:	62ac      	str	r4, [r5, #40]	; 0x28
 800153e:	626b      	str	r3, [r5, #36]	; 0x24
 8001540:	2006      	movs	r0, #6
 8001542:	e75f      	b.n	8001404 <__gnu_unwind_pr_common+0xd0>
 8001544:	210f      	movs	r1, #15
 8001546:	4648      	mov	r0, r9
 8001548:	f7ff fe86 	bl	8001258 <_Unwind_GetGR>
 800154c:	210e      	movs	r1, #14
 800154e:	4602      	mov	r2, r0
 8001550:	4648      	mov	r0, r9
 8001552:	f7ff fea7 	bl	80012a4 <_Unwind_SetGR>
 8001556:	4648      	mov	r0, r9
 8001558:	4a29      	ldr	r2, [pc, #164]	; (8001600 <__gnu_unwind_pr_common+0x2cc>)
 800155a:	210f      	movs	r1, #15
 800155c:	f7ff fea2 	bl	80012a4 <_Unwind_SetGR>
 8001560:	2007      	movs	r0, #7
 8001562:	e74f      	b.n	8001404 <__gnu_unwind_pr_common+0xd0>
 8001564:	4607      	mov	r7, r0
 8001566:	210d      	movs	r1, #13
 8001568:	4648      	mov	r0, r9
 800156a:	f7ff fe75 	bl	8001258 <_Unwind_GetGR>
 800156e:	2f02      	cmp	r7, #2
 8001570:	6228      	str	r0, [r5, #32]
 8001572:	d11d      	bne.n	80015b0 <__gnu_unwind_pr_common+0x27c>
 8001574:	462b      	mov	r3, r5
 8001576:	9a06      	ldr	r2, [sp, #24]
 8001578:	f843 2f2c 	str.w	r2, [r3, #44]!
 800157c:	626b      	str	r3, [r5, #36]	; 0x24
 800157e:	62ac      	str	r4, [r5, #40]	; 0x28
 8001580:	2006      	movs	r0, #6
 8001582:	e73f      	b.n	8001404 <__gnu_unwind_pr_common+0xd0>
 8001584:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001586:	429c      	cmp	r4, r3
 8001588:	d1a3      	bne.n	80014d2 <__gnu_unwind_pr_common+0x19e>
 800158a:	2204      	movs	r2, #4
 800158c:	2700      	movs	r7, #0
 800158e:	9902      	ldr	r1, [sp, #8]
 8001590:	18a3      	adds	r3, r4, r2
 8001592:	62a9      	str	r1, [r5, #40]	; 0x28
 8001594:	62ef      	str	r7, [r5, #44]	; 0x2c
 8001596:	632a      	str	r2, [r5, #48]	; 0x30
 8001598:	636b      	str	r3, [r5, #52]	; 0x34
 800159a:	6823      	ldr	r3, [r4, #0]
 800159c:	42bb      	cmp	r3, r7
 800159e:	db1d      	blt.n	80015dc <__gnu_unwind_pr_common+0x2a8>
 80015a0:	2301      	movs	r3, #1
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	e720      	b.n	80013e8 <__gnu_unwind_pr_common+0xb4>
 80015a6:	4648      	mov	r0, r9
 80015a8:	210d      	movs	r1, #13
 80015aa:	f7ff fe55 	bl	8001258 <_Unwind_GetGR>
 80015ae:	6228      	str	r0, [r5, #32]
 80015b0:	9b06      	ldr	r3, [sp, #24]
 80015b2:	626b      	str	r3, [r5, #36]	; 0x24
 80015b4:	e7e3      	b.n	800157e <__gnu_unwind_pr_common+0x24a>
 80015b6:	4620      	mov	r0, r4
 80015b8:	f7ff fc62 	bl	8000e80 <selfrel_offset31>
 80015bc:	3404      	adds	r4, #4
 80015be:	4606      	mov	r6, r0
 80015c0:	63ac      	str	r4, [r5, #56]	; 0x38
 80015c2:	4628      	mov	r0, r5
 80015c4:	f3af 8000 	nop.w
 80015c8:	2800      	cmp	r0, #0
 80015ca:	f43f af1a 	beq.w	8001402 <__gnu_unwind_pr_common+0xce>
 80015ce:	4648      	mov	r0, r9
 80015d0:	4632      	mov	r2, r6
 80015d2:	210f      	movs	r1, #15
 80015d4:	f7ff fe66 	bl	80012a4 <_Unwind_SetGR>
 80015d8:	2007      	movs	r0, #7
 80015da:	e713      	b.n	8001404 <__gnu_unwind_pr_common+0xd0>
 80015dc:	4608      	mov	r0, r1
 80015de:	3001      	adds	r0, #1
 80015e0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80015e4:	f7ff fc4c 	bl	8000e80 <selfrel_offset31>
 80015e8:	210f      	movs	r1, #15
 80015ea:	4602      	mov	r2, r0
 80015ec:	4648      	mov	r0, r9
 80015ee:	f7ff fe59 	bl	80012a4 <_Unwind_SetGR>
 80015f2:	4648      	mov	r0, r9
 80015f4:	462a      	mov	r2, r5
 80015f6:	4639      	mov	r1, r7
 80015f8:	f7ff fe54 	bl	80012a4 <_Unwind_SetGR>
 80015fc:	2007      	movs	r0, #7
 80015fe:	e701      	b.n	8001404 <__gnu_unwind_pr_common+0xd0>
 8001600:	00000000 	.word	0x00000000

08001604 <__aeabi_unwind_cpp_pr0>:
 8001604:	2300      	movs	r3, #0
 8001606:	e695      	b.n	8001334 <__gnu_unwind_pr_common>

08001608 <__aeabi_unwind_cpp_pr1>:
 8001608:	2301      	movs	r3, #1
 800160a:	e693      	b.n	8001334 <__gnu_unwind_pr_common>

0800160c <__aeabi_unwind_cpp_pr2>:
 800160c:	2302      	movs	r3, #2
 800160e:	e691      	b.n	8001334 <__gnu_unwind_pr_common>

08001610 <_Unwind_VRS_Pop>:
 8001610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001612:	4604      	mov	r4, r0
 8001614:	b0c5      	sub	sp, #276	; 0x114
 8001616:	2904      	cmp	r1, #4
 8001618:	d80d      	bhi.n	8001636 <_Unwind_VRS_Pop+0x26>
 800161a:	e8df f001 	tbb	[pc, r1]
 800161e:	0355      	.short	0x0355
 8001620:	310c      	.short	0x310c
 8001622:	0f          	.byte	0x0f
 8001623:	00          	.byte	0x00
 8001624:	2b01      	cmp	r3, #1
 8001626:	ea4f 4612 	mov.w	r6, r2, lsr #16
 800162a:	b295      	uxth	r5, r2
 800162c:	d164      	bne.n	80016f8 <_Unwind_VRS_Pop+0xe8>
 800162e:	1972      	adds	r2, r6, r5
 8001630:	2a10      	cmp	r2, #16
 8001632:	f240 809d 	bls.w	8001770 <_Unwind_VRS_Pop+0x160>
 8001636:	2002      	movs	r0, #2
 8001638:	b045      	add	sp, #276	; 0x114
 800163a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1fa      	bne.n	8001636 <_Unwind_VRS_Pop+0x26>
 8001640:	2a10      	cmp	r2, #16
 8001642:	d8f8      	bhi.n	8001636 <_Unwind_VRS_Pop+0x26>
 8001644:	6823      	ldr	r3, [r4, #0]
 8001646:	06d8      	lsls	r0, r3, #27
 8001648:	f100 80c8 	bmi.w	80017dc <_Unwind_VRS_Pop+0x1cc>
 800164c:	ae22      	add	r6, sp, #136	; 0x88
 800164e:	4630      	mov	r0, r6
 8001650:	9201      	str	r2, [sp, #4]
 8001652:	2501      	movs	r5, #1
 8001654:	f000 f974 	bl	8001940 <__gnu_Unwind_Save_WMMXC>
 8001658:	2300      	movs	r3, #0
 800165a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800165c:	9a01      	ldr	r2, [sp, #4]
 800165e:	fa05 f103 	lsl.w	r1, r5, r3
 8001662:	4211      	tst	r1, r2
 8001664:	d003      	beq.n	800166e <_Unwind_VRS_Pop+0x5e>
 8001666:	6801      	ldr	r1, [r0, #0]
 8001668:	3004      	adds	r0, #4
 800166a:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 800166e:	3301      	adds	r3, #1
 8001670:	2b04      	cmp	r3, #4
 8001672:	d1f4      	bne.n	800165e <_Unwind_VRS_Pop+0x4e>
 8001674:	63a0      	str	r0, [r4, #56]	; 0x38
 8001676:	4630      	mov	r0, r6
 8001678:	f000 f958 	bl	800192c <__gnu_Unwind_Restore_WMMXC>
 800167c:	2000      	movs	r0, #0
 800167e:	e7db      	b.n	8001638 <_Unwind_VRS_Pop+0x28>
 8001680:	2b03      	cmp	r3, #3
 8001682:	d1d8      	bne.n	8001636 <_Unwind_VRS_Pop+0x26>
 8001684:	0c15      	lsrs	r5, r2, #16
 8001686:	b297      	uxth	r7, r2
 8001688:	19eb      	adds	r3, r5, r7
 800168a:	2b10      	cmp	r3, #16
 800168c:	d8d3      	bhi.n	8001636 <_Unwind_VRS_Pop+0x26>
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	071e      	lsls	r6, r3, #28
 8001692:	f100 80b7 	bmi.w	8001804 <_Unwind_VRS_Pop+0x1f4>
 8001696:	ae22      	add	r6, sp, #136	; 0x88
 8001698:	4630      	mov	r0, r6
 800169a:	f000 f925 	bl	80018e8 <__gnu_Unwind_Save_WMMXD>
 800169e:	00ed      	lsls	r5, r5, #3
 80016a0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016a2:	b15f      	cbz	r7, 80016bc <_Unwind_VRS_Pop+0xac>
 80016a4:	3d04      	subs	r5, #4
 80016a6:	4603      	mov	r3, r0
 80016a8:	1971      	adds	r1, r6, r5
 80016aa:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 80016ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80016b2:	4283      	cmp	r3, r0
 80016b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80016b8:	d1f9      	bne.n	80016ae <_Unwind_VRS_Pop+0x9e>
 80016ba:	4618      	mov	r0, r3
 80016bc:	63a0      	str	r0, [r4, #56]	; 0x38
 80016be:	4630      	mov	r0, r6
 80016c0:	f000 f8f0 	bl	80018a4 <__gnu_Unwind_Restore_WMMXD>
 80016c4:	2000      	movs	r0, #0
 80016c6:	e7b7      	b.n	8001638 <_Unwind_VRS_Pop+0x28>
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1b4      	bne.n	8001636 <_Unwind_VRS_Pop+0x26>
 80016cc:	2701      	movs	r7, #1
 80016ce:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80016d0:	b296      	uxth	r6, r2
 80016d2:	1d20      	adds	r0, r4, #4
 80016d4:	fa07 f103 	lsl.w	r1, r7, r3
 80016d8:	4231      	tst	r1, r6
 80016da:	f103 0301 	add.w	r3, r3, #1
 80016de:	d002      	beq.n	80016e6 <_Unwind_VRS_Pop+0xd6>
 80016e0:	6829      	ldr	r1, [r5, #0]
 80016e2:	3504      	adds	r5, #4
 80016e4:	6001      	str	r1, [r0, #0]
 80016e6:	2b10      	cmp	r3, #16
 80016e8:	f100 0004 	add.w	r0, r0, #4
 80016ec:	d1f2      	bne.n	80016d4 <_Unwind_VRS_Pop+0xc4>
 80016ee:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 80016f2:	d13b      	bne.n	800176c <_Unwind_VRS_Pop+0x15c>
 80016f4:	63a5      	str	r5, [r4, #56]	; 0x38
 80016f6:	e79f      	b.n	8001638 <_Unwind_VRS_Pop+0x28>
 80016f8:	2b05      	cmp	r3, #5
 80016fa:	d19c      	bne.n	8001636 <_Unwind_VRS_Pop+0x26>
 80016fc:	1977      	adds	r7, r6, r5
 80016fe:	2f20      	cmp	r7, #32
 8001700:	d899      	bhi.n	8001636 <_Unwind_VRS_Pop+0x26>
 8001702:	2e0f      	cmp	r6, #15
 8001704:	d966      	bls.n	80017d4 <_Unwind_VRS_Pop+0x1c4>
 8001706:	462f      	mov	r7, r5
 8001708:	2d00      	cmp	r5, #0
 800170a:	d13a      	bne.n	8001782 <_Unwind_VRS_Pop+0x172>
 800170c:	462a      	mov	r2, r5
 800170e:	2700      	movs	r7, #0
 8001710:	2a00      	cmp	r2, #0
 8001712:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001714:	dd72      	ble.n	80017fc <_Unwind_VRS_Pop+0x1ec>
 8001716:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800171a:	4601      	mov	r1, r0
 800171c:	a844      	add	r0, sp, #272	; 0x110
 800171e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8001722:	388c      	subs	r0, #140	; 0x8c
 8001724:	f851 5b04 	ldr.w	r5, [r1], #4
 8001728:	4291      	cmp	r1, r2
 800172a:	f840 5f04 	str.w	r5, [r0, #4]!
 800172e:	d1f9      	bne.n	8001724 <_Unwind_VRS_Pop+0x114>
 8001730:	4608      	mov	r0, r1
 8001732:	b197      	cbz	r7, 800175a <_Unwind_VRS_Pop+0x14a>
 8001734:	2e10      	cmp	r6, #16
 8001736:	4632      	mov	r2, r6
 8001738:	bf38      	it	cc
 800173a:	2210      	movcc	r2, #16
 800173c:	a944      	add	r1, sp, #272	; 0x110
 800173e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8001742:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8001746:	0079      	lsls	r1, r7, #1
 8001748:	3a04      	subs	r2, #4
 800174a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800174e:	f850 5b04 	ldr.w	r5, [r0], #4
 8001752:	4288      	cmp	r0, r1
 8001754:	f842 5f04 	str.w	r5, [r2, #4]!
 8001758:	d1f9      	bne.n	800174e <_Unwind_VRS_Pop+0x13e>
 800175a:	2b01      	cmp	r3, #1
 800175c:	d048      	beq.n	80017f0 <_Unwind_VRS_Pop+0x1e0>
 800175e:	2e0f      	cmp	r6, #15
 8001760:	63a1      	str	r1, [r4, #56]	; 0x38
 8001762:	d933      	bls.n	80017cc <_Unwind_VRS_Pop+0x1bc>
 8001764:	b117      	cbz	r7, 800176c <_Unwind_VRS_Pop+0x15c>
 8001766:	a802      	add	r0, sp, #8
 8001768:	f000 f894 	bl	8001894 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800176c:	2000      	movs	r0, #0
 800176e:	e763      	b.n	8001638 <_Unwind_VRS_Pop+0x28>
 8001770:	2e0f      	cmp	r6, #15
 8001772:	f63f af60 	bhi.w	8001636 <_Unwind_VRS_Pop+0x26>
 8001776:	2700      	movs	r7, #0
 8001778:	6822      	ldr	r2, [r4, #0]
 800177a:	07d1      	lsls	r1, r2, #31
 800177c:	d417      	bmi.n	80017ae <_Unwind_VRS_Pop+0x19e>
 800177e:	2f00      	cmp	r7, #0
 8001780:	d060      	beq.n	8001844 <_Unwind_VRS_Pop+0x234>
 8001782:	6822      	ldr	r2, [r4, #0]
 8001784:	0751      	lsls	r1, r2, #29
 8001786:	d445      	bmi.n	8001814 <_Unwind_VRS_Pop+0x204>
 8001788:	2b01      	cmp	r3, #1
 800178a:	d04d      	beq.n	8001828 <_Unwind_VRS_Pop+0x218>
 800178c:	2e0f      	cmp	r6, #15
 800178e:	d806      	bhi.n	800179e <_Unwind_VRS_Pop+0x18e>
 8001790:	a822      	add	r0, sp, #136	; 0x88
 8001792:	9301      	str	r3, [sp, #4]
 8001794:	f000 f87a 	bl	800188c <__gnu_Unwind_Save_VFP_D>
 8001798:	9b01      	ldr	r3, [sp, #4]
 800179a:	2f00      	cmp	r7, #0
 800179c:	d0b6      	beq.n	800170c <_Unwind_VRS_Pop+0xfc>
 800179e:	a802      	add	r0, sp, #8
 80017a0:	9301      	str	r3, [sp, #4]
 80017a2:	f000 f87b 	bl	800189c <__gnu_Unwind_Save_VFP_D_16_to_31>
 80017a6:	9b01      	ldr	r3, [sp, #4]
 80017a8:	f1c6 0210 	rsb	r2, r6, #16
 80017ac:	e7b0      	b.n	8001710 <_Unwind_VRS_Pop+0x100>
 80017ae:	f022 0101 	bic.w	r1, r2, #1
 80017b2:	2b05      	cmp	r3, #5
 80017b4:	6021      	str	r1, [r4, #0]
 80017b6:	9301      	str	r3, [sp, #4]
 80017b8:	4620      	mov	r0, r4
 80017ba:	d03b      	beq.n	8001834 <_Unwind_VRS_Pop+0x224>
 80017bc:	f022 0203 	bic.w	r2, r2, #3
 80017c0:	f840 2b48 	str.w	r2, [r0], #72
 80017c4:	f000 f85a 	bl	800187c <__gnu_Unwind_Save_VFP>
 80017c8:	9b01      	ldr	r3, [sp, #4]
 80017ca:	e7d8      	b.n	800177e <_Unwind_VRS_Pop+0x16e>
 80017cc:	a822      	add	r0, sp, #136	; 0x88
 80017ce:	f000 f859 	bl	8001884 <__gnu_Unwind_Restore_VFP_D>
 80017d2:	e7c7      	b.n	8001764 <_Unwind_VRS_Pop+0x154>
 80017d4:	2f10      	cmp	r7, #16
 80017d6:	d9ce      	bls.n	8001776 <_Unwind_VRS_Pop+0x166>
 80017d8:	3f10      	subs	r7, #16
 80017da:	e7cd      	b.n	8001778 <_Unwind_VRS_Pop+0x168>
 80017dc:	f023 0310 	bic.w	r3, r3, #16
 80017e0:	6023      	str	r3, [r4, #0]
 80017e2:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80017e6:	9201      	str	r2, [sp, #4]
 80017e8:	f000 f8aa 	bl	8001940 <__gnu_Unwind_Save_WMMXC>
 80017ec:	9a01      	ldr	r2, [sp, #4]
 80017ee:	e72d      	b.n	800164c <_Unwind_VRS_Pop+0x3c>
 80017f0:	3104      	adds	r1, #4
 80017f2:	63a1      	str	r1, [r4, #56]	; 0x38
 80017f4:	a822      	add	r0, sp, #136	; 0x88
 80017f6:	f000 f83d 	bl	8001874 <__gnu_Unwind_Restore_VFP>
 80017fa:	e7b7      	b.n	800176c <_Unwind_VRS_Pop+0x15c>
 80017fc:	2f00      	cmp	r7, #0
 80017fe:	d199      	bne.n	8001734 <_Unwind_VRS_Pop+0x124>
 8001800:	4601      	mov	r1, r0
 8001802:	e7aa      	b.n	800175a <_Unwind_VRS_Pop+0x14a>
 8001804:	f023 0308 	bic.w	r3, r3, #8
 8001808:	6023      	str	r3, [r4, #0]
 800180a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800180e:	f000 f86b 	bl	80018e8 <__gnu_Unwind_Save_WMMXD>
 8001812:	e740      	b.n	8001696 <_Unwind_VRS_Pop+0x86>
 8001814:	4620      	mov	r0, r4
 8001816:	f022 0204 	bic.w	r2, r2, #4
 800181a:	f840 2bd0 	str.w	r2, [r0], #208
 800181e:	9301      	str	r3, [sp, #4]
 8001820:	f000 f83c 	bl	800189c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001824:	9b01      	ldr	r3, [sp, #4]
 8001826:	e7af      	b.n	8001788 <_Unwind_VRS_Pop+0x178>
 8001828:	a822      	add	r0, sp, #136	; 0x88
 800182a:	9301      	str	r3, [sp, #4]
 800182c:	f000 f826 	bl	800187c <__gnu_Unwind_Save_VFP>
 8001830:	9b01      	ldr	r3, [sp, #4]
 8001832:	e7b9      	b.n	80017a8 <_Unwind_VRS_Pop+0x198>
 8001834:	f041 0102 	orr.w	r1, r1, #2
 8001838:	f840 1b48 	str.w	r1, [r0], #72
 800183c:	f000 f826 	bl	800188c <__gnu_Unwind_Save_VFP_D>
 8001840:	9b01      	ldr	r3, [sp, #4]
 8001842:	e79c      	b.n	800177e <_Unwind_VRS_Pop+0x16e>
 8001844:	2b01      	cmp	r3, #1
 8001846:	d003      	beq.n	8001850 <_Unwind_VRS_Pop+0x240>
 8001848:	2e0f      	cmp	r6, #15
 800184a:	f63f af5f 	bhi.w	800170c <_Unwind_VRS_Pop+0xfc>
 800184e:	e79f      	b.n	8001790 <_Unwind_VRS_Pop+0x180>
 8001850:	a822      	add	r0, sp, #136	; 0x88
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	f000 f812 	bl	800187c <__gnu_Unwind_Save_VFP>
 8001858:	9b01      	ldr	r3, [sp, #4]
 800185a:	e757      	b.n	800170c <_Unwind_VRS_Pop+0xfc>

0800185c <__restore_core_regs>:
 800185c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8001860:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001864:	469c      	mov	ip, r3
 8001866:	46a6      	mov	lr, r4
 8001868:	f84c 5d04 	str.w	r5, [ip, #-4]!
 800186c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001870:	46e5      	mov	sp, ip
 8001872:	bd00      	pop	{pc}

08001874 <__gnu_Unwind_Restore_VFP>:
 8001874:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop

0800187c <__gnu_Unwind_Save_VFP>:
 800187c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop

08001884 <__gnu_Unwind_Restore_VFP_D>:
 8001884:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop

0800188c <__gnu_Unwind_Save_VFP_D>:
 800188c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop

08001894 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001894:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop

0800189c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 800189c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop

080018a4 <__gnu_Unwind_Restore_WMMXD>:
 80018a4:	ecf0 0102 	ldfe	f0, [r0], #8
 80018a8:	ecf0 1102 	ldfe	f1, [r0], #8
 80018ac:	ecf0 2102 	ldfe	f2, [r0], #8
 80018b0:	ecf0 3102 	ldfe	f3, [r0], #8
 80018b4:	ecf0 4102 	ldfe	f4, [r0], #8
 80018b8:	ecf0 5102 	ldfe	f5, [r0], #8
 80018bc:	ecf0 6102 	ldfe	f6, [r0], #8
 80018c0:	ecf0 7102 	ldfe	f7, [r0], #8
 80018c4:	ecf0 8102 	ldfp	f0, [r0], #8
 80018c8:	ecf0 9102 	ldfp	f1, [r0], #8
 80018cc:	ecf0 a102 	ldfp	f2, [r0], #8
 80018d0:	ecf0 b102 	ldfp	f3, [r0], #8
 80018d4:	ecf0 c102 	ldfp	f4, [r0], #8
 80018d8:	ecf0 d102 	ldfp	f5, [r0], #8
 80018dc:	ecf0 e102 	ldfp	f6, [r0], #8
 80018e0:	ecf0 f102 	ldfp	f7, [r0], #8
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop

080018e8 <__gnu_Unwind_Save_WMMXD>:
 80018e8:	ece0 0102 	stfe	f0, [r0], #8
 80018ec:	ece0 1102 	stfe	f1, [r0], #8
 80018f0:	ece0 2102 	stfe	f2, [r0], #8
 80018f4:	ece0 3102 	stfe	f3, [r0], #8
 80018f8:	ece0 4102 	stfe	f4, [r0], #8
 80018fc:	ece0 5102 	stfe	f5, [r0], #8
 8001900:	ece0 6102 	stfe	f6, [r0], #8
 8001904:	ece0 7102 	stfe	f7, [r0], #8
 8001908:	ece0 8102 	stfp	f0, [r0], #8
 800190c:	ece0 9102 	stfp	f1, [r0], #8
 8001910:	ece0 a102 	stfp	f2, [r0], #8
 8001914:	ece0 b102 	stfp	f3, [r0], #8
 8001918:	ece0 c102 	stfp	f4, [r0], #8
 800191c:	ece0 d102 	stfp	f5, [r0], #8
 8001920:	ece0 e102 	stfp	f6, [r0], #8
 8001924:	ece0 f102 	stfp	f7, [r0], #8
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop

0800192c <__gnu_Unwind_Restore_WMMXC>:
 800192c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001930:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001934:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001938:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop

08001940 <__gnu_Unwind_Save_WMMXC>:
 8001940:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001944:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001948:	fca0 a101 	stc2	1, cr10, [r0], #4
 800194c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop

08001954 <_Unwind_RaiseException>:
 8001954:	46ec      	mov	ip, sp
 8001956:	b500      	push	{lr}
 8001958:	e92d 5000 	stmdb	sp!, {ip, lr}
 800195c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001968:	a901      	add	r1, sp, #4
 800196a:	f7ff fbed 	bl	8001148 <__gnu_Unwind_RaiseException>
 800196e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001972:	b012      	add	sp, #72	; 0x48
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop

08001978 <_Unwind_Resume>:
 8001978:	46ec      	mov	ip, sp
 800197a:	b500      	push	{lr}
 800197c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001980:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	e92d 000c 	stmdb	sp!, {r2, r3}
 800198c:	a901      	add	r1, sp, #4
 800198e:	f7ff fc15 	bl	80011bc <__gnu_Unwind_Resume>
 8001992:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001996:	b012      	add	sp, #72	; 0x48
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop

0800199c <_Unwind_Resume_or_Rethrow>:
 800199c:	46ec      	mov	ip, sp
 800199e:	b500      	push	{lr}
 80019a0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80019a4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	e92d 000c 	stmdb	sp!, {r2, r3}
 80019b0:	a901      	add	r1, sp, #4
 80019b2:	f7ff fc25 	bl	8001200 <__gnu_Unwind_Resume_or_Rethrow>
 80019b6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80019ba:	b012      	add	sp, #72	; 0x48
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop

080019c0 <_Unwind_ForcedUnwind>:
 80019c0:	46ec      	mov	ip, sp
 80019c2:	b500      	push	{lr}
 80019c4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80019c8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80019d4:	ab01      	add	r3, sp, #4
 80019d6:	f7ff fbe7 	bl	80011a8 <__gnu_Unwind_ForcedUnwind>
 80019da:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80019de:	b012      	add	sp, #72	; 0x48
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop

080019e4 <_Unwind_Backtrace>:
 80019e4:	46ec      	mov	ip, sp
 80019e6:	b500      	push	{lr}
 80019e8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80019ec:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80019f0:	f04f 0300 	mov.w	r3, #0
 80019f4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80019f8:	aa01      	add	r2, sp, #4
 80019fa:	f7ff fc61 	bl	80012c0 <__gnu_Unwind_Backtrace>
 80019fe:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001a02:	b012      	add	sp, #72	; 0x48
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop

08001a08 <next_unwind_byte>:
 8001a08:	7a02      	ldrb	r2, [r0, #8]
 8001a0a:	b91a      	cbnz	r2, 8001a14 <next_unwind_byte+0xc>
 8001a0c:	7a43      	ldrb	r3, [r0, #9]
 8001a0e:	b943      	cbnz	r3, 8001a22 <next_unwind_byte+0x1a>
 8001a10:	20b0      	movs	r0, #176	; 0xb0
 8001a12:	4770      	bx	lr
 8001a14:	6803      	ldr	r3, [r0, #0]
 8001a16:	3a01      	subs	r2, #1
 8001a18:	7202      	strb	r2, [r0, #8]
 8001a1a:	021a      	lsls	r2, r3, #8
 8001a1c:	6002      	str	r2, [r0, #0]
 8001a1e:	0e18      	lsrs	r0, r3, #24
 8001a20:	4770      	bx	lr
 8001a22:	2103      	movs	r1, #3
 8001a24:	6842      	ldr	r2, [r0, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	b410      	push	{r4}
 8001a2a:	7243      	strb	r3, [r0, #9]
 8001a2c:	6813      	ldr	r3, [r2, #0]
 8001a2e:	1d14      	adds	r4, r2, #4
 8001a30:	7201      	strb	r1, [r0, #8]
 8001a32:	021a      	lsls	r2, r3, #8
 8001a34:	6044      	str	r4, [r0, #4]
 8001a36:	6002      	str	r2, [r0, #0]
 8001a38:	bc10      	pop	{r4}
 8001a3a:	0e18      	lsrs	r0, r3, #24
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop

08001a40 <_Unwind_GetGR.constprop.0>:
 8001a40:	2300      	movs	r3, #0
 8001a42:	b500      	push	{lr}
 8001a44:	b085      	sub	sp, #20
 8001a46:	aa03      	add	r2, sp, #12
 8001a48:	9200      	str	r2, [sp, #0]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	220c      	movs	r2, #12
 8001a4e:	f7ff fbe9 	bl	8001224 <_Unwind_VRS_Get>
 8001a52:	9803      	ldr	r0, [sp, #12]
 8001a54:	b005      	add	sp, #20
 8001a56:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a5a:	bf00      	nop

08001a5c <unwind_UCB_from_context>:
 8001a5c:	e7f0      	b.n	8001a40 <_Unwind_GetGR.constprop.0>
 8001a5e:	bf00      	nop

08001a60 <__gnu_unwind_execute>:
 8001a60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a64:	4606      	mov	r6, r0
 8001a66:	460f      	mov	r7, r1
 8001a68:	f04f 0800 	mov.w	r8, #0
 8001a6c:	b085      	sub	sp, #20
 8001a6e:	4638      	mov	r0, r7
 8001a70:	f7ff ffca 	bl	8001a08 <next_unwind_byte>
 8001a74:	28b0      	cmp	r0, #176	; 0xb0
 8001a76:	4604      	mov	r4, r0
 8001a78:	d023      	beq.n	8001ac2 <__gnu_unwind_execute+0x62>
 8001a7a:	0605      	lsls	r5, r0, #24
 8001a7c:	d427      	bmi.n	8001ace <__gnu_unwind_execute+0x6e>
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f10d 090c 	add.w	r9, sp, #12
 8001a84:	4619      	mov	r1, r3
 8001a86:	0085      	lsls	r5, r0, #2
 8001a88:	220d      	movs	r2, #13
 8001a8a:	f8cd 9000 	str.w	r9, [sp]
 8001a8e:	4630      	mov	r0, r6
 8001a90:	f7ff fbc8 	bl	8001224 <_Unwind_VRS_Get>
 8001a94:	b2ed      	uxtb	r5, r5
 8001a96:	9b03      	ldr	r3, [sp, #12]
 8001a98:	0660      	lsls	r0, r4, #25
 8001a9a:	f105 0504 	add.w	r5, r5, #4
 8001a9e:	bf4c      	ite	mi
 8001aa0:	1b5d      	submi	r5, r3, r5
 8001aa2:	18ed      	addpl	r5, r5, r3
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	220d      	movs	r2, #13
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f8cd 9000 	str.w	r9, [sp]
 8001aae:	4630      	mov	r0, r6
 8001ab0:	9503      	str	r5, [sp, #12]
 8001ab2:	f7ff fbdd 	bl	8001270 <_Unwind_VRS_Set>
 8001ab6:	4638      	mov	r0, r7
 8001ab8:	f7ff ffa6 	bl	8001a08 <next_unwind_byte>
 8001abc:	28b0      	cmp	r0, #176	; 0xb0
 8001abe:	4604      	mov	r4, r0
 8001ac0:	d1db      	bne.n	8001a7a <__gnu_unwind_execute+0x1a>
 8001ac2:	f1b8 0f00 	cmp.w	r8, #0
 8001ac6:	f000 8094 	beq.w	8001bf2 <__gnu_unwind_execute+0x192>
 8001aca:	2000      	movs	r0, #0
 8001acc:	e01c      	b.n	8001b08 <__gnu_unwind_execute+0xa8>
 8001ace:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001ad2:	2b80      	cmp	r3, #128	; 0x80
 8001ad4:	d05c      	beq.n	8001b90 <__gnu_unwind_execute+0x130>
 8001ad6:	2b90      	cmp	r3, #144	; 0x90
 8001ad8:	d019      	beq.n	8001b0e <__gnu_unwind_execute+0xae>
 8001ada:	2ba0      	cmp	r3, #160	; 0xa0
 8001adc:	d02c      	beq.n	8001b38 <__gnu_unwind_execute+0xd8>
 8001ade:	2bb0      	cmp	r3, #176	; 0xb0
 8001ae0:	d03e      	beq.n	8001b60 <__gnu_unwind_execute+0x100>
 8001ae2:	2bc0      	cmp	r3, #192	; 0xc0
 8001ae4:	d06b      	beq.n	8001bbe <__gnu_unwind_execute+0x15e>
 8001ae6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001aea:	2bd0      	cmp	r3, #208	; 0xd0
 8001aec:	d10b      	bne.n	8001b06 <__gnu_unwind_execute+0xa6>
 8001aee:	f000 0207 	and.w	r2, r0, #7
 8001af2:	3201      	adds	r2, #1
 8001af4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001af8:	2305      	movs	r3, #5
 8001afa:	2101      	movs	r1, #1
 8001afc:	4630      	mov	r0, r6
 8001afe:	f7ff fd87 	bl	8001610 <_Unwind_VRS_Pop>
 8001b02:	2800      	cmp	r0, #0
 8001b04:	d0b3      	beq.n	8001a6e <__gnu_unwind_execute+0xe>
 8001b06:	2009      	movs	r0, #9
 8001b08:	b005      	add	sp, #20
 8001b0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b0e:	f000 030d 	and.w	r3, r0, #13
 8001b12:	2b0d      	cmp	r3, #13
 8001b14:	d0f7      	beq.n	8001b06 <__gnu_unwind_execute+0xa6>
 8001b16:	2300      	movs	r3, #0
 8001b18:	ad03      	add	r5, sp, #12
 8001b1a:	f000 020f 	and.w	r2, r0, #15
 8001b1e:	4619      	mov	r1, r3
 8001b20:	9500      	str	r5, [sp, #0]
 8001b22:	4630      	mov	r0, r6
 8001b24:	f7ff fb7e 	bl	8001224 <_Unwind_VRS_Get>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	9500      	str	r5, [sp, #0]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	220d      	movs	r2, #13
 8001b30:	4630      	mov	r0, r6
 8001b32:	f7ff fb9d 	bl	8001270 <_Unwind_VRS_Set>
 8001b36:	e79a      	b.n	8001a6e <__gnu_unwind_execute+0xe>
 8001b38:	43c3      	mvns	r3, r0
 8001b3a:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	411a      	asrs	r2, r3
 8001b44:	2300      	movs	r3, #0
 8001b46:	0701      	lsls	r1, r0, #28
 8001b48:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001b4c:	bf48      	it	mi
 8001b4e:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001b52:	4619      	mov	r1, r3
 8001b54:	4630      	mov	r0, r6
 8001b56:	f7ff fd5b 	bl	8001610 <_Unwind_VRS_Pop>
 8001b5a:	2800      	cmp	r0, #0
 8001b5c:	d1d3      	bne.n	8001b06 <__gnu_unwind_execute+0xa6>
 8001b5e:	e786      	b.n	8001a6e <__gnu_unwind_execute+0xe>
 8001b60:	28b1      	cmp	r0, #177	; 0xb1
 8001b62:	d057      	beq.n	8001c14 <__gnu_unwind_execute+0x1b4>
 8001b64:	28b2      	cmp	r0, #178	; 0xb2
 8001b66:	d068      	beq.n	8001c3a <__gnu_unwind_execute+0x1da>
 8001b68:	28b3      	cmp	r0, #179	; 0xb3
 8001b6a:	f000 8095 	beq.w	8001c98 <__gnu_unwind_execute+0x238>
 8001b6e:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001b72:	2bb4      	cmp	r3, #180	; 0xb4
 8001b74:	d0c7      	beq.n	8001b06 <__gnu_unwind_execute+0xa6>
 8001b76:	2301      	movs	r3, #1
 8001b78:	f000 0207 	and.w	r2, r0, #7
 8001b7c:	441a      	add	r2, r3
 8001b7e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001b82:	4619      	mov	r1, r3
 8001b84:	4630      	mov	r0, r6
 8001b86:	f7ff fd43 	bl	8001610 <_Unwind_VRS_Pop>
 8001b8a:	2800      	cmp	r0, #0
 8001b8c:	d1bb      	bne.n	8001b06 <__gnu_unwind_execute+0xa6>
 8001b8e:	e76e      	b.n	8001a6e <__gnu_unwind_execute+0xe>
 8001b90:	4638      	mov	r0, r7
 8001b92:	f7ff ff39 	bl	8001a08 <next_unwind_byte>
 8001b96:	0224      	lsls	r4, r4, #8
 8001b98:	4304      	orrs	r4, r0
 8001b9a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001b9e:	d0b2      	beq.n	8001b06 <__gnu_unwind_execute+0xa6>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	0124      	lsls	r4, r4, #4
 8001ba4:	b2a2      	uxth	r2, r4
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4630      	mov	r0, r6
 8001baa:	f7ff fd31 	bl	8001610 <_Unwind_VRS_Pop>
 8001bae:	2800      	cmp	r0, #0
 8001bb0:	d1a9      	bne.n	8001b06 <__gnu_unwind_execute+0xa6>
 8001bb2:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001bb6:	bf18      	it	ne
 8001bb8:	f04f 0801 	movne.w	r8, #1
 8001bbc:	e757      	b.n	8001a6e <__gnu_unwind_execute+0xe>
 8001bbe:	28c6      	cmp	r0, #198	; 0xc6
 8001bc0:	d07d      	beq.n	8001cbe <__gnu_unwind_execute+0x25e>
 8001bc2:	28c7      	cmp	r0, #199	; 0xc7
 8001bc4:	f000 8086 	beq.w	8001cd4 <__gnu_unwind_execute+0x274>
 8001bc8:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001bcc:	2bc0      	cmp	r3, #192	; 0xc0
 8001bce:	f000 8094 	beq.w	8001cfa <__gnu_unwind_execute+0x29a>
 8001bd2:	28c8      	cmp	r0, #200	; 0xc8
 8001bd4:	f000 809f 	beq.w	8001d16 <__gnu_unwind_execute+0x2b6>
 8001bd8:	28c9      	cmp	r0, #201	; 0xc9
 8001bda:	d194      	bne.n	8001b06 <__gnu_unwind_execute+0xa6>
 8001bdc:	4638      	mov	r0, r7
 8001bde:	f7ff ff13 	bl	8001a08 <next_unwind_byte>
 8001be2:	0302      	lsls	r2, r0, #12
 8001be4:	f000 000f 	and.w	r0, r0, #15
 8001be8:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001bec:	3001      	adds	r0, #1
 8001bee:	4302      	orrs	r2, r0
 8001bf0:	e782      	b.n	8001af8 <__gnu_unwind_execute+0x98>
 8001bf2:	ac03      	add	r4, sp, #12
 8001bf4:	4643      	mov	r3, r8
 8001bf6:	220e      	movs	r2, #14
 8001bf8:	4641      	mov	r1, r8
 8001bfa:	9400      	str	r4, [sp, #0]
 8001bfc:	4630      	mov	r0, r6
 8001bfe:	f7ff fb11 	bl	8001224 <_Unwind_VRS_Get>
 8001c02:	9400      	str	r4, [sp, #0]
 8001c04:	4630      	mov	r0, r6
 8001c06:	4643      	mov	r3, r8
 8001c08:	220f      	movs	r2, #15
 8001c0a:	4641      	mov	r1, r8
 8001c0c:	f7ff fb30 	bl	8001270 <_Unwind_VRS_Set>
 8001c10:	4640      	mov	r0, r8
 8001c12:	e779      	b.n	8001b08 <__gnu_unwind_execute+0xa8>
 8001c14:	4638      	mov	r0, r7
 8001c16:	f7ff fef7 	bl	8001a08 <next_unwind_byte>
 8001c1a:	2800      	cmp	r0, #0
 8001c1c:	f43f af73 	beq.w	8001b06 <__gnu_unwind_execute+0xa6>
 8001c20:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001c24:	f47f af6f 	bne.w	8001b06 <__gnu_unwind_execute+0xa6>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4630      	mov	r0, r6
 8001c2e:	f7ff fcef 	bl	8001610 <_Unwind_VRS_Pop>
 8001c32:	2800      	cmp	r0, #0
 8001c34:	f47f af67 	bne.w	8001b06 <__gnu_unwind_execute+0xa6>
 8001c38:	e719      	b.n	8001a6e <__gnu_unwind_execute+0xe>
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f10d 090c 	add.w	r9, sp, #12
 8001c40:	220d      	movs	r2, #13
 8001c42:	4619      	mov	r1, r3
 8001c44:	f8cd 9000 	str.w	r9, [sp]
 8001c48:	4630      	mov	r0, r6
 8001c4a:	f7ff faeb 	bl	8001224 <_Unwind_VRS_Get>
 8001c4e:	4638      	mov	r0, r7
 8001c50:	f7ff feda 	bl	8001a08 <next_unwind_byte>
 8001c54:	0602      	lsls	r2, r0, #24
 8001c56:	f04f 0402 	mov.w	r4, #2
 8001c5a:	d50c      	bpl.n	8001c76 <__gnu_unwind_execute+0x216>
 8001c5c:	9b03      	ldr	r3, [sp, #12]
 8001c5e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001c62:	40a0      	lsls	r0, r4
 8001c64:	4403      	add	r3, r0
 8001c66:	4638      	mov	r0, r7
 8001c68:	9303      	str	r3, [sp, #12]
 8001c6a:	f7ff fecd 	bl	8001a08 <next_unwind_byte>
 8001c6e:	0603      	lsls	r3, r0, #24
 8001c70:	f104 0407 	add.w	r4, r4, #7
 8001c74:	d4f2      	bmi.n	8001c5c <__gnu_unwind_execute+0x1fc>
 8001c76:	2300      	movs	r3, #0
 8001c78:	9903      	ldr	r1, [sp, #12]
 8001c7a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001c7e:	40a2      	lsls	r2, r4
 8001c80:	f501 7101 	add.w	r1, r1, #516	; 0x204
 8001c84:	188c      	adds	r4, r1, r2
 8001c86:	f8cd 9000 	str.w	r9, [sp]
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	220d      	movs	r2, #13
 8001c8e:	4630      	mov	r0, r6
 8001c90:	9403      	str	r4, [sp, #12]
 8001c92:	f7ff faed 	bl	8001270 <_Unwind_VRS_Set>
 8001c96:	e6ea      	b.n	8001a6e <__gnu_unwind_execute+0xe>
 8001c98:	4638      	mov	r0, r7
 8001c9a:	f7ff feb5 	bl	8001a08 <next_unwind_byte>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	0301      	lsls	r1, r0, #12
 8001ca2:	f000 000f 	and.w	r0, r0, #15
 8001ca6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001caa:	18c2      	adds	r2, r0, r3
 8001cac:	430a      	orrs	r2, r1
 8001cae:	4630      	mov	r0, r6
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f7ff fcad 	bl	8001610 <_Unwind_VRS_Pop>
 8001cb6:	2800      	cmp	r0, #0
 8001cb8:	f47f af25 	bne.w	8001b06 <__gnu_unwind_execute+0xa6>
 8001cbc:	e6d7      	b.n	8001a6e <__gnu_unwind_execute+0xe>
 8001cbe:	4638      	mov	r0, r7
 8001cc0:	f7ff fea2 	bl	8001a08 <next_unwind_byte>
 8001cc4:	0301      	lsls	r1, r0, #12
 8001cc6:	f000 000f 	and.w	r0, r0, #15
 8001cca:	2303      	movs	r3, #3
 8001ccc:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001cd0:	1c42      	adds	r2, r0, #1
 8001cd2:	e7eb      	b.n	8001cac <__gnu_unwind_execute+0x24c>
 8001cd4:	4638      	mov	r0, r7
 8001cd6:	f7ff fe97 	bl	8001a08 <next_unwind_byte>
 8001cda:	2800      	cmp	r0, #0
 8001cdc:	f43f af13 	beq.w	8001b06 <__gnu_unwind_execute+0xa6>
 8001ce0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001ce4:	f47f af0f 	bne.w	8001b06 <__gnu_unwind_execute+0xa6>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	2104      	movs	r1, #4
 8001cec:	4630      	mov	r0, r6
 8001cee:	f7ff fc8f 	bl	8001610 <_Unwind_VRS_Pop>
 8001cf2:	2800      	cmp	r0, #0
 8001cf4:	f47f af07 	bne.w	8001b06 <__gnu_unwind_execute+0xa6>
 8001cf8:	e6b9      	b.n	8001a6e <__gnu_unwind_execute+0xe>
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	f000 020f 	and.w	r2, r0, #15
 8001d00:	3201      	adds	r2, #1
 8001d02:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001d06:	4619      	mov	r1, r3
 8001d08:	4630      	mov	r0, r6
 8001d0a:	f7ff fc81 	bl	8001610 <_Unwind_VRS_Pop>
 8001d0e:	2800      	cmp	r0, #0
 8001d10:	f47f aef9 	bne.w	8001b06 <__gnu_unwind_execute+0xa6>
 8001d14:	e6ab      	b.n	8001a6e <__gnu_unwind_execute+0xe>
 8001d16:	4638      	mov	r0, r7
 8001d18:	f7ff fe76 	bl	8001a08 <next_unwind_byte>
 8001d1c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001d20:	f000 030f 	and.w	r3, r0, #15
 8001d24:	3210      	adds	r2, #16
 8001d26:	3301      	adds	r3, #1
 8001d28:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001d2c:	e6e4      	b.n	8001af8 <__gnu_unwind_execute+0x98>
 8001d2e:	bf00      	nop

08001d30 <__gnu_unwind_frame>:
 8001d30:	b530      	push	{r4, r5, lr}
 8001d32:	2403      	movs	r4, #3
 8001d34:	460d      	mov	r5, r1
 8001d36:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001d38:	b085      	sub	sp, #20
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	f88d 400c 	strb.w	r4, [sp, #12]
 8001d40:	79dc      	ldrb	r4, [r3, #7]
 8001d42:	0212      	lsls	r2, r2, #8
 8001d44:	3308      	adds	r3, #8
 8001d46:	a901      	add	r1, sp, #4
 8001d48:	4628      	mov	r0, r5
 8001d4a:	9201      	str	r2, [sp, #4]
 8001d4c:	f88d 400d 	strb.w	r4, [sp, #13]
 8001d50:	9302      	str	r3, [sp, #8]
 8001d52:	f7ff fe85 	bl	8001a60 <__gnu_unwind_execute>
 8001d56:	b005      	add	sp, #20
 8001d58:	bd30      	pop	{r4, r5, pc}
 8001d5a:	bf00      	nop

08001d5c <_Unwind_GetRegionStart>:
 8001d5c:	b508      	push	{r3, lr}
 8001d5e:	f7ff fe7d 	bl	8001a5c <unwind_UCB_from_context>
 8001d62:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001d64:	bd08      	pop	{r3, pc}
 8001d66:	bf00      	nop

08001d68 <_Unwind_GetLanguageSpecificData>:
 8001d68:	b508      	push	{r3, lr}
 8001d6a:	f7ff fe77 	bl	8001a5c <unwind_UCB_from_context>
 8001d6e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001d70:	79c3      	ldrb	r3, [r0, #7]
 8001d72:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001d76:	3008      	adds	r0, #8
 8001d78:	bd08      	pop	{r3, pc}
 8001d7a:	bf00      	nop

08001d7c <_Unwind_GetTextRelBase>:
 8001d7c:	b508      	push	{r3, lr}
 8001d7e:	f008 ffa3 	bl	800acc8 <abort>
 8001d82:	bf00      	nop

08001d84 <_Unwind_GetDataRelBase>:
 8001d84:	b508      	push	{r3, lr}
 8001d86:	f7ff fff9 	bl	8001d7c <_Unwind_GetTextRelBase>
 8001d8a:	bf00      	nop

08001d8c <__aeabi_idiv0>:
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop

08001d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d90:	b510      	push	{r4, lr}
 8001d92:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d94:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <HAL_InitTick+0x40>)
 8001d96:	7818      	ldrb	r0, [r3, #0]
 8001d98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d9c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001da0:	4a0c      	ldr	r2, [pc, #48]	; (8001dd4 <HAL_InitTick+0x44>)
 8001da2:	6810      	ldr	r0, [r2, #0]
 8001da4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001da8:	f000 fbd6 	bl	8002558 <HAL_SYSTICK_Config>
 8001dac:	b968      	cbnz	r0, 8001dca <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dae:	2c0f      	cmp	r4, #15
 8001db0:	d901      	bls.n	8001db6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001db2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8001db4:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db6:	2200      	movs	r2, #0
 8001db8:	4621      	mov	r1, r4
 8001dba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dbe:	f000 fb8d 	bl	80024dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc2:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_InitTick+0x48>)
 8001dc4:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001dca:	2001      	movs	r0, #1
 8001dcc:	bd10      	pop	{r4, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	200000b0 	.word	0x200000b0
 8001dd8:	20000004 	.word	0x20000004

08001ddc <HAL_Init>:
{
 8001ddc:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dde:	4a07      	ldr	r2, [pc, #28]	; (8001dfc <HAL_Init+0x20>)
 8001de0:	6813      	ldr	r3, [r2, #0]
 8001de2:	f043 0310 	orr.w	r3, r3, #16
 8001de6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de8:	2003      	movs	r0, #3
 8001dea:	f000 fb65 	bl	80024b8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7ff ffce 	bl	8001d90 <HAL_InitTick>
  HAL_MspInit();
 8001df4:	f002 fc46 	bl	8004684 <HAL_MspInit>
}
 8001df8:	2000      	movs	r0, #0
 8001dfa:	bd08      	pop	{r3, pc}
 8001dfc:	40022000 	.word	0x40022000

08001e00 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001e00:	4a03      	ldr	r2, [pc, #12]	; (8001e10 <HAL_IncTick+0x10>)
 8001e02:	6811      	ldr	r1, [r2, #0]
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <HAL_IncTick+0x14>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	440b      	add	r3, r1
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	2000120c 	.word	0x2000120c
 8001e14:	20000000 	.word	0x20000000

08001e18 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001e18:	4b01      	ldr	r3, [pc, #4]	; (8001e20 <HAL_GetTick+0x8>)
 8001e1a:	6818      	ldr	r0, [r3, #0]
}
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	2000120c 	.word	0x2000120c

08001e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e24:	b538      	push	{r3, r4, r5, lr}
 8001e26:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e28:	f7ff fff6 	bl	8001e18 <HAL_GetTick>
 8001e2c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e2e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8001e32:	d002      	beq.n	8001e3a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e34:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <HAL_Delay+0x24>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e3a:	f7ff ffed 	bl	8001e18 <HAL_GetTick>
 8001e3e:	1b40      	subs	r0, r0, r5
 8001e40:	4284      	cmp	r4, r0
 8001e42:	d8fa      	bhi.n	8001e3a <HAL_Delay+0x16>
  {
  }
}
 8001e44:	bd38      	pop	{r3, r4, r5, pc}
 8001e46:	bf00      	nop
 8001e48:	20000000 	.word	0x20000000

08001e4c <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e4c:	2800      	cmp	r0, #0
 8001e4e:	f000 80a1 	beq.w	8001f94 <HAL_CAN_Init+0x148>
{
 8001e52:	b538      	push	{r3, r4, r5, lr}
 8001e54:	4604      	mov	r4, r0
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e56:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001e5a:	b1d3      	cbz	r3, 8001e92 <HAL_CAN_Init+0x46>
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e5c:	6822      	ldr	r2, [r4, #0]
 8001e5e:	6813      	ldr	r3, [r2, #0]
 8001e60:	f023 0302 	bic.w	r3, r3, #2
 8001e64:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e66:	f7ff ffd7 	bl	8001e18 <HAL_GetTick>
 8001e6a:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e6c:	6823      	ldr	r3, [r4, #0]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	f012 0f02 	tst.w	r2, #2
 8001e74:	d010      	beq.n	8001e98 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e76:	f7ff ffcf 	bl	8001e18 <HAL_GetTick>
 8001e7a:	1b40      	subs	r0, r0, r5
 8001e7c:	280a      	cmp	r0, #10
 8001e7e:	d9f5      	bls.n	8001e6c <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e86:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e88:	2305      	movs	r3, #5
 8001e8a:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8001e8e:	2001      	movs	r0, #1
 8001e90:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8001e92:	f002 fc47 	bl	8004724 <HAL_CAN_MspInit>
 8001e96:	e7e1      	b.n	8001e5c <HAL_CAN_Init+0x10>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ea0:	f7ff ffba 	bl	8001e18 <HAL_GetTick>
 8001ea4:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ea6:	6823      	ldr	r3, [r4, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	f012 0f01 	tst.w	r2, #1
 8001eae:	d10d      	bne.n	8001ecc <HAL_CAN_Init+0x80>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001eb0:	f7ff ffb2 	bl	8001e18 <HAL_GetTick>
 8001eb4:	1b40      	subs	r0, r0, r5
 8001eb6:	280a      	cmp	r0, #10
 8001eb8:	d9f5      	bls.n	8001ea6 <HAL_CAN_Init+0x5a>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec0:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ec2:	2305      	movs	r3, #5
 8001ec4:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8001ec8:	2001      	movs	r0, #1
 8001eca:	bd38      	pop	{r3, r4, r5, pc}
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ecc:	7e22      	ldrb	r2, [r4, #24]
 8001ece:	2a01      	cmp	r2, #1
 8001ed0:	d03d      	beq.n	8001f4e <HAL_CAN_Init+0x102>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ed8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001eda:	7e63      	ldrb	r3, [r4, #25]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d03b      	beq.n	8001f58 <HAL_CAN_Init+0x10c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ee0:	6822      	ldr	r2, [r4, #0]
 8001ee2:	6813      	ldr	r3, [r2, #0]
 8001ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ee8:	6013      	str	r3, [r2, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001eea:	7ea3      	ldrb	r3, [r4, #26]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d039      	beq.n	8001f64 <HAL_CAN_Init+0x118>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ef0:	6822      	ldr	r2, [r4, #0]
 8001ef2:	6813      	ldr	r3, [r2, #0]
 8001ef4:	f023 0320 	bic.w	r3, r3, #32
 8001ef8:	6013      	str	r3, [r2, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001efa:	7ee3      	ldrb	r3, [r4, #27]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d037      	beq.n	8001f70 <HAL_CAN_Init+0x124>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f00:	6822      	ldr	r2, [r4, #0]
 8001f02:	6813      	ldr	r3, [r2, #0]
 8001f04:	f043 0310 	orr.w	r3, r3, #16
 8001f08:	6013      	str	r3, [r2, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f0a:	7f23      	ldrb	r3, [r4, #28]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d035      	beq.n	8001f7c <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f10:	6822      	ldr	r2, [r4, #0]
 8001f12:	6813      	ldr	r3, [r2, #0]
 8001f14:	f023 0308 	bic.w	r3, r3, #8
 8001f18:	6013      	str	r3, [r2, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f1a:	7f63      	ldrb	r3, [r4, #29]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d033      	beq.n	8001f88 <HAL_CAN_Init+0x13c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f20:	6822      	ldr	r2, [r4, #0]
 8001f22:	6813      	ldr	r3, [r2, #0]
 8001f24:	f023 0304 	bic.w	r3, r3, #4
 8001f28:	6013      	str	r3, [r2, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f2a:	6821      	ldr	r1, [r4, #0]
 8001f2c:	68a3      	ldr	r3, [r4, #8]
 8001f2e:	68e2      	ldr	r2, [r4, #12]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	6922      	ldr	r2, [r4, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	6962      	ldr	r2, [r4, #20]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	6862      	ldr	r2, [r4, #4]
 8001f3c:	3a01      	subs	r2, #1
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61cb      	str	r3, [r1, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f42:	2000      	movs	r0, #0
 8001f44:	6260      	str	r0, [r4, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f46:	2301      	movs	r3, #1
 8001f48:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8001f4c:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	e7c0      	b.n	8001eda <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f58:	6822      	ldr	r2, [r4, #0]
 8001f5a:	6813      	ldr	r3, [r2, #0]
 8001f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	e7c2      	b.n	8001eea <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f64:	6822      	ldr	r2, [r4, #0]
 8001f66:	6813      	ldr	r3, [r2, #0]
 8001f68:	f043 0320 	orr.w	r3, r3, #32
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e7c4      	b.n	8001efa <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f70:	6822      	ldr	r2, [r4, #0]
 8001f72:	6813      	ldr	r3, [r2, #0]
 8001f74:	f023 0310 	bic.w	r3, r3, #16
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e7c6      	b.n	8001f0a <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f7c:	6822      	ldr	r2, [r4, #0]
 8001f7e:	6813      	ldr	r3, [r2, #0]
 8001f80:	f043 0308 	orr.w	r3, r3, #8
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	e7c8      	b.n	8001f1a <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f88:	6822      	ldr	r2, [r4, #0]
 8001f8a:	6813      	ldr	r3, [r2, #0]
 8001f8c:	f043 0304 	orr.w	r3, r3, #4
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e7ca      	b.n	8001f2a <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 8001f94:	2001      	movs	r0, #1
 8001f96:	4770      	bx	lr

08001f98 <HAL_CAN_ConfigFilter>:
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f98:	6802      	ldr	r2, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f9a:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d905      	bls.n	8001fb2 <HAL_CAN_ConfigFilter+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fa6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fac:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001fae:	2001      	movs	r0, #1
 8001fb0:	4770      	bx	lr
{
 8001fb2:	b470      	push	{r4, r5, r6}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001fb4:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001fc0:	694b      	ldr	r3, [r1, #20]
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	fa00 f303 	lsl.w	r3, r0, r3
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001fcc:	f8d2 421c 	ldr.w	r4, [r2, #540]	; 0x21c
 8001fd0:	43d8      	mvns	r0, r3
 8001fd2:	4004      	ands	r4, r0
 8001fd4:	f8c2 421c 	str.w	r4, [r2, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001fd8:	69cc      	ldr	r4, [r1, #28]
 8001fda:	b9ac      	cbnz	r4, 8002008 <HAL_CAN_ConfigFilter+0x70>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001fdc:	f8d2 420c 	ldr.w	r4, [r2, #524]	; 0x20c
 8001fe0:	4004      	ands	r4, r0
 8001fe2:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fe6:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fe8:	68ce      	ldr	r6, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fea:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fec:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ff0:	3448      	adds	r4, #72	; 0x48
 8001ff2:	f842 5034 	str.w	r5, [r2, r4, lsl #3]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ff6:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ff8:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ffa:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ffc:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002000:	3448      	adds	r4, #72	; 0x48
 8002002:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 8002006:	6065      	str	r5, [r4, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002008:	69cc      	ldr	r4, [r1, #28]
 800200a:	2c01      	cmp	r4, #1
 800200c:	d019      	beq.n	8002042 <HAL_CAN_ConfigFilter+0xaa>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800200e:	698c      	ldr	r4, [r1, #24]
 8002010:	bb74      	cbnz	r4, 8002070 <HAL_CAN_ConfigFilter+0xd8>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002012:	f8d2 4204 	ldr.w	r4, [r2, #516]	; 0x204
 8002016:	4004      	ands	r4, r0
 8002018:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800201c:	690c      	ldr	r4, [r1, #16]
 800201e:	bb6c      	cbnz	r4, 800207c <HAL_CAN_ConfigFilter+0xe4>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002020:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8002024:	4020      	ands	r0, r4
 8002026:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800202a:	6a09      	ldr	r1, [r1, #32]
 800202c:	2901      	cmp	r1, #1
 800202e:	d02b      	beq.n	8002088 <HAL_CAN_ConfigFilter+0xf0>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002030:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8002034:	f023 0301 	bic.w	r3, r3, #1
 8002038:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 800203c:	2000      	movs	r0, #0
  }
}
 800203e:	bc70      	pop	{r4, r5, r6}
 8002040:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002042:	f8d2 420c 	ldr.w	r4, [r2, #524]	; 0x20c
 8002046:	431c      	orrs	r4, r3
 8002048:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800204c:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800204e:	680e      	ldr	r6, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002050:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002052:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002056:	3448      	adds	r4, #72	; 0x48
 8002058:	f842 5034 	str.w	r5, [r2, r4, lsl #3]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800205c:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800205e:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002060:	898d      	ldrh	r5, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002062:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002066:	3448      	adds	r4, #72	; 0x48
 8002068:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 800206c:	6065      	str	r5, [r4, #4]
 800206e:	e7ce      	b.n	800200e <HAL_CAN_ConfigFilter+0x76>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002070:	f8d2 4204 	ldr.w	r4, [r2, #516]	; 0x204
 8002074:	431c      	orrs	r4, r3
 8002076:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204
 800207a:	e7cf      	b.n	800201c <HAL_CAN_ConfigFilter+0x84>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800207c:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
 8002080:	4318      	orrs	r0, r3
 8002082:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
 8002086:	e7d0      	b.n	800202a <HAL_CAN_ConfigFilter+0x92>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002088:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 800208c:	430b      	orrs	r3, r1
 800208e:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
 8002092:	e7cd      	b.n	8002030 <HAL_CAN_ConfigFilter+0x98>

08002094 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002094:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002096:	f890 3020 	ldrb.w	r3, [r0, #32]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b01      	cmp	r3, #1
 800209e:	d005      	beq.n	80020ac <HAL_CAN_Start+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80020a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80020a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020a6:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80020a8:	2001      	movs	r0, #1
  }
}
 80020aa:	bd38      	pop	{r3, r4, r5, pc}
 80020ac:	4604      	mov	r4, r0
    hcan->State = HAL_CAN_STATE_LISTENING;
 80020ae:	2302      	movs	r3, #2
 80020b0:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020b4:	6802      	ldr	r2, [r0, #0]
 80020b6:	6813      	ldr	r3, [r2, #0]
 80020b8:	f023 0301 	bic.w	r3, r3, #1
 80020bc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80020be:	f7ff feab 	bl	8001e18 <HAL_GetTick>
 80020c2:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020c4:	6823      	ldr	r3, [r4, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f013 0f01 	tst.w	r3, #1
 80020cc:	d00d      	beq.n	80020ea <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020ce:	f7ff fea3 	bl	8001e18 <HAL_GetTick>
 80020d2:	1b40      	subs	r0, r0, r5
 80020d4:	280a      	cmp	r0, #10
 80020d6:	d9f5      	bls.n	80020c4 <HAL_CAN_Start+0x30>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020de:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80020e0:	2305      	movs	r3, #5
 80020e2:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 80020e6:	2001      	movs	r0, #1
 80020e8:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020ea:	2000      	movs	r0, #0
 80020ec:	6260      	str	r0, [r4, #36]	; 0x24
    return HAL_OK;
 80020ee:	bd38      	pop	{r3, r4, r5, pc}

080020f0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80020f0:	b430      	push	{r4, r5}
  HAL_CAN_StateTypeDef state = hcan->State;
 80020f2:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80020f6:	3c01      	subs	r4, #1
 80020f8:	b2e4      	uxtb	r4, r4
 80020fa:	2c01      	cmp	r4, #1
 80020fc:	d906      	bls.n	800210c <HAL_CAN_GetRxMessage+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002104:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002106:	2001      	movs	r0, #1
  }
}
 8002108:	bc30      	pop	{r4, r5}
 800210a:	4770      	bx	lr
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800210c:	2900      	cmp	r1, #0
 800210e:	d16f      	bne.n	80021f0 <HAL_CAN_GetRxMessage+0x100>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002110:	6804      	ldr	r4, [r0, #0]
 8002112:	68e4      	ldr	r4, [r4, #12]
 8002114:	f014 0f03 	tst.w	r4, #3
 8002118:	d064      	beq.n	80021e4 <HAL_CAN_GetRxMessage+0xf4>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800211a:	6805      	ldr	r5, [r0, #0]
 800211c:	f101 041b 	add.w	r4, r1, #27
 8002120:	0124      	lsls	r4, r4, #4
 8002122:	592c      	ldr	r4, [r5, r4]
 8002124:	f004 0404 	and.w	r4, r4, #4
 8002128:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800212a:	2c00      	cmp	r4, #0
 800212c:	d16b      	bne.n	8002206 <HAL_CAN_GetRxMessage+0x116>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800212e:	6805      	ldr	r5, [r0, #0]
 8002130:	f101 041b 	add.w	r4, r1, #27
 8002134:	0124      	lsls	r4, r4, #4
 8002136:	592c      	ldr	r4, [r5, r4]
 8002138:	0d64      	lsrs	r4, r4, #21
 800213a:	6014      	str	r4, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 800213c:	6805      	ldr	r5, [r0, #0]
 800213e:	f101 041b 	add.w	r4, r1, #27
 8002142:	0124      	lsls	r4, r4, #4
 8002144:	592d      	ldr	r5, [r5, r4]
 8002146:	f3c5 0540 	ubfx	r5, r5, #1, #1
 800214a:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800214c:	6805      	ldr	r5, [r0, #0]
 800214e:	4425      	add	r5, r4
 8002150:	686d      	ldr	r5, [r5, #4]
 8002152:	f005 050f 	and.w	r5, r5, #15
 8002156:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002158:	6805      	ldr	r5, [r0, #0]
 800215a:	4425      	add	r5, r4
 800215c:	686d      	ldr	r5, [r5, #4]
 800215e:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8002162:	6195      	str	r5, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002164:	6805      	ldr	r5, [r0, #0]
 8002166:	442c      	add	r4, r5
 8002168:	6864      	ldr	r4, [r4, #4]
 800216a:	0c24      	lsrs	r4, r4, #16
 800216c:	6154      	str	r4, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800216e:	6804      	ldr	r4, [r0, #0]
 8002170:	010a      	lsls	r2, r1, #4
 8002172:	4414      	add	r4, r2
 8002174:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8002178:	701c      	strb	r4, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800217a:	6804      	ldr	r4, [r0, #0]
 800217c:	4414      	add	r4, r2
 800217e:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8002182:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8002186:	705c      	strb	r4, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002188:	6804      	ldr	r4, [r0, #0]
 800218a:	4414      	add	r4, r2
 800218c:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8002190:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8002194:	709c      	strb	r4, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002196:	6804      	ldr	r4, [r0, #0]
 8002198:	4414      	add	r4, r2
 800219a:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 800219e:	0e24      	lsrs	r4, r4, #24
 80021a0:	70dc      	strb	r4, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80021a2:	6804      	ldr	r4, [r0, #0]
 80021a4:	4414      	add	r4, r2
 80021a6:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 80021aa:	711c      	strb	r4, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80021ac:	6804      	ldr	r4, [r0, #0]
 80021ae:	4414      	add	r4, r2
 80021b0:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 80021b4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80021b8:	715c      	strb	r4, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80021ba:	6804      	ldr	r4, [r0, #0]
 80021bc:	4414      	add	r4, r2
 80021be:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 80021c2:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80021c6:	719c      	strb	r4, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80021c8:	6804      	ldr	r4, [r0, #0]
 80021ca:	4422      	add	r2, r4
 80021cc:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80021d0:	0e12      	lsrs	r2, r2, #24
 80021d2:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021d4:	b9f9      	cbnz	r1, 8002216 <HAL_CAN_GetRxMessage+0x126>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80021d6:	6802      	ldr	r2, [r0, #0]
 80021d8:	68d3      	ldr	r3, [r2, #12]
 80021da:	f043 0320 	orr.w	r3, r3, #32
 80021de:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 80021e0:	2000      	movs	r0, #0
 80021e2:	e791      	b.n	8002108 <HAL_CAN_GetRxMessage+0x18>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80021e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021ea:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 80021ec:	2001      	movs	r0, #1
 80021ee:	e78b      	b.n	8002108 <HAL_CAN_GetRxMessage+0x18>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80021f0:	6804      	ldr	r4, [r0, #0]
 80021f2:	6924      	ldr	r4, [r4, #16]
 80021f4:	f014 0f03 	tst.w	r4, #3
 80021f8:	d18f      	bne.n	800211a <HAL_CAN_GetRxMessage+0x2a>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80021fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002200:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8002202:	2001      	movs	r0, #1
 8002204:	e780      	b.n	8002108 <HAL_CAN_GetRxMessage+0x18>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002206:	6805      	ldr	r5, [r0, #0]
 8002208:	f101 041b 	add.w	r4, r1, #27
 800220c:	0124      	lsls	r4, r4, #4
 800220e:	592c      	ldr	r4, [r5, r4]
 8002210:	08e4      	lsrs	r4, r4, #3
 8002212:	6054      	str	r4, [r2, #4]
 8002214:	e792      	b.n	800213c <HAL_CAN_GetRxMessage+0x4c>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002216:	6802      	ldr	r2, [r0, #0]
 8002218:	6913      	ldr	r3, [r2, #16]
 800221a:	f043 0320 	orr.w	r3, r3, #32
 800221e:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 8002220:	2000      	movs	r0, #0
 8002222:	e771      	b.n	8002108 <HAL_CAN_GetRxMessage+0x18>

08002224 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8002224:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002228:	3b01      	subs	r3, #1
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b01      	cmp	r3, #1
 800222e:	d905      	bls.n	800223c <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002230:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002232:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002236:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002238:	2001      	movs	r0, #1
  }
}
 800223a:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800223c:	6802      	ldr	r2, [r0, #0]
 800223e:	6953      	ldr	r3, [r2, #20]
 8002240:	4319      	orrs	r1, r3
 8002242:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8002244:	2000      	movs	r0, #0
 8002246:	4770      	bx	lr

08002248 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002248:	4770      	bx	lr

0800224a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800224a:	4770      	bx	lr

0800224c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800224c:	4770      	bx	lr

0800224e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800224e:	4770      	bx	lr

08002250 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002250:	4770      	bx	lr

08002252 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002252:	4770      	bx	lr

08002254 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002254:	4770      	bx	lr

08002256 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002256:	4770      	bx	lr

08002258 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002258:	4770      	bx	lr

0800225a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800225a:	4770      	bx	lr

0800225c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800225c:	4770      	bx	lr

0800225e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800225e:	4770      	bx	lr

08002260 <HAL_CAN_IRQHandler>:
{
 8002260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002264:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002266:	6803      	ldr	r3, [r0, #0]
 8002268:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800226a:	685f      	ldr	r7, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800226c:	689e      	ldr	r6, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800226e:	f8d3 900c 	ldr.w	r9, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002272:	f8d3 8010 	ldr.w	r8, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002276:	f8d3 a018 	ldr.w	sl, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800227a:	f014 0f01 	tst.w	r4, #1
 800227e:	d05a      	beq.n	8002336 <HAL_CAN_IRQHandler+0xd6>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002280:	f016 0f01 	tst.w	r6, #1
 8002284:	d017      	beq.n	80022b6 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002286:	2201      	movs	r2, #1
 8002288:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800228a:	f016 0f02 	tst.w	r6, #2
 800228e:	d108      	bne.n	80022a2 <HAL_CAN_IRQHandler+0x42>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002290:	f016 0f04 	tst.w	r6, #4
 8002294:	d130      	bne.n	80022f8 <HAL_CAN_IRQHandler+0x98>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002296:	f016 0f08 	tst.w	r6, #8
 800229a:	d007      	beq.n	80022ac <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800229c:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
 80022a0:	e00b      	b.n	80022ba <HAL_CAN_IRQHandler+0x5a>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80022a2:	f7ff ffd1 	bl	8002248 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80022a6:	f04f 0b00 	mov.w	fp, #0
 80022aa:	e006      	b.n	80022ba <HAL_CAN_IRQHandler+0x5a>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80022ac:	f7ff ffcf 	bl	800224e <HAL_CAN_TxMailbox0AbortCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80022b0:	f04f 0b00 	mov.w	fp, #0
 80022b4:	e001      	b.n	80022ba <HAL_CAN_IRQHandler+0x5a>
 80022b6:	f04f 0b00 	mov.w	fp, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80022ba:	f416 7f80 	tst.w	r6, #256	; 0x100
 80022be:	d00b      	beq.n	80022d8 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80022c0:	682b      	ldr	r3, [r5, #0]
 80022c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022c6:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80022c8:	f416 7f00 	tst.w	r6, #512	; 0x200
 80022cc:	d117      	bne.n	80022fe <HAL_CAN_IRQHandler+0x9e>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80022ce:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80022d2:	d018      	beq.n	8002306 <HAL_CAN_IRQHandler+0xa6>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80022d4:	f44b 5b00 	orr.w	fp, fp, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80022d8:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80022dc:	d02d      	beq.n	800233a <HAL_CAN_IRQHandler+0xda>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80022de:	682b      	ldr	r3, [r5, #0]
 80022e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022e4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80022e6:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 80022ea:	d116      	bne.n	800231a <HAL_CAN_IRQHandler+0xba>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80022ec:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 80022f0:	d017      	beq.n	8002322 <HAL_CAN_IRQHandler+0xc2>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80022f2:	f44b 4b00 	orr.w	fp, fp, #32768	; 0x8000
 80022f6:	e020      	b.n	800233a <HAL_CAN_IRQHandler+0xda>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80022f8:	f44f 6b00 	mov.w	fp, #2048	; 0x800
 80022fc:	e7dd      	b.n	80022ba <HAL_CAN_IRQHandler+0x5a>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80022fe:	4628      	mov	r0, r5
 8002300:	f7ff ffa3 	bl	800224a <HAL_CAN_TxMailbox1CompleteCallback>
 8002304:	e7e8      	b.n	80022d8 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002306:	f416 6f00 	tst.w	r6, #2048	; 0x800
 800230a:	d002      	beq.n	8002312 <HAL_CAN_IRQHandler+0xb2>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800230c:	f44b 4b80 	orr.w	fp, fp, #16384	; 0x4000
 8002310:	e7e2      	b.n	80022d8 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002312:	4628      	mov	r0, r5
 8002314:	f7ff ff9c 	bl	8002250 <HAL_CAN_TxMailbox1AbortCallback>
 8002318:	e7de      	b.n	80022d8 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800231a:	4628      	mov	r0, r5
 800231c:	f7ff ff96 	bl	800224c <HAL_CAN_TxMailbox2CompleteCallback>
 8002320:	e00b      	b.n	800233a <HAL_CAN_IRQHandler+0xda>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002322:	f416 2f00 	tst.w	r6, #524288	; 0x80000
 8002326:	d002      	beq.n	800232e <HAL_CAN_IRQHandler+0xce>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002328:	f44b 3b80 	orr.w	fp, fp, #65536	; 0x10000
 800232c:	e005      	b.n	800233a <HAL_CAN_IRQHandler+0xda>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800232e:	4628      	mov	r0, r5
 8002330:	f7ff ff8f 	bl	8002252 <HAL_CAN_TxMailbox2AbortCallback>
 8002334:	e001      	b.n	800233a <HAL_CAN_IRQHandler+0xda>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002336:	f04f 0b00 	mov.w	fp, #0
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800233a:	f014 0f08 	tst.w	r4, #8
 800233e:	d007      	beq.n	8002350 <HAL_CAN_IRQHandler+0xf0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002340:	f019 0f10 	tst.w	r9, #16
 8002344:	d004      	beq.n	8002350 <HAL_CAN_IRQHandler+0xf0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002346:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800234a:	682b      	ldr	r3, [r5, #0]
 800234c:	2210      	movs	r2, #16
 800234e:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002350:	f014 0f04 	tst.w	r4, #4
 8002354:	d002      	beq.n	800235c <HAL_CAN_IRQHandler+0xfc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002356:	f019 0f08 	tst.w	r9, #8
 800235a:	d160      	bne.n	800241e <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800235c:	f014 0f02 	tst.w	r4, #2
 8002360:	d004      	beq.n	800236c <HAL_CAN_IRQHandler+0x10c>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002362:	682b      	ldr	r3, [r5, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f013 0f03 	tst.w	r3, #3
 800236a:	d15f      	bne.n	800242c <HAL_CAN_IRQHandler+0x1cc>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800236c:	f014 0f40 	tst.w	r4, #64	; 0x40
 8002370:	d007      	beq.n	8002382 <HAL_CAN_IRQHandler+0x122>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002372:	f018 0f10 	tst.w	r8, #16
 8002376:	d004      	beq.n	8002382 <HAL_CAN_IRQHandler+0x122>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002378:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800237c:	682b      	ldr	r3, [r5, #0]
 800237e:	2210      	movs	r2, #16
 8002380:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002382:	f014 0f20 	tst.w	r4, #32
 8002386:	d002      	beq.n	800238e <HAL_CAN_IRQHandler+0x12e>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002388:	f018 0f08 	tst.w	r8, #8
 800238c:	d152      	bne.n	8002434 <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800238e:	f014 0f10 	tst.w	r4, #16
 8002392:	d004      	beq.n	800239e <HAL_CAN_IRQHandler+0x13e>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002394:	682b      	ldr	r3, [r5, #0]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	f013 0f03 	tst.w	r3, #3
 800239c:	d151      	bne.n	8002442 <HAL_CAN_IRQHandler+0x1e2>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800239e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 80023a2:	d002      	beq.n	80023aa <HAL_CAN_IRQHandler+0x14a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80023a4:	f017 0f10 	tst.w	r7, #16
 80023a8:	d14f      	bne.n	800244a <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80023aa:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 80023ae:	d002      	beq.n	80023b6 <HAL_CAN_IRQHandler+0x156>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80023b0:	f017 0f08 	tst.w	r7, #8
 80023b4:	d150      	bne.n	8002458 <HAL_CAN_IRQHandler+0x1f8>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80023b6:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80023ba:	d067      	beq.n	800248c <HAL_CAN_IRQHandler+0x22c>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80023bc:	f017 0f04 	tst.w	r7, #4
 80023c0:	d061      	beq.n	8002486 <HAL_CAN_IRQHandler+0x226>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023c2:	f414 7f80 	tst.w	r4, #256	; 0x100
 80023c6:	d004      	beq.n	80023d2 <HAL_CAN_IRQHandler+0x172>
 80023c8:	f01a 0f01 	tst.w	sl, #1
 80023cc:	d001      	beq.n	80023d2 <HAL_CAN_IRQHandler+0x172>
        errorcode |= HAL_CAN_ERROR_EWG;
 80023ce:	f04b 0b01 	orr.w	fp, fp, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023d2:	f414 7f00 	tst.w	r4, #512	; 0x200
 80023d6:	d004      	beq.n	80023e2 <HAL_CAN_IRQHandler+0x182>
 80023d8:	f01a 0f02 	tst.w	sl, #2
 80023dc:	d001      	beq.n	80023e2 <HAL_CAN_IRQHandler+0x182>
        errorcode |= HAL_CAN_ERROR_EPV;
 80023de:	f04b 0b02 	orr.w	fp, fp, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023e2:	f414 6f80 	tst.w	r4, #1024	; 0x400
 80023e6:	d004      	beq.n	80023f2 <HAL_CAN_IRQHandler+0x192>
 80023e8:	f01a 0f04 	tst.w	sl, #4
 80023ec:	d001      	beq.n	80023f2 <HAL_CAN_IRQHandler+0x192>
        errorcode |= HAL_CAN_ERROR_BOF;
 80023ee:	f04b 0b04 	orr.w	fp, fp, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023f2:	f414 6f00 	tst.w	r4, #2048	; 0x800
 80023f6:	d046      	beq.n	8002486 <HAL_CAN_IRQHandler+0x226>
 80023f8:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 80023fc:	d043      	beq.n	8002486 <HAL_CAN_IRQHandler+0x226>
        switch (esrflags & CAN_ESR_LEC)
 80023fe:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8002402:	d048      	beq.n	8002496 <HAL_CAN_IRQHandler+0x236>
 8002404:	d92f      	bls.n	8002466 <HAL_CAN_IRQHandler+0x206>
 8002406:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 800240a:	d047      	beq.n	800249c <HAL_CAN_IRQHandler+0x23c>
 800240c:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 8002410:	d047      	beq.n	80024a2 <HAL_CAN_IRQHandler+0x242>
 8002412:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8002416:	d131      	bne.n	800247c <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_BR;
 8002418:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
            break;
 800241c:	e02e      	b.n	800247c <HAL_CAN_IRQHandler+0x21c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800241e:	682b      	ldr	r3, [r5, #0]
 8002420:	2208      	movs	r2, #8
 8002422:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002424:	4628      	mov	r0, r5
 8002426:	f7ff ff15 	bl	8002254 <HAL_CAN_RxFifo0FullCallback>
 800242a:	e797      	b.n	800235c <HAL_CAN_IRQHandler+0xfc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800242c:	4628      	mov	r0, r5
 800242e:	f001 faed 	bl	8003a0c <HAL_CAN_RxFifo0MsgPendingCallback>
 8002432:	e79b      	b.n	800236c <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002434:	682b      	ldr	r3, [r5, #0]
 8002436:	2208      	movs	r2, #8
 8002438:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 800243a:	4628      	mov	r0, r5
 800243c:	f7ff ff0c 	bl	8002258 <HAL_CAN_RxFifo1FullCallback>
 8002440:	e7a5      	b.n	800238e <HAL_CAN_IRQHandler+0x12e>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002442:	4628      	mov	r0, r5
 8002444:	f7ff ff07 	bl	8002256 <HAL_CAN_RxFifo1MsgPendingCallback>
 8002448:	e7a9      	b.n	800239e <HAL_CAN_IRQHandler+0x13e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800244a:	682b      	ldr	r3, [r5, #0]
 800244c:	2210      	movs	r2, #16
 800244e:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8002450:	4628      	mov	r0, r5
 8002452:	f7ff ff02 	bl	800225a <HAL_CAN_SleepCallback>
 8002456:	e7a8      	b.n	80023aa <HAL_CAN_IRQHandler+0x14a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002458:	682b      	ldr	r3, [r5, #0]
 800245a:	2208      	movs	r2, #8
 800245c:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800245e:	4628      	mov	r0, r5
 8002460:	f7ff fefc 	bl	800225c <HAL_CAN_WakeUpFromRxMsgCallback>
 8002464:	e7a7      	b.n	80023b6 <HAL_CAN_IRQHandler+0x156>
        switch (esrflags & CAN_ESR_LEC)
 8002466:	f1ba 0f10 	cmp.w	sl, #16
 800246a:	d005      	beq.n	8002478 <HAL_CAN_IRQHandler+0x218>
 800246c:	f1ba 0f20 	cmp.w	sl, #32
 8002470:	d104      	bne.n	800247c <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002472:	f04b 0b10 	orr.w	fp, fp, #16
            break;
 8002476:	e001      	b.n	800247c <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_STF;
 8002478:	f04b 0b08 	orr.w	fp, fp, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800247c:	682a      	ldr	r2, [r5, #0]
 800247e:	6993      	ldr	r3, [r2, #24]
 8002480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002484:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002486:	682b      	ldr	r3, [r5, #0]
 8002488:	2204      	movs	r2, #4
 800248a:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 800248c:	f1bb 0f00 	cmp.w	fp, #0
 8002490:	d10a      	bne.n	80024a8 <HAL_CAN_IRQHandler+0x248>
 8002492:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            errorcode |= HAL_CAN_ERROR_ACK;
 8002496:	f04b 0b20 	orr.w	fp, fp, #32
            break;
 800249a:	e7ef      	b.n	800247c <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_BD;
 800249c:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
            break;
 80024a0:	e7ec      	b.n	800247c <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_CRC;
 80024a2:	f44b 7b80 	orr.w	fp, fp, #256	; 0x100
            break;
 80024a6:	e7e9      	b.n	800247c <HAL_CAN_IRQHandler+0x21c>
    hcan->ErrorCode |= errorcode;
 80024a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80024aa:	ea4b 0303 	orr.w	r3, fp, r3
 80024ae:	626b      	str	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80024b0:	4628      	mov	r0, r5
 80024b2:	f7ff fed4 	bl	800225e <HAL_CAN_ErrorCallback>
}
 80024b6:	e7ec      	b.n	8002492 <HAL_CAN_IRQHandler+0x232>

080024b8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b8:	4a07      	ldr	r2, [pc, #28]	; (80024d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80024ba:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80024c0:	041b      	lsls	r3, r3, #16
 80024c2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80024c4:	0200      	lsls	r0, r0, #8
 80024c6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ca:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80024cc:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80024d0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80024d4:	60d0      	str	r0, [r2, #12]
 80024d6:	4770      	bx	lr
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024dc:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024de:	4b16      	ldr	r3, [pc, #88]	; (8002538 <HAL_NVIC_SetPriority+0x5c>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e6:	f1c3 0407 	rsb	r4, r3, #7
 80024ea:	2c04      	cmp	r4, #4
 80024ec:	bf28      	it	cs
 80024ee:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024f0:	1d1d      	adds	r5, r3, #4
 80024f2:	2d06      	cmp	r5, #6
 80024f4:	d917      	bls.n	8002526 <HAL_NVIC_SetPriority+0x4a>
 80024f6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f8:	2501      	movs	r5, #1
 80024fa:	fa05 f404 	lsl.w	r4, r5, r4
 80024fe:	3c01      	subs	r4, #1
 8002500:	4021      	ands	r1, r4
 8002502:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002504:	fa05 f303 	lsl.w	r3, r5, r3
 8002508:	3b01      	subs	r3, #1
 800250a:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800250c:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 800250e:	2800      	cmp	r0, #0
 8002510:	db0b      	blt.n	800252a <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002512:	0109      	lsls	r1, r1, #4
 8002514:	b2c9      	uxtb	r1, r1
 8002516:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800251a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800251e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002522:	bc30      	pop	{r4, r5}
 8002524:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002526:	2300      	movs	r3, #0
 8002528:	e7e6      	b.n	80024f8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252a:	f000 000f 	and.w	r0, r0, #15
 800252e:	0109      	lsls	r1, r1, #4
 8002530:	b2c9      	uxtb	r1, r1
 8002532:	4b02      	ldr	r3, [pc, #8]	; (800253c <HAL_NVIC_SetPriority+0x60>)
 8002534:	5419      	strb	r1, [r3, r0]
 8002536:	e7f4      	b.n	8002522 <HAL_NVIC_SetPriority+0x46>
 8002538:	e000ed00 	.word	0xe000ed00
 800253c:	e000ed14 	.word	0xe000ed14

08002540 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002540:	0942      	lsrs	r2, r0, #5
 8002542:	f000 001f 	and.w	r0, r0, #31
 8002546:	2301      	movs	r3, #1
 8002548:	fa03 f000 	lsl.w	r0, r3, r0
 800254c:	4b01      	ldr	r3, [pc, #4]	; (8002554 <HAL_NVIC_EnableIRQ+0x14>)
 800254e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002552:	4770      	bx	lr
 8002554:	e000e100 	.word	0xe000e100

08002558 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002558:	3801      	subs	r0, #1
 800255a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800255e:	d20a      	bcs.n	8002576 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_SYSTICK_Config+0x24>)
 8002562:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002564:	21f0      	movs	r1, #240	; 0xf0
 8002566:	4a06      	ldr	r2, [pc, #24]	; (8002580 <HAL_SYSTICK_Config+0x28>)
 8002568:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800256c:	2000      	movs	r0, #0
 800256e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002570:	2207      	movs	r2, #7
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002576:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	e000e010 	.word	0xe000e010
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002584:	4770      	bx	lr

08002586 <HAL_SYSTICK_IRQHandler>:
{
 8002586:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8002588:	f7ff fffc 	bl	8002584 <HAL_SYSTICK_Callback>
 800258c:	bd08      	pop	{r3, pc}

0800258e <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800258e:	b470      	push	{r4, r5, r6}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002590:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8002592:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8002594:	2401      	movs	r4, #1
 8002596:	40b4      	lsls	r4, r6
 8002598:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800259a:	6804      	ldr	r4, [r0, #0]
 800259c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800259e:	6843      	ldr	r3, [r0, #4]
 80025a0:	2b10      	cmp	r3, #16
 80025a2:	d005      	beq.n	80025b0 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80025a4:	6803      	ldr	r3, [r0, #0]
 80025a6:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80025a8:	6803      	ldr	r3, [r0, #0]
 80025aa:	60da      	str	r2, [r3, #12]
  }
}
 80025ac:	bc70      	pop	{r4, r5, r6}
 80025ae:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80025b0:	6803      	ldr	r3, [r0, #0]
 80025b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80025b4:	6803      	ldr	r3, [r0, #0]
 80025b6:	60d9      	str	r1, [r3, #12]
 80025b8:	e7f8      	b.n	80025ac <DMA_SetConfig+0x1e>
	...

080025bc <HAL_DMA_Init>:
  if(hdma == NULL)
 80025bc:	b360      	cbz	r0, 8002618 <HAL_DMA_Init+0x5c>
{
 80025be:	b410      	push	{r4}
 80025c0:	4603      	mov	r3, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80025c2:	6800      	ldr	r0, [r0, #0]
 80025c4:	4a15      	ldr	r2, [pc, #84]	; (800261c <HAL_DMA_Init+0x60>)
 80025c6:	4402      	add	r2, r0
 80025c8:	4915      	ldr	r1, [pc, #84]	; (8002620 <HAL_DMA_Init+0x64>)
 80025ca:	fba1 1202 	umull	r1, r2, r1, r2
 80025ce:	0912      	lsrs	r2, r2, #4
 80025d0:	0092      	lsls	r2, r2, #2
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80025d4:	4a13      	ldr	r2, [pc, #76]	; (8002624 <HAL_DMA_Init+0x68>)
 80025d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 80025d8:	2202      	movs	r2, #2
 80025da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 80025de:	6801      	ldr	r1, [r0, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80025e0:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 80025e4:	f021 0130 	bic.w	r1, r1, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80025e8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ea:	689c      	ldr	r4, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80025ec:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ee:	68dc      	ldr	r4, [r3, #12]
 80025f0:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025f2:	691c      	ldr	r4, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f4:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025f6:	695c      	ldr	r4, [r3, #20]
 80025f8:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80025fa:	699c      	ldr	r4, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025fc:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80025fe:	69dc      	ldr	r4, [r3, #28]
 8002600:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8002602:	430a      	orrs	r2, r1
  hdma->Instance->CCR = tmp;
 8002604:	6002      	str	r2, [r0, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002606:	2000      	movs	r0, #0
 8002608:	6398      	str	r0, [r3, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8002610:	f883 0020 	strb.w	r0, [r3, #32]
}
 8002614:	bc10      	pop	{r4}
 8002616:	4770      	bx	lr
    return HAL_ERROR;
 8002618:	2001      	movs	r0, #1
 800261a:	4770      	bx	lr
 800261c:	bffdfff8 	.word	0xbffdfff8
 8002620:	cccccccd 	.word	0xcccccccd
 8002624:	40020000 	.word	0x40020000

08002628 <HAL_DMA_Start_IT>:
{
 8002628:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 800262a:	f890 4020 	ldrb.w	r4, [r0, #32]
 800262e:	2c01      	cmp	r4, #1
 8002630:	d032      	beq.n	8002698 <HAL_DMA_Start_IT+0x70>
 8002632:	2401      	movs	r4, #1
 8002634:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002638:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 800263c:	2c01      	cmp	r4, #1
 800263e:	d004      	beq.n	800264a <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8002640:	2300      	movs	r3, #0
 8002642:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8002646:	2002      	movs	r0, #2
 8002648:	bd38      	pop	{r3, r4, r5, pc}
 800264a:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 800264c:	2002      	movs	r0, #2
 800264e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002652:	2000      	movs	r0, #0
 8002654:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8002656:	6825      	ldr	r5, [r4, #0]
 8002658:	6828      	ldr	r0, [r5, #0]
 800265a:	f020 0001 	bic.w	r0, r0, #1
 800265e:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002660:	4620      	mov	r0, r4
 8002662:	f7ff ff94 	bl	800258e <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8002666:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002668:	b15b      	cbz	r3, 8002682 <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800266a:	6822      	ldr	r2, [r4, #0]
 800266c:	6813      	ldr	r3, [r2, #0]
 800266e:	f043 030e 	orr.w	r3, r3, #14
 8002672:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002674:	6822      	ldr	r2, [r4, #0]
 8002676:	6813      	ldr	r3, [r2, #0]
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800267e:	2000      	movs	r0, #0
 8002680:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002682:	6822      	ldr	r2, [r4, #0]
 8002684:	6813      	ldr	r3, [r2, #0]
 8002686:	f023 0304 	bic.w	r3, r3, #4
 800268a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800268c:	6822      	ldr	r2, [r4, #0]
 800268e:	6813      	ldr	r3, [r2, #0]
 8002690:	f043 030a 	orr.w	r3, r3, #10
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	e7ed      	b.n	8002674 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8002698:	2002      	movs	r0, #2
}
 800269a:	bd38      	pop	{r3, r4, r5, pc}

0800269c <HAL_DMA_Abort_IT>:
{  
 800269c:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800269e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d003      	beq.n	80026ae <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026a6:	2304      	movs	r3, #4
 80026a8:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80026aa:	2001      	movs	r0, #1
 80026ac:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026ae:	6802      	ldr	r2, [r0, #0]
 80026b0:	6813      	ldr	r3, [r2, #0]
 80026b2:	f023 030e 	bic.w	r3, r3, #14
 80026b6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80026b8:	6802      	ldr	r2, [r0, #0]
 80026ba:	6813      	ldr	r3, [r2, #0]
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80026c2:	6803      	ldr	r3, [r0, #0]
 80026c4:	4a19      	ldr	r2, [pc, #100]	; (800272c <HAL_DMA_Abort_IT+0x90>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d014      	beq.n	80026f4 <HAL_DMA_Abort_IT+0x58>
 80026ca:	3214      	adds	r2, #20
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d01f      	beq.n	8002710 <HAL_DMA_Abort_IT+0x74>
 80026d0:	3214      	adds	r2, #20
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d01e      	beq.n	8002714 <HAL_DMA_Abort_IT+0x78>
 80026d6:	3214      	adds	r2, #20
 80026d8:	4293      	cmp	r3, r2
 80026da:	d01e      	beq.n	800271a <HAL_DMA_Abort_IT+0x7e>
 80026dc:	3214      	adds	r2, #20
 80026de:	4293      	cmp	r3, r2
 80026e0:	d01e      	beq.n	8002720 <HAL_DMA_Abort_IT+0x84>
 80026e2:	3214      	adds	r2, #20
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d002      	beq.n	80026ee <HAL_DMA_Abort_IT+0x52>
 80026e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026ec:	e003      	b.n	80026f6 <HAL_DMA_Abort_IT+0x5a>
 80026ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026f2:	e000      	b.n	80026f6 <HAL_DMA_Abort_IT+0x5a>
 80026f4:	2201      	movs	r2, #1
 80026f6:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <HAL_DMA_Abort_IT+0x94>)
 80026f8:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80026fa:	2301      	movs	r3, #1
 80026fc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002700:	2300      	movs	r3, #0
 8002702:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002706:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002708:	b16b      	cbz	r3, 8002726 <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 800270a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800270c:	2000      	movs	r0, #0
 800270e:	bd08      	pop	{r3, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002710:	2210      	movs	r2, #16
 8002712:	e7f0      	b.n	80026f6 <HAL_DMA_Abort_IT+0x5a>
 8002714:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002718:	e7ed      	b.n	80026f6 <HAL_DMA_Abort_IT+0x5a>
 800271a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800271e:	e7ea      	b.n	80026f6 <HAL_DMA_Abort_IT+0x5a>
 8002720:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002724:	e7e7      	b.n	80026f6 <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8002726:	2000      	movs	r0, #0
}
 8002728:	bd08      	pop	{r3, pc}
 800272a:	bf00      	nop
 800272c:	40020008 	.word	0x40020008
 8002730:	40020000 	.word	0x40020000

08002734 <HAL_DMA_IRQHandler>:
{
 8002734:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002736:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002738:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800273a:	6804      	ldr	r4, [r0, #0]
 800273c:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800273e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002740:	2304      	movs	r3, #4
 8002742:	408b      	lsls	r3, r1
 8002744:	421a      	tst	r2, r3
 8002746:	d036      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x82>
 8002748:	f015 0f04 	tst.w	r5, #4
 800274c:	d033      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x82>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800274e:	6823      	ldr	r3, [r4, #0]
 8002750:	f013 0f20 	tst.w	r3, #32
 8002754:	d103      	bne.n	800275e <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002756:	6823      	ldr	r3, [r4, #0]
 8002758:	f023 0304 	bic.w	r3, r3, #4
 800275c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800275e:	6803      	ldr	r3, [r0, #0]
 8002760:	4a43      	ldr	r2, [pc, #268]	; (8002870 <HAL_DMA_IRQHandler+0x13c>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d014      	beq.n	8002790 <HAL_DMA_IRQHandler+0x5c>
 8002766:	3214      	adds	r2, #20
 8002768:	4293      	cmp	r3, r2
 800276a:	d019      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x6c>
 800276c:	3214      	adds	r2, #20
 800276e:	4293      	cmp	r3, r2
 8002770:	d018      	beq.n	80027a4 <HAL_DMA_IRQHandler+0x70>
 8002772:	3214      	adds	r2, #20
 8002774:	4293      	cmp	r3, r2
 8002776:	d018      	beq.n	80027aa <HAL_DMA_IRQHandler+0x76>
 8002778:	3214      	adds	r2, #20
 800277a:	4293      	cmp	r3, r2
 800277c:	d018      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x7c>
 800277e:	3214      	adds	r2, #20
 8002780:	4293      	cmp	r3, r2
 8002782:	d002      	beq.n	800278a <HAL_DMA_IRQHandler+0x56>
 8002784:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002788:	e003      	b.n	8002792 <HAL_DMA_IRQHandler+0x5e>
 800278a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800278e:	e000      	b.n	8002792 <HAL_DMA_IRQHandler+0x5e>
 8002790:	2204      	movs	r2, #4
 8002792:	4b38      	ldr	r3, [pc, #224]	; (8002874 <HAL_DMA_IRQHandler+0x140>)
 8002794:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002796:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002798:	2b00      	cmp	r3, #0
 800279a:	d067      	beq.n	800286c <HAL_DMA_IRQHandler+0x138>
      hdma->XferHalfCpltCallback(hdma);
 800279c:	4798      	blx	r3
 800279e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80027a0:	2240      	movs	r2, #64	; 0x40
 80027a2:	e7f6      	b.n	8002792 <HAL_DMA_IRQHandler+0x5e>
 80027a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027a8:	e7f3      	b.n	8002792 <HAL_DMA_IRQHandler+0x5e>
 80027aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027ae:	e7f0      	b.n	8002792 <HAL_DMA_IRQHandler+0x5e>
 80027b0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80027b4:	e7ed      	b.n	8002792 <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80027b6:	2302      	movs	r3, #2
 80027b8:	408b      	lsls	r3, r1
 80027ba:	421a      	tst	r2, r3
 80027bc:	d03b      	beq.n	8002836 <HAL_DMA_IRQHandler+0x102>
 80027be:	f015 0f02 	tst.w	r5, #2
 80027c2:	d038      	beq.n	8002836 <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	f013 0f20 	tst.w	r3, #32
 80027ca:	d106      	bne.n	80027da <HAL_DMA_IRQHandler+0xa6>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80027cc:	6823      	ldr	r3, [r4, #0]
 80027ce:	f023 030a 	bic.w	r3, r3, #10
 80027d2:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80027d4:	2301      	movs	r3, #1
 80027d6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80027da:	6803      	ldr	r3, [r0, #0]
 80027dc:	4a24      	ldr	r2, [pc, #144]	; (8002870 <HAL_DMA_IRQHandler+0x13c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d014      	beq.n	800280c <HAL_DMA_IRQHandler+0xd8>
 80027e2:	3214      	adds	r2, #20
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d01b      	beq.n	8002820 <HAL_DMA_IRQHandler+0xec>
 80027e8:	3214      	adds	r2, #20
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d01a      	beq.n	8002824 <HAL_DMA_IRQHandler+0xf0>
 80027ee:	3214      	adds	r2, #20
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d01a      	beq.n	800282a <HAL_DMA_IRQHandler+0xf6>
 80027f4:	3214      	adds	r2, #20
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d01a      	beq.n	8002830 <HAL_DMA_IRQHandler+0xfc>
 80027fa:	3214      	adds	r2, #20
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d002      	beq.n	8002806 <HAL_DMA_IRQHandler+0xd2>
 8002800:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002804:	e003      	b.n	800280e <HAL_DMA_IRQHandler+0xda>
 8002806:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800280a:	e000      	b.n	800280e <HAL_DMA_IRQHandler+0xda>
 800280c:	2202      	movs	r2, #2
 800280e:	4b19      	ldr	r3, [pc, #100]	; (8002874 <HAL_DMA_IRQHandler+0x140>)
 8002810:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8002812:	2300      	movs	r3, #0
 8002814:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002818:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800281a:	b33b      	cbz	r3, 800286c <HAL_DMA_IRQHandler+0x138>
      hdma->XferCpltCallback(hdma);
 800281c:	4798      	blx	r3
 800281e:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002820:	2220      	movs	r2, #32
 8002822:	e7f4      	b.n	800280e <HAL_DMA_IRQHandler+0xda>
 8002824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002828:	e7f1      	b.n	800280e <HAL_DMA_IRQHandler+0xda>
 800282a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800282e:	e7ee      	b.n	800280e <HAL_DMA_IRQHandler+0xda>
 8002830:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002834:	e7eb      	b.n	800280e <HAL_DMA_IRQHandler+0xda>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002836:	2308      	movs	r3, #8
 8002838:	fa03 f101 	lsl.w	r1, r3, r1
 800283c:	420a      	tst	r2, r1
 800283e:	d015      	beq.n	800286c <HAL_DMA_IRQHandler+0x138>
 8002840:	f015 0f08 	tst.w	r5, #8
 8002844:	d012      	beq.n	800286c <HAL_DMA_IRQHandler+0x138>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002846:	6823      	ldr	r3, [r4, #0]
 8002848:	f023 030e 	bic.w	r3, r3, #14
 800284c:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800284e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002850:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002852:	2301      	movs	r3, #1
 8002854:	fa03 f202 	lsl.w	r2, r3, r2
 8002858:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800285a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800285c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002860:	2300      	movs	r3, #0
 8002862:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002866:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002868:	b103      	cbz	r3, 800286c <HAL_DMA_IRQHandler+0x138>
      hdma->XferErrorCallback(hdma);
 800286a:	4798      	blx	r3
 800286c:	bd38      	pop	{r3, r4, r5, pc}
 800286e:	bf00      	nop
 8002870:	40020008 	.word	0x40020008
 8002874:	40020000 	.word	0x40020000

08002878 <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002878:	2200      	movs	r2, #0
 800287a:	4b04      	ldr	r3, [pc, #16]	; (800288c <FLASH_Program_HalfWord+0x14>)
 800287c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800287e:	4a04      	ldr	r2, [pc, #16]	; (8002890 <FLASH_Program_HalfWord+0x18>)
 8002880:	6913      	ldr	r3, [r2, #16]
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002888:	8001      	strh	r1, [r0, #0]
 800288a:	4770      	bx	lr
 800288c:	20001210 	.word	0x20001210
 8002890:	40022000 	.word	0x40022000

08002894 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002894:	4b1a      	ldr	r3, [pc, #104]	; (8002900 <FLASH_SetErrorCode+0x6c>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f013 0f10 	tst.w	r3, #16
 800289c:	d027      	beq.n	80028ee <FLASH_SetErrorCode+0x5a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800289e:	4a19      	ldr	r2, [pc, #100]	; (8002904 <FLASH_SetErrorCode+0x70>)
 80028a0:	69d3      	ldr	r3, [r2, #28]
 80028a2:	f043 0302 	orr.w	r3, r3, #2
 80028a6:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80028a8:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80028aa:	4a15      	ldr	r2, [pc, #84]	; (8002900 <FLASH_SetErrorCode+0x6c>)
 80028ac:	68d2      	ldr	r2, [r2, #12]
 80028ae:	f012 0f04 	tst.w	r2, #4
 80028b2:	d006      	beq.n	80028c2 <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80028b4:	4913      	ldr	r1, [pc, #76]	; (8002904 <FLASH_SetErrorCode+0x70>)
 80028b6:	69ca      	ldr	r2, [r1, #28]
 80028b8:	f042 0201 	orr.w	r2, r2, #1
 80028bc:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80028be:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80028c2:	4a0f      	ldr	r2, [pc, #60]	; (8002900 <FLASH_SetErrorCode+0x6c>)
 80028c4:	69d2      	ldr	r2, [r2, #28]
 80028c6:	f012 0f01 	tst.w	r2, #1
 80028ca:	d009      	beq.n	80028e0 <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80028cc:	490d      	ldr	r1, [pc, #52]	; (8002904 <FLASH_SetErrorCode+0x70>)
 80028ce:	69ca      	ldr	r2, [r1, #28]
 80028d0:	f042 0204 	orr.w	r2, r2, #4
 80028d4:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80028d6:	490a      	ldr	r1, [pc, #40]	; (8002900 <FLASH_SetErrorCode+0x6c>)
 80028d8:	69ca      	ldr	r2, [r1, #28]
 80028da:	f022 0201 	bic.w	r2, r2, #1
 80028de:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80028e0:	f240 1201 	movw	r2, #257	; 0x101
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d004      	beq.n	80028f2 <FLASH_SetErrorCode+0x5e>
 80028e8:	4a05      	ldr	r2, [pc, #20]	; (8002900 <FLASH_SetErrorCode+0x6c>)
 80028ea:	60d3      	str	r3, [r2, #12]
 80028ec:	4770      	bx	lr
  uint32_t flags = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	e7db      	b.n	80028aa <FLASH_SetErrorCode+0x16>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80028f2:	4a03      	ldr	r2, [pc, #12]	; (8002900 <FLASH_SetErrorCode+0x6c>)
 80028f4:	69d3      	ldr	r3, [r2, #28]
 80028f6:	f023 0301 	bic.w	r3, r3, #1
 80028fa:	61d3      	str	r3, [r2, #28]
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40022000 	.word	0x40022000
 8002904:	20001210 	.word	0x20001210

08002908 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002908:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <HAL_FLASH_Unlock+0x2c>)
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002910:	d00d      	beq.n	800292e <HAL_FLASH_Unlock+0x26>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002912:	4b08      	ldr	r3, [pc, #32]	; (8002934 <HAL_FLASH_Unlock+0x2c>)
 8002914:	4a08      	ldr	r2, [pc, #32]	; (8002938 <HAL_FLASH_Unlock+0x30>)
 8002916:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002918:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800291c:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002924:	d001      	beq.n	800292a <HAL_FLASH_Unlock+0x22>
      status = HAL_ERROR;
 8002926:	2001      	movs	r0, #1
}
 8002928:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 800292a:	2000      	movs	r0, #0
 800292c:	4770      	bx	lr
 800292e:	2000      	movs	r0, #0
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40022000 	.word	0x40022000
 8002938:	45670123 	.word	0x45670123

0800293c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800293c:	4a03      	ldr	r2, [pc, #12]	; (800294c <HAL_FLASH_Lock+0x10>)
 800293e:	6913      	ldr	r3, [r2, #16]
 8002940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002944:	6113      	str	r3, [r2, #16]
}
 8002946:	2000      	movs	r0, #0
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40022000 	.word	0x40022000

08002950 <FLASH_WaitForLastOperation>:
{
 8002950:	b538      	push	{r3, r4, r5, lr}
 8002952:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002954:	f7ff fa60 	bl	8001e18 <HAL_GetTick>
 8002958:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800295a:	4b17      	ldr	r3, [pc, #92]	; (80029b8 <FLASH_WaitForLastOperation+0x68>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f013 0f01 	tst.w	r3, #1
 8002962:	d00a      	beq.n	800297a <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8002964:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002968:	d0f7      	beq.n	800295a <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800296a:	b30c      	cbz	r4, 80029b0 <FLASH_WaitForLastOperation+0x60>
 800296c:	f7ff fa54 	bl	8001e18 <HAL_GetTick>
 8002970:	1b40      	subs	r0, r0, r5
 8002972:	4284      	cmp	r4, r0
 8002974:	d2f1      	bcs.n	800295a <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8002976:	2003      	movs	r0, #3
 8002978:	bd38      	pop	{r3, r4, r5, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800297a:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <FLASH_WaitForLastOperation+0x68>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f013 0f20 	tst.w	r3, #32
 8002982:	d002      	beq.n	800298a <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002984:	2220      	movs	r2, #32
 8002986:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <FLASH_WaitForLastOperation+0x68>)
 8002988:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800298a:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <FLASH_WaitForLastOperation+0x68>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f013 0f10 	tst.w	r3, #16
 8002992:	d109      	bne.n	80029a8 <FLASH_WaitForLastOperation+0x58>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002994:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <FLASH_WaitForLastOperation+0x68>)
 8002996:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002998:	f013 0f01 	tst.w	r3, #1
 800299c:	d104      	bne.n	80029a8 <FLASH_WaitForLastOperation+0x58>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <FLASH_WaitForLastOperation+0x68>)
 80029a0:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80029a2:	f013 0f04 	tst.w	r3, #4
 80029a6:	d005      	beq.n	80029b4 <FLASH_WaitForLastOperation+0x64>
    FLASH_SetErrorCode();
 80029a8:	f7ff ff74 	bl	8002894 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80029ac:	2001      	movs	r0, #1
 80029ae:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_TIMEOUT;
 80029b0:	2003      	movs	r0, #3
 80029b2:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80029b4:	2000      	movs	r0, #0
}
 80029b6:	bd38      	pop	{r3, r4, r5, pc}
 80029b8:	40022000 	.word	0x40022000

080029bc <HAL_FLASH_Program>:
{
 80029bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 80029c0:	4c23      	ldr	r4, [pc, #140]	; (8002a50 <HAL_FLASH_Program+0x94>)
 80029c2:	7e24      	ldrb	r4, [r4, #24]
 80029c4:	2c01      	cmp	r4, #1
 80029c6:	d103      	bne.n	80029d0 <HAL_FLASH_Program+0x14>
 80029c8:	2302      	movs	r3, #2
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029d0:	461e      	mov	r6, r3
 80029d2:	4690      	mov	r8, r2
 80029d4:	460f      	mov	r7, r1
 80029d6:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 80029d8:	2201      	movs	r2, #1
 80029da:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <HAL_FLASH_Program+0x94>)
 80029dc:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80029de:	f24c 3050 	movw	r0, #50000	; 0xc350
 80029e2:	f7ff ffb5 	bl	8002950 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80029e6:	4603      	mov	r3, r0
 80029e8:	bb70      	cbnz	r0, 8002a48 <HAL_FLASH_Program+0x8c>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80029ea:	2c01      	cmp	r4, #1
 80029ec:	d029      	beq.n	8002a42 <HAL_FLASH_Program+0x86>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80029ee:	2c02      	cmp	r4, #2
 80029f0:	d024      	beq.n	8002a3c <HAL_FLASH_Program+0x80>
      nbiterations = 4U;
 80029f2:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 80029f6:	2400      	movs	r4, #0
 80029f8:	454c      	cmp	r4, r9
 80029fa:	d225      	bcs.n	8002a48 <HAL_FLASH_Program+0x8c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80029fc:	0121      	lsls	r1, r4, #4
 80029fe:	f1c1 0220 	rsb	r2, r1, #32
 8002a02:	f1a1 0320 	sub.w	r3, r1, #32
 8002a06:	fa28 f101 	lsr.w	r1, r8, r1
 8002a0a:	fa06 f202 	lsl.w	r2, r6, r2
 8002a0e:	4311      	orrs	r1, r2
 8002a10:	fa26 f303 	lsr.w	r3, r6, r3
 8002a14:	4319      	orrs	r1, r3
 8002a16:	b289      	uxth	r1, r1
 8002a18:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 8002a1c:	f7ff ff2c 	bl	8002878 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002a20:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a24:	f7ff ff94 	bl	8002950 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002a28:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <HAL_FLASH_Program+0x98>)
 8002a2a:	691d      	ldr	r5, [r3, #16]
 8002a2c:	f025 0501 	bic.w	r5, r5, #1
 8002a30:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 8002a32:	4603      	mov	r3, r0
 8002a34:	b940      	cbnz	r0, 8002a48 <HAL_FLASH_Program+0x8c>
    for (index = 0U; index < nbiterations; index++)
 8002a36:	3401      	adds	r4, #1
 8002a38:	b2e4      	uxtb	r4, r4
 8002a3a:	e7dd      	b.n	80029f8 <HAL_FLASH_Program+0x3c>
      nbiterations = 2U;
 8002a3c:	f04f 0902 	mov.w	r9, #2
 8002a40:	e7d9      	b.n	80029f6 <HAL_FLASH_Program+0x3a>
      nbiterations = 1U;
 8002a42:	f04f 0901 	mov.w	r9, #1
 8002a46:	e7d6      	b.n	80029f6 <HAL_FLASH_Program+0x3a>
  __HAL_UNLOCK(&pFlash);
 8002a48:	2100      	movs	r1, #0
 8002a4a:	4a01      	ldr	r2, [pc, #4]	; (8002a50 <HAL_FLASH_Program+0x94>)
 8002a4c:	7611      	strb	r1, [r2, #24]
  return status;
 8002a4e:	e7bc      	b.n	80029ca <HAL_FLASH_Program+0xe>
 8002a50:	20001210 	.word	0x20001210
 8002a54:	40022000 	.word	0x40022000

08002a58 <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a58:	2200      	movs	r2, #0
 8002a5a:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <FLASH_MassErase+0x1c>)
 8002a5c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002a5e:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <FLASH_MassErase+0x20>)
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	f042 0204 	orr.w	r2, r2, #4
 8002a66:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002a68:	691a      	ldr	r2, [r3, #16]
 8002a6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a6e:	611a      	str	r2, [r3, #16]
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	20001210 	.word	0x20001210
 8002a78:	40022000 	.word	0x40022000

08002a7c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <FLASH_PageErase+0x1c>)
 8002a80:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002a82:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <FLASH_PageErase+0x20>)
 8002a84:	691a      	ldr	r2, [r3, #16]
 8002a86:	f042 0202 	orr.w	r2, r2, #2
 8002a8a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002a8c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a94:	611a      	str	r2, [r3, #16]
 8002a96:	4770      	bx	lr
 8002a98:	20001210 	.word	0x20001210
 8002a9c:	40022000 	.word	0x40022000

08002aa0 <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8002aa0:	4b26      	ldr	r3, [pc, #152]	; (8002b3c <HAL_FLASHEx_Erase+0x9c>)
 8002aa2:	7e1b      	ldrb	r3, [r3, #24]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d046      	beq.n	8002b36 <HAL_FLASHEx_Erase+0x96>
{
 8002aa8:	b570      	push	{r4, r5, r6, lr}
 8002aaa:	460e      	mov	r6, r1
 8002aac:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8002aae:	2201      	movs	r2, #1
 8002ab0:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <HAL_FLASHEx_Erase+0x9c>)
 8002ab2:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002ab4:	6803      	ldr	r3, [r0, #0]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d020      	beq.n	8002afc <HAL_FLASHEx_Erase+0x5c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002aba:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002abe:	f7ff ff47 	bl	8002950 <FLASH_WaitForLastOperation>
 8002ac2:	bb90      	cbnz	r0, 8002b2a <HAL_FLASHEx_Erase+0x8a>
        *PageError = 0xFFFFFFFFU;
 8002ac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ac8:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8002aca:	68ac      	ldr	r4, [r5, #8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002acc:	2101      	movs	r1, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002ace:	68ea      	ldr	r2, [r5, #12]
 8002ad0:	68ab      	ldr	r3, [r5, #8]
 8002ad2:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 8002ad6:	429c      	cmp	r4, r3
 8002ad8:	d228      	bcs.n	8002b2c <HAL_FLASHEx_Erase+0x8c>
          FLASH_PageErase(address);
 8002ada:	4620      	mov	r0, r4
 8002adc:	f7ff ffce 	bl	8002a7c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ae0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ae4:	f7ff ff34 	bl	8002950 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002ae8:	4a15      	ldr	r2, [pc, #84]	; (8002b40 <HAL_FLASHEx_Erase+0xa0>)
 8002aea:	6913      	ldr	r3, [r2, #16]
 8002aec:	f023 0302 	bic.w	r3, r3, #2
 8002af0:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8002af2:	4601      	mov	r1, r0
 8002af4:	b9b8      	cbnz	r0, 8002b26 <HAL_FLASHEx_Erase+0x86>
            address += FLASH_PAGE_SIZE)
 8002af6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002afa:	e7e8      	b.n	8002ace <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002afc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b00:	f7ff ff26 	bl	8002950 <FLASH_WaitForLastOperation>
 8002b04:	b108      	cbz	r0, 8002b0a <HAL_FLASHEx_Erase+0x6a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b06:	2101      	movs	r1, #1
 8002b08:	e010      	b.n	8002b2c <HAL_FLASHEx_Erase+0x8c>
        FLASH_MassErase(FLASH_BANK_1);
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	f7ff ffa4 	bl	8002a58 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b14:	f7ff ff1c 	bl	8002950 <FLASH_WaitForLastOperation>
 8002b18:	4601      	mov	r1, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002b1a:	4a09      	ldr	r2, [pc, #36]	; (8002b40 <HAL_FLASHEx_Erase+0xa0>)
 8002b1c:	6913      	ldr	r3, [r2, #16]
 8002b1e:	f023 0304 	bic.w	r3, r3, #4
 8002b22:	6113      	str	r3, [r2, #16]
 8002b24:	e002      	b.n	8002b2c <HAL_FLASHEx_Erase+0x8c>
            *PageError = address;
 8002b26:	6034      	str	r4, [r6, #0]
            break;
 8002b28:	e000      	b.n	8002b2c <HAL_FLASHEx_Erase+0x8c>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b2a:	2101      	movs	r1, #1
  __HAL_UNLOCK(&pFlash);
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	4b03      	ldr	r3, [pc, #12]	; (8002b3c <HAL_FLASHEx_Erase+0x9c>)
 8002b30:	761a      	strb	r2, [r3, #24]
}
 8002b32:	4608      	mov	r0, r1
 8002b34:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8002b36:	2102      	movs	r1, #2
}
 8002b38:	4608      	mov	r0, r1
 8002b3a:	4770      	bx	lr
 8002b3c:	20001210 	.word	0x20001210
 8002b40:	40022000 	.word	0x40022000

08002b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b46:	b083      	sub	sp, #12
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8002b48:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8002b4a:	4634      	mov	r4, r6
 8002b4c:	e071      	b.n	8002c32 <HAL_GPIO_Init+0xee>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b4e:	2d00      	cmp	r5, #0
 8002b50:	f000 80a1 	beq.w	8002c96 <HAL_GPIO_Init+0x152>
 8002b54:	2d01      	cmp	r5, #1
 8002b56:	d100      	bne.n	8002b5a <HAL_GPIO_Init+0x16>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b58:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b5a:	2bff      	cmp	r3, #255	; 0xff
 8002b5c:	f200 80af 	bhi.w	8002cbe <HAL_GPIO_Init+0x17a>
 8002b60:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8002b62:	2bff      	cmp	r3, #255	; 0xff
 8002b64:	f200 80ae 	bhi.w	8002cc4 <HAL_GPIO_Init+0x180>
 8002b68:	00a5      	lsls	r5, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b6a:	f8de 2000 	ldr.w	r2, [lr]
 8002b6e:	270f      	movs	r7, #15
 8002b70:	40af      	lsls	r7, r5
 8002b72:	ea22 0207 	bic.w	r2, r2, r7
 8002b76:	fa06 f505 	lsl.w	r5, r6, r5
 8002b7a:	432a      	orrs	r2, r5
 8002b7c:	f8ce 2000 	str.w	r2, [lr]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b80:	684a      	ldr	r2, [r1, #4]
 8002b82:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8002b86:	d053      	beq.n	8002c30 <HAL_GPIO_Init+0xec>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b88:	4a63      	ldr	r2, [pc, #396]	; (8002d18 <HAL_GPIO_Init+0x1d4>)
 8002b8a:	6995      	ldr	r5, [r2, #24]
 8002b8c:	f045 0501 	orr.w	r5, r5, #1
 8002b90:	6195      	str	r5, [r2, #24]
 8002b92:	6992      	ldr	r2, [r2, #24]
 8002b94:	f002 0201 	and.w	r2, r2, #1
 8002b98:	9201      	str	r2, [sp, #4]
 8002b9a:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 8002b9c:	08a5      	lsrs	r5, r4, #2
 8002b9e:	1caf      	adds	r7, r5, #2
 8002ba0:	4a5e      	ldr	r2, [pc, #376]	; (8002d1c <HAL_GPIO_Init+0x1d8>)
 8002ba2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002ba6:	f004 0703 	and.w	r7, r4, #3
 8002baa:	00bf      	lsls	r7, r7, #2
 8002bac:	f04f 0e0f 	mov.w	lr, #15
 8002bb0:	fa0e fe07 	lsl.w	lr, lr, r7
 8002bb4:	ea22 020e 	bic.w	r2, r2, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bb8:	f8df e170 	ldr.w	lr, [pc, #368]	; 8002d2c <HAL_GPIO_Init+0x1e8>
 8002bbc:	4570      	cmp	r0, lr
 8002bbe:	f000 8088 	beq.w	8002cd2 <HAL_GPIO_Init+0x18e>
 8002bc2:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8002bc6:	4570      	cmp	r0, lr
 8002bc8:	f000 8086 	beq.w	8002cd8 <HAL_GPIO_Init+0x194>
 8002bcc:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8002bd0:	4570      	cmp	r0, lr
 8002bd2:	f000 8084 	beq.w	8002cde <HAL_GPIO_Init+0x19a>
 8002bd6:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8002bda:	4570      	cmp	r0, lr
 8002bdc:	d076      	beq.n	8002ccc <HAL_GPIO_Init+0x188>
 8002bde:	f04f 0e04 	mov.w	lr, #4
 8002be2:	fa0e f707 	lsl.w	r7, lr, r7
 8002be6:	433a      	orrs	r2, r7
        AFIO->EXTICR[position >> 2U] = temp;
 8002be8:	3502      	adds	r5, #2
 8002bea:	4f4c      	ldr	r7, [pc, #304]	; (8002d1c <HAL_GPIO_Init+0x1d8>)
 8002bec:	f847 2025 	str.w	r2, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bf0:	684a      	ldr	r2, [r1, #4]
 8002bf2:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002bf6:	d075      	beq.n	8002ce4 <HAL_GPIO_Init+0x1a0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002bf8:	4d49      	ldr	r5, [pc, #292]	; (8002d20 <HAL_GPIO_Init+0x1dc>)
 8002bfa:	682a      	ldr	r2, [r5, #0]
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	602a      	str	r2, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c00:	684a      	ldr	r2, [r1, #4]
 8002c02:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002c06:	d073      	beq.n	8002cf0 <HAL_GPIO_Init+0x1ac>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c08:	4d45      	ldr	r5, [pc, #276]	; (8002d20 <HAL_GPIO_Init+0x1dc>)
 8002c0a:	686a      	ldr	r2, [r5, #4]
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	606a      	str	r2, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c10:	684a      	ldr	r2, [r1, #4]
 8002c12:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8002c16:	d071      	beq.n	8002cfc <HAL_GPIO_Init+0x1b8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c18:	4d41      	ldr	r5, [pc, #260]	; (8002d20 <HAL_GPIO_Init+0x1dc>)
 8002c1a:	68aa      	ldr	r2, [r5, #8]
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	60aa      	str	r2, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c20:	684a      	ldr	r2, [r1, #4]
 8002c22:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8002c26:	d06f      	beq.n	8002d08 <HAL_GPIO_Init+0x1c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c28:	4d3d      	ldr	r5, [pc, #244]	; (8002d20 <HAL_GPIO_Init+0x1dc>)
 8002c2a:	68ea      	ldr	r2, [r5, #12]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60eb      	str	r3, [r5, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8002c30:	3401      	adds	r4, #1
 8002c32:	2c0f      	cmp	r4, #15
 8002c34:	d86e      	bhi.n	8002d14 <HAL_GPIO_Init+0x1d0>
    ioposition = (0x01U << position);
 8002c36:	2201      	movs	r2, #1
 8002c38:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c3a:	680b      	ldr	r3, [r1, #0]
 8002c3c:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d1f6      	bne.n	8002c30 <HAL_GPIO_Init+0xec>
      switch (GPIO_Init->Mode)
 8002c42:	684d      	ldr	r5, [r1, #4]
 8002c44:	2d12      	cmp	r5, #18
 8002c46:	d030      	beq.n	8002caa <HAL_GPIO_Init+0x166>
 8002c48:	d80b      	bhi.n	8002c62 <HAL_GPIO_Init+0x11e>
 8002c4a:	2d02      	cmp	r5, #2
 8002c4c:	d02a      	beq.n	8002ca4 <HAL_GPIO_Init+0x160>
 8002c4e:	f67f af7e 	bls.w	8002b4e <HAL_GPIO_Init+0xa>
 8002c52:	2d03      	cmp	r5, #3
 8002c54:	d02f      	beq.n	8002cb6 <HAL_GPIO_Init+0x172>
 8002c56:	2d11      	cmp	r5, #17
 8002c58:	f47f af7f 	bne.w	8002b5a <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c5c:	68ce      	ldr	r6, [r1, #12]
 8002c5e:	3604      	adds	r6, #4
          break;
 8002c60:	e77b      	b.n	8002b5a <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8002c62:	4f30      	ldr	r7, [pc, #192]	; (8002d24 <HAL_GPIO_Init+0x1e0>)
 8002c64:	42bd      	cmp	r5, r7
 8002c66:	d016      	beq.n	8002c96 <HAL_GPIO_Init+0x152>
 8002c68:	d90c      	bls.n	8002c84 <HAL_GPIO_Init+0x140>
 8002c6a:	4f2f      	ldr	r7, [pc, #188]	; (8002d28 <HAL_GPIO_Init+0x1e4>)
 8002c6c:	42bd      	cmp	r5, r7
 8002c6e:	d012      	beq.n	8002c96 <HAL_GPIO_Init+0x152>
 8002c70:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002c74:	42bd      	cmp	r5, r7
 8002c76:	d00e      	beq.n	8002c96 <HAL_GPIO_Init+0x152>
 8002c78:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8002c7c:	42bd      	cmp	r5, r7
 8002c7e:	f47f af6c 	bne.w	8002b5a <HAL_GPIO_Init+0x16>
 8002c82:	e008      	b.n	8002c96 <HAL_GPIO_Init+0x152>
 8002c84:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8002c88:	42bd      	cmp	r5, r7
 8002c8a:	d004      	beq.n	8002c96 <HAL_GPIO_Init+0x152>
 8002c8c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002c90:	42bd      	cmp	r5, r7
 8002c92:	f47f af62 	bne.w	8002b5a <HAL_GPIO_Init+0x16>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c96:	688d      	ldr	r5, [r1, #8]
 8002c98:	b17d      	cbz	r5, 8002cba <HAL_GPIO_Init+0x176>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c9a:	2d01      	cmp	r5, #1
 8002c9c:	d008      	beq.n	8002cb0 <HAL_GPIO_Init+0x16c>
            GPIOx->BRR = ioposition;
 8002c9e:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ca0:	2608      	movs	r6, #8
 8002ca2:	e75a      	b.n	8002b5a <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ca4:	68ce      	ldr	r6, [r1, #12]
 8002ca6:	3608      	adds	r6, #8
          break;
 8002ca8:	e757      	b.n	8002b5a <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002caa:	68ce      	ldr	r6, [r1, #12]
 8002cac:	360c      	adds	r6, #12
          break;
 8002cae:	e754      	b.n	8002b5a <HAL_GPIO_Init+0x16>
            GPIOx->BSRR = ioposition;
 8002cb0:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cb2:	2608      	movs	r6, #8
 8002cb4:	e751      	b.n	8002b5a <HAL_GPIO_Init+0x16>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cb6:	2600      	movs	r6, #0
 8002cb8:	e74f      	b.n	8002b5a <HAL_GPIO_Init+0x16>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cba:	2604      	movs	r6, #4
 8002cbc:	e74d      	b.n	8002b5a <HAL_GPIO_Init+0x16>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cbe:	f100 0e04 	add.w	lr, r0, #4
 8002cc2:	e74e      	b.n	8002b62 <HAL_GPIO_Init+0x1e>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8002cc4:	f1a4 0508 	sub.w	r5, r4, #8
 8002cc8:	00ad      	lsls	r5, r5, #2
 8002cca:	e74e      	b.n	8002b6a <HAL_GPIO_Init+0x26>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ccc:	f04f 0e03 	mov.w	lr, #3
 8002cd0:	e787      	b.n	8002be2 <HAL_GPIO_Init+0x9e>
 8002cd2:	f04f 0e00 	mov.w	lr, #0
 8002cd6:	e784      	b.n	8002be2 <HAL_GPIO_Init+0x9e>
 8002cd8:	f04f 0e01 	mov.w	lr, #1
 8002cdc:	e781      	b.n	8002be2 <HAL_GPIO_Init+0x9e>
 8002cde:	f04f 0e02 	mov.w	lr, #2
 8002ce2:	e77e      	b.n	8002be2 <HAL_GPIO_Init+0x9e>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ce4:	4d0e      	ldr	r5, [pc, #56]	; (8002d20 <HAL_GPIO_Init+0x1dc>)
 8002ce6:	682a      	ldr	r2, [r5, #0]
 8002ce8:	ea22 0203 	bic.w	r2, r2, r3
 8002cec:	602a      	str	r2, [r5, #0]
 8002cee:	e787      	b.n	8002c00 <HAL_GPIO_Init+0xbc>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cf0:	4d0b      	ldr	r5, [pc, #44]	; (8002d20 <HAL_GPIO_Init+0x1dc>)
 8002cf2:	686a      	ldr	r2, [r5, #4]
 8002cf4:	ea22 0203 	bic.w	r2, r2, r3
 8002cf8:	606a      	str	r2, [r5, #4]
 8002cfa:	e789      	b.n	8002c10 <HAL_GPIO_Init+0xcc>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cfc:	4d08      	ldr	r5, [pc, #32]	; (8002d20 <HAL_GPIO_Init+0x1dc>)
 8002cfe:	68aa      	ldr	r2, [r5, #8]
 8002d00:	ea22 0203 	bic.w	r2, r2, r3
 8002d04:	60aa      	str	r2, [r5, #8]
 8002d06:	e78b      	b.n	8002c20 <HAL_GPIO_Init+0xdc>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d08:	4d05      	ldr	r5, [pc, #20]	; (8002d20 <HAL_GPIO_Init+0x1dc>)
 8002d0a:	68ea      	ldr	r2, [r5, #12]
 8002d0c:	ea22 0303 	bic.w	r3, r2, r3
 8002d10:	60eb      	str	r3, [r5, #12]
 8002d12:	e78d      	b.n	8002c30 <HAL_GPIO_Init+0xec>
        }
      }
    }
  }
}
 8002d14:	b003      	add	sp, #12
 8002d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40010000 	.word	0x40010000
 8002d20:	40010400 	.word	0x40010400
 8002d24:	10210000 	.word	0x10210000
 8002d28:	10310000 	.word	0x10310000
 8002d2c:	40010800 	.word	0x40010800

08002d30 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002d30:	4b01      	ldr	r3, [pc, #4]	; (8002d38 <HAL_RCC_GetHCLKFreq+0x8>)
 8002d32:	6818      	ldr	r0, [r3, #0]
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	200000b0 	.word	0x200000b0

08002d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d3c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d3e:	f7ff fff7 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 8002d42:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002d4a:	4a03      	ldr	r2, [pc, #12]	; (8002d58 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002d4c:	5cd3      	ldrb	r3, [r2, r3]
}    
 8002d4e:	40d8      	lsrs	r0, r3
 8002d50:	bd08      	pop	{r3, pc}
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000
 8002d58:	0800adec 	.word	0x0800adec

08002d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d5c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d5e:	f7ff ffe7 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 8002d62:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002d6a:	4a03      	ldr	r2, [pc, #12]	; (8002d78 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002d6c:	5cd3      	ldrb	r3, [r2, r3]
} 
 8002d6e:	40d8      	lsrs	r0, r3
 8002d70:	bd08      	pop	{r3, pc}
 8002d72:	bf00      	nop
 8002d74:	40021000 	.word	0x40021000
 8002d78:	0800adec 	.word	0x0800adec

08002d7c <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002d7c:	6802      	ldr	r2, [r0, #0]
 8002d7e:	68d3      	ldr	r3, [r2, #12]
 8002d80:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002d84:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d86:	2320      	movs	r3, #32
 8002d88:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 8002d8c:	4770      	bx	lr

08002d8e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d8e:	6802      	ldr	r2, [r0, #0]
 8002d90:	68d3      	ldr	r3, [r2, #12]
 8002d92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d96:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d98:	6802      	ldr	r2, [r0, #0]
 8002d9a:	6953      	ldr	r3, [r2, #20]
 8002d9c:	f023 0301 	bic.w	r3, r3, #1
 8002da0:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002da2:	2320      	movs	r3, #32
 8002da4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002da8:	4770      	bx	lr

08002daa <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002daa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b21      	cmp	r3, #33	; 0x21
 8002db2:	d001      	beq.n	8002db8 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002db4:	2002      	movs	r0, #2
 8002db6:	4770      	bx	lr
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002db8:	6883      	ldr	r3, [r0, #8]
 8002dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dbe:	d017      	beq.n	8002df0 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002dc0:	6802      	ldr	r2, [r0, #0]
 8002dc2:	6a03      	ldr	r3, [r0, #32]
 8002dc4:	1c59      	adds	r1, r3, #1
 8002dc6:	6201      	str	r1, [r0, #32]
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	6053      	str	r3, [r2, #4]
    if(--huart->TxXferCount == 0U)
 8002dcc:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	84c3      	strh	r3, [r0, #38]	; 0x26
 8002dd6:	b9db      	cbnz	r3, 8002e10 <UART_Transmit_IT+0x66>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002dd8:	6802      	ldr	r2, [r0, #0]
 8002dda:	68d3      	ldr	r3, [r2, #12]
 8002ddc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002de0:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002de2:	6802      	ldr	r2, [r0, #0]
 8002de4:	68d3      	ldr	r3, [r2, #12]
 8002de6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dea:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8002dec:	2000      	movs	r0, #0
 8002dee:	4770      	bx	lr
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8002df0:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002df2:	6802      	ldr	r2, [r0, #0]
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dfa:	6053      	str	r3, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002dfc:	6903      	ldr	r3, [r0, #16]
 8002dfe:	b91b      	cbnz	r3, 8002e08 <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 8002e00:	6a03      	ldr	r3, [r0, #32]
 8002e02:	3302      	adds	r3, #2
 8002e04:	6203      	str	r3, [r0, #32]
 8002e06:	e7e1      	b.n	8002dcc <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 8002e08:	6a03      	ldr	r3, [r0, #32]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	6203      	str	r3, [r0, #32]
 8002e0e:	e7dd      	b.n	8002dcc <UART_Transmit_IT+0x22>
    return HAL_OK;
 8002e10:	2000      	movs	r0, #0
  }
}
 8002e12:	4770      	bx	lr

08002e14 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e18:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e1a:	6802      	ldr	r2, [r0, #0]
 8002e1c:	6913      	ldr	r3, [r2, #16]
 8002e1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e22:	68c1      	ldr	r1, [r0, #12]
 8002e24:	430b      	orrs	r3, r1
 8002e26:	6113      	str	r3, [r2, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e28:	6883      	ldr	r3, [r0, #8]
 8002e2a:	6902      	ldr	r2, [r0, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	6942      	ldr	r2, [r0, #20]
 8002e30:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, 
 8002e32:	6801      	ldr	r1, [r0, #0]
 8002e34:	68ca      	ldr	r2, [r1, #12]
 8002e36:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8002e3a:	f022 020c 	bic.w	r2, r2, #12
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e42:	6802      	ldr	r2, [r0, #0]
 8002e44:	6953      	ldr	r3, [r2, #20]
 8002e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e4a:	6981      	ldr	r1, [r0, #24]
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002e50:	f8d0 8000 	ldr.w	r8, [r0]
 8002e54:	4b59      	ldr	r3, [pc, #356]	; (8002fbc <UART_SetConfig+0x1a8>)
 8002e56:	4598      	cmp	r8, r3
 8002e58:	d057      	beq.n	8002f0a <UART_SetConfig+0xf6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002e5a:	f7ff ff6f 	bl	8002d3c <HAL_RCC_GetPCLK1Freq>
 8002e5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e66:	686c      	ldr	r4, [r5, #4]
 8002e68:	00a4      	lsls	r4, r4, #2
 8002e6a:	fbb0 f4f4 	udiv	r4, r0, r4
 8002e6e:	4f54      	ldr	r7, [pc, #336]	; (8002fc0 <UART_SetConfig+0x1ac>)
 8002e70:	fba7 3404 	umull	r3, r4, r7, r4
 8002e74:	0964      	lsrs	r4, r4, #5
 8002e76:	0126      	lsls	r6, r4, #4
 8002e78:	f7ff ff60 	bl	8002d3c <HAL_RCC_GetPCLK1Freq>
 8002e7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e84:	686c      	ldr	r4, [r5, #4]
 8002e86:	00a4      	lsls	r4, r4, #2
 8002e88:	fbb0 faf4 	udiv	sl, r0, r4
 8002e8c:	f7ff ff56 	bl	8002d3c <HAL_RCC_GetPCLK1Freq>
 8002e90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e94:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e98:	686c      	ldr	r4, [r5, #4]
 8002e9a:	00a4      	lsls	r4, r4, #2
 8002e9c:	fbb0 f4f4 	udiv	r4, r0, r4
 8002ea0:	fba7 3404 	umull	r3, r4, r7, r4
 8002ea4:	0964      	lsrs	r4, r4, #5
 8002ea6:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002eaa:	fb09 a414 	mls	r4, r9, r4, sl
 8002eae:	0124      	lsls	r4, r4, #4
 8002eb0:	3432      	adds	r4, #50	; 0x32
 8002eb2:	fba7 3404 	umull	r3, r4, r7, r4
 8002eb6:	0964      	lsrs	r4, r4, #5
 8002eb8:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 8002ebc:	4434      	add	r4, r6
 8002ebe:	f7ff ff3d 	bl	8002d3c <HAL_RCC_GetPCLK1Freq>
 8002ec2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ec6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002eca:	686e      	ldr	r6, [r5, #4]
 8002ecc:	00b6      	lsls	r6, r6, #2
 8002ece:	fbb0 f6f6 	udiv	r6, r0, r6
 8002ed2:	f7ff ff33 	bl	8002d3c <HAL_RCC_GetPCLK1Freq>
 8002ed6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002eda:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ede:	686b      	ldr	r3, [r5, #4]
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ee6:	fba7 3000 	umull	r3, r0, r7, r0
 8002eea:	0940      	lsrs	r0, r0, #5
 8002eec:	fb09 6910 	mls	r9, r9, r0, r6
 8002ef0:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8002ef4:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8002ef8:	fba7 3709 	umull	r3, r7, r7, r9
 8002efc:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8002f00:	4427      	add	r7, r4
 8002f02:	f8c8 7008 	str.w	r7, [r8, #8]
 8002f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002f0a:	f7ff ff27 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 8002f0e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f16:	686c      	ldr	r4, [r5, #4]
 8002f18:	00a4      	lsls	r4, r4, #2
 8002f1a:	fbb0 f4f4 	udiv	r4, r0, r4
 8002f1e:	4f28      	ldr	r7, [pc, #160]	; (8002fc0 <UART_SetConfig+0x1ac>)
 8002f20:	fba7 3404 	umull	r3, r4, r7, r4
 8002f24:	0964      	lsrs	r4, r4, #5
 8002f26:	0126      	lsls	r6, r4, #4
 8002f28:	f7ff ff18 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 8002f2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f34:	686c      	ldr	r4, [r5, #4]
 8002f36:	00a4      	lsls	r4, r4, #2
 8002f38:	fbb0 faf4 	udiv	sl, r0, r4
 8002f3c:	f7ff ff0e 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 8002f40:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f48:	686c      	ldr	r4, [r5, #4]
 8002f4a:	00a4      	lsls	r4, r4, #2
 8002f4c:	fbb0 f4f4 	udiv	r4, r0, r4
 8002f50:	fba7 3404 	umull	r3, r4, r7, r4
 8002f54:	0964      	lsrs	r4, r4, #5
 8002f56:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002f5a:	fb09 a414 	mls	r4, r9, r4, sl
 8002f5e:	0124      	lsls	r4, r4, #4
 8002f60:	3432      	adds	r4, #50	; 0x32
 8002f62:	fba7 3404 	umull	r3, r4, r7, r4
 8002f66:	0964      	lsrs	r4, r4, #5
 8002f68:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 8002f6c:	4434      	add	r4, r6
 8002f6e:	f7ff fef5 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 8002f72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f76:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f7a:	686e      	ldr	r6, [r5, #4]
 8002f7c:	00b6      	lsls	r6, r6, #2
 8002f7e:	fbb0 f6f6 	udiv	r6, r0, r6
 8002f82:	f7ff feeb 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 8002f86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f8a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f8e:	686b      	ldr	r3, [r5, #4]
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f96:	fba7 2303 	umull	r2, r3, r7, r3
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	fb09 6913 	mls	r9, r9, r3, r6
 8002fa0:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8002fa4:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8002fa8:	fba7 3709 	umull	r3, r7, r7, r9
 8002fac:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8002fb0:	4427      	add	r7, r4
 8002fb2:	f8c8 7008 	str.w	r7, [r8, #8]
 8002fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fba:	bf00      	nop
 8002fbc:	40013800 	.word	0x40013800
 8002fc0:	51eb851f 	.word	0x51eb851f

08002fc4 <HAL_UART_Init>:
  if(huart == NULL)
 8002fc4:	b358      	cbz	r0, 800301e <HAL_UART_Init+0x5a>
{
 8002fc6:	b510      	push	{r4, lr}
 8002fc8:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8002fca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002fce:	b30b      	cbz	r3, 8003014 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002fd0:	2324      	movs	r3, #36	; 0x24
 8002fd2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002fd6:	6822      	ldr	r2, [r4, #0]
 8002fd8:	68d3      	ldr	r3, [r2, #12]
 8002fda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fde:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	f7ff ff17 	bl	8002e14 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fe6:	6822      	ldr	r2, [r4, #0]
 8002fe8:	6913      	ldr	r3, [r2, #16]
 8002fea:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002fee:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ff0:	6822      	ldr	r2, [r4, #0]
 8002ff2:	6953      	ldr	r3, [r2, #20]
 8002ff4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002ff8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002ffa:	6822      	ldr	r2, [r4, #0]
 8002ffc:	68d3      	ldr	r3, [r2, #12]
 8002ffe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003002:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003004:	2000      	movs	r0, #0
 8003006:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003008:	2320      	movs	r3, #32
 800300a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800300e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8003012:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003014:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003018:	f001 fbd2 	bl	80047c0 <HAL_UART_MspInit>
 800301c:	e7d8      	b.n	8002fd0 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800301e:	2001      	movs	r0, #1
 8003020:	4770      	bx	lr
	...

08003024 <HAL_UART_Transmit_DMA>:
{
 8003024:	b538      	push	{r3, r4, r5, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 8003026:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 800302a:	b2e4      	uxtb	r4, r4
 800302c:	2c20      	cmp	r4, #32
 800302e:	d001      	beq.n	8003034 <HAL_UART_Transmit_DMA+0x10>
    return HAL_BUSY;
 8003030:	2002      	movs	r0, #2
 8003032:	bd38      	pop	{r3, r4, r5, pc}
    if((pData == NULL) || (Size == 0U))
 8003034:	2900      	cmp	r1, #0
 8003036:	d031      	beq.n	800309c <HAL_UART_Transmit_DMA+0x78>
 8003038:	2a00      	cmp	r2, #0
 800303a:	d031      	beq.n	80030a0 <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 800303c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_UART_Transmit_DMA+0x24>
 8003044:	2002      	movs	r0, #2
}
 8003046:	bd38      	pop	{r3, r4, r5, pc}
 8003048:	4613      	mov	r3, r2
 800304a:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 800304c:	2201      	movs	r2, #1
 800304e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->pTxBuffPtr = pData;
 8003052:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8003054:	8483      	strh	r3, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8003056:	84c3      	strh	r3, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003058:	2500      	movs	r5, #0
 800305a:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800305c:	2221      	movs	r2, #33	; 0x21
 800305e:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003062:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003064:	480f      	ldr	r0, [pc, #60]	; (80030a4 <HAL_UART_Transmit_DMA+0x80>)
 8003066:	6290      	str	r0, [r2, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003068:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800306a:	480f      	ldr	r0, [pc, #60]	; (80030a8 <HAL_UART_Transmit_DMA+0x84>)
 800306c:	62d0      	str	r0, [r2, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800306e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003070:	480e      	ldr	r0, [pc, #56]	; (80030ac <HAL_UART_Transmit_DMA+0x88>)
 8003072:	6310      	str	r0, [r2, #48]	; 0x30
    huart->hdmatx->XferAbortCallback = NULL;
 8003074:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003076:	6355      	str	r5, [r2, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003078:	6822      	ldr	r2, [r4, #0]
 800307a:	3204      	adds	r2, #4
 800307c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800307e:	f7ff fad3 	bl	8002628 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003082:	6823      	ldr	r3, [r4, #0]
 8003084:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003088:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 800308a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800308e:	6822      	ldr	r2, [r4, #0]
 8003090:	6953      	ldr	r3, [r2, #20]
 8003092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003096:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8003098:	4628      	mov	r0, r5
 800309a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800309c:	2001      	movs	r0, #1
 800309e:	bd38      	pop	{r3, r4, r5, pc}
 80030a0:	2001      	movs	r0, #1
 80030a2:	bd38      	pop	{r3, r4, r5, pc}
 80030a4:	08003159 	.word	0x08003159
 80030a8:	080031a5 	.word	0x080031a5
 80030ac:	0800329b 	.word	0x0800329b

080030b0 <HAL_UART_Receive_DMA>:
{
 80030b0:	b530      	push	{r4, r5, lr}
 80030b2:	b083      	sub	sp, #12
  if(huart->RxState == HAL_UART_STATE_READY) 
 80030b4:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 80030b8:	b2e4      	uxtb	r4, r4
 80030ba:	2c20      	cmp	r4, #32
 80030bc:	d002      	beq.n	80030c4 <HAL_UART_Receive_DMA+0x14>
    return HAL_BUSY;
 80030be:	2002      	movs	r0, #2
}
 80030c0:	b003      	add	sp, #12
 80030c2:	bd30      	pop	{r4, r5, pc}
    if((pData == NULL) || (Size == 0U))
 80030c4:	2900      	cmp	r1, #0
 80030c6:	d03d      	beq.n	8003144 <HAL_UART_Receive_DMA+0x94>
 80030c8:	2a00      	cmp	r2, #0
 80030ca:	d03d      	beq.n	8003148 <HAL_UART_Receive_DMA+0x98>
    __HAL_LOCK(huart);
 80030cc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_UART_Receive_DMA+0x28>
 80030d4:	2002      	movs	r0, #2
 80030d6:	e7f3      	b.n	80030c0 <HAL_UART_Receive_DMA+0x10>
 80030d8:	4613      	mov	r3, r2
 80030da:	460a      	mov	r2, r1
 80030dc:	4604      	mov	r4, r0
 80030de:	2101      	movs	r1, #1
 80030e0:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 80030e4:	6282      	str	r2, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 80030e6:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e8:	2500      	movs	r5, #0
 80030ea:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030ec:	2122      	movs	r1, #34	; 0x22
 80030ee:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80030f2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80030f4:	4815      	ldr	r0, [pc, #84]	; (800314c <HAL_UART_Receive_DMA+0x9c>)
 80030f6:	6288      	str	r0, [r1, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80030f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030fa:	4815      	ldr	r0, [pc, #84]	; (8003150 <HAL_UART_Receive_DMA+0xa0>)
 80030fc:	62c8      	str	r0, [r1, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80030fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003100:	4814      	ldr	r0, [pc, #80]	; (8003154 <HAL_UART_Receive_DMA+0xa4>)
 8003102:	6308      	str	r0, [r1, #48]	; 0x30
    huart->hdmarx->XferAbortCallback = NULL;
 8003104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003106:	634d      	str	r5, [r1, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8003108:	6821      	ldr	r1, [r4, #0]
 800310a:	3104      	adds	r1, #4
 800310c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800310e:	f7ff fa8b 	bl	8002628 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003112:	9501      	str	r5, [sp, #4]
 8003114:	6823      	ldr	r3, [r4, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	9201      	str	r2, [sp, #4]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	9201      	str	r2, [sp, #4]
 800311e:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 8003120:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800312a:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800312c:	6822      	ldr	r2, [r4, #0]
 800312e:	6953      	ldr	r3, [r2, #20]
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003136:	6822      	ldr	r2, [r4, #0]
 8003138:	6953      	ldr	r3, [r2, #20]
 800313a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800313e:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8003140:	4628      	mov	r0, r5
 8003142:	e7bd      	b.n	80030c0 <HAL_UART_Receive_DMA+0x10>
      return HAL_ERROR;
 8003144:	2001      	movs	r0, #1
 8003146:	e7bb      	b.n	80030c0 <HAL_UART_Receive_DMA+0x10>
 8003148:	2001      	movs	r0, #1
 800314a:	e7b9      	b.n	80030c0 <HAL_UART_Receive_DMA+0x10>
 800314c:	080031b1 	.word	0x080031b1
 8003150:	0800328f 	.word	0x0800328f
 8003154:	0800329b 	.word	0x0800329b

08003158 <UART_DMATransmitCplt>:
{
 8003158:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800315a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800315c:	6802      	ldr	r2, [r0, #0]
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	f012 0f20 	tst.w	r2, #32
 8003164:	d10c      	bne.n	8003180 <UART_DMATransmitCplt+0x28>
    huart->TxXferCount = 0U;
 8003166:	2200      	movs	r2, #0
 8003168:	84da      	strh	r2, [r3, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800316a:	6819      	ldr	r1, [r3, #0]
 800316c:	694a      	ldr	r2, [r1, #20]
 800316e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003172:	614a      	str	r2, [r1, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68d3      	ldr	r3, [r2, #12]
 8003178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800317c:	60d3      	str	r3, [r2, #12]
 800317e:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8003180:	4618      	mov	r0, r3
 8003182:	f000 fb41 	bl	8003808 <HAL_UART_TxCpltCallback>
 8003186:	bd08      	pop	{r3, pc}

08003188 <UART_EndTransmit_IT>:
{
 8003188:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800318a:	6801      	ldr	r1, [r0, #0]
 800318c:	68cb      	ldr	r3, [r1, #12]
 800318e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003192:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003194:	2320      	movs	r3, #32
 8003196:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800319a:	f000 fb35 	bl	8003808 <HAL_UART_TxCpltCallback>
}
 800319e:	2000      	movs	r0, #0
 80031a0:	bd08      	pop	{r3, pc}

080031a2 <HAL_UART_TxHalfCpltCallback>:
{
 80031a2:	4770      	bx	lr

080031a4 <UART_DMATxHalfCplt>:
{
 80031a4:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80031a6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80031a8:	f7ff fffb 	bl	80031a2 <HAL_UART_TxHalfCpltCallback>
 80031ac:	bd08      	pop	{r3, pc}

080031ae <HAL_UART_RxCpltCallback>:
{
 80031ae:	4770      	bx	lr

080031b0 <UART_DMAReceiveCplt>:
{
 80031b0:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031b4:	6802      	ldr	r2, [r0, #0]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	f012 0f20 	tst.w	r2, #32
 80031bc:	d113      	bne.n	80031e6 <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 80031be:	2200      	movs	r2, #0
 80031c0:	85da      	strh	r2, [r3, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031c2:	6819      	ldr	r1, [r3, #0]
 80031c4:	68ca      	ldr	r2, [r1, #12]
 80031c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031ca:	60ca      	str	r2, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031cc:	6819      	ldr	r1, [r3, #0]
 80031ce:	694a      	ldr	r2, [r1, #20]
 80031d0:	f022 0201 	bic.w	r2, r2, #1
 80031d4:	614a      	str	r2, [r1, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031d6:	6819      	ldr	r1, [r3, #0]
 80031d8:	694a      	ldr	r2, [r1, #20]
 80031da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031de:	614a      	str	r2, [r1, #20]
    huart->RxState = HAL_UART_STATE_READY;
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff ffe1 	bl	80031ae <HAL_UART_RxCpltCallback>
 80031ec:	bd08      	pop	{r3, pc}

080031ee <UART_Receive_IT>:
{
 80031ee:	b508      	push	{r3, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80031f0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b22      	cmp	r3, #34	; 0x22
 80031f8:	d001      	beq.n	80031fe <UART_Receive_IT+0x10>
    return HAL_BUSY;
 80031fa:	2002      	movs	r0, #2
 80031fc:	bd08      	pop	{r3, pc}
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031fe:	6883      	ldr	r3, [r0, #8]
 8003200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003204:	d00f      	beq.n	8003226 <UART_Receive_IT+0x38>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003206:	6903      	ldr	r3, [r0, #16]
 8003208:	bb0b      	cbnz	r3, 800324e <UART_Receive_IT+0x60>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800320a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	6282      	str	r2, [r0, #40]	; 0x28
 8003210:	6802      	ldr	r2, [r0, #0]
 8003212:	6852      	ldr	r2, [r2, #4]
 8003214:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0U)
 8003216:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003218:	b29b      	uxth	r3, r3
 800321a:	3b01      	subs	r3, #1
 800321c:	b29b      	uxth	r3, r3
 800321e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003220:	b1f3      	cbz	r3, 8003260 <UART_Receive_IT+0x72>
    return HAL_OK;
 8003222:	2000      	movs	r0, #0
}
 8003224:	bd08      	pop	{r3, pc}
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8003226:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003228:	6903      	ldr	r3, [r0, #16]
 800322a:	b943      	cbnz	r3, 800323e <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800322c:	6803      	ldr	r3, [r0, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003234:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8003236:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003238:	3302      	adds	r3, #2
 800323a:	6283      	str	r3, [r0, #40]	; 0x28
 800323c:	e7eb      	b.n	8003216 <UART_Receive_IT+0x28>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800323e:	6803      	ldr	r3, [r0, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	b2db      	uxtb	r3, r3
 8003244:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8003246:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003248:	3301      	adds	r3, #1
 800324a:	6283      	str	r3, [r0, #40]	; 0x28
 800324c:	e7e3      	b.n	8003216 <UART_Receive_IT+0x28>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800324e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003250:	1c53      	adds	r3, r2, #1
 8003252:	6283      	str	r3, [r0, #40]	; 0x28
 8003254:	6803      	ldr	r3, [r0, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800325c:	7013      	strb	r3, [r2, #0]
 800325e:	e7da      	b.n	8003216 <UART_Receive_IT+0x28>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003260:	6802      	ldr	r2, [r0, #0]
 8003262:	68d3      	ldr	r3, [r2, #12]
 8003264:	f023 0320 	bic.w	r3, r3, #32
 8003268:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800326a:	6802      	ldr	r2, [r0, #0]
 800326c:	68d3      	ldr	r3, [r2, #12]
 800326e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003272:	60d3      	str	r3, [r2, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003274:	6802      	ldr	r2, [r0, #0]
 8003276:	6953      	ldr	r3, [r2, #20]
 8003278:	f023 0301 	bic.w	r3, r3, #1
 800327c:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800327e:	2320      	movs	r3, #32
 8003280:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8003284:	f7ff ff93 	bl	80031ae <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8003288:	2000      	movs	r0, #0
 800328a:	bd08      	pop	{r3, pc}

0800328c <HAL_UART_RxHalfCpltCallback>:
{
 800328c:	4770      	bx	lr

0800328e <UART_DMARxHalfCplt>:
{
 800328e:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 8003290:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003292:	f7ff fffb 	bl	800328c <HAL_UART_RxHalfCpltCallback>
 8003296:	bd08      	pop	{r3, pc}

08003298 <HAL_UART_ErrorCallback>:
{
 8003298:	4770      	bx	lr

0800329a <UART_DMAError>:
{
 800329a:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800329c:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80032a2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b21      	cmp	r3, #33	; 0x21
 80032aa:	d010      	beq.n	80032ce <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 80032ac:	6823      	ldr	r3, [r4, #0]
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80032b4:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b22      	cmp	r3, #34	; 0x22
 80032bc:	d011      	beq.n	80032e2 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80032be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80032c0:	f043 0310 	orr.w	r3, r3, #16
 80032c4:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80032c6:	4620      	mov	r0, r4
 80032c8:	f7ff ffe6 	bl	8003298 <HAL_UART_ErrorCallback>
 80032cc:	bd10      	pop	{r4, pc}
 80032ce:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80032d2:	2a00      	cmp	r2, #0
 80032d4:	d0ea      	beq.n	80032ac <UART_DMAError+0x12>
    huart->TxXferCount = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80032da:	4620      	mov	r0, r4
 80032dc:	f7ff fd4e 	bl	8002d7c <UART_EndTxTransfer>
 80032e0:	e7e4      	b.n	80032ac <UART_DMAError+0x12>
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80032e2:	2a00      	cmp	r2, #0
 80032e4:	d0eb      	beq.n	80032be <UART_DMAError+0x24>
    huart->RxXferCount = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80032ea:	4620      	mov	r0, r4
 80032ec:	f7ff fd4f 	bl	8002d8e <UART_EndRxTransfer>
 80032f0:	e7e5      	b.n	80032be <UART_DMAError+0x24>
	...

080032f4 <HAL_UART_IRQHandler>:
{
 80032f4:	b510      	push	{r4, lr}
 80032f6:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032f8:	6802      	ldr	r2, [r0, #0]
 80032fa:	6813      	ldr	r3, [r2, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032fc:	68d1      	ldr	r1, [r2, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032fe:	6952      	ldr	r2, [r2, #20]
  if(errorflags == RESET)
 8003300:	f013 000f 	ands.w	r0, r3, #15
 8003304:	d105      	bne.n	8003312 <HAL_UART_IRQHandler+0x1e>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003306:	f013 0f20 	tst.w	r3, #32
 800330a:	d002      	beq.n	8003312 <HAL_UART_IRQHandler+0x1e>
 800330c:	f011 0f20 	tst.w	r1, #32
 8003310:	d153      	bne.n	80033ba <HAL_UART_IRQHandler+0xc6>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003312:	2800      	cmp	r0, #0
 8003314:	d067      	beq.n	80033e6 <HAL_UART_IRQHandler+0xf2>
 8003316:	f012 0201 	ands.w	r2, r2, #1
 800331a:	d102      	bne.n	8003322 <HAL_UART_IRQHandler+0x2e>
 800331c:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003320:	d061      	beq.n	80033e6 <HAL_UART_IRQHandler+0xf2>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003322:	f013 0f01 	tst.w	r3, #1
 8003326:	d006      	beq.n	8003336 <HAL_UART_IRQHandler+0x42>
 8003328:	f411 7f80 	tst.w	r1, #256	; 0x100
 800332c:	d003      	beq.n	8003336 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800332e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003330:	f040 0001 	orr.w	r0, r0, #1
 8003334:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003336:	f013 0f04 	tst.w	r3, #4
 800333a:	d004      	beq.n	8003346 <HAL_UART_IRQHandler+0x52>
 800333c:	b11a      	cbz	r2, 8003346 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800333e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003340:	f040 0002 	orr.w	r0, r0, #2
 8003344:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003346:	f013 0f02 	tst.w	r3, #2
 800334a:	d004      	beq.n	8003356 <HAL_UART_IRQHandler+0x62>
 800334c:	b11a      	cbz	r2, 8003356 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800334e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003350:	f040 0004 	orr.w	r0, r0, #4
 8003354:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003356:	f013 0f08 	tst.w	r3, #8
 800335a:	d004      	beq.n	8003366 <HAL_UART_IRQHandler+0x72>
 800335c:	b11a      	cbz	r2, 8003366 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800335e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003360:	f042 0208 	orr.w	r2, r2, #8
 8003364:	63e2      	str	r2, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003366:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003368:	2a00      	cmp	r2, #0
 800336a:	d048      	beq.n	80033fe <HAL_UART_IRQHandler+0x10a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800336c:	f013 0f20 	tst.w	r3, #32
 8003370:	d002      	beq.n	8003378 <HAL_UART_IRQHandler+0x84>
 8003372:	f011 0f20 	tst.w	r1, #32
 8003376:	d124      	bne.n	80033c2 <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003378:	6823      	ldr	r3, [r4, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003380:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003382:	f012 0f08 	tst.w	r2, #8
 8003386:	d100      	bne.n	800338a <HAL_UART_IRQHandler+0x96>
 8003388:	b33b      	cbz	r3, 80033da <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 800338a:	4620      	mov	r0, r4
 800338c:	f7ff fcff 	bl	8002d8e <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	695a      	ldr	r2, [r3, #20]
 8003394:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003398:	d01b      	beq.n	80033d2 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033a0:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80033a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033a4:	b18b      	cbz	r3, 80033ca <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033a6:	4a1a      	ldr	r2, [pc, #104]	; (8003410 <HAL_UART_IRQHandler+0x11c>)
 80033a8:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033aa:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80033ac:	f7ff f976 	bl	800269c <HAL_DMA_Abort_IT>
 80033b0:	b328      	cbz	r0, 80033fe <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033b2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80033b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80033b6:	4798      	blx	r3
 80033b8:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 80033ba:	4620      	mov	r0, r4
 80033bc:	f7ff ff17 	bl	80031ee <UART_Receive_IT>
      return;
 80033c0:	bd10      	pop	{r4, pc}
        UART_Receive_IT(huart);
 80033c2:	4620      	mov	r0, r4
 80033c4:	f7ff ff13 	bl	80031ee <UART_Receive_IT>
 80033c8:	e7d6      	b.n	8003378 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 80033ca:	4620      	mov	r0, r4
 80033cc:	f7ff ff64 	bl	8003298 <HAL_UART_ErrorCallback>
 80033d0:	bd10      	pop	{r4, pc}
          HAL_UART_ErrorCallback(huart);
 80033d2:	4620      	mov	r0, r4
 80033d4:	f7ff ff60 	bl	8003298 <HAL_UART_ErrorCallback>
 80033d8:	bd10      	pop	{r4, pc}
        HAL_UART_ErrorCallback(huart);
 80033da:	4620      	mov	r0, r4
 80033dc:	f7ff ff5c 	bl	8003298 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e0:	2300      	movs	r3, #0
 80033e2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80033e4:	bd10      	pop	{r4, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033e6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80033ea:	d002      	beq.n	80033f2 <HAL_UART_IRQHandler+0xfe>
 80033ec:	f011 0f80 	tst.w	r1, #128	; 0x80
 80033f0:	d106      	bne.n	8003400 <HAL_UART_IRQHandler+0x10c>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033f2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80033f6:	d002      	beq.n	80033fe <HAL_UART_IRQHandler+0x10a>
 80033f8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80033fc:	d104      	bne.n	8003408 <HAL_UART_IRQHandler+0x114>
 80033fe:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8003400:	4620      	mov	r0, r4
 8003402:	f7ff fcd2 	bl	8002daa <UART_Transmit_IT>
    return;
 8003406:	bd10      	pop	{r4, pc}
    UART_EndTransmit_IT(huart);
 8003408:	4620      	mov	r0, r4
 800340a:	f7ff febd 	bl	8003188 <UART_EndTransmit_IT>
    return;
 800340e:	e7f6      	b.n	80033fe <HAL_UART_IRQHandler+0x10a>
 8003410:	08003415 	.word	0x08003415

08003414 <UART_DMAAbortOnError>:
{
 8003414:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003416:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003418:	2300      	movs	r3, #0
 800341a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800341c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800341e:	f7ff ff3b 	bl	8003298 <HAL_UART_ErrorCallback>
 8003422:	bd08      	pop	{r3, pc}

08003424 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003424:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8003426:	680d      	ldr	r5, [r1, #0]
 8003428:	f3c5 250f 	ubfx	r5, r5, #8, #16
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342c:	fa95 f2a5 	rbit	r2, r5
  pinpos = POSITION_VAL(pinmask);
 8003430:	fab2 f282 	clz	r2, r2

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0U)
 8003434:	e033      	b.n	800349e <LL_GPIO_Init+0x7a>
      {
        currentpin = (0x00000101U << pinpos);
      }
      else
      {
        currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
 8003436:	f1a2 0408 	sub.w	r4, r2, #8
 800343a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800343e:	40a3      	lsls	r3, r4
 8003440:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003444:	684e      	ldr	r6, [r1, #4]
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8003446:	0e1f      	lsrs	r7, r3, #24
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8003448:	59c4      	ldr	r4, [r0, r7]
 800344a:	fa93 fea3 	rbit	lr, r3
 800344e:	fabe fe8e 	clz	lr, lr
 8003452:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003456:	f04f 0c0f 	mov.w	ip, #15
 800345a:	fa0c fe0e 	lsl.w	lr, ip, lr
 800345e:	ea24 040e 	bic.w	r4, r4, lr
 8003462:	fa93 fea3 	rbit	lr, r3
 8003466:	fabe fe8e 	clz	lr, lr
 800346a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800346e:	fa06 f60e 	lsl.w	r6, r6, lr
 8003472:	4334      	orrs	r4, r6
 8003474:	51c4      	str	r4, [r0, r7]
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8003476:	68c6      	ldr	r6, [r0, #12]
 8003478:	0a1c      	lsrs	r4, r3, #8
 800347a:	ea26 0e04 	bic.w	lr, r6, r4
 800347e:	fa94 f4a4 	rbit	r4, r4
 8003482:	fab4 f484 	clz	r4, r4
 8003486:	690e      	ldr	r6, [r1, #16]
 8003488:	fa06 f404 	lsl.w	r4, r6, r4
 800348c:	ea4e 0404 	orr.w	r4, lr, r4
 8003490:	60c4      	str	r4, [r0, #12]

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003492:	684c      	ldr	r4, [r1, #4]
 8003494:	2c01      	cmp	r4, #1
 8003496:	d00f      	beq.n	80034b8 <LL_GPIO_Init+0x94>
 8003498:	2c09      	cmp	r4, #9
 800349a:	d00d      	beq.n	80034b8 <LL_GPIO_Init+0x94>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
      }
    }
    pinpos++;
 800349c:	3201      	adds	r2, #1
  while ((pinmask  >> pinpos) != 0U)
 800349e:	fa35 f302 	lsrs.w	r3, r5, r2
 80034a2:	d037      	beq.n	8003514 <LL_GPIO_Init+0xf0>
    if ((pinmask & (1U << pinpos)) != 0U)
 80034a4:	2301      	movs	r3, #1
 80034a6:	4093      	lsls	r3, r2
 80034a8:	421d      	tst	r5, r3
 80034aa:	d0f7      	beq.n	800349c <LL_GPIO_Init+0x78>
      if (pinpos < GPIO_PIN_MASK_POS)
 80034ac:	2a07      	cmp	r2, #7
 80034ae:	d8c2      	bhi.n	8003436 <LL_GPIO_Init+0x12>
        currentpin = (0x00000101U << pinpos);
 80034b0:	f240 1301 	movw	r3, #257	; 0x101
 80034b4:	4093      	lsls	r3, r2
 80034b6:	e7c5      	b.n	8003444 <LL_GPIO_Init+0x20>
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80034b8:	59c4      	ldr	r4, [r0, r7]
 80034ba:	fa93 f6a3 	rbit	r6, r3
 80034be:	fab6 f686 	clz	r6, r6
 80034c2:	00b6      	lsls	r6, r6, #2
 80034c4:	f04f 0e03 	mov.w	lr, #3
 80034c8:	fa0e f606 	lsl.w	r6, lr, r6
 80034cc:	ea24 0e06 	bic.w	lr, r4, r6
 80034d0:	fa93 f6a3 	rbit	r6, r3
 80034d4:	fab6 f686 	clz	r6, r6
 80034d8:	00b6      	lsls	r6, r6, #2
 80034da:	688c      	ldr	r4, [r1, #8]
 80034dc:	fa04 f606 	lsl.w	r6, r4, r6
 80034e0:	ea46 060e 	orr.w	r6, r6, lr
 80034e4:	51c6      	str	r6, [r0, r7]
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80034e6:	68cc      	ldr	r4, [r1, #12]
 80034e8:	fa93 fea3 	rbit	lr, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80034ec:	fabe fe8e 	clz	lr, lr
 80034f0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80034f4:	f04f 0c04 	mov.w	ip, #4
 80034f8:	fa0c fe0e 	lsl.w	lr, ip, lr
 80034fc:	ea26 060e 	bic.w	r6, r6, lr
 8003500:	fa93 f3a3 	rbit	r3, r3
 8003504:	fab3 f383 	clz	r3, r3
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	fa04 f303 	lsl.w	r3, r4, r3
 800350e:	4333      	orrs	r3, r6
 8003510:	51c3      	str	r3, [r0, r7]
 8003512:	e7c3      	b.n	800349c <LL_GPIO_Init+0x78>
  }
  return (SUCCESS);
}
 8003514:	2001      	movs	r0, #1
 8003516:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003518 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003518:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800351a:	6a03      	ldr	r3, [r0, #32]
 800351c:	f023 0301 	bic.w	r3, r3, #1
 8003520:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003522:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003524:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003526:	6982      	ldr	r2, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003528:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800352c:	680d      	ldr	r5, [r1, #0]
 800352e:	432a      	orrs	r2, r5

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003530:	f023 0302 	bic.w	r3, r3, #2
 8003534:	690d      	ldr	r5, [r1, #16]
 8003536:	432b      	orrs	r3, r5

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003538:	f023 0301 	bic.w	r3, r3, #1
 800353c:	684d      	ldr	r5, [r1, #4]
 800353e:	432b      	orrs	r3, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003540:	4d0f      	ldr	r5, [pc, #60]	; (8003580 <OC1Config+0x68>)
 8003542:	42a8      	cmp	r0, r5
 8003544:	d007      	beq.n	8003556 <OC1Config+0x3e>
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003546:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003548:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800354a:	68ca      	ldr	r2, [r1, #12]
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  WRITE_REG(TIMx->CCR1, CompareValue);
 800354c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800354e:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8003550:	2001      	movs	r0, #1
 8003552:	bc30      	pop	{r4, r5}
 8003554:	4770      	bx	lr
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003556:	f023 0308 	bic.w	r3, r3, #8
 800355a:	694d      	ldr	r5, [r1, #20]
 800355c:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003560:	f023 0304 	bic.w	r3, r3, #4
 8003564:	688d      	ldr	r5, [r1, #8]
 8003566:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800356a:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 800356e:	698d      	ldr	r5, [r1, #24]
 8003570:	432c      	orrs	r4, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003572:	f424 7400 	bic.w	r4, r4, #512	; 0x200
 8003576:	69cd      	ldr	r5, [r1, #28]
 8003578:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
 800357c:	e7e3      	b.n	8003546 <OC1Config+0x2e>
 800357e:	bf00      	nop
 8003580:	40012c00 	.word	0x40012c00

08003584 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003584:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003586:	6a03      	ldr	r3, [r0, #32]
 8003588:	f023 0310 	bic.w	r3, r3, #16
 800358c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800358e:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003590:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003592:	6982      	ldr	r2, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003594:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8003598:	680d      	ldr	r5, [r1, #0]
 800359a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800359e:	f023 0320 	bic.w	r3, r3, #32
 80035a2:	690d      	ldr	r5, [r1, #16]
 80035a4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80035a8:	f023 0310 	bic.w	r3, r3, #16
 80035ac:	684d      	ldr	r5, [r1, #4]
 80035ae:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b2:	4d10      	ldr	r5, [pc, #64]	; (80035f4 <OC2Config+0x70>)
 80035b4:	42a8      	cmp	r0, r5
 80035b6:	d007      	beq.n	80035c8 <OC2Config+0x44>
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80035b8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80035ba:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80035bc:	68ca      	ldr	r2, [r1, #12]
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  WRITE_REG(TIMx->CCR2, CompareValue);
 80035be:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80035c0:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 80035c2:	2001      	movs	r0, #1
 80035c4:	bc30      	pop	{r4, r5}
 80035c6:	4770      	bx	lr
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80035c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035cc:	694d      	ldr	r5, [r1, #20]
 80035ce:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80035d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035d6:	688d      	ldr	r5, [r1, #8]
 80035d8:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80035dc:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80035e0:	698d      	ldr	r5, [r1, #24]
 80035e2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80035e6:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 80035ea:	69cd      	ldr	r5, [r1, #28]
 80035ec:	ea44 04c5 	orr.w	r4, r4, r5, lsl #3
 80035f0:	e7e2      	b.n	80035b8 <OC2Config+0x34>
 80035f2:	bf00      	nop
 80035f4:	40012c00 	.word	0x40012c00

080035f8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80035f8:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80035fa:	6a03      	ldr	r3, [r0, #32]
 80035fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003600:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003602:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003604:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003606:	69c2      	ldr	r2, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003608:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800360c:	680d      	ldr	r5, [r1, #0]
 800360e:	432a      	orrs	r2, r5

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003614:	690d      	ldr	r5, [r1, #16]
 8003616:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800361a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800361e:	684d      	ldr	r5, [r1, #4]
 8003620:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003624:	4d0f      	ldr	r5, [pc, #60]	; (8003664 <OC3Config+0x6c>)
 8003626:	42a8      	cmp	r0, r5
 8003628:	d007      	beq.n	800363a <OC3Config+0x42>
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800362a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800362c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800362e:	68ca      	ldr	r2, [r1, #12]
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003630:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003632:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8003634:	2001      	movs	r0, #1
 8003636:	bc30      	pop	{r4, r5}
 8003638:	4770      	bx	lr
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800363a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800363e:	694d      	ldr	r5, [r1, #20]
 8003640:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003644:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003648:	688d      	ldr	r5, [r1, #8]
 800364a:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800364e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8003652:	698d      	ldr	r5, [r1, #24]
 8003654:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003658:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
 800365c:	69cd      	ldr	r5, [r1, #28]
 800365e:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
 8003662:	e7e2      	b.n	800362a <OC3Config+0x32>
 8003664:	40012c00 	.word	0x40012c00

08003668 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003668:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800366a:	6a03      	ldr	r3, [r0, #32]
 800366c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003670:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003672:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003674:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003676:	69c2      	ldr	r2, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003678:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800367c:	680d      	ldr	r5, [r1, #0]
 800367e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003682:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003686:	690d      	ldr	r5, [r1, #16]
 8003688:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800368c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003690:	684d      	ldr	r5, [r1, #4]
 8003692:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003696:	4d08      	ldr	r5, [pc, #32]	; (80036b8 <OC4Config+0x50>)
 8003698:	42a8      	cmp	r0, r5
 800369a:	d007      	beq.n	80036ac <OC4Config+0x44>
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800369c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800369e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80036a0:	68ca      	ldr	r2, [r1, #12]
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  WRITE_REG(TIMx->CCR4, CompareValue);
 80036a2:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80036a4:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 80036a6:	2001      	movs	r0, #1
 80036a8:	bc30      	pop	{r4, r5}
 80036aa:	4770      	bx	lr
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80036ac:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 80036b0:	698d      	ldr	r5, [r1, #24]
 80036b2:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80036b6:	e7f1      	b.n	800369c <OC4Config+0x34>
 80036b8:	40012c00 	.word	0x40012c00

080036bc <LL_TIM_Init>:
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80036bc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036be:	4a1b      	ldr	r2, [pc, #108]	; (800372c <LL_TIM_Init+0x70>)
 80036c0:	4290      	cmp	r0, r2
 80036c2:	d026      	beq.n	8003712 <LL_TIM_Init+0x56>
 80036c4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80036c8:	d023      	beq.n	8003712 <LL_TIM_Init+0x56>
 80036ca:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80036ce:	4290      	cmp	r0, r2
 80036d0:	d01f      	beq.n	8003712 <LL_TIM_Init+0x56>
 80036d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036d6:	4290      	cmp	r0, r2
 80036d8:	d01b      	beq.n	8003712 <LL_TIM_Init+0x56>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036da:	4a14      	ldr	r2, [pc, #80]	; (800372c <LL_TIM_Init+0x70>)
 80036dc:	4290      	cmp	r0, r2
 80036de:	d01d      	beq.n	800371c <LL_TIM_Init+0x60>
 80036e0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80036e4:	d01a      	beq.n	800371c <LL_TIM_Init+0x60>
 80036e6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80036ea:	4290      	cmp	r0, r2
 80036ec:	d016      	beq.n	800371c <LL_TIM_Init+0x60>
 80036ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036f2:	4290      	cmp	r0, r2
 80036f4:	d012      	beq.n	800371c <LL_TIM_Init+0x60>
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80036f6:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80036f8:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 80036fa:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80036fc:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80036fe:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003700:	4b0a      	ldr	r3, [pc, #40]	; (800372c <LL_TIM_Init+0x70>)
 8003702:	4298      	cmp	r0, r3
 8003704:	d00f      	beq.n	8003726 <LL_TIM_Init+0x6a>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003706:	6943      	ldr	r3, [r0, #20]
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	6143      	str	r3, [r0, #20]
}
 800370e:	2001      	movs	r0, #1
 8003710:	4770      	bx	lr
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003716:	684a      	ldr	r2, [r1, #4]
 8003718:	4313      	orrs	r3, r2
 800371a:	e7de      	b.n	80036da <LL_TIM_Init+0x1e>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800371c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003720:	68ca      	ldr	r2, [r1, #12]
 8003722:	4313      	orrs	r3, r2
 8003724:	e7e7      	b.n	80036f6 <LL_TIM_Init+0x3a>
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003726:	7c0b      	ldrb	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003728:	6303      	str	r3, [r0, #48]	; 0x30
 800372a:	e7ec      	b.n	8003706 <LL_TIM_Init+0x4a>
 800372c:	40012c00 	.word	0x40012c00

08003730 <LL_TIM_OC_Init>:
{
 8003730:	b508      	push	{r3, lr}
  switch (Channel)
 8003732:	2910      	cmp	r1, #16
 8003734:	d010      	beq.n	8003758 <LL_TIM_OC_Init+0x28>
 8003736:	d909      	bls.n	800374c <LL_TIM_OC_Init+0x1c>
 8003738:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800373c:	d010      	beq.n	8003760 <LL_TIM_OC_Init+0x30>
 800373e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003742:	d111      	bne.n	8003768 <LL_TIM_OC_Init+0x38>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003744:	4611      	mov	r1, r2
 8003746:	f7ff ff8f 	bl	8003668 <OC4Config>
      break;
 800374a:	bd08      	pop	{r3, pc}
  switch (Channel)
 800374c:	2901      	cmp	r1, #1
 800374e:	d10b      	bne.n	8003768 <LL_TIM_OC_Init+0x38>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003750:	4611      	mov	r1, r2
 8003752:	f7ff fee1 	bl	8003518 <OC1Config>
      break;
 8003756:	bd08      	pop	{r3, pc}
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003758:	4611      	mov	r1, r2
 800375a:	f7ff ff13 	bl	8003584 <OC2Config>
      break;
 800375e:	bd08      	pop	{r3, pc}
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003760:	4611      	mov	r1, r2
 8003762:	f7ff ff49 	bl	80035f8 <OC3Config>
      break;
 8003766:	bd08      	pop	{r3, pc}
  ErrorStatus result = ERROR;
 8003768:	2000      	movs	r0, #0
}
 800376a:	bd08      	pop	{r3, pc}

0800376c <LL_TIM_BDTR_Init>:
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 800376c:	7b0b      	ldrb	r3, [r1, #12]
 800376e:	688a      	ldr	r2, [r1, #8]
 8003770:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8003772:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003776:	684a      	ldr	r2, [r1, #4]
 8003778:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 800377a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800377e:	680a      	ldr	r2, [r1, #0]
 8003780:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8003782:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003786:	89ca      	ldrh	r2, [r1, #14]
 8003788:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 800378a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800378e:	690a      	ldr	r2, [r1, #16]
 8003790:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8003792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003796:	694a      	ldr	r2, [r1, #20]
 8003798:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 800379a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800379e:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80037a0:	6443      	str	r3, [r0, #68]	; 0x44
}
 80037a2:	2001      	movs	r0, #1
 80037a4:	4770      	bx	lr
	...

080037a8 <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <LL_Init1msTick+0x18>)
 80037aa:	fba3 3000 	umull	r3, r0, r3, r0
 80037ae:	0980      	lsrs	r0, r0, #6
 80037b0:	3801      	subs	r0, #1
 80037b2:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <LL_Init1msTick+0x1c>)
 80037b4:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80037b6:	2200      	movs	r2, #0
 80037b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ba:	2205      	movs	r2, #5
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	4770      	bx	lr
 80037c0:	10624dd3 	.word	0x10624dd3
 80037c4:	e000e010 	.word	0xe000e010

080037c8 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80037c8:	4b01      	ldr	r3, [pc, #4]	; (80037d0 <LL_SetSystemCoreClock+0x8>)
 80037ca:	6018      	str	r0, [r3, #0]
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	200000b0 	.word	0x200000b0

080037d4 <_Z41__static_initialization_and_destruction_0ii>:
    // compare pointer
    if (huart->Instance == serial.get_handle()->Instance)
    {
        serial.tx_cplt_callback();
    }
}
 80037d4:	2801      	cmp	r0, #1
 80037d6:	d000      	beq.n	80037da <_Z41__static_initialization_and_destruction_0ii+0x6>
 80037d8:	4770      	bx	lr
 80037da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037de:	4299      	cmp	r1, r3
 80037e0:	d1fa      	bne.n	80037d8 <_Z41__static_initialization_and_destruction_0ii+0x4>
	uint16_t tx_head = 0;
	uint16_t tx_tail = 0;
	UART_HandleTypeDef &huart;

public:
	SerialClass(UART_HandleTypeDef &huart) : huart(huart)
 80037e2:	4b07      	ldr	r3, [pc, #28]	; (8003800 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 80037ea:	2200      	movs	r2, #0
 80037ec:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
 80037f0:	f8a3 2804 	strh.w	r2, [r3, #2052]	; 0x804
 80037f4:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
 80037f8:	4a02      	ldr	r2, [pc, #8]	; (8003804 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80037fa:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 80037fe:	e7eb      	b.n	80037d8 <_Z41__static_initialization_and_destruction_0ii+0x4>
 8003800:	20000744 	.word	0x20000744
 8003804:	20001090 	.word	0x20001090

08003808 <HAL_UART_TxCpltCallback>:
    if (huart->Instance == serial.get_handle()->Instance)
 8003808:	6802      	ldr	r2, [r0, #0]
		//this->huart = huart;
	}

	inline UART_HandleTypeDef * const get_handle(void)
	{
		return &huart;
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <HAL_UART_TxCpltCallback+0x1c>)
 800380c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d000      	beq.n	8003818 <HAL_UART_TxCpltCallback+0x10>
 8003816:	4770      	bx	lr
		}
	}

	inline void tx_cplt_callback(void)
	{
		tx_cplt = true;
 8003818:	2201      	movs	r2, #1
 800381a:	4b02      	ldr	r3, [pc, #8]	; (8003824 <HAL_UART_TxCpltCallback+0x1c>)
 800381c:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
}
 8003820:	e7f9      	b.n	8003816 <HAL_UART_TxCpltCallback+0xe>
 8003822:	bf00      	nop
 8003824:	20000744 	.word	0x20000744

08003828 <_GLOBAL__sub_I_serial>:
 8003828:	b508      	push	{r3, lr}
 800382a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800382e:	2001      	movs	r0, #1
 8003830:	f7ff ffd0 	bl	80037d4 <_Z41__static_initialization_and_destruction_0ii>
 8003834:	bd08      	pop	{r3, pc}

08003836 <_Z10can_unpackItEvRA8_KhRT_>:
template<typename T>
void can_unpack(const uint8_t (&buf)[CAN_MTU], T &data)
{
    _Encapsulator<T> _e;

    for (int i = 0; i < sizeof(T); i++)
 8003836:	2300      	movs	r3, #0
 8003838:	2b01      	cmp	r3, #1
 800383a:	d810      	bhi.n	800385e <_Z10can_unpackItEvRA8_KhRT_+0x28>
void can_unpack(const uint8_t (&buf)[CAN_MTU], T &data)
 800383c:	b4f0      	push	{r4, r5, r6, r7}
    {
        _e.i = (_e.i << 8) | (uint64_t) (buf[i]);
 800383e:	0235      	lsls	r5, r6, #8
 8003840:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8003844:	0214      	lsls	r4, r2, #8
 8003846:	5cc6      	ldrb	r6, [r0, r3]
 8003848:	2700      	movs	r7, #0
 800384a:	4326      	orrs	r6, r4
 800384c:	432f      	orrs	r7, r5
 800384e:	4632      	mov	r2, r6
 8003850:	463e      	mov	r6, r7
    for (int i = 0; i < sizeof(T); i++)
 8003852:	3301      	adds	r3, #1
 8003854:	2b01      	cmp	r3, #1
 8003856:	d9f2      	bls.n	800383e <_Z10can_unpackItEvRA8_KhRT_+0x8>
    }

    data = _e.data;
 8003858:	800a      	strh	r2, [r1, #0]
}
 800385a:	bcf0      	pop	{r4, r5, r6, r7}
 800385c:	4770      	bx	lr
    data = _e.data;
 800385e:	800a      	strh	r2, [r1, #0]
 8003860:	4770      	bx	lr

08003862 <_Z10can_unpackIdEvRA8_KhRT_>:
void can_unpack(const uint8_t (&buf)[CAN_MTU], T &data)
 8003862:	b470      	push	{r4, r5, r6}
    for (int i = 0; i < sizeof(T); i++)
 8003864:	2600      	movs	r6, #0
 8003866:	2e07      	cmp	r6, #7
 8003868:	d809      	bhi.n	800387e <_Z10can_unpackIdEvRA8_KhRT_+0x1c>
        _e.i = (_e.i << 8) | (uint64_t) (buf[i]);
 800386a:	021d      	lsls	r5, r3, #8
 800386c:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8003870:	0214      	lsls	r4, r2, #8
 8003872:	5d82      	ldrb	r2, [r0, r6]
 8003874:	2300      	movs	r3, #0
 8003876:	4322      	orrs	r2, r4
 8003878:	432b      	orrs	r3, r5
    for (int i = 0; i < sizeof(T); i++)
 800387a:	3601      	adds	r6, #1
 800387c:	e7f3      	b.n	8003866 <_Z10can_unpackIdEvRA8_KhRT_+0x4>
    data = _e.data;
 800387e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003882:	bc70      	pop	{r4, r5, r6}
 8003884:	4770      	bx	lr
	...

08003888 <can_init>:
}

void can_init(void)
{
    // default to 125 kbit/s
    prescaler = 48;
 8003888:	2230      	movs	r2, #48	; 0x30
 800388a:	4b04      	ldr	r3, [pc, #16]	; (800389c <can_init+0x14>)
 800388c:	601a      	str	r2, [r3, #0]
    hcan.Instance = CAN1;
 800388e:	4a04      	ldr	r2, [pc, #16]	; (80038a0 <can_init+0x18>)
 8003890:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <can_init+0x1c>)
 8003892:	601a      	str	r2, [r3, #0]
    bus_state = OFF_BUS;
 8003894:	2200      	movs	r2, #0
 8003896:	4b04      	ldr	r3, [pc, #16]	; (80038a8 <can_init+0x20>)
 8003898:	701a      	strb	r2, [r3, #0]
 800389a:	4770      	bx	lr
 800389c:	20000f7c 	.word	0x20000f7c
 80038a0:	40006400 	.word	0x40006400
 80038a4:	20000fe0 	.word	0x20000fe0
 80038a8:	20000f50 	.word	0x20000f50

080038ac <can_set_filter>:
}

void can_set_filter(uint32_t id, uint32_t mask)
{
 80038ac:	b508      	push	{r3, lr}
    // see page 825 of RM0091 for details on filters
    // set the standard ID part
    filter.FilterIdHigh = (id & 0x7FF) << 5;
 80038ae:	0142      	lsls	r2, r0, #5
 80038b0:	b292      	uxth	r2, r2
    // add the top 5 bits of the extended ID
    filter.FilterIdHigh += (id >> 24) & 0xFFFF;
 80038b2:	eb02 6210 	add.w	r2, r2, r0, lsr #24
 80038b6:	4b14      	ldr	r3, [pc, #80]	; (8003908 <can_set_filter+0x5c>)
 80038b8:	601a      	str	r2, [r3, #0]
    // set the low part to the remaining extended ID bits
    filter.FilterIdLow += ((id & 0x1FFFF800) << 3);
 80038ba:	00c0      	lsls	r0, r0, #3
 80038bc:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 80038c0:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	4410      	add	r0, r2
 80038c8:	6058      	str	r0, [r3, #4]

    // set the standard ID part
    filter.FilterMaskIdHigh = (mask & 0x7FF) << 5;
 80038ca:	014a      	lsls	r2, r1, #5
 80038cc:	b292      	uxth	r2, r2
    // add the top 5 bits of the extended ID
    filter.FilterMaskIdHigh += (mask >> 24) & 0xFFFF;
 80038ce:	eb02 6211 	add.w	r2, r2, r1, lsr #24
 80038d2:	609a      	str	r2, [r3, #8]
    // set the low part to the remaining extended ID bits
    filter.FilterMaskIdLow += ((mask & 0x1FFFF800) << 3);
 80038d4:	00c9      	lsls	r1, r1, #3
 80038d6:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 80038da:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	4411      	add	r1, r2
 80038e2:	60d9      	str	r1, [r3, #12]

    filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80038e4:	2200      	movs	r2, #0
 80038e6:	619a      	str	r2, [r3, #24]
    filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80038e8:	2101      	movs	r1, #1
 80038ea:	61d9      	str	r1, [r3, #28]
    filter.FilterBank = 0;
 80038ec:	615a      	str	r2, [r3, #20]
    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80038ee:	611a      	str	r2, [r3, #16]
    filter.SlaveStartFilterBank = 0;
 80038f0:	625a      	str	r2, [r3, #36]	; 0x24
    filter.FilterActivation = ENABLE;
 80038f2:	6219      	str	r1, [r3, #32]

    if (bus_state == ON_BUS)
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <can_set_filter+0x60>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	428b      	cmp	r3, r1
 80038fa:	d000      	beq.n	80038fe <can_set_filter+0x52>
 80038fc:	bd08      	pop	{r3, pc}
    {
        HAL_CAN_ConfigFilter(&hcan, &filter);
 80038fe:	4902      	ldr	r1, [pc, #8]	; (8003908 <can_set_filter+0x5c>)
 8003900:	4803      	ldr	r0, [pc, #12]	; (8003910 <can_set_filter+0x64>)
 8003902:	f7fe fb49 	bl	8001f98 <HAL_CAN_ConfigFilter>
    }
}
 8003906:	e7f9      	b.n	80038fc <can_set_filter+0x50>
 8003908:	20000f54 	.word	0x20000f54
 800390c:	20000f50 	.word	0x20000f50
 8003910:	20000fe0 	.word	0x20000fe0

08003914 <can_enable>:

void can_enable(void)
{
    if (bus_state == OFF_BUS)
 8003914:	4b18      	ldr	r3, [pc, #96]	; (8003978 <can_enable+0x64>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	b103      	cbz	r3, 800391c <can_enable+0x8>
 800391a:	4770      	bx	lr
{
 800391c:	b570      	push	{r4, r5, r6, lr}
    {
        hcan.Init.Prescaler = prescaler;
 800391e:	4b17      	ldr	r3, [pc, #92]	; (800397c <can_enable+0x68>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4c17      	ldr	r4, [pc, #92]	; (8003980 <can_enable+0x6c>)
 8003924:	6063      	str	r3, [r4, #4]
        hcan.Init.Mode = CAN_MODE_NORMAL;
 8003926:	2500      	movs	r5, #0
 8003928:	60a5      	str	r5, [r4, #8]
        hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800392a:	60e5      	str	r5, [r4, #12]
        hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 800392c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003930:	6123      	str	r3, [r4, #16]
        hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8003932:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003936:	6163      	str	r3, [r4, #20]
        hcan.Init.TimeTriggeredMode = DISABLE;
 8003938:	7625      	strb	r5, [r4, #24]
        hcan.Init.AutoBusOff = DISABLE;
 800393a:	7665      	strb	r5, [r4, #25]
        hcan.Init.AutoWakeUp = DISABLE;
 800393c:	76a5      	strb	r5, [r4, #26]
        hcan.Init.AutoRetransmission = ENABLE;
 800393e:	2601      	movs	r6, #1
 8003940:	76e6      	strb	r6, [r4, #27]
        hcan.Init.ReceiveFifoLocked = DISABLE;
 8003942:	7725      	strb	r5, [r4, #28]
        hcan.Init.TransmitFifoPriority = DISABLE;
 8003944:	7765      	strb	r5, [r4, #29]
        //hcan.pTxMsg = NULL;
        HAL_CAN_Init(&hcan);
 8003946:	4620      	mov	r0, r4
 8003948:	f7fe fa80 	bl	8001e4c <HAL_CAN_Init>
        bus_state = ON_BUS;
 800394c:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <can_enable+0x64>)
 800394e:	701e      	strb	r6, [r3, #0]
        can_set_filter(0, 0);
 8003950:	4629      	mov	r1, r5
 8003952:	4628      	mov	r0, r5
 8003954:	f7ff ffaa 	bl	80038ac <can_set_filter>

        /* Start the CAN peripheral */
        if (HAL_CAN_Start(&hcan) != HAL_OK)
 8003958:	4620      	mov	r0, r4
 800395a:	f7fe fb9b 	bl	8002094 <HAL_CAN_Start>
 800395e:	b928      	cbnz	r0, 800396c <can_enable+0x58>
            /* Start Error */
            Error_Handler();
        }

        /* Activate CAN RX notification */
        if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8003960:	2102      	movs	r1, #2
 8003962:	4807      	ldr	r0, [pc, #28]	; (8003980 <can_enable+0x6c>)
 8003964:	f7fe fc5e 	bl	8002224 <HAL_CAN_ActivateNotification>
 8003968:	b918      	cbnz	r0, 8003972 <can_enable+0x5e>
 800396a:	bd70      	pop	{r4, r5, r6, pc}
            Error_Handler();
 800396c:	f000 fcb0 	bl	80042d0 <Error_Handler>
 8003970:	e7f6      	b.n	8003960 <can_enable+0x4c>
        {
            /* Notification Error */
            Error_Handler();
 8003972:	f000 fcad 	bl	80042d0 <Error_Handler>
        }
    }
}
 8003976:	e7f8      	b.n	800396a <can_enable+0x56>
 8003978:	20000f50 	.word	0x20000f50
 800397c:	20000f7c 	.word	0x20000f7c
 8003980:	20000fe0 	.word	0x20000fe0

08003984 <can_set_bitrate>:
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
}

void can_set_bitrate(enum can_bitrate bitrate)
{
    if (bus_state == ON_BUS)
 8003984:	4b18      	ldr	r3, [pc, #96]	; (80039e8 <can_set_bitrate+0x64>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d02c      	beq.n	80039e6 <can_set_bitrate+0x62>
    {
        // cannot set bitrate while on bus
        return;
    }

    switch (bitrate)
 800398c:	2808      	cmp	r0, #8
 800398e:	d82a      	bhi.n	80039e6 <can_set_bitrate+0x62>
 8003990:	e8df f000 	tbb	[pc, r0]
 8003994:	120e0a05 	.word	0x120e0a05
 8003998:	221e1a16 	.word	0x221e1a16
 800399c:	26          	.byte	0x26
 800399d:	00          	.byte	0x00
    {
        case CAN_BITRATE_10K:
            prescaler = 450;
 800399e:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80039a2:	4b12      	ldr	r3, [pc, #72]	; (80039ec <can_set_bitrate+0x68>)
 80039a4:	601a      	str	r2, [r3, #0]
            break;
 80039a6:	4770      	bx	lr
        case CAN_BITRATE_20K:
            prescaler = 225;
 80039a8:	22e1      	movs	r2, #225	; 0xe1
 80039aa:	4b10      	ldr	r3, [pc, #64]	; (80039ec <can_set_bitrate+0x68>)
 80039ac:	601a      	str	r2, [r3, #0]
            break;
 80039ae:	4770      	bx	lr
        case CAN_BITRATE_50K:
            prescaler = 90;
 80039b0:	225a      	movs	r2, #90	; 0x5a
 80039b2:	4b0e      	ldr	r3, [pc, #56]	; (80039ec <can_set_bitrate+0x68>)
 80039b4:	601a      	str	r2, [r3, #0]
            break;
 80039b6:	4770      	bx	lr
        case CAN_BITRATE_100K:
            prescaler = 45;
 80039b8:	222d      	movs	r2, #45	; 0x2d
 80039ba:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <can_set_bitrate+0x68>)
 80039bc:	601a      	str	r2, [r3, #0]
            break;
 80039be:	4770      	bx	lr
        case CAN_BITRATE_125K:
            prescaler = 36;
 80039c0:	2224      	movs	r2, #36	; 0x24
 80039c2:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <can_set_bitrate+0x68>)
 80039c4:	601a      	str	r2, [r3, #0]
            break;
 80039c6:	4770      	bx	lr
        case CAN_BITRATE_250K:
            prescaler = 18;
 80039c8:	2212      	movs	r2, #18
 80039ca:	4b08      	ldr	r3, [pc, #32]	; (80039ec <can_set_bitrate+0x68>)
 80039cc:	601a      	str	r2, [r3, #0]
            break;
 80039ce:	4770      	bx	lr
        case CAN_BITRATE_500K:
            prescaler = 9;
 80039d0:	2209      	movs	r2, #9
 80039d2:	4b06      	ldr	r3, [pc, #24]	; (80039ec <can_set_bitrate+0x68>)
 80039d4:	601a      	str	r2, [r3, #0]
            break;
 80039d6:	4770      	bx	lr
        case CAN_BITRATE_750K:
            prescaler = 6;
 80039d8:	2206      	movs	r2, #6
 80039da:	4b04      	ldr	r3, [pc, #16]	; (80039ec <can_set_bitrate+0x68>)
 80039dc:	601a      	str	r2, [r3, #0]
            break;
 80039de:	4770      	bx	lr
        case CAN_BITRATE_1000K:
            prescaler = 4;
 80039e0:	2204      	movs	r2, #4
 80039e2:	4b02      	ldr	r3, [pc, #8]	; (80039ec <can_set_bitrate+0x68>)
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	4770      	bx	lr
 80039e8:	20000f50 	.word	0x20000f50
 80039ec:	20000f7c 	.word	0x20000f7c

080039f0 <can_rx>:
    led_on();
    return status;
}

uint32_t can_rx(CAN_RxHeaderTypeDef *rx_header, uint8_t (&buf)[CAN_MTU])
{
 80039f0:	b510      	push	{r4, lr}
    uint32_t status;

    //hcan.pRxMsg = rx_msg;
    //status = HAL_CAN_Receive(&hcan, CAN_FIFO0, timeout);

    status = HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, rx_header, buf);
 80039f2:	460b      	mov	r3, r1
 80039f4:	4602      	mov	r2, r0
 80039f6:	2100      	movs	r1, #0
 80039f8:	4803      	ldr	r0, [pc, #12]	; (8003a08 <can_rx+0x18>)
 80039fa:	f7fe fb79 	bl	80020f0 <HAL_CAN_GetRxMessage>
 80039fe:	4604      	mov	r4, r0

    led_on();
 8003a00:	f000 f8c8 	bl	8003b94 <led_on>
    return status;
}
 8003a04:	4620      	mov	r0, r4
 8003a06:	bd10      	pop	{r4, pc}
 8003a08:	20000fe0 	.word	0x20000fe0

08003a0c <HAL_CAN_RxFifo0MsgPendingCallback>:
{
 8003a0c:	b500      	push	{lr}
 8003a0e:	b08d      	sub	sp, #52	; 0x34
    uint32_t status = can_rx(&rx_header, rx_payload);
 8003a10:	a903      	add	r1, sp, #12
 8003a12:	a805      	add	r0, sp, #20
 8003a14:	f7ff ffec 	bl	80039f0 <can_rx>
    if (status != HAL_OK)
 8003a18:	b950      	cbnz	r0, 8003a30 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
    if (rx_header.StdId == confStruct.can_id_cmd)
 8003a1a:	9b05      	ldr	r3, [sp, #20]
 8003a1c:	4a34      	ldr	r2, [pc, #208]	; (8003af0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8003a1e:	8812      	ldrh	r2, [r2, #0]
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d008      	beq.n	8003a36 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
    else if (rx_header.StdId == confStruct.can_id_vel)
 8003a24:	4a32      	ldr	r2, [pc, #200]	; (8003af0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8003a26:	8852      	ldrh	r2, [r2, #2]
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d057      	beq.n	8003adc <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>
    led_process();
 8003a2c:	f000 f8d4 	bl	8003bd8 <led_process>
}
 8003a30:	b00d      	add	sp, #52	; 0x34
 8003a32:	f85d fb04 	ldr.w	pc, [sp], #4
        can_unpack(rx_payload, cmd);
 8003a36:	4669      	mov	r1, sp
 8003a38:	a803      	add	r0, sp, #12
 8003a3a:	f7ff fefc 	bl	8003836 <_Z10can_unpackItEvRA8_KhRT_>
        switch (cmd)
 8003a3e:	f8bd 3000 	ldrh.w	r3, [sp]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d027      	beq.n	8003a96 <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d1f0      	bne.n	8003a2c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
    }

    inline void Recover(void)
    {
//#warning "ignore me if you know what you are doing."
        if ((GPIOC->IDR & GPIO_IDR_IDR14) != 0)
 8003a4a:	4b2a      	ldr	r3, [pc, #168]	; (8003af4 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003a52:	d0eb      	beq.n	8003a2c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
        //if (true)
        {
            TIM1->CCR1 = 0;
 8003a54:	4b28      	ldr	r3, [pc, #160]	; (8003af8 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	635a      	str	r2, [r3, #52]	; 0x34
            TIM1->CCR2 = 0;
 8003a5a:	639a      	str	r2, [r3, #56]	; 0x38
        }
    }

    inline void ResetState(void)
    {
        TIM2->CNT = 0;
 8003a5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a60:	625a      	str	r2, [r3, #36]	; 0x24
        //this->enc_cnt = 0;
        this->pulse = 0;
 8003a62:	4b26      	ldr	r3, [pc, #152]	; (8003afc <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8003a64:	609a      	str	r2, [r3, #8]
        this->velocity = 0;
 8003a66:	2000      	movs	r0, #0
 8003a68:	2100      	movs	r1, #0
 8003a6a:	e9c3 0104 	strd	r0, r1, [r3, #16]
        this->error = 0;
 8003a6e:	e9c3 0106 	strd	r0, r1, [r3, #24]
        this->error_prev = 0;
 8003a72:	e9c3 0108 	strd	r0, r1, [r3, #32]
        this->u_p = 0;
 8003a76:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
        this->u_i = 0;
 8003a7a:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
        this->target_velocity = 0;
 8003a7e:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
        this->target_torque = 0;
 8003a82:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
        this->target_voltage = 0;
 8003a86:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
            GPIOB->BSRR = GPIO_BSRR_BS15;
 8003a8a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003a8e:	491c      	ldr	r1, [pc, #112]	; (8003b00 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8003a90:	6108      	str	r0, [r1, #16]
            this->shutdown = false;
 8003a92:	711a      	strb	r2, [r3, #4]
 8003a94:	e7ca      	b.n	8003a2c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
        GPIOB->BSRR = GPIO_BSRR_BR15;
 8003a96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003a9a:	4b19      	ldr	r3, [pc, #100]	; (8003b00 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8003a9c:	611a      	str	r2, [r3, #16]
        TIM1->CCR1 = 0;
 8003a9e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	635a      	str	r2, [r3, #52]	; 0x34
        TIM1->CCR2 = 0;
 8003aa6:	639a      	str	r2, [r3, #56]	; 0x38
        this->shutdown = true;
 8003aa8:	4b14      	ldr	r3, [pc, #80]	; (8003afc <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8003aaa:	2101      	movs	r1, #1
 8003aac:	7119      	strb	r1, [r3, #4]
        TIM2->CNT = 0;
 8003aae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003ab2:	624a      	str	r2, [r1, #36]	; 0x24
        this->pulse = 0;
 8003ab4:	609a      	str	r2, [r3, #8]
        this->velocity = 0;
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	2100      	movs	r1, #0
 8003aba:	e9c3 0104 	strd	r0, r1, [r3, #16]
        this->error = 0;
 8003abe:	e9c3 0106 	strd	r0, r1, [r3, #24]
        this->error_prev = 0;
 8003ac2:	e9c3 0108 	strd	r0, r1, [r3, #32]
        this->u_p = 0;
 8003ac6:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
        this->u_i = 0;
 8003aca:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
        this->target_velocity = 0;
 8003ace:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
        this->target_torque = 0;
 8003ad2:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
        this->target_voltage = 0;
 8003ad6:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
 8003ada:	e7a7      	b.n	8003a2c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
        can_unpack(rx_payload, vel_cmd);
 8003adc:	4669      	mov	r1, sp
 8003ade:	a803      	add	r0, sp, #12
 8003ae0:	f7ff febf 	bl	8003862 <_Z10can_unpackIdEvRA8_KhRT_>
        control.SetTarget(vel_cmd);
 8003ae4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003ae8:	4804      	ldr	r0, [pc, #16]	; (8003afc <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8003aea:	f000 fd29 	bl	8004540 <_ZN9MotorCtrl9SetTargetEd>
 8003aee:	e79d      	b.n	8003a2c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
 8003af0:	20000f80 	.word	0x20000f80
 8003af4:	40011000 	.word	0x40011000
 8003af8:	40012c00 	.word	0x40012c00
 8003afc:	20000008 	.word	0x20000008
 8003b00:	40010c00 	.word	0x40010c00

08003b04 <_Z11_eraseFlashv>:
#include <cstring>

#define DATA_PAGE_ADDR 0x0800fc00

void _eraseFlash(void)
{
 8003b04:	b500      	push	{lr}
 8003b06:	b087      	sub	sp, #28
    FLASH_EraseInitTypeDef erase;
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	9302      	str	r3, [sp, #8]
    erase.Banks = FLASH_BANK_1;
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	9203      	str	r2, [sp, #12]
    erase.PageAddress = DATA_PAGE_ADDR;
 8003b10:	4905      	ldr	r1, [pc, #20]	; (8003b28 <_Z11_eraseFlashv+0x24>)
 8003b12:	9104      	str	r1, [sp, #16]
    erase.NbPages = 1;
 8003b14:	9205      	str	r2, [sp, #20]

    uint32_t pageError = 0;
 8003b16:	a906      	add	r1, sp, #24
 8003b18:	f841 3d14 	str.w	r3, [r1, #-20]!

    HAL_FLASHEx_Erase(&erase, &pageError);
 8003b1c:	a802      	add	r0, sp, #8
 8003b1e:	f7fe ffbf 	bl	8002aa0 <HAL_FLASHEx_Erase>
}
 8003b22:	b007      	add	sp, #28
 8003b24:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b28:	0800fc00 	.word	0x0800fc00

08003b2c <_Z10writeFlashmPtm>:

void writeFlash(uint32_t address, uint16_t *data, uint32_t size)
{
 8003b2c:	b570      	push	{r4, r5, r6, lr}
 8003b2e:	4605      	mov	r5, r0
 8003b30:	460e      	mov	r6, r1
 8003b32:	4614      	mov	r4, r2
    HAL_FLASH_Unlock();     /* フラッシュをアンロック */
 8003b34:	f7fe fee8 	bl	8002908 <HAL_FLASH_Unlock>
    _eraseFlash();          /* ページを消去 */
 8003b38:	f7ff ffe4 	bl	8003b04 <_Z11_eraseFlashv>
    do {
        /* 2Byteずつフラッシュに書き込む */
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, *data);
 8003b3c:	f836 2b02 	ldrh.w	r2, [r6], #2
 8003b40:	2300      	movs	r3, #0
 8003b42:	4629      	mov	r1, r5
 8003b44:	2001      	movs	r0, #1
 8003b46:	f7fe ff39 	bl	80029bc <HAL_FLASH_Program>
    } while (address+=2, data++, size-=2);
 8003b4a:	3502      	adds	r5, #2
    do {
 8003b4c:	3c02      	subs	r4, #2
 8003b4e:	d1f5      	bne.n	8003b3c <_Z10writeFlashmPtm+0x10>
    HAL_FLASH_Lock();       /* フラッシュをロック */
 8003b50:	f7fe fef4 	bl	800293c <HAL_FLASH_Lock>
 8003b54:	bd70      	pop	{r4, r5, r6, pc}

08003b56 <_Z9loadFlashmPhm>:
}

void loadFlash(uint32_t address, uint8_t *data, uint32_t size)
{
 8003b56:	b508      	push	{r3, lr}
 8003b58:	460b      	mov	r3, r1
    memcpy(data, (uint8_t*)address, size);
 8003b5a:	4601      	mov	r1, r0
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f001 fdc9 	bl	80056f4 <memcpy>
 8003b62:	bd08      	pop	{r3, pc}

08003b64 <_Z8readConfv>:
#include "conf.h"

ConfStruct confStruct;

void readConf(void)
{
 8003b64:	b508      	push	{r3, lr}
    loadFlash(DATA_PAGE_ADDR, (uint8_t*)&confStruct, sizeof(ConfStruct));
 8003b66:	2250      	movs	r2, #80	; 0x50
 8003b68:	4902      	ldr	r1, [pc, #8]	; (8003b74 <_Z8readConfv+0x10>)
 8003b6a:	4803      	ldr	r0, [pc, #12]	; (8003b78 <_Z8readConfv+0x14>)
 8003b6c:	f7ff fff3 	bl	8003b56 <_Z9loadFlashmPhm>
 8003b70:	bd08      	pop	{r3, pc}
 8003b72:	bf00      	nop
 8003b74:	20000f80 	.word	0x20000f80
 8003b78:	0800fc00 	.word	0x0800fc00

08003b7c <_Z9writeConfv>:
}

void writeConf(void)
{
 8003b7c:	b508      	push	{r3, lr}
    writeFlash(DATA_PAGE_ADDR, (uint16_t*)&confStruct, sizeof(ConfStruct));
 8003b7e:	2250      	movs	r2, #80	; 0x50
 8003b80:	4902      	ldr	r1, [pc, #8]	; (8003b8c <_Z9writeConfv+0x10>)
 8003b82:	4803      	ldr	r0, [pc, #12]	; (8003b90 <_Z9writeConfv+0x14>)
 8003b84:	f7ff ffd2 	bl	8003b2c <_Z10writeFlashmPtm>
 8003b88:	bd08      	pop	{r3, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000f80 	.word	0x20000f80
 8003b90:	0800fc00 	.word	0x0800fc00

08003b94 <led_on>:
static uint32_t led_laston_stat = 0;
static uint32_t led_lastoff_stat = 0;

// Attempt to turn on status LED
void led_on(void)
{
 8003b94:	b508      	push	{r3, lr}
	// Make sure the LED has been off for at least LED_DURATION before turning on again
	// This prevents a solid status LED on a busy canbus
	if(led_laston == 0 && HAL_GetTick() - led_lastoff > LED_DURATION)
 8003b96:	4b0d      	ldr	r3, [pc, #52]	; (8003bcc <led_on+0x38>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	b113      	cbz	r3, 8003ba2 <led_on+0xe>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	b95b      	cbnz	r3, 8003bb8 <led_on+0x24>
 8003ba0:	bd08      	pop	{r3, pc}
 8003ba2:	f7fe f939 	bl	8001e18 <HAL_GetTick>
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <led_on+0x3c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	1ac0      	subs	r0, r0, r3
 8003bac:	280a      	cmp	r0, #10
 8003bae:	d901      	bls.n	8003bb4 <led_on+0x20>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e7f4      	b.n	8003b9e <led_on+0xa>
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	e7f2      	b.n	8003b9e <led_on+0xa>
	{
        GPIOC->BSRR = GPIO_BSRR_BS13;
 8003bb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bbc:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <led_on+0x40>)
 8003bbe:	611a      	str	r2, [r3, #16]
		led_laston = HAL_GetTick();
 8003bc0:	f7fe f92a 	bl	8001e18 <HAL_GetTick>
 8003bc4:	4b01      	ldr	r3, [pc, #4]	; (8003bcc <led_on+0x38>)
 8003bc6:	6018      	str	r0, [r3, #0]
	}
}
 8003bc8:	e7ea      	b.n	8003ba0 <led_on+0xc>
 8003bca:	bf00      	nop
 8003bcc:	20000fd0 	.word	0x20000fd0
 8003bd0:	20000fd4 	.word	0x20000fd4
 8003bd4:	40011000 	.word	0x40011000

08003bd8 <led_process>:


// Process time-based LED events
void led_process(void)
{
 8003bd8:	b508      	push	{r3, lr}
	// If LED has been on for long enough, turn it off
	if(led_laston > 0 && HAL_GetTick() - led_laston > LED_DURATION)
 8003bda:	4b2a      	ldr	r3, [pc, #168]	; (8003c84 <led_process+0xac>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	b973      	cbnz	r3, 8003bfe <led_process+0x26>
 8003be0:	2300      	movs	r3, #0
 8003be2:	b9bb      	cbnz	r3, 8003c14 <led_process+0x3c>
        GPIOC->BSRR = GPIO_BSRR_BR13;
		led_laston = 0;
		led_lastoff = HAL_GetTick();
	}

    if(led_laston_stat > 0 && HAL_GetTick() - led_laston_stat > LED_STAT_ON_DUR)
 8003be4:	4b28      	ldr	r3, [pc, #160]	; (8003c88 <led_process+0xb0>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	bb03      	cbnz	r3, 8003c2c <led_process+0x54>
 8003bea:	2300      	movs	r3, #0
 8003bec:	bb5b      	cbnz	r3, 8003c46 <led_process+0x6e>
        GPIOB->BSRR = GPIO_BSRR_BR0;
        led_laston_stat = 0;
        led_lastoff_stat = HAL_GetTick();
    }

    if(led_laston_stat == 0 && HAL_GetTick() - led_lastoff_stat > LED_STAT_OFF_DUR)
 8003bee:	4b26      	ldr	r3, [pc, #152]	; (8003c88 <led_process+0xb0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d033      	beq.n	8003c5e <led_process+0x86>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d13b      	bne.n	8003c74 <led_process+0x9c>
 8003bfc:	bd08      	pop	{r3, pc}
	if(led_laston > 0 && HAL_GetTick() - led_laston > LED_DURATION)
 8003bfe:	f7fe f90b 	bl	8001e18 <HAL_GetTick>
 8003c02:	4b20      	ldr	r3, [pc, #128]	; (8003c84 <led_process+0xac>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	1ac0      	subs	r0, r0, r3
 8003c08:	280a      	cmp	r0, #10
 8003c0a:	d901      	bls.n	8003c10 <led_process+0x38>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e7e8      	b.n	8003be2 <led_process+0xa>
 8003c10:	2300      	movs	r3, #0
 8003c12:	e7e6      	b.n	8003be2 <led_process+0xa>
        GPIOC->BSRR = GPIO_BSRR_BR13;
 8003c14:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003c18:	4b1c      	ldr	r3, [pc, #112]	; (8003c8c <led_process+0xb4>)
 8003c1a:	611a      	str	r2, [r3, #16]
		led_laston = 0;
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	4b19      	ldr	r3, [pc, #100]	; (8003c84 <led_process+0xac>)
 8003c20:	601a      	str	r2, [r3, #0]
		led_lastoff = HAL_GetTick();
 8003c22:	f7fe f8f9 	bl	8001e18 <HAL_GetTick>
 8003c26:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <led_process+0xb8>)
 8003c28:	6018      	str	r0, [r3, #0]
 8003c2a:	e7db      	b.n	8003be4 <led_process+0xc>
    if(led_laston_stat > 0 && HAL_GetTick() - led_laston_stat > LED_STAT_ON_DUR)
 8003c2c:	f7fe f8f4 	bl	8001e18 <HAL_GetTick>
 8003c30:	4b15      	ldr	r3, [pc, #84]	; (8003c88 <led_process+0xb0>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	1ac0      	subs	r0, r0, r3
 8003c36:	f640 3354 	movw	r3, #2900	; 0xb54
 8003c3a:	4298      	cmp	r0, r3
 8003c3c:	d901      	bls.n	8003c42 <led_process+0x6a>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e7d4      	b.n	8003bec <led_process+0x14>
 8003c42:	2300      	movs	r3, #0
 8003c44:	e7d2      	b.n	8003bec <led_process+0x14>
        GPIOB->BSRR = GPIO_BSRR_BR0;
 8003c46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c4a:	4b12      	ldr	r3, [pc, #72]	; (8003c94 <led_process+0xbc>)
 8003c4c:	611a      	str	r2, [r3, #16]
        led_laston_stat = 0;
 8003c4e:	2200      	movs	r2, #0
 8003c50:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <led_process+0xb0>)
 8003c52:	601a      	str	r2, [r3, #0]
        led_lastoff_stat = HAL_GetTick();
 8003c54:	f7fe f8e0 	bl	8001e18 <HAL_GetTick>
 8003c58:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <led_process+0xc0>)
 8003c5a:	6018      	str	r0, [r3, #0]
 8003c5c:	e7c7      	b.n	8003bee <led_process+0x16>
    if(led_laston_stat == 0 && HAL_GetTick() - led_lastoff_stat > LED_STAT_OFF_DUR)
 8003c5e:	f7fe f8db 	bl	8001e18 <HAL_GetTick>
 8003c62:	4b0d      	ldr	r3, [pc, #52]	; (8003c98 <led_process+0xc0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	1ac0      	subs	r0, r0, r3
 8003c68:	2864      	cmp	r0, #100	; 0x64
 8003c6a:	d901      	bls.n	8003c70 <led_process+0x98>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e7c3      	b.n	8003bf8 <led_process+0x20>
 8003c70:	2300      	movs	r3, #0
 8003c72:	e7c1      	b.n	8003bf8 <led_process+0x20>
    {
        GPIOB->BSRR = GPIO_BSRR_BS0;
 8003c74:	2201      	movs	r2, #1
 8003c76:	4b07      	ldr	r3, [pc, #28]	; (8003c94 <led_process+0xbc>)
 8003c78:	611a      	str	r2, [r3, #16]
        led_laston_stat = HAL_GetTick();
 8003c7a:	f7fe f8cd 	bl	8001e18 <HAL_GetTick>
 8003c7e:	4b02      	ldr	r3, [pc, #8]	; (8003c88 <led_process+0xb0>)
 8003c80:	6018      	str	r0, [r3, #0]
    }
}
 8003c82:	e7bb      	b.n	8003bfc <led_process+0x24>
 8003c84:	20000fd0 	.word	0x20000fd0
 8003c88:	20000fd8 	.word	0x20000fd8
 8003c8c:	40011000 	.word	0x40011000
 8003c90:	20000fd4 	.word	0x20000fd4
 8003c94:	40010c00 	.word	0x40010c00
 8003c98:	20000fdc 	.word	0x20000fdc

08003c9c <_ZL11MX_CRC_Initv>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8003c9c:	b082      	sub	sp, #8
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8003c9e:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <_ZL11MX_CRC_Initv+0x1c>)
 8003ca0:	695a      	ldr	r2, [r3, #20]
 8003ca2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ca6:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003cb0:	9b01      	ldr	r3, [sp, #4]
    /* USER CODE END CRC_Init 1 */
    /* USER CODE BEGIN CRC_Init 2 */

    /* USER CODE END CRC_Init 2 */

}
 8003cb2:	b002      	add	sp, #8
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40021000 	.word	0x40021000

08003cbc <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8003cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cc0:	b08a      	sub	sp, #40	; 0x28
    LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003cc2:	2400      	movs	r4, #0
 8003cc4:	9405      	str	r4, [sp, #20]
 8003cc6:	9406      	str	r4, [sp, #24]
 8003cc8:	9407      	str	r4, [sp, #28]
 8003cca:	9408      	str	r4, [sp, #32]
 8003ccc:	9409      	str	r4, [sp, #36]	; 0x24
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003cce:	4b27      	ldr	r3, [pc, #156]	; (8003d6c <_ZL12MX_GPIO_Initv+0xb0>)
 8003cd0:	699a      	ldr	r2, [r3, #24]
 8003cd2:	f042 0210 	orr.w	r2, r2, #16
 8003cd6:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003cd8:	699a      	ldr	r2, [r3, #24]
 8003cda:	f002 0210 	and.w	r2, r2, #16
 8003cde:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8003ce0:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003ce2:	699a      	ldr	r2, [r3, #24]
 8003ce4:	f042 0220 	orr.w	r2, r2, #32
 8003ce8:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003cea:	699a      	ldr	r2, [r3, #24]
 8003cec:	f002 0220 	and.w	r2, r2, #32
 8003cf0:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8003cf2:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	f042 0204 	orr.w	r2, r2, #4
 8003cfa:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003cfc:	699a      	ldr	r2, [r3, #24]
 8003cfe:	f002 0204 	and.w	r2, r2, #4
 8003d02:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8003d04:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003d06:	699a      	ldr	r2, [r3, #24]
 8003d08:	f042 0208 	orr.w	r2, r2, #8
 8003d0c:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003d16:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8003d18:	4d15      	ldr	r5, [pc, #84]	; (8003d70 <_ZL12MX_GPIO_Initv+0xb4>)
 8003d1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d1e:	616b      	str	r3, [r5, #20]
 8003d20:	4e14      	ldr	r6, [pc, #80]	; (8003d74 <_ZL12MX_GPIO_Initv+0xb8>)
 8003d22:	f248 0307 	movw	r3, #32775	; 0x8007
 8003d26:	6173      	str	r3, [r6, #20]

    /**/
    LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2 | LL_GPIO_PIN_15);

    /**/
    GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8003d28:	4b13      	ldr	r3, [pc, #76]	; (8003d78 <_ZL12MX_GPIO_Initv+0xbc>)
 8003d2a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003d2c:	f04f 0801 	mov.w	r8, #1
 8003d30:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003d34:	2702      	movs	r7, #2
 8003d36:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
    LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d38:	a905      	add	r1, sp, #20
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	f7ff fb72 	bl	8003424 <LL_GPIO_Init>

    /**/
    GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8003d40:	4b0e      	ldr	r3, [pc, #56]	; (8003d7c <_ZL12MX_GPIO_Initv+0xc0>)
 8003d42:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003d44:	2304      	movs	r3, #4
 8003d46:	9306      	str	r3, [sp, #24]
    LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d48:	a905      	add	r1, sp, #20
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	f7ff fb6a 	bl	8003424 <LL_GPIO_Init>

    /**/
    GPIO_InitStruct.Pin = LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2 | LL_GPIO_PIN_15;
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <_ZL12MX_GPIO_Initv+0xc4>)
 8003d52:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003d54:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003d58:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003d5a:	9408      	str	r4, [sp, #32]
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d5c:	a905      	add	r1, sp, #20
 8003d5e:	4630      	mov	r0, r6
 8003d60:	f7ff fb60 	bl	8003424 <LL_GPIO_Init>

}
 8003d64:	b00a      	add	sp, #40	; 0x28
 8003d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d6a:	bf00      	nop
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	40011000 	.word	0x40011000
 8003d74:	40010c00 	.word	0x40010c00
 8003d78:	04200020 	.word	0x04200020
 8003d7c:	04400040 	.word	0x04400040
 8003d80:	04800787 	.word	0x04800787

08003d84 <_ZL11MX_CAN_Initv>:
{
 8003d84:	b508      	push	{r3, lr}
    hcan.Instance = CAN1;
 8003d86:	4809      	ldr	r0, [pc, #36]	; (8003dac <_ZL11MX_CAN_Initv+0x28>)
 8003d88:	4b09      	ldr	r3, [pc, #36]	; (8003db0 <_ZL11MX_CAN_Initv+0x2c>)
 8003d8a:	6003      	str	r3, [r0, #0]
    hcan.Init.Prescaler = 18;
 8003d8c:	2312      	movs	r3, #18
 8003d8e:	6043      	str	r3, [r0, #4]
    hcan.Init.Mode = CAN_MODE_NORMAL;
 8003d90:	2300      	movs	r3, #0
 8003d92:	6083      	str	r3, [r0, #8]
    hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003d94:	60c3      	str	r3, [r0, #12]
    hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8003d96:	6103      	str	r3, [r0, #16]
    hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003d98:	6143      	str	r3, [r0, #20]
    hcan.Init.TimeTriggeredMode = DISABLE;
 8003d9a:	7603      	strb	r3, [r0, #24]
    hcan.Init.AutoBusOff = DISABLE;
 8003d9c:	7643      	strb	r3, [r0, #25]
    hcan.Init.AutoWakeUp = DISABLE;
 8003d9e:	7683      	strb	r3, [r0, #26]
    hcan.Init.AutoRetransmission = DISABLE;
 8003da0:	76c3      	strb	r3, [r0, #27]
    hcan.Init.ReceiveFifoLocked = DISABLE;
 8003da2:	7703      	strb	r3, [r0, #28]
    hcan.Init.TransmitFifoPriority = DISABLE;
 8003da4:	7743      	strb	r3, [r0, #29]
    if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003da6:	f7fe f851 	bl	8001e4c <HAL_CAN_Init>
 8003daa:	bd08      	pop	{r3, pc}
 8003dac:	20000fe0 	.word	0x20000fe0
 8003db0:	40006400 	.word	0x40006400

08003db4 <_ZL12MX_TIM2_Initv>:
{
 8003db4:	b530      	push	{r4, r5, lr}
 8003db6:	b08d      	sub	sp, #52	; 0x34
    LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 8003db8:	2500      	movs	r5, #0
 8003dba:	9507      	str	r5, [sp, #28]
 8003dbc:	9508      	str	r5, [sp, #32]
 8003dbe:	9509      	str	r5, [sp, #36]	; 0x24
 8003dc0:	950a      	str	r5, [sp, #40]	; 0x28
 8003dc2:	950b      	str	r5, [sp, #44]	; 0x2c
    LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003dc4:	9502      	str	r5, [sp, #8]
 8003dc6:	9503      	str	r5, [sp, #12]
 8003dc8:	9504      	str	r5, [sp, #16]
 8003dca:	9505      	str	r5, [sp, #20]
 8003dcc:	9506      	str	r5, [sp, #24]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003dce:	4b28      	ldr	r3, [pc, #160]	; (8003e70 <_ZL12MX_TIM2_Initv+0xbc>)
 8003dd0:	69da      	ldr	r2, [r3, #28]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003dd8:	69da      	ldr	r2, [r3, #28]
 8003dda:	f002 0201 	and.w	r2, r2, #1
 8003dde:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8003de0:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003de2:	699a      	ldr	r2, [r3, #24]
 8003de4:	f042 0204 	orr.w	r2, r2, #4
 8003de8:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8003df2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = LL_GPIO_PIN_0 | LL_GPIO_PIN_1;
 8003df4:	f240 3303 	movw	r3, #771	; 0x303
 8003df8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003dfa:	2304      	movs	r3, #4
 8003dfc:	9303      	str	r3, [sp, #12]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dfe:	a902      	add	r1, sp, #8
 8003e00:	481c      	ldr	r0, [pc, #112]	; (8003e74 <_ZL12MX_TIM2_Initv+0xc0>)
 8003e02:	f7ff fb0f 	bl	8003424 <LL_GPIO_Init>
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8003e06:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8003e0a:	68a3      	ldr	r3, [r4, #8]
 8003e0c:	f023 0307 	bic.w	r3, r3, #7
 8003e10:	f043 0303 	orr.w	r3, r3, #3
 8003e14:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8003e16:	69a3      	ldr	r3, [r4, #24]
 8003e18:	f023 0303 	bic.w	r3, r3, #3
 8003e1c:	f043 0301 	orr.w	r3, r3, #1
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8003e20:	6a22      	ldr	r2, [r4, #32]
 8003e22:	f022 020a 	bic.w	r2, r2, #10
 8003e26:	6222      	str	r2, [r4, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8003e28:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8003e30:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8003e34:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8003e36:	6a23      	ldr	r3, [r4, #32]
 8003e38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e3c:	6223      	str	r3, [r4, #32]
    TIM_InitStruct.Prescaler = 0;
 8003e3e:	f8ad 501c 	strh.w	r5, [sp, #28]
    TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003e42:	9508      	str	r5, [sp, #32]
    TIM_InitStruct.Autoreload = 0xffff;
 8003e44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e48:	9309      	str	r3, [sp, #36]	; 0x24
    TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003e4a:	950a      	str	r5, [sp, #40]	; 0x28
    LL_TIM_Init(TIM2, &TIM_InitStruct);
 8003e4c:	a907      	add	r1, sp, #28
 8003e4e:	4620      	mov	r0, r4
 8003e50:	f7ff fc34 	bl	80036bc <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003e54:	6823      	ldr	r3, [r4, #0]
 8003e56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e5a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003e5c:	6863      	ldr	r3, [r4, #4]
 8003e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e62:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003e64:	68a3      	ldr	r3, [r4, #8]
 8003e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e6a:	60a3      	str	r3, [r4, #8]
}
 8003e6c:	b00d      	add	sp, #52	; 0x34
 8003e6e:	bd30      	pop	{r4, r5, pc}
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40010800 	.word	0x40010800

08003e78 <_ZL12MX_TIM3_Initv>:
{
 8003e78:	b510      	push	{r4, lr}
 8003e7a:	b086      	sub	sp, #24
    LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	9301      	str	r3, [sp, #4]
 8003e80:	9302      	str	r3, [sp, #8]
 8003e82:	9303      	str	r3, [sp, #12]
 8003e84:	9304      	str	r3, [sp, #16]
 8003e86:	9305      	str	r3, [sp, #20]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003e88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e8c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003e90:	69da      	ldr	r2, [r3, #28]
 8003e92:	f042 0202 	orr.w	r2, r2, #2
 8003e96:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8003ea0:	9b00      	ldr	r3, [sp, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ea2:	4b20      	ldr	r3, [pc, #128]	; (8003f24 <_ZL12MX_TIM3_Initv+0xac>)
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eaa:	f1c2 0307 	rsb	r3, r2, #7
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	bf28      	it	cs
 8003eb2:	2304      	movcs	r3, #4
 8003eb4:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eb6:	1d13      	adds	r3, r2, #4
 8003eb8:	2b06      	cmp	r3, #6
 8003eba:	d930      	bls.n	8003f1e <_ZL12MX_TIM3_Initv+0xa6>
 8003ebc:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	408b      	lsls	r3, r1
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	4a16      	ldr	r2, [pc, #88]	; (8003f28 <_ZL12MX_TIM3_Initv+0xb0>)
 8003ed0:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003ed4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003ed8:	6013      	str	r3, [r2, #0]
    TIM_InitStruct.Prescaler = 72 - 1;
 8003eda:	2347      	movs	r3, #71	; 0x47
 8003edc:	f8ad 3004 	strh.w	r3, [sp, #4]
    TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	9302      	str	r3, [sp, #8]
    TIM_InitStruct.Autoreload = 1000 - 1;
 8003ee4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ee8:	9203      	str	r2, [sp, #12]
    TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003eea:	9304      	str	r3, [sp, #16]
    LL_TIM_Init(TIM3, &TIM_InitStruct);
 8003eec:	4c0f      	ldr	r4, [pc, #60]	; (8003f2c <_ZL12MX_TIM3_Initv+0xb4>)
 8003eee:	a901      	add	r1, sp, #4
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	f7ff fbe3 	bl	80036bc <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003efc:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8003efe:	68a3      	ldr	r3, [r4, #8]
 8003f00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f04:	f023 0307 	bic.w	r3, r3, #7
 8003f08:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003f0a:	6863      	ldr	r3, [r4, #4]
 8003f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f10:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003f12:	68a3      	ldr	r3, [r4, #8]
 8003f14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f18:	60a3      	str	r3, [r4, #8]
}
 8003f1a:	b006      	add	sp, #24
 8003f1c:	bd10      	pop	{r4, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f1e:	2200      	movs	r2, #0
 8003f20:	e7cd      	b.n	8003ebe <_ZL12MX_TIM3_Initv+0x46>
 8003f22:	bf00      	nop
 8003f24:	e000ed00 	.word	0xe000ed00
 8003f28:	e000e100 	.word	0xe000e100
 8003f2c:	40000400 	.word	0x40000400

08003f30 <_ZL12MX_TIM1_Initv>:
{
 8003f30:	b570      	push	{r4, r5, r6, lr}
 8003f32:	b09a      	sub	sp, #104	; 0x68
    LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 8003f34:	2400      	movs	r4, #0
 8003f36:	9415      	str	r4, [sp, #84]	; 0x54
 8003f38:	9416      	str	r4, [sp, #88]	; 0x58
 8003f3a:	9417      	str	r4, [sp, #92]	; 0x5c
 8003f3c:	9418      	str	r4, [sp, #96]	; 0x60
 8003f3e:	9419      	str	r4, [sp, #100]	; 0x64
    LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = { 0 };
 8003f40:	2220      	movs	r2, #32
 8003f42:	4621      	mov	r1, r4
 8003f44:	a80d      	add	r0, sp, #52	; 0x34
 8003f46:	f001 fbe0 	bl	800570a <memset>
    LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = { 0 };
 8003f4a:	9407      	str	r4, [sp, #28]
 8003f4c:	9408      	str	r4, [sp, #32]
 8003f4e:	9409      	str	r4, [sp, #36]	; 0x24
 8003f50:	940a      	str	r4, [sp, #40]	; 0x28
 8003f52:	940b      	str	r4, [sp, #44]	; 0x2c
 8003f54:	940c      	str	r4, [sp, #48]	; 0x30
    LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003f56:	9402      	str	r4, [sp, #8]
 8003f58:	9403      	str	r4, [sp, #12]
 8003f5a:	9404      	str	r4, [sp, #16]
 8003f5c:	9405      	str	r4, [sp, #20]
 8003f5e:	9406      	str	r4, [sp, #24]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003f60:	4e33      	ldr	r6, [pc, #204]	; (8004030 <_ZL12MX_TIM1_Initv+0x100>)
 8003f62:	69b3      	ldr	r3, [r6, #24]
 8003f64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f68:	61b3      	str	r3, [r6, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003f6a:	69b3      	ldr	r3, [r6, #24]
 8003f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f70:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8003f72:	9b00      	ldr	r3, [sp, #0]
    TIM_InitStruct.Autoreload = 720 - 1;    //720 - 1;
 8003f74:	f240 23cf 	movw	r3, #719	; 0x2cf
 8003f78:	9317      	str	r3, [sp, #92]	; 0x5c
    LL_TIM_Init(TIM1, &TIM_InitStruct);
 8003f7a:	4d2e      	ldr	r5, [pc, #184]	; (8004034 <_ZL12MX_TIM1_Initv+0x104>)
 8003f7c:	a915      	add	r1, sp, #84	; 0x54
 8003f7e:	4628      	mov	r0, r5
 8003f80:	f7ff fb9c 	bl	80036bc <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003f84:	682b      	ldr	r3, [r5, #0]
 8003f86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f8a:	602b      	str	r3, [r5, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8003f8c:	68ab      	ldr	r3, [r5, #8]
 8003f8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f92:	f023 0307 	bic.w	r3, r3, #7
 8003f96:	60ab      	str	r3, [r5, #8]
    TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003f98:	2360      	movs	r3, #96	; 0x60
 8003f9a:	930d      	str	r3, [sp, #52]	; 0x34
    TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003f9c:	940e      	str	r4, [sp, #56]	; 0x38
    TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003f9e:	940f      	str	r4, [sp, #60]	; 0x3c
    TIM_OC_InitStruct.CompareValue = 0;
 8003fa0:	9410      	str	r4, [sp, #64]	; 0x40
    TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003fa2:	9411      	str	r4, [sp, #68]	; 0x44
    TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003fa4:	9412      	str	r4, [sp, #72]	; 0x48
    TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8003fa6:	9413      	str	r4, [sp, #76]	; 0x4c
    TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8003fa8:	9414      	str	r4, [sp, #80]	; 0x50
    LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003faa:	aa0d      	add	r2, sp, #52	; 0x34
 8003fac:	2101      	movs	r1, #1
 8003fae:	4628      	mov	r0, r5
 8003fb0:	f7ff fbbe 	bl	8003730 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8003fb4:	69ab      	ldr	r3, [r5, #24]
 8003fb6:	f023 0304 	bic.w	r3, r3, #4
 8003fba:	61ab      	str	r3, [r5, #24]
    TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003fbc:	940e      	str	r4, [sp, #56]	; 0x38
    TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003fbe:	940f      	str	r4, [sp, #60]	; 0x3c
    LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8003fc0:	aa0d      	add	r2, sp, #52	; 0x34
 8003fc2:	2110      	movs	r1, #16
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	f7ff fbb3 	bl	8003730 <LL_TIM_OC_Init>
 8003fca:	69ab      	ldr	r3, [r5, #24]
 8003fcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fd0:	61ab      	str	r3, [r5, #24]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003fd2:	686b      	ldr	r3, [r5, #4]
 8003fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd8:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003fda:	68ab      	ldr	r3, [r5, #8]
 8003fdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fe0:	60ab      	str	r3, [r5, #8]
    TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8003fe2:	9407      	str	r4, [sp, #28]
    TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8003fe4:	9408      	str	r4, [sp, #32]
    TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8003fe6:	9409      	str	r4, [sp, #36]	; 0x24
    TIM_BDTRInitStruct.DeadTime = 0;
 8003fe8:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
    TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8003fec:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
    TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8003ff0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ff4:	930b      	str	r3, [sp, #44]	; 0x2c
    TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8003ff6:	940c      	str	r4, [sp, #48]	; 0x30
    LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8003ff8:	a907      	add	r1, sp, #28
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	f7ff fbb6 	bl	800376c <LL_TIM_BDTR_Init>
  SET_BIT(RCC->APB2ENR, Periphs);
 8004000:	69b3      	ldr	r3, [r6, #24]
 8004002:	f043 0304 	orr.w	r3, r3, #4
 8004006:	61b3      	str	r3, [r6, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004008:	69b3      	ldr	r3, [r6, #24]
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004010:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LL_GPIO_PIN_8 | LL_GPIO_PIN_9;
 8004012:	4b09      	ldr	r3, [pc, #36]	; (8004038 <_ZL12MX_TIM1_Initv+0x108>)
 8004014:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004016:	2309      	movs	r3, #9
 8004018:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800401a:	2302      	movs	r3, #2
 800401c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800401e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8004020:	2301      	movs	r3, #1
 8004022:	9306      	str	r3, [sp, #24]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004024:	a902      	add	r1, sp, #8
 8004026:	4805      	ldr	r0, [pc, #20]	; (800403c <_ZL12MX_TIM1_Initv+0x10c>)
 8004028:	f7ff f9fc 	bl	8003424 <LL_GPIO_Init>
}
 800402c:	b01a      	add	sp, #104	; 0x68
 800402e:	bd70      	pop	{r4, r5, r6, pc}
 8004030:	40021000 	.word	0x40021000
 8004034:	40012c00 	.word	0x40012c00
 8004038:	04030003 	.word	0x04030003
 800403c:	40010800 	.word	0x40010800

08004040 <_ZL11MX_DMA_Initv>:
{
 8004040:	b500      	push	{lr}
 8004042:	b083      	sub	sp, #12
    __HAL_RCC_DMA1_CLK_ENABLE()
 8004044:	4b0e      	ldr	r3, [pc, #56]	; (8004080 <_ZL11MX_DMA_Initv+0x40>)
 8004046:	695a      	ldr	r2, [r3, #20]
 8004048:	f042 0201 	orr.w	r2, r2, #1
 800404c:	615a      	str	r2, [r3, #20]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	9301      	str	r3, [sp, #4]
 8004056:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004058:	2200      	movs	r2, #0
 800405a:	4611      	mov	r1, r2
 800405c:	200e      	movs	r0, #14
 800405e:	f7fe fa3d 	bl	80024dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004062:	200e      	movs	r0, #14
 8004064:	f7fe fa6c 	bl	8002540 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8004068:	2200      	movs	r2, #0
 800406a:	4611      	mov	r1, r2
 800406c:	200f      	movs	r0, #15
 800406e:	f7fe fa35 	bl	80024dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004072:	200f      	movs	r0, #15
 8004074:	f7fe fa64 	bl	8002540 <HAL_NVIC_EnableIRQ>
}
 8004078:	b003      	add	sp, #12
 800407a:	f85d fb04 	ldr.w	pc, [sp], #4
 800407e:	bf00      	nop
 8004080:	40021000 	.word	0x40021000

08004084 <_ZL19MX_USART1_UART_Initv>:
{
 8004084:	b508      	push	{r3, lr}
    huart1.Instance = USART1;
 8004086:	4808      	ldr	r0, [pc, #32]	; (80040a8 <_ZL19MX_USART1_UART_Initv+0x24>)
 8004088:	4b08      	ldr	r3, [pc, #32]	; (80040ac <_ZL19MX_USART1_UART_Initv+0x28>)
 800408a:	6003      	str	r3, [r0, #0]
    huart1.Init.BaudRate = 460800;
 800408c:	f44f 23e1 	mov.w	r3, #460800	; 0x70800
 8004090:	6043      	str	r3, [r0, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004092:	2300      	movs	r3, #0
 8004094:	6083      	str	r3, [r0, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8004096:	60c3      	str	r3, [r0, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8004098:	6103      	str	r3, [r0, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 800409a:	220c      	movs	r2, #12
 800409c:	6142      	str	r2, [r0, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800409e:	6183      	str	r3, [r0, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80040a0:	61c3      	str	r3, [r0, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 80040a2:	f7fe ff8f 	bl	8002fc4 <HAL_UART_Init>
 80040a6:	bd08      	pop	{r3, pc}
 80040a8:	20001090 	.word	0x20001090
 80040ac:	40013800 	.word	0x40013800

080040b0 <_ZN11SerialClass5writeEPKhi>:
		if (length > BUF_SIZE || length < 1)
 80040b0:	1e53      	subs	r3, r2, #1
 80040b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b6:	d300      	bcc.n	80040ba <_ZN11SerialClass5writeEPKhi+0xa>
 80040b8:	4770      	bx	lr
	inline void write(const uint8_t * const c, const int length)
 80040ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040be:	4616      	mov	r6, r2
 80040c0:	460f      	mov	r7, r1
 80040c2:	4605      	mov	r5, r0
		uint32_t offset = HAL_GetTick();
 80040c4:	f7fd fea8 	bl	8001e18 <HAL_GetTick>
 80040c8:	4680      	mov	r8, r0
		while(!tx_cplt)
 80040ca:	f895 3800 	ldrb.w	r3, [r5, #2048]	; 0x800
 80040ce:	b953      	cbnz	r3, 80040e6 <_ZN11SerialClass5writeEPKhi+0x36>
		    if(offset + timeout < HAL_GetTick())
 80040d0:	f108 040a 	add.w	r4, r8, #10
 80040d4:	f7fd fea0 	bl	8001e18 <HAL_GetTick>
 80040d8:	4284      	cmp	r4, r0
 80040da:	d2f6      	bcs.n	80040ca <_ZN11SerialClass5writeEPKhi+0x1a>
		        tx_cplt = true;
 80040dc:	2301      	movs	r3, #1
 80040de:	f885 3800 	strb.w	r3, [r5, #2048]	; 0x800
		        return;
 80040e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040e6:	2300      	movs	r3, #0
		for (int i = 0; i < length; i++)
 80040e8:	42b3      	cmp	r3, r6
 80040ea:	da03      	bge.n	80040f4 <_ZN11SerialClass5writeEPKhi+0x44>
			tx_buf[i] = c[i];
 80040ec:	5cfc      	ldrb	r4, [r7, r3]
 80040ee:	54ec      	strb	r4, [r5, r3]
		for (int i = 0; i < length; i++)
 80040f0:	3301      	adds	r3, #1
 80040f2:	e7f9      	b.n	80040e8 <_ZN11SerialClass5writeEPKhi+0x38>
			tx_cplt = false;
 80040f4:	2300      	movs	r3, #0
 80040f6:	f885 3800 	strb.w	r3, [r5, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 80040fa:	b2b2      	uxth	r2, r6
 80040fc:	4629      	mov	r1, r5
 80040fe:	f8d5 0808 	ldr.w	r0, [r5, #2056]	; 0x808
 8004102:	f7fe ff8f 	bl	8003024 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 8004106:	b110      	cbz	r0, 800410e <_ZN11SerialClass5writeEPKhi+0x5e>
                tx_cplt = true;
 8004108:	2301      	movs	r3, #1
 800410a:	f885 3800 	strb.w	r3, [r5, #2048]	; 0x800
 800410e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004114 <_Z18SystemClock_Configv>:
{
 8004114:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8004116:	4a25      	ldr	r2, [pc, #148]	; (80041ac <_Z18SystemClock_Configv+0x98>)
 8004118:	6813      	ldr	r3, [r2, #0]
 800411a:	f023 0307 	bic.w	r3, r3, #7
 800411e:	f043 0302 	orr.w	r3, r3, #2
 8004122:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8004124:	6813      	ldr	r3, [r2, #0]
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004126:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 800412a:	6813      	ldr	r3, [r2, #0]
 800412c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004130:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8004132:	4b1f      	ldr	r3, [pc, #124]	; (80041b0 <_Z18SystemClock_Configv+0x9c>)
 8004134:	681b      	ldr	r3, [r3, #0]
    while (LL_RCC_HSE_IsReady() != 1)
 8004136:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800413a:	d0fa      	beq.n	8004132 <_Z18SystemClock_Configv+0x1e>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800413c:	4a1c      	ldr	r2, [pc, #112]	; (80041b0 <_Z18SystemClock_Configv+0x9c>)
 800413e:	6853      	ldr	r3, [r2, #4]
 8004140:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004144:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8004148:	6053      	str	r3, [r2, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800414a:	6813      	ldr	r3, [r2, #0]
 800414c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004150:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8004152:	4b17      	ldr	r3, [pc, #92]	; (80041b0 <_Z18SystemClock_Configv+0x9c>)
 8004154:	681b      	ldr	r3, [r3, #0]
    while (LL_RCC_PLL_IsReady() != 1)
 8004156:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800415a:	d0fa      	beq.n	8004152 <_Z18SystemClock_Configv+0x3e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800415c:	4b14      	ldr	r3, [pc, #80]	; (80041b0 <_Z18SystemClock_Configv+0x9c>)
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004164:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800416c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004170:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8004178:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	f022 0203 	bic.w	r2, r2, #3
 8004180:	f042 0202 	orr.w	r2, r2, #2
 8004184:	605a      	str	r2, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004186:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <_Z18SystemClock_Configv+0x9c>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f003 030c 	and.w	r3, r3, #12
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800418e:	2b08      	cmp	r3, #8
 8004190:	d1f9      	bne.n	8004186 <_Z18SystemClock_Configv+0x72>
    LL_Init1msTick(72000000);
 8004192:	4c08      	ldr	r4, [pc, #32]	; (80041b4 <_Z18SystemClock_Configv+0xa0>)
 8004194:	4620      	mov	r0, r4
 8004196:	f7ff fb07 	bl	80037a8 <LL_Init1msTick>
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800419a:	4a07      	ldr	r2, [pc, #28]	; (80041b8 <_Z18SystemClock_Configv+0xa4>)
 800419c:	6813      	ldr	r3, [r2, #0]
 800419e:	f043 0304 	orr.w	r3, r3, #4
 80041a2:	6013      	str	r3, [r2, #0]
    LL_SetSystemCoreClock(72000000);
 80041a4:	4620      	mov	r0, r4
 80041a6:	f7ff fb0f 	bl	80037c8 <LL_SetSystemCoreClock>
 80041aa:	bd10      	pop	{r4, pc}
 80041ac:	40022000 	.word	0x40022000
 80041b0:	40021000 	.word	0x40021000
 80041b4:	044aa200 	.word	0x044aa200
 80041b8:	e000e010 	.word	0xe000e010

080041bc <main>:
{
 80041bc:	b570      	push	{r4, r5, r6, lr}
    HAL_Init();
 80041be:	f7fd fe0d 	bl	8001ddc <HAL_Init>
    SystemClock_Config();
 80041c2:	f7ff ffa7 	bl	8004114 <_Z18SystemClock_Configv>
    MX_GPIO_Init();
 80041c6:	f7ff fd79 	bl	8003cbc <_ZL12MX_GPIO_Initv>
    MX_CAN_Init();
 80041ca:	f7ff fddb 	bl	8003d84 <_ZL11MX_CAN_Initv>
    MX_TIM1_Init();
 80041ce:	f7ff feaf 	bl	8003f30 <_ZL12MX_TIM1_Initv>
    MX_DMA_Init();
 80041d2:	f7ff ff35 	bl	8004040 <_ZL11MX_DMA_Initv>
    MX_USART1_UART_Init();
 80041d6:	f7ff ff55 	bl	8004084 <_ZL19MX_USART1_UART_Initv>
    MX_TIM2_Init();
 80041da:	f7ff fdeb 	bl	8003db4 <_ZL12MX_TIM2_Initv>
    MX_TIM3_Init();
 80041de:	f7ff fe4b 	bl	8003e78 <_ZL12MX_TIM3_Initv>
    MX_CRC_Init();
 80041e2:	f7ff fd5b 	bl	8003c9c <_ZL11MX_CRC_Initv>
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80041e6:	4a32      	ldr	r2, [pc, #200]	; (80042b0 <main+0xf4>)
 80041e8:	6813      	ldr	r3, [r2, #0]
 80041ea:	f043 0302 	orr.w	r3, r3, #2
 80041ee:	6013      	str	r3, [r2, #0]
    HAL_Delay(100);
 80041f0:	2064      	movs	r0, #100	; 0x64
 80041f2:	f7fd fe17 	bl	8001e24 <HAL_Delay>
		tx_cplt = true;
 80041f6:	4b2f      	ldr	r3, [pc, #188]	; (80042b4 <main+0xf8>)
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
		rx_tail = 0;
 80041fe:	2200      	movs	r2, #0
 8004200:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
		auto status = HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 8004204:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004208:	1899      	adds	r1, r3, r2
 800420a:	f8d3 0808 	ldr.w	r0, [r3, #2056]	; 0x808
 800420e:	f7fe ff4f 	bl	80030b0 <HAL_UART_Receive_DMA>
		if(status != HAL_OK)
 8004212:	b108      	cbz	r0, 8004218 <main+0x5c>
  __ASM volatile ("nop");
 8004214:	bf00      	nop
 8004216:	e7fd      	b.n	8004214 <main+0x58>
    can_init();
 8004218:	f7ff fb36 	bl	8003888 <can_init>
    can_set_bitrate(CAN_BITRATE_500K);
 800421c:	2006      	movs	r0, #6
 800421e:	f7ff fbb1 	bl	8003984 <can_set_bitrate>
    serial.write((const uint8_t *)buf, strlen(buf));
 8004222:	4c24      	ldr	r4, [pc, #144]	; (80042b4 <main+0xf8>)
 8004224:	2229      	movs	r2, #41	; 0x29
 8004226:	4924      	ldr	r1, [pc, #144]	; (80042b8 <main+0xfc>)
 8004228:	4620      	mov	r0, r4
 800422a:	f7ff ff41 	bl	80040b0 <_ZN11SerialClass5writeEPKhi>
    GPIOB->BSRR = GPIO_BSRR_BS0 | GPIO_BSRR_BS1 | GPIO_BSRR_BS2;
 800422e:	4e23      	ldr	r6, [pc, #140]	; (80042bc <main+0x100>)
 8004230:	2507      	movs	r5, #7
 8004232:	6135      	str	r5, [r6, #16]
    HAL_Delay(100);
 8004234:	2064      	movs	r0, #100	; 0x64
 8004236:	f7fd fdf5 	bl	8001e24 <HAL_Delay>
    GPIOB->BSRR = GPIO_BSRR_BR0 | GPIO_BSRR_BR1 | GPIO_BSRR_BR2;
 800423a:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 800423e:	6133      	str	r3, [r6, #16]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004240:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004244:	6813      	ldr	r3, [r2, #0]
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	6013      	str	r3, [r2, #0]
    readConf();
 800424c:	f7ff fc8a 	bl	8003b64 <_Z8readConfv>
    control.ReadConfig();
 8004250:	4e1b      	ldr	r6, [pc, #108]	; (80042c0 <main+0x104>)
 8004252:	4630      	mov	r0, r6
 8004254:	f000 f9a2 	bl	800459c <_ZN9MotorCtrl10ReadConfigEv>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004258:	4b1a      	ldr	r3, [pc, #104]	; (80042c4 <main+0x108>)
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	f042 0201 	orr.w	r2, r2, #1
 8004260:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	f042 0201 	orr.w	r2, r2, #1
 8004268:	601a      	str	r2, [r3, #0]
    control.SetTarget(0);
 800426a:	2200      	movs	r2, #0
 800426c:	2300      	movs	r3, #0
 800426e:	4630      	mov	r0, r6
 8004270:	f000 f966 	bl	8004540 <_ZN9MotorCtrl9SetTargetEd>
    HAL_Delay(100);
 8004274:	2064      	movs	r0, #100	; 0x64
 8004276:	f7fd fdd5 	bl	8001e24 <HAL_Delay>
  SET_BIT(TIMx->CCER, Channels);
 800427a:	4b13      	ldr	r3, [pc, #76]	; (80042c8 <main+0x10c>)
 800427c:	6a1a      	ldr	r2, [r3, #32]
 800427e:	f042 0211 	orr.w	r2, r2, #17
 8004282:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	f042 0201 	orr.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800428c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800428e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004292:	645a      	str	r2, [r3, #68]	; 0x44
    can_enable();
 8004294:	f7ff fb3e 	bl	8003914 <can_enable>
    serial.write((const uint8_t *) buf, strlen(buf));
 8004298:	462a      	mov	r2, r5
 800429a:	490c      	ldr	r1, [pc, #48]	; (80042cc <main+0x110>)
 800429c:	4620      	mov	r0, r4
 800429e:	f7ff ff07 	bl	80040b0 <_ZN11SerialClass5writeEPKhi>
    uart_prompt();
 80042a2:	f000 fb77 	bl	8004994 <_Z11uart_promptv>
        uart_process();
 80042a6:	f000 fcaf 	bl	8004c08 <_Z12uart_processv>
        led_process();
 80042aa:	f7ff fc95 	bl	8003bd8 <led_process>
 80042ae:	e7fa      	b.n	80042a6 <main+0xea>
 80042b0:	e000e010 	.word	0xe000e010
 80042b4:	20000744 	.word	0x20000744
 80042b8:	0800adb8 	.word	0x0800adb8
 80042bc:	40010c00 	.word	0x40010c00
 80042c0:	20000008 	.word	0x20000008
 80042c4:	40000400 	.word	0x40000400
 80042c8:	40012c00 	.word	0x40012c00
 80042cc:	0800ade4 	.word	0x0800ade4

080042d0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80042d0:	4770      	bx	lr
	...

080042d4 <_ZN9MotorCtrl7ControlEv>:
#include "motor_ctrl.hpp"

void MotorCtrl::Control(void)
{

    if((GPIOC->IDR & GPIO_IDR_IDR14) == 0)
 80042d4:	4b93      	ldr	r3, [pc, #588]	; (8004524 <_ZN9MotorCtrl7ControlEv+0x250>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80042dc:	d11f      	bne.n	800431e <_ZN9MotorCtrl7ControlEv+0x4a>
        GPIOB->BSRR = GPIO_BSRR_BR15;
 80042de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80042e2:	4b91      	ldr	r3, [pc, #580]	; (8004528 <_ZN9MotorCtrl7ControlEv+0x254>)
 80042e4:	611a      	str	r2, [r3, #16]
        TIM1->CCR1 = 0;
 80042e6:	4a91      	ldr	r2, [pc, #580]	; (800452c <_ZN9MotorCtrl7ControlEv+0x258>)
 80042e8:	2300      	movs	r3, #0
 80042ea:	6353      	str	r3, [r2, #52]	; 0x34
        TIM1->CCR2 = 0;
 80042ec:	6393      	str	r3, [r2, #56]	; 0x38
        this->shutdown = true;
 80042ee:	2201      	movs	r2, #1
 80042f0:	7102      	strb	r2, [r0, #4]
        TIM2->CNT = 0;
 80042f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042f6:	6253      	str	r3, [r2, #36]	; 0x24
        this->pulse = 0;
 80042f8:	6083      	str	r3, [r0, #8]
        this->velocity = 0;
 80042fa:	2200      	movs	r2, #0
 80042fc:	2300      	movs	r3, #0
 80042fe:	e9c0 2304 	strd	r2, r3, [r0, #16]
        this->error = 0;
 8004302:	e9c0 2306 	strd	r2, r3, [r0, #24]
        this->error_prev = 0;
 8004306:	e9c0 2308 	strd	r2, r3, [r0, #32]
        this->u_p = 0;
 800430a:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        this->u_i = 0;
 800430e:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        this->target_velocity = 0;
 8004312:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        this->target_torque = 0;
 8004316:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        this->target_voltage = 0;
 800431a:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    {
//#warning "ignore me if you know what you are doing."
        this->Shutdown();
    }

    if(this->shutdown)
 800431e:	7903      	ldrb	r3, [r0, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	f040 80a9 	bne.w	8004478 <_ZN9MotorCtrl7ControlEv+0x1a4>
{
 8004326:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800432a:	4682      	mov	sl, r0

        return;
    }

    // flash yellow led, red off
    GPIOB->BSRR = GPIO_BSRR_BR2 | GPIO_BSRR_BS1;
 800432c:	4a80      	ldr	r2, [pc, #512]	; (8004530 <_ZN9MotorCtrl7ControlEv+0x25c>)
 800432e:	4b7e      	ldr	r3, [pc, #504]	; (8004528 <_ZN9MotorCtrl7ControlEv+0x254>)
 8004330:	611a      	str	r2, [r3, #16]


    this->error_prev = this->error;
 8004332:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8004336:	e9c0 2308 	strd	r2, r3, [r0, #32]
    this->pulse = static_cast<int16_t>(TIM2->CNT);
 800433a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800433e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004340:	b21b      	sxth	r3, r3
 8004342:	6083      	str	r3, [r0, #8]
    TIM2->CNT = 0;
 8004344:	2300      	movs	r3, #0
 8004346:	6253      	str	r3, [r2, #36]	; 0x24
    //this->pulse = this->enc_cnt;
    //this->enc_cnt = 0;
    this->velocity = pulse * Kh;
 8004348:	e9d0 451c 	ldrd	r4, r5, [r0, #112]	; 0x70
 800434c:	6880      	ldr	r0, [r0, #8]
 800434e:	f7fc f863 	bl	8000418 <__aeabi_i2d>
 8004352:	4622      	mov	r2, r4
 8004354:	462b      	mov	r3, r5
 8004356:	f7fc f8c5 	bl	80004e4 <__aeabi_dmul>
 800435a:	4604      	mov	r4, r0
 800435c:	460d      	mov	r5, r1
 800435e:	e9ca 4504 	strd	r4, r5, [sl, #16]
    this->error = this->target_velocity - this->velocity;
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	e9da 010e 	ldrd	r0, r1, [sl, #56]	; 0x38
 800436a:	f7fb ff07 	bl	800017c <__aeabi_dsub>
 800436e:	4680      	mov	r8, r0
 8004370:	4689      	mov	r9, r1
 8004372:	e9ca 8906 	strd	r8, r9, [sl, #24]

    this->u_p = Kp * (this->error - this->error_prev);
 8004376:	e9da 6716 	ldrd	r6, r7, [sl, #88]	; 0x58
 800437a:	e9da 2308 	ldrd	r2, r3, [sl, #32]
 800437e:	f7fb fefd 	bl	800017c <__aeabi_dsub>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	4630      	mov	r0, r6
 8004388:	4639      	mov	r1, r7
 800438a:	f7fc f8ab 	bl	80004e4 <__aeabi_dmul>
 800438e:	4606      	mov	r6, r0
 8004390:	460f      	mov	r7, r1
 8004392:	e9ca 670a 	strd	r6, r7, [sl, #40]	; 0x28
    this->u_i = KiTc * this->error;
 8004396:	e9da 2318 	ldrd	r2, r3, [sl, #96]	; 0x60
 800439a:	4640      	mov	r0, r8
 800439c:	4649      	mov	r1, r9
 800439e:	f7fc f8a1 	bl	80004e4 <__aeabi_dmul>
 80043a2:	4602      	mov	r2, r0
 80043a4:	460b      	mov	r3, r1
 80043a6:	e9ca 230c 	strd	r2, r3, [sl, #48]	; 0x30

    this->target_torque += (u_p + u_i);
 80043aa:	4630      	mov	r0, r6
 80043ac:	4639      	mov	r1, r7
 80043ae:	f7fb fee7 	bl	8000180 <__adddf3>
 80043b2:	e9da 2310 	ldrd	r2, r3, [sl, #64]	; 0x40
 80043b6:	f7fb fee3 	bl	8000180 <__adddf3>
 80043ba:	4606      	mov	r6, r0
 80043bc:	460f      	mov	r7, r1
 80043be:	e9ca 6710 	strd	r6, r7, [sl, #64]	; 0x40

    // limit torque
    if (MaximumTorque < target_torque)
 80043c2:	f8da 9090 	ldr.w	r9, [sl, #144]	; 0x90
 80043c6:	f8da 8094 	ldr.w	r8, [sl, #148]	; 0x94
 80043ca:	464a      	mov	r2, r9
 80043cc:	4643      	mov	r3, r8
 80043ce:	f7fc fb19 	bl	8000a04 <__aeabi_dcmpgt>
 80043d2:	2800      	cmp	r0, #0
 80043d4:	d071      	beq.n	80044ba <_ZN9MotorCtrl7ControlEv+0x1e6>
    {
        target_torque = MaximumTorque;
 80043d6:	464a      	mov	r2, r9
 80043d8:	4643      	mov	r3, r8
 80043da:	e9ca 2310 	strd	r2, r3, [sl, #64]	; 0x40
    else if (target_torque < -MaximumTorque)
    {
        target_torque = -MaximumTorque;
    }

    target_voltage = (target_torque * Kg) + (this->velocity * Ke);
 80043de:	e9da 2320 	ldrd	r2, r3, [sl, #128]	; 0x80
 80043e2:	e9da 0110 	ldrd	r0, r1, [sl, #64]	; 0x40
 80043e6:	f7fc f87d 	bl	80004e4 <__aeabi_dmul>
 80043ea:	4606      	mov	r6, r0
 80043ec:	460f      	mov	r7, r1
 80043ee:	e9da 231e 	ldrd	r2, r3, [sl, #120]	; 0x78
 80043f2:	4620      	mov	r0, r4
 80043f4:	4629      	mov	r1, r5
 80043f6:	f7fc f875 	bl	80004e4 <__aeabi_dmul>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4630      	mov	r0, r6
 8004400:	4639      	mov	r1, r7
 8004402:	f7fb febd 	bl	8000180 <__adddf3>
 8004406:	4606      	mov	r6, r0
 8004408:	460f      	mov	r7, r1
 800440a:	e9ca 6712 	strd	r6, r7, [sl, #72]	; 0x48

    if (MaximumVoltage < target_voltage)
 800440e:	f8da 4098 	ldr.w	r4, [sl, #152]	; 0x98
 8004412:	f8da 509c 	ldr.w	r5, [sl, #156]	; 0x9c
 8004416:	4622      	mov	r2, r4
 8004418:	462b      	mov	r3, r5
 800441a:	f7fc faf3 	bl	8000a04 <__aeabi_dcmpgt>
 800441e:	2800      	cmp	r0, #0
 8004420:	d05a      	beq.n	80044d8 <_ZN9MotorCtrl7ControlEv+0x204>
    {
        target_voltage = MaximumVoltage;
 8004422:	4622      	mov	r2, r4
 8004424:	462b      	mov	r3, r5
 8004426:	e9ca 2312 	strd	r2, r3, [sl, #72]	; 0x48
    {
        target_voltage = -MaximumVoltage;
    }

    // apply output voltage
    SetDuty(target_voltage * 1000 / MaximumVoltage);
 800442a:	2200      	movs	r2, #0
 800442c:	4b41      	ldr	r3, [pc, #260]	; (8004534 <_ZN9MotorCtrl7ControlEv+0x260>)
 800442e:	e9da 0112 	ldrd	r0, r1, [sl, #72]	; 0x48
 8004432:	f7fc f857 	bl	80004e4 <__aeabi_dmul>
 8004436:	4622      	mov	r2, r4
 8004438:	462b      	mov	r3, r5
 800443a:	f7fc f97d 	bl	8000738 <__aeabi_ddiv>
 800443e:	f7fc fb01 	bl	8000a44 <__aeabi_d2iz>
        if (d < -1000 || 1000 < d)
 8004442:	f500 737a 	add.w	r3, r0, #1000	; 0x3e8
 8004446:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800444a:	d80f      	bhi.n	800446c <_ZN9MotorCtrl7ControlEv+0x198>
        if (0 < d)
 800444c:	2800      	cmp	r0, #0
 800444e:	dd52      	ble.n	80044f6 <_ZN9MotorCtrl7ControlEv+0x222>
            TIM1->CCR1 = d * ccr_max / 1000;
 8004450:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8004454:	fb03 f000 	mul.w	r0, r3, r0
 8004458:	4b37      	ldr	r3, [pc, #220]	; (8004538 <_ZN9MotorCtrl7ControlEv+0x264>)
 800445a:	fb83 2300 	smull	r2, r3, r3, r0
 800445e:	17c0      	asrs	r0, r0, #31
 8004460:	ebc0 10a3 	rsb	r0, r0, r3, asr #6
 8004464:	4b31      	ldr	r3, [pc, #196]	; (800452c <_ZN9MotorCtrl7ControlEv+0x258>)
 8004466:	6358      	str	r0, [r3, #52]	; 0x34
            TIM1->CCR2 = 0;
 8004468:	2200      	movs	r2, #0
 800446a:	639a      	str	r2, [r3, #56]	; 0x38

    GPIOB->BSRR = GPIO_BSRR_BR1;
 800446c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004470:	4b2d      	ldr	r3, [pc, #180]	; (8004528 <_ZN9MotorCtrl7ControlEv+0x254>)
 8004472:	611a      	str	r2, [r3, #16]
 8004474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        GPIOB->BSRR = GPIO_BSRR_BR15;
 8004478:	4a2b      	ldr	r2, [pc, #172]	; (8004528 <_ZN9MotorCtrl7ControlEv+0x254>)
 800447a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800447e:	6113      	str	r3, [r2, #16]
        TIM1->CCR1 = 0;
 8004480:	492a      	ldr	r1, [pc, #168]	; (800452c <_ZN9MotorCtrl7ControlEv+0x258>)
 8004482:	2300      	movs	r3, #0
 8004484:	634b      	str	r3, [r1, #52]	; 0x34
        TIM1->CCR2 = 0;
 8004486:	638b      	str	r3, [r1, #56]	; 0x38
        GPIOB->BSRR = GPIO_BSRR_BS2 | GPIO_BSRR_BR1;
 8004488:	492c      	ldr	r1, [pc, #176]	; (800453c <_ZN9MotorCtrl7ControlEv+0x268>)
 800448a:	6111      	str	r1, [r2, #16]
        TIM2->CNT = 0;
 800448c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004490:	6253      	str	r3, [r2, #36]	; 0x24
        this->pulse = 0;
 8004492:	6083      	str	r3, [r0, #8]
        this->velocity = 0;
 8004494:	2200      	movs	r2, #0
 8004496:	2300      	movs	r3, #0
 8004498:	e9c0 2304 	strd	r2, r3, [r0, #16]
        this->error = 0;
 800449c:	e9c0 2306 	strd	r2, r3, [r0, #24]
        this->error_prev = 0;
 80044a0:	e9c0 2308 	strd	r2, r3, [r0, #32]
        this->u_p = 0;
 80044a4:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        this->u_i = 0;
 80044a8:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        this->target_velocity = 0;
 80044ac:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        this->target_torque = 0;
 80044b0:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        this->target_voltage = 0;
 80044b4:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
 80044b8:	4770      	bx	lr
    else if (target_torque < -MaximumTorque)
 80044ba:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
 80044be:	464a      	mov	r2, r9
 80044c0:	4643      	mov	r3, r8
 80044c2:	4630      	mov	r0, r6
 80044c4:	4639      	mov	r1, r7
 80044c6:	f7fc fa7f 	bl	80009c8 <__aeabi_dcmplt>
 80044ca:	2800      	cmp	r0, #0
 80044cc:	d087      	beq.n	80043de <_ZN9MotorCtrl7ControlEv+0x10a>
        target_torque = -MaximumTorque;
 80044ce:	464a      	mov	r2, r9
 80044d0:	4643      	mov	r3, r8
 80044d2:	e9ca 2310 	strd	r2, r3, [sl, #64]	; 0x40
 80044d6:	e782      	b.n	80043de <_ZN9MotorCtrl7ControlEv+0x10a>
    else if (target_voltage < -MaximumVoltage)
 80044d8:	f105 4800 	add.w	r8, r5, #2147483648	; 0x80000000
 80044dc:	4622      	mov	r2, r4
 80044de:	4643      	mov	r3, r8
 80044e0:	4630      	mov	r0, r6
 80044e2:	4639      	mov	r1, r7
 80044e4:	f7fc fa70 	bl	80009c8 <__aeabi_dcmplt>
 80044e8:	2800      	cmp	r0, #0
 80044ea:	d09e      	beq.n	800442a <_ZN9MotorCtrl7ControlEv+0x156>
        target_voltage = -MaximumVoltage;
 80044ec:	4622      	mov	r2, r4
 80044ee:	4643      	mov	r3, r8
 80044f0:	e9ca 2312 	strd	r2, r3, [sl, #72]	; 0x48
 80044f4:	e799      	b.n	800442a <_ZN9MotorCtrl7ControlEv+0x156>
        else if (d < 0)
 80044f6:	2800      	cmp	r0, #0
 80044f8:	db04      	blt.n	8004504 <_ZN9MotorCtrl7ControlEv+0x230>
            TIM1->CCR1 = 0;
 80044fa:	4b0c      	ldr	r3, [pc, #48]	; (800452c <_ZN9MotorCtrl7ControlEv+0x258>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	635a      	str	r2, [r3, #52]	; 0x34
            TIM1->CCR2 = 0;
 8004500:	639a      	str	r2, [r3, #56]	; 0x38
 8004502:	e7b3      	b.n	800446c <_ZN9MotorCtrl7ControlEv+0x198>
            TIM1->CCR1 = 0;
 8004504:	4a09      	ldr	r2, [pc, #36]	; (800452c <_ZN9MotorCtrl7ControlEv+0x258>)
 8004506:	2300      	movs	r3, #0
 8004508:	6353      	str	r3, [r2, #52]	; 0x34
            TIM1->CCR2 = -d * ccr_max / 1000;
 800450a:	4240      	negs	r0, r0
 800450c:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8004510:	fb03 f000 	mul.w	r0, r3, r0
 8004514:	4b08      	ldr	r3, [pc, #32]	; (8004538 <_ZN9MotorCtrl7ControlEv+0x264>)
 8004516:	fb83 1300 	smull	r1, r3, r3, r0
 800451a:	17c0      	asrs	r0, r0, #31
 800451c:	ebc0 10a3 	rsb	r0, r0, r3, asr #6
 8004520:	6390      	str	r0, [r2, #56]	; 0x38
 8004522:	e7a3      	b.n	800446c <_ZN9MotorCtrl7ControlEv+0x198>
 8004524:	40011000 	.word	0x40011000
 8004528:	40010c00 	.word	0x40010c00
 800452c:	40012c00 	.word	0x40012c00
 8004530:	00040002 	.word	0x00040002
 8004534:	408f4000 	.word	0x408f4000
 8004538:	10624dd3 	.word	0x10624dd3
 800453c:	00020004 	.word	0x00020004

08004540 <_ZN9MotorCtrl9SetTargetEd>:
}

void MotorCtrl::SetTarget(double target)
{
 8004540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004544:	4604      	mov	r4, r0
 8004546:	4610      	mov	r0, r2
 8004548:	4619      	mov	r1, r3
    double tmp = target * Kr;
 800454a:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
 800454e:	f7fb ffc9 	bl	80004e4 <__aeabi_dmul>
 8004552:	4606      	mov	r6, r0
 8004554:	460f      	mov	r7, r1

    if (MaximumVelocity < tmp)
 8004556:	f8d4 8088 	ldr.w	r8, [r4, #136]	; 0x88
 800455a:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
 800455e:	4642      	mov	r2, r8
 8004560:	462b      	mov	r3, r5
 8004562:	f7fc fa4f 	bl	8000a04 <__aeabi_dcmpgt>
 8004566:	b960      	cbnz	r0, 8004582 <_ZN9MotorCtrl9SetTargetEd+0x42>
    {
        this->target_velocity = MaximumVelocity;
    }
    else if (tmp < -MaximumVelocity)
 8004568:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800456c:	4642      	mov	r2, r8
 800456e:	462b      	mov	r3, r5
 8004570:	4630      	mov	r0, r6
 8004572:	4639      	mov	r1, r7
 8004574:	f7fc fa28 	bl	80009c8 <__aeabi_dcmplt>
 8004578:	b948      	cbnz	r0, 800458e <_ZN9MotorCtrl9SetTargetEd+0x4e>
    {
        this->target_velocity = -MaximumVelocity;
    }
    else
    {
        this->target_velocity = tmp;
 800457a:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
 800457e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        this->target_velocity = MaximumVelocity;
 8004582:	4642      	mov	r2, r8
 8004584:	462b      	mov	r3, r5
 8004586:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 800458a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        this->target_velocity = -MaximumVelocity;
 800458e:	4642      	mov	r2, r8
 8004590:	462b      	mov	r3, r5
 8004592:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 8004596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800459c <_ZN9MotorCtrl10ReadConfigEv>:
    serial.write((const uint8_t *) buf, ret);
}


void MotorCtrl::ReadConfig(void)
{
 800459c:	b5d0      	push	{r4, r6, r7, lr}
 800459e:	4604      	mov	r4, r0
    this->Kp = confStruct.Kp;
 80045a0:	4b21      	ldr	r3, [pc, #132]	; (8004628 <_ZN9MotorCtrl10ReadConfigEv+0x8c>)
 80045a2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80045a6:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    this->KiTc = confStruct.KiTc;
 80045aa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80045ae:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    this->Ke = confStruct.Ke;
 80045b2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80045b6:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    this->Kg = confStruct.Kg;
 80045ba:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80045be:	e9c4 0120 	strd	r0, r1, [r4, #128]	; 0x80
    this->Kh = confStruct.Kh;
 80045c2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80045c6:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    this->Kr = confStruct.Kr;
 80045ca:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80045ce:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    this->MaximumVelocity = confStruct.MaxVel;
 80045d2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80045d6:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
    this->MaximumTorque = confStruct.MaxTrq;
 80045da:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80045de:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
    this->SetSupplyVoltage(confStruct.Vsup);
 80045e2:	e9d3 6712 	ldrd	r6, r7, [r3, #72]	; 0x48
        return this->MaximumTorque;
    }

    inline int SetSupplyVoltage(double vs)
    {
        if (vs < 0)
 80045e6:	2200      	movs	r2, #0
 80045e8:	2300      	movs	r3, #0
 80045ea:	4630      	mov	r0, r6
 80045ec:	4639      	mov	r1, r7
 80045ee:	f7fc f9eb 	bl	80009c8 <__aeabi_dcmplt>
 80045f2:	b9b8      	cbnz	r0, 8004624 <_ZN9MotorCtrl10ReadConfigEv+0x88>
            return -1;

        this->SupplyVoltage = vs;
 80045f4:	e9c4 6728 	strd	r6, r7, [r4, #160]	; 0xa0
        this->MaximumVoltage = vs * (ccr_max + 1) / (ccr_arr + 1);
 80045f8:	8860      	ldrh	r0, [r4, #2]
 80045fa:	3001      	adds	r0, #1
 80045fc:	f7fb ff0c 	bl	8000418 <__aeabi_i2d>
 8004600:	4632      	mov	r2, r6
 8004602:	463b      	mov	r3, r7
 8004604:	f7fb ff6e 	bl	80004e4 <__aeabi_dmul>
 8004608:	4606      	mov	r6, r0
 800460a:	460f      	mov	r7, r1
 800460c:	8820      	ldrh	r0, [r4, #0]
 800460e:	3001      	adds	r0, #1
 8004610:	f7fb ff02 	bl	8000418 <__aeabi_i2d>
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	4630      	mov	r0, r6
 800461a:	4639      	mov	r1, r7
 800461c:	f7fc f88c 	bl	8000738 <__aeabi_ddiv>
 8004620:	e9c4 0126 	strd	r0, r1, [r4, #152]	; 0x98
 8004624:	bdd0      	pop	{r4, r6, r7, pc}
 8004626:	bf00      	nop
 8004628:	20000f80 	.word	0x20000f80

0800462c <_ZN9MotorCtrl11WriteConfigEv>:
}

void MotorCtrl::WriteConfig(void)
{
 800462c:	b430      	push	{r4, r5}
    confStruct.Kp = this->Kp;
 800462e:	e9d0 4516 	ldrd	r4, r5, [r0, #88]	; 0x58
 8004632:	4b13      	ldr	r3, [pc, #76]	; (8004680 <_ZN9MotorCtrl11WriteConfigEv+0x54>)
 8004634:	e9c3 4502 	strd	r4, r5, [r3, #8]
    confStruct.KiTc = this->KiTc;
 8004638:	e9d0 4518 	ldrd	r4, r5, [r0, #96]	; 0x60
 800463c:	e9c3 4504 	strd	r4, r5, [r3, #16]
    confStruct.Ke = this->Ke;
 8004640:	e9d0 451e 	ldrd	r4, r5, [r0, #120]	; 0x78
 8004644:	e9c3 4506 	strd	r4, r5, [r3, #24]
    confStruct.Kg = this->Kg;
 8004648:	e9d0 4520 	ldrd	r4, r5, [r0, #128]	; 0x80
 800464c:	e9c3 4508 	strd	r4, r5, [r3, #32]
    confStruct.Kh = this->Kh;
 8004650:	e9d0 451c 	ldrd	r4, r5, [r0, #112]	; 0x70
 8004654:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    confStruct.Kr = this->Kr;
 8004658:	e9d0 4514 	ldrd	r4, r5, [r0, #80]	; 0x50
 800465c:	e9c3 450c 	strd	r4, r5, [r3, #48]	; 0x30
    confStruct.MaxVel = this->MaximumVelocity;
 8004660:	e9d0 4522 	ldrd	r4, r5, [r0, #136]	; 0x88
 8004664:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
    confStruct.MaxTrq = this->MaximumTorque;
 8004668:	e9d0 4524 	ldrd	r4, r5, [r0, #144]	; 0x90
 800466c:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
    confStruct.Vsup = this->SupplyVoltage;
 8004670:	f100 01a0 	add.w	r1, r0, #160	; 0xa0
 8004674:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004678:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
}
 800467c:	bc30      	pop	{r4, r5}
 800467e:	4770      	bx	lr
 8004680:	20000f80 	.word	0x20000f80

08004684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 8004684:	b500      	push	{lr}
 8004686:	b083      	sub	sp, #12
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_AFIO_CLK_ENABLE()
 8004688:	4b24      	ldr	r3, [pc, #144]	; (800471c <HAL_MspInit+0x98>)
 800468a:	699a      	ldr	r2, [r3, #24]
 800468c:	f042 0201 	orr.w	r2, r2, #1
 8004690:	619a      	str	r2, [r3, #24]
 8004692:	699a      	ldr	r2, [r3, #24]
 8004694:	f002 0201 	and.w	r2, r2, #1
 8004698:	9200      	str	r2, [sp, #0]
 800469a:	9a00      	ldr	r2, [sp, #0]
    ;
    __HAL_RCC_PWR_CLK_ENABLE()
 800469c:	69da      	ldr	r2, [r3, #28]
 800469e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80046a2:	61da      	str	r2, [r3, #28]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046aa:	9301      	str	r3, [sp, #4]
 80046ac:	9b01      	ldr	r3, [sp, #4]
    ;

    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046ae:	2003      	movs	r0, #3
 80046b0:	f7fd ff02 	bl	80024b8 <HAL_NVIC_SetPriorityGrouping>

    /* System interrupt init*/
    /* MemoryManagement_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80046b4:	2200      	movs	r2, #0
 80046b6:	4611      	mov	r1, r2
 80046b8:	f06f 000b 	mvn.w	r0, #11
 80046bc:	f7fd ff0e 	bl	80024dc <HAL_NVIC_SetPriority>
    /* BusFault_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80046c0:	2200      	movs	r2, #0
 80046c2:	4611      	mov	r1, r2
 80046c4:	f06f 000a 	mvn.w	r0, #10
 80046c8:	f7fd ff08 	bl	80024dc <HAL_NVIC_SetPriority>
    /* UsageFault_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80046cc:	2200      	movs	r2, #0
 80046ce:	4611      	mov	r1, r2
 80046d0:	f06f 0009 	mvn.w	r0, #9
 80046d4:	f7fd ff02 	bl	80024dc <HAL_NVIC_SetPriority>
    /* SVCall_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80046d8:	2200      	movs	r2, #0
 80046da:	4611      	mov	r1, r2
 80046dc:	f06f 0004 	mvn.w	r0, #4
 80046e0:	f7fd fefc 	bl	80024dc <HAL_NVIC_SetPriority>
    /* DebugMonitor_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80046e4:	2200      	movs	r2, #0
 80046e6:	4611      	mov	r1, r2
 80046e8:	f06f 0003 	mvn.w	r0, #3
 80046ec:	f7fd fef6 	bl	80024dc <HAL_NVIC_SetPriority>
    /* PendSV_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80046f0:	2200      	movs	r2, #0
 80046f2:	4611      	mov	r1, r2
 80046f4:	f06f 0001 	mvn.w	r0, #1
 80046f8:	f7fd fef0 	bl	80024dc <HAL_NVIC_SetPriority>
    /* SysTick_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80046fc:	2200      	movs	r2, #0
 80046fe:	4611      	mov	r1, r2
 8004700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004704:	f7fd feea 	bl	80024dc <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled
     */
    __HAL_AFIO_REMAP_SWJ_NOJTAG()
 8004708:	4a05      	ldr	r2, [pc, #20]	; (8004720 <HAL_MspInit+0x9c>)
 800470a:	6853      	ldr	r3, [r2, #4]
 800470c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004710:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004714:	6053      	str	r3, [r2, #4]
    ;

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8004716:	b003      	add	sp, #12
 8004718:	f85d fb04 	ldr.w	pc, [sp], #4
 800471c:	40021000 	.word	0x40021000
 8004720:	40010000 	.word	0x40010000

08004724 <HAL_CAN_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hcan: CAN handle pointer
 * @retval None
 */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004724:	b530      	push	{r4, r5, lr}
 8004726:	b087      	sub	sp, #28

    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004728:	2300      	movs	r3, #0
 800472a:	9302      	str	r3, [sp, #8]
 800472c:	9303      	str	r3, [sp, #12]
 800472e:	9304      	str	r3, [sp, #16]
 8004730:	9305      	str	r3, [sp, #20]
    if (hcan->Instance == CAN1)
 8004732:	6802      	ldr	r2, [r0, #0]
 8004734:	4b1f      	ldr	r3, [pc, #124]	; (80047b4 <HAL_CAN_MspInit+0x90>)
 8004736:	429a      	cmp	r2, r3
 8004738:	d001      	beq.n	800473e <HAL_CAN_MspInit+0x1a>
        /* USER CODE BEGIN CAN1_MspInit 1 */

        /* USER CODE END CAN1_MspInit 1 */
    }

}
 800473a:	b007      	add	sp, #28
 800473c:	bd30      	pop	{r4, r5, pc}
        __HAL_RCC_CAN1_CLK_ENABLE()
 800473e:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8004742:	69da      	ldr	r2, [r3, #28]
 8004744:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004748:	61da      	str	r2, [r3, #28]
 800474a:	69da      	ldr	r2, [r3, #28]
 800474c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8004750:	9200      	str	r2, [sp, #0]
 8004752:	9a00      	ldr	r2, [sp, #0]
        __HAL_RCC_GPIOB_CLK_ENABLE()
 8004754:	699a      	ldr	r2, [r3, #24]
 8004756:	f042 0208 	orr.w	r2, r2, #8
 800475a:	619a      	str	r2, [r3, #24]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	9301      	str	r3, [sp, #4]
 8004764:	9b01      	ldr	r3, [sp, #4]
        GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004766:	ac06      	add	r4, sp, #24
 8004768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800476c:	f844 3d10 	str.w	r3, [r4, #-16]!
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004770:	4d11      	ldr	r5, [pc, #68]	; (80047b8 <HAL_CAN_MspInit+0x94>)
 8004772:	4621      	mov	r1, r4
 8004774:	4628      	mov	r0, r5
 8004776:	f7fe f9e5 	bl	8002b44 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = GPIO_PIN_9;
 800477a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800477e:	9302      	str	r3, [sp, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004780:	2302      	movs	r3, #2
 8004782:	9303      	str	r3, [sp, #12]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004784:	2303      	movs	r3, #3
 8004786:	9305      	str	r3, [sp, #20]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004788:	4621      	mov	r1, r4
 800478a:	4628      	mov	r0, r5
 800478c:	f7fe f9da 	bl	8002b44 <HAL_GPIO_Init>
        __HAL_AFIO_REMAP_CAN1_2()
 8004790:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <HAL_CAN_MspInit+0x98>)
 8004792:	6853      	ldr	r3, [r2, #4]
 8004794:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8004798:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800479c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047a0:	6053      	str	r3, [r2, #4]
        HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80047a2:	2200      	movs	r2, #0
 80047a4:	4611      	mov	r1, r2
 80047a6:	2014      	movs	r0, #20
 80047a8:	f7fd fe98 	bl	80024dc <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80047ac:	2014      	movs	r0, #20
 80047ae:	f7fd fec7 	bl	8002540 <HAL_NVIC_EnableIRQ>
}
 80047b2:	e7c2      	b.n	800473a <HAL_CAN_MspInit+0x16>
 80047b4:	40006400 	.word	0x40006400
 80047b8:	40010c00 	.word	0x40010c00
 80047bc:	40010000 	.word	0x40010000

080047c0 <HAL_UART_MspInit>:
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
    GPIO_InitTypeDef GPIO_InitStruct;
    if (huart->Instance == USART1)
 80047c0:	6802      	ldr	r2, [r0, #0]
 80047c2:	4b33      	ldr	r3, [pc, #204]	; (8004890 <HAL_UART_MspInit+0xd0>)
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d000      	beq.n	80047ca <HAL_UART_MspInit+0xa>
 80047c8:	4770      	bx	lr
{
 80047ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047cc:	b087      	sub	sp, #28
 80047ce:	4604      	mov	r4, r0
    {
        /* USER CODE BEGIN USART1_MspInit 0 */

        /* USER CODE END USART1_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_USART1_CLK_ENABLE();
 80047d0:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047da:	619a      	str	r2, [r3, #24]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047e2:	9301      	str	r3, [sp, #4]
 80047e4:	9b01      	ldr	r3, [sp, #4]

        /**USART1 GPIO Configuration
         PB6   ------> USART1_TX
         PB7   ------> USART1_RX
         */
        GPIO_InitStruct.Pin = GPIO_PIN_6;
 80047e6:	2340      	movs	r3, #64	; 0x40
 80047e8:	9302      	str	r3, [sp, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ea:	2302      	movs	r3, #2
 80047ec:	9303      	str	r3, [sp, #12]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047ee:	2303      	movs	r3, #3
 80047f0:	9305      	str	r3, [sp, #20]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047f2:	4f28      	ldr	r7, [pc, #160]	; (8004894 <HAL_UART_MspInit+0xd4>)
 80047f4:	a902      	add	r1, sp, #8
 80047f6:	4638      	mov	r0, r7
 80047f8:	f7fe f9a4 	bl	8002b44 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_7;
 80047fc:	2680      	movs	r6, #128	; 0x80
 80047fe:	9602      	str	r6, [sp, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004800:	2500      	movs	r5, #0
 8004802:	9503      	str	r5, [sp, #12]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004804:	9504      	str	r5, [sp, #16]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004806:	a902      	add	r1, sp, #8
 8004808:	4638      	mov	r0, r7
 800480a:	f7fe f99b 	bl	8002b44 <HAL_GPIO_Init>

        __HAL_AFIO_REMAP_USART1_ENABLE();
 800480e:	4a22      	ldr	r2, [pc, #136]	; (8004898 <HAL_UART_MspInit+0xd8>)
 8004810:	6853      	ldr	r3, [r2, #4]
 8004812:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004816:	f043 0304 	orr.w	r3, r3, #4
 800481a:	6053      	str	r3, [r2, #4]

        /* USART1 DMA Init */
        /* USART1_RX Init */
        hdma_usart1_rx.Instance = DMA1_Channel5;
 800481c:	481f      	ldr	r0, [pc, #124]	; (800489c <HAL_UART_MspInit+0xdc>)
 800481e:	4b20      	ldr	r3, [pc, #128]	; (80048a0 <HAL_UART_MspInit+0xe0>)
 8004820:	6003      	str	r3, [r0, #0]
        hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004822:	6045      	str	r5, [r0, #4]
        hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004824:	6085      	str	r5, [r0, #8]
        hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004826:	60c6      	str	r6, [r0, #12]
        hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004828:	6105      	str	r5, [r0, #16]
        hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800482a:	6145      	str	r5, [r0, #20]
        hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800482c:	2320      	movs	r3, #32
 800482e:	6183      	str	r3, [r0, #24]
        hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004830:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004834:	61c3      	str	r3, [r0, #28]
        if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004836:	f7fd fec1 	bl	80025bc <HAL_DMA_Init>
 800483a:	bb18      	cbnz	r0, 8004884 <HAL_UART_MspInit+0xc4>
        {
            Error_Handler();
        }

        __HAL_LINKDMA(huart, hdmarx, hdma_usart1_rx);
 800483c:	4b17      	ldr	r3, [pc, #92]	; (800489c <HAL_UART_MspInit+0xdc>)
 800483e:	6363      	str	r3, [r4, #52]	; 0x34
 8004840:	625c      	str	r4, [r3, #36]	; 0x24

        /* USART1_TX Init */
        hdma_usart1_tx.Instance = DMA1_Channel4;
 8004842:	4818      	ldr	r0, [pc, #96]	; (80048a4 <HAL_UART_MspInit+0xe4>)
 8004844:	4b18      	ldr	r3, [pc, #96]	; (80048a8 <HAL_UART_MspInit+0xe8>)
 8004846:	6003      	str	r3, [r0, #0]
        hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004848:	2310      	movs	r3, #16
 800484a:	6043      	str	r3, [r0, #4]
        hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800484c:	2300      	movs	r3, #0
 800484e:	6083      	str	r3, [r0, #8]
        hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004850:	2280      	movs	r2, #128	; 0x80
 8004852:	60c2      	str	r2, [r0, #12]
        hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004858:	6102      	str	r2, [r0, #16]
        hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800485a:	6143      	str	r3, [r0, #20]
        hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800485c:	6183      	str	r3, [r0, #24]
        hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800485e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004862:	61c3      	str	r3, [r0, #28]
        if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004864:	f7fd feaa 	bl	80025bc <HAL_DMA_Init>
 8004868:	b978      	cbnz	r0, 800488a <HAL_UART_MspInit+0xca>
        {
            Error_Handler();
        }

        __HAL_LINKDMA(huart, hdmatx, hdma_usart1_tx);
 800486a:	4b0e      	ldr	r3, [pc, #56]	; (80048a4 <HAL_UART_MspInit+0xe4>)
 800486c:	6323      	str	r3, [r4, #48]	; 0x30
 800486e:	625c      	str	r4, [r3, #36]	; 0x24

        /* USER CODE BEGIN USART1_MspInit 1 */

        HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004870:	2200      	movs	r2, #0
 8004872:	4611      	mov	r1, r2
 8004874:	2025      	movs	r0, #37	; 0x25
 8004876:	f7fd fe31 	bl	80024dc <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 800487a:	2025      	movs	r0, #37	; 0x25
 800487c:	f7fd fe60 	bl	8002540 <HAL_NVIC_EnableIRQ>

        /* USER CODE END USART1_MspInit 1 */
    }
}
 8004880:	b007      	add	sp, #28
 8004882:	bdf0      	pop	{r4, r5, r6, r7, pc}
            Error_Handler();
 8004884:	f7ff fd24 	bl	80042d0 <Error_Handler>
 8004888:	e7d8      	b.n	800483c <HAL_UART_MspInit+0x7c>
            Error_Handler();
 800488a:	f7ff fd21 	bl	80042d0 <Error_Handler>
 800488e:	e7ec      	b.n	800486a <HAL_UART_MspInit+0xaa>
 8004890:	40013800 	.word	0x40013800
 8004894:	40010c00 	.word	0x40010c00
 8004898:	40010000 	.word	0x40010000
 800489c:	20001008 	.word	0x20001008
 80048a0:	40020058 	.word	0x40020058
 80048a4:	2000104c 	.word	0x2000104c
 80048a8:	40020044 	.word	0x40020044

080048ac <NMI_Handler>:
    /******************************************************************************/
    /**
     * @brief This function handles Non maskable interrupt.
     */
    void NMI_Handler(void)
    {
 80048ac:	4770      	bx	lr

080048ae <HardFault_Handler>:

    /**
     * @brief This function handles Hard fault interrupt.
     */
    void HardFault_Handler(void)
    {
 80048ae:	e7fe      	b.n	80048ae <HardFault_Handler>

080048b0 <MemManage_Handler>:

    /**
     * @brief This function handles Memory management fault.
     */
    void MemManage_Handler(void)
    {
 80048b0:	e7fe      	b.n	80048b0 <MemManage_Handler>

080048b2 <BusFault_Handler>:

    /**
     * @brief This function handles Prefetch fault, memory access fault.
     */
    void BusFault_Handler(void)
    {
 80048b2:	e7fe      	b.n	80048b2 <BusFault_Handler>

080048b4 <UsageFault_Handler>:

    /**
     * @brief This function handles Undefined instruction or illegal state.
     */
    void UsageFault_Handler(void)
    {
 80048b4:	e7fe      	b.n	80048b4 <UsageFault_Handler>

080048b6 <SVC_Handler>:

    /**
     * @brief This function handles System service call via SWI instruction.
     */
    void SVC_Handler(void)
    {
 80048b6:	4770      	bx	lr

080048b8 <DebugMon_Handler>:

    /**
     * @brief This function handles Debug monitor.
     */
    void DebugMon_Handler(void)
    {
 80048b8:	4770      	bx	lr

080048ba <PendSV_Handler>:

    /**
     * @brief This function handles Pendable request for system service.
     */
    void PendSV_Handler(void)
    {
 80048ba:	4770      	bx	lr

080048bc <SysTick_Handler>:

    /**
     * @brief This function handles System tick timer.
     */
    void SysTick_Handler(void)
    {
 80048bc:	b508      	push	{r3, lr}
        /* USER CODE BEGIN SysTick_IRQn 0 */

        /* USER CODE END SysTick_IRQn 0 */
        HAL_IncTick();
 80048be:	f7fd fa9f 	bl	8001e00 <HAL_IncTick>
        HAL_SYSTICK_IRQHandler();
 80048c2:	f7fd fe60 	bl	8002586 <HAL_SYSTICK_IRQHandler>
 80048c6:	bd08      	pop	{r3, pc}

080048c8 <USB_LP_CAN1_RX0_IRQHandler>:

    /**
     * @brief This function handles USB low priority or CAN RX0 interrupts.
     */
    void USB_LP_CAN1_RX0_IRQHandler(void)
    {
 80048c8:	b508      	push	{r3, lr}
        /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

        /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
        HAL_CAN_IRQHandler(&hcan);
 80048ca:	4802      	ldr	r0, [pc, #8]	; (80048d4 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 80048cc:	f7fd fcc8 	bl	8002260 <HAL_CAN_IRQHandler>
 80048d0:	bd08      	pop	{r3, pc}
 80048d2:	bf00      	nop
 80048d4:	20000fe0 	.word	0x20000fe0

080048d8 <TIM1_UP_IRQHandler>:
        /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
    }

    void TIM1_UP_IRQHandler(void)
    {
        if((TIM1->SR & TIM_SR_UIF) != RESET)
 80048d8:	4b04      	ldr	r3, [pc, #16]	; (80048ec <TIM1_UP_IRQHandler+0x14>)
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	f013 0f01 	tst.w	r3, #1
 80048e0:	d003      	beq.n	80048ea <TIM1_UP_IRQHandler+0x12>
        {
            TIM1->SR = ~TIM_SR_UIF;
 80048e2:	f06f 0201 	mvn.w	r2, #1
 80048e6:	4b01      	ldr	r3, [pc, #4]	; (80048ec <TIM1_UP_IRQHandler+0x14>)
 80048e8:	611a      	str	r2, [r3, #16]
 80048ea:	4770      	bx	lr
 80048ec:	40012c00 	.word	0x40012c00

080048f0 <TIM3_IRQHandler>:
     * @brief This function handles TIM3 global interrupt.
     * This is the workhorse of the md201x.
     * this handler is called @ 1 kHz.
     */
    void TIM3_IRQHandler(void)
    {
 80048f0:	b508      	push	{r3, lr}
        if((TIM3->SR & TIM_SR_UIF) != RESET)
 80048f2:	4b07      	ldr	r3, [pc, #28]	; (8004910 <TIM3_IRQHandler+0x20>)
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	f013 0f01 	tst.w	r3, #1
 80048fa:	d100      	bne.n	80048fe <TIM3_IRQHandler+0xe>
 80048fc:	bd08      	pop	{r3, pc}
        {
            TIM3->SR = ~TIM_SR_UIF;
 80048fe:	f06f 0201 	mvn.w	r2, #1
 8004902:	4b03      	ldr	r3, [pc, #12]	; (8004910 <TIM3_IRQHandler+0x20>)
 8004904:	611a      	str	r2, [r3, #16]

            control.Control();
 8004906:	4803      	ldr	r0, [pc, #12]	; (8004914 <TIM3_IRQHandler+0x24>)
 8004908:	f7ff fce4 	bl	80042d4 <_ZN9MotorCtrl7ControlEv>
        }
    }
 800490c:	e7f6      	b.n	80048fc <TIM3_IRQHandler+0xc>
 800490e:	bf00      	nop
 8004910:	40000400 	.word	0x40000400
 8004914:	20000008 	.word	0x20000008

08004918 <DMA1_Channel4_IRQHandler>:

    /**
    * @brief This function handles DMA1 channel4 global interrupt.
    */
    void DMA1_Channel4_IRQHandler(void)
    {
 8004918:	b508      	push	{r3, lr}
      HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800491a:	4802      	ldr	r0, [pc, #8]	; (8004924 <DMA1_Channel4_IRQHandler+0xc>)
 800491c:	f7fd ff0a 	bl	8002734 <HAL_DMA_IRQHandler>
 8004920:	bd08      	pop	{r3, pc}
 8004922:	bf00      	nop
 8004924:	2000104c 	.word	0x2000104c

08004928 <DMA1_Channel5_IRQHandler>:

    /**
    * @brief This function handles DMA1 channel5 global interrupt.
    */
    void DMA1_Channel5_IRQHandler(void)
    {
 8004928:	b508      	push	{r3, lr}
      HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800492a:	4802      	ldr	r0, [pc, #8]	; (8004934 <DMA1_Channel5_IRQHandler+0xc>)
 800492c:	f7fd ff02 	bl	8002734 <HAL_DMA_IRQHandler>
 8004930:	bd08      	pop	{r3, pc}
 8004932:	bf00      	nop
 8004934:	20001008 	.word	0x20001008

08004938 <USART1_IRQHandler>:
    }

    void USART1_IRQHandler(void)
    {
 8004938:	b508      	push	{r3, lr}
        HAL_UART_IRQHandler(&huart1);
 800493a:	4802      	ldr	r0, [pc, #8]	; (8004944 <USART1_IRQHandler+0xc>)
 800493c:	f7fe fcda 	bl	80032f4 <HAL_UART_IRQHandler>
 8004940:	bd08      	pop	{r3, pc}
 8004942:	bf00      	nop
 8004944:	20001090 	.word	0x20001090

08004948 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004948:	4b0f      	ldr	r3, [pc, #60]	; (8004988 <SystemInit+0x40>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	f042 0201 	orr.w	r2, r2, #1
 8004950:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004952:	6859      	ldr	r1, [r3, #4]
 8004954:	4a0d      	ldr	r2, [pc, #52]	; (800498c <SystemInit+0x44>)
 8004956:	400a      	ands	r2, r1
 8004958:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004960:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004964:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800496c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004974:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004976:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800497a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800497c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004980:	4b03      	ldr	r3, [pc, #12]	; (8004990 <SystemInit+0x48>)
 8004982:	609a      	str	r2, [r3, #8]
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40021000 	.word	0x40021000
 800498c:	f8ff0000 	.word	0xf8ff0000
 8004990:	e000ed00 	.word	0xe000ed00

08004994 <_Z11uart_promptv>:

    uart_prompt();
}

void uart_prompt(void)
{
 8004994:	b538      	push	{r3, r4, r5, lr}
    for (unsigned int i = 0; i < cmd_buf_size; i++)
 8004996:	2300      	movs	r3, #0
 8004998:	2b7f      	cmp	r3, #127	; 0x7f
 800499a:	d804      	bhi.n	80049a6 <_Z11uart_promptv+0x12>
    {
        cmd_buf[i] = 0x00;
 800499c:	2100      	movs	r1, #0
 800499e:	4a19      	ldr	r2, [pc, #100]	; (8004a04 <_Z11uart_promptv+0x70>)
 80049a0:	54d1      	strb	r1, [r2, r3]
    for (unsigned int i = 0; i < cmd_buf_size; i++)
 80049a2:	3301      	adds	r3, #1
 80049a4:	e7f8      	b.n	8004998 <_Z11uart_promptv+0x4>
    }
    cmd_buf_ptr = 0;
 80049a6:	2200      	movs	r2, #0
 80049a8:	4b17      	ldr	r3, [pc, #92]	; (8004a08 <_Z11uart_promptv+0x74>)
 80049aa:	601a      	str	r2, [r3, #0]
		uint32_t offset = HAL_GetTick();
 80049ac:	f7fd fa34 	bl	8001e18 <HAL_GetTick>
 80049b0:	4605      	mov	r5, r0
		while(!tx_cplt)
 80049b2:	4b16      	ldr	r3, [pc, #88]	; (8004a0c <_Z11uart_promptv+0x78>)
 80049b4:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 80049b8:	b953      	cbnz	r3, 80049d0 <_Z11uart_promptv+0x3c>
		    if(offset + timeout < HAL_GetTick())
 80049ba:	f105 040a 	add.w	r4, r5, #10
 80049be:	f7fd fa2b 	bl	8001e18 <HAL_GetTick>
 80049c2:	4284      	cmp	r4, r0
 80049c4:	d2f5      	bcs.n	80049b2 <_Z11uart_promptv+0x1e>
		        tx_cplt = true;
 80049c6:	2201      	movs	r2, #1
 80049c8:	4b10      	ldr	r3, [pc, #64]	; (8004a0c <_Z11uart_promptv+0x78>)
 80049ca:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 80049ce:	bd38      	pop	{r3, r4, r5, pc}
		while(!tx_cplt)
 80049d0:	2300      	movs	r3, #0
		for (int i = 0; i < length; i++)
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	dc05      	bgt.n	80049e2 <_Z11uart_promptv+0x4e>
			tx_buf[i] = c[i];
 80049d6:	4a0e      	ldr	r2, [pc, #56]	; (8004a10 <_Z11uart_promptv+0x7c>)
 80049d8:	5c99      	ldrb	r1, [r3, r2]
 80049da:	4a0c      	ldr	r2, [pc, #48]	; (8004a0c <_Z11uart_promptv+0x78>)
 80049dc:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < length; i++)
 80049de:	3301      	adds	r3, #1
 80049e0:	e7f7      	b.n	80049d2 <_Z11uart_promptv+0x3e>
			tx_cplt = false;
 80049e2:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <_Z11uart_promptv+0x78>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 80049ea:	2202      	movs	r2, #2
 80049ec:	4619      	mov	r1, r3
 80049ee:	f8d3 0808 	ldr.w	r0, [r3, #2056]	; 0x808
 80049f2:	f7fe fb17 	bl	8003024 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 80049f6:	b118      	cbz	r0, 8004a00 <_Z11uart_promptv+0x6c>
                tx_cplt = true;
 80049f8:	2201      	movs	r2, #1
 80049fa:	4b04      	ldr	r3, [pc, #16]	; (8004a0c <_Z11uart_promptv+0x78>)
 80049fc:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8004a00:	bd38      	pop	{r3, r4, r5, pc}
 8004a02:	bf00      	nop
 8004a04:	200010d0 	.word	0x200010d0
 8004a08:	20001150 	.word	0x20001150
 8004a0c:	20000744 	.word	0x20000744
 8004a10:	0800adf4 	.word	0x0800adf4

08004a14 <_Z15uart_dump_valuePKcS0_d>:
    serial.write((const uint8_t *) "> ", 2);
}

void uart_dump_value(const char * name, const char * unit, double value)
{
 8004a14:	b570      	push	{r4, r5, r6, lr}
 8004a16:	b084      	sub	sp, #16
    //char tx_buf[128];
    int ret = sprintf(tx_buf, "Current %s: %lf [%s]\r\n", name, value, unit);
 8004a18:	9102      	str	r1, [sp, #8]
 8004a1a:	e9cd 2300 	strd	r2, r3, [sp]
 8004a1e:	4602      	mov	r2, r0
 8004a20:	4931      	ldr	r1, [pc, #196]	; (8004ae8 <_Z15uart_dump_valuePKcS0_d+0xd4>)
 8004a22:	4832      	ldr	r0, [pc, #200]	; (8004aec <_Z15uart_dump_valuePKcS0_d+0xd8>)
 8004a24:	f000 fe7a 	bl	800571c <sprintf>
    if (ret < 0)
 8004a28:	1e04      	subs	r4, r0, #0
 8004a2a:	db05      	blt.n	8004a38 <_Z15uart_dump_valuePKcS0_d+0x24>
		if (length > BUF_SIZE || length < 1)
 8004a2c:	1e63      	subs	r3, r4, #1
 8004a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a32:	d32d      	bcc.n	8004a90 <_Z15uart_dump_valuePKcS0_d+0x7c>
    }
    else
    {
        serial.write((const uint8_t *) tx_buf, ret);
    }
}
 8004a34:	b004      	add	sp, #16
 8004a36:	bd70      	pop	{r4, r5, r6, pc}
		uint32_t offset = HAL_GetTick();
 8004a38:	f7fd f9ee 	bl	8001e18 <HAL_GetTick>
 8004a3c:	4605      	mov	r5, r0
		while(!tx_cplt)
 8004a3e:	4b2c      	ldr	r3, [pc, #176]	; (8004af0 <_Z15uart_dump_valuePKcS0_d+0xdc>)
 8004a40:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8004a44:	b953      	cbnz	r3, 8004a5c <_Z15uart_dump_valuePKcS0_d+0x48>
		    if(offset + timeout < HAL_GetTick())
 8004a46:	f105 040a 	add.w	r4, r5, #10
 8004a4a:	f7fd f9e5 	bl	8001e18 <HAL_GetTick>
 8004a4e:	4284      	cmp	r4, r0
 8004a50:	d2f5      	bcs.n	8004a3e <_Z15uart_dump_valuePKcS0_d+0x2a>
		        tx_cplt = true;
 8004a52:	2201      	movs	r2, #1
 8004a54:	4b26      	ldr	r3, [pc, #152]	; (8004af0 <_Z15uart_dump_valuePKcS0_d+0xdc>)
 8004a56:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8004a5a:	e7eb      	b.n	8004a34 <_Z15uart_dump_valuePKcS0_d+0x20>
		while(!tx_cplt)
 8004a5c:	2300      	movs	r3, #0
		for (int i = 0; i < length; i++)
 8004a5e:	2b0a      	cmp	r3, #10
 8004a60:	dc05      	bgt.n	8004a6e <_Z15uart_dump_valuePKcS0_d+0x5a>
			tx_buf[i] = c[i];
 8004a62:	4a24      	ldr	r2, [pc, #144]	; (8004af4 <_Z15uart_dump_valuePKcS0_d+0xe0>)
 8004a64:	5c99      	ldrb	r1, [r3, r2]
 8004a66:	4a22      	ldr	r2, [pc, #136]	; (8004af0 <_Z15uart_dump_valuePKcS0_d+0xdc>)
 8004a68:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < length; i++)
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	e7f7      	b.n	8004a5e <_Z15uart_dump_valuePKcS0_d+0x4a>
			tx_cplt = false;
 8004a6e:	4b20      	ldr	r3, [pc, #128]	; (8004af0 <_Z15uart_dump_valuePKcS0_d+0xdc>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8004a76:	220b      	movs	r2, #11
 8004a78:	4619      	mov	r1, r3
 8004a7a:	f8d3 0808 	ldr.w	r0, [r3, #2056]	; 0x808
 8004a7e:	f7fe fad1 	bl	8003024 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 8004a82:	2800      	cmp	r0, #0
 8004a84:	d0d6      	beq.n	8004a34 <_Z15uart_dump_valuePKcS0_d+0x20>
                tx_cplt = true;
 8004a86:	2201      	movs	r2, #1
 8004a88:	4b19      	ldr	r3, [pc, #100]	; (8004af0 <_Z15uart_dump_valuePKcS0_d+0xdc>)
 8004a8a:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8004a8e:	e7d1      	b.n	8004a34 <_Z15uart_dump_valuePKcS0_d+0x20>
		uint32_t offset = HAL_GetTick();
 8004a90:	f7fd f9c2 	bl	8001e18 <HAL_GetTick>
 8004a94:	4606      	mov	r6, r0
		while(!tx_cplt)
 8004a96:	4b16      	ldr	r3, [pc, #88]	; (8004af0 <_Z15uart_dump_valuePKcS0_d+0xdc>)
 8004a98:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8004a9c:	b953      	cbnz	r3, 8004ab4 <_Z15uart_dump_valuePKcS0_d+0xa0>
		    if(offset + timeout < HAL_GetTick())
 8004a9e:	f106 050a 	add.w	r5, r6, #10
 8004aa2:	f7fd f9b9 	bl	8001e18 <HAL_GetTick>
 8004aa6:	4285      	cmp	r5, r0
 8004aa8:	d2f5      	bcs.n	8004a96 <_Z15uart_dump_valuePKcS0_d+0x82>
		        tx_cplt = true;
 8004aaa:	2201      	movs	r2, #1
 8004aac:	4b10      	ldr	r3, [pc, #64]	; (8004af0 <_Z15uart_dump_valuePKcS0_d+0xdc>)
 8004aae:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8004ab2:	e7bf      	b.n	8004a34 <_Z15uart_dump_valuePKcS0_d+0x20>
		while(!tx_cplt)
 8004ab4:	2300      	movs	r3, #0
		for (int i = 0; i < length; i++)
 8004ab6:	429c      	cmp	r4, r3
 8004ab8:	dd05      	ble.n	8004ac6 <_Z15uart_dump_valuePKcS0_d+0xb2>
			tx_buf[i] = c[i];
 8004aba:	4a0c      	ldr	r2, [pc, #48]	; (8004aec <_Z15uart_dump_valuePKcS0_d+0xd8>)
 8004abc:	5cd1      	ldrb	r1, [r2, r3]
 8004abe:	4a0c      	ldr	r2, [pc, #48]	; (8004af0 <_Z15uart_dump_valuePKcS0_d+0xdc>)
 8004ac0:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < length; i++)
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	e7f7      	b.n	8004ab6 <_Z15uart_dump_valuePKcS0_d+0xa2>
			tx_cplt = false;
 8004ac6:	4b0a      	ldr	r3, [pc, #40]	; (8004af0 <_Z15uart_dump_valuePKcS0_d+0xdc>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8004ace:	b2a2      	uxth	r2, r4
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	f8d3 0808 	ldr.w	r0, [r3, #2056]	; 0x808
 8004ad6:	f7fe faa5 	bl	8003024 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 8004ada:	2800      	cmp	r0, #0
 8004adc:	d0aa      	beq.n	8004a34 <_Z15uart_dump_valuePKcS0_d+0x20>
                tx_cplt = true;
 8004ade:	2201      	movs	r2, #1
 8004ae0:	4b03      	ldr	r3, [pc, #12]	; (8004af0 <_Z15uart_dump_valuePKcS0_d+0xdc>)
 8004ae2:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8004ae6:	e7a5      	b.n	8004a34 <_Z15uart_dump_valuePKcS0_d+0x20>
 8004ae8:	0800b004 	.word	0x0800b004
 8004aec:	20001154 	.word	0x20001154
 8004af0:	20000744 	.word	0x20000744
 8004af4:	0800b01c 	.word	0x0800b01c

08004af8 <_Z18uart_invalid_valuePKcd>:

void uart_invalid_value(const char * name, double value)
{
 8004af8:	b570      	push	{r4, r5, r6, lr}
 8004afa:	b082      	sub	sp, #8
    int ret = sprintf(tx_buf, "Invalid value for %s: %lf\r\n", name, value);
 8004afc:	e9cd 2300 	strd	r2, r3, [sp]
 8004b00:	4602      	mov	r2, r0
 8004b02:	491b      	ldr	r1, [pc, #108]	; (8004b70 <_Z18uart_invalid_valuePKcd+0x78>)
 8004b04:	481b      	ldr	r0, [pc, #108]	; (8004b74 <_Z18uart_invalid_valuePKcd+0x7c>)
 8004b06:	f000 fe09 	bl	800571c <sprintf>
		if (length > BUF_SIZE || length < 1)
 8004b0a:	1e43      	subs	r3, r0, #1
 8004b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b10:	d301      	bcc.n	8004b16 <_Z18uart_invalid_valuePKcd+0x1e>
    serial.write((const uint8_t *) tx_buf, ret);
}
 8004b12:	b002      	add	sp, #8
 8004b14:	bd70      	pop	{r4, r5, r6, pc}
 8004b16:	4604      	mov	r4, r0
		uint32_t offset = HAL_GetTick();
 8004b18:	f7fd f97e 	bl	8001e18 <HAL_GetTick>
 8004b1c:	4606      	mov	r6, r0
		while(!tx_cplt)
 8004b1e:	4b16      	ldr	r3, [pc, #88]	; (8004b78 <_Z18uart_invalid_valuePKcd+0x80>)
 8004b20:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8004b24:	b953      	cbnz	r3, 8004b3c <_Z18uart_invalid_valuePKcd+0x44>
		    if(offset + timeout < HAL_GetTick())
 8004b26:	f106 050a 	add.w	r5, r6, #10
 8004b2a:	f7fd f975 	bl	8001e18 <HAL_GetTick>
 8004b2e:	4285      	cmp	r5, r0
 8004b30:	d2f5      	bcs.n	8004b1e <_Z18uart_invalid_valuePKcd+0x26>
		        tx_cplt = true;
 8004b32:	2201      	movs	r2, #1
 8004b34:	4b10      	ldr	r3, [pc, #64]	; (8004b78 <_Z18uart_invalid_valuePKcd+0x80>)
 8004b36:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8004b3a:	e7ea      	b.n	8004b12 <_Z18uart_invalid_valuePKcd+0x1a>
		while(!tx_cplt)
 8004b3c:	2300      	movs	r3, #0
		for (int i = 0; i < length; i++)
 8004b3e:	429c      	cmp	r4, r3
 8004b40:	dd05      	ble.n	8004b4e <_Z18uart_invalid_valuePKcd+0x56>
			tx_buf[i] = c[i];
 8004b42:	4a0c      	ldr	r2, [pc, #48]	; (8004b74 <_Z18uart_invalid_valuePKcd+0x7c>)
 8004b44:	5cd1      	ldrb	r1, [r2, r3]
 8004b46:	4a0c      	ldr	r2, [pc, #48]	; (8004b78 <_Z18uart_invalid_valuePKcd+0x80>)
 8004b48:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < length; i++)
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	e7f7      	b.n	8004b3e <_Z18uart_invalid_valuePKcd+0x46>
			tx_cplt = false;
 8004b4e:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <_Z18uart_invalid_valuePKcd+0x80>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8004b56:	b2a2      	uxth	r2, r4
 8004b58:	4619      	mov	r1, r3
 8004b5a:	f8d3 0808 	ldr.w	r0, [r3, #2056]	; 0x808
 8004b5e:	f7fe fa61 	bl	8003024 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 8004b62:	2800      	cmp	r0, #0
 8004b64:	d0d5      	beq.n	8004b12 <_Z18uart_invalid_valuePKcd+0x1a>
                tx_cplt = true;
 8004b66:	2201      	movs	r2, #1
 8004b68:	4b03      	ldr	r3, [pc, #12]	; (8004b78 <_Z18uart_invalid_valuePKcd+0x80>)
 8004b6a:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8004b6e:	e7d0      	b.n	8004b12 <_Z18uart_invalid_valuePKcd+0x1a>
 8004b70:	0800b028 	.word	0x0800b028
 8004b74:	20001154 	.word	0x20001154
 8004b78:	20000744 	.word	0x20000744

08004b7c <_Z20uart_valid_value_setPKcS0_d>:

void uart_valid_value_set(const char * name, const char * unit, double value)
{
 8004b7c:	b570      	push	{r4, r5, r6, lr}
 8004b7e:	b084      	sub	sp, #16
    int ret = sprintf(tx_buf, "Set %s: %lf [%s]\r\n", name, value, unit);
 8004b80:	9102      	str	r1, [sp, #8]
 8004b82:	e9cd 2300 	strd	r2, r3, [sp]
 8004b86:	4602      	mov	r2, r0
 8004b88:	491b      	ldr	r1, [pc, #108]	; (8004bf8 <_Z20uart_valid_value_setPKcS0_d+0x7c>)
 8004b8a:	481c      	ldr	r0, [pc, #112]	; (8004bfc <_Z20uart_valid_value_setPKcS0_d+0x80>)
 8004b8c:	f000 fdc6 	bl	800571c <sprintf>
		if (length > BUF_SIZE || length < 1)
 8004b90:	1e43      	subs	r3, r0, #1
 8004b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b96:	d301      	bcc.n	8004b9c <_Z20uart_valid_value_setPKcS0_d+0x20>
    serial.write((const uint8_t *) tx_buf, ret);
}
 8004b98:	b004      	add	sp, #16
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}
 8004b9c:	4604      	mov	r4, r0
		uint32_t offset = HAL_GetTick();
 8004b9e:	f7fd f93b 	bl	8001e18 <HAL_GetTick>
 8004ba2:	4606      	mov	r6, r0
		while(!tx_cplt)
 8004ba4:	4b16      	ldr	r3, [pc, #88]	; (8004c00 <_Z20uart_valid_value_setPKcS0_d+0x84>)
 8004ba6:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8004baa:	b953      	cbnz	r3, 8004bc2 <_Z20uart_valid_value_setPKcS0_d+0x46>
		    if(offset + timeout < HAL_GetTick())
 8004bac:	f106 050a 	add.w	r5, r6, #10
 8004bb0:	f7fd f932 	bl	8001e18 <HAL_GetTick>
 8004bb4:	4285      	cmp	r5, r0
 8004bb6:	d2f5      	bcs.n	8004ba4 <_Z20uart_valid_value_setPKcS0_d+0x28>
		        tx_cplt = true;
 8004bb8:	2201      	movs	r2, #1
 8004bba:	4b11      	ldr	r3, [pc, #68]	; (8004c00 <_Z20uart_valid_value_setPKcS0_d+0x84>)
 8004bbc:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8004bc0:	e7ea      	b.n	8004b98 <_Z20uart_valid_value_setPKcS0_d+0x1c>
		while(!tx_cplt)
 8004bc2:	2300      	movs	r3, #0
		for (int i = 0; i < length; i++)
 8004bc4:	429c      	cmp	r4, r3
 8004bc6:	dd05      	ble.n	8004bd4 <_Z20uart_valid_value_setPKcS0_d+0x58>
			tx_buf[i] = c[i];
 8004bc8:	4a0c      	ldr	r2, [pc, #48]	; (8004bfc <_Z20uart_valid_value_setPKcS0_d+0x80>)
 8004bca:	5cd1      	ldrb	r1, [r2, r3]
 8004bcc:	4a0c      	ldr	r2, [pc, #48]	; (8004c00 <_Z20uart_valid_value_setPKcS0_d+0x84>)
 8004bce:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < length; i++)
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	e7f7      	b.n	8004bc4 <_Z20uart_valid_value_setPKcS0_d+0x48>
			tx_cplt = false;
 8004bd4:	4b0a      	ldr	r3, [pc, #40]	; (8004c00 <_Z20uart_valid_value_setPKcS0_d+0x84>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8004bdc:	b2a2      	uxth	r2, r4
 8004bde:	4619      	mov	r1, r3
 8004be0:	f8d3 0808 	ldr.w	r0, [r3, #2056]	; 0x808
 8004be4:	f7fe fa1e 	bl	8003024 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 8004be8:	2800      	cmp	r0, #0
 8004bea:	d0d5      	beq.n	8004b98 <_Z20uart_valid_value_setPKcS0_d+0x1c>
                tx_cplt = true;
 8004bec:	2201      	movs	r2, #1
 8004bee:	4b04      	ldr	r3, [pc, #16]	; (8004c00 <_Z20uart_valid_value_setPKcS0_d+0x84>)
 8004bf0:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8004bf4:	e7d0      	b.n	8004b98 <_Z20uart_valid_value_setPKcS0_d+0x1c>
 8004bf6:	bf00      	nop
 8004bf8:	0800b044 	.word	0x0800b044
 8004bfc:	20001154 	.word	0x20001154
 8004c00:	20000744 	.word	0x20000744
 8004c04:	00000000 	.word	0x00000000

08004c08 <_Z12uart_processv>:
		uint16_t rx_head = (BUF_SIZE - huart.hdmarx->Instance->CNDTR)
 8004c08:	4a8a      	ldr	r2, [pc, #552]	; (8004e34 <_Z12uart_processv+0x22c>)
 8004c0a:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
 8004c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
				& buf_mask;
 8004c14:	425b      	negs	r3, r3
 8004c16:	f3c3 0309 	ubfx	r3, r3, #0, #10
		if (rx_tail == rx_head)
 8004c1a:	f8b2 2802 	ldrh.w	r2, [r2, #2050]	; 0x802
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d045      	beq.n	8004cae <_Z12uart_processv+0xa6>
		int c = (int) rx_buf[rx_tail++];
 8004c22:	1c51      	adds	r1, r2, #1
 8004c24:	4883      	ldr	r0, [pc, #524]	; (8004e34 <_Z12uart_processv+0x22c>)
 8004c26:	4402      	add	r2, r0
 8004c28:	f892 3400 	ldrb.w	r3, [r2, #1024]	; 0x400
		rx_tail &= buf_mask;
 8004c2c:	f3c1 0209 	ubfx	r2, r1, #0, #10
 8004c30:	f8a0 2802 	strh.w	r2, [r0, #2050]	; 0x802
    if (ch == -1)
 8004c34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c38:	f000 84e7 	beq.w	800560a <_Z12uart_processv+0xa02>
{
 8004c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c40:	b087      	sub	sp, #28
    char c = static_cast<char>(ch);
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	f88d 3017 	strb.w	r3, [sp, #23]
    if('a' <= c && c <= 'z')
 8004c48:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	2a19      	cmp	r2, #25
 8004c50:	d830      	bhi.n	8004cb4 <_Z12uart_processv+0xac>
        c += 'A' - 'a';
 8004c52:	3b20      	subs	r3, #32
 8004c54:	f88d 3017 	strb.w	r3, [sp, #23]
    cmd_buf[cmd_buf_ptr] = c;
 8004c58:	4a77      	ldr	r2, [pc, #476]	; (8004e38 <_Z12uart_processv+0x230>)
 8004c5a:	6813      	ldr	r3, [r2, #0]
 8004c5c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8004c60:	4976      	ldr	r1, [pc, #472]	; (8004e3c <_Z12uart_processv+0x234>)
 8004c62:	54c8      	strb	r0, [r1, r3]
    cmd_buf_ptr++;
 8004c64:	3301      	adds	r3, #1
 8004c66:	6013      	str	r3, [r2, #0]
		uint32_t offset = HAL_GetTick();
 8004c68:	f7fd f8d6 	bl	8001e18 <HAL_GetTick>
 8004c6c:	4605      	mov	r5, r0
		while(!tx_cplt)
 8004c6e:	4b71      	ldr	r3, [pc, #452]	; (8004e34 <_Z12uart_processv+0x22c>)
 8004c70:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f040 8092 	bne.w	8004d9e <_Z12uart_processv+0x196>
		    if(offset + timeout < HAL_GetTick())
 8004c7a:	f105 040a 	add.w	r4, r5, #10
 8004c7e:	f7fd f8cb 	bl	8001e18 <HAL_GetTick>
 8004c82:	4284      	cmp	r4, r0
 8004c84:	d2f3      	bcs.n	8004c6e <_Z12uart_processv+0x66>
		        tx_cplt = true;
 8004c86:	2201      	movs	r2, #1
 8004c88:	4b6a      	ldr	r3, [pc, #424]	; (8004e34 <_Z12uart_processv+0x22c>)
 8004c8a:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
    if (cmd_buf_ptr >= cmd_buf_size)
 8004c8e:	4b6a      	ldr	r3, [pc, #424]	; (8004e38 <_Z12uart_processv+0x230>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b7f      	cmp	r3, #127	; 0x7f
 8004c94:	f200 80a0 	bhi.w	8004dd8 <_Z12uart_processv+0x1d0>
    if (c != '\r' && c != '\n')
 8004c98:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004c9c:	2b0d      	cmp	r3, #13
 8004c9e:	f000 80d5 	beq.w	8004e4c <_Z12uart_processv+0x244>
 8004ca2:	2b0a      	cmp	r3, #10
 8004ca4:	f000 80d2 	beq.w	8004e4c <_Z12uart_processv+0x244>
}
 8004ca8:	b007      	add	sp, #28
 8004caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			return -1;
 8004cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cb2:	e7bf      	b.n	8004c34 <_Z12uart_processv+0x2c>
    else if('A' <= c && c <= 'Z')
 8004cb4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004cb8:	b2d2      	uxtb	r2, r2
 8004cba:	2a19      	cmp	r2, #25
 8004cbc:	d9cc      	bls.n	8004c58 <_Z12uart_processv+0x50>
    else if('0' <= c && c <= '9')
 8004cbe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004cc2:	b2d2      	uxtb	r2, r2
 8004cc4:	2a09      	cmp	r2, #9
 8004cc6:	d9c7      	bls.n	8004c58 <_Z12uart_processv+0x50>
    else if(c == '.' || c == ' ')
 8004cc8:	2b2e      	cmp	r3, #46	; 0x2e
 8004cca:	d0c5      	beq.n	8004c58 <_Z12uart_processv+0x50>
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d0c3      	beq.n	8004c58 <_Z12uart_processv+0x50>
    else if(c == '\b' || c == 127)
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d006      	beq.n	8004ce2 <_Z12uart_processv+0xda>
 8004cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8004cd6:	d004      	beq.n	8004ce2 <_Z12uart_processv+0xda>
    else if(c == '\r' || c == '\n')
 8004cd8:	2b0d      	cmp	r3, #13
 8004cda:	d0bd      	beq.n	8004c58 <_Z12uart_processv+0x50>
 8004cdc:	2b0a      	cmp	r3, #10
 8004cde:	d1e3      	bne.n	8004ca8 <_Z12uart_processv+0xa0>
 8004ce0:	e7ba      	b.n	8004c58 <_Z12uart_processv+0x50>
        if(cmd_buf_ptr > 0)
 8004ce2:	4b55      	ldr	r3, [pc, #340]	; (8004e38 <_Z12uart_processv+0x230>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	b373      	cbz	r3, 8004d46 <_Z12uart_processv+0x13e>
            cmd_buf_ptr--;
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	4a53      	ldr	r2, [pc, #332]	; (8004e38 <_Z12uart_processv+0x230>)
 8004cec:	6013      	str	r3, [r2, #0]
		uint32_t offset = HAL_GetTick();
 8004cee:	f7fd f893 	bl	8001e18 <HAL_GetTick>
 8004cf2:	4605      	mov	r5, r0
		while(!tx_cplt)
 8004cf4:	4b4f      	ldr	r3, [pc, #316]	; (8004e34 <_Z12uart_processv+0x22c>)
 8004cf6:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8004cfa:	b953      	cbnz	r3, 8004d12 <_Z12uart_processv+0x10a>
		    if(offset + timeout < HAL_GetTick())
 8004cfc:	f105 040a 	add.w	r4, r5, #10
 8004d00:	f7fd f88a 	bl	8001e18 <HAL_GetTick>
 8004d04:	4284      	cmp	r4, r0
 8004d06:	d2f5      	bcs.n	8004cf4 <_Z12uart_processv+0xec>
		        tx_cplt = true;
 8004d08:	2201      	movs	r2, #1
 8004d0a:	4b4a      	ldr	r3, [pc, #296]	; (8004e34 <_Z12uart_processv+0x22c>)
 8004d0c:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8004d10:	e7ca      	b.n	8004ca8 <_Z12uart_processv+0xa0>
		while(!tx_cplt)
 8004d12:	2300      	movs	r3, #0
		for (int i = 0; i < length; i++)
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	dc05      	bgt.n	8004d24 <_Z12uart_processv+0x11c>
			tx_buf[i] = c[i];
 8004d18:	4a49      	ldr	r2, [pc, #292]	; (8004e40 <_Z12uart_processv+0x238>)
 8004d1a:	5c99      	ldrb	r1, [r3, r2]
 8004d1c:	4a45      	ldr	r2, [pc, #276]	; (8004e34 <_Z12uart_processv+0x22c>)
 8004d1e:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < length; i++)
 8004d20:	3301      	adds	r3, #1
 8004d22:	e7f7      	b.n	8004d14 <_Z12uart_processv+0x10c>
			tx_cplt = false;
 8004d24:	4b43      	ldr	r3, [pc, #268]	; (8004e34 <_Z12uart_processv+0x22c>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8004d2c:	2205      	movs	r2, #5
 8004d2e:	4619      	mov	r1, r3
 8004d30:	f8d3 0808 	ldr.w	r0, [r3, #2056]	; 0x808
 8004d34:	f7fe f976 	bl	8003024 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 8004d38:	2800      	cmp	r0, #0
 8004d3a:	d0b5      	beq.n	8004ca8 <_Z12uart_processv+0xa0>
                tx_cplt = true;
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	4b3d      	ldr	r3, [pc, #244]	; (8004e34 <_Z12uart_processv+0x22c>)
 8004d40:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8004d44:	e7b0      	b.n	8004ca8 <_Z12uart_processv+0xa0>
		uint32_t offset = HAL_GetTick();
 8004d46:	f7fd f867 	bl	8001e18 <HAL_GetTick>
 8004d4a:	4605      	mov	r5, r0
		while(!tx_cplt)
 8004d4c:	4b39      	ldr	r3, [pc, #228]	; (8004e34 <_Z12uart_processv+0x22c>)
 8004d4e:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8004d52:	b953      	cbnz	r3, 8004d6a <_Z12uart_processv+0x162>
		    if(offset + timeout < HAL_GetTick())
 8004d54:	f105 040a 	add.w	r4, r5, #10
 8004d58:	f7fd f85e 	bl	8001e18 <HAL_GetTick>
 8004d5c:	4284      	cmp	r4, r0
 8004d5e:	d2f5      	bcs.n	8004d4c <_Z12uart_processv+0x144>
		        tx_cplt = true;
 8004d60:	2201      	movs	r2, #1
 8004d62:	4b34      	ldr	r3, [pc, #208]	; (8004e34 <_Z12uart_processv+0x22c>)
 8004d64:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8004d68:	e79e      	b.n	8004ca8 <_Z12uart_processv+0xa0>
		while(!tx_cplt)
 8004d6a:	2300      	movs	r3, #0
		for (int i = 0; i < length; i++)
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	dc05      	bgt.n	8004d7c <_Z12uart_processv+0x174>
			tx_buf[i] = c[i];
 8004d70:	4a34      	ldr	r2, [pc, #208]	; (8004e44 <_Z12uart_processv+0x23c>)
 8004d72:	5c99      	ldrb	r1, [r3, r2]
 8004d74:	4a2f      	ldr	r2, [pc, #188]	; (8004e34 <_Z12uart_processv+0x22c>)
 8004d76:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < length; i++)
 8004d78:	3301      	adds	r3, #1
 8004d7a:	e7f7      	b.n	8004d6c <_Z12uart_processv+0x164>
			tx_cplt = false;
 8004d7c:	4b2d      	ldr	r3, [pc, #180]	; (8004e34 <_Z12uart_processv+0x22c>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8004d84:	2201      	movs	r2, #1
 8004d86:	4619      	mov	r1, r3
 8004d88:	f8d3 0808 	ldr.w	r0, [r3, #2056]	; 0x808
 8004d8c:	f7fe f94a 	bl	8003024 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 8004d90:	2800      	cmp	r0, #0
 8004d92:	d089      	beq.n	8004ca8 <_Z12uart_processv+0xa0>
                tx_cplt = true;
 8004d94:	2201      	movs	r2, #1
 8004d96:	4b27      	ldr	r3, [pc, #156]	; (8004e34 <_Z12uart_processv+0x22c>)
 8004d98:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8004d9c:	e784      	b.n	8004ca8 <_Z12uart_processv+0xa0>
		while(!tx_cplt)
 8004d9e:	2300      	movs	r3, #0
		for (int i = 0; i < length; i++)
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	dc07      	bgt.n	8004db4 <_Z12uart_processv+0x1ac>
			tx_buf[i] = c[i];
 8004da4:	aa06      	add	r2, sp, #24
 8004da6:	441a      	add	r2, r3
 8004da8:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8004dac:	4a21      	ldr	r2, [pc, #132]	; (8004e34 <_Z12uart_processv+0x22c>)
 8004dae:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < length; i++)
 8004db0:	3301      	adds	r3, #1
 8004db2:	e7f5      	b.n	8004da0 <_Z12uart_processv+0x198>
			tx_cplt = false;
 8004db4:	4b1f      	ldr	r3, [pc, #124]	; (8004e34 <_Z12uart_processv+0x22c>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	f8d3 0808 	ldr.w	r0, [r3, #2056]	; 0x808
 8004dc4:	f7fe f92e 	bl	8003024 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	f43f af60 	beq.w	8004c8e <_Z12uart_processv+0x86>
                tx_cplt = true;
 8004dce:	2201      	movs	r2, #1
 8004dd0:	4b18      	ldr	r3, [pc, #96]	; (8004e34 <_Z12uart_processv+0x22c>)
 8004dd2:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8004dd6:	e75a      	b.n	8004c8e <_Z12uart_processv+0x86>
		uint32_t offset = HAL_GetTick();
 8004dd8:	f7fd f81e 	bl	8001e18 <HAL_GetTick>
 8004ddc:	4605      	mov	r5, r0
		while(!tx_cplt)
 8004dde:	4b15      	ldr	r3, [pc, #84]	; (8004e34 <_Z12uart_processv+0x22c>)
 8004de0:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8004de4:	b953      	cbnz	r3, 8004dfc <_Z12uart_processv+0x1f4>
		    if(offset + timeout < HAL_GetTick())
 8004de6:	f105 040a 	add.w	r4, r5, #10
 8004dea:	f7fd f815 	bl	8001e18 <HAL_GetTick>
 8004dee:	4284      	cmp	r4, r0
 8004df0:	d2f5      	bcs.n	8004dde <_Z12uart_processv+0x1d6>
		        tx_cplt = true;
 8004df2:	2201      	movs	r2, #1
 8004df4:	4b0f      	ldr	r3, [pc, #60]	; (8004e34 <_Z12uart_processv+0x22c>)
 8004df6:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8004dfa:	e74d      	b.n	8004c98 <_Z12uart_processv+0x90>
		while(!tx_cplt)
 8004dfc:	2300      	movs	r3, #0
		for (int i = 0; i < length; i++)
 8004dfe:	2b2f      	cmp	r3, #47	; 0x2f
 8004e00:	dc05      	bgt.n	8004e0e <_Z12uart_processv+0x206>
			tx_buf[i] = c[i];
 8004e02:	4a11      	ldr	r2, [pc, #68]	; (8004e48 <_Z12uart_processv+0x240>)
 8004e04:	5c99      	ldrb	r1, [r3, r2]
 8004e06:	4a0b      	ldr	r2, [pc, #44]	; (8004e34 <_Z12uart_processv+0x22c>)
 8004e08:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < length; i++)
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	e7f7      	b.n	8004dfe <_Z12uart_processv+0x1f6>
			tx_cplt = false;
 8004e0e:	4b09      	ldr	r3, [pc, #36]	; (8004e34 <_Z12uart_processv+0x22c>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8004e16:	2230      	movs	r2, #48	; 0x30
 8004e18:	4619      	mov	r1, r3
 8004e1a:	f8d3 0808 	ldr.w	r0, [r3, #2056]	; 0x808
 8004e1e:	f7fe f901 	bl	8003024 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 8004e22:	2800      	cmp	r0, #0
 8004e24:	f43f af38 	beq.w	8004c98 <_Z12uart_processv+0x90>
                tx_cplt = true;
 8004e28:	2201      	movs	r2, #1
 8004e2a:	4b02      	ldr	r3, [pc, #8]	; (8004e34 <_Z12uart_processv+0x22c>)
 8004e2c:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8004e30:	e732      	b.n	8004c98 <_Z12uart_processv+0x90>
 8004e32:	bf00      	nop
 8004e34:	20000744 	.word	0x20000744
 8004e38:	20001150 	.word	0x20001150
 8004e3c:	200010d0 	.word	0x200010d0
 8004e40:	0800adf8 	.word	0x0800adf8
 8004e44:	0800ae00 	.word	0x0800ae00
 8004e48:	0800ae04 	.word	0x0800ae04
		uint32_t offset = HAL_GetTick();
 8004e4c:	f7fc ffe4 	bl	8001e18 <HAL_GetTick>
 8004e50:	4605      	mov	r5, r0
		while(!tx_cplt)
 8004e52:	4bb2      	ldr	r3, [pc, #712]	; (800511c <_Z12uart_processv+0x514>)
 8004e54:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d15b      	bne.n	8004f14 <_Z12uart_processv+0x30c>
		    if(offset + timeout < HAL_GetTick())
 8004e5c:	f105 040a 	add.w	r4, r5, #10
 8004e60:	f7fc ffda 	bl	8001e18 <HAL_GetTick>
 8004e64:	4284      	cmp	r4, r0
 8004e66:	d2f4      	bcs.n	8004e52 <_Z12uart_processv+0x24a>
		        tx_cplt = true;
 8004e68:	2201      	movs	r2, #1
 8004e6a:	4bac      	ldr	r3, [pc, #688]	; (800511c <_Z12uart_processv+0x514>)
 8004e6c:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
    double payload = 0.0;
 8004e70:	ab06      	add	r3, sp, #24
 8004e72:	2000      	movs	r0, #0
 8004e74:	2100      	movs	r1, #0
 8004e76:	e963 0106 	strd	r0, r1, [r3, #-24]!
    if (sscanf(cmd_buf, "%s %lf", cmd, &payload) < 1)
 8004e7a:	aa03      	add	r2, sp, #12
 8004e7c:	49a8      	ldr	r1, [pc, #672]	; (8005120 <_Z12uart_processv+0x518>)
 8004e7e:	48a9      	ldr	r0, [pc, #676]	; (8005124 <_Z12uart_processv+0x51c>)
 8004e80:	f000 fc70 	bl	8005764 <sscanf>
 8004e84:	2800      	cmp	r0, #0
 8004e86:	dd5f      	ble.n	8004f48 <_Z12uart_processv+0x340>
    if (strcmp(cmd, "SCID") == 0)
 8004e88:	49a7      	ldr	r1, [pc, #668]	; (8005128 <_Z12uart_processv+0x520>)
 8004e8a:	a803      	add	r0, sp, #12
 8004e8c:	f7fb f960 	bl	8000150 <strcmp>
 8004e90:	4604      	mov	r4, r0
 8004e92:	2800      	cmp	r0, #0
 8004e94:	d05b      	beq.n	8004f4e <_Z12uart_processv+0x346>
    else if (strcmp(cmd, "GCID") == 0)
 8004e96:	49a5      	ldr	r1, [pc, #660]	; (800512c <_Z12uart_processv+0x524>)
 8004e98:	a803      	add	r0, sp, #12
 8004e9a:	f7fb f959 	bl	8000150 <strcmp>
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	2800      	cmp	r0, #0
 8004ea2:	f000 8091 	beq.w	8004fc8 <_Z12uart_processv+0x3c0>
    else if (strcmp(cmd, "SVID") == 0)
 8004ea6:	49a2      	ldr	r1, [pc, #648]	; (8005130 <_Z12uart_processv+0x528>)
 8004ea8:	a803      	add	r0, sp, #12
 8004eaa:	f7fb f951 	bl	8000150 <strcmp>
 8004eae:	4604      	mov	r4, r0
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	f000 80be 	beq.w	8005032 <_Z12uart_processv+0x42a>
    else if (strcmp(cmd, "GVID") == 0)
 8004eb6:	499f      	ldr	r1, [pc, #636]	; (8005134 <_Z12uart_processv+0x52c>)
 8004eb8:	a803      	add	r0, sp, #12
 8004eba:	f7fb f949 	bl	8000150 <strcmp>
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	f000 80f2 	beq.w	80050aa <_Z12uart_processv+0x4a2>
    else if (strcmp(cmd, "SSID") == 0)
 8004ec6:	499c      	ldr	r1, [pc, #624]	; (8005138 <_Z12uart_processv+0x530>)
 8004ec8:	a803      	add	r0, sp, #12
 8004eca:	f7fb f941 	bl	8000150 <strcmp>
 8004ece:	4604      	mov	r4, r0
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	f000 8143 	beq.w	800515c <_Z12uart_processv+0x554>
    else if (strcmp(cmd, "SKPR") == 0)
 8004ed6:	4999      	ldr	r1, [pc, #612]	; (800513c <_Z12uart_processv+0x534>)
 8004ed8:	a803      	add	r0, sp, #12
 8004eda:	f7fb f939 	bl	8000150 <strcmp>
 8004ede:	4606      	mov	r6, r0
 8004ee0:	2800      	cmp	r0, #0
 8004ee2:	f040 8180 	bne.w	80051e6 <_Z12uart_processv+0x5de>
        int ret = control.SetKp(payload);
 8004ee6:	e9dd 4500 	ldrd	r4, r5, [sp]
        if (kp < 0)
 8004eea:	2200      	movs	r2, #0
 8004eec:	2300      	movs	r3, #0
 8004eee:	4620      	mov	r0, r4
 8004ef0:	4629      	mov	r1, r5
 8004ef2:	f7fb fd69 	bl	80009c8 <__aeabi_dcmplt>
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	f040 816b 	bne.w	80051d2 <_Z12uart_processv+0x5ca>
        this->Kp = kp;
 8004efc:	4b90      	ldr	r3, [pc, #576]	; (8005140 <_Z12uart_processv+0x538>)
 8004efe:	e9c3 4516 	strd	r4, r5, [r3, #88]	; 0x58
        if (ret != 0)
 8004f02:	2e00      	cmp	r6, #0
 8004f04:	f000 8168 	beq.w	80051d8 <_Z12uart_processv+0x5d0>
            uart_invalid_value("Kp", payload);
 8004f08:	4622      	mov	r2, r4
 8004f0a:	462b      	mov	r3, r5
 8004f0c:	488d      	ldr	r0, [pc, #564]	; (8005144 <_Z12uart_processv+0x53c>)
 8004f0e:	f7ff fdf3 	bl	8004af8 <_Z18uart_invalid_valuePKcd>
 8004f12:	e02c      	b.n	8004f6e <_Z12uart_processv+0x366>
		while(!tx_cplt)
 8004f14:	2300      	movs	r3, #0
		for (int i = 0; i < length; i++)
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	dc05      	bgt.n	8004f26 <_Z12uart_processv+0x31e>
			tx_buf[i] = c[i];
 8004f1a:	4a8b      	ldr	r2, [pc, #556]	; (8005148 <_Z12uart_processv+0x540>)
 8004f1c:	5c99      	ldrb	r1, [r3, r2]
 8004f1e:	4a7f      	ldr	r2, [pc, #508]	; (800511c <_Z12uart_processv+0x514>)
 8004f20:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < length; i++)
 8004f22:	3301      	adds	r3, #1
 8004f24:	e7f7      	b.n	8004f16 <_Z12uart_processv+0x30e>
			tx_cplt = false;
 8004f26:	4b7d      	ldr	r3, [pc, #500]	; (800511c <_Z12uart_processv+0x514>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8004f2e:	2202      	movs	r2, #2
 8004f30:	4619      	mov	r1, r3
 8004f32:	f8d3 0808 	ldr.w	r0, [r3, #2056]	; 0x808
 8004f36:	f7fe f875 	bl	8003024 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	d098      	beq.n	8004e70 <_Z12uart_processv+0x268>
                tx_cplt = true;
 8004f3e:	2201      	movs	r2, #1
 8004f40:	4b76      	ldr	r3, [pc, #472]	; (800511c <_Z12uart_processv+0x514>)
 8004f42:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8004f46:	e793      	b.n	8004e70 <_Z12uart_processv+0x268>
        uart_prompt();
 8004f48:	f7ff fd24 	bl	8004994 <_Z11uart_promptv>
 8004f4c:	e6ac      	b.n	8004ca8 <_Z12uart_processv+0xa0>
        confStruct.can_id_cmd = static_cast<uint16_t>(payload);
 8004f4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f52:	f7fb fd9f 	bl	8000a94 <__aeabi_d2uiz>
 8004f56:	b282      	uxth	r2, r0
 8004f58:	4b7c      	ldr	r3, [pc, #496]	; (800514c <_Z12uart_processv+0x544>)
 8004f5a:	801a      	strh	r2, [r3, #0]
        int ret = sprintf(tx_buf, "Set CAN ID (cmd): 0x%x\r\n", confStruct.can_id_cmd);
 8004f5c:	497c      	ldr	r1, [pc, #496]	; (8005150 <_Z12uart_processv+0x548>)
 8004f5e:	487d      	ldr	r0, [pc, #500]	; (8005154 <_Z12uart_processv+0x54c>)
 8004f60:	f000 fbdc 	bl	800571c <sprintf>
 8004f64:	4605      	mov	r5, r0
		if (length > BUF_SIZE || length < 1)
 8004f66:	1e43      	subs	r3, r0, #1
 8004f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f6c:	d302      	bcc.n	8004f74 <_Z12uart_processv+0x36c>
    uart_prompt();
 8004f6e:	f7ff fd11 	bl	8004994 <_Z11uart_promptv>
 8004f72:	e699      	b.n	8004ca8 <_Z12uart_processv+0xa0>
		uint32_t offset = HAL_GetTick();
 8004f74:	f7fc ff50 	bl	8001e18 <HAL_GetTick>
 8004f78:	4607      	mov	r7, r0
		while(!tx_cplt)
 8004f7a:	4b68      	ldr	r3, [pc, #416]	; (800511c <_Z12uart_processv+0x514>)
 8004f7c:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8004f80:	b97b      	cbnz	r3, 8004fa2 <_Z12uart_processv+0x39a>
		    if(offset + timeout < HAL_GetTick())
 8004f82:	f107 060a 	add.w	r6, r7, #10
 8004f86:	f7fc ff47 	bl	8001e18 <HAL_GetTick>
 8004f8a:	4286      	cmp	r6, r0
 8004f8c:	d2f5      	bcs.n	8004f7a <_Z12uart_processv+0x372>
		        tx_cplt = true;
 8004f8e:	2201      	movs	r2, #1
 8004f90:	4b62      	ldr	r3, [pc, #392]	; (800511c <_Z12uart_processv+0x514>)
 8004f92:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8004f96:	e7ea      	b.n	8004f6e <_Z12uart_processv+0x366>
			tx_buf[i] = c[i];
 8004f98:	4b6e      	ldr	r3, [pc, #440]	; (8005154 <_Z12uart_processv+0x54c>)
 8004f9a:	5d1a      	ldrb	r2, [r3, r4]
 8004f9c:	4b5f      	ldr	r3, [pc, #380]	; (800511c <_Z12uart_processv+0x514>)
 8004f9e:	551a      	strb	r2, [r3, r4]
		for (int i = 0; i < length; i++)
 8004fa0:	3401      	adds	r4, #1
 8004fa2:	42a5      	cmp	r5, r4
 8004fa4:	dcf8      	bgt.n	8004f98 <_Z12uart_processv+0x390>
			tx_cplt = false;
 8004fa6:	4b5d      	ldr	r3, [pc, #372]	; (800511c <_Z12uart_processv+0x514>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8004fae:	b2aa      	uxth	r2, r5
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	f8d3 0808 	ldr.w	r0, [r3, #2056]	; 0x808
 8004fb6:	f7fe f835 	bl	8003024 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	d0d7      	beq.n	8004f6e <_Z12uart_processv+0x366>
                tx_cplt = true;
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	4b56      	ldr	r3, [pc, #344]	; (800511c <_Z12uart_processv+0x514>)
 8004fc2:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8004fc6:	e7d2      	b.n	8004f6e <_Z12uart_processv+0x366>
        int ret = sprintf(tx_buf, "Set CAN ID (cmd): 0x%x\r\n", confStruct.can_id_cmd);
 8004fc8:	4b60      	ldr	r3, [pc, #384]	; (800514c <_Z12uart_processv+0x544>)
 8004fca:	881a      	ldrh	r2, [r3, #0]
 8004fcc:	4960      	ldr	r1, [pc, #384]	; (8005150 <_Z12uart_processv+0x548>)
 8004fce:	4861      	ldr	r0, [pc, #388]	; (8005154 <_Z12uart_processv+0x54c>)
 8004fd0:	f000 fba4 	bl	800571c <sprintf>
 8004fd4:	4605      	mov	r5, r0
		if (length > BUF_SIZE || length < 1)
 8004fd6:	1e43      	subs	r3, r0, #1
 8004fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fdc:	d2c7      	bcs.n	8004f6e <_Z12uart_processv+0x366>
		uint32_t offset = HAL_GetTick();
 8004fde:	f7fc ff1b 	bl	8001e18 <HAL_GetTick>
 8004fe2:	4607      	mov	r7, r0
		while(!tx_cplt)
 8004fe4:	4b4d      	ldr	r3, [pc, #308]	; (800511c <_Z12uart_processv+0x514>)
 8004fe6:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8004fea:	b97b      	cbnz	r3, 800500c <_Z12uart_processv+0x404>
		    if(offset + timeout < HAL_GetTick())
 8004fec:	f107 060a 	add.w	r6, r7, #10
 8004ff0:	f7fc ff12 	bl	8001e18 <HAL_GetTick>
 8004ff4:	4286      	cmp	r6, r0
 8004ff6:	d2f5      	bcs.n	8004fe4 <_Z12uart_processv+0x3dc>
		        tx_cplt = true;
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	4b48      	ldr	r3, [pc, #288]	; (800511c <_Z12uart_processv+0x514>)
 8004ffc:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8005000:	e7b5      	b.n	8004f6e <_Z12uart_processv+0x366>
			tx_buf[i] = c[i];
 8005002:	4b54      	ldr	r3, [pc, #336]	; (8005154 <_Z12uart_processv+0x54c>)
 8005004:	5d1a      	ldrb	r2, [r3, r4]
 8005006:	4b45      	ldr	r3, [pc, #276]	; (800511c <_Z12uart_processv+0x514>)
 8005008:	551a      	strb	r2, [r3, r4]
		for (int i = 0; i < length; i++)
 800500a:	3401      	adds	r4, #1
 800500c:	42a5      	cmp	r5, r4
 800500e:	dcf8      	bgt.n	8005002 <_Z12uart_processv+0x3fa>
			tx_cplt = false;
 8005010:	4b42      	ldr	r3, [pc, #264]	; (800511c <_Z12uart_processv+0x514>)
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8005018:	b2aa      	uxth	r2, r5
 800501a:	4619      	mov	r1, r3
 800501c:	f8d3 0808 	ldr.w	r0, [r3, #2056]	; 0x808
 8005020:	f7fe f800 	bl	8003024 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 8005024:	2800      	cmp	r0, #0
 8005026:	d0a2      	beq.n	8004f6e <_Z12uart_processv+0x366>
                tx_cplt = true;
 8005028:	2201      	movs	r2, #1
 800502a:	4b3c      	ldr	r3, [pc, #240]	; (800511c <_Z12uart_processv+0x514>)
 800502c:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8005030:	e79d      	b.n	8004f6e <_Z12uart_processv+0x366>
        confStruct.can_id_vel = static_cast<uint16_t>(payload);
 8005032:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005036:	f7fb fd2d 	bl	8000a94 <__aeabi_d2uiz>
 800503a:	b282      	uxth	r2, r0
 800503c:	4b43      	ldr	r3, [pc, #268]	; (800514c <_Z12uart_processv+0x544>)
 800503e:	805a      	strh	r2, [r3, #2]
        int ret = sprintf(tx_buf, "Set CAN ID (vel): 0x%x\r\n", confStruct.can_id_vel);
 8005040:	4945      	ldr	r1, [pc, #276]	; (8005158 <_Z12uart_processv+0x550>)
 8005042:	4844      	ldr	r0, [pc, #272]	; (8005154 <_Z12uart_processv+0x54c>)
 8005044:	f000 fb6a 	bl	800571c <sprintf>
 8005048:	4605      	mov	r5, r0
		if (length > BUF_SIZE || length < 1)
 800504a:	1e43      	subs	r3, r0, #1
 800504c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005050:	d28d      	bcs.n	8004f6e <_Z12uart_processv+0x366>
		uint32_t offset = HAL_GetTick();
 8005052:	f7fc fee1 	bl	8001e18 <HAL_GetTick>
 8005056:	4607      	mov	r7, r0
		while(!tx_cplt)
 8005058:	4b30      	ldr	r3, [pc, #192]	; (800511c <_Z12uart_processv+0x514>)
 800505a:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 800505e:	b953      	cbnz	r3, 8005076 <_Z12uart_processv+0x46e>
		    if(offset + timeout < HAL_GetTick())
 8005060:	f107 060a 	add.w	r6, r7, #10
 8005064:	f7fc fed8 	bl	8001e18 <HAL_GetTick>
 8005068:	4286      	cmp	r6, r0
 800506a:	d2f5      	bcs.n	8005058 <_Z12uart_processv+0x450>
		        tx_cplt = true;
 800506c:	2201      	movs	r2, #1
 800506e:	4b2b      	ldr	r3, [pc, #172]	; (800511c <_Z12uart_processv+0x514>)
 8005070:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8005074:	e77b      	b.n	8004f6e <_Z12uart_processv+0x366>
		for (int i = 0; i < length; i++)
 8005076:	42a5      	cmp	r5, r4
 8005078:	dd05      	ble.n	8005086 <_Z12uart_processv+0x47e>
			tx_buf[i] = c[i];
 800507a:	4b36      	ldr	r3, [pc, #216]	; (8005154 <_Z12uart_processv+0x54c>)
 800507c:	5d1a      	ldrb	r2, [r3, r4]
 800507e:	4b27      	ldr	r3, [pc, #156]	; (800511c <_Z12uart_processv+0x514>)
 8005080:	551a      	strb	r2, [r3, r4]
		for (int i = 0; i < length; i++)
 8005082:	3401      	adds	r4, #1
 8005084:	e7f7      	b.n	8005076 <_Z12uart_processv+0x46e>
			tx_cplt = false;
 8005086:	4b25      	ldr	r3, [pc, #148]	; (800511c <_Z12uart_processv+0x514>)
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 800508e:	b2aa      	uxth	r2, r5
 8005090:	4619      	mov	r1, r3
 8005092:	f8d3 0808 	ldr.w	r0, [r3, #2056]	; 0x808
 8005096:	f7fd ffc5 	bl	8003024 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 800509a:	2800      	cmp	r0, #0
 800509c:	f43f af67 	beq.w	8004f6e <_Z12uart_processv+0x366>
                tx_cplt = true;
 80050a0:	2201      	movs	r2, #1
 80050a2:	4b1e      	ldr	r3, [pc, #120]	; (800511c <_Z12uart_processv+0x514>)
 80050a4:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 80050a8:	e761      	b.n	8004f6e <_Z12uart_processv+0x366>
        int ret = sprintf(tx_buf, "Set CAN ID (vel): 0x%x\r\n", confStruct.can_id_vel);
 80050aa:	4b28      	ldr	r3, [pc, #160]	; (800514c <_Z12uart_processv+0x544>)
 80050ac:	885a      	ldrh	r2, [r3, #2]
 80050ae:	492a      	ldr	r1, [pc, #168]	; (8005158 <_Z12uart_processv+0x550>)
 80050b0:	4828      	ldr	r0, [pc, #160]	; (8005154 <_Z12uart_processv+0x54c>)
 80050b2:	f000 fb33 	bl	800571c <sprintf>
 80050b6:	4605      	mov	r5, r0
		if (length > BUF_SIZE || length < 1)
 80050b8:	1e43      	subs	r3, r0, #1
 80050ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050be:	f4bf af56 	bcs.w	8004f6e <_Z12uart_processv+0x366>
		uint32_t offset = HAL_GetTick();
 80050c2:	f7fc fea9 	bl	8001e18 <HAL_GetTick>
 80050c6:	4607      	mov	r7, r0
		while(!tx_cplt)
 80050c8:	4b14      	ldr	r3, [pc, #80]	; (800511c <_Z12uart_processv+0x514>)
 80050ca:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 80050ce:	b953      	cbnz	r3, 80050e6 <_Z12uart_processv+0x4de>
		    if(offset + timeout < HAL_GetTick())
 80050d0:	f107 060a 	add.w	r6, r7, #10
 80050d4:	f7fc fea0 	bl	8001e18 <HAL_GetTick>
 80050d8:	4286      	cmp	r6, r0
 80050da:	d2f5      	bcs.n	80050c8 <_Z12uart_processv+0x4c0>
		        tx_cplt = true;
 80050dc:	2201      	movs	r2, #1
 80050de:	4b0f      	ldr	r3, [pc, #60]	; (800511c <_Z12uart_processv+0x514>)
 80050e0:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 80050e4:	e743      	b.n	8004f6e <_Z12uart_processv+0x366>
		for (int i = 0; i < length; i++)
 80050e6:	42a5      	cmp	r5, r4
 80050e8:	dd05      	ble.n	80050f6 <_Z12uart_processv+0x4ee>
			tx_buf[i] = c[i];
 80050ea:	4b1a      	ldr	r3, [pc, #104]	; (8005154 <_Z12uart_processv+0x54c>)
 80050ec:	5d1a      	ldrb	r2, [r3, r4]
 80050ee:	4b0b      	ldr	r3, [pc, #44]	; (800511c <_Z12uart_processv+0x514>)
 80050f0:	551a      	strb	r2, [r3, r4]
		for (int i = 0; i < length; i++)
 80050f2:	3401      	adds	r4, #1
 80050f4:	e7f7      	b.n	80050e6 <_Z12uart_processv+0x4de>
			tx_cplt = false;
 80050f6:	4b09      	ldr	r3, [pc, #36]	; (800511c <_Z12uart_processv+0x514>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 80050fe:	b2aa      	uxth	r2, r5
 8005100:	4619      	mov	r1, r3
 8005102:	f8d3 0808 	ldr.w	r0, [r3, #2056]	; 0x808
 8005106:	f7fd ff8d 	bl	8003024 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 800510a:	2800      	cmp	r0, #0
 800510c:	f43f af2f 	beq.w	8004f6e <_Z12uart_processv+0x366>
                tx_cplt = true;
 8005110:	2201      	movs	r2, #1
 8005112:	4b02      	ldr	r3, [pc, #8]	; (800511c <_Z12uart_processv+0x514>)
 8005114:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8005118:	e729      	b.n	8004f6e <_Z12uart_processv+0x366>
 800511a:	bf00      	nop
 800511c:	20000744 	.word	0x20000744
 8005120:	0800ae38 	.word	0x0800ae38
 8005124:	200010d0 	.word	0x200010d0
 8005128:	0800ae40 	.word	0x0800ae40
 800512c:	0800ae64 	.word	0x0800ae64
 8005130:	0800ae6c 	.word	0x0800ae6c
 8005134:	0800ae90 	.word	0x0800ae90
 8005138:	0800ae98 	.word	0x0800ae98
 800513c:	0800aeb8 	.word	0x0800aeb8
 8005140:	20000008 	.word	0x20000008
 8005144:	0800aec0 	.word	0x0800aec0
 8005148:	0800b054 	.word	0x0800b054
 800514c:	20000f80 	.word	0x20000f80
 8005150:	0800ae48 	.word	0x0800ae48
 8005154:	20001154 	.word	0x20001154
 8005158:	0800ae74 	.word	0x0800ae74
        uint16_t can_stat_id = static_cast<uint16_t>(payload);
 800515c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005160:	f7fb fc98 	bl	8000a94 <__aeabi_d2uiz>
        int ret = sprintf(tx_buf, "Set CAN ID (stat): %d\r\n", can_stat_id);
 8005164:	b282      	uxth	r2, r0
 8005166:	49a0      	ldr	r1, [pc, #640]	; (80053e8 <_Z12uart_processv+0x7e0>)
 8005168:	48a0      	ldr	r0, [pc, #640]	; (80053ec <_Z12uart_processv+0x7e4>)
 800516a:	f000 fad7 	bl	800571c <sprintf>
 800516e:	4605      	mov	r5, r0
		if (length > BUF_SIZE || length < 1)
 8005170:	1e43      	subs	r3, r0, #1
 8005172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005176:	f4bf aefa 	bcs.w	8004f6e <_Z12uart_processv+0x366>
		uint32_t offset = HAL_GetTick();
 800517a:	f7fc fe4d 	bl	8001e18 <HAL_GetTick>
 800517e:	4607      	mov	r7, r0
		while(!tx_cplt)
 8005180:	4b9b      	ldr	r3, [pc, #620]	; (80053f0 <_Z12uart_processv+0x7e8>)
 8005182:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8005186:	b953      	cbnz	r3, 800519e <_Z12uart_processv+0x596>
		    if(offset + timeout < HAL_GetTick())
 8005188:	f107 060a 	add.w	r6, r7, #10
 800518c:	f7fc fe44 	bl	8001e18 <HAL_GetTick>
 8005190:	4286      	cmp	r6, r0
 8005192:	d2f5      	bcs.n	8005180 <_Z12uart_processv+0x578>
		        tx_cplt = true;
 8005194:	2201      	movs	r2, #1
 8005196:	4b96      	ldr	r3, [pc, #600]	; (80053f0 <_Z12uart_processv+0x7e8>)
 8005198:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 800519c:	e6e7      	b.n	8004f6e <_Z12uart_processv+0x366>
		for (int i = 0; i < length; i++)
 800519e:	42a5      	cmp	r5, r4
 80051a0:	dd05      	ble.n	80051ae <_Z12uart_processv+0x5a6>
			tx_buf[i] = c[i];
 80051a2:	4b92      	ldr	r3, [pc, #584]	; (80053ec <_Z12uart_processv+0x7e4>)
 80051a4:	5d1a      	ldrb	r2, [r3, r4]
 80051a6:	4b92      	ldr	r3, [pc, #584]	; (80053f0 <_Z12uart_processv+0x7e8>)
 80051a8:	551a      	strb	r2, [r3, r4]
		for (int i = 0; i < length; i++)
 80051aa:	3401      	adds	r4, #1
 80051ac:	e7f7      	b.n	800519e <_Z12uart_processv+0x596>
			tx_cplt = false;
 80051ae:	4b90      	ldr	r3, [pc, #576]	; (80053f0 <_Z12uart_processv+0x7e8>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
			auto ret = HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 80051b6:	b2aa      	uxth	r2, r5
 80051b8:	4619      	mov	r1, r3
 80051ba:	f8d3 0808 	ldr.w	r0, [r3, #2056]	; 0x808
 80051be:	f7fd ff31 	bl	8003024 <HAL_UART_Transmit_DMA>
			if(ret != HAL_OK)
 80051c2:	2800      	cmp	r0, #0
 80051c4:	f43f aed3 	beq.w	8004f6e <_Z12uart_processv+0x366>
                tx_cplt = true;
 80051c8:	2201      	movs	r2, #1
 80051ca:	4b89      	ldr	r3, [pc, #548]	; (80053f0 <_Z12uart_processv+0x7e8>)
 80051cc:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 80051d0:	e6cd      	b.n	8004f6e <_Z12uart_processv+0x366>
            return -1;
 80051d2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80051d6:	e694      	b.n	8004f02 <_Z12uart_processv+0x2fa>
            uart_valid_value_set("Kp", "N.m/(rad/s)", payload);
 80051d8:	4622      	mov	r2, r4
 80051da:	462b      	mov	r3, r5
 80051dc:	4985      	ldr	r1, [pc, #532]	; (80053f4 <_Z12uart_processv+0x7ec>)
 80051de:	4886      	ldr	r0, [pc, #536]	; (80053f8 <_Z12uart_processv+0x7f0>)
 80051e0:	f7ff fccc 	bl	8004b7c <_Z20uart_valid_value_setPKcS0_d>
 80051e4:	e6c3      	b.n	8004f6e <_Z12uart_processv+0x366>
    else if (strcmp(cmd, "GKPR") == 0)
 80051e6:	4985      	ldr	r1, [pc, #532]	; (80053fc <_Z12uart_processv+0x7f4>)
 80051e8:	a803      	add	r0, sp, #12
 80051ea:	f7fa ffb1 	bl	8000150 <strcmp>
 80051ee:	b1f0      	cbz	r0, 800522e <_Z12uart_processv+0x626>
    else if (strcmp(cmd, "SKIT") == 0)
 80051f0:	4983      	ldr	r1, [pc, #524]	; (8005400 <_Z12uart_processv+0x7f8>)
 80051f2:	a803      	add	r0, sp, #12
 80051f4:	f7fa ffac 	bl	8000150 <strcmp>
 80051f8:	4606      	mov	r6, r0
 80051fa:	bb50      	cbnz	r0, 8005252 <_Z12uart_processv+0x64a>
        int ret = control.SetKi(payload);
 80051fc:	e9dd 4500 	ldrd	r4, r5, [sp]
        if (ki < 0)
 8005200:	2200      	movs	r2, #0
 8005202:	2300      	movs	r3, #0
 8005204:	4620      	mov	r0, r4
 8005206:	4629      	mov	r1, r5
 8005208:	f7fb fbde 	bl	80009c8 <__aeabi_dcmplt>
 800520c:	b9b8      	cbnz	r0, 800523e <_Z12uart_processv+0x636>
        this->KiTc = ki * Tc;
 800520e:	4f7d      	ldr	r7, [pc, #500]	; (8005404 <_Z12uart_processv+0x7fc>)
 8005210:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005214:	4620      	mov	r0, r4
 8005216:	4629      	mov	r1, r5
 8005218:	f7fb f964 	bl	80004e4 <__aeabi_dmul>
 800521c:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
        if (ret != 0)
 8005220:	b186      	cbz	r6, 8005244 <_Z12uart_processv+0x63c>
            uart_invalid_value("Ki", payload);
 8005222:	4622      	mov	r2, r4
 8005224:	462b      	mov	r3, r5
 8005226:	4878      	ldr	r0, [pc, #480]	; (8005408 <_Z12uart_processv+0x800>)
 8005228:	f7ff fc66 	bl	8004af8 <_Z18uart_invalid_valuePKcd>
 800522c:	e69f      	b.n	8004f6e <_Z12uart_processv+0x366>
        uart_dump_value("Kp", "N.m/(rad/s)", control.GetKp());
 800522e:	4b75      	ldr	r3, [pc, #468]	; (8005404 <_Z12uart_processv+0x7fc>)
 8005230:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8005234:	496f      	ldr	r1, [pc, #444]	; (80053f4 <_Z12uart_processv+0x7ec>)
 8005236:	4870      	ldr	r0, [pc, #448]	; (80053f8 <_Z12uart_processv+0x7f0>)
 8005238:	f7ff fbec 	bl	8004a14 <_Z15uart_dump_valuePKcS0_d>
 800523c:	e697      	b.n	8004f6e <_Z12uart_processv+0x366>
            return -1;
 800523e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8005242:	e7ed      	b.n	8005220 <_Z12uart_processv+0x618>
            uart_valid_value_set("Ki", "N.m/rad", payload);
 8005244:	4622      	mov	r2, r4
 8005246:	462b      	mov	r3, r5
 8005248:	4970      	ldr	r1, [pc, #448]	; (800540c <_Z12uart_processv+0x804>)
 800524a:	486f      	ldr	r0, [pc, #444]	; (8005408 <_Z12uart_processv+0x800>)
 800524c:	f7ff fc96 	bl	8004b7c <_Z20uart_valid_value_setPKcS0_d>
 8005250:	e68d      	b.n	8004f6e <_Z12uart_processv+0x366>
    else if (strcmp(cmd, "GKIT") == 0)
 8005252:	496f      	ldr	r1, [pc, #444]	; (8005410 <_Z12uart_processv+0x808>)
 8005254:	a803      	add	r0, sp, #12
 8005256:	f7fa ff7b 	bl	8000150 <strcmp>
 800525a:	b1c0      	cbz	r0, 800528e <_Z12uart_processv+0x686>
    else if (strcmp(cmd, "SKEM") == 0)
 800525c:	496d      	ldr	r1, [pc, #436]	; (8005414 <_Z12uart_processv+0x80c>)
 800525e:	a803      	add	r0, sp, #12
 8005260:	f7fa ff76 	bl	8000150 <strcmp>
 8005264:	4606      	mov	r6, r0
 8005266:	bb50      	cbnz	r0, 80052be <_Z12uart_processv+0x6b6>
        int ret = control.SetKe(payload);
 8005268:	e9dd 4500 	ldrd	r4, r5, [sp]
        if (ke < 0)
 800526c:	2200      	movs	r2, #0
 800526e:	2300      	movs	r3, #0
 8005270:	4620      	mov	r0, r4
 8005272:	4629      	mov	r1, r5
 8005274:	f7fb fba8 	bl	80009c8 <__aeabi_dcmplt>
 8005278:	b9b8      	cbnz	r0, 80052aa <_Z12uart_processv+0x6a2>
        this->Ke = ke;
 800527a:	4b62      	ldr	r3, [pc, #392]	; (8005404 <_Z12uart_processv+0x7fc>)
 800527c:	e9c3 451e 	strd	r4, r5, [r3, #120]	; 0x78
        if (ret != 0)
 8005280:	b1b6      	cbz	r6, 80052b0 <_Z12uart_processv+0x6a8>
            uart_invalid_value("Ke", payload);
 8005282:	4622      	mov	r2, r4
 8005284:	462b      	mov	r3, r5
 8005286:	4864      	ldr	r0, [pc, #400]	; (8005418 <_Z12uart_processv+0x810>)
 8005288:	f7ff fc36 	bl	8004af8 <_Z18uart_invalid_valuePKcd>
 800528c:	e66f      	b.n	8004f6e <_Z12uart_processv+0x366>
        return this->KiTc / Tc;
 800528e:	495d      	ldr	r1, [pc, #372]	; (8005404 <_Z12uart_processv+0x7fc>)
 8005290:	e9d1 231a 	ldrd	r2, r3, [r1, #104]	; 0x68
 8005294:	e9d1 0118 	ldrd	r0, r1, [r1, #96]	; 0x60
 8005298:	f7fb fa4e 	bl	8000738 <__aeabi_ddiv>
        uart_dump_value("Ki", "N.m/rad", control.GetKi());
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	495a      	ldr	r1, [pc, #360]	; (800540c <_Z12uart_processv+0x804>)
 80052a2:	4859      	ldr	r0, [pc, #356]	; (8005408 <_Z12uart_processv+0x800>)
 80052a4:	f7ff fbb6 	bl	8004a14 <_Z15uart_dump_valuePKcS0_d>
 80052a8:	e661      	b.n	8004f6e <_Z12uart_processv+0x366>
            return -1;
 80052aa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80052ae:	e7e7      	b.n	8005280 <_Z12uart_processv+0x678>
            uart_valid_value_set("Ke", "V/(rad/s)", payload);
 80052b0:	4622      	mov	r2, r4
 80052b2:	462b      	mov	r3, r5
 80052b4:	4959      	ldr	r1, [pc, #356]	; (800541c <_Z12uart_processv+0x814>)
 80052b6:	4858      	ldr	r0, [pc, #352]	; (8005418 <_Z12uart_processv+0x810>)
 80052b8:	f7ff fc60 	bl	8004b7c <_Z20uart_valid_value_setPKcS0_d>
 80052bc:	e657      	b.n	8004f6e <_Z12uart_processv+0x366>
    else if (strcmp(cmd, "GKEM") == 0)
 80052be:	4958      	ldr	r1, [pc, #352]	; (8005420 <_Z12uart_processv+0x818>)
 80052c0:	a803      	add	r0, sp, #12
 80052c2:	f7fa ff45 	bl	8000150 <strcmp>
 80052c6:	b938      	cbnz	r0, 80052d8 <_Z12uart_processv+0x6d0>
        uart_dump_value("Ke", "V/(rad/s)", control.GetKe());
 80052c8:	4b4e      	ldr	r3, [pc, #312]	; (8005404 <_Z12uart_processv+0x7fc>)
 80052ca:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80052ce:	4953      	ldr	r1, [pc, #332]	; (800541c <_Z12uart_processv+0x814>)
 80052d0:	4851      	ldr	r0, [pc, #324]	; (8005418 <_Z12uart_processv+0x810>)
 80052d2:	f7ff fb9f 	bl	8004a14 <_Z15uart_dump_valuePKcS0_d>
 80052d6:	e64a      	b.n	8004f6e <_Z12uart_processv+0x366>
    else if (strcmp(cmd, "SKGT") == 0)
 80052d8:	4952      	ldr	r1, [pc, #328]	; (8005424 <_Z12uart_processv+0x81c>)
 80052da:	a803      	add	r0, sp, #12
 80052dc:	f7fa ff38 	bl	8000150 <strcmp>
 80052e0:	4606      	mov	r6, r0
 80052e2:	b9e0      	cbnz	r0, 800531e <_Z12uart_processv+0x716>
        int ret = control.SetKg(payload);
 80052e4:	e9dd 4500 	ldrd	r4, r5, [sp]
        if (kg < 0)
 80052e8:	2200      	movs	r2, #0
 80052ea:	2300      	movs	r3, #0
 80052ec:	4620      	mov	r0, r4
 80052ee:	4629      	mov	r1, r5
 80052f0:	f7fb fb6a 	bl	80009c8 <__aeabi_dcmplt>
 80052f4:	b948      	cbnz	r0, 800530a <_Z12uart_processv+0x702>
        this->Kg = kg;
 80052f6:	4b43      	ldr	r3, [pc, #268]	; (8005404 <_Z12uart_processv+0x7fc>)
 80052f8:	e9c3 4520 	strd	r4, r5, [r3, #128]	; 0x80
        if (ret != 0)
 80052fc:	b146      	cbz	r6, 8005310 <_Z12uart_processv+0x708>
            uart_invalid_value("Kg", payload);
 80052fe:	4622      	mov	r2, r4
 8005300:	462b      	mov	r3, r5
 8005302:	4849      	ldr	r0, [pc, #292]	; (8005428 <_Z12uart_processv+0x820>)
 8005304:	f7ff fbf8 	bl	8004af8 <_Z18uart_invalid_valuePKcd>
 8005308:	e631      	b.n	8004f6e <_Z12uart_processv+0x366>
            return -1;
 800530a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800530e:	e7f5      	b.n	80052fc <_Z12uart_processv+0x6f4>
            uart_valid_value_set("Kg", "V/(N.m)", payload);
 8005310:	4622      	mov	r2, r4
 8005312:	462b      	mov	r3, r5
 8005314:	4945      	ldr	r1, [pc, #276]	; (800542c <_Z12uart_processv+0x824>)
 8005316:	4844      	ldr	r0, [pc, #272]	; (8005428 <_Z12uart_processv+0x820>)
 8005318:	f7ff fc30 	bl	8004b7c <_Z20uart_valid_value_setPKcS0_d>
 800531c:	e627      	b.n	8004f6e <_Z12uart_processv+0x366>
    else if (strcmp(cmd, "GKGT") == 0)
 800531e:	4944      	ldr	r1, [pc, #272]	; (8005430 <_Z12uart_processv+0x828>)
 8005320:	a803      	add	r0, sp, #12
 8005322:	f7fa ff15 	bl	8000150 <strcmp>
 8005326:	b1e8      	cbz	r0, 8005364 <_Z12uart_processv+0x75c>
    else if (strcmp(cmd, "SPPR") == 0)
 8005328:	4942      	ldr	r1, [pc, #264]	; (8005434 <_Z12uart_processv+0x82c>)
 800532a:	a803      	add	r0, sp, #12
 800532c:	f7fa ff10 	bl	8000150 <strcmp>
 8005330:	bb00      	cbnz	r0, 8005374 <_Z12uart_processv+0x76c>
        int ret = control.SetPPR(payload);
 8005332:	e9dd 4500 	ldrd	r4, r5, [sp]
        this->Kh = 2 * M_PI / (ppr * Tc);
 8005336:	4e33      	ldr	r6, [pc, #204]	; (8005404 <_Z12uart_processv+0x7fc>)
 8005338:	e9d6 231a 	ldrd	r2, r3, [r6, #104]	; 0x68
 800533c:	4620      	mov	r0, r4
 800533e:	4629      	mov	r1, r5
 8005340:	f7fb f8d0 	bl	80004e4 <__aeabi_dmul>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	a125      	add	r1, pc, #148	; (adr r1, 80053e0 <_Z12uart_processv+0x7d8>)
 800534a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800534e:	f7fb f9f3 	bl	8000738 <__aeabi_ddiv>
 8005352:	e9c6 011c 	strd	r0, r1, [r6, #112]	; 0x70
            uart_valid_value_set("PPR", "pulse/rev.", payload);
 8005356:	4622      	mov	r2, r4
 8005358:	462b      	mov	r3, r5
 800535a:	4937      	ldr	r1, [pc, #220]	; (8005438 <_Z12uart_processv+0x830>)
 800535c:	4837      	ldr	r0, [pc, #220]	; (800543c <_Z12uart_processv+0x834>)
 800535e:	f7ff fc0d 	bl	8004b7c <_Z20uart_valid_value_setPKcS0_d>
 8005362:	e604      	b.n	8004f6e <_Z12uart_processv+0x366>
        uart_dump_value("Kg", "V/(N.m)", control.GetKg());
 8005364:	4b27      	ldr	r3, [pc, #156]	; (8005404 <_Z12uart_processv+0x7fc>)
 8005366:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800536a:	4930      	ldr	r1, [pc, #192]	; (800542c <_Z12uart_processv+0x824>)
 800536c:	482e      	ldr	r0, [pc, #184]	; (8005428 <_Z12uart_processv+0x820>)
 800536e:	f7ff fb51 	bl	8004a14 <_Z15uart_dump_valuePKcS0_d>
 8005372:	e5fc      	b.n	8004f6e <_Z12uart_processv+0x366>
    else if (strcmp(cmd, "GPPR") == 0)
 8005374:	4932      	ldr	r1, [pc, #200]	; (8005440 <_Z12uart_processv+0x838>)
 8005376:	a803      	add	r0, sp, #12
 8005378:	f7fa feea 	bl	8000150 <strcmp>
 800537c:	b9a0      	cbnz	r0, 80053a8 <_Z12uart_processv+0x7a0>
        return 2 * M_PI / (this->Kh * Tc);
 800537e:	4921      	ldr	r1, [pc, #132]	; (8005404 <_Z12uart_processv+0x7fc>)
 8005380:	e9d1 231a 	ldrd	r2, r3, [r1, #104]	; 0x68
 8005384:	e9d1 011c 	ldrd	r0, r1, [r1, #112]	; 0x70
 8005388:	f7fb f8ac 	bl	80004e4 <__aeabi_dmul>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	a113      	add	r1, pc, #76	; (adr r1, 80053e0 <_Z12uart_processv+0x7d8>)
 8005392:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005396:	f7fb f9cf 	bl	8000738 <__aeabi_ddiv>
        uart_dump_value("PPR", "pulse/rev.", control.GetPPR());
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	4926      	ldr	r1, [pc, #152]	; (8005438 <_Z12uart_processv+0x830>)
 80053a0:	4826      	ldr	r0, [pc, #152]	; (800543c <_Z12uart_processv+0x834>)
 80053a2:	f7ff fb37 	bl	8004a14 <_Z15uart_dump_valuePKcS0_d>
 80053a6:	e5e2      	b.n	8004f6e <_Z12uart_processv+0x366>
    else if (strcmp(cmd, "SKRF") == 0)
 80053a8:	4926      	ldr	r1, [pc, #152]	; (8005444 <_Z12uart_processv+0x83c>)
 80053aa:	a803      	add	r0, sp, #12
 80053ac:	f7fa fed0 	bl	8000150 <strcmp>
 80053b0:	4606      	mov	r6, r0
 80053b2:	2800      	cmp	r0, #0
 80053b4:	d154      	bne.n	8005460 <_Z12uart_processv+0x858>
        int ret = control.SetKr(payload);
 80053b6:	e9dd 4500 	ldrd	r4, r5, [sp]
        if (kr < 0)
 80053ba:	2200      	movs	r2, #0
 80053bc:	2300      	movs	r3, #0
 80053be:	4620      	mov	r0, r4
 80053c0:	4629      	mov	r1, r5
 80053c2:	f7fb fb01 	bl	80009c8 <__aeabi_dcmplt>
 80053c6:	2800      	cmp	r0, #0
 80053c8:	d140      	bne.n	800544c <_Z12uart_processv+0x844>
        this->Kr = kr;
 80053ca:	4b0e      	ldr	r3, [pc, #56]	; (8005404 <_Z12uart_processv+0x7fc>)
 80053cc:	e9c3 4514 	strd	r4, r5, [r3, #80]	; 0x50
        if (ret != 0)
 80053d0:	2e00      	cmp	r6, #0
 80053d2:	d03e      	beq.n	8005452 <_Z12uart_processv+0x84a>
            uart_invalid_value("Kr", payload);
 80053d4:	4622      	mov	r2, r4
 80053d6:	462b      	mov	r3, r5
 80053d8:	481b      	ldr	r0, [pc, #108]	; (8005448 <_Z12uart_processv+0x840>)
 80053da:	f7ff fb8d 	bl	8004af8 <_Z18uart_invalid_valuePKcd>
 80053de:	e5c6      	b.n	8004f6e <_Z12uart_processv+0x366>
 80053e0:	54442d18 	.word	0x54442d18
 80053e4:	401921fb 	.word	0x401921fb
 80053e8:	0800aea0 	.word	0x0800aea0
 80053ec:	20001154 	.word	0x20001154
 80053f0:	20000744 	.word	0x20000744
 80053f4:	0800aec4 	.word	0x0800aec4
 80053f8:	0800aec0 	.word	0x0800aec0
 80053fc:	0800aed0 	.word	0x0800aed0
 8005400:	0800aed8 	.word	0x0800aed8
 8005404:	20000008 	.word	0x20000008
 8005408:	0800aee0 	.word	0x0800aee0
 800540c:	0800aee4 	.word	0x0800aee4
 8005410:	0800aeec 	.word	0x0800aeec
 8005414:	0800aef4 	.word	0x0800aef4
 8005418:	0800aefc 	.word	0x0800aefc
 800541c:	0800af00 	.word	0x0800af00
 8005420:	0800af0c 	.word	0x0800af0c
 8005424:	0800af14 	.word	0x0800af14
 8005428:	0800af1c 	.word	0x0800af1c
 800542c:	0800af20 	.word	0x0800af20
 8005430:	0800af28 	.word	0x0800af28
 8005434:	0800af30 	.word	0x0800af30
 8005438:	0800af38 	.word	0x0800af38
 800543c:	0800af44 	.word	0x0800af44
 8005440:	0800af48 	.word	0x0800af48
 8005444:	0800af50 	.word	0x0800af50
 8005448:	0800af58 	.word	0x0800af58
            return -1;
 800544c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8005450:	e7be      	b.n	80053d0 <_Z12uart_processv+0x7c8>
            uart_valid_value_set("Kr", "(rad/s)/cmd", payload);
 8005452:	4622      	mov	r2, r4
 8005454:	462b      	mov	r3, r5
 8005456:	496d      	ldr	r1, [pc, #436]	; (800560c <_Z12uart_processv+0xa04>)
 8005458:	486d      	ldr	r0, [pc, #436]	; (8005610 <_Z12uart_processv+0xa08>)
 800545a:	f7ff fb8f 	bl	8004b7c <_Z20uart_valid_value_setPKcS0_d>
 800545e:	e586      	b.n	8004f6e <_Z12uart_processv+0x366>
    else if (strcmp(cmd, "GKRF") == 0)
 8005460:	496c      	ldr	r1, [pc, #432]	; (8005614 <_Z12uart_processv+0xa0c>)
 8005462:	a803      	add	r0, sp, #12
 8005464:	f7fa fe74 	bl	8000150 <strcmp>
 8005468:	b938      	cbnz	r0, 800547a <_Z12uart_processv+0x872>
        uart_dump_value("Kr", "(rad/s)/cmd", control.GetKr());
 800546a:	4b6b      	ldr	r3, [pc, #428]	; (8005618 <_Z12uart_processv+0xa10>)
 800546c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8005470:	4966      	ldr	r1, [pc, #408]	; (800560c <_Z12uart_processv+0xa04>)
 8005472:	4867      	ldr	r0, [pc, #412]	; (8005610 <_Z12uart_processv+0xa08>)
 8005474:	f7ff face 	bl	8004a14 <_Z15uart_dump_valuePKcS0_d>
 8005478:	e579      	b.n	8004f6e <_Z12uart_processv+0x366>
    else if (strcmp(cmd, "SMVL") == 0)
 800547a:	4968      	ldr	r1, [pc, #416]	; (800561c <_Z12uart_processv+0xa14>)
 800547c:	a803      	add	r0, sp, #12
 800547e:	f7fa fe67 	bl	8000150 <strcmp>
 8005482:	4606      	mov	r6, r0
 8005484:	b9e0      	cbnz	r0, 80054c0 <_Z12uart_processv+0x8b8>
        int ret = control.SetMaximumVelocity(payload);
 8005486:	e9dd 4500 	ldrd	r4, r5, [sp]
        if (om < 0)
 800548a:	2200      	movs	r2, #0
 800548c:	2300      	movs	r3, #0
 800548e:	4620      	mov	r0, r4
 8005490:	4629      	mov	r1, r5
 8005492:	f7fb fa99 	bl	80009c8 <__aeabi_dcmplt>
 8005496:	b948      	cbnz	r0, 80054ac <_Z12uart_processv+0x8a4>
        this->MaximumVelocity = om;
 8005498:	4b5f      	ldr	r3, [pc, #380]	; (8005618 <_Z12uart_processv+0xa10>)
 800549a:	e9c3 4522 	strd	r4, r5, [r3, #136]	; 0x88
        if (ret != 0)
 800549e:	b146      	cbz	r6, 80054b2 <_Z12uart_processv+0x8aa>
            uart_invalid_value("Omega_max", payload);
 80054a0:	4622      	mov	r2, r4
 80054a2:	462b      	mov	r3, r5
 80054a4:	485e      	ldr	r0, [pc, #376]	; (8005620 <_Z12uart_processv+0xa18>)
 80054a6:	f7ff fb27 	bl	8004af8 <_Z18uart_invalid_valuePKcd>
 80054aa:	e560      	b.n	8004f6e <_Z12uart_processv+0x366>
            return -1;
 80054ac:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80054b0:	e7f5      	b.n	800549e <_Z12uart_processv+0x896>
            uart_valid_value_set("Omega_max", "rad/s", payload);
 80054b2:	4622      	mov	r2, r4
 80054b4:	462b      	mov	r3, r5
 80054b6:	495b      	ldr	r1, [pc, #364]	; (8005624 <_Z12uart_processv+0xa1c>)
 80054b8:	4859      	ldr	r0, [pc, #356]	; (8005620 <_Z12uart_processv+0xa18>)
 80054ba:	f7ff fb5f 	bl	8004b7c <_Z20uart_valid_value_setPKcS0_d>
 80054be:	e556      	b.n	8004f6e <_Z12uart_processv+0x366>
    else if (strcmp(cmd, "GMVL") == 0)
 80054c0:	4959      	ldr	r1, [pc, #356]	; (8005628 <_Z12uart_processv+0xa20>)
 80054c2:	a803      	add	r0, sp, #12
 80054c4:	f7fa fe44 	bl	8000150 <strcmp>
 80054c8:	b938      	cbnz	r0, 80054da <_Z12uart_processv+0x8d2>
        uart_dump_value("Omega_max", "rad/s", control.GetMaximumVelocity());
 80054ca:	4b53      	ldr	r3, [pc, #332]	; (8005618 <_Z12uart_processv+0xa10>)
 80054cc:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80054d0:	4954      	ldr	r1, [pc, #336]	; (8005624 <_Z12uart_processv+0xa1c>)
 80054d2:	4853      	ldr	r0, [pc, #332]	; (8005620 <_Z12uart_processv+0xa18>)
 80054d4:	f7ff fa9e 	bl	8004a14 <_Z15uart_dump_valuePKcS0_d>
 80054d8:	e549      	b.n	8004f6e <_Z12uart_processv+0x366>
    else if (strcmp(cmd, "SMTQ") == 0)
 80054da:	4954      	ldr	r1, [pc, #336]	; (800562c <_Z12uart_processv+0xa24>)
 80054dc:	a803      	add	r0, sp, #12
 80054de:	f7fa fe37 	bl	8000150 <strcmp>
 80054e2:	4606      	mov	r6, r0
 80054e4:	b9e0      	cbnz	r0, 8005520 <_Z12uart_processv+0x918>
        int ret = control.SetMaximumTorque(payload);
 80054e6:	e9dd 4500 	ldrd	r4, r5, [sp]
        if (tm < 0)
 80054ea:	2200      	movs	r2, #0
 80054ec:	2300      	movs	r3, #0
 80054ee:	4620      	mov	r0, r4
 80054f0:	4629      	mov	r1, r5
 80054f2:	f7fb fa69 	bl	80009c8 <__aeabi_dcmplt>
 80054f6:	b948      	cbnz	r0, 800550c <_Z12uart_processv+0x904>
        this->MaximumTorque = tm;
 80054f8:	4b47      	ldr	r3, [pc, #284]	; (8005618 <_Z12uart_processv+0xa10>)
 80054fa:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
        if (ret != 0)
 80054fe:	b146      	cbz	r6, 8005512 <_Z12uart_processv+0x90a>
            uart_invalid_value("Tmax", payload);
 8005500:	4622      	mov	r2, r4
 8005502:	462b      	mov	r3, r5
 8005504:	484a      	ldr	r0, [pc, #296]	; (8005630 <_Z12uart_processv+0xa28>)
 8005506:	f7ff faf7 	bl	8004af8 <_Z18uart_invalid_valuePKcd>
 800550a:	e530      	b.n	8004f6e <_Z12uart_processv+0x366>
            return -1;
 800550c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8005510:	e7f5      	b.n	80054fe <_Z12uart_processv+0x8f6>
            uart_valid_value_set("Tmax", "N.m", payload);
 8005512:	4622      	mov	r2, r4
 8005514:	462b      	mov	r3, r5
 8005516:	4947      	ldr	r1, [pc, #284]	; (8005634 <_Z12uart_processv+0xa2c>)
 8005518:	4845      	ldr	r0, [pc, #276]	; (8005630 <_Z12uart_processv+0xa28>)
 800551a:	f7ff fb2f 	bl	8004b7c <_Z20uart_valid_value_setPKcS0_d>
 800551e:	e526      	b.n	8004f6e <_Z12uart_processv+0x366>
    else if (strcmp(cmd, "GMTQ") == 0)
 8005520:	4945      	ldr	r1, [pc, #276]	; (8005638 <_Z12uart_processv+0xa30>)
 8005522:	a803      	add	r0, sp, #12
 8005524:	f7fa fe14 	bl	8000150 <strcmp>
 8005528:	b938      	cbnz	r0, 800553a <_Z12uart_processv+0x932>
        uart_dump_value("Tmax", "N.m", control.GetMaximumTorque());
 800552a:	4b3b      	ldr	r3, [pc, #236]	; (8005618 <_Z12uart_processv+0xa10>)
 800552c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8005530:	4940      	ldr	r1, [pc, #256]	; (8005634 <_Z12uart_processv+0xa2c>)
 8005532:	483f      	ldr	r0, [pc, #252]	; (8005630 <_Z12uart_processv+0xa28>)
 8005534:	f7ff fa6e 	bl	8004a14 <_Z15uart_dump_valuePKcS0_d>
 8005538:	e519      	b.n	8004f6e <_Z12uart_processv+0x366>
    else if (strcmp(cmd, "SVSP") == 0)
 800553a:	4940      	ldr	r1, [pc, #256]	; (800563c <_Z12uart_processv+0xa34>)
 800553c:	a803      	add	r0, sp, #12
 800553e:	f7fa fe07 	bl	8000150 <strcmp>
 8005542:	4607      	mov	r7, r0
 8005544:	bb90      	cbnz	r0, 80055ac <_Z12uart_processv+0x9a4>
        int ret = control.SetSupplyVoltage(payload);
 8005546:	e9dd 4500 	ldrd	r4, r5, [sp]
        if (vs < 0)
 800554a:	2200      	movs	r2, #0
 800554c:	2300      	movs	r3, #0
 800554e:	4620      	mov	r0, r4
 8005550:	4629      	mov	r1, r5
 8005552:	f7fb fa39 	bl	80009c8 <__aeabi_dcmplt>
 8005556:	b9f8      	cbnz	r0, 8005598 <_Z12uart_processv+0x990>
        this->SupplyVoltage = vs;
 8005558:	4e2f      	ldr	r6, [pc, #188]	; (8005618 <_Z12uart_processv+0xa10>)
 800555a:	e9c6 4528 	strd	r4, r5, [r6, #160]	; 0xa0
        this->MaximumVoltage = vs * (ccr_max + 1) / (ccr_arr + 1);
 800555e:	8870      	ldrh	r0, [r6, #2]
 8005560:	3001      	adds	r0, #1
 8005562:	f7fa ff59 	bl	8000418 <__aeabi_i2d>
 8005566:	4622      	mov	r2, r4
 8005568:	462b      	mov	r3, r5
 800556a:	f7fa ffbb 	bl	80004e4 <__aeabi_dmul>
 800556e:	4680      	mov	r8, r0
 8005570:	4689      	mov	r9, r1
 8005572:	8830      	ldrh	r0, [r6, #0]
 8005574:	3001      	adds	r0, #1
 8005576:	f7fa ff4f 	bl	8000418 <__aeabi_i2d>
 800557a:	4602      	mov	r2, r0
 800557c:	460b      	mov	r3, r1
 800557e:	4640      	mov	r0, r8
 8005580:	4649      	mov	r1, r9
 8005582:	f7fb f8d9 	bl	8000738 <__aeabi_ddiv>
 8005586:	e9c6 0126 	strd	r0, r1, [r6, #152]	; 0x98
        if (ret != 0)
 800558a:	b147      	cbz	r7, 800559e <_Z12uart_processv+0x996>
            uart_invalid_value(name, payload);
 800558c:	4622      	mov	r2, r4
 800558e:	462b      	mov	r3, r5
 8005590:	482b      	ldr	r0, [pc, #172]	; (8005640 <_Z12uart_processv+0xa38>)
 8005592:	f7ff fab1 	bl	8004af8 <_Z18uart_invalid_valuePKcd>
 8005596:	e4ea      	b.n	8004f6e <_Z12uart_processv+0x366>
            return -1;
 8005598:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800559c:	e7f5      	b.n	800558a <_Z12uart_processv+0x982>
            uart_valid_value_set(name, "V", payload);
 800559e:	4622      	mov	r2, r4
 80055a0:	462b      	mov	r3, r5
 80055a2:	4928      	ldr	r1, [pc, #160]	; (8005644 <_Z12uart_processv+0xa3c>)
 80055a4:	4826      	ldr	r0, [pc, #152]	; (8005640 <_Z12uart_processv+0xa38>)
 80055a6:	f7ff fae9 	bl	8004b7c <_Z20uart_valid_value_setPKcS0_d>
 80055aa:	e4e0      	b.n	8004f6e <_Z12uart_processv+0x366>
    else if (strcmp(cmd, "GVSP") == 0)
 80055ac:	4926      	ldr	r1, [pc, #152]	; (8005648 <_Z12uart_processv+0xa40>)
 80055ae:	a803      	add	r0, sp, #12
 80055b0:	f7fa fdce 	bl	8000150 <strcmp>
 80055b4:	b938      	cbnz	r0, 80055c6 <_Z12uart_processv+0x9be>
        uart_dump_value("Vsup", "V", control.GetSupplyVoltage());
 80055b6:	4b18      	ldr	r3, [pc, #96]	; (8005618 <_Z12uart_processv+0xa10>)
 80055b8:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 80055bc:	4921      	ldr	r1, [pc, #132]	; (8005644 <_Z12uart_processv+0xa3c>)
 80055be:	4820      	ldr	r0, [pc, #128]	; (8005640 <_Z12uart_processv+0xa38>)
 80055c0:	f7ff fa28 	bl	8004a14 <_Z15uart_dump_valuePKcS0_d>
 80055c4:	e4d3      	b.n	8004f6e <_Z12uart_processv+0x366>
    else if(strcmp(cmd, "WCFG") == 0)
 80055c6:	4921      	ldr	r1, [pc, #132]	; (800564c <_Z12uart_processv+0xa44>)
 80055c8:	a803      	add	r0, sp, #12
 80055ca:	f7fa fdc1 	bl	8000150 <strcmp>
 80055ce:	b950      	cbnz	r0, 80055e6 <_Z12uart_processv+0x9de>
        control.WriteConfig();
 80055d0:	4811      	ldr	r0, [pc, #68]	; (8005618 <_Z12uart_processv+0xa10>)
 80055d2:	f7ff f82b 	bl	800462c <_ZN9MotorCtrl11WriteConfigEv>
        writeConf();
 80055d6:	f7fe fad1 	bl	8003b7c <_Z9writeConfv>
        serial.write((const uint8_t *) msg, strlen(msg));
 80055da:	2212      	movs	r2, #18
 80055dc:	491c      	ldr	r1, [pc, #112]	; (8005650 <_Z12uart_processv+0xa48>)
 80055de:	481d      	ldr	r0, [pc, #116]	; (8005654 <_Z12uart_processv+0xa4c>)
 80055e0:	f7fe fd66 	bl	80040b0 <_ZN11SerialClass5writeEPKhi>
 80055e4:	e4c3      	b.n	8004f6e <_Z12uart_processv+0x366>
    else if(strcmp(cmd, "RCFG") == 0)
 80055e6:	491c      	ldr	r1, [pc, #112]	; (8005658 <_Z12uart_processv+0xa50>)
 80055e8:	a803      	add	r0, sp, #12
 80055ea:	f7fa fdb1 	bl	8000150 <strcmp>
 80055ee:	2800      	cmp	r0, #0
 80055f0:	f47f acbd 	bne.w	8004f6e <_Z12uart_processv+0x366>
        readConf();
 80055f4:	f7fe fab6 	bl	8003b64 <_Z8readConfv>
        control.ReadConfig();
 80055f8:	4807      	ldr	r0, [pc, #28]	; (8005618 <_Z12uart_processv+0xa10>)
 80055fa:	f7fe ffcf 	bl	800459c <_ZN9MotorCtrl10ReadConfigEv>
        serial.write((const uint8_t *) msg, strlen(msg));
 80055fe:	2211      	movs	r2, #17
 8005600:	4916      	ldr	r1, [pc, #88]	; (800565c <_Z12uart_processv+0xa54>)
 8005602:	4814      	ldr	r0, [pc, #80]	; (8005654 <_Z12uart_processv+0xa4c>)
 8005604:	f7fe fd54 	bl	80040b0 <_ZN11SerialClass5writeEPKhi>
 8005608:	e4b1      	b.n	8004f6e <_Z12uart_processv+0x366>
 800560a:	4770      	bx	lr
 800560c:	0800af5c 	.word	0x0800af5c
 8005610:	0800af58 	.word	0x0800af58
 8005614:	0800af68 	.word	0x0800af68
 8005618:	20000008 	.word	0x20000008
 800561c:	0800af70 	.word	0x0800af70
 8005620:	0800af78 	.word	0x0800af78
 8005624:	0800af84 	.word	0x0800af84
 8005628:	0800af8c 	.word	0x0800af8c
 800562c:	0800af94 	.word	0x0800af94
 8005630:	0800af9c 	.word	0x0800af9c
 8005634:	0800afa4 	.word	0x0800afa4
 8005638:	0800afa8 	.word	0x0800afa8
 800563c:	0800afb0 	.word	0x0800afb0
 8005640:	0800afb8 	.word	0x0800afb8
 8005644:	0800afc0 	.word	0x0800afc0
 8005648:	0800afc4 	.word	0x0800afc4
 800564c:	0800afcc 	.word	0x0800afcc
 8005650:	0800afd4 	.word	0x0800afd4
 8005654:	20000744 	.word	0x20000744
 8005658:	0800afe8 	.word	0x0800afe8
 800565c:	0800aff0 	.word	0x0800aff0

08005660 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005660:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005662:	e003      	b.n	800566c <LoopCopyDataInit>

08005664 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005664:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005666:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005668:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800566a:	3104      	adds	r1, #4

0800566c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800566c:	480a      	ldr	r0, [pc, #40]	; (8005698 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800566e:	4b0b      	ldr	r3, [pc, #44]	; (800569c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005670:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005672:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005674:	d3f6      	bcc.n	8005664 <CopyDataInit>
  ldr r2, =_sbss
 8005676:	4a0a      	ldr	r2, [pc, #40]	; (80056a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005678:	e002      	b.n	8005680 <LoopFillZerobss>

0800567a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800567a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800567c:	f842 3b04 	str.w	r3, [r2], #4

08005680 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005680:	4b08      	ldr	r3, [pc, #32]	; (80056a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005682:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005684:	d3f9      	bcc.n	800567a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005686:	f7ff f95f 	bl	8004948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800568a:	f000 f80f 	bl	80056ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800568e:	f7fe fd95 	bl	80041bc <main>
  bx lr
 8005692:	4770      	bx	lr
  ldr r3, =_sidata
 8005694:	0800b638 	.word	0x0800b638
  ldr r0, =_sdata
 8005698:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800569c:	20000724 	.word	0x20000724
  ldr r2, =_sbss
 80056a0:	20000728 	.word	0x20000728
  ldr r3, = _ebss
 80056a4:	20001240 	.word	0x20001240

080056a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80056a8:	e7fe      	b.n	80056a8 <ADC1_2_IRQHandler>
	...

080056ac <__libc_init_array>:
 80056ac:	b570      	push	{r4, r5, r6, lr}
 80056ae:	2500      	movs	r5, #0
 80056b0:	4e0c      	ldr	r6, [pc, #48]	; (80056e4 <__libc_init_array+0x38>)
 80056b2:	4c0d      	ldr	r4, [pc, #52]	; (80056e8 <__libc_init_array+0x3c>)
 80056b4:	1ba4      	subs	r4, r4, r6
 80056b6:	10a4      	asrs	r4, r4, #2
 80056b8:	42a5      	cmp	r5, r4
 80056ba:	d109      	bne.n	80056d0 <__libc_init_array+0x24>
 80056bc:	f005 fb70 	bl	800ada0 <_init>
 80056c0:	2500      	movs	r5, #0
 80056c2:	4e0a      	ldr	r6, [pc, #40]	; (80056ec <__libc_init_array+0x40>)
 80056c4:	4c0a      	ldr	r4, [pc, #40]	; (80056f0 <__libc_init_array+0x44>)
 80056c6:	1ba4      	subs	r4, r4, r6
 80056c8:	10a4      	asrs	r4, r4, #2
 80056ca:	42a5      	cmp	r5, r4
 80056cc:	d105      	bne.n	80056da <__libc_init_array+0x2e>
 80056ce:	bd70      	pop	{r4, r5, r6, pc}
 80056d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056d4:	4798      	blx	r3
 80056d6:	3501      	adds	r5, #1
 80056d8:	e7ee      	b.n	80056b8 <__libc_init_array+0xc>
 80056da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056de:	4798      	blx	r3
 80056e0:	3501      	adds	r5, #1
 80056e2:	e7f2      	b.n	80056ca <__libc_init_array+0x1e>
 80056e4:	0800b62c 	.word	0x0800b62c
 80056e8:	0800b62c 	.word	0x0800b62c
 80056ec:	0800b62c 	.word	0x0800b62c
 80056f0:	0800b634 	.word	0x0800b634

080056f4 <memcpy>:
 80056f4:	b510      	push	{r4, lr}
 80056f6:	1e43      	subs	r3, r0, #1
 80056f8:	440a      	add	r2, r1
 80056fa:	4291      	cmp	r1, r2
 80056fc:	d100      	bne.n	8005700 <memcpy+0xc>
 80056fe:	bd10      	pop	{r4, pc}
 8005700:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005704:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005708:	e7f7      	b.n	80056fa <memcpy+0x6>

0800570a <memset>:
 800570a:	4603      	mov	r3, r0
 800570c:	4402      	add	r2, r0
 800570e:	4293      	cmp	r3, r2
 8005710:	d100      	bne.n	8005714 <memset+0xa>
 8005712:	4770      	bx	lr
 8005714:	f803 1b01 	strb.w	r1, [r3], #1
 8005718:	e7f9      	b.n	800570e <memset+0x4>
	...

0800571c <sprintf>:
 800571c:	b40e      	push	{r1, r2, r3}
 800571e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005722:	b500      	push	{lr}
 8005724:	b09c      	sub	sp, #112	; 0x70
 8005726:	f8ad 1014 	strh.w	r1, [sp, #20]
 800572a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800572e:	9104      	str	r1, [sp, #16]
 8005730:	9107      	str	r1, [sp, #28]
 8005732:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005736:	ab1d      	add	r3, sp, #116	; 0x74
 8005738:	9002      	str	r0, [sp, #8]
 800573a:	9006      	str	r0, [sp, #24]
 800573c:	4808      	ldr	r0, [pc, #32]	; (8005760 <sprintf+0x44>)
 800573e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005742:	f8ad 1016 	strh.w	r1, [sp, #22]
 8005746:	6800      	ldr	r0, [r0, #0]
 8005748:	a902      	add	r1, sp, #8
 800574a:	9301      	str	r3, [sp, #4]
 800574c:	f000 f836 	bl	80057bc <_svfprintf_r>
 8005750:	2200      	movs	r2, #0
 8005752:	9b02      	ldr	r3, [sp, #8]
 8005754:	701a      	strb	r2, [r3, #0]
 8005756:	b01c      	add	sp, #112	; 0x70
 8005758:	f85d eb04 	ldr.w	lr, [sp], #4
 800575c:	b003      	add	sp, #12
 800575e:	4770      	bx	lr
 8005760:	200000b4 	.word	0x200000b4

08005764 <sscanf>:
 8005764:	b40e      	push	{r1, r2, r3}
 8005766:	f44f 7201 	mov.w	r2, #516	; 0x204
 800576a:	b530      	push	{r4, r5, lr}
 800576c:	b09c      	sub	sp, #112	; 0x70
 800576e:	ac1f      	add	r4, sp, #124	; 0x7c
 8005770:	f854 5b04 	ldr.w	r5, [r4], #4
 8005774:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005778:	9002      	str	r0, [sp, #8]
 800577a:	9006      	str	r0, [sp, #24]
 800577c:	f7fa fcf2 	bl	8000164 <strlen>
 8005780:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <sscanf+0x4c>)
 8005782:	9003      	str	r0, [sp, #12]
 8005784:	930b      	str	r3, [sp, #44]	; 0x2c
 8005786:	2300      	movs	r3, #0
 8005788:	930f      	str	r3, [sp, #60]	; 0x3c
 800578a:	9314      	str	r3, [sp, #80]	; 0x50
 800578c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005790:	9007      	str	r0, [sp, #28]
 8005792:	4808      	ldr	r0, [pc, #32]	; (80057b4 <sscanf+0x50>)
 8005794:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005798:	462a      	mov	r2, r5
 800579a:	4623      	mov	r3, r4
 800579c:	a902      	add	r1, sp, #8
 800579e:	6800      	ldr	r0, [r0, #0]
 80057a0:	9401      	str	r4, [sp, #4]
 80057a2:	f000 ffdb 	bl	800675c <__ssvfscanf_r>
 80057a6:	b01c      	add	sp, #112	; 0x70
 80057a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057ac:	b003      	add	sp, #12
 80057ae:	4770      	bx	lr
 80057b0:	080057b9 	.word	0x080057b9
 80057b4:	200000b4 	.word	0x200000b4

080057b8 <__seofread>:
 80057b8:	2000      	movs	r0, #0
 80057ba:	4770      	bx	lr

080057bc <_svfprintf_r>:
 80057bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c0:	b0bf      	sub	sp, #252	; 0xfc
 80057c2:	4689      	mov	r9, r1
 80057c4:	4615      	mov	r5, r2
 80057c6:	461f      	mov	r7, r3
 80057c8:	4682      	mov	sl, r0
 80057ca:	f002 fbc5 	bl	8007f58 <_localeconv_r>
 80057ce:	6803      	ldr	r3, [r0, #0]
 80057d0:	4618      	mov	r0, r3
 80057d2:	9311      	str	r3, [sp, #68]	; 0x44
 80057d4:	f7fa fcc6 	bl	8000164 <strlen>
 80057d8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80057dc:	900a      	str	r0, [sp, #40]	; 0x28
 80057de:	061b      	lsls	r3, r3, #24
 80057e0:	d518      	bpl.n	8005814 <_svfprintf_r+0x58>
 80057e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80057e6:	b9ab      	cbnz	r3, 8005814 <_svfprintf_r+0x58>
 80057e8:	2140      	movs	r1, #64	; 0x40
 80057ea:	4650      	mov	r0, sl
 80057ec:	f002 fbca 	bl	8007f84 <_malloc_r>
 80057f0:	f8c9 0000 	str.w	r0, [r9]
 80057f4:	f8c9 0010 	str.w	r0, [r9, #16]
 80057f8:	b948      	cbnz	r0, 800580e <_svfprintf_r+0x52>
 80057fa:	230c      	movs	r3, #12
 80057fc:	f8ca 3000 	str.w	r3, [sl]
 8005800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005804:	930b      	str	r3, [sp, #44]	; 0x2c
 8005806:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005808:	b03f      	add	sp, #252	; 0xfc
 800580a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800580e:	2340      	movs	r3, #64	; 0x40
 8005810:	f8c9 3014 	str.w	r3, [r9, #20]
 8005814:	2300      	movs	r3, #0
 8005816:	ac2e      	add	r4, sp, #184	; 0xb8
 8005818:	9421      	str	r4, [sp, #132]	; 0x84
 800581a:	9323      	str	r3, [sp, #140]	; 0x8c
 800581c:	9322      	str	r3, [sp, #136]	; 0x88
 800581e:	9509      	str	r5, [sp, #36]	; 0x24
 8005820:	9307      	str	r3, [sp, #28]
 8005822:	930d      	str	r3, [sp, #52]	; 0x34
 8005824:	930e      	str	r3, [sp, #56]	; 0x38
 8005826:	9315      	str	r3, [sp, #84]	; 0x54
 8005828:	9314      	str	r3, [sp, #80]	; 0x50
 800582a:	930b      	str	r3, [sp, #44]	; 0x2c
 800582c:	9312      	str	r3, [sp, #72]	; 0x48
 800582e:	9313      	str	r3, [sp, #76]	; 0x4c
 8005830:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005832:	462b      	mov	r3, r5
 8005834:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005838:	b112      	cbz	r2, 8005840 <_svfprintf_r+0x84>
 800583a:	2a25      	cmp	r2, #37	; 0x25
 800583c:	f040 8083 	bne.w	8005946 <_svfprintf_r+0x18a>
 8005840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005842:	1aee      	subs	r6, r5, r3
 8005844:	d00d      	beq.n	8005862 <_svfprintf_r+0xa6>
 8005846:	e884 0048 	stmia.w	r4, {r3, r6}
 800584a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800584c:	4433      	add	r3, r6
 800584e:	9323      	str	r3, [sp, #140]	; 0x8c
 8005850:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005852:	3301      	adds	r3, #1
 8005854:	2b07      	cmp	r3, #7
 8005856:	9322      	str	r3, [sp, #136]	; 0x88
 8005858:	dc77      	bgt.n	800594a <_svfprintf_r+0x18e>
 800585a:	3408      	adds	r4, #8
 800585c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800585e:	4433      	add	r3, r6
 8005860:	930b      	str	r3, [sp, #44]	; 0x2c
 8005862:	782b      	ldrb	r3, [r5, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 8725 	beq.w	80066b4 <_svfprintf_r+0xef8>
 800586a:	2300      	movs	r3, #0
 800586c:	1c69      	adds	r1, r5, #1
 800586e:	461a      	mov	r2, r3
 8005870:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8005874:	461d      	mov	r5, r3
 8005876:	200a      	movs	r0, #10
 8005878:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800587c:	930c      	str	r3, [sp, #48]	; 0x30
 800587e:	1c4e      	adds	r6, r1, #1
 8005880:	7809      	ldrb	r1, [r1, #0]
 8005882:	9609      	str	r6, [sp, #36]	; 0x24
 8005884:	9106      	str	r1, [sp, #24]
 8005886:	9906      	ldr	r1, [sp, #24]
 8005888:	3920      	subs	r1, #32
 800588a:	2958      	cmp	r1, #88	; 0x58
 800588c:	f200 8414 	bhi.w	80060b8 <_svfprintf_r+0x8fc>
 8005890:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005894:	041200a5 	.word	0x041200a5
 8005898:	00aa0412 	.word	0x00aa0412
 800589c:	04120412 	.word	0x04120412
 80058a0:	04120412 	.word	0x04120412
 80058a4:	04120412 	.word	0x04120412
 80058a8:	006500ad 	.word	0x006500ad
 80058ac:	00b50412 	.word	0x00b50412
 80058b0:	041200b8 	.word	0x041200b8
 80058b4:	00d800d5 	.word	0x00d800d5
 80058b8:	00d800d8 	.word	0x00d800d8
 80058bc:	00d800d8 	.word	0x00d800d8
 80058c0:	00d800d8 	.word	0x00d800d8
 80058c4:	00d800d8 	.word	0x00d800d8
 80058c8:	04120412 	.word	0x04120412
 80058cc:	04120412 	.word	0x04120412
 80058d0:	04120412 	.word	0x04120412
 80058d4:	04120412 	.word	0x04120412
 80058d8:	04120412 	.word	0x04120412
 80058dc:	0122010c 	.word	0x0122010c
 80058e0:	01220412 	.word	0x01220412
 80058e4:	04120412 	.word	0x04120412
 80058e8:	04120412 	.word	0x04120412
 80058ec:	041200eb 	.word	0x041200eb
 80058f0:	033c0412 	.word	0x033c0412
 80058f4:	04120412 	.word	0x04120412
 80058f8:	04120412 	.word	0x04120412
 80058fc:	03a40412 	.word	0x03a40412
 8005900:	04120412 	.word	0x04120412
 8005904:	04120085 	.word	0x04120085
 8005908:	04120412 	.word	0x04120412
 800590c:	04120412 	.word	0x04120412
 8005910:	04120412 	.word	0x04120412
 8005914:	04120412 	.word	0x04120412
 8005918:	00fe0412 	.word	0x00fe0412
 800591c:	0122006b 	.word	0x0122006b
 8005920:	01220122 	.word	0x01220122
 8005924:	006b00ee 	.word	0x006b00ee
 8005928:	04120412 	.word	0x04120412
 800592c:	041200f1 	.word	0x041200f1
 8005930:	033e031e 	.word	0x033e031e
 8005934:	00f80372 	.word	0x00f80372
 8005938:	03830412 	.word	0x03830412
 800593c:	03a60412 	.word	0x03a60412
 8005940:	04120412 	.word	0x04120412
 8005944:	03be      	.short	0x03be
 8005946:	461d      	mov	r5, r3
 8005948:	e773      	b.n	8005832 <_svfprintf_r+0x76>
 800594a:	aa21      	add	r2, sp, #132	; 0x84
 800594c:	4649      	mov	r1, r9
 800594e:	4650      	mov	r0, sl
 8005950:	f004 fa5c 	bl	8009e0c <__ssprint_r>
 8005954:	2800      	cmp	r0, #0
 8005956:	f040 868e 	bne.w	8006676 <_svfprintf_r+0xeba>
 800595a:	ac2e      	add	r4, sp, #184	; 0xb8
 800595c:	e77e      	b.n	800585c <_svfprintf_r+0xa0>
 800595e:	2301      	movs	r3, #1
 8005960:	222b      	movs	r2, #43	; 0x2b
 8005962:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005964:	e78b      	b.n	800587e <_svfprintf_r+0xc2>
 8005966:	460f      	mov	r7, r1
 8005968:	e7fb      	b.n	8005962 <_svfprintf_r+0x1a6>
 800596a:	b10b      	cbz	r3, 8005970 <_svfprintf_r+0x1b4>
 800596c:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005970:	06ae      	lsls	r6, r5, #26
 8005972:	f140 80a1 	bpl.w	8005ab8 <_svfprintf_r+0x2fc>
 8005976:	3707      	adds	r7, #7
 8005978:	f027 0707 	bic.w	r7, r7, #7
 800597c:	f107 0308 	add.w	r3, r7, #8
 8005980:	9308      	str	r3, [sp, #32]
 8005982:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005986:	2e00      	cmp	r6, #0
 8005988:	f177 0300 	sbcs.w	r3, r7, #0
 800598c:	da05      	bge.n	800599a <_svfprintf_r+0x1de>
 800598e:	232d      	movs	r3, #45	; 0x2d
 8005990:	4276      	negs	r6, r6
 8005992:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8005996:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800599a:	2301      	movs	r3, #1
 800599c:	e2c7      	b.n	8005f2e <_svfprintf_r+0x772>
 800599e:	b10b      	cbz	r3, 80059a4 <_svfprintf_r+0x1e8>
 80059a0:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80059a4:	4ba0      	ldr	r3, [pc, #640]	; (8005c28 <_svfprintf_r+0x46c>)
 80059a6:	9315      	str	r3, [sp, #84]	; 0x54
 80059a8:	06ab      	lsls	r3, r5, #26
 80059aa:	f140 8336 	bpl.w	800601a <_svfprintf_r+0x85e>
 80059ae:	3707      	adds	r7, #7
 80059b0:	f027 0707 	bic.w	r7, r7, #7
 80059b4:	f107 0308 	add.w	r3, r7, #8
 80059b8:	9308      	str	r3, [sp, #32]
 80059ba:	e9d7 6700 	ldrd	r6, r7, [r7]
 80059be:	07e8      	lsls	r0, r5, #31
 80059c0:	d50b      	bpl.n	80059da <_svfprintf_r+0x21e>
 80059c2:	ea56 0307 	orrs.w	r3, r6, r7
 80059c6:	d008      	beq.n	80059da <_svfprintf_r+0x21e>
 80059c8:	2330      	movs	r3, #48	; 0x30
 80059ca:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 80059ce:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80059d2:	f045 0502 	orr.w	r5, r5, #2
 80059d6:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 80059da:	2302      	movs	r3, #2
 80059dc:	e2a4      	b.n	8005f28 <_svfprintf_r+0x76c>
 80059de:	2a00      	cmp	r2, #0
 80059e0:	d1bf      	bne.n	8005962 <_svfprintf_r+0x1a6>
 80059e2:	2301      	movs	r3, #1
 80059e4:	2220      	movs	r2, #32
 80059e6:	e7bc      	b.n	8005962 <_svfprintf_r+0x1a6>
 80059e8:	f045 0501 	orr.w	r5, r5, #1
 80059ec:	e7b9      	b.n	8005962 <_svfprintf_r+0x1a6>
 80059ee:	683e      	ldr	r6, [r7, #0]
 80059f0:	1d39      	adds	r1, r7, #4
 80059f2:	2e00      	cmp	r6, #0
 80059f4:	960c      	str	r6, [sp, #48]	; 0x30
 80059f6:	dab6      	bge.n	8005966 <_svfprintf_r+0x1aa>
 80059f8:	460f      	mov	r7, r1
 80059fa:	4276      	negs	r6, r6
 80059fc:	960c      	str	r6, [sp, #48]	; 0x30
 80059fe:	f045 0504 	orr.w	r5, r5, #4
 8005a02:	e7ae      	b.n	8005962 <_svfprintf_r+0x1a6>
 8005a04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a06:	1c4e      	adds	r6, r1, #1
 8005a08:	7809      	ldrb	r1, [r1, #0]
 8005a0a:	292a      	cmp	r1, #42	; 0x2a
 8005a0c:	9106      	str	r1, [sp, #24]
 8005a0e:	d010      	beq.n	8005a32 <_svfprintf_r+0x276>
 8005a10:	f04f 0b00 	mov.w	fp, #0
 8005a14:	9609      	str	r6, [sp, #36]	; 0x24
 8005a16:	9906      	ldr	r1, [sp, #24]
 8005a18:	3930      	subs	r1, #48	; 0x30
 8005a1a:	2909      	cmp	r1, #9
 8005a1c:	f63f af33 	bhi.w	8005886 <_svfprintf_r+0xca>
 8005a20:	fb00 1b0b 	mla	fp, r0, fp, r1
 8005a24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a26:	460e      	mov	r6, r1
 8005a28:	f816 1b01 	ldrb.w	r1, [r6], #1
 8005a2c:	9106      	str	r1, [sp, #24]
 8005a2e:	9609      	str	r6, [sp, #36]	; 0x24
 8005a30:	e7f1      	b.n	8005a16 <_svfprintf_r+0x25a>
 8005a32:	6839      	ldr	r1, [r7, #0]
 8005a34:	9609      	str	r6, [sp, #36]	; 0x24
 8005a36:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 8005a3a:	3704      	adds	r7, #4
 8005a3c:	e791      	b.n	8005962 <_svfprintf_r+0x1a6>
 8005a3e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8005a42:	e78e      	b.n	8005962 <_svfprintf_r+0x1a6>
 8005a44:	2100      	movs	r1, #0
 8005a46:	910c      	str	r1, [sp, #48]	; 0x30
 8005a48:	9906      	ldr	r1, [sp, #24]
 8005a4a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005a4c:	3930      	subs	r1, #48	; 0x30
 8005a4e:	fb00 1106 	mla	r1, r0, r6, r1
 8005a52:	910c      	str	r1, [sp, #48]	; 0x30
 8005a54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a56:	460e      	mov	r6, r1
 8005a58:	f816 1b01 	ldrb.w	r1, [r6], #1
 8005a5c:	9106      	str	r1, [sp, #24]
 8005a5e:	9906      	ldr	r1, [sp, #24]
 8005a60:	9609      	str	r6, [sp, #36]	; 0x24
 8005a62:	3930      	subs	r1, #48	; 0x30
 8005a64:	2909      	cmp	r1, #9
 8005a66:	d9ef      	bls.n	8005a48 <_svfprintf_r+0x28c>
 8005a68:	e70d      	b.n	8005886 <_svfprintf_r+0xca>
 8005a6a:	f045 0508 	orr.w	r5, r5, #8
 8005a6e:	e778      	b.n	8005962 <_svfprintf_r+0x1a6>
 8005a70:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8005a74:	e775      	b.n	8005962 <_svfprintf_r+0x1a6>
 8005a76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a78:	7809      	ldrb	r1, [r1, #0]
 8005a7a:	296c      	cmp	r1, #108	; 0x6c
 8005a7c:	d105      	bne.n	8005a8a <_svfprintf_r+0x2ce>
 8005a7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a80:	3101      	adds	r1, #1
 8005a82:	9109      	str	r1, [sp, #36]	; 0x24
 8005a84:	f045 0520 	orr.w	r5, r5, #32
 8005a88:	e76b      	b.n	8005962 <_svfprintf_r+0x1a6>
 8005a8a:	f045 0510 	orr.w	r5, r5, #16
 8005a8e:	e768      	b.n	8005962 <_svfprintf_r+0x1a6>
 8005a90:	2600      	movs	r6, #0
 8005a92:	1d3b      	adds	r3, r7, #4
 8005a94:	9308      	str	r3, [sp, #32]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8005a9c:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8005aa0:	f04f 0b01 	mov.w	fp, #1
 8005aa4:	4637      	mov	r7, r6
 8005aa6:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8005aaa:	e11c      	b.n	8005ce6 <_svfprintf_r+0x52a>
 8005aac:	b10b      	cbz	r3, 8005ab2 <_svfprintf_r+0x2f6>
 8005aae:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005ab2:	f045 0510 	orr.w	r5, r5, #16
 8005ab6:	e75b      	b.n	8005970 <_svfprintf_r+0x1b4>
 8005ab8:	f015 0f10 	tst.w	r5, #16
 8005abc:	f107 0304 	add.w	r3, r7, #4
 8005ac0:	d003      	beq.n	8005aca <_svfprintf_r+0x30e>
 8005ac2:	683e      	ldr	r6, [r7, #0]
 8005ac4:	9308      	str	r3, [sp, #32]
 8005ac6:	17f7      	asrs	r7, r6, #31
 8005ac8:	e75d      	b.n	8005986 <_svfprintf_r+0x1ca>
 8005aca:	683e      	ldr	r6, [r7, #0]
 8005acc:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005ad0:	9308      	str	r3, [sp, #32]
 8005ad2:	bf18      	it	ne
 8005ad4:	b236      	sxthne	r6, r6
 8005ad6:	e7f6      	b.n	8005ac6 <_svfprintf_r+0x30a>
 8005ad8:	b10b      	cbz	r3, 8005ade <_svfprintf_r+0x322>
 8005ada:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005ade:	3707      	adds	r7, #7
 8005ae0:	f027 0707 	bic.w	r7, r7, #7
 8005ae4:	f107 0308 	add.w	r3, r7, #8
 8005ae8:	9308      	str	r3, [sp, #32]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005af0:	930d      	str	r3, [sp, #52]	; 0x34
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005af6:	930e      	str	r3, [sp, #56]	; 0x38
 8005af8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005afa:	4638      	mov	r0, r7
 8005afc:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8005b00:	4631      	mov	r1, r6
 8005b02:	4b4a      	ldr	r3, [pc, #296]	; (8005c2c <_svfprintf_r+0x470>)
 8005b04:	f7fa ff88 	bl	8000a18 <__aeabi_dcmpun>
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	f040 85dc 	bne.w	80066c6 <_svfprintf_r+0xf0a>
 8005b0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b12:	4b46      	ldr	r3, [pc, #280]	; (8005c2c <_svfprintf_r+0x470>)
 8005b14:	4638      	mov	r0, r7
 8005b16:	4631      	mov	r1, r6
 8005b18:	f7fa ff60 	bl	80009dc <__aeabi_dcmple>
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	f040 85d2 	bne.w	80066c6 <_svfprintf_r+0xf0a>
 8005b22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b26:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005b28:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005b2a:	f7fa ff4d 	bl	80009c8 <__aeabi_dcmplt>
 8005b2e:	b110      	cbz	r0, 8005b36 <_svfprintf_r+0x37a>
 8005b30:	232d      	movs	r3, #45	; 0x2d
 8005b32:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8005b36:	4b3e      	ldr	r3, [pc, #248]	; (8005c30 <_svfprintf_r+0x474>)
 8005b38:	4a3e      	ldr	r2, [pc, #248]	; (8005c34 <_svfprintf_r+0x478>)
 8005b3a:	9906      	ldr	r1, [sp, #24]
 8005b3c:	f04f 0b03 	mov.w	fp, #3
 8005b40:	2947      	cmp	r1, #71	; 0x47
 8005b42:	bfcc      	ite	gt
 8005b44:	4690      	movgt	r8, r2
 8005b46:	4698      	movle	r8, r3
 8005b48:	2600      	movs	r6, #0
 8005b4a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8005b4e:	4637      	mov	r7, r6
 8005b50:	e0c9      	b.n	8005ce6 <_svfprintf_r+0x52a>
 8005b52:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8005b56:	d026      	beq.n	8005ba6 <_svfprintf_r+0x3ea>
 8005b58:	9b06      	ldr	r3, [sp, #24]
 8005b5a:	f023 0320 	bic.w	r3, r3, #32
 8005b5e:	2b47      	cmp	r3, #71	; 0x47
 8005b60:	d104      	bne.n	8005b6c <_svfprintf_r+0x3b0>
 8005b62:	f1bb 0f00 	cmp.w	fp, #0
 8005b66:	bf08      	it	eq
 8005b68:	f04f 0b01 	moveq.w	fp, #1
 8005b6c:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8005b70:	9317      	str	r3, [sp, #92]	; 0x5c
 8005b72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b74:	1e1f      	subs	r7, r3, #0
 8005b76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b78:	bfa8      	it	ge
 8005b7a:	9710      	strge	r7, [sp, #64]	; 0x40
 8005b7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b7e:	bfbd      	ittte	lt
 8005b80:	463b      	movlt	r3, r7
 8005b82:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005b86:	9310      	strlt	r3, [sp, #64]	; 0x40
 8005b88:	2300      	movge	r3, #0
 8005b8a:	bfb8      	it	lt
 8005b8c:	232d      	movlt	r3, #45	; 0x2d
 8005b8e:	9316      	str	r3, [sp, #88]	; 0x58
 8005b90:	9b06      	ldr	r3, [sp, #24]
 8005b92:	f023 0720 	bic.w	r7, r3, #32
 8005b96:	2f46      	cmp	r7, #70	; 0x46
 8005b98:	d008      	beq.n	8005bac <_svfprintf_r+0x3f0>
 8005b9a:	2f45      	cmp	r7, #69	; 0x45
 8005b9c:	d142      	bne.n	8005c24 <_svfprintf_r+0x468>
 8005b9e:	f10b 0601 	add.w	r6, fp, #1
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	e004      	b.n	8005bb0 <_svfprintf_r+0x3f4>
 8005ba6:	f04f 0b06 	mov.w	fp, #6
 8005baa:	e7df      	b.n	8005b6c <_svfprintf_r+0x3b0>
 8005bac:	465e      	mov	r6, fp
 8005bae:	2303      	movs	r3, #3
 8005bb0:	aa1f      	add	r2, sp, #124	; 0x7c
 8005bb2:	9204      	str	r2, [sp, #16]
 8005bb4:	aa1c      	add	r2, sp, #112	; 0x70
 8005bb6:	9203      	str	r2, [sp, #12]
 8005bb8:	aa1b      	add	r2, sp, #108	; 0x6c
 8005bba:	9202      	str	r2, [sp, #8]
 8005bbc:	e88d 0048 	stmia.w	sp, {r3, r6}
 8005bc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005bc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005bc4:	4650      	mov	r0, sl
 8005bc6:	f001 fbc3 	bl	8007350 <_dtoa_r>
 8005bca:	2f47      	cmp	r7, #71	; 0x47
 8005bcc:	4680      	mov	r8, r0
 8005bce:	d102      	bne.n	8005bd6 <_svfprintf_r+0x41a>
 8005bd0:	07e8      	lsls	r0, r5, #31
 8005bd2:	f140 8585 	bpl.w	80066e0 <_svfprintf_r+0xf24>
 8005bd6:	eb08 0306 	add.w	r3, r8, r6
 8005bda:	2f46      	cmp	r7, #70	; 0x46
 8005bdc:	9307      	str	r3, [sp, #28]
 8005bde:	d111      	bne.n	8005c04 <_svfprintf_r+0x448>
 8005be0:	f898 3000 	ldrb.w	r3, [r8]
 8005be4:	2b30      	cmp	r3, #48	; 0x30
 8005be6:	d109      	bne.n	8005bfc <_svfprintf_r+0x440>
 8005be8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005bea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005bec:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005bee:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005bf0:	f7fa fee0 	bl	80009b4 <__aeabi_dcmpeq>
 8005bf4:	b910      	cbnz	r0, 8005bfc <_svfprintf_r+0x440>
 8005bf6:	f1c6 0601 	rsb	r6, r6, #1
 8005bfa:	961b      	str	r6, [sp, #108]	; 0x6c
 8005bfc:	9a07      	ldr	r2, [sp, #28]
 8005bfe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c00:	441a      	add	r2, r3
 8005c02:	9207      	str	r2, [sp, #28]
 8005c04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c08:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005c0a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005c0c:	f7fa fed2 	bl	80009b4 <__aeabi_dcmpeq>
 8005c10:	b990      	cbnz	r0, 8005c38 <_svfprintf_r+0x47c>
 8005c12:	2230      	movs	r2, #48	; 0x30
 8005c14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c16:	9907      	ldr	r1, [sp, #28]
 8005c18:	4299      	cmp	r1, r3
 8005c1a:	d90f      	bls.n	8005c3c <_svfprintf_r+0x480>
 8005c1c:	1c59      	adds	r1, r3, #1
 8005c1e:	911f      	str	r1, [sp, #124]	; 0x7c
 8005c20:	701a      	strb	r2, [r3, #0]
 8005c22:	e7f7      	b.n	8005c14 <_svfprintf_r+0x458>
 8005c24:	465e      	mov	r6, fp
 8005c26:	e7bc      	b.n	8005ba2 <_svfprintf_r+0x3e6>
 8005c28:	0800b068 	.word	0x0800b068
 8005c2c:	7fefffff 	.word	0x7fefffff
 8005c30:	0800b058 	.word	0x0800b058
 8005c34:	0800b05c 	.word	0x0800b05c
 8005c38:	9b07      	ldr	r3, [sp, #28]
 8005c3a:	931f      	str	r3, [sp, #124]	; 0x7c
 8005c3c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c3e:	2f47      	cmp	r7, #71	; 0x47
 8005c40:	eba3 0308 	sub.w	r3, r3, r8
 8005c44:	9307      	str	r3, [sp, #28]
 8005c46:	f040 8100 	bne.w	8005e4a <_svfprintf_r+0x68e>
 8005c4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c4c:	1cd9      	adds	r1, r3, #3
 8005c4e:	db02      	blt.n	8005c56 <_svfprintf_r+0x49a>
 8005c50:	459b      	cmp	fp, r3
 8005c52:	f280 8126 	bge.w	8005ea2 <_svfprintf_r+0x6e6>
 8005c56:	9b06      	ldr	r3, [sp, #24]
 8005c58:	3b02      	subs	r3, #2
 8005c5a:	9306      	str	r3, [sp, #24]
 8005c5c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005c5e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8005c62:	1e53      	subs	r3, r2, #1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	bfa8      	it	ge
 8005c68:	222b      	movge	r2, #43	; 0x2b
 8005c6a:	931b      	str	r3, [sp, #108]	; 0x6c
 8005c6c:	bfbc      	itt	lt
 8005c6e:	f1c2 0301 	rsblt	r3, r2, #1
 8005c72:	222d      	movlt	r2, #45	; 0x2d
 8005c74:	2b09      	cmp	r3, #9
 8005c76:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
 8005c7a:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 8005c7e:	f340 8100 	ble.w	8005e82 <_svfprintf_r+0x6c6>
 8005c82:	260a      	movs	r6, #10
 8005c84:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 8005c88:	fb93 f0f6 	sdiv	r0, r3, r6
 8005c8c:	fb06 3310 	mls	r3, r6, r0, r3
 8005c90:	2809      	cmp	r0, #9
 8005c92:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8005c96:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005c9a:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	f300 80e8 	bgt.w	8005e74 <_svfprintf_r+0x6b8>
 8005ca4:	3330      	adds	r3, #48	; 0x30
 8005ca6:	f801 3c01 	strb.w	r3, [r1, #-1]
 8005caa:	3a02      	subs	r2, #2
 8005cac:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 8005cb0:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 8005cb4:	4282      	cmp	r2, r0
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	f0c0 80de 	bcc.w	8005e78 <_svfprintf_r+0x6bc>
 8005cbc:	9a07      	ldr	r2, [sp, #28]
 8005cbe:	ab1d      	add	r3, sp, #116	; 0x74
 8005cc0:	1acb      	subs	r3, r1, r3
 8005cc2:	2a01      	cmp	r2, #1
 8005cc4:	9314      	str	r3, [sp, #80]	; 0x50
 8005cc6:	eb03 0b02 	add.w	fp, r3, r2
 8005cca:	dc02      	bgt.n	8005cd2 <_svfprintf_r+0x516>
 8005ccc:	f015 0701 	ands.w	r7, r5, #1
 8005cd0:	d002      	beq.n	8005cd8 <_svfprintf_r+0x51c>
 8005cd2:	2700      	movs	r7, #0
 8005cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cd6:	449b      	add	fp, r3
 8005cd8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005cda:	b113      	cbz	r3, 8005ce2 <_svfprintf_r+0x526>
 8005cdc:	232d      	movs	r3, #45	; 0x2d
 8005cde:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8005ce2:	2600      	movs	r6, #0
 8005ce4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8005ce6:	455e      	cmp	r6, fp
 8005ce8:	4633      	mov	r3, r6
 8005cea:	bfb8      	it	lt
 8005cec:	465b      	movlt	r3, fp
 8005cee:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cf0:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8005cf4:	b113      	cbz	r3, 8005cfc <_svfprintf_r+0x540>
 8005cf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cfc:	f015 0302 	ands.w	r3, r5, #2
 8005d00:	9316      	str	r3, [sp, #88]	; 0x58
 8005d02:	bf1e      	ittt	ne
 8005d04:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 8005d06:	3302      	addne	r3, #2
 8005d08:	930f      	strne	r3, [sp, #60]	; 0x3c
 8005d0a:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8005d0e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005d10:	d118      	bne.n	8005d44 <_svfprintf_r+0x588>
 8005d12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d16:	1a9b      	subs	r3, r3, r2
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	9310      	str	r3, [sp, #64]	; 0x40
 8005d1c:	dd12      	ble.n	8005d44 <_svfprintf_r+0x588>
 8005d1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d20:	2b10      	cmp	r3, #16
 8005d22:	4bab      	ldr	r3, [pc, #684]	; (8005fd0 <_svfprintf_r+0x814>)
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	f300 81d9 	bgt.w	80060dc <_svfprintf_r+0x920>
 8005d2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d2e:	6063      	str	r3, [r4, #4]
 8005d30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d32:	4413      	add	r3, r2
 8005d34:	9323      	str	r3, [sp, #140]	; 0x8c
 8005d36:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d38:	3301      	adds	r3, #1
 8005d3a:	2b07      	cmp	r3, #7
 8005d3c:	9322      	str	r3, [sp, #136]	; 0x88
 8005d3e:	f300 81e6 	bgt.w	800610e <_svfprintf_r+0x952>
 8005d42:	3408      	adds	r4, #8
 8005d44:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8005d48:	b173      	cbz	r3, 8005d68 <_svfprintf_r+0x5ac>
 8005d4a:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8005d4e:	6023      	str	r3, [r4, #0]
 8005d50:	2301      	movs	r3, #1
 8005d52:	6063      	str	r3, [r4, #4]
 8005d54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d56:	3301      	adds	r3, #1
 8005d58:	9323      	str	r3, [sp, #140]	; 0x8c
 8005d5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	2b07      	cmp	r3, #7
 8005d60:	9322      	str	r3, [sp, #136]	; 0x88
 8005d62:	f300 81de 	bgt.w	8006122 <_svfprintf_r+0x966>
 8005d66:	3408      	adds	r4, #8
 8005d68:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005d6a:	b16b      	cbz	r3, 8005d88 <_svfprintf_r+0x5cc>
 8005d6c:	ab1a      	add	r3, sp, #104	; 0x68
 8005d6e:	6023      	str	r3, [r4, #0]
 8005d70:	2302      	movs	r3, #2
 8005d72:	6063      	str	r3, [r4, #4]
 8005d74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d76:	3302      	adds	r3, #2
 8005d78:	9323      	str	r3, [sp, #140]	; 0x8c
 8005d7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	2b07      	cmp	r3, #7
 8005d80:	9322      	str	r3, [sp, #136]	; 0x88
 8005d82:	f300 81d8 	bgt.w	8006136 <_svfprintf_r+0x97a>
 8005d86:	3408      	adds	r4, #8
 8005d88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d8a:	2b80      	cmp	r3, #128	; 0x80
 8005d8c:	d118      	bne.n	8005dc0 <_svfprintf_r+0x604>
 8005d8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d92:	1a9b      	subs	r3, r3, r2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	9310      	str	r3, [sp, #64]	; 0x40
 8005d98:	dd12      	ble.n	8005dc0 <_svfprintf_r+0x604>
 8005d9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d9c:	2b10      	cmp	r3, #16
 8005d9e:	4b8d      	ldr	r3, [pc, #564]	; (8005fd4 <_svfprintf_r+0x818>)
 8005da0:	6023      	str	r3, [r4, #0]
 8005da2:	f300 81d2 	bgt.w	800614a <_svfprintf_r+0x98e>
 8005da6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005da8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005daa:	6063      	str	r3, [r4, #4]
 8005dac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005dae:	4413      	add	r3, r2
 8005db0:	9323      	str	r3, [sp, #140]	; 0x8c
 8005db2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005db4:	3301      	adds	r3, #1
 8005db6:	2b07      	cmp	r3, #7
 8005db8:	9322      	str	r3, [sp, #136]	; 0x88
 8005dba:	f300 81df 	bgt.w	800617c <_svfprintf_r+0x9c0>
 8005dbe:	3408      	adds	r4, #8
 8005dc0:	eba6 060b 	sub.w	r6, r6, fp
 8005dc4:	2e00      	cmp	r6, #0
 8005dc6:	dd0f      	ble.n	8005de8 <_svfprintf_r+0x62c>
 8005dc8:	4b82      	ldr	r3, [pc, #520]	; (8005fd4 <_svfprintf_r+0x818>)
 8005dca:	2e10      	cmp	r6, #16
 8005dcc:	6023      	str	r3, [r4, #0]
 8005dce:	f300 81df 	bgt.w	8006190 <_svfprintf_r+0x9d4>
 8005dd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005dd4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	6066      	str	r6, [r4, #4]
 8005dda:	2b07      	cmp	r3, #7
 8005ddc:	4406      	add	r6, r0
 8005dde:	9623      	str	r6, [sp, #140]	; 0x8c
 8005de0:	9322      	str	r3, [sp, #136]	; 0x88
 8005de2:	f300 81ec 	bgt.w	80061be <_svfprintf_r+0xa02>
 8005de6:	3408      	adds	r4, #8
 8005de8:	05eb      	lsls	r3, r5, #23
 8005dea:	f100 81f2 	bmi.w	80061d2 <_svfprintf_r+0xa16>
 8005dee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005df0:	e884 0900 	stmia.w	r4, {r8, fp}
 8005df4:	445b      	add	r3, fp
 8005df6:	9323      	str	r3, [sp, #140]	; 0x8c
 8005df8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	2b07      	cmp	r3, #7
 8005dfe:	9322      	str	r3, [sp, #136]	; 0x88
 8005e00:	f340 8419 	ble.w	8006636 <_svfprintf_r+0xe7a>
 8005e04:	aa21      	add	r2, sp, #132	; 0x84
 8005e06:	4649      	mov	r1, r9
 8005e08:	4650      	mov	r0, sl
 8005e0a:	f003 ffff 	bl	8009e0c <__ssprint_r>
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	f040 8431 	bne.w	8006676 <_svfprintf_r+0xeba>
 8005e14:	ac2e      	add	r4, sp, #184	; 0xb8
 8005e16:	076b      	lsls	r3, r5, #29
 8005e18:	f100 8410 	bmi.w	800663c <_svfprintf_r+0xe80>
 8005e1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005e22:	428a      	cmp	r2, r1
 8005e24:	bfac      	ite	ge
 8005e26:	189b      	addge	r3, r3, r2
 8005e28:	185b      	addlt	r3, r3, r1
 8005e2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e2e:	b13b      	cbz	r3, 8005e40 <_svfprintf_r+0x684>
 8005e30:	aa21      	add	r2, sp, #132	; 0x84
 8005e32:	4649      	mov	r1, r9
 8005e34:	4650      	mov	r0, sl
 8005e36:	f003 ffe9 	bl	8009e0c <__ssprint_r>
 8005e3a:	2800      	cmp	r0, #0
 8005e3c:	f040 841b 	bne.w	8006676 <_svfprintf_r+0xeba>
 8005e40:	2300      	movs	r3, #0
 8005e42:	9f08      	ldr	r7, [sp, #32]
 8005e44:	9322      	str	r3, [sp, #136]	; 0x88
 8005e46:	ac2e      	add	r4, sp, #184	; 0xb8
 8005e48:	e4f2      	b.n	8005830 <_svfprintf_r+0x74>
 8005e4a:	9b06      	ldr	r3, [sp, #24]
 8005e4c:	2b65      	cmp	r3, #101	; 0x65
 8005e4e:	f77f af05 	ble.w	8005c5c <_svfprintf_r+0x4a0>
 8005e52:	9b06      	ldr	r3, [sp, #24]
 8005e54:	2b66      	cmp	r3, #102	; 0x66
 8005e56:	d124      	bne.n	8005ea2 <_svfprintf_r+0x6e6>
 8005e58:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	dd19      	ble.n	8005e92 <_svfprintf_r+0x6d6>
 8005e5e:	f1bb 0f00 	cmp.w	fp, #0
 8005e62:	d101      	bne.n	8005e68 <_svfprintf_r+0x6ac>
 8005e64:	07ea      	lsls	r2, r5, #31
 8005e66:	d502      	bpl.n	8005e6e <_svfprintf_r+0x6b2>
 8005e68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e6a:	4413      	add	r3, r2
 8005e6c:	445b      	add	r3, fp
 8005e6e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8005e70:	469b      	mov	fp, r3
 8005e72:	e731      	b.n	8005cd8 <_svfprintf_r+0x51c>
 8005e74:	460a      	mov	r2, r1
 8005e76:	e707      	b.n	8005c88 <_svfprintf_r+0x4cc>
 8005e78:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005e7c:	f803 1b01 	strb.w	r1, [r3], #1
 8005e80:	e718      	b.n	8005cb4 <_svfprintf_r+0x4f8>
 8005e82:	2230      	movs	r2, #48	; 0x30
 8005e84:	4413      	add	r3, r2
 8005e86:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 8005e8a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8005e8e:	a91e      	add	r1, sp, #120	; 0x78
 8005e90:	e714      	b.n	8005cbc <_svfprintf_r+0x500>
 8005e92:	f1bb 0f00 	cmp.w	fp, #0
 8005e96:	d101      	bne.n	8005e9c <_svfprintf_r+0x6e0>
 8005e98:	07eb      	lsls	r3, r5, #31
 8005e9a:	d515      	bpl.n	8005ec8 <_svfprintf_r+0x70c>
 8005e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	e7e4      	b.n	8005e6c <_svfprintf_r+0x6b0>
 8005ea2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005ea4:	9b07      	ldr	r3, [sp, #28]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	db06      	blt.n	8005eb8 <_svfprintf_r+0x6fc>
 8005eaa:	07ef      	lsls	r7, r5, #31
 8005eac:	d50e      	bpl.n	8005ecc <_svfprintf_r+0x710>
 8005eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eb0:	4413      	add	r3, r2
 8005eb2:	2267      	movs	r2, #103	; 0x67
 8005eb4:	9206      	str	r2, [sp, #24]
 8005eb6:	e7da      	b.n	8005e6e <_svfprintf_r+0x6b2>
 8005eb8:	9b07      	ldr	r3, [sp, #28]
 8005eba:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ebc:	2a00      	cmp	r2, #0
 8005ebe:	440b      	add	r3, r1
 8005ec0:	dcf7      	bgt.n	8005eb2 <_svfprintf_r+0x6f6>
 8005ec2:	f1c2 0201 	rsb	r2, r2, #1
 8005ec6:	e7f3      	b.n	8005eb0 <_svfprintf_r+0x6f4>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e7d0      	b.n	8005e6e <_svfprintf_r+0x6b2>
 8005ecc:	4613      	mov	r3, r2
 8005ece:	e7f0      	b.n	8005eb2 <_svfprintf_r+0x6f6>
 8005ed0:	b10b      	cbz	r3, 8005ed6 <_svfprintf_r+0x71a>
 8005ed2:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005ed6:	f015 0f20 	tst.w	r5, #32
 8005eda:	f107 0304 	add.w	r3, r7, #4
 8005ede:	d008      	beq.n	8005ef2 <_svfprintf_r+0x736>
 8005ee0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	17ce      	asrs	r6, r1, #31
 8005ee6:	4608      	mov	r0, r1
 8005ee8:	4631      	mov	r1, r6
 8005eea:	e9c2 0100 	strd	r0, r1, [r2]
 8005eee:	461f      	mov	r7, r3
 8005ef0:	e49e      	b.n	8005830 <_svfprintf_r+0x74>
 8005ef2:	06ee      	lsls	r6, r5, #27
 8005ef4:	d503      	bpl.n	8005efe <_svfprintf_r+0x742>
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005efa:	6011      	str	r1, [r2, #0]
 8005efc:	e7f7      	b.n	8005eee <_svfprintf_r+0x732>
 8005efe:	0668      	lsls	r0, r5, #25
 8005f00:	d5f9      	bpl.n	8005ef6 <_svfprintf_r+0x73a>
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8005f08:	8011      	strh	r1, [r2, #0]
 8005f0a:	e7f0      	b.n	8005eee <_svfprintf_r+0x732>
 8005f0c:	f045 0510 	orr.w	r5, r5, #16
 8005f10:	f015 0320 	ands.w	r3, r5, #32
 8005f14:	d022      	beq.n	8005f5c <_svfprintf_r+0x7a0>
 8005f16:	3707      	adds	r7, #7
 8005f18:	f027 0707 	bic.w	r7, r7, #7
 8005f1c:	f107 0308 	add.w	r3, r7, #8
 8005f20:	9308      	str	r3, [sp, #32]
 8005f22:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005f26:	2300      	movs	r3, #0
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005f2e:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8005f32:	f000 83db 	beq.w	80066ec <_svfprintf_r+0xf30>
 8005f36:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8005f3a:	920f      	str	r2, [sp, #60]	; 0x3c
 8005f3c:	ea56 0207 	orrs.w	r2, r6, r7
 8005f40:	f040 83d9 	bne.w	80066f6 <_svfprintf_r+0xf3a>
 8005f44:	f1bb 0f00 	cmp.w	fp, #0
 8005f48:	f000 80aa 	beq.w	80060a0 <_svfprintf_r+0x8e4>
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d076      	beq.n	800603e <_svfprintf_r+0x882>
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	f000 8091 	beq.w	8006078 <_svfprintf_r+0x8bc>
 8005f56:	2600      	movs	r6, #0
 8005f58:	2700      	movs	r7, #0
 8005f5a:	e3d2      	b.n	8006702 <_svfprintf_r+0xf46>
 8005f5c:	1d3a      	adds	r2, r7, #4
 8005f5e:	f015 0110 	ands.w	r1, r5, #16
 8005f62:	9208      	str	r2, [sp, #32]
 8005f64:	d002      	beq.n	8005f6c <_svfprintf_r+0x7b0>
 8005f66:	683e      	ldr	r6, [r7, #0]
 8005f68:	2700      	movs	r7, #0
 8005f6a:	e7dd      	b.n	8005f28 <_svfprintf_r+0x76c>
 8005f6c:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8005f70:	d0f9      	beq.n	8005f66 <_svfprintf_r+0x7aa>
 8005f72:	883e      	ldrh	r6, [r7, #0]
 8005f74:	2700      	movs	r7, #0
 8005f76:	e7d6      	b.n	8005f26 <_svfprintf_r+0x76a>
 8005f78:	1d3b      	adds	r3, r7, #4
 8005f7a:	9308      	str	r3, [sp, #32]
 8005f7c:	2330      	movs	r3, #48	; 0x30
 8005f7e:	2278      	movs	r2, #120	; 0x78
 8005f80:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8005f84:	4b14      	ldr	r3, [pc, #80]	; (8005fd8 <_svfprintf_r+0x81c>)
 8005f86:	683e      	ldr	r6, [r7, #0]
 8005f88:	9315      	str	r3, [sp, #84]	; 0x54
 8005f8a:	2700      	movs	r7, #0
 8005f8c:	f045 0502 	orr.w	r5, r5, #2
 8005f90:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 8005f94:	2302      	movs	r3, #2
 8005f96:	9206      	str	r2, [sp, #24]
 8005f98:	e7c6      	b.n	8005f28 <_svfprintf_r+0x76c>
 8005f9a:	2600      	movs	r6, #0
 8005f9c:	1d3b      	adds	r3, r7, #4
 8005f9e:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8005fa2:	9308      	str	r3, [sp, #32]
 8005fa4:	f8d7 8000 	ldr.w	r8, [r7]
 8005fa8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8005fac:	d00a      	beq.n	8005fc4 <_svfprintf_r+0x808>
 8005fae:	465a      	mov	r2, fp
 8005fb0:	4631      	mov	r1, r6
 8005fb2:	4640      	mov	r0, r8
 8005fb4:	f002 fa30 	bl	8008418 <memchr>
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	f000 808d 	beq.w	80060d8 <_svfprintf_r+0x91c>
 8005fbe:	eba0 0b08 	sub.w	fp, r0, r8
 8005fc2:	e5c4      	b.n	8005b4e <_svfprintf_r+0x392>
 8005fc4:	4640      	mov	r0, r8
 8005fc6:	f7fa f8cd 	bl	8000164 <strlen>
 8005fca:	4683      	mov	fp, r0
 8005fcc:	e5bf      	b.n	8005b4e <_svfprintf_r+0x392>
 8005fce:	bf00      	nop
 8005fd0:	0800b08c 	.word	0x0800b08c
 8005fd4:	0800b09c 	.word	0x0800b09c
 8005fd8:	0800b079 	.word	0x0800b079
 8005fdc:	f045 0510 	orr.w	r5, r5, #16
 8005fe0:	06a9      	lsls	r1, r5, #26
 8005fe2:	d509      	bpl.n	8005ff8 <_svfprintf_r+0x83c>
 8005fe4:	3707      	adds	r7, #7
 8005fe6:	f027 0707 	bic.w	r7, r7, #7
 8005fea:	f107 0308 	add.w	r3, r7, #8
 8005fee:	9308      	str	r3, [sp, #32]
 8005ff0:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e797      	b.n	8005f28 <_svfprintf_r+0x76c>
 8005ff8:	1d3b      	adds	r3, r7, #4
 8005ffa:	f015 0f10 	tst.w	r5, #16
 8005ffe:	9308      	str	r3, [sp, #32]
 8006000:	d001      	beq.n	8006006 <_svfprintf_r+0x84a>
 8006002:	683e      	ldr	r6, [r7, #0]
 8006004:	e002      	b.n	800600c <_svfprintf_r+0x850>
 8006006:	066a      	lsls	r2, r5, #25
 8006008:	d5fb      	bpl.n	8006002 <_svfprintf_r+0x846>
 800600a:	883e      	ldrh	r6, [r7, #0]
 800600c:	2700      	movs	r7, #0
 800600e:	e7f1      	b.n	8005ff4 <_svfprintf_r+0x838>
 8006010:	b10b      	cbz	r3, 8006016 <_svfprintf_r+0x85a>
 8006012:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8006016:	4ba3      	ldr	r3, [pc, #652]	; (80062a4 <_svfprintf_r+0xae8>)
 8006018:	e4c5      	b.n	80059a6 <_svfprintf_r+0x1ea>
 800601a:	1d3b      	adds	r3, r7, #4
 800601c:	f015 0f10 	tst.w	r5, #16
 8006020:	9308      	str	r3, [sp, #32]
 8006022:	d001      	beq.n	8006028 <_svfprintf_r+0x86c>
 8006024:	683e      	ldr	r6, [r7, #0]
 8006026:	e002      	b.n	800602e <_svfprintf_r+0x872>
 8006028:	066e      	lsls	r6, r5, #25
 800602a:	d5fb      	bpl.n	8006024 <_svfprintf_r+0x868>
 800602c:	883e      	ldrh	r6, [r7, #0]
 800602e:	2700      	movs	r7, #0
 8006030:	e4c5      	b.n	80059be <_svfprintf_r+0x202>
 8006032:	4643      	mov	r3, r8
 8006034:	e366      	b.n	8006704 <_svfprintf_r+0xf48>
 8006036:	2f00      	cmp	r7, #0
 8006038:	bf08      	it	eq
 800603a:	2e0a      	cmpeq	r6, #10
 800603c:	d205      	bcs.n	800604a <_svfprintf_r+0x88e>
 800603e:	3630      	adds	r6, #48	; 0x30
 8006040:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8006044:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8006048:	e377      	b.n	800673a <_svfprintf_r+0xf7e>
 800604a:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800604e:	4630      	mov	r0, r6
 8006050:	4639      	mov	r1, r7
 8006052:	220a      	movs	r2, #10
 8006054:	2300      	movs	r3, #0
 8006056:	f7fa fd8d 	bl	8000b74 <__aeabi_uldivmod>
 800605a:	3230      	adds	r2, #48	; 0x30
 800605c:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8006060:	2300      	movs	r3, #0
 8006062:	4630      	mov	r0, r6
 8006064:	4639      	mov	r1, r7
 8006066:	220a      	movs	r2, #10
 8006068:	f7fa fd84 	bl	8000b74 <__aeabi_uldivmod>
 800606c:	4606      	mov	r6, r0
 800606e:	460f      	mov	r7, r1
 8006070:	ea56 0307 	orrs.w	r3, r6, r7
 8006074:	d1eb      	bne.n	800604e <_svfprintf_r+0x892>
 8006076:	e360      	b.n	800673a <_svfprintf_r+0xf7e>
 8006078:	2600      	movs	r6, #0
 800607a:	2700      	movs	r7, #0
 800607c:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8006080:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006082:	f006 030f 	and.w	r3, r6, #15
 8006086:	5cd3      	ldrb	r3, [r2, r3]
 8006088:	093a      	lsrs	r2, r7, #4
 800608a:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800608e:	0933      	lsrs	r3, r6, #4
 8006090:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8006094:	461e      	mov	r6, r3
 8006096:	4617      	mov	r7, r2
 8006098:	ea56 0307 	orrs.w	r3, r6, r7
 800609c:	d1f0      	bne.n	8006080 <_svfprintf_r+0x8c4>
 800609e:	e34c      	b.n	800673a <_svfprintf_r+0xf7e>
 80060a0:	b93b      	cbnz	r3, 80060b2 <_svfprintf_r+0x8f6>
 80060a2:	07ea      	lsls	r2, r5, #31
 80060a4:	d505      	bpl.n	80060b2 <_svfprintf_r+0x8f6>
 80060a6:	2330      	movs	r3, #48	; 0x30
 80060a8:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 80060ac:	f808 3d41 	strb.w	r3, [r8, #-65]!
 80060b0:	e343      	b.n	800673a <_svfprintf_r+0xf7e>
 80060b2:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 80060b6:	e340      	b.n	800673a <_svfprintf_r+0xf7e>
 80060b8:	b10b      	cbz	r3, 80060be <_svfprintf_r+0x902>
 80060ba:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80060be:	9b06      	ldr	r3, [sp, #24]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 82f7 	beq.w	80066b4 <_svfprintf_r+0xef8>
 80060c6:	2600      	movs	r6, #0
 80060c8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80060cc:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 80060d0:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 80060d4:	9708      	str	r7, [sp, #32]
 80060d6:	e4e3      	b.n	8005aa0 <_svfprintf_r+0x2e4>
 80060d8:	4606      	mov	r6, r0
 80060da:	e538      	b.n	8005b4e <_svfprintf_r+0x392>
 80060dc:	2310      	movs	r3, #16
 80060de:	6063      	str	r3, [r4, #4]
 80060e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80060e2:	3310      	adds	r3, #16
 80060e4:	9323      	str	r3, [sp, #140]	; 0x8c
 80060e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060e8:	3301      	adds	r3, #1
 80060ea:	2b07      	cmp	r3, #7
 80060ec:	9322      	str	r3, [sp, #136]	; 0x88
 80060ee:	dc04      	bgt.n	80060fa <_svfprintf_r+0x93e>
 80060f0:	3408      	adds	r4, #8
 80060f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060f4:	3b10      	subs	r3, #16
 80060f6:	9310      	str	r3, [sp, #64]	; 0x40
 80060f8:	e611      	b.n	8005d1e <_svfprintf_r+0x562>
 80060fa:	aa21      	add	r2, sp, #132	; 0x84
 80060fc:	4649      	mov	r1, r9
 80060fe:	4650      	mov	r0, sl
 8006100:	f003 fe84 	bl	8009e0c <__ssprint_r>
 8006104:	2800      	cmp	r0, #0
 8006106:	f040 82b6 	bne.w	8006676 <_svfprintf_r+0xeba>
 800610a:	ac2e      	add	r4, sp, #184	; 0xb8
 800610c:	e7f1      	b.n	80060f2 <_svfprintf_r+0x936>
 800610e:	aa21      	add	r2, sp, #132	; 0x84
 8006110:	4649      	mov	r1, r9
 8006112:	4650      	mov	r0, sl
 8006114:	f003 fe7a 	bl	8009e0c <__ssprint_r>
 8006118:	2800      	cmp	r0, #0
 800611a:	f040 82ac 	bne.w	8006676 <_svfprintf_r+0xeba>
 800611e:	ac2e      	add	r4, sp, #184	; 0xb8
 8006120:	e610      	b.n	8005d44 <_svfprintf_r+0x588>
 8006122:	aa21      	add	r2, sp, #132	; 0x84
 8006124:	4649      	mov	r1, r9
 8006126:	4650      	mov	r0, sl
 8006128:	f003 fe70 	bl	8009e0c <__ssprint_r>
 800612c:	2800      	cmp	r0, #0
 800612e:	f040 82a2 	bne.w	8006676 <_svfprintf_r+0xeba>
 8006132:	ac2e      	add	r4, sp, #184	; 0xb8
 8006134:	e618      	b.n	8005d68 <_svfprintf_r+0x5ac>
 8006136:	aa21      	add	r2, sp, #132	; 0x84
 8006138:	4649      	mov	r1, r9
 800613a:	4650      	mov	r0, sl
 800613c:	f003 fe66 	bl	8009e0c <__ssprint_r>
 8006140:	2800      	cmp	r0, #0
 8006142:	f040 8298 	bne.w	8006676 <_svfprintf_r+0xeba>
 8006146:	ac2e      	add	r4, sp, #184	; 0xb8
 8006148:	e61e      	b.n	8005d88 <_svfprintf_r+0x5cc>
 800614a:	2310      	movs	r3, #16
 800614c:	6063      	str	r3, [r4, #4]
 800614e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006150:	3310      	adds	r3, #16
 8006152:	9323      	str	r3, [sp, #140]	; 0x8c
 8006154:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006156:	3301      	adds	r3, #1
 8006158:	2b07      	cmp	r3, #7
 800615a:	9322      	str	r3, [sp, #136]	; 0x88
 800615c:	dc04      	bgt.n	8006168 <_svfprintf_r+0x9ac>
 800615e:	3408      	adds	r4, #8
 8006160:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006162:	3b10      	subs	r3, #16
 8006164:	9310      	str	r3, [sp, #64]	; 0x40
 8006166:	e618      	b.n	8005d9a <_svfprintf_r+0x5de>
 8006168:	aa21      	add	r2, sp, #132	; 0x84
 800616a:	4649      	mov	r1, r9
 800616c:	4650      	mov	r0, sl
 800616e:	f003 fe4d 	bl	8009e0c <__ssprint_r>
 8006172:	2800      	cmp	r0, #0
 8006174:	f040 827f 	bne.w	8006676 <_svfprintf_r+0xeba>
 8006178:	ac2e      	add	r4, sp, #184	; 0xb8
 800617a:	e7f1      	b.n	8006160 <_svfprintf_r+0x9a4>
 800617c:	aa21      	add	r2, sp, #132	; 0x84
 800617e:	4649      	mov	r1, r9
 8006180:	4650      	mov	r0, sl
 8006182:	f003 fe43 	bl	8009e0c <__ssprint_r>
 8006186:	2800      	cmp	r0, #0
 8006188:	f040 8275 	bne.w	8006676 <_svfprintf_r+0xeba>
 800618c:	ac2e      	add	r4, sp, #184	; 0xb8
 800618e:	e617      	b.n	8005dc0 <_svfprintf_r+0x604>
 8006190:	2310      	movs	r3, #16
 8006192:	6063      	str	r3, [r4, #4]
 8006194:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006196:	3310      	adds	r3, #16
 8006198:	9323      	str	r3, [sp, #140]	; 0x8c
 800619a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800619c:	3301      	adds	r3, #1
 800619e:	2b07      	cmp	r3, #7
 80061a0:	9322      	str	r3, [sp, #136]	; 0x88
 80061a2:	dc02      	bgt.n	80061aa <_svfprintf_r+0x9ee>
 80061a4:	3408      	adds	r4, #8
 80061a6:	3e10      	subs	r6, #16
 80061a8:	e60e      	b.n	8005dc8 <_svfprintf_r+0x60c>
 80061aa:	aa21      	add	r2, sp, #132	; 0x84
 80061ac:	4649      	mov	r1, r9
 80061ae:	4650      	mov	r0, sl
 80061b0:	f003 fe2c 	bl	8009e0c <__ssprint_r>
 80061b4:	2800      	cmp	r0, #0
 80061b6:	f040 825e 	bne.w	8006676 <_svfprintf_r+0xeba>
 80061ba:	ac2e      	add	r4, sp, #184	; 0xb8
 80061bc:	e7f3      	b.n	80061a6 <_svfprintf_r+0x9ea>
 80061be:	aa21      	add	r2, sp, #132	; 0x84
 80061c0:	4649      	mov	r1, r9
 80061c2:	4650      	mov	r0, sl
 80061c4:	f003 fe22 	bl	8009e0c <__ssprint_r>
 80061c8:	2800      	cmp	r0, #0
 80061ca:	f040 8254 	bne.w	8006676 <_svfprintf_r+0xeba>
 80061ce:	ac2e      	add	r4, sp, #184	; 0xb8
 80061d0:	e60a      	b.n	8005de8 <_svfprintf_r+0x62c>
 80061d2:	9b06      	ldr	r3, [sp, #24]
 80061d4:	2b65      	cmp	r3, #101	; 0x65
 80061d6:	f340 81a9 	ble.w	800652c <_svfprintf_r+0xd70>
 80061da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80061dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80061de:	980d      	ldr	r0, [sp, #52]	; 0x34
 80061e0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80061e2:	f7fa fbe7 	bl	80009b4 <__aeabi_dcmpeq>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	d062      	beq.n	80062b0 <_svfprintf_r+0xaf4>
 80061ea:	4b2f      	ldr	r3, [pc, #188]	; (80062a8 <_svfprintf_r+0xaec>)
 80061ec:	6023      	str	r3, [r4, #0]
 80061ee:	2301      	movs	r3, #1
 80061f0:	6063      	str	r3, [r4, #4]
 80061f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061f4:	3301      	adds	r3, #1
 80061f6:	9323      	str	r3, [sp, #140]	; 0x8c
 80061f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061fa:	3301      	adds	r3, #1
 80061fc:	2b07      	cmp	r3, #7
 80061fe:	9322      	str	r3, [sp, #136]	; 0x88
 8006200:	dc25      	bgt.n	800624e <_svfprintf_r+0xa92>
 8006202:	3408      	adds	r4, #8
 8006204:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006206:	9a07      	ldr	r2, [sp, #28]
 8006208:	4293      	cmp	r3, r2
 800620a:	db02      	blt.n	8006212 <_svfprintf_r+0xa56>
 800620c:	07ee      	lsls	r6, r5, #31
 800620e:	f57f ae02 	bpl.w	8005e16 <_svfprintf_r+0x65a>
 8006212:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006214:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006216:	6023      	str	r3, [r4, #0]
 8006218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800621a:	6063      	str	r3, [r4, #4]
 800621c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800621e:	4413      	add	r3, r2
 8006220:	9323      	str	r3, [sp, #140]	; 0x8c
 8006222:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006224:	3301      	adds	r3, #1
 8006226:	2b07      	cmp	r3, #7
 8006228:	9322      	str	r3, [sp, #136]	; 0x88
 800622a:	dc1a      	bgt.n	8006262 <_svfprintf_r+0xaa6>
 800622c:	3408      	adds	r4, #8
 800622e:	9b07      	ldr	r3, [sp, #28]
 8006230:	1e5e      	subs	r6, r3, #1
 8006232:	2e00      	cmp	r6, #0
 8006234:	f77f adef 	ble.w	8005e16 <_svfprintf_r+0x65a>
 8006238:	f04f 0810 	mov.w	r8, #16
 800623c:	4f1b      	ldr	r7, [pc, #108]	; (80062ac <_svfprintf_r+0xaf0>)
 800623e:	2e10      	cmp	r6, #16
 8006240:	6027      	str	r7, [r4, #0]
 8006242:	dc18      	bgt.n	8006276 <_svfprintf_r+0xaba>
 8006244:	6066      	str	r6, [r4, #4]
 8006246:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006248:	441e      	add	r6, r3
 800624a:	9623      	str	r6, [sp, #140]	; 0x8c
 800624c:	e5d4      	b.n	8005df8 <_svfprintf_r+0x63c>
 800624e:	aa21      	add	r2, sp, #132	; 0x84
 8006250:	4649      	mov	r1, r9
 8006252:	4650      	mov	r0, sl
 8006254:	f003 fdda 	bl	8009e0c <__ssprint_r>
 8006258:	2800      	cmp	r0, #0
 800625a:	f040 820c 	bne.w	8006676 <_svfprintf_r+0xeba>
 800625e:	ac2e      	add	r4, sp, #184	; 0xb8
 8006260:	e7d0      	b.n	8006204 <_svfprintf_r+0xa48>
 8006262:	aa21      	add	r2, sp, #132	; 0x84
 8006264:	4649      	mov	r1, r9
 8006266:	4650      	mov	r0, sl
 8006268:	f003 fdd0 	bl	8009e0c <__ssprint_r>
 800626c:	2800      	cmp	r0, #0
 800626e:	f040 8202 	bne.w	8006676 <_svfprintf_r+0xeba>
 8006272:	ac2e      	add	r4, sp, #184	; 0xb8
 8006274:	e7db      	b.n	800622e <_svfprintf_r+0xa72>
 8006276:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006278:	f8c4 8004 	str.w	r8, [r4, #4]
 800627c:	3310      	adds	r3, #16
 800627e:	9323      	str	r3, [sp, #140]	; 0x8c
 8006280:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006282:	3301      	adds	r3, #1
 8006284:	2b07      	cmp	r3, #7
 8006286:	9322      	str	r3, [sp, #136]	; 0x88
 8006288:	dc02      	bgt.n	8006290 <_svfprintf_r+0xad4>
 800628a:	3408      	adds	r4, #8
 800628c:	3e10      	subs	r6, #16
 800628e:	e7d6      	b.n	800623e <_svfprintf_r+0xa82>
 8006290:	aa21      	add	r2, sp, #132	; 0x84
 8006292:	4649      	mov	r1, r9
 8006294:	4650      	mov	r0, sl
 8006296:	f003 fdb9 	bl	8009e0c <__ssprint_r>
 800629a:	2800      	cmp	r0, #0
 800629c:	f040 81eb 	bne.w	8006676 <_svfprintf_r+0xeba>
 80062a0:	ac2e      	add	r4, sp, #184	; 0xb8
 80062a2:	e7f3      	b.n	800628c <_svfprintf_r+0xad0>
 80062a4:	0800b079 	.word	0x0800b079
 80062a8:	0800b08a 	.word	0x0800b08a
 80062ac:	0800b09c 	.word	0x0800b09c
 80062b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	dc7a      	bgt.n	80063ac <_svfprintf_r+0xbf0>
 80062b6:	4b9b      	ldr	r3, [pc, #620]	; (8006524 <_svfprintf_r+0xd68>)
 80062b8:	6023      	str	r3, [r4, #0]
 80062ba:	2301      	movs	r3, #1
 80062bc:	6063      	str	r3, [r4, #4]
 80062be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80062c0:	3301      	adds	r3, #1
 80062c2:	9323      	str	r3, [sp, #140]	; 0x8c
 80062c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062c6:	3301      	adds	r3, #1
 80062c8:	2b07      	cmp	r3, #7
 80062ca:	9322      	str	r3, [sp, #136]	; 0x88
 80062cc:	dc44      	bgt.n	8006358 <_svfprintf_r+0xb9c>
 80062ce:	3408      	adds	r4, #8
 80062d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062d2:	b923      	cbnz	r3, 80062de <_svfprintf_r+0xb22>
 80062d4:	9b07      	ldr	r3, [sp, #28]
 80062d6:	b913      	cbnz	r3, 80062de <_svfprintf_r+0xb22>
 80062d8:	07e8      	lsls	r0, r5, #31
 80062da:	f57f ad9c 	bpl.w	8005e16 <_svfprintf_r+0x65a>
 80062de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062e2:	6023      	str	r3, [r4, #0]
 80062e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062e6:	6063      	str	r3, [r4, #4]
 80062e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80062ea:	4413      	add	r3, r2
 80062ec:	9323      	str	r3, [sp, #140]	; 0x8c
 80062ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062f0:	3301      	adds	r3, #1
 80062f2:	2b07      	cmp	r3, #7
 80062f4:	9322      	str	r3, [sp, #136]	; 0x88
 80062f6:	dc39      	bgt.n	800636c <_svfprintf_r+0xbb0>
 80062f8:	f104 0308 	add.w	r3, r4, #8
 80062fc:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80062fe:	2e00      	cmp	r6, #0
 8006300:	da19      	bge.n	8006336 <_svfprintf_r+0xb7a>
 8006302:	2410      	movs	r4, #16
 8006304:	4f88      	ldr	r7, [pc, #544]	; (8006528 <_svfprintf_r+0xd6c>)
 8006306:	4276      	negs	r6, r6
 8006308:	2e10      	cmp	r6, #16
 800630a:	601f      	str	r7, [r3, #0]
 800630c:	dc38      	bgt.n	8006380 <_svfprintf_r+0xbc4>
 800630e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006310:	605e      	str	r6, [r3, #4]
 8006312:	4416      	add	r6, r2
 8006314:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006316:	9623      	str	r6, [sp, #140]	; 0x8c
 8006318:	3201      	adds	r2, #1
 800631a:	2a07      	cmp	r2, #7
 800631c:	f103 0308 	add.w	r3, r3, #8
 8006320:	9222      	str	r2, [sp, #136]	; 0x88
 8006322:	dd08      	ble.n	8006336 <_svfprintf_r+0xb7a>
 8006324:	aa21      	add	r2, sp, #132	; 0x84
 8006326:	4649      	mov	r1, r9
 8006328:	4650      	mov	r0, sl
 800632a:	f003 fd6f 	bl	8009e0c <__ssprint_r>
 800632e:	2800      	cmp	r0, #0
 8006330:	f040 81a1 	bne.w	8006676 <_svfprintf_r+0xeba>
 8006334:	ab2e      	add	r3, sp, #184	; 0xb8
 8006336:	9a07      	ldr	r2, [sp, #28]
 8006338:	9907      	ldr	r1, [sp, #28]
 800633a:	605a      	str	r2, [r3, #4]
 800633c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800633e:	f8c3 8000 	str.w	r8, [r3]
 8006342:	440a      	add	r2, r1
 8006344:	9223      	str	r2, [sp, #140]	; 0x8c
 8006346:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006348:	3201      	adds	r2, #1
 800634a:	2a07      	cmp	r2, #7
 800634c:	9222      	str	r2, [sp, #136]	; 0x88
 800634e:	f73f ad59 	bgt.w	8005e04 <_svfprintf_r+0x648>
 8006352:	f103 0408 	add.w	r4, r3, #8
 8006356:	e55e      	b.n	8005e16 <_svfprintf_r+0x65a>
 8006358:	aa21      	add	r2, sp, #132	; 0x84
 800635a:	4649      	mov	r1, r9
 800635c:	4650      	mov	r0, sl
 800635e:	f003 fd55 	bl	8009e0c <__ssprint_r>
 8006362:	2800      	cmp	r0, #0
 8006364:	f040 8187 	bne.w	8006676 <_svfprintf_r+0xeba>
 8006368:	ac2e      	add	r4, sp, #184	; 0xb8
 800636a:	e7b1      	b.n	80062d0 <_svfprintf_r+0xb14>
 800636c:	aa21      	add	r2, sp, #132	; 0x84
 800636e:	4649      	mov	r1, r9
 8006370:	4650      	mov	r0, sl
 8006372:	f003 fd4b 	bl	8009e0c <__ssprint_r>
 8006376:	2800      	cmp	r0, #0
 8006378:	f040 817d 	bne.w	8006676 <_svfprintf_r+0xeba>
 800637c:	ab2e      	add	r3, sp, #184	; 0xb8
 800637e:	e7bd      	b.n	80062fc <_svfprintf_r+0xb40>
 8006380:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006382:	605c      	str	r4, [r3, #4]
 8006384:	3210      	adds	r2, #16
 8006386:	9223      	str	r2, [sp, #140]	; 0x8c
 8006388:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800638a:	3201      	adds	r2, #1
 800638c:	2a07      	cmp	r2, #7
 800638e:	9222      	str	r2, [sp, #136]	; 0x88
 8006390:	dc02      	bgt.n	8006398 <_svfprintf_r+0xbdc>
 8006392:	3308      	adds	r3, #8
 8006394:	3e10      	subs	r6, #16
 8006396:	e7b7      	b.n	8006308 <_svfprintf_r+0xb4c>
 8006398:	aa21      	add	r2, sp, #132	; 0x84
 800639a:	4649      	mov	r1, r9
 800639c:	4650      	mov	r0, sl
 800639e:	f003 fd35 	bl	8009e0c <__ssprint_r>
 80063a2:	2800      	cmp	r0, #0
 80063a4:	f040 8167 	bne.w	8006676 <_svfprintf_r+0xeba>
 80063a8:	ab2e      	add	r3, sp, #184	; 0xb8
 80063aa:	e7f3      	b.n	8006394 <_svfprintf_r+0xbd8>
 80063ac:	9b07      	ldr	r3, [sp, #28]
 80063ae:	42bb      	cmp	r3, r7
 80063b0:	bfa8      	it	ge
 80063b2:	463b      	movge	r3, r7
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	461e      	mov	r6, r3
 80063b8:	dd0b      	ble.n	80063d2 <_svfprintf_r+0xc16>
 80063ba:	6063      	str	r3, [r4, #4]
 80063bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063be:	f8c4 8000 	str.w	r8, [r4]
 80063c2:	4433      	add	r3, r6
 80063c4:	9323      	str	r3, [sp, #140]	; 0x8c
 80063c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063c8:	3301      	adds	r3, #1
 80063ca:	2b07      	cmp	r3, #7
 80063cc:	9322      	str	r3, [sp, #136]	; 0x88
 80063ce:	dc5f      	bgt.n	8006490 <_svfprintf_r+0xcd4>
 80063d0:	3408      	adds	r4, #8
 80063d2:	2e00      	cmp	r6, #0
 80063d4:	bfb4      	ite	lt
 80063d6:	463e      	movlt	r6, r7
 80063d8:	1bbe      	subge	r6, r7, r6
 80063da:	2e00      	cmp	r6, #0
 80063dc:	dd0f      	ble.n	80063fe <_svfprintf_r+0xc42>
 80063de:	f8df b148 	ldr.w	fp, [pc, #328]	; 8006528 <_svfprintf_r+0xd6c>
 80063e2:	2e10      	cmp	r6, #16
 80063e4:	f8c4 b000 	str.w	fp, [r4]
 80063e8:	dc5c      	bgt.n	80064a4 <_svfprintf_r+0xce8>
 80063ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063ec:	6066      	str	r6, [r4, #4]
 80063ee:	441e      	add	r6, r3
 80063f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063f2:	9623      	str	r6, [sp, #140]	; 0x8c
 80063f4:	3301      	adds	r3, #1
 80063f6:	2b07      	cmp	r3, #7
 80063f8:	9322      	str	r3, [sp, #136]	; 0x88
 80063fa:	dc6a      	bgt.n	80064d2 <_svfprintf_r+0xd16>
 80063fc:	3408      	adds	r4, #8
 80063fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006400:	9a07      	ldr	r2, [sp, #28]
 8006402:	4293      	cmp	r3, r2
 8006404:	db01      	blt.n	800640a <_svfprintf_r+0xc4e>
 8006406:	07e9      	lsls	r1, r5, #31
 8006408:	d50d      	bpl.n	8006426 <_svfprintf_r+0xc6a>
 800640a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800640c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800640e:	6023      	str	r3, [r4, #0]
 8006410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006412:	6063      	str	r3, [r4, #4]
 8006414:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006416:	4413      	add	r3, r2
 8006418:	9323      	str	r3, [sp, #140]	; 0x8c
 800641a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800641c:	3301      	adds	r3, #1
 800641e:	2b07      	cmp	r3, #7
 8006420:	9322      	str	r3, [sp, #136]	; 0x88
 8006422:	dc60      	bgt.n	80064e6 <_svfprintf_r+0xd2a>
 8006424:	3408      	adds	r4, #8
 8006426:	9b07      	ldr	r3, [sp, #28]
 8006428:	9a07      	ldr	r2, [sp, #28]
 800642a:	1bde      	subs	r6, r3, r7
 800642c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	429e      	cmp	r6, r3
 8006432:	bfa8      	it	ge
 8006434:	461e      	movge	r6, r3
 8006436:	2e00      	cmp	r6, #0
 8006438:	dd0b      	ble.n	8006452 <_svfprintf_r+0xc96>
 800643a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800643c:	4447      	add	r7, r8
 800643e:	4433      	add	r3, r6
 8006440:	9323      	str	r3, [sp, #140]	; 0x8c
 8006442:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006444:	6027      	str	r7, [r4, #0]
 8006446:	3301      	adds	r3, #1
 8006448:	2b07      	cmp	r3, #7
 800644a:	6066      	str	r6, [r4, #4]
 800644c:	9322      	str	r3, [sp, #136]	; 0x88
 800644e:	dc54      	bgt.n	80064fa <_svfprintf_r+0xd3e>
 8006450:	3408      	adds	r4, #8
 8006452:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006454:	9a07      	ldr	r2, [sp, #28]
 8006456:	2e00      	cmp	r6, #0
 8006458:	eba2 0303 	sub.w	r3, r2, r3
 800645c:	bfb4      	ite	lt
 800645e:	461e      	movlt	r6, r3
 8006460:	1b9e      	subge	r6, r3, r6
 8006462:	2e00      	cmp	r6, #0
 8006464:	f77f acd7 	ble.w	8005e16 <_svfprintf_r+0x65a>
 8006468:	f04f 0810 	mov.w	r8, #16
 800646c:	4f2e      	ldr	r7, [pc, #184]	; (8006528 <_svfprintf_r+0xd6c>)
 800646e:	2e10      	cmp	r6, #16
 8006470:	6027      	str	r7, [r4, #0]
 8006472:	f77f aee7 	ble.w	8006244 <_svfprintf_r+0xa88>
 8006476:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006478:	f8c4 8004 	str.w	r8, [r4, #4]
 800647c:	3310      	adds	r3, #16
 800647e:	9323      	str	r3, [sp, #140]	; 0x8c
 8006480:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006482:	3301      	adds	r3, #1
 8006484:	2b07      	cmp	r3, #7
 8006486:	9322      	str	r3, [sp, #136]	; 0x88
 8006488:	dc41      	bgt.n	800650e <_svfprintf_r+0xd52>
 800648a:	3408      	adds	r4, #8
 800648c:	3e10      	subs	r6, #16
 800648e:	e7ee      	b.n	800646e <_svfprintf_r+0xcb2>
 8006490:	aa21      	add	r2, sp, #132	; 0x84
 8006492:	4649      	mov	r1, r9
 8006494:	4650      	mov	r0, sl
 8006496:	f003 fcb9 	bl	8009e0c <__ssprint_r>
 800649a:	2800      	cmp	r0, #0
 800649c:	f040 80eb 	bne.w	8006676 <_svfprintf_r+0xeba>
 80064a0:	ac2e      	add	r4, sp, #184	; 0xb8
 80064a2:	e796      	b.n	80063d2 <_svfprintf_r+0xc16>
 80064a4:	2310      	movs	r3, #16
 80064a6:	6063      	str	r3, [r4, #4]
 80064a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064aa:	3310      	adds	r3, #16
 80064ac:	9323      	str	r3, [sp, #140]	; 0x8c
 80064ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064b0:	3301      	adds	r3, #1
 80064b2:	2b07      	cmp	r3, #7
 80064b4:	9322      	str	r3, [sp, #136]	; 0x88
 80064b6:	dc02      	bgt.n	80064be <_svfprintf_r+0xd02>
 80064b8:	3408      	adds	r4, #8
 80064ba:	3e10      	subs	r6, #16
 80064bc:	e791      	b.n	80063e2 <_svfprintf_r+0xc26>
 80064be:	aa21      	add	r2, sp, #132	; 0x84
 80064c0:	4649      	mov	r1, r9
 80064c2:	4650      	mov	r0, sl
 80064c4:	f003 fca2 	bl	8009e0c <__ssprint_r>
 80064c8:	2800      	cmp	r0, #0
 80064ca:	f040 80d4 	bne.w	8006676 <_svfprintf_r+0xeba>
 80064ce:	ac2e      	add	r4, sp, #184	; 0xb8
 80064d0:	e7f3      	b.n	80064ba <_svfprintf_r+0xcfe>
 80064d2:	aa21      	add	r2, sp, #132	; 0x84
 80064d4:	4649      	mov	r1, r9
 80064d6:	4650      	mov	r0, sl
 80064d8:	f003 fc98 	bl	8009e0c <__ssprint_r>
 80064dc:	2800      	cmp	r0, #0
 80064de:	f040 80ca 	bne.w	8006676 <_svfprintf_r+0xeba>
 80064e2:	ac2e      	add	r4, sp, #184	; 0xb8
 80064e4:	e78b      	b.n	80063fe <_svfprintf_r+0xc42>
 80064e6:	aa21      	add	r2, sp, #132	; 0x84
 80064e8:	4649      	mov	r1, r9
 80064ea:	4650      	mov	r0, sl
 80064ec:	f003 fc8e 	bl	8009e0c <__ssprint_r>
 80064f0:	2800      	cmp	r0, #0
 80064f2:	f040 80c0 	bne.w	8006676 <_svfprintf_r+0xeba>
 80064f6:	ac2e      	add	r4, sp, #184	; 0xb8
 80064f8:	e795      	b.n	8006426 <_svfprintf_r+0xc6a>
 80064fa:	aa21      	add	r2, sp, #132	; 0x84
 80064fc:	4649      	mov	r1, r9
 80064fe:	4650      	mov	r0, sl
 8006500:	f003 fc84 	bl	8009e0c <__ssprint_r>
 8006504:	2800      	cmp	r0, #0
 8006506:	f040 80b6 	bne.w	8006676 <_svfprintf_r+0xeba>
 800650a:	ac2e      	add	r4, sp, #184	; 0xb8
 800650c:	e7a1      	b.n	8006452 <_svfprintf_r+0xc96>
 800650e:	aa21      	add	r2, sp, #132	; 0x84
 8006510:	4649      	mov	r1, r9
 8006512:	4650      	mov	r0, sl
 8006514:	f003 fc7a 	bl	8009e0c <__ssprint_r>
 8006518:	2800      	cmp	r0, #0
 800651a:	f040 80ac 	bne.w	8006676 <_svfprintf_r+0xeba>
 800651e:	ac2e      	add	r4, sp, #184	; 0xb8
 8006520:	e7b4      	b.n	800648c <_svfprintf_r+0xcd0>
 8006522:	bf00      	nop
 8006524:	0800b08a 	.word	0x0800b08a
 8006528:	0800b09c 	.word	0x0800b09c
 800652c:	9b07      	ldr	r3, [sp, #28]
 800652e:	2b01      	cmp	r3, #1
 8006530:	dc01      	bgt.n	8006536 <_svfprintf_r+0xd7a>
 8006532:	07ea      	lsls	r2, r5, #31
 8006534:	d576      	bpl.n	8006624 <_svfprintf_r+0xe68>
 8006536:	2301      	movs	r3, #1
 8006538:	6063      	str	r3, [r4, #4]
 800653a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800653c:	f8c4 8000 	str.w	r8, [r4]
 8006540:	3301      	adds	r3, #1
 8006542:	9323      	str	r3, [sp, #140]	; 0x8c
 8006544:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006546:	3301      	adds	r3, #1
 8006548:	2b07      	cmp	r3, #7
 800654a:	9322      	str	r3, [sp, #136]	; 0x88
 800654c:	dc36      	bgt.n	80065bc <_svfprintf_r+0xe00>
 800654e:	3408      	adds	r4, #8
 8006550:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006552:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006558:	6063      	str	r3, [r4, #4]
 800655a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800655c:	4413      	add	r3, r2
 800655e:	9323      	str	r3, [sp, #140]	; 0x8c
 8006560:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006562:	3301      	adds	r3, #1
 8006564:	2b07      	cmp	r3, #7
 8006566:	9322      	str	r3, [sp, #136]	; 0x88
 8006568:	dc31      	bgt.n	80065ce <_svfprintf_r+0xe12>
 800656a:	3408      	adds	r4, #8
 800656c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800656e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006570:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006572:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006574:	f7fa fa1e 	bl	80009b4 <__aeabi_dcmpeq>
 8006578:	9b07      	ldr	r3, [sp, #28]
 800657a:	1e5e      	subs	r6, r3, #1
 800657c:	2800      	cmp	r0, #0
 800657e:	d12f      	bne.n	80065e0 <_svfprintf_r+0xe24>
 8006580:	f108 0301 	add.w	r3, r8, #1
 8006584:	e884 0048 	stmia.w	r4, {r3, r6}
 8006588:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800658a:	9a07      	ldr	r2, [sp, #28]
 800658c:	3b01      	subs	r3, #1
 800658e:	4413      	add	r3, r2
 8006590:	9323      	str	r3, [sp, #140]	; 0x8c
 8006592:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006594:	3301      	adds	r3, #1
 8006596:	2b07      	cmp	r3, #7
 8006598:	9322      	str	r3, [sp, #136]	; 0x88
 800659a:	dd4a      	ble.n	8006632 <_svfprintf_r+0xe76>
 800659c:	aa21      	add	r2, sp, #132	; 0x84
 800659e:	4649      	mov	r1, r9
 80065a0:	4650      	mov	r0, sl
 80065a2:	f003 fc33 	bl	8009e0c <__ssprint_r>
 80065a6:	2800      	cmp	r0, #0
 80065a8:	d165      	bne.n	8006676 <_svfprintf_r+0xeba>
 80065aa:	ac2e      	add	r4, sp, #184	; 0xb8
 80065ac:	ab1d      	add	r3, sp, #116	; 0x74
 80065ae:	6023      	str	r3, [r4, #0]
 80065b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80065b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80065b4:	6063      	str	r3, [r4, #4]
 80065b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065b8:	4413      	add	r3, r2
 80065ba:	e41c      	b.n	8005df6 <_svfprintf_r+0x63a>
 80065bc:	aa21      	add	r2, sp, #132	; 0x84
 80065be:	4649      	mov	r1, r9
 80065c0:	4650      	mov	r0, sl
 80065c2:	f003 fc23 	bl	8009e0c <__ssprint_r>
 80065c6:	2800      	cmp	r0, #0
 80065c8:	d155      	bne.n	8006676 <_svfprintf_r+0xeba>
 80065ca:	ac2e      	add	r4, sp, #184	; 0xb8
 80065cc:	e7c0      	b.n	8006550 <_svfprintf_r+0xd94>
 80065ce:	aa21      	add	r2, sp, #132	; 0x84
 80065d0:	4649      	mov	r1, r9
 80065d2:	4650      	mov	r0, sl
 80065d4:	f003 fc1a 	bl	8009e0c <__ssprint_r>
 80065d8:	2800      	cmp	r0, #0
 80065da:	d14c      	bne.n	8006676 <_svfprintf_r+0xeba>
 80065dc:	ac2e      	add	r4, sp, #184	; 0xb8
 80065de:	e7c5      	b.n	800656c <_svfprintf_r+0xdb0>
 80065e0:	2e00      	cmp	r6, #0
 80065e2:	dde3      	ble.n	80065ac <_svfprintf_r+0xdf0>
 80065e4:	f04f 0810 	mov.w	r8, #16
 80065e8:	4f58      	ldr	r7, [pc, #352]	; (800674c <_svfprintf_r+0xf90>)
 80065ea:	2e10      	cmp	r6, #16
 80065ec:	6027      	str	r7, [r4, #0]
 80065ee:	dc04      	bgt.n	80065fa <_svfprintf_r+0xe3e>
 80065f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065f2:	6066      	str	r6, [r4, #4]
 80065f4:	441e      	add	r6, r3
 80065f6:	9623      	str	r6, [sp, #140]	; 0x8c
 80065f8:	e7cb      	b.n	8006592 <_svfprintf_r+0xdd6>
 80065fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065fc:	f8c4 8004 	str.w	r8, [r4, #4]
 8006600:	3310      	adds	r3, #16
 8006602:	9323      	str	r3, [sp, #140]	; 0x8c
 8006604:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006606:	3301      	adds	r3, #1
 8006608:	2b07      	cmp	r3, #7
 800660a:	9322      	str	r3, [sp, #136]	; 0x88
 800660c:	dc02      	bgt.n	8006614 <_svfprintf_r+0xe58>
 800660e:	3408      	adds	r4, #8
 8006610:	3e10      	subs	r6, #16
 8006612:	e7ea      	b.n	80065ea <_svfprintf_r+0xe2e>
 8006614:	aa21      	add	r2, sp, #132	; 0x84
 8006616:	4649      	mov	r1, r9
 8006618:	4650      	mov	r0, sl
 800661a:	f003 fbf7 	bl	8009e0c <__ssprint_r>
 800661e:	bb50      	cbnz	r0, 8006676 <_svfprintf_r+0xeba>
 8006620:	ac2e      	add	r4, sp, #184	; 0xb8
 8006622:	e7f5      	b.n	8006610 <_svfprintf_r+0xe54>
 8006624:	2301      	movs	r3, #1
 8006626:	6063      	str	r3, [r4, #4]
 8006628:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800662a:	f8c4 8000 	str.w	r8, [r4]
 800662e:	3301      	adds	r3, #1
 8006630:	e7ae      	b.n	8006590 <_svfprintf_r+0xdd4>
 8006632:	3408      	adds	r4, #8
 8006634:	e7ba      	b.n	80065ac <_svfprintf_r+0xdf0>
 8006636:	3408      	adds	r4, #8
 8006638:	f7ff bbed 	b.w	8005e16 <_svfprintf_r+0x65a>
 800663c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800663e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006640:	1a9d      	subs	r5, r3, r2
 8006642:	2d00      	cmp	r5, #0
 8006644:	f77f abea 	ble.w	8005e1c <_svfprintf_r+0x660>
 8006648:	2610      	movs	r6, #16
 800664a:	4b41      	ldr	r3, [pc, #260]	; (8006750 <_svfprintf_r+0xf94>)
 800664c:	2d10      	cmp	r5, #16
 800664e:	6023      	str	r3, [r4, #0]
 8006650:	dc1b      	bgt.n	800668a <_svfprintf_r+0xece>
 8006652:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006654:	6065      	str	r5, [r4, #4]
 8006656:	441d      	add	r5, r3
 8006658:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800665a:	9523      	str	r5, [sp, #140]	; 0x8c
 800665c:	3301      	adds	r3, #1
 800665e:	2b07      	cmp	r3, #7
 8006660:	9322      	str	r3, [sp, #136]	; 0x88
 8006662:	f77f abdb 	ble.w	8005e1c <_svfprintf_r+0x660>
 8006666:	aa21      	add	r2, sp, #132	; 0x84
 8006668:	4649      	mov	r1, r9
 800666a:	4650      	mov	r0, sl
 800666c:	f003 fbce 	bl	8009e0c <__ssprint_r>
 8006670:	2800      	cmp	r0, #0
 8006672:	f43f abd3 	beq.w	8005e1c <_svfprintf_r+0x660>
 8006676:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800667a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800667e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006680:	bf18      	it	ne
 8006682:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8006686:	f7ff b8bd 	b.w	8005804 <_svfprintf_r+0x48>
 800668a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800668c:	6066      	str	r6, [r4, #4]
 800668e:	3310      	adds	r3, #16
 8006690:	9323      	str	r3, [sp, #140]	; 0x8c
 8006692:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006694:	3301      	adds	r3, #1
 8006696:	2b07      	cmp	r3, #7
 8006698:	9322      	str	r3, [sp, #136]	; 0x88
 800669a:	dc02      	bgt.n	80066a2 <_svfprintf_r+0xee6>
 800669c:	3408      	adds	r4, #8
 800669e:	3d10      	subs	r5, #16
 80066a0:	e7d3      	b.n	800664a <_svfprintf_r+0xe8e>
 80066a2:	aa21      	add	r2, sp, #132	; 0x84
 80066a4:	4649      	mov	r1, r9
 80066a6:	4650      	mov	r0, sl
 80066a8:	f003 fbb0 	bl	8009e0c <__ssprint_r>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	d1e2      	bne.n	8006676 <_svfprintf_r+0xeba>
 80066b0:	ac2e      	add	r4, sp, #184	; 0xb8
 80066b2:	e7f4      	b.n	800669e <_svfprintf_r+0xee2>
 80066b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d0dd      	beq.n	8006676 <_svfprintf_r+0xeba>
 80066ba:	aa21      	add	r2, sp, #132	; 0x84
 80066bc:	4649      	mov	r1, r9
 80066be:	4650      	mov	r0, sl
 80066c0:	f003 fba4 	bl	8009e0c <__ssprint_r>
 80066c4:	e7d7      	b.n	8006676 <_svfprintf_r+0xeba>
 80066c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066ca:	980d      	ldr	r0, [sp, #52]	; 0x34
 80066cc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80066ce:	f7fa f9a3 	bl	8000a18 <__aeabi_dcmpun>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	f43f aa3d 	beq.w	8005b52 <_svfprintf_r+0x396>
 80066d8:	4b1e      	ldr	r3, [pc, #120]	; (8006754 <_svfprintf_r+0xf98>)
 80066da:	4a1f      	ldr	r2, [pc, #124]	; (8006758 <_svfprintf_r+0xf9c>)
 80066dc:	f7ff ba2d 	b.w	8005b3a <_svfprintf_r+0x37e>
 80066e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80066e2:	eba3 0308 	sub.w	r3, r3, r8
 80066e6:	9307      	str	r3, [sp, #28]
 80066e8:	f7ff baaf 	b.w	8005c4a <_svfprintf_r+0x48e>
 80066ec:	ea56 0207 	orrs.w	r2, r6, r7
 80066f0:	950f      	str	r5, [sp, #60]	; 0x3c
 80066f2:	f43f ac2b 	beq.w	8005f4c <_svfprintf_r+0x790>
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	f43f ac9d 	beq.w	8006036 <_svfprintf_r+0x87a>
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	f43f acbd 	beq.w	800607c <_svfprintf_r+0x8c0>
 8006702:	ab2e      	add	r3, sp, #184	; 0xb8
 8006704:	08f1      	lsrs	r1, r6, #3
 8006706:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800670a:	08f8      	lsrs	r0, r7, #3
 800670c:	f006 0207 	and.w	r2, r6, #7
 8006710:	4607      	mov	r7, r0
 8006712:	460e      	mov	r6, r1
 8006714:	3230      	adds	r2, #48	; 0x30
 8006716:	ea56 0107 	orrs.w	r1, r6, r7
 800671a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800671e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8006722:	f47f ac86 	bne.w	8006032 <_svfprintf_r+0x876>
 8006726:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006728:	07c9      	lsls	r1, r1, #31
 800672a:	d506      	bpl.n	800673a <_svfprintf_r+0xf7e>
 800672c:	2a30      	cmp	r2, #48	; 0x30
 800672e:	d004      	beq.n	800673a <_svfprintf_r+0xf7e>
 8006730:	2230      	movs	r2, #48	; 0x30
 8006732:	f808 2c01 	strb.w	r2, [r8, #-1]
 8006736:	f1a3 0802 	sub.w	r8, r3, #2
 800673a:	ab2e      	add	r3, sp, #184	; 0xb8
 800673c:	465e      	mov	r6, fp
 800673e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006740:	eba3 0b08 	sub.w	fp, r3, r8
 8006744:	2700      	movs	r7, #0
 8006746:	f7ff bace 	b.w	8005ce6 <_svfprintf_r+0x52a>
 800674a:	bf00      	nop
 800674c:	0800b09c 	.word	0x0800b09c
 8006750:	0800b08c 	.word	0x0800b08c
 8006754:	0800b060 	.word	0x0800b060
 8006758:	0800b064 	.word	0x0800b064

0800675c <__ssvfscanf_r>:
 800675c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006760:	461f      	mov	r7, r3
 8006762:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8006766:	460d      	mov	r5, r1
 8006768:	0499      	lsls	r1, r3, #18
 800676a:	f5ad 7d2b 	sub.w	sp, sp, #684	; 0x2ac
 800676e:	4680      	mov	r8, r0
 8006770:	d406      	bmi.n	8006780 <__ssvfscanf_r+0x24>
 8006772:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006776:	81ab      	strh	r3, [r5, #12]
 8006778:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800677a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800677e:	666b      	str	r3, [r5, #100]	; 0x64
 8006780:	2300      	movs	r3, #0
 8006782:	469b      	mov	fp, r3
 8006784:	9206      	str	r2, [sp, #24]
 8006786:	9305      	str	r3, [sp, #20]
 8006788:	9303      	str	r3, [sp, #12]
 800678a:	9304      	str	r3, [sp, #16]
 800678c:	9a06      	ldr	r2, [sp, #24]
 800678e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006792:	9206      	str	r2, [sp, #24]
 8006794:	930f      	str	r3, [sp, #60]	; 0x3c
 8006796:	2b00      	cmp	r3, #0
 8006798:	f000 80c8 	beq.w	800692c <__ssvfscanf_r+0x1d0>
 800679c:	f001 fbcc 	bl	8007f38 <__locale_ctype_ptr>
 80067a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067a2:	4418      	add	r0, r3
 80067a4:	f890 9001 	ldrb.w	r9, [r0, #1]
 80067a8:	f019 0908 	ands.w	r9, r9, #8
 80067ac:	d019      	beq.n	80067e2 <__ssvfscanf_r+0x86>
 80067ae:	686b      	ldr	r3, [r5, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	dd0f      	ble.n	80067d4 <__ssvfscanf_r+0x78>
 80067b4:	f001 fbc0 	bl	8007f38 <__locale_ctype_ptr>
 80067b8:	682b      	ldr	r3, [r5, #0]
 80067ba:	781a      	ldrb	r2, [r3, #0]
 80067bc:	4410      	add	r0, r2
 80067be:	7842      	ldrb	r2, [r0, #1]
 80067c0:	0712      	lsls	r2, r2, #28
 80067c2:	d5e3      	bpl.n	800678c <__ssvfscanf_r+0x30>
 80067c4:	686a      	ldr	r2, [r5, #4]
 80067c6:	3301      	adds	r3, #1
 80067c8:	3a01      	subs	r2, #1
 80067ca:	f10b 0b01 	add.w	fp, fp, #1
 80067ce:	606a      	str	r2, [r5, #4]
 80067d0:	602b      	str	r3, [r5, #0]
 80067d2:	e7ec      	b.n	80067ae <__ssvfscanf_r+0x52>
 80067d4:	4629      	mov	r1, r5
 80067d6:	4640      	mov	r0, r8
 80067d8:	f003 fbcf 	bl	8009f7a <__ssrefill_r>
 80067dc:	2800      	cmp	r0, #0
 80067de:	d0e9      	beq.n	80067b4 <__ssvfscanf_r+0x58>
 80067e0:	e7d4      	b.n	800678c <__ssvfscanf_r+0x30>
 80067e2:	2b25      	cmp	r3, #37	; 0x25
 80067e4:	f040 8098 	bne.w	8006918 <__ssvfscanf_r+0x1bc>
 80067e8:	464c      	mov	r4, r9
 80067ea:	464e      	mov	r6, r9
 80067ec:	220a      	movs	r2, #10
 80067ee:	9b06      	ldr	r3, [sp, #24]
 80067f0:	9906      	ldr	r1, [sp, #24]
 80067f2:	f893 a000 	ldrb.w	sl, [r3]
 80067f6:	3101      	adds	r1, #1
 80067f8:	f1ba 0f63 	cmp.w	sl, #99	; 0x63
 80067fc:	9106      	str	r1, [sp, #24]
 80067fe:	f000 80db 	beq.w	80069b8 <__ssvfscanf_r+0x25c>
 8006802:	d856      	bhi.n	80068b2 <__ssvfscanf_r+0x156>
 8006804:	f1ba 0f44 	cmp.w	sl, #68	; 0x44
 8006808:	d014      	beq.n	8006834 <__ssvfscanf_r+0xd8>
 800680a:	d81e      	bhi.n	800684a <__ssvfscanf_r+0xee>
 800680c:	f1ba 0f2a 	cmp.w	sl, #42	; 0x2a
 8006810:	f000 80ac 	beq.w	800696c <__ssvfscanf_r+0x210>
 8006814:	d811      	bhi.n	800683a <__ssvfscanf_r+0xde>
 8006816:	f1ba 0f00 	cmp.w	sl, #0
 800681a:	f000 8507 	beq.w	800722c <__ssvfscanf_r+0xad0>
 800681e:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8006822:	d079      	beq.n	8006918 <__ssvfscanf_r+0x1bc>
 8006824:	f001 fb88 	bl	8007f38 <__locale_ctype_ptr>
 8006828:	4450      	add	r0, sl
 800682a:	7843      	ldrb	r3, [r0, #1]
 800682c:	f003 0303 	and.w	r3, r3, #3
 8006830:	2b01      	cmp	r3, #1
 8006832:	d148      	bne.n	80068c6 <__ssvfscanf_r+0x16a>
 8006834:	f044 0401 	orr.w	r4, r4, #1
 8006838:	e045      	b.n	80068c6 <__ssvfscanf_r+0x16a>
 800683a:	f1aa 0330 	sub.w	r3, sl, #48	; 0x30
 800683e:	2b09      	cmp	r3, #9
 8006840:	d8f0      	bhi.n	8006824 <__ssvfscanf_r+0xc8>
 8006842:	fb02 a606 	mla	r6, r2, r6, sl
 8006846:	3e30      	subs	r6, #48	; 0x30
 8006848:	e092      	b.n	8006970 <__ssvfscanf_r+0x214>
 800684a:	f1ba 0f4c 	cmp.w	sl, #76	; 0x4c
 800684e:	f000 8096 	beq.w	800697e <__ssvfscanf_r+0x222>
 8006852:	d822      	bhi.n	800689a <__ssvfscanf_r+0x13e>
 8006854:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
 8006858:	d002      	beq.n	8006860 <__ssvfscanf_r+0x104>
 800685a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800685e:	d1e1      	bne.n	8006824 <__ssvfscanf_r+0xc8>
 8006860:	f04f 0a04 	mov.w	sl, #4
 8006864:	686b      	ldr	r3, [r5, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	f340 80c7 	ble.w	80069fa <__ssvfscanf_r+0x29e>
 800686c:	0663      	lsls	r3, r4, #25
 800686e:	d408      	bmi.n	8006882 <__ssvfscanf_r+0x126>
 8006870:	f001 fb62 	bl	8007f38 <__locale_ctype_ptr>
 8006874:	682b      	ldr	r3, [r5, #0]
 8006876:	781a      	ldrb	r2, [r3, #0]
 8006878:	4410      	add	r0, r2
 800687a:	7842      	ldrb	r2, [r0, #1]
 800687c:	0710      	lsls	r0, r2, #28
 800687e:	f100 80c4 	bmi.w	8006a0a <__ssvfscanf_r+0x2ae>
 8006882:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006886:	f1ba 0f03 	cmp.w	sl, #3
 800688a:	f200 80d0 	bhi.w	8006a2e <__ssvfscanf_r+0x2d2>
 800688e:	e8df f01a 	tbh	[pc, sl, lsl #1]
 8006892:	0150      	.short	0x0150
 8006894:	025a01a3 	.word	0x025a01a3
 8006898:	0323      	.short	0x0323
 800689a:	f1ba 0f58 	cmp.w	sl, #88	; 0x58
 800689e:	d07b      	beq.n	8006998 <__ssvfscanf_r+0x23c>
 80068a0:	f1ba 0f5b 	cmp.w	sl, #91	; 0x5b
 80068a4:	d07e      	beq.n	80069a4 <__ssvfscanf_r+0x248>
 80068a6:	f1ba 0f4f 	cmp.w	sl, #79	; 0x4f
 80068aa:	d1bb      	bne.n	8006824 <__ssvfscanf_r+0xc8>
 80068ac:	f044 0401 	orr.w	r4, r4, #1
 80068b0:	e022      	b.n	80068f8 <__ssvfscanf_r+0x19c>
 80068b2:	f1ba 0f6c 	cmp.w	sl, #108	; 0x6c
 80068b6:	d05d      	beq.n	8006974 <__ssvfscanf_r+0x218>
 80068b8:	d814      	bhi.n	80068e4 <__ssvfscanf_r+0x188>
 80068ba:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80068be:	d804      	bhi.n	80068ca <__ssvfscanf_r+0x16e>
 80068c0:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80068c4:	d2cc      	bcs.n	8006860 <__ssvfscanf_r+0x104>
 80068c6:	4bac      	ldr	r3, [pc, #688]	; (8006b78 <__ssvfscanf_r+0x41c>)
 80068c8:	e063      	b.n	8006992 <__ssvfscanf_r+0x236>
 80068ca:	f1ba 0f68 	cmp.w	sl, #104	; 0x68
 80068ce:	d05c      	beq.n	800698a <__ssvfscanf_r+0x22e>
 80068d0:	f1ba 0f69 	cmp.w	sl, #105	; 0x69
 80068d4:	d1a6      	bne.n	8006824 <__ssvfscanf_r+0xc8>
 80068d6:	4ba8      	ldr	r3, [pc, #672]	; (8006b78 <__ssvfscanf_r+0x41c>)
 80068d8:	9305      	str	r3, [sp, #20]
 80068da:	2300      	movs	r3, #0
 80068dc:	9303      	str	r3, [sp, #12]
 80068de:	f04f 0a03 	mov.w	sl, #3
 80068e2:	e7bf      	b.n	8006864 <__ssvfscanf_r+0x108>
 80068e4:	f1ba 0f70 	cmp.w	sl, #112	; 0x70
 80068e8:	d06b      	beq.n	80069c2 <__ssvfscanf_r+0x266>
 80068ea:	d809      	bhi.n	8006900 <__ssvfscanf_r+0x1a4>
 80068ec:	f1ba 0f6e 	cmp.w	sl, #110	; 0x6e
 80068f0:	d06a      	beq.n	80069c8 <__ssvfscanf_r+0x26c>
 80068f2:	f1ba 0f6f 	cmp.w	sl, #111	; 0x6f
 80068f6:	d195      	bne.n	8006824 <__ssvfscanf_r+0xc8>
 80068f8:	4ba0      	ldr	r3, [pc, #640]	; (8006b7c <__ssvfscanf_r+0x420>)
 80068fa:	9305      	str	r3, [sp, #20]
 80068fc:	2308      	movs	r3, #8
 80068fe:	e7ed      	b.n	80068dc <__ssvfscanf_r+0x180>
 8006900:	f1ba 0f75 	cmp.w	sl, #117	; 0x75
 8006904:	d044      	beq.n	8006990 <__ssvfscanf_r+0x234>
 8006906:	f1ba 0f78 	cmp.w	sl, #120	; 0x78
 800690a:	d045      	beq.n	8006998 <__ssvfscanf_r+0x23c>
 800690c:	f1ba 0f73 	cmp.w	sl, #115	; 0x73
 8006910:	d188      	bne.n	8006824 <__ssvfscanf_r+0xc8>
 8006912:	f04f 0a02 	mov.w	sl, #2
 8006916:	e7a5      	b.n	8006864 <__ssvfscanf_r+0x108>
 8006918:	686b      	ldr	r3, [r5, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	dd0b      	ble.n	8006936 <__ssvfscanf_r+0x1da>
 800691e:	9a06      	ldr	r2, [sp, #24]
 8006920:	682b      	ldr	r3, [r5, #0]
 8006922:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8006926:	781a      	ldrb	r2, [r3, #0]
 8006928:	4291      	cmp	r1, r2
 800692a:	d017      	beq.n	800695c <__ssvfscanf_r+0x200>
 800692c:	9804      	ldr	r0, [sp, #16]
 800692e:	f50d 7d2b 	add.w	sp, sp, #684	; 0x2ac
 8006932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006936:	4629      	mov	r1, r5
 8006938:	4640      	mov	r0, r8
 800693a:	f003 fb1e 	bl	8009f7a <__ssrefill_r>
 800693e:	2800      	cmp	r0, #0
 8006940:	d0ed      	beq.n	800691e <__ssvfscanf_r+0x1c2>
 8006942:	9b04      	ldr	r3, [sp, #16]
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 8471 	beq.w	800722c <__ssvfscanf_r+0xad0>
 800694a:	89ab      	ldrh	r3, [r5, #12]
 800694c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006950:	9b04      	ldr	r3, [sp, #16]
 8006952:	bf18      	it	ne
 8006954:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8006958:	9304      	str	r3, [sp, #16]
 800695a:	e7e7      	b.n	800692c <__ssvfscanf_r+0x1d0>
 800695c:	686a      	ldr	r2, [r5, #4]
 800695e:	3301      	adds	r3, #1
 8006960:	3a01      	subs	r2, #1
 8006962:	606a      	str	r2, [r5, #4]
 8006964:	602b      	str	r3, [r5, #0]
 8006966:	f10b 0b01 	add.w	fp, fp, #1
 800696a:	e70f      	b.n	800678c <__ssvfscanf_r+0x30>
 800696c:	f044 0410 	orr.w	r4, r4, #16
 8006970:	9b06      	ldr	r3, [sp, #24]
 8006972:	e73d      	b.n	80067f0 <__ssvfscanf_r+0x94>
 8006974:	7859      	ldrb	r1, [r3, #1]
 8006976:	296c      	cmp	r1, #108	; 0x6c
 8006978:	d104      	bne.n	8006984 <__ssvfscanf_r+0x228>
 800697a:	3302      	adds	r3, #2
 800697c:	9306      	str	r3, [sp, #24]
 800697e:	f044 0402 	orr.w	r4, r4, #2
 8006982:	e7f5      	b.n	8006970 <__ssvfscanf_r+0x214>
 8006984:	f044 0401 	orr.w	r4, r4, #1
 8006988:	e7f2      	b.n	8006970 <__ssvfscanf_r+0x214>
 800698a:	f044 0404 	orr.w	r4, r4, #4
 800698e:	e7ef      	b.n	8006970 <__ssvfscanf_r+0x214>
 8006990:	4b7a      	ldr	r3, [pc, #488]	; (8006b7c <__ssvfscanf_r+0x420>)
 8006992:	9305      	str	r3, [sp, #20]
 8006994:	230a      	movs	r3, #10
 8006996:	e7a1      	b.n	80068dc <__ssvfscanf_r+0x180>
 8006998:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800699c:	4b77      	ldr	r3, [pc, #476]	; (8006b7c <__ssvfscanf_r+0x420>)
 800699e:	9305      	str	r3, [sp, #20]
 80069a0:	2310      	movs	r3, #16
 80069a2:	e79b      	b.n	80068dc <__ssvfscanf_r+0x180>
 80069a4:	9906      	ldr	r1, [sp, #24]
 80069a6:	a812      	add	r0, sp, #72	; 0x48
 80069a8:	f002 f948 	bl	8008c3c <__sccl>
 80069ac:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 80069b0:	9006      	str	r0, [sp, #24]
 80069b2:	f04f 0a01 	mov.w	sl, #1
 80069b6:	e755      	b.n	8006864 <__ssvfscanf_r+0x108>
 80069b8:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 80069bc:	f04f 0a00 	mov.w	sl, #0
 80069c0:	e750      	b.n	8006864 <__ssvfscanf_r+0x108>
 80069c2:	f444 7408 	orr.w	r4, r4, #544	; 0x220
 80069c6:	e7e9      	b.n	800699c <__ssvfscanf_r+0x240>
 80069c8:	06e6      	lsls	r6, r4, #27
 80069ca:	f53f aedf 	bmi.w	800678c <__ssvfscanf_r+0x30>
 80069ce:	f014 0f04 	tst.w	r4, #4
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	f107 0304 	add.w	r3, r7, #4
 80069d8:	d003      	beq.n	80069e2 <__ssvfscanf_r+0x286>
 80069da:	f8a2 b000 	strh.w	fp, [r2]
 80069de:	461f      	mov	r7, r3
 80069e0:	e6d4      	b.n	800678c <__ssvfscanf_r+0x30>
 80069e2:	07e0      	lsls	r0, r4, #31
 80069e4:	d502      	bpl.n	80069ec <__ssvfscanf_r+0x290>
 80069e6:	f8c2 b000 	str.w	fp, [r2]
 80069ea:	e7f8      	b.n	80069de <__ssvfscanf_r+0x282>
 80069ec:	07a1      	lsls	r1, r4, #30
 80069ee:	d5fa      	bpl.n	80069e6 <__ssvfscanf_r+0x28a>
 80069f0:	4658      	mov	r0, fp
 80069f2:	17c1      	asrs	r1, r0, #31
 80069f4:	e9c2 0100 	strd	r0, r1, [r2]
 80069f8:	e7f1      	b.n	80069de <__ssvfscanf_r+0x282>
 80069fa:	4629      	mov	r1, r5
 80069fc:	4640      	mov	r0, r8
 80069fe:	f003 fabc 	bl	8009f7a <__ssrefill_r>
 8006a02:	2800      	cmp	r0, #0
 8006a04:	f43f af32 	beq.w	800686c <__ssvfscanf_r+0x110>
 8006a08:	e79b      	b.n	8006942 <__ssvfscanf_r+0x1e6>
 8006a0a:	686a      	ldr	r2, [r5, #4]
 8006a0c:	f10b 0b01 	add.w	fp, fp, #1
 8006a10:	3a01      	subs	r2, #1
 8006a12:	2a00      	cmp	r2, #0
 8006a14:	606a      	str	r2, [r5, #4]
 8006a16:	dd02      	ble.n	8006a1e <__ssvfscanf_r+0x2c2>
 8006a18:	3301      	adds	r3, #1
 8006a1a:	602b      	str	r3, [r5, #0]
 8006a1c:	e728      	b.n	8006870 <__ssvfscanf_r+0x114>
 8006a1e:	4629      	mov	r1, r5
 8006a20:	4640      	mov	r0, r8
 8006a22:	f003 faaa 	bl	8009f7a <__ssrefill_r>
 8006a26:	2800      	cmp	r0, #0
 8006a28:	f43f af22 	beq.w	8006870 <__ssvfscanf_r+0x114>
 8006a2c:	e789      	b.n	8006942 <__ssvfscanf_r+0x1e6>
 8006a2e:	2e00      	cmp	r6, #0
 8006a30:	bf08      	it	eq
 8006a32:	2601      	moveq	r6, #1
 8006a34:	f014 0301 	ands.w	r3, r4, #1
 8006a38:	f004 0410 	and.w	r4, r4, #16
 8006a3c:	d04d      	beq.n	8006ada <__ssvfscanf_r+0x37e>
 8006a3e:	2208      	movs	r2, #8
 8006a40:	2100      	movs	r1, #0
 8006a42:	a810      	add	r0, sp, #64	; 0x40
 8006a44:	f7fe fe61 	bl	800570a <memset>
 8006a48:	bb74      	cbnz	r4, 8006aa8 <__ssvfscanf_r+0x34c>
 8006a4a:	f8d7 a000 	ldr.w	sl, [r7]
 8006a4e:	3704      	adds	r7, #4
 8006a50:	2300      	movs	r3, #0
 8006a52:	2e00      	cmp	r6, #0
 8006a54:	d039      	beq.n	8006aca <__ssvfscanf_r+0x36e>
 8006a56:	9307      	str	r3, [sp, #28]
 8006a58:	f001 fa5c 	bl	8007f14 <__locale_mb_cur_max>
 8006a5c:	9b07      	ldr	r3, [sp, #28]
 8006a5e:	4283      	cmp	r3, r0
 8006a60:	f43f af6f 	beq.w	8006942 <__ssvfscanf_r+0x1e6>
 8006a64:	682a      	ldr	r2, [r5, #0]
 8006a66:	a852      	add	r0, sp, #328	; 0x148
 8006a68:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006a6c:	f103 0901 	add.w	r9, r3, #1
 8006a70:	54c1      	strb	r1, [r0, r3]
 8006a72:	686b      	ldr	r3, [r5, #4]
 8006a74:	4651      	mov	r1, sl
 8006a76:	3b01      	subs	r3, #1
 8006a78:	e885 000c 	stmia.w	r5, {r2, r3}
 8006a7c:	ab10      	add	r3, sp, #64	; 0x40
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	4602      	mov	r2, r0
 8006a82:	464b      	mov	r3, r9
 8006a84:	4640      	mov	r0, r8
 8006a86:	f001 fc89 	bl	800839c <_mbrtowc_r>
 8006a8a:	1c41      	adds	r1, r0, #1
 8006a8c:	f43f af59 	beq.w	8006942 <__ssvfscanf_r+0x1e6>
 8006a90:	b968      	cbnz	r0, 8006aae <__ssvfscanf_r+0x352>
 8006a92:	b90c      	cbnz	r4, 8006a98 <__ssvfscanf_r+0x33c>
 8006a94:	f8ca 4000 	str.w	r4, [sl]
 8006a98:	44cb      	add	fp, r9
 8006a9a:	3e01      	subs	r6, #1
 8006a9c:	b90c      	cbnz	r4, 8006aa2 <__ssvfscanf_r+0x346>
 8006a9e:	f10a 0a04 	add.w	sl, sl, #4
 8006aa2:	f04f 0900 	mov.w	r9, #0
 8006aa6:	e004      	b.n	8006ab2 <__ssvfscanf_r+0x356>
 8006aa8:	f04f 0a00 	mov.w	sl, #0
 8006aac:	e7d0      	b.n	8006a50 <__ssvfscanf_r+0x2f4>
 8006aae:	3002      	adds	r0, #2
 8006ab0:	d1f2      	bne.n	8006a98 <__ssvfscanf_r+0x33c>
 8006ab2:	686b      	ldr	r3, [r5, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	dc0e      	bgt.n	8006ad6 <__ssvfscanf_r+0x37a>
 8006ab8:	4629      	mov	r1, r5
 8006aba:	4640      	mov	r0, r8
 8006abc:	f003 fa5d 	bl	8009f7a <__ssrefill_r>
 8006ac0:	b148      	cbz	r0, 8006ad6 <__ssvfscanf_r+0x37a>
 8006ac2:	f1b9 0f00 	cmp.w	r9, #0
 8006ac6:	f47f af3c 	bne.w	8006942 <__ssvfscanf_r+0x1e6>
 8006aca:	2c00      	cmp	r4, #0
 8006acc:	f47f ae5e 	bne.w	800678c <__ssvfscanf_r+0x30>
 8006ad0:	9b04      	ldr	r3, [sp, #16]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	e659      	b.n	800678a <__ssvfscanf_r+0x2e>
 8006ad6:	464b      	mov	r3, r9
 8006ad8:	e7bb      	b.n	8006a52 <__ssvfscanf_r+0x2f6>
 8006ada:	b1cc      	cbz	r4, 8006b10 <__ssvfscanf_r+0x3b4>
 8006adc:	461c      	mov	r4, r3
 8006ade:	686b      	ldr	r3, [r5, #4]
 8006ae0:	682a      	ldr	r2, [r5, #0]
 8006ae2:	42b3      	cmp	r3, r6
 8006ae4:	da0e      	bge.n	8006b04 <__ssvfscanf_r+0x3a8>
 8006ae6:	441c      	add	r4, r3
 8006ae8:	1af6      	subs	r6, r6, r3
 8006aea:	4413      	add	r3, r2
 8006aec:	602b      	str	r3, [r5, #0]
 8006aee:	4629      	mov	r1, r5
 8006af0:	4640      	mov	r0, r8
 8006af2:	f003 fa42 	bl	8009f7a <__ssrefill_r>
 8006af6:	2800      	cmp	r0, #0
 8006af8:	d0f1      	beq.n	8006ade <__ssvfscanf_r+0x382>
 8006afa:	2c00      	cmp	r4, #0
 8006afc:	f43f af21 	beq.w	8006942 <__ssvfscanf_r+0x1e6>
 8006b00:	44a3      	add	fp, r4
 8006b02:	e643      	b.n	800678c <__ssvfscanf_r+0x30>
 8006b04:	1b9b      	subs	r3, r3, r6
 8006b06:	4434      	add	r4, r6
 8006b08:	4416      	add	r6, r2
 8006b0a:	606b      	str	r3, [r5, #4]
 8006b0c:	602e      	str	r6, [r5, #0]
 8006b0e:	e7f7      	b.n	8006b00 <__ssvfscanf_r+0x3a4>
 8006b10:	9500      	str	r5, [sp, #0]
 8006b12:	4633      	mov	r3, r6
 8006b14:	2201      	movs	r2, #1
 8006b16:	6839      	ldr	r1, [r7, #0]
 8006b18:	4640      	mov	r0, r8
 8006b1a:	1d3c      	adds	r4, r7, #4
 8006b1c:	f003 fa4a 	bl	8009fb4 <_sfread_r>
 8006b20:	2800      	cmp	r0, #0
 8006b22:	f43f af0e 	beq.w	8006942 <__ssvfscanf_r+0x1e6>
 8006b26:	4483      	add	fp, r0
 8006b28:	9b04      	ldr	r3, [sp, #16]
 8006b2a:	4627      	mov	r7, r4
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	9304      	str	r3, [sp, #16]
 8006b30:	e62c      	b.n	800678c <__ssvfscanf_r+0x30>
 8006b32:	2e00      	cmp	r6, #0
 8006b34:	bf08      	it	eq
 8006b36:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
 8006b3a:	06e2      	lsls	r2, r4, #27
 8006b3c:	d520      	bpl.n	8006b80 <__ssvfscanf_r+0x424>
 8006b3e:	2400      	movs	r4, #0
 8006b40:	f10d 0948 	add.w	r9, sp, #72	; 0x48
 8006b44:	682b      	ldr	r3, [r5, #0]
 8006b46:	781a      	ldrb	r2, [r3, #0]
 8006b48:	f819 2002 	ldrb.w	r2, [r9, r2]
 8006b4c:	b912      	cbnz	r2, 8006b54 <__ssvfscanf_r+0x3f8>
 8006b4e:	2c00      	cmp	r4, #0
 8006b50:	d1d6      	bne.n	8006b00 <__ssvfscanf_r+0x3a4>
 8006b52:	e6eb      	b.n	800692c <__ssvfscanf_r+0x1d0>
 8006b54:	686a      	ldr	r2, [r5, #4]
 8006b56:	3401      	adds	r4, #1
 8006b58:	3a01      	subs	r2, #1
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	42a6      	cmp	r6, r4
 8006b5e:	606a      	str	r2, [r5, #4]
 8006b60:	602b      	str	r3, [r5, #0]
 8006b62:	d0cd      	beq.n	8006b00 <__ssvfscanf_r+0x3a4>
 8006b64:	2a00      	cmp	r2, #0
 8006b66:	dced      	bgt.n	8006b44 <__ssvfscanf_r+0x3e8>
 8006b68:	4629      	mov	r1, r5
 8006b6a:	4640      	mov	r0, r8
 8006b6c:	f003 fa05 	bl	8009f7a <__ssrefill_r>
 8006b70:	2800      	cmp	r0, #0
 8006b72:	d0e7      	beq.n	8006b44 <__ssvfscanf_r+0x3e8>
 8006b74:	e7c4      	b.n	8006b00 <__ssvfscanf_r+0x3a4>
 8006b76:	bf00      	nop
 8006b78:	080099f9 	.word	0x080099f9
 8006b7c:	08009c85 	.word	0x08009c85
 8006b80:	683c      	ldr	r4, [r7, #0]
 8006b82:	f107 0904 	add.w	r9, r7, #4
 8006b86:	4627      	mov	r7, r4
 8006b88:	f10d 0a48 	add.w	sl, sp, #72	; 0x48
 8006b8c:	682b      	ldr	r3, [r5, #0]
 8006b8e:	781a      	ldrb	r2, [r3, #0]
 8006b90:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8006b94:	b1b2      	cbz	r2, 8006bc4 <__ssvfscanf_r+0x468>
 8006b96:	686a      	ldr	r2, [r5, #4]
 8006b98:	3a01      	subs	r2, #1
 8006b9a:	606a      	str	r2, [r5, #4]
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	602a      	str	r2, [r5, #0]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	f807 3b01 	strb.w	r3, [r7], #1
 8006ba6:	1bf3      	subs	r3, r6, r7
 8006ba8:	42dc      	cmn	r4, r3
 8006baa:	d00b      	beq.n	8006bc4 <__ssvfscanf_r+0x468>
 8006bac:	686b      	ldr	r3, [r5, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	dcec      	bgt.n	8006b8c <__ssvfscanf_r+0x430>
 8006bb2:	4629      	mov	r1, r5
 8006bb4:	4640      	mov	r0, r8
 8006bb6:	f003 f9e0 	bl	8009f7a <__ssrefill_r>
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	d0e6      	beq.n	8006b8c <__ssvfscanf_r+0x430>
 8006bbe:	42bc      	cmp	r4, r7
 8006bc0:	f43f aebf 	beq.w	8006942 <__ssvfscanf_r+0x1e6>
 8006bc4:	1b3c      	subs	r4, r7, r4
 8006bc6:	f43f aeb1 	beq.w	800692c <__ssvfscanf_r+0x1d0>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	703b      	strb	r3, [r7, #0]
 8006bce:	9b04      	ldr	r3, [sp, #16]
 8006bd0:	464f      	mov	r7, r9
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	9304      	str	r3, [sp, #16]
 8006bd6:	e793      	b.n	8006b00 <__ssvfscanf_r+0x3a4>
 8006bd8:	2e00      	cmp	r6, #0
 8006bda:	bf08      	it	eq
 8006bdc:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
 8006be0:	f014 0901 	ands.w	r9, r4, #1
 8006be4:	f004 0410 	and.w	r4, r4, #16
 8006be8:	d06a      	beq.n	8006cc0 <__ssvfscanf_r+0x564>
 8006bea:	2208      	movs	r2, #8
 8006bec:	2100      	movs	r1, #0
 8006bee:	a810      	add	r0, sp, #64	; 0x40
 8006bf0:	f7fe fd8b 	bl	800570a <memset>
 8006bf4:	2c00      	cmp	r4, #0
 8006bf6:	d13e      	bne.n	8006c76 <__ssvfscanf_r+0x51a>
 8006bf8:	f8d7 9000 	ldr.w	r9, [r7]
 8006bfc:	3704      	adds	r7, #4
 8006bfe:	2300      	movs	r3, #0
 8006c00:	9307      	str	r3, [sp, #28]
 8006c02:	f001 f999 	bl	8007f38 <__locale_ctype_ptr>
 8006c06:	682a      	ldr	r2, [r5, #0]
 8006c08:	7812      	ldrb	r2, [r2, #0]
 8006c0a:	4410      	add	r0, r2
 8006c0c:	7842      	ldrb	r2, [r0, #1]
 8006c0e:	0711      	lsls	r1, r2, #28
 8006c10:	d42b      	bmi.n	8006c6a <__ssvfscanf_r+0x50e>
 8006c12:	9b07      	ldr	r3, [sp, #28]
 8006c14:	b34e      	cbz	r6, 8006c6a <__ssvfscanf_r+0x50e>
 8006c16:	9307      	str	r3, [sp, #28]
 8006c18:	f001 f97c 	bl	8007f14 <__locale_mb_cur_max>
 8006c1c:	9b07      	ldr	r3, [sp, #28]
 8006c1e:	4283      	cmp	r3, r0
 8006c20:	f43f ae8f 	beq.w	8006942 <__ssvfscanf_r+0x1e6>
 8006c24:	682a      	ldr	r2, [r5, #0]
 8006c26:	a852      	add	r0, sp, #328	; 0x148
 8006c28:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006c2c:	f103 0a01 	add.w	sl, r3, #1
 8006c30:	54c1      	strb	r1, [r0, r3]
 8006c32:	686b      	ldr	r3, [r5, #4]
 8006c34:	4649      	mov	r1, r9
 8006c36:	3b01      	subs	r3, #1
 8006c38:	e885 000c 	stmia.w	r5, {r2, r3}
 8006c3c:	ab10      	add	r3, sp, #64	; 0x40
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	4602      	mov	r2, r0
 8006c42:	4653      	mov	r3, sl
 8006c44:	4640      	mov	r0, r8
 8006c46:	f001 fba9 	bl	800839c <_mbrtowc_r>
 8006c4a:	1c43      	adds	r3, r0, #1
 8006c4c:	f43f ae79 	beq.w	8006942 <__ssvfscanf_r+0x1e6>
 8006c50:	b9a0      	cbnz	r0, 8006c7c <__ssvfscanf_r+0x520>
 8006c52:	f8c9 0000 	str.w	r0, [r9]
 8006c56:	f8d9 0000 	ldr.w	r0, [r9]
 8006c5a:	f001 f94d 	bl	8007ef8 <iswspace>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	b1c8      	cbz	r0, 8006c96 <__ssvfscanf_r+0x53a>
 8006c62:	ae52      	add	r6, sp, #328	; 0x148
 8006c64:	f1ba 0f00 	cmp.w	sl, #0
 8006c68:	d10c      	bne.n	8006c84 <__ssvfscanf_r+0x528>
 8006c6a:	2c00      	cmp	r4, #0
 8006c6c:	f47f ad8e 	bne.w	800678c <__ssvfscanf_r+0x30>
 8006c70:	f8c9 4000 	str.w	r4, [r9]
 8006c74:	e72c      	b.n	8006ad0 <__ssvfscanf_r+0x374>
 8006c76:	f10d 093c 	add.w	r9, sp, #60	; 0x3c
 8006c7a:	e7c0      	b.n	8006bfe <__ssvfscanf_r+0x4a2>
 8006c7c:	3002      	adds	r0, #2
 8006c7e:	d1ea      	bne.n	8006c56 <__ssvfscanf_r+0x4fa>
 8006c80:	4653      	mov	r3, sl
 8006c82:	e00e      	b.n	8006ca2 <__ssvfscanf_r+0x546>
 8006c84:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006c88:	462a      	mov	r2, r5
 8006c8a:	f816 100a 	ldrb.w	r1, [r6, sl]
 8006c8e:	4640      	mov	r0, r8
 8006c90:	f003 f936 	bl	8009f00 <_sungetc_r>
 8006c94:	e7e6      	b.n	8006c64 <__ssvfscanf_r+0x508>
 8006c96:	44d3      	add	fp, sl
 8006c98:	3e01      	subs	r6, #1
 8006c9a:	b914      	cbnz	r4, 8006ca2 <__ssvfscanf_r+0x546>
 8006c9c:	4623      	mov	r3, r4
 8006c9e:	f109 0904 	add.w	r9, r9, #4
 8006ca2:	686a      	ldr	r2, [r5, #4]
 8006ca4:	2a00      	cmp	r2, #0
 8006ca6:	dcab      	bgt.n	8006c00 <__ssvfscanf_r+0x4a4>
 8006ca8:	4629      	mov	r1, r5
 8006caa:	4640      	mov	r0, r8
 8006cac:	9307      	str	r3, [sp, #28]
 8006cae:	f003 f964 	bl	8009f7a <__ssrefill_r>
 8006cb2:	9b07      	ldr	r3, [sp, #28]
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	d0a3      	beq.n	8006c00 <__ssvfscanf_r+0x4a4>
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f47f ae42 	bne.w	8006942 <__ssvfscanf_r+0x1e6>
 8006cbe:	e7d4      	b.n	8006c6a <__ssvfscanf_r+0x50e>
 8006cc0:	2c00      	cmp	r4, #0
 8006cc2:	d136      	bne.n	8006d32 <__ssvfscanf_r+0x5d6>
 8006cc4:	f8d7 9000 	ldr.w	r9, [r7]
 8006cc8:	1d3c      	adds	r4, r7, #4
 8006cca:	464f      	mov	r7, r9
 8006ccc:	f001 f934 	bl	8007f38 <__locale_ctype_ptr>
 8006cd0:	682a      	ldr	r2, [r5, #0]
 8006cd2:	7813      	ldrb	r3, [r2, #0]
 8006cd4:	4418      	add	r0, r3
 8006cd6:	7843      	ldrb	r3, [r0, #1]
 8006cd8:	071b      	lsls	r3, r3, #28
 8006cda:	d414      	bmi.n	8006d06 <__ssvfscanf_r+0x5aa>
 8006cdc:	686b      	ldr	r3, [r5, #4]
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	606b      	str	r3, [r5, #4]
 8006ce2:	1c53      	adds	r3, r2, #1
 8006ce4:	602b      	str	r3, [r5, #0]
 8006ce6:	7813      	ldrb	r3, [r2, #0]
 8006ce8:	f807 3b01 	strb.w	r3, [r7], #1
 8006cec:	1bf3      	subs	r3, r6, r7
 8006cee:	eb19 0f03 	cmn.w	r9, r3
 8006cf2:	d008      	beq.n	8006d06 <__ssvfscanf_r+0x5aa>
 8006cf4:	686b      	ldr	r3, [r5, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	dce8      	bgt.n	8006ccc <__ssvfscanf_r+0x570>
 8006cfa:	4629      	mov	r1, r5
 8006cfc:	4640      	mov	r0, r8
 8006cfe:	f003 f93c 	bl	8009f7a <__ssrefill_r>
 8006d02:	2800      	cmp	r0, #0
 8006d04:	d0e2      	beq.n	8006ccc <__ssvfscanf_r+0x570>
 8006d06:	2300      	movs	r3, #0
 8006d08:	703b      	strb	r3, [r7, #0]
 8006d0a:	eba7 0709 	sub.w	r7, r7, r9
 8006d0e:	44bb      	add	fp, r7
 8006d10:	e70a      	b.n	8006b28 <__ssvfscanf_r+0x3cc>
 8006d12:	686a      	ldr	r2, [r5, #4]
 8006d14:	f109 0901 	add.w	r9, r9, #1
 8006d18:	3a01      	subs	r2, #1
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	454e      	cmp	r6, r9
 8006d1e:	606a      	str	r2, [r5, #4]
 8006d20:	602b      	str	r3, [r5, #0]
 8006d22:	d00e      	beq.n	8006d42 <__ssvfscanf_r+0x5e6>
 8006d24:	2a00      	cmp	r2, #0
 8006d26:	dc04      	bgt.n	8006d32 <__ssvfscanf_r+0x5d6>
 8006d28:	4629      	mov	r1, r5
 8006d2a:	4640      	mov	r0, r8
 8006d2c:	f003 f925 	bl	8009f7a <__ssrefill_r>
 8006d30:	b938      	cbnz	r0, 8006d42 <__ssvfscanf_r+0x5e6>
 8006d32:	f001 f901 	bl	8007f38 <__locale_ctype_ptr>
 8006d36:	682b      	ldr	r3, [r5, #0]
 8006d38:	781a      	ldrb	r2, [r3, #0]
 8006d3a:	4410      	add	r0, r2
 8006d3c:	7842      	ldrb	r2, [r0, #1]
 8006d3e:	0712      	lsls	r2, r2, #28
 8006d40:	d5e7      	bpl.n	8006d12 <__ssvfscanf_r+0x5b6>
 8006d42:	44cb      	add	fp, r9
 8006d44:	e522      	b.n	800678c <__ssvfscanf_r+0x30>
 8006d46:	1e73      	subs	r3, r6, #1
 8006d48:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8006d4c:	bf88      	it	hi
 8006d4e:	f46f 70ae 	mvnhi.w	r0, #348	; 0x15c
 8006d52:	f04f 0300 	mov.w	r3, #0
 8006d56:	bf8a      	itet	hi
 8006d58:	eb06 0a00 	addhi.w	sl, r6, r0
 8006d5c:	f04f 0a00 	movls.w	sl, #0
 8006d60:	f240 165d 	movwhi	r6, #349	; 0x15d
 8006d64:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
 8006d68:	9307      	str	r3, [sp, #28]
 8006d6a:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 8006d6e:	682a      	ldr	r2, [r5, #0]
 8006d70:	7813      	ldrb	r3, [r2, #0]
 8006d72:	2b39      	cmp	r3, #57	; 0x39
 8006d74:	d82d      	bhi.n	8006dd2 <__ssvfscanf_r+0x676>
 8006d76:	2b38      	cmp	r3, #56	; 0x38
 8006d78:	d275      	bcs.n	8006e66 <__ssvfscanf_r+0x70a>
 8006d7a:	2b30      	cmp	r3, #48	; 0x30
 8006d7c:	d045      	beq.n	8006e0a <__ssvfscanf_r+0x6ae>
 8006d7e:	d86a      	bhi.n	8006e56 <__ssvfscanf_r+0x6fa>
 8006d80:	2b2b      	cmp	r3, #43	; 0x2b
 8006d82:	d078      	beq.n	8006e76 <__ssvfscanf_r+0x71a>
 8006d84:	2b2d      	cmp	r3, #45	; 0x2d
 8006d86:	d076      	beq.n	8006e76 <__ssvfscanf_r+0x71a>
 8006d88:	05e3      	lsls	r3, r4, #23
 8006d8a:	d50f      	bpl.n	8006dac <__ssvfscanf_r+0x650>
 8006d8c:	ab52      	add	r3, sp, #328	; 0x148
 8006d8e:	4599      	cmp	r9, r3
 8006d90:	d908      	bls.n	8006da4 <__ssvfscanf_r+0x648>
 8006d92:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 8006d96:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 8006d9a:	462a      	mov	r2, r5
 8006d9c:	4640      	mov	r0, r8
 8006d9e:	f003 f8af 	bl	8009f00 <_sungetc_r>
 8006da2:	46b1      	mov	r9, r6
 8006da4:	ab52      	add	r3, sp, #328	; 0x148
 8006da6:	4599      	cmp	r9, r3
 8006da8:	f43f adc0 	beq.w	800692c <__ssvfscanf_r+0x1d0>
 8006dac:	f014 0210 	ands.w	r2, r4, #16
 8006db0:	f040 8088 	bne.w	8006ec4 <__ssvfscanf_r+0x768>
 8006db4:	9b03      	ldr	r3, [sp, #12]
 8006db6:	a952      	add	r1, sp, #328	; 0x148
 8006db8:	4640      	mov	r0, r8
 8006dba:	9e05      	ldr	r6, [sp, #20]
 8006dbc:	f889 2000 	strb.w	r2, [r9]
 8006dc0:	47b0      	blx	r6
 8006dc2:	f014 0f20 	tst.w	r4, #32
 8006dc6:	f107 0304 	add.w	r3, r7, #4
 8006dca:	d060      	beq.n	8006e8e <__ssvfscanf_r+0x732>
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	6010      	str	r0, [r2, #0]
 8006dd0:	e061      	b.n	8006e96 <__ssvfscanf_r+0x73a>
 8006dd2:	2b58      	cmp	r3, #88	; 0x58
 8006dd4:	d00d      	beq.n	8006df2 <__ssvfscanf_r+0x696>
 8006dd6:	d806      	bhi.n	8006de6 <__ssvfscanf_r+0x68a>
 8006dd8:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
 8006ddc:	2905      	cmp	r1, #5
 8006dde:	d8d3      	bhi.n	8006d88 <__ssvfscanf_r+0x62c>
 8006de0:	9903      	ldr	r1, [sp, #12]
 8006de2:	290a      	cmp	r1, #10
 8006de4:	e045      	b.n	8006e72 <__ssvfscanf_r+0x716>
 8006de6:	2b61      	cmp	r3, #97	; 0x61
 8006de8:	d3ce      	bcc.n	8006d88 <__ssvfscanf_r+0x62c>
 8006dea:	2b66      	cmp	r3, #102	; 0x66
 8006dec:	d9f8      	bls.n	8006de0 <__ssvfscanf_r+0x684>
 8006dee:	2b78      	cmp	r3, #120	; 0x78
 8006df0:	d1ca      	bne.n	8006d88 <__ssvfscanf_r+0x62c>
 8006df2:	f404 61c0 	and.w	r1, r4, #1536	; 0x600
 8006df6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006dfa:	d1c5      	bne.n	8006d88 <__ssvfscanf_r+0x62c>
 8006dfc:	2110      	movs	r1, #16
 8006dfe:	f424 7400 	bic.w	r4, r4, #512	; 0x200
 8006e02:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
 8006e06:	9103      	str	r1, [sp, #12]
 8006e08:	e00b      	b.n	8006e22 <__ssvfscanf_r+0x6c6>
 8006e0a:	0521      	lsls	r1, r4, #20
 8006e0c:	d509      	bpl.n	8006e22 <__ssvfscanf_r+0x6c6>
 8006e0e:	9903      	ldr	r1, [sp, #12]
 8006e10:	b919      	cbnz	r1, 8006e1a <__ssvfscanf_r+0x6be>
 8006e12:	2108      	movs	r1, #8
 8006e14:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8006e18:	9103      	str	r1, [sp, #12]
 8006e1a:	0560      	lsls	r0, r4, #21
 8006e1c:	d506      	bpl.n	8006e2c <__ssvfscanf_r+0x6d0>
 8006e1e:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
 8006e22:	f889 3000 	strb.w	r3, [r9]
 8006e26:	f109 0901 	add.w	r9, r9, #1
 8006e2a:	e00a      	b.n	8006e42 <__ssvfscanf_r+0x6e6>
 8006e2c:	f424 7460 	bic.w	r4, r4, #896	; 0x380
 8006e30:	f1ba 0f00 	cmp.w	sl, #0
 8006e34:	d002      	beq.n	8006e3c <__ssvfscanf_r+0x6e0>
 8006e36:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006e3a:	3601      	adds	r6, #1
 8006e3c:	9b07      	ldr	r3, [sp, #28]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	9307      	str	r3, [sp, #28]
 8006e42:	686b      	ldr	r3, [r5, #4]
 8006e44:	3b01      	subs	r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	606b      	str	r3, [r5, #4]
 8006e4a:	dd19      	ble.n	8006e80 <__ssvfscanf_r+0x724>
 8006e4c:	3201      	adds	r2, #1
 8006e4e:	602a      	str	r2, [r5, #0]
 8006e50:	3e01      	subs	r6, #1
 8006e52:	d18c      	bne.n	8006d6e <__ssvfscanf_r+0x612>
 8006e54:	e798      	b.n	8006d88 <__ssvfscanf_r+0x62c>
 8006e56:	9803      	ldr	r0, [sp, #12]
 8006e58:	49ad      	ldr	r1, [pc, #692]	; (8007110 <__ssvfscanf_r+0x9b4>)
 8006e5a:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8006e5e:	9103      	str	r1, [sp, #12]
 8006e60:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
 8006e64:	e7dd      	b.n	8006e22 <__ssvfscanf_r+0x6c6>
 8006e66:	9803      	ldr	r0, [sp, #12]
 8006e68:	49a9      	ldr	r1, [pc, #676]	; (8007110 <__ssvfscanf_r+0x9b4>)
 8006e6a:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8006e6e:	9103      	str	r1, [sp, #12]
 8006e70:	2908      	cmp	r1, #8
 8006e72:	dcf5      	bgt.n	8006e60 <__ssvfscanf_r+0x704>
 8006e74:	e788      	b.n	8006d88 <__ssvfscanf_r+0x62c>
 8006e76:	0621      	lsls	r1, r4, #24
 8006e78:	d586      	bpl.n	8006d88 <__ssvfscanf_r+0x62c>
 8006e7a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 8006e7e:	e7d0      	b.n	8006e22 <__ssvfscanf_r+0x6c6>
 8006e80:	4629      	mov	r1, r5
 8006e82:	4640      	mov	r0, r8
 8006e84:	f003 f879 	bl	8009f7a <__ssrefill_r>
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	d0e1      	beq.n	8006e50 <__ssvfscanf_r+0x6f4>
 8006e8c:	e77c      	b.n	8006d88 <__ssvfscanf_r+0x62c>
 8006e8e:	0766      	lsls	r6, r4, #29
 8006e90:	d503      	bpl.n	8006e9a <__ssvfscanf_r+0x73e>
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	8010      	strh	r0, [r2, #0]
 8006e96:	461f      	mov	r7, r3
 8006e98:	e011      	b.n	8006ebe <__ssvfscanf_r+0x762>
 8006e9a:	f014 0201 	ands.w	r2, r4, #1
 8006e9e:	d195      	bne.n	8006dcc <__ssvfscanf_r+0x670>
 8006ea0:	07a1      	lsls	r1, r4, #30
 8006ea2:	d593      	bpl.n	8006dcc <__ssvfscanf_r+0x670>
 8006ea4:	4b9b      	ldr	r3, [pc, #620]	; (8007114 <__ssvfscanf_r+0x9b8>)
 8006ea6:	9905      	ldr	r1, [sp, #20]
 8006ea8:	4640      	mov	r0, r8
 8006eaa:	4299      	cmp	r1, r3
 8006eac:	9b03      	ldr	r3, [sp, #12]
 8006eae:	a952      	add	r1, sp, #328	; 0x148
 8006eb0:	d10f      	bne.n	8006ed2 <__ssvfscanf_r+0x776>
 8006eb2:	f002 ff99 	bl	8009de8 <_strtoull_r>
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	3704      	adds	r7, #4
 8006eba:	e9c3 0100 	strd	r0, r1, [r3]
 8006ebe:	9b04      	ldr	r3, [sp, #16]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	9304      	str	r3, [sp, #16]
 8006ec4:	ab52      	add	r3, sp, #328	; 0x148
 8006ec6:	eba9 0903 	sub.w	r9, r9, r3
 8006eca:	9b07      	ldr	r3, [sp, #28]
 8006ecc:	444b      	add	r3, r9
 8006ece:	449b      	add	fp, r3
 8006ed0:	e45c      	b.n	800678c <__ssvfscanf_r+0x30>
 8006ed2:	f002 fe47 	bl	8009b64 <_strtoll_r>
 8006ed6:	e7ee      	b.n	8006eb6 <__ssvfscanf_r+0x75a>
 8006ed8:	4640      	mov	r0, r8
 8006eda:	f001 f83d 	bl	8007f58 <_localeconv_r>
 8006ede:	6803      	ldr	r3, [r0, #0]
 8006ee0:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
 8006ee4:	930c      	str	r3, [sp, #48]	; 0x30
 8006ee6:	1e73      	subs	r3, r6, #1
 8006ee8:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8006eec:	bf88      	it	hi
 8006eee:	f46f 7cae 	mvnhi.w	ip, #348	; 0x15c
 8006ef2:	f04f 0300 	mov.w	r3, #0
 8006ef6:	bf8a      	itet	hi
 8006ef8:	44b4      	addhi	ip, r6
 8006efa:	f04f 0c00 	movls.w	ip, #0
 8006efe:	f240 165d 	movwhi	r6, #349	; 0x15d
 8006f02:	930a      	str	r3, [sp, #40]	; 0x28
 8006f04:	9309      	str	r3, [sp, #36]	; 0x24
 8006f06:	9307      	str	r3, [sp, #28]
 8006f08:	9308      	str	r3, [sp, #32]
 8006f0a:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 8006f0e:	682a      	ldr	r2, [r5, #0]
 8006f10:	7811      	ldrb	r1, [r2, #0]
 8006f12:	920b      	str	r2, [sp, #44]	; 0x2c
 8006f14:	294e      	cmp	r1, #78	; 0x4e
 8006f16:	f000 809f 	beq.w	8007058 <__ssvfscanf_r+0x8fc>
 8006f1a:	d83c      	bhi.n	8006f96 <__ssvfscanf_r+0x83a>
 8006f1c:	2939      	cmp	r1, #57	; 0x39
 8006f1e:	d80e      	bhi.n	8006f3e <__ssvfscanf_r+0x7e2>
 8006f20:	2931      	cmp	r1, #49	; 0x31
 8006f22:	f080 808f 	bcs.w	8007044 <__ssvfscanf_r+0x8e8>
 8006f26:	292d      	cmp	r1, #45	; 0x2d
 8006f28:	d003      	beq.n	8006f32 <__ssvfscanf_r+0x7d6>
 8006f2a:	2930      	cmp	r1, #48	; 0x30
 8006f2c:	d06e      	beq.n	800700c <__ssvfscanf_r+0x8b0>
 8006f2e:	292b      	cmp	r1, #43	; 0x2b
 8006f30:	d10b      	bne.n	8006f4a <__ssvfscanf_r+0x7ee>
 8006f32:	0622      	lsls	r2, r4, #24
 8006f34:	f140 80ab 	bpl.w	800708e <__ssvfscanf_r+0x932>
 8006f38:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 8006f3c:	e087      	b.n	800704e <__ssvfscanf_r+0x8f2>
 8006f3e:	2945      	cmp	r1, #69	; 0x45
 8006f40:	d03c      	beq.n	8006fbc <__ssvfscanf_r+0x860>
 8006f42:	d810      	bhi.n	8006f66 <__ssvfscanf_r+0x80a>
 8006f44:	2941      	cmp	r1, #65	; 0x41
 8006f46:	f000 80a0 	beq.w	800708a <__ssvfscanf_r+0x92e>
 8006f4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f4c:	f892 e000 	ldrb.w	lr, [r2]
 8006f50:	458e      	cmp	lr, r1
 8006f52:	f040 809c 	bne.w	800708e <__ssvfscanf_r+0x932>
 8006f56:	05a0      	lsls	r0, r4, #22
 8006f58:	f140 8099 	bpl.w	800708e <__ssvfscanf_r+0x932>
 8006f5c:	9a07      	ldr	r2, [sp, #28]
 8006f5e:	f424 7420 	bic.w	r4, r4, #640	; 0x280
 8006f62:	9208      	str	r2, [sp, #32]
 8006f64:	e073      	b.n	800704e <__ssvfscanf_r+0x8f2>
 8006f66:	2946      	cmp	r1, #70	; 0x46
 8006f68:	f000 80a9 	beq.w	80070be <__ssvfscanf_r+0x962>
 8006f6c:	2949      	cmp	r1, #73	; 0x49
 8006f6e:	d1ec      	bne.n	8006f4a <__ssvfscanf_r+0x7ee>
 8006f70:	f1b9 0f00 	cmp.w	r9, #0
 8006f74:	f040 809d 	bne.w	80070b2 <__ssvfscanf_r+0x956>
 8006f78:	9807      	ldr	r0, [sp, #28]
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	f040 8089 	bne.w	8007092 <__ssvfscanf_r+0x936>
 8006f80:	f404 6ee0 	and.w	lr, r4, #1792	; 0x700
 8006f84:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
 8006f88:	f040 8085 	bne.w	8007096 <__ssvfscanf_r+0x93a>
 8006f8c:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
 8006f90:	f04f 0901 	mov.w	r9, #1
 8006f94:	e05b      	b.n	800704e <__ssvfscanf_r+0x8f2>
 8006f96:	2966      	cmp	r1, #102	; 0x66
 8006f98:	f000 8091 	beq.w	80070be <__ssvfscanf_r+0x962>
 8006f9c:	d827      	bhi.n	8006fee <__ssvfscanf_r+0x892>
 8006f9e:	2959      	cmp	r1, #89	; 0x59
 8006fa0:	d02e      	beq.n	8007000 <__ssvfscanf_r+0x8a4>
 8006fa2:	d807      	bhi.n	8006fb4 <__ssvfscanf_r+0x858>
 8006fa4:	2954      	cmp	r1, #84	; 0x54
 8006fa6:	d1d0      	bne.n	8006f4a <__ssvfscanf_r+0x7ee>
 8006fa8:	f1b9 0f06 	cmp.w	r9, #6
 8006fac:	d16f      	bne.n	800708e <__ssvfscanf_r+0x932>
 8006fae:	f04f 0907 	mov.w	r9, #7
 8006fb2:	e04c      	b.n	800704e <__ssvfscanf_r+0x8f2>
 8006fb4:	2961      	cmp	r1, #97	; 0x61
 8006fb6:	d068      	beq.n	800708a <__ssvfscanf_r+0x92e>
 8006fb8:	2965      	cmp	r1, #101	; 0x65
 8006fba:	d1c6      	bne.n	8006f4a <__ssvfscanf_r+0x7ee>
 8006fbc:	f404 6ea0 	and.w	lr, r4, #1280	; 0x500
 8006fc0:	f5be 6f80 	cmp.w	lr, #1024	; 0x400
 8006fc4:	d004      	beq.n	8006fd0 <__ssvfscanf_r+0x874>
 8006fc6:	0560      	lsls	r0, r4, #21
 8006fc8:	d561      	bpl.n	800708e <__ssvfscanf_r+0x932>
 8006fca:	9807      	ldr	r0, [sp, #28]
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d062      	beq.n	8007096 <__ssvfscanf_r+0x93a>
 8006fd0:	05a2      	lsls	r2, r4, #22
 8006fd2:	d405      	bmi.n	8006fe0 <__ssvfscanf_r+0x884>
 8006fd4:	9807      	ldr	r0, [sp, #28]
 8006fd6:	9a08      	ldr	r2, [sp, #32]
 8006fd8:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8006fdc:	1a80      	subs	r0, r0, r2
 8006fde:	9009      	str	r0, [sp, #36]	; 0x24
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
 8006fe6:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
 8006fea:	9207      	str	r2, [sp, #28]
 8006fec:	e02f      	b.n	800704e <__ssvfscanf_r+0x8f2>
 8006fee:	296e      	cmp	r1, #110	; 0x6e
 8006ff0:	d032      	beq.n	8007058 <__ssvfscanf_r+0x8fc>
 8006ff2:	d801      	bhi.n	8006ff8 <__ssvfscanf_r+0x89c>
 8006ff4:	2969      	cmp	r1, #105	; 0x69
 8006ff6:	e7ba      	b.n	8006f6e <__ssvfscanf_r+0x812>
 8006ff8:	2974      	cmp	r1, #116	; 0x74
 8006ffa:	d0d5      	beq.n	8006fa8 <__ssvfscanf_r+0x84c>
 8006ffc:	2979      	cmp	r1, #121	; 0x79
 8006ffe:	d1a4      	bne.n	8006f4a <__ssvfscanf_r+0x7ee>
 8007000:	f1b9 0f07 	cmp.w	r9, #7
 8007004:	d143      	bne.n	800708e <__ssvfscanf_r+0x932>
 8007006:	f04f 0908 	mov.w	r9, #8
 800700a:	e020      	b.n	800704e <__ssvfscanf_r+0x8f2>
 800700c:	05e0      	lsls	r0, r4, #23
 800700e:	d519      	bpl.n	8007044 <__ssvfscanf_r+0x8e8>
 8007010:	9907      	ldr	r1, [sp, #28]
 8007012:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 8007016:	3101      	adds	r1, #1
 8007018:	9107      	str	r1, [sp, #28]
 800701a:	f1bc 0f00 	cmp.w	ip, #0
 800701e:	d002      	beq.n	8007026 <__ssvfscanf_r+0x8ca>
 8007020:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8007024:	3601      	adds	r6, #1
 8007026:	6869      	ldr	r1, [r5, #4]
 8007028:	3e01      	subs	r6, #1
 800702a:	3901      	subs	r1, #1
 800702c:	2900      	cmp	r1, #0
 800702e:	f10b 0b01 	add.w	fp, fp, #1
 8007032:	6069      	str	r1, [r5, #4]
 8007034:	dd4d      	ble.n	80070d2 <__ssvfscanf_r+0x976>
 8007036:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007038:	3001      	adds	r0, #1
 800703a:	6028      	str	r0, [r5, #0]
 800703c:	2e00      	cmp	r6, #0
 800703e:	f47f af66 	bne.w	8006f0e <__ssvfscanf_r+0x7b2>
 8007042:	e024      	b.n	800708e <__ssvfscanf_r+0x932>
 8007044:	eb13 0f09 	cmn.w	r3, r9
 8007048:	d121      	bne.n	800708e <__ssvfscanf_r+0x932>
 800704a:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
 800704e:	f88a 1000 	strb.w	r1, [sl]
 8007052:	f10a 0a01 	add.w	sl, sl, #1
 8007056:	e7e6      	b.n	8007026 <__ssvfscanf_r+0x8ca>
 8007058:	b953      	cbnz	r3, 8007070 <__ssvfscanf_r+0x914>
 800705a:	9807      	ldr	r0, [sp, #28]
 800705c:	b950      	cbnz	r0, 8007074 <__ssvfscanf_r+0x918>
 800705e:	f404 6ee0 	and.w	lr, r4, #1792	; 0x700
 8007062:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
 8007066:	d105      	bne.n	8007074 <__ssvfscanf_r+0x918>
 8007068:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
 800706c:	2301      	movs	r3, #1
 800706e:	e7ee      	b.n	800704e <__ssvfscanf_r+0x8f2>
 8007070:	2b02      	cmp	r3, #2
 8007072:	d02a      	beq.n	80070ca <__ssvfscanf_r+0x96e>
 8007074:	f1b9 0f01 	cmp.w	r9, #1
 8007078:	d002      	beq.n	8007080 <__ssvfscanf_r+0x924>
 800707a:	f1b9 0f04 	cmp.w	r9, #4
 800707e:	d106      	bne.n	800708e <__ssvfscanf_r+0x932>
 8007080:	f109 0901 	add.w	r9, r9, #1
 8007084:	fa5f f989 	uxtb.w	r9, r9
 8007088:	e7e1      	b.n	800704e <__ssvfscanf_r+0x8f2>
 800708a:	2b01      	cmp	r3, #1
 800708c:	d01f      	beq.n	80070ce <__ssvfscanf_r+0x972>
 800708e:	9a07      	ldr	r2, [sp, #28]
 8007090:	b10a      	cbz	r2, 8007096 <__ssvfscanf_r+0x93a>
 8007092:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8007096:	3b01      	subs	r3, #1
 8007098:	2b01      	cmp	r3, #1
 800709a:	d827      	bhi.n	80070ec <__ssvfscanf_r+0x990>
 800709c:	ac52      	add	r4, sp, #328	; 0x148
 800709e:	45a2      	cmp	sl, r4
 80070a0:	f67f ac44 	bls.w	800692c <__ssvfscanf_r+0x1d0>
 80070a4:	462a      	mov	r2, r5
 80070a6:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
 80070aa:	4640      	mov	r0, r8
 80070ac:	f002 ff28 	bl	8009f00 <_sungetc_r>
 80070b0:	e7f5      	b.n	800709e <__ssvfscanf_r+0x942>
 80070b2:	f1b9 0f03 	cmp.w	r9, #3
 80070b6:	d0e3      	beq.n	8007080 <__ssvfscanf_r+0x924>
 80070b8:	f1b9 0f05 	cmp.w	r9, #5
 80070bc:	e7df      	b.n	800707e <__ssvfscanf_r+0x922>
 80070be:	f1b9 0f02 	cmp.w	r9, #2
 80070c2:	d1e4      	bne.n	800708e <__ssvfscanf_r+0x932>
 80070c4:	f04f 0903 	mov.w	r9, #3
 80070c8:	e7c1      	b.n	800704e <__ssvfscanf_r+0x8f2>
 80070ca:	2303      	movs	r3, #3
 80070cc:	e7bf      	b.n	800704e <__ssvfscanf_r+0x8f2>
 80070ce:	2302      	movs	r3, #2
 80070d0:	e7bd      	b.n	800704e <__ssvfscanf_r+0x8f2>
 80070d2:	4629      	mov	r1, r5
 80070d4:	4640      	mov	r0, r8
 80070d6:	930d      	str	r3, [sp, #52]	; 0x34
 80070d8:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80070dc:	f002 ff4d 	bl	8009f7a <__ssrefill_r>
 80070e0:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 80070e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070e6:	2800      	cmp	r0, #0
 80070e8:	d0a8      	beq.n	800703c <__ssvfscanf_r+0x8e0>
 80070ea:	e7d0      	b.n	800708e <__ssvfscanf_r+0x932>
 80070ec:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 80070f0:	2b06      	cmp	r3, #6
 80070f2:	d81b      	bhi.n	800712c <__ssvfscanf_r+0x9d0>
 80070f4:	f1b9 0f02 	cmp.w	r9, #2
 80070f8:	d80e      	bhi.n	8007118 <__ssvfscanf_r+0x9bc>
 80070fa:	ac52      	add	r4, sp, #328	; 0x148
 80070fc:	45a2      	cmp	sl, r4
 80070fe:	f67f ac15 	bls.w	800692c <__ssvfscanf_r+0x1d0>
 8007102:	462a      	mov	r2, r5
 8007104:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
 8007108:	4640      	mov	r0, r8
 800710a:	f002 fef9 	bl	8009f00 <_sungetc_r>
 800710e:	e7f5      	b.n	80070fc <__ssvfscanf_r+0x9a0>
 8007110:	0800b0b2 	.word	0x0800b0b2
 8007114:	08009c85 	.word	0x08009c85
 8007118:	f1a9 0903 	sub.w	r9, r9, #3
 800711c:	fa5f f989 	uxtb.w	r9, r9
 8007120:	ebaa 0609 	sub.w	r6, sl, r9
 8007124:	45b2      	cmp	sl, r6
 8007126:	d110      	bne.n	800714a <__ssvfscanf_r+0x9ee>
 8007128:	ebab 0b09 	sub.w	fp, fp, r9
 800712c:	05e2      	lsls	r2, r4, #23
 800712e:	d52d      	bpl.n	800718c <__ssvfscanf_r+0xa30>
 8007130:	0563      	lsls	r3, r4, #21
 8007132:	d511      	bpl.n	8007158 <__ssvfscanf_r+0x9fc>
 8007134:	ac52      	add	r4, sp, #328	; 0x148
 8007136:	45a2      	cmp	sl, r4
 8007138:	f67f abf8 	bls.w	800692c <__ssvfscanf_r+0x1d0>
 800713c:	462a      	mov	r2, r5
 800713e:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
 8007142:	4640      	mov	r0, r8
 8007144:	f002 fedc 	bl	8009f00 <_sungetc_r>
 8007148:	e7f5      	b.n	8007136 <__ssvfscanf_r+0x9da>
 800714a:	462a      	mov	r2, r5
 800714c:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
 8007150:	4640      	mov	r0, r8
 8007152:	f002 fed5 	bl	8009f00 <_sungetc_r>
 8007156:	e7e5      	b.n	8007124 <__ssvfscanf_r+0x9c8>
 8007158:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 800715c:	f10a 36ff 	add.w	r6, sl, #4294967295	; 0xffffffff
 8007160:	2965      	cmp	r1, #101	; 0x65
 8007162:	f10b 39ff 	add.w	r9, fp, #4294967295	; 0xffffffff
 8007166:	d00b      	beq.n	8007180 <__ssvfscanf_r+0xa24>
 8007168:	2945      	cmp	r1, #69	; 0x45
 800716a:	d009      	beq.n	8007180 <__ssvfscanf_r+0xa24>
 800716c:	462a      	mov	r2, r5
 800716e:	4640      	mov	r0, r8
 8007170:	f002 fec6 	bl	8009f00 <_sungetc_r>
 8007174:	f81a 1c02 	ldrb.w	r1, [sl, #-2]
 8007178:	f1aa 0602 	sub.w	r6, sl, #2
 800717c:	f1ab 0902 	sub.w	r9, fp, #2
 8007180:	462a      	mov	r2, r5
 8007182:	4640      	mov	r0, r8
 8007184:	f002 febc 	bl	8009f00 <_sungetc_r>
 8007188:	46cb      	mov	fp, r9
 800718a:	46b2      	mov	sl, r6
 800718c:	f014 0210 	ands.w	r2, r4, #16
 8007190:	f47f aafc 	bne.w	800678c <__ssvfscanf_r+0x30>
 8007194:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
 8007198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800719c:	f88a 2000 	strb.w	r2, [sl]
 80071a0:	d119      	bne.n	80071d6 <__ssvfscanf_r+0xa7a>
 80071a2:	9a08      	ldr	r2, [sp, #32]
 80071a4:	9b07      	ldr	r3, [sp, #28]
 80071a6:	1a9b      	subs	r3, r3, r2
 80071a8:	425a      	negs	r2, r3
 80071aa:	bb0b      	cbnz	r3, 80071f0 <__ssvfscanf_r+0xa94>
 80071ac:	2200      	movs	r2, #0
 80071ae:	a952      	add	r1, sp, #328	; 0x148
 80071b0:	4640      	mov	r0, r8
 80071b2:	f002 fb91 	bl	80098d8 <_strtod_r>
 80071b6:	f014 0f01 	tst.w	r4, #1
 80071ba:	4681      	mov	r9, r0
 80071bc:	468a      	mov	sl, r1
 80071be:	f107 0604 	add.w	r6, r7, #4
 80071c2:	d020      	beq.n	8007206 <__ssvfscanf_r+0xaaa>
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	e883 0600 	stmia.w	r3, {r9, sl}
 80071ca:	9b04      	ldr	r3, [sp, #16]
 80071cc:	4637      	mov	r7, r6
 80071ce:	3301      	adds	r3, #1
 80071d0:	9304      	str	r3, [sp, #16]
 80071d2:	f7ff badb 	b.w	800678c <__ssvfscanf_r+0x30>
 80071d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d0e7      	beq.n	80071ac <__ssvfscanf_r+0xa50>
 80071dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80071de:	230a      	movs	r3, #10
 80071e0:	3101      	adds	r1, #1
 80071e2:	4640      	mov	r0, r8
 80071e4:	f002 fc08 	bl	80099f8 <_strtol_r>
 80071e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ea:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80071ee:	1ac2      	subs	r2, r0, r3
 80071f0:	f20d 239b 	addw	r3, sp, #667	; 0x29b
 80071f4:	459a      	cmp	sl, r3
 80071f6:	bf28      	it	cs
 80071f8:	f20d 2a9a 	addwcs	sl, sp, #666	; 0x29a
 80071fc:	490d      	ldr	r1, [pc, #52]	; (8007234 <__ssvfscanf_r+0xad8>)
 80071fe:	4650      	mov	r0, sl
 8007200:	f7fe fa8c 	bl	800571c <sprintf>
 8007204:	e7d2      	b.n	80071ac <__ssvfscanf_r+0xa50>
 8007206:	f014 0402 	ands.w	r4, r4, #2
 800720a:	d1db      	bne.n	80071c4 <__ssvfscanf_r+0xa68>
 800720c:	4602      	mov	r2, r0
 800720e:	460b      	mov	r3, r1
 8007210:	683f      	ldr	r7, [r7, #0]
 8007212:	f7f9 fc01 	bl	8000a18 <__aeabi_dcmpun>
 8007216:	b120      	cbz	r0, 8007222 <__ssvfscanf_r+0xac6>
 8007218:	4620      	mov	r0, r4
 800721a:	f001 fd3f 	bl	8008c9c <nanf>
 800721e:	6038      	str	r0, [r7, #0]
 8007220:	e7d3      	b.n	80071ca <__ssvfscanf_r+0xa6e>
 8007222:	4648      	mov	r0, r9
 8007224:	4651      	mov	r1, sl
 8007226:	f7f9 fc55 	bl	8000ad4 <__aeabi_d2f>
 800722a:	e7f8      	b.n	800721e <__ssvfscanf_r+0xac2>
 800722c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007230:	f7ff bb92 	b.w	8006958 <__ssvfscanf_r+0x1fc>
 8007234:	0800b0ac 	.word	0x0800b0ac

08007238 <quorem>:
 8007238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723c:	6903      	ldr	r3, [r0, #16]
 800723e:	690c      	ldr	r4, [r1, #16]
 8007240:	4680      	mov	r8, r0
 8007242:	429c      	cmp	r4, r3
 8007244:	f300 8082 	bgt.w	800734c <quorem+0x114>
 8007248:	3c01      	subs	r4, #1
 800724a:	f101 0714 	add.w	r7, r1, #20
 800724e:	f100 0614 	add.w	r6, r0, #20
 8007252:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007256:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800725a:	3501      	adds	r5, #1
 800725c:	fbb0 f5f5 	udiv	r5, r0, r5
 8007260:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8007264:	eb06 030e 	add.w	r3, r6, lr
 8007268:	eb07 090e 	add.w	r9, r7, lr
 800726c:	9301      	str	r3, [sp, #4]
 800726e:	b38d      	cbz	r5, 80072d4 <quorem+0x9c>
 8007270:	f04f 0a00 	mov.w	sl, #0
 8007274:	4638      	mov	r0, r7
 8007276:	46b4      	mov	ip, r6
 8007278:	46d3      	mov	fp, sl
 800727a:	f850 2b04 	ldr.w	r2, [r0], #4
 800727e:	b293      	uxth	r3, r2
 8007280:	fb05 a303 	mla	r3, r5, r3, sl
 8007284:	0c12      	lsrs	r2, r2, #16
 8007286:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800728a:	fb05 a202 	mla	r2, r5, r2, sl
 800728e:	b29b      	uxth	r3, r3
 8007290:	ebab 0303 	sub.w	r3, fp, r3
 8007294:	f8bc b000 	ldrh.w	fp, [ip]
 8007298:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800729c:	445b      	add	r3, fp
 800729e:	fa1f fb82 	uxth.w	fp, r2
 80072a2:	f8dc 2000 	ldr.w	r2, [ip]
 80072a6:	4581      	cmp	r9, r0
 80072a8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80072ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072b6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80072ba:	f84c 3b04 	str.w	r3, [ip], #4
 80072be:	d2dc      	bcs.n	800727a <quorem+0x42>
 80072c0:	f856 300e 	ldr.w	r3, [r6, lr]
 80072c4:	b933      	cbnz	r3, 80072d4 <quorem+0x9c>
 80072c6:	9b01      	ldr	r3, [sp, #4]
 80072c8:	3b04      	subs	r3, #4
 80072ca:	429e      	cmp	r6, r3
 80072cc:	461a      	mov	r2, r3
 80072ce:	d331      	bcc.n	8007334 <quorem+0xfc>
 80072d0:	f8c8 4010 	str.w	r4, [r8, #16]
 80072d4:	4640      	mov	r0, r8
 80072d6:	f001 fb00 	bl	80088da <__mcmp>
 80072da:	2800      	cmp	r0, #0
 80072dc:	db26      	blt.n	800732c <quorem+0xf4>
 80072de:	4630      	mov	r0, r6
 80072e0:	f04f 0e00 	mov.w	lr, #0
 80072e4:	3501      	adds	r5, #1
 80072e6:	f857 1b04 	ldr.w	r1, [r7], #4
 80072ea:	f8d0 c000 	ldr.w	ip, [r0]
 80072ee:	b28b      	uxth	r3, r1
 80072f0:	ebae 0303 	sub.w	r3, lr, r3
 80072f4:	fa1f f28c 	uxth.w	r2, ip
 80072f8:	4413      	add	r3, r2
 80072fa:	0c0a      	lsrs	r2, r1, #16
 80072fc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007300:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007304:	b29b      	uxth	r3, r3
 8007306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800730a:	45b9      	cmp	r9, r7
 800730c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007310:	f840 3b04 	str.w	r3, [r0], #4
 8007314:	d2e7      	bcs.n	80072e6 <quorem+0xae>
 8007316:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800731a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800731e:	b92a      	cbnz	r2, 800732c <quorem+0xf4>
 8007320:	3b04      	subs	r3, #4
 8007322:	429e      	cmp	r6, r3
 8007324:	461a      	mov	r2, r3
 8007326:	d30b      	bcc.n	8007340 <quorem+0x108>
 8007328:	f8c8 4010 	str.w	r4, [r8, #16]
 800732c:	4628      	mov	r0, r5
 800732e:	b003      	add	sp, #12
 8007330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007334:	6812      	ldr	r2, [r2, #0]
 8007336:	3b04      	subs	r3, #4
 8007338:	2a00      	cmp	r2, #0
 800733a:	d1c9      	bne.n	80072d0 <quorem+0x98>
 800733c:	3c01      	subs	r4, #1
 800733e:	e7c4      	b.n	80072ca <quorem+0x92>
 8007340:	6812      	ldr	r2, [r2, #0]
 8007342:	3b04      	subs	r3, #4
 8007344:	2a00      	cmp	r2, #0
 8007346:	d1ef      	bne.n	8007328 <quorem+0xf0>
 8007348:	3c01      	subs	r4, #1
 800734a:	e7ea      	b.n	8007322 <quorem+0xea>
 800734c:	2000      	movs	r0, #0
 800734e:	e7ee      	b.n	800732e <quorem+0xf6>

08007350 <_dtoa_r>:
 8007350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007354:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007356:	b095      	sub	sp, #84	; 0x54
 8007358:	4604      	mov	r4, r0
 800735a:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800735c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007360:	b93e      	cbnz	r6, 8007372 <_dtoa_r+0x22>
 8007362:	2010      	movs	r0, #16
 8007364:	f000 fe06 	bl	8007f74 <malloc>
 8007368:	6260      	str	r0, [r4, #36]	; 0x24
 800736a:	6046      	str	r6, [r0, #4]
 800736c:	6086      	str	r6, [r0, #8]
 800736e:	6006      	str	r6, [r0, #0]
 8007370:	60c6      	str	r6, [r0, #12]
 8007372:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007374:	6819      	ldr	r1, [r3, #0]
 8007376:	b151      	cbz	r1, 800738e <_dtoa_r+0x3e>
 8007378:	685a      	ldr	r2, [r3, #4]
 800737a:	2301      	movs	r3, #1
 800737c:	4093      	lsls	r3, r2
 800737e:	604a      	str	r2, [r1, #4]
 8007380:	608b      	str	r3, [r1, #8]
 8007382:	4620      	mov	r0, r4
 8007384:	f001 f896 	bl	80084b4 <_Bfree>
 8007388:	2200      	movs	r2, #0
 800738a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800738c:	601a      	str	r2, [r3, #0]
 800738e:	9b03      	ldr	r3, [sp, #12]
 8007390:	2b00      	cmp	r3, #0
 8007392:	bfb7      	itett	lt
 8007394:	2301      	movlt	r3, #1
 8007396:	2300      	movge	r3, #0
 8007398:	602b      	strlt	r3, [r5, #0]
 800739a:	9b03      	ldrlt	r3, [sp, #12]
 800739c:	bfae      	itee	ge
 800739e:	602b      	strge	r3, [r5, #0]
 80073a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80073a4:	9303      	strlt	r3, [sp, #12]
 80073a6:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80073aa:	4bab      	ldr	r3, [pc, #684]	; (8007658 <_dtoa_r+0x308>)
 80073ac:	ea33 0309 	bics.w	r3, r3, r9
 80073b0:	d11b      	bne.n	80073ea <_dtoa_r+0x9a>
 80073b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80073b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80073b8:	6013      	str	r3, [r2, #0]
 80073ba:	9b02      	ldr	r3, [sp, #8]
 80073bc:	b923      	cbnz	r3, 80073c8 <_dtoa_r+0x78>
 80073be:	f3c9 0013 	ubfx	r0, r9, #0, #20
 80073c2:	2800      	cmp	r0, #0
 80073c4:	f000 8583 	beq.w	8007ece <_dtoa_r+0xb7e>
 80073c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073ca:	b953      	cbnz	r3, 80073e2 <_dtoa_r+0x92>
 80073cc:	4ba3      	ldr	r3, [pc, #652]	; (800765c <_dtoa_r+0x30c>)
 80073ce:	e021      	b.n	8007414 <_dtoa_r+0xc4>
 80073d0:	4ba3      	ldr	r3, [pc, #652]	; (8007660 <_dtoa_r+0x310>)
 80073d2:	9306      	str	r3, [sp, #24]
 80073d4:	3308      	adds	r3, #8
 80073d6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80073d8:	6013      	str	r3, [r2, #0]
 80073da:	9806      	ldr	r0, [sp, #24]
 80073dc:	b015      	add	sp, #84	; 0x54
 80073de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e2:	4b9e      	ldr	r3, [pc, #632]	; (800765c <_dtoa_r+0x30c>)
 80073e4:	9306      	str	r3, [sp, #24]
 80073e6:	3303      	adds	r3, #3
 80073e8:	e7f5      	b.n	80073d6 <_dtoa_r+0x86>
 80073ea:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80073ee:	2200      	movs	r2, #0
 80073f0:	2300      	movs	r3, #0
 80073f2:	4630      	mov	r0, r6
 80073f4:	4639      	mov	r1, r7
 80073f6:	f7f9 fadd 	bl	80009b4 <__aeabi_dcmpeq>
 80073fa:	4680      	mov	r8, r0
 80073fc:	b160      	cbz	r0, 8007418 <_dtoa_r+0xc8>
 80073fe:	2301      	movs	r3, #1
 8007400:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007402:	6013      	str	r3, [r2, #0]
 8007404:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007406:	2b00      	cmp	r3, #0
 8007408:	f000 855e 	beq.w	8007ec8 <_dtoa_r+0xb78>
 800740c:	4b95      	ldr	r3, [pc, #596]	; (8007664 <_dtoa_r+0x314>)
 800740e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007410:	6013      	str	r3, [r2, #0]
 8007412:	3b01      	subs	r3, #1
 8007414:	9306      	str	r3, [sp, #24]
 8007416:	e7e0      	b.n	80073da <_dtoa_r+0x8a>
 8007418:	ab12      	add	r3, sp, #72	; 0x48
 800741a:	9301      	str	r3, [sp, #4]
 800741c:	ab13      	add	r3, sp, #76	; 0x4c
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	4632      	mov	r2, r6
 8007422:	463b      	mov	r3, r7
 8007424:	4620      	mov	r0, r4
 8007426:	f001 fb47 	bl	8008ab8 <__d2b>
 800742a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800742e:	4682      	mov	sl, r0
 8007430:	2d00      	cmp	r5, #0
 8007432:	d07d      	beq.n	8007530 <_dtoa_r+0x1e0>
 8007434:	4630      	mov	r0, r6
 8007436:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800743a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800743e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007442:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007446:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800744a:	2200      	movs	r2, #0
 800744c:	4b86      	ldr	r3, [pc, #536]	; (8007668 <_dtoa_r+0x318>)
 800744e:	f7f8 fe95 	bl	800017c <__aeabi_dsub>
 8007452:	a37b      	add	r3, pc, #492	; (adr r3, 8007640 <_dtoa_r+0x2f0>)
 8007454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007458:	f7f9 f844 	bl	80004e4 <__aeabi_dmul>
 800745c:	a37a      	add	r3, pc, #488	; (adr r3, 8007648 <_dtoa_r+0x2f8>)
 800745e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007462:	f7f8 fe8d 	bl	8000180 <__adddf3>
 8007466:	4606      	mov	r6, r0
 8007468:	4628      	mov	r0, r5
 800746a:	460f      	mov	r7, r1
 800746c:	f7f8 ffd4 	bl	8000418 <__aeabi_i2d>
 8007470:	a377      	add	r3, pc, #476	; (adr r3, 8007650 <_dtoa_r+0x300>)
 8007472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007476:	f7f9 f835 	bl	80004e4 <__aeabi_dmul>
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	4630      	mov	r0, r6
 8007480:	4639      	mov	r1, r7
 8007482:	f7f8 fe7d 	bl	8000180 <__adddf3>
 8007486:	4606      	mov	r6, r0
 8007488:	460f      	mov	r7, r1
 800748a:	f7f9 fadb 	bl	8000a44 <__aeabi_d2iz>
 800748e:	2200      	movs	r2, #0
 8007490:	4683      	mov	fp, r0
 8007492:	2300      	movs	r3, #0
 8007494:	4630      	mov	r0, r6
 8007496:	4639      	mov	r1, r7
 8007498:	f7f9 fa96 	bl	80009c8 <__aeabi_dcmplt>
 800749c:	b158      	cbz	r0, 80074b6 <_dtoa_r+0x166>
 800749e:	4658      	mov	r0, fp
 80074a0:	f7f8 ffba 	bl	8000418 <__aeabi_i2d>
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	4630      	mov	r0, r6
 80074aa:	4639      	mov	r1, r7
 80074ac:	f7f9 fa82 	bl	80009b4 <__aeabi_dcmpeq>
 80074b0:	b908      	cbnz	r0, 80074b6 <_dtoa_r+0x166>
 80074b2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80074b6:	f1bb 0f16 	cmp.w	fp, #22
 80074ba:	d858      	bhi.n	800756e <_dtoa_r+0x21e>
 80074bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074c0:	496a      	ldr	r1, [pc, #424]	; (800766c <_dtoa_r+0x31c>)
 80074c2:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80074c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074ca:	f7f9 fa9b 	bl	8000a04 <__aeabi_dcmpgt>
 80074ce:	2800      	cmp	r0, #0
 80074d0:	d04f      	beq.n	8007572 <_dtoa_r+0x222>
 80074d2:	2300      	movs	r3, #0
 80074d4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80074d8:	930d      	str	r3, [sp, #52]	; 0x34
 80074da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80074dc:	1b5d      	subs	r5, r3, r5
 80074de:	1e6b      	subs	r3, r5, #1
 80074e0:	9307      	str	r3, [sp, #28]
 80074e2:	bf43      	ittte	mi
 80074e4:	2300      	movmi	r3, #0
 80074e6:	f1c5 0801 	rsbmi	r8, r5, #1
 80074ea:	9307      	strmi	r3, [sp, #28]
 80074ec:	f04f 0800 	movpl.w	r8, #0
 80074f0:	f1bb 0f00 	cmp.w	fp, #0
 80074f4:	db3f      	blt.n	8007576 <_dtoa_r+0x226>
 80074f6:	9b07      	ldr	r3, [sp, #28]
 80074f8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80074fc:	445b      	add	r3, fp
 80074fe:	9307      	str	r3, [sp, #28]
 8007500:	2300      	movs	r3, #0
 8007502:	9308      	str	r3, [sp, #32]
 8007504:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007506:	2b09      	cmp	r3, #9
 8007508:	f200 80b4 	bhi.w	8007674 <_dtoa_r+0x324>
 800750c:	2b05      	cmp	r3, #5
 800750e:	bfc4      	itt	gt
 8007510:	3b04      	subgt	r3, #4
 8007512:	931e      	strgt	r3, [sp, #120]	; 0x78
 8007514:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007516:	bfc8      	it	gt
 8007518:	2600      	movgt	r6, #0
 800751a:	f1a3 0302 	sub.w	r3, r3, #2
 800751e:	bfd8      	it	le
 8007520:	2601      	movle	r6, #1
 8007522:	2b03      	cmp	r3, #3
 8007524:	f200 80b2 	bhi.w	800768c <_dtoa_r+0x33c>
 8007528:	e8df f003 	tbb	[pc, r3]
 800752c:	782d8684 	.word	0x782d8684
 8007530:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007532:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8007534:	441d      	add	r5, r3
 8007536:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800753a:	2b20      	cmp	r3, #32
 800753c:	dd11      	ble.n	8007562 <_dtoa_r+0x212>
 800753e:	9a02      	ldr	r2, [sp, #8]
 8007540:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007544:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8007548:	fa22 f000 	lsr.w	r0, r2, r0
 800754c:	fa09 f303 	lsl.w	r3, r9, r3
 8007550:	4318      	orrs	r0, r3
 8007552:	f7f8 ff51 	bl	80003f8 <__aeabi_ui2d>
 8007556:	2301      	movs	r3, #1
 8007558:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800755c:	3d01      	subs	r5, #1
 800755e:	9310      	str	r3, [sp, #64]	; 0x40
 8007560:	e773      	b.n	800744a <_dtoa_r+0xfa>
 8007562:	f1c3 0020 	rsb	r0, r3, #32
 8007566:	9b02      	ldr	r3, [sp, #8]
 8007568:	fa03 f000 	lsl.w	r0, r3, r0
 800756c:	e7f1      	b.n	8007552 <_dtoa_r+0x202>
 800756e:	2301      	movs	r3, #1
 8007570:	e7b2      	b.n	80074d8 <_dtoa_r+0x188>
 8007572:	900d      	str	r0, [sp, #52]	; 0x34
 8007574:	e7b1      	b.n	80074da <_dtoa_r+0x18a>
 8007576:	f1cb 0300 	rsb	r3, fp, #0
 800757a:	9308      	str	r3, [sp, #32]
 800757c:	2300      	movs	r3, #0
 800757e:	eba8 080b 	sub.w	r8, r8, fp
 8007582:	930c      	str	r3, [sp, #48]	; 0x30
 8007584:	e7be      	b.n	8007504 <_dtoa_r+0x1b4>
 8007586:	2301      	movs	r3, #1
 8007588:	9309      	str	r3, [sp, #36]	; 0x24
 800758a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800758c:	2b00      	cmp	r3, #0
 800758e:	f340 8080 	ble.w	8007692 <_dtoa_r+0x342>
 8007592:	4699      	mov	r9, r3
 8007594:	9304      	str	r3, [sp, #16]
 8007596:	2200      	movs	r2, #0
 8007598:	2104      	movs	r1, #4
 800759a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800759c:	606a      	str	r2, [r5, #4]
 800759e:	f101 0214 	add.w	r2, r1, #20
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d97a      	bls.n	800769c <_dtoa_r+0x34c>
 80075a6:	6869      	ldr	r1, [r5, #4]
 80075a8:	4620      	mov	r0, r4
 80075aa:	f000 ff4f 	bl	800844c <_Balloc>
 80075ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075b0:	6028      	str	r0, [r5, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f1b9 0f0e 	cmp.w	r9, #14
 80075b8:	9306      	str	r3, [sp, #24]
 80075ba:	f200 80f0 	bhi.w	800779e <_dtoa_r+0x44e>
 80075be:	2e00      	cmp	r6, #0
 80075c0:	f000 80ed 	beq.w	800779e <_dtoa_r+0x44e>
 80075c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075c8:	f1bb 0f00 	cmp.w	fp, #0
 80075cc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80075d0:	dd79      	ble.n	80076c6 <_dtoa_r+0x376>
 80075d2:	4a26      	ldr	r2, [pc, #152]	; (800766c <_dtoa_r+0x31c>)
 80075d4:	f00b 030f 	and.w	r3, fp, #15
 80075d8:	ea4f 162b 	mov.w	r6, fp, asr #4
 80075dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80075e0:	06f0      	lsls	r0, r6, #27
 80075e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80075ea:	d55c      	bpl.n	80076a6 <_dtoa_r+0x356>
 80075ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80075f0:	4b1f      	ldr	r3, [pc, #124]	; (8007670 <_dtoa_r+0x320>)
 80075f2:	2503      	movs	r5, #3
 80075f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075f8:	f7f9 f89e 	bl	8000738 <__aeabi_ddiv>
 80075fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007600:	f006 060f 	and.w	r6, r6, #15
 8007604:	4f1a      	ldr	r7, [pc, #104]	; (8007670 <_dtoa_r+0x320>)
 8007606:	2e00      	cmp	r6, #0
 8007608:	d14f      	bne.n	80076aa <_dtoa_r+0x35a>
 800760a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800760e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007612:	f7f9 f891 	bl	8000738 <__aeabi_ddiv>
 8007616:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800761a:	e06e      	b.n	80076fa <_dtoa_r+0x3aa>
 800761c:	2301      	movs	r3, #1
 800761e:	9309      	str	r3, [sp, #36]	; 0x24
 8007620:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007622:	445b      	add	r3, fp
 8007624:	f103 0901 	add.w	r9, r3, #1
 8007628:	9304      	str	r3, [sp, #16]
 800762a:	464b      	mov	r3, r9
 800762c:	2b01      	cmp	r3, #1
 800762e:	bfb8      	it	lt
 8007630:	2301      	movlt	r3, #1
 8007632:	e7b0      	b.n	8007596 <_dtoa_r+0x246>
 8007634:	2300      	movs	r3, #0
 8007636:	e7a7      	b.n	8007588 <_dtoa_r+0x238>
 8007638:	2300      	movs	r3, #0
 800763a:	e7f0      	b.n	800761e <_dtoa_r+0x2ce>
 800763c:	f3af 8000 	nop.w
 8007640:	636f4361 	.word	0x636f4361
 8007644:	3fd287a7 	.word	0x3fd287a7
 8007648:	8b60c8b3 	.word	0x8b60c8b3
 800764c:	3fc68a28 	.word	0x3fc68a28
 8007650:	509f79fb 	.word	0x509f79fb
 8007654:	3fd34413 	.word	0x3fd34413
 8007658:	7ff00000 	.word	0x7ff00000
 800765c:	0800b0dd 	.word	0x0800b0dd
 8007660:	0800b0d4 	.word	0x0800b0d4
 8007664:	0800b08b 	.word	0x0800b08b
 8007668:	3ff80000 	.word	0x3ff80000
 800766c:	0800b118 	.word	0x0800b118
 8007670:	0800b0f0 	.word	0x0800b0f0
 8007674:	2601      	movs	r6, #1
 8007676:	2300      	movs	r3, #0
 8007678:	9609      	str	r6, [sp, #36]	; 0x24
 800767a:	931e      	str	r3, [sp, #120]	; 0x78
 800767c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007680:	2200      	movs	r2, #0
 8007682:	9304      	str	r3, [sp, #16]
 8007684:	4699      	mov	r9, r3
 8007686:	2312      	movs	r3, #18
 8007688:	921f      	str	r2, [sp, #124]	; 0x7c
 800768a:	e784      	b.n	8007596 <_dtoa_r+0x246>
 800768c:	2301      	movs	r3, #1
 800768e:	9309      	str	r3, [sp, #36]	; 0x24
 8007690:	e7f4      	b.n	800767c <_dtoa_r+0x32c>
 8007692:	2301      	movs	r3, #1
 8007694:	9304      	str	r3, [sp, #16]
 8007696:	4699      	mov	r9, r3
 8007698:	461a      	mov	r2, r3
 800769a:	e7f5      	b.n	8007688 <_dtoa_r+0x338>
 800769c:	686a      	ldr	r2, [r5, #4]
 800769e:	0049      	lsls	r1, r1, #1
 80076a0:	3201      	adds	r2, #1
 80076a2:	606a      	str	r2, [r5, #4]
 80076a4:	e77b      	b.n	800759e <_dtoa_r+0x24e>
 80076a6:	2502      	movs	r5, #2
 80076a8:	e7ac      	b.n	8007604 <_dtoa_r+0x2b4>
 80076aa:	07f1      	lsls	r1, r6, #31
 80076ac:	d508      	bpl.n	80076c0 <_dtoa_r+0x370>
 80076ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80076b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076b6:	f7f8 ff15 	bl	80004e4 <__aeabi_dmul>
 80076ba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80076be:	3501      	adds	r5, #1
 80076c0:	1076      	asrs	r6, r6, #1
 80076c2:	3708      	adds	r7, #8
 80076c4:	e79f      	b.n	8007606 <_dtoa_r+0x2b6>
 80076c6:	f000 80a5 	beq.w	8007814 <_dtoa_r+0x4c4>
 80076ca:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80076ce:	f1cb 0600 	rsb	r6, fp, #0
 80076d2:	4ba2      	ldr	r3, [pc, #648]	; (800795c <_dtoa_r+0x60c>)
 80076d4:	f006 020f 	and.w	r2, r6, #15
 80076d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e0:	f7f8 ff00 	bl	80004e4 <__aeabi_dmul>
 80076e4:	2502      	movs	r5, #2
 80076e6:	2300      	movs	r3, #0
 80076e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076ec:	4f9c      	ldr	r7, [pc, #624]	; (8007960 <_dtoa_r+0x610>)
 80076ee:	1136      	asrs	r6, r6, #4
 80076f0:	2e00      	cmp	r6, #0
 80076f2:	f040 8084 	bne.w	80077fe <_dtoa_r+0x4ae>
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d18d      	bne.n	8007616 <_dtoa_r+0x2c6>
 80076fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f000 808b 	beq.w	8007818 <_dtoa_r+0x4c8>
 8007702:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007706:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800770a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800770e:	2200      	movs	r2, #0
 8007710:	4b94      	ldr	r3, [pc, #592]	; (8007964 <_dtoa_r+0x614>)
 8007712:	f7f9 f959 	bl	80009c8 <__aeabi_dcmplt>
 8007716:	2800      	cmp	r0, #0
 8007718:	d07e      	beq.n	8007818 <_dtoa_r+0x4c8>
 800771a:	f1b9 0f00 	cmp.w	r9, #0
 800771e:	d07b      	beq.n	8007818 <_dtoa_r+0x4c8>
 8007720:	9b04      	ldr	r3, [sp, #16]
 8007722:	2b00      	cmp	r3, #0
 8007724:	dd37      	ble.n	8007796 <_dtoa_r+0x446>
 8007726:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800772a:	2200      	movs	r2, #0
 800772c:	4b8e      	ldr	r3, [pc, #568]	; (8007968 <_dtoa_r+0x618>)
 800772e:	f7f8 fed9 	bl	80004e4 <__aeabi_dmul>
 8007732:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007736:	9e04      	ldr	r6, [sp, #16]
 8007738:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800773c:	3501      	adds	r5, #1
 800773e:	4628      	mov	r0, r5
 8007740:	f7f8 fe6a 	bl	8000418 <__aeabi_i2d>
 8007744:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007748:	f7f8 fecc 	bl	80004e4 <__aeabi_dmul>
 800774c:	4b87      	ldr	r3, [pc, #540]	; (800796c <_dtoa_r+0x61c>)
 800774e:	2200      	movs	r2, #0
 8007750:	f7f8 fd16 	bl	8000180 <__adddf3>
 8007754:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800775a:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 800775e:	950b      	str	r5, [sp, #44]	; 0x2c
 8007760:	2e00      	cmp	r6, #0
 8007762:	d15c      	bne.n	800781e <_dtoa_r+0x4ce>
 8007764:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007768:	2200      	movs	r2, #0
 800776a:	4b81      	ldr	r3, [pc, #516]	; (8007970 <_dtoa_r+0x620>)
 800776c:	f7f8 fd06 	bl	800017c <__aeabi_dsub>
 8007770:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007772:	462b      	mov	r3, r5
 8007774:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007778:	f7f9 f944 	bl	8000a04 <__aeabi_dcmpgt>
 800777c:	2800      	cmp	r0, #0
 800777e:	f040 82f7 	bne.w	8007d70 <_dtoa_r+0xa20>
 8007782:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007786:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007788:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800778c:	f7f9 f91c 	bl	80009c8 <__aeabi_dcmplt>
 8007790:	2800      	cmp	r0, #0
 8007792:	f040 82eb 	bne.w	8007d6c <_dtoa_r+0xa1c>
 8007796:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800779a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800779e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f2c0 8150 	blt.w	8007a46 <_dtoa_r+0x6f6>
 80077a6:	f1bb 0f0e 	cmp.w	fp, #14
 80077aa:	f300 814c 	bgt.w	8007a46 <_dtoa_r+0x6f6>
 80077ae:	4b6b      	ldr	r3, [pc, #428]	; (800795c <_dtoa_r+0x60c>)
 80077b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80077b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f280 80da 	bge.w	8007978 <_dtoa_r+0x628>
 80077c4:	f1b9 0f00 	cmp.w	r9, #0
 80077c8:	f300 80d6 	bgt.w	8007978 <_dtoa_r+0x628>
 80077cc:	f040 82cd 	bne.w	8007d6a <_dtoa_r+0xa1a>
 80077d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077d4:	2200      	movs	r2, #0
 80077d6:	4b66      	ldr	r3, [pc, #408]	; (8007970 <_dtoa_r+0x620>)
 80077d8:	f7f8 fe84 	bl	80004e4 <__aeabi_dmul>
 80077dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077e0:	f7f9 f906 	bl	80009f0 <__aeabi_dcmpge>
 80077e4:	464e      	mov	r6, r9
 80077e6:	464f      	mov	r7, r9
 80077e8:	2800      	cmp	r0, #0
 80077ea:	f040 82a4 	bne.w	8007d36 <_dtoa_r+0x9e6>
 80077ee:	9b06      	ldr	r3, [sp, #24]
 80077f0:	9a06      	ldr	r2, [sp, #24]
 80077f2:	1c5d      	adds	r5, r3, #1
 80077f4:	2331      	movs	r3, #49	; 0x31
 80077f6:	f10b 0b01 	add.w	fp, fp, #1
 80077fa:	7013      	strb	r3, [r2, #0]
 80077fc:	e29f      	b.n	8007d3e <_dtoa_r+0x9ee>
 80077fe:	07f2      	lsls	r2, r6, #31
 8007800:	d505      	bpl.n	800780e <_dtoa_r+0x4be>
 8007802:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007806:	f7f8 fe6d 	bl	80004e4 <__aeabi_dmul>
 800780a:	2301      	movs	r3, #1
 800780c:	3501      	adds	r5, #1
 800780e:	1076      	asrs	r6, r6, #1
 8007810:	3708      	adds	r7, #8
 8007812:	e76d      	b.n	80076f0 <_dtoa_r+0x3a0>
 8007814:	2502      	movs	r5, #2
 8007816:	e770      	b.n	80076fa <_dtoa_r+0x3aa>
 8007818:	465f      	mov	r7, fp
 800781a:	464e      	mov	r6, r9
 800781c:	e78f      	b.n	800773e <_dtoa_r+0x3ee>
 800781e:	9a06      	ldr	r2, [sp, #24]
 8007820:	4b4e      	ldr	r3, [pc, #312]	; (800795c <_dtoa_r+0x60c>)
 8007822:	4432      	add	r2, r6
 8007824:	9211      	str	r2, [sp, #68]	; 0x44
 8007826:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007828:	1e71      	subs	r1, r6, #1
 800782a:	2a00      	cmp	r2, #0
 800782c:	d048      	beq.n	80078c0 <_dtoa_r+0x570>
 800782e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007836:	2000      	movs	r0, #0
 8007838:	494e      	ldr	r1, [pc, #312]	; (8007974 <_dtoa_r+0x624>)
 800783a:	f7f8 ff7d 	bl	8000738 <__aeabi_ddiv>
 800783e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007842:	f7f8 fc9b 	bl	800017c <__aeabi_dsub>
 8007846:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800784a:	9d06      	ldr	r5, [sp, #24]
 800784c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007850:	f7f9 f8f8 	bl	8000a44 <__aeabi_d2iz>
 8007854:	4606      	mov	r6, r0
 8007856:	f7f8 fddf 	bl	8000418 <__aeabi_i2d>
 800785a:	4602      	mov	r2, r0
 800785c:	460b      	mov	r3, r1
 800785e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007862:	f7f8 fc8b 	bl	800017c <__aeabi_dsub>
 8007866:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800786a:	3630      	adds	r6, #48	; 0x30
 800786c:	f805 6b01 	strb.w	r6, [r5], #1
 8007870:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007874:	f7f9 f8a8 	bl	80009c8 <__aeabi_dcmplt>
 8007878:	2800      	cmp	r0, #0
 800787a:	d164      	bne.n	8007946 <_dtoa_r+0x5f6>
 800787c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007880:	2000      	movs	r0, #0
 8007882:	4938      	ldr	r1, [pc, #224]	; (8007964 <_dtoa_r+0x614>)
 8007884:	f7f8 fc7a 	bl	800017c <__aeabi_dsub>
 8007888:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800788c:	f7f9 f89c 	bl	80009c8 <__aeabi_dcmplt>
 8007890:	2800      	cmp	r0, #0
 8007892:	f040 80b9 	bne.w	8007a08 <_dtoa_r+0x6b8>
 8007896:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007898:	429d      	cmp	r5, r3
 800789a:	f43f af7c 	beq.w	8007796 <_dtoa_r+0x446>
 800789e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80078a2:	2200      	movs	r2, #0
 80078a4:	4b30      	ldr	r3, [pc, #192]	; (8007968 <_dtoa_r+0x618>)
 80078a6:	f7f8 fe1d 	bl	80004e4 <__aeabi_dmul>
 80078aa:	2200      	movs	r2, #0
 80078ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80078b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078b4:	4b2c      	ldr	r3, [pc, #176]	; (8007968 <_dtoa_r+0x618>)
 80078b6:	f7f8 fe15 	bl	80004e4 <__aeabi_dmul>
 80078ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078be:	e7c5      	b.n	800784c <_dtoa_r+0x4fc>
 80078c0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80078c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80078cc:	f7f8 fe0a 	bl	80004e4 <__aeabi_dmul>
 80078d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80078d4:	9d06      	ldr	r5, [sp, #24]
 80078d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078da:	f7f9 f8b3 	bl	8000a44 <__aeabi_d2iz>
 80078de:	4606      	mov	r6, r0
 80078e0:	f7f8 fd9a 	bl	8000418 <__aeabi_i2d>
 80078e4:	4602      	mov	r2, r0
 80078e6:	460b      	mov	r3, r1
 80078e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078ec:	f7f8 fc46 	bl	800017c <__aeabi_dsub>
 80078f0:	3630      	adds	r6, #48	; 0x30
 80078f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078f4:	f805 6b01 	strb.w	r6, [r5], #1
 80078f8:	42ab      	cmp	r3, r5
 80078fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078fe:	f04f 0200 	mov.w	r2, #0
 8007902:	d124      	bne.n	800794e <_dtoa_r+0x5fe>
 8007904:	4b1b      	ldr	r3, [pc, #108]	; (8007974 <_dtoa_r+0x624>)
 8007906:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800790a:	f7f8 fc39 	bl	8000180 <__adddf3>
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007916:	f7f9 f875 	bl	8000a04 <__aeabi_dcmpgt>
 800791a:	2800      	cmp	r0, #0
 800791c:	d174      	bne.n	8007a08 <_dtoa_r+0x6b8>
 800791e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007922:	2000      	movs	r0, #0
 8007924:	4913      	ldr	r1, [pc, #76]	; (8007974 <_dtoa_r+0x624>)
 8007926:	f7f8 fc29 	bl	800017c <__aeabi_dsub>
 800792a:	4602      	mov	r2, r0
 800792c:	460b      	mov	r3, r1
 800792e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007932:	f7f9 f849 	bl	80009c8 <__aeabi_dcmplt>
 8007936:	2800      	cmp	r0, #0
 8007938:	f43f af2d 	beq.w	8007796 <_dtoa_r+0x446>
 800793c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007940:	1e6a      	subs	r2, r5, #1
 8007942:	2b30      	cmp	r3, #48	; 0x30
 8007944:	d001      	beq.n	800794a <_dtoa_r+0x5fa>
 8007946:	46bb      	mov	fp, r7
 8007948:	e04d      	b.n	80079e6 <_dtoa_r+0x696>
 800794a:	4615      	mov	r5, r2
 800794c:	e7f6      	b.n	800793c <_dtoa_r+0x5ec>
 800794e:	4b06      	ldr	r3, [pc, #24]	; (8007968 <_dtoa_r+0x618>)
 8007950:	f7f8 fdc8 	bl	80004e4 <__aeabi_dmul>
 8007954:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007958:	e7bd      	b.n	80078d6 <_dtoa_r+0x586>
 800795a:	bf00      	nop
 800795c:	0800b118 	.word	0x0800b118
 8007960:	0800b0f0 	.word	0x0800b0f0
 8007964:	3ff00000 	.word	0x3ff00000
 8007968:	40240000 	.word	0x40240000
 800796c:	401c0000 	.word	0x401c0000
 8007970:	40140000 	.word	0x40140000
 8007974:	3fe00000 	.word	0x3fe00000
 8007978:	9d06      	ldr	r5, [sp, #24]
 800797a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800797e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007982:	4630      	mov	r0, r6
 8007984:	4639      	mov	r1, r7
 8007986:	f7f8 fed7 	bl	8000738 <__aeabi_ddiv>
 800798a:	f7f9 f85b 	bl	8000a44 <__aeabi_d2iz>
 800798e:	4680      	mov	r8, r0
 8007990:	f7f8 fd42 	bl	8000418 <__aeabi_i2d>
 8007994:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007998:	f7f8 fda4 	bl	80004e4 <__aeabi_dmul>
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	4630      	mov	r0, r6
 80079a2:	4639      	mov	r1, r7
 80079a4:	f7f8 fbea 	bl	800017c <__aeabi_dsub>
 80079a8:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80079ac:	f805 6b01 	strb.w	r6, [r5], #1
 80079b0:	9e06      	ldr	r6, [sp, #24]
 80079b2:	4602      	mov	r2, r0
 80079b4:	1bae      	subs	r6, r5, r6
 80079b6:	45b1      	cmp	r9, r6
 80079b8:	460b      	mov	r3, r1
 80079ba:	d137      	bne.n	8007a2c <_dtoa_r+0x6dc>
 80079bc:	f7f8 fbe0 	bl	8000180 <__adddf3>
 80079c0:	4606      	mov	r6, r0
 80079c2:	460f      	mov	r7, r1
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079cc:	f7f8 fffc 	bl	80009c8 <__aeabi_dcmplt>
 80079d0:	b9c8      	cbnz	r0, 8007a06 <_dtoa_r+0x6b6>
 80079d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079d6:	4632      	mov	r2, r6
 80079d8:	463b      	mov	r3, r7
 80079da:	f7f8 ffeb 	bl	80009b4 <__aeabi_dcmpeq>
 80079de:	b110      	cbz	r0, 80079e6 <_dtoa_r+0x696>
 80079e0:	f018 0f01 	tst.w	r8, #1
 80079e4:	d10f      	bne.n	8007a06 <_dtoa_r+0x6b6>
 80079e6:	4651      	mov	r1, sl
 80079e8:	4620      	mov	r0, r4
 80079ea:	f000 fd63 	bl	80084b4 <_Bfree>
 80079ee:	2300      	movs	r3, #0
 80079f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80079f2:	702b      	strb	r3, [r5, #0]
 80079f4:	f10b 0301 	add.w	r3, fp, #1
 80079f8:	6013      	str	r3, [r2, #0]
 80079fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f43f acec 	beq.w	80073da <_dtoa_r+0x8a>
 8007a02:	601d      	str	r5, [r3, #0]
 8007a04:	e4e9      	b.n	80073da <_dtoa_r+0x8a>
 8007a06:	465f      	mov	r7, fp
 8007a08:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a0c:	1e6b      	subs	r3, r5, #1
 8007a0e:	2a39      	cmp	r2, #57	; 0x39
 8007a10:	d106      	bne.n	8007a20 <_dtoa_r+0x6d0>
 8007a12:	9a06      	ldr	r2, [sp, #24]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d107      	bne.n	8007a28 <_dtoa_r+0x6d8>
 8007a18:	2330      	movs	r3, #48	; 0x30
 8007a1a:	7013      	strb	r3, [r2, #0]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	3701      	adds	r7, #1
 8007a20:	781a      	ldrb	r2, [r3, #0]
 8007a22:	3201      	adds	r2, #1
 8007a24:	701a      	strb	r2, [r3, #0]
 8007a26:	e78e      	b.n	8007946 <_dtoa_r+0x5f6>
 8007a28:	461d      	mov	r5, r3
 8007a2a:	e7ed      	b.n	8007a08 <_dtoa_r+0x6b8>
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	4bb5      	ldr	r3, [pc, #724]	; (8007d04 <_dtoa_r+0x9b4>)
 8007a30:	f7f8 fd58 	bl	80004e4 <__aeabi_dmul>
 8007a34:	2200      	movs	r2, #0
 8007a36:	2300      	movs	r3, #0
 8007a38:	4606      	mov	r6, r0
 8007a3a:	460f      	mov	r7, r1
 8007a3c:	f7f8 ffba 	bl	80009b4 <__aeabi_dcmpeq>
 8007a40:	2800      	cmp	r0, #0
 8007a42:	d09c      	beq.n	800797e <_dtoa_r+0x62e>
 8007a44:	e7cf      	b.n	80079e6 <_dtoa_r+0x696>
 8007a46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a48:	2a00      	cmp	r2, #0
 8007a4a:	f000 8129 	beq.w	8007ca0 <_dtoa_r+0x950>
 8007a4e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007a50:	2a01      	cmp	r2, #1
 8007a52:	f300 810e 	bgt.w	8007c72 <_dtoa_r+0x922>
 8007a56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a58:	2a00      	cmp	r2, #0
 8007a5a:	f000 8106 	beq.w	8007c6a <_dtoa_r+0x91a>
 8007a5e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007a62:	4645      	mov	r5, r8
 8007a64:	9e08      	ldr	r6, [sp, #32]
 8007a66:	9a07      	ldr	r2, [sp, #28]
 8007a68:	2101      	movs	r1, #1
 8007a6a:	441a      	add	r2, r3
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	4498      	add	r8, r3
 8007a70:	9207      	str	r2, [sp, #28]
 8007a72:	f000 fdfd 	bl	8008670 <__i2b>
 8007a76:	4607      	mov	r7, r0
 8007a78:	2d00      	cmp	r5, #0
 8007a7a:	dd0b      	ble.n	8007a94 <_dtoa_r+0x744>
 8007a7c:	9b07      	ldr	r3, [sp, #28]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	dd08      	ble.n	8007a94 <_dtoa_r+0x744>
 8007a82:	42ab      	cmp	r3, r5
 8007a84:	bfa8      	it	ge
 8007a86:	462b      	movge	r3, r5
 8007a88:	9a07      	ldr	r2, [sp, #28]
 8007a8a:	eba8 0803 	sub.w	r8, r8, r3
 8007a8e:	1aed      	subs	r5, r5, r3
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	9307      	str	r3, [sp, #28]
 8007a94:	9b08      	ldr	r3, [sp, #32]
 8007a96:	b1fb      	cbz	r3, 8007ad8 <_dtoa_r+0x788>
 8007a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f000 8104 	beq.w	8007ca8 <_dtoa_r+0x958>
 8007aa0:	2e00      	cmp	r6, #0
 8007aa2:	dd11      	ble.n	8007ac8 <_dtoa_r+0x778>
 8007aa4:	4639      	mov	r1, r7
 8007aa6:	4632      	mov	r2, r6
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f000 fe77 	bl	800879c <__pow5mult>
 8007aae:	4652      	mov	r2, sl
 8007ab0:	4601      	mov	r1, r0
 8007ab2:	4607      	mov	r7, r0
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	f000 fde4 	bl	8008682 <__multiply>
 8007aba:	4651      	mov	r1, sl
 8007abc:	900a      	str	r0, [sp, #40]	; 0x28
 8007abe:	4620      	mov	r0, r4
 8007ac0:	f000 fcf8 	bl	80084b4 <_Bfree>
 8007ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ac6:	469a      	mov	sl, r3
 8007ac8:	9b08      	ldr	r3, [sp, #32]
 8007aca:	1b9a      	subs	r2, r3, r6
 8007acc:	d004      	beq.n	8007ad8 <_dtoa_r+0x788>
 8007ace:	4651      	mov	r1, sl
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	f000 fe63 	bl	800879c <__pow5mult>
 8007ad6:	4682      	mov	sl, r0
 8007ad8:	2101      	movs	r1, #1
 8007ada:	4620      	mov	r0, r4
 8007adc:	f000 fdc8 	bl	8008670 <__i2b>
 8007ae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ae2:	4606      	mov	r6, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f340 80e1 	ble.w	8007cac <_dtoa_r+0x95c>
 8007aea:	461a      	mov	r2, r3
 8007aec:	4601      	mov	r1, r0
 8007aee:	4620      	mov	r0, r4
 8007af0:	f000 fe54 	bl	800879c <__pow5mult>
 8007af4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007af6:	4606      	mov	r6, r0
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	f340 80da 	ble.w	8007cb2 <_dtoa_r+0x962>
 8007afe:	2300      	movs	r3, #0
 8007b00:	9308      	str	r3, [sp, #32]
 8007b02:	6933      	ldr	r3, [r6, #16]
 8007b04:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007b08:	6918      	ldr	r0, [r3, #16]
 8007b0a:	f000 fd63 	bl	80085d4 <__hi0bits>
 8007b0e:	f1c0 0020 	rsb	r0, r0, #32
 8007b12:	9b07      	ldr	r3, [sp, #28]
 8007b14:	4418      	add	r0, r3
 8007b16:	f010 001f 	ands.w	r0, r0, #31
 8007b1a:	f000 80f0 	beq.w	8007cfe <_dtoa_r+0x9ae>
 8007b1e:	f1c0 0320 	rsb	r3, r0, #32
 8007b22:	2b04      	cmp	r3, #4
 8007b24:	f340 80e2 	ble.w	8007cec <_dtoa_r+0x99c>
 8007b28:	9b07      	ldr	r3, [sp, #28]
 8007b2a:	f1c0 001c 	rsb	r0, r0, #28
 8007b2e:	4480      	add	r8, r0
 8007b30:	4405      	add	r5, r0
 8007b32:	4403      	add	r3, r0
 8007b34:	9307      	str	r3, [sp, #28]
 8007b36:	f1b8 0f00 	cmp.w	r8, #0
 8007b3a:	dd05      	ble.n	8007b48 <_dtoa_r+0x7f8>
 8007b3c:	4651      	mov	r1, sl
 8007b3e:	4642      	mov	r2, r8
 8007b40:	4620      	mov	r0, r4
 8007b42:	f000 fe79 	bl	8008838 <__lshift>
 8007b46:	4682      	mov	sl, r0
 8007b48:	9b07      	ldr	r3, [sp, #28]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	dd05      	ble.n	8007b5a <_dtoa_r+0x80a>
 8007b4e:	4631      	mov	r1, r6
 8007b50:	461a      	mov	r2, r3
 8007b52:	4620      	mov	r0, r4
 8007b54:	f000 fe70 	bl	8008838 <__lshift>
 8007b58:	4606      	mov	r6, r0
 8007b5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 80d3 	beq.w	8007d08 <_dtoa_r+0x9b8>
 8007b62:	4631      	mov	r1, r6
 8007b64:	4650      	mov	r0, sl
 8007b66:	f000 feb8 	bl	80088da <__mcmp>
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	f280 80cc 	bge.w	8007d08 <_dtoa_r+0x9b8>
 8007b70:	2300      	movs	r3, #0
 8007b72:	4651      	mov	r1, sl
 8007b74:	220a      	movs	r2, #10
 8007b76:	4620      	mov	r0, r4
 8007b78:	f000 fcb3 	bl	80084e2 <__multadd>
 8007b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b7e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007b82:	4682      	mov	sl, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f000 81a9 	beq.w	8007edc <_dtoa_r+0xb8c>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	4639      	mov	r1, r7
 8007b8e:	220a      	movs	r2, #10
 8007b90:	4620      	mov	r0, r4
 8007b92:	f000 fca6 	bl	80084e2 <__multadd>
 8007b96:	9b04      	ldr	r3, [sp, #16]
 8007b98:	4607      	mov	r7, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	dc03      	bgt.n	8007ba6 <_dtoa_r+0x856>
 8007b9e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	f300 80b9 	bgt.w	8007d18 <_dtoa_r+0x9c8>
 8007ba6:	2d00      	cmp	r5, #0
 8007ba8:	dd05      	ble.n	8007bb6 <_dtoa_r+0x866>
 8007baa:	4639      	mov	r1, r7
 8007bac:	462a      	mov	r2, r5
 8007bae:	4620      	mov	r0, r4
 8007bb0:	f000 fe42 	bl	8008838 <__lshift>
 8007bb4:	4607      	mov	r7, r0
 8007bb6:	9b08      	ldr	r3, [sp, #32]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f000 8110 	beq.w	8007dde <_dtoa_r+0xa8e>
 8007bbe:	6879      	ldr	r1, [r7, #4]
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f000 fc43 	bl	800844c <_Balloc>
 8007bc6:	4605      	mov	r5, r0
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	f107 010c 	add.w	r1, r7, #12
 8007bce:	3202      	adds	r2, #2
 8007bd0:	0092      	lsls	r2, r2, #2
 8007bd2:	300c      	adds	r0, #12
 8007bd4:	f7fd fd8e 	bl	80056f4 <memcpy>
 8007bd8:	2201      	movs	r2, #1
 8007bda:	4629      	mov	r1, r5
 8007bdc:	4620      	mov	r0, r4
 8007bde:	f000 fe2b 	bl	8008838 <__lshift>
 8007be2:	9707      	str	r7, [sp, #28]
 8007be4:	4607      	mov	r7, r0
 8007be6:	9b02      	ldr	r3, [sp, #8]
 8007be8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007bec:	f003 0301 	and.w	r3, r3, #1
 8007bf0:	9308      	str	r3, [sp, #32]
 8007bf2:	4631      	mov	r1, r6
 8007bf4:	4650      	mov	r0, sl
 8007bf6:	f7ff fb1f 	bl	8007238 <quorem>
 8007bfa:	9907      	ldr	r1, [sp, #28]
 8007bfc:	4605      	mov	r5, r0
 8007bfe:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007c02:	4650      	mov	r0, sl
 8007c04:	f000 fe69 	bl	80088da <__mcmp>
 8007c08:	463a      	mov	r2, r7
 8007c0a:	9002      	str	r0, [sp, #8]
 8007c0c:	4631      	mov	r1, r6
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f000 fe7d 	bl	800890e <__mdiff>
 8007c14:	68c3      	ldr	r3, [r0, #12]
 8007c16:	4602      	mov	r2, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f040 80e2 	bne.w	8007de2 <_dtoa_r+0xa92>
 8007c1e:	4601      	mov	r1, r0
 8007c20:	9009      	str	r0, [sp, #36]	; 0x24
 8007c22:	4650      	mov	r0, sl
 8007c24:	f000 fe59 	bl	80088da <__mcmp>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	4620      	mov	r0, r4
 8007c30:	9309      	str	r3, [sp, #36]	; 0x24
 8007c32:	f000 fc3f 	bl	80084b4 <_Bfree>
 8007c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f040 80d4 	bne.w	8007de6 <_dtoa_r+0xa96>
 8007c3e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007c40:	2a00      	cmp	r2, #0
 8007c42:	f040 80d0 	bne.w	8007de6 <_dtoa_r+0xa96>
 8007c46:	9a08      	ldr	r2, [sp, #32]
 8007c48:	2a00      	cmp	r2, #0
 8007c4a:	f040 80cc 	bne.w	8007de6 <_dtoa_r+0xa96>
 8007c4e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c52:	f000 80e8 	beq.w	8007e26 <_dtoa_r+0xad6>
 8007c56:	9b02      	ldr	r3, [sp, #8]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	dd01      	ble.n	8007c60 <_dtoa_r+0x910>
 8007c5c:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8007c60:	f108 0501 	add.w	r5, r8, #1
 8007c64:	f888 9000 	strb.w	r9, [r8]
 8007c68:	e06b      	b.n	8007d42 <_dtoa_r+0x9f2>
 8007c6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c6c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007c70:	e6f7      	b.n	8007a62 <_dtoa_r+0x712>
 8007c72:	9b08      	ldr	r3, [sp, #32]
 8007c74:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 8007c78:	42b3      	cmp	r3, r6
 8007c7a:	bfb7      	itett	lt
 8007c7c:	9b08      	ldrlt	r3, [sp, #32]
 8007c7e:	1b9e      	subge	r6, r3, r6
 8007c80:	1af2      	sublt	r2, r6, r3
 8007c82:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8007c84:	bfbf      	itttt	lt
 8007c86:	9608      	strlt	r6, [sp, #32]
 8007c88:	189b      	addlt	r3, r3, r2
 8007c8a:	930c      	strlt	r3, [sp, #48]	; 0x30
 8007c8c:	2600      	movlt	r6, #0
 8007c8e:	f1b9 0f00 	cmp.w	r9, #0
 8007c92:	bfb9      	ittee	lt
 8007c94:	eba8 0509 	sublt.w	r5, r8, r9
 8007c98:	2300      	movlt	r3, #0
 8007c9a:	4645      	movge	r5, r8
 8007c9c:	464b      	movge	r3, r9
 8007c9e:	e6e2      	b.n	8007a66 <_dtoa_r+0x716>
 8007ca0:	9e08      	ldr	r6, [sp, #32]
 8007ca2:	4645      	mov	r5, r8
 8007ca4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007ca6:	e6e7      	b.n	8007a78 <_dtoa_r+0x728>
 8007ca8:	9a08      	ldr	r2, [sp, #32]
 8007caa:	e710      	b.n	8007ace <_dtoa_r+0x77e>
 8007cac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	dc18      	bgt.n	8007ce4 <_dtoa_r+0x994>
 8007cb2:	9b02      	ldr	r3, [sp, #8]
 8007cb4:	b9b3      	cbnz	r3, 8007ce4 <_dtoa_r+0x994>
 8007cb6:	9b03      	ldr	r3, [sp, #12]
 8007cb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cbc:	b9a3      	cbnz	r3, 8007ce8 <_dtoa_r+0x998>
 8007cbe:	9b03      	ldr	r3, [sp, #12]
 8007cc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cc4:	0d1b      	lsrs	r3, r3, #20
 8007cc6:	051b      	lsls	r3, r3, #20
 8007cc8:	b12b      	cbz	r3, 8007cd6 <_dtoa_r+0x986>
 8007cca:	9b07      	ldr	r3, [sp, #28]
 8007ccc:	f108 0801 	add.w	r8, r8, #1
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	9307      	str	r3, [sp, #28]
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	9308      	str	r3, [sp, #32]
 8007cd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f47f af11 	bne.w	8007b02 <_dtoa_r+0x7b2>
 8007ce0:	2001      	movs	r0, #1
 8007ce2:	e716      	b.n	8007b12 <_dtoa_r+0x7c2>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	e7f6      	b.n	8007cd6 <_dtoa_r+0x986>
 8007ce8:	9b02      	ldr	r3, [sp, #8]
 8007cea:	e7f4      	b.n	8007cd6 <_dtoa_r+0x986>
 8007cec:	f43f af23 	beq.w	8007b36 <_dtoa_r+0x7e6>
 8007cf0:	9a07      	ldr	r2, [sp, #28]
 8007cf2:	331c      	adds	r3, #28
 8007cf4:	441a      	add	r2, r3
 8007cf6:	4498      	add	r8, r3
 8007cf8:	441d      	add	r5, r3
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	e71a      	b.n	8007b34 <_dtoa_r+0x7e4>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	e7f6      	b.n	8007cf0 <_dtoa_r+0x9a0>
 8007d02:	bf00      	nop
 8007d04:	40240000 	.word	0x40240000
 8007d08:	f1b9 0f00 	cmp.w	r9, #0
 8007d0c:	dc33      	bgt.n	8007d76 <_dtoa_r+0xa26>
 8007d0e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	dd30      	ble.n	8007d76 <_dtoa_r+0xa26>
 8007d14:	f8cd 9010 	str.w	r9, [sp, #16]
 8007d18:	9b04      	ldr	r3, [sp, #16]
 8007d1a:	b963      	cbnz	r3, 8007d36 <_dtoa_r+0x9e6>
 8007d1c:	4631      	mov	r1, r6
 8007d1e:	2205      	movs	r2, #5
 8007d20:	4620      	mov	r0, r4
 8007d22:	f000 fbde 	bl	80084e2 <__multadd>
 8007d26:	4601      	mov	r1, r0
 8007d28:	4606      	mov	r6, r0
 8007d2a:	4650      	mov	r0, sl
 8007d2c:	f000 fdd5 	bl	80088da <__mcmp>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	f73f ad5c 	bgt.w	80077ee <_dtoa_r+0x49e>
 8007d36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007d38:	9d06      	ldr	r5, [sp, #24]
 8007d3a:	ea6f 0b03 	mvn.w	fp, r3
 8007d3e:	2300      	movs	r3, #0
 8007d40:	9307      	str	r3, [sp, #28]
 8007d42:	4631      	mov	r1, r6
 8007d44:	4620      	mov	r0, r4
 8007d46:	f000 fbb5 	bl	80084b4 <_Bfree>
 8007d4a:	2f00      	cmp	r7, #0
 8007d4c:	f43f ae4b 	beq.w	80079e6 <_dtoa_r+0x696>
 8007d50:	9b07      	ldr	r3, [sp, #28]
 8007d52:	b12b      	cbz	r3, 8007d60 <_dtoa_r+0xa10>
 8007d54:	42bb      	cmp	r3, r7
 8007d56:	d003      	beq.n	8007d60 <_dtoa_r+0xa10>
 8007d58:	4619      	mov	r1, r3
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f000 fbaa 	bl	80084b4 <_Bfree>
 8007d60:	4639      	mov	r1, r7
 8007d62:	4620      	mov	r0, r4
 8007d64:	f000 fba6 	bl	80084b4 <_Bfree>
 8007d68:	e63d      	b.n	80079e6 <_dtoa_r+0x696>
 8007d6a:	2600      	movs	r6, #0
 8007d6c:	4637      	mov	r7, r6
 8007d6e:	e7e2      	b.n	8007d36 <_dtoa_r+0x9e6>
 8007d70:	46bb      	mov	fp, r7
 8007d72:	4637      	mov	r7, r6
 8007d74:	e53b      	b.n	80077ee <_dtoa_r+0x49e>
 8007d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d78:	f8cd 9010 	str.w	r9, [sp, #16]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f47f af12 	bne.w	8007ba6 <_dtoa_r+0x856>
 8007d82:	9d06      	ldr	r5, [sp, #24]
 8007d84:	4631      	mov	r1, r6
 8007d86:	4650      	mov	r0, sl
 8007d88:	f7ff fa56 	bl	8007238 <quorem>
 8007d8c:	9b06      	ldr	r3, [sp, #24]
 8007d8e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007d92:	f805 9b01 	strb.w	r9, [r5], #1
 8007d96:	9a04      	ldr	r2, [sp, #16]
 8007d98:	1aeb      	subs	r3, r5, r3
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	f300 8081 	bgt.w	8007ea2 <_dtoa_r+0xb52>
 8007da0:	9b06      	ldr	r3, [sp, #24]
 8007da2:	2a01      	cmp	r2, #1
 8007da4:	bfac      	ite	ge
 8007da6:	189b      	addge	r3, r3, r2
 8007da8:	3301      	addlt	r3, #1
 8007daa:	4698      	mov	r8, r3
 8007dac:	2300      	movs	r3, #0
 8007dae:	9307      	str	r3, [sp, #28]
 8007db0:	4651      	mov	r1, sl
 8007db2:	2201      	movs	r2, #1
 8007db4:	4620      	mov	r0, r4
 8007db6:	f000 fd3f 	bl	8008838 <__lshift>
 8007dba:	4631      	mov	r1, r6
 8007dbc:	4682      	mov	sl, r0
 8007dbe:	f000 fd8c 	bl	80088da <__mcmp>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	dc34      	bgt.n	8007e30 <_dtoa_r+0xae0>
 8007dc6:	d102      	bne.n	8007dce <_dtoa_r+0xa7e>
 8007dc8:	f019 0f01 	tst.w	r9, #1
 8007dcc:	d130      	bne.n	8007e30 <_dtoa_r+0xae0>
 8007dce:	4645      	mov	r5, r8
 8007dd0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007dd4:	1e6a      	subs	r2, r5, #1
 8007dd6:	2b30      	cmp	r3, #48	; 0x30
 8007dd8:	d1b3      	bne.n	8007d42 <_dtoa_r+0x9f2>
 8007dda:	4615      	mov	r5, r2
 8007ddc:	e7f8      	b.n	8007dd0 <_dtoa_r+0xa80>
 8007dde:	4638      	mov	r0, r7
 8007de0:	e6ff      	b.n	8007be2 <_dtoa_r+0x892>
 8007de2:	2301      	movs	r3, #1
 8007de4:	e722      	b.n	8007c2c <_dtoa_r+0x8dc>
 8007de6:	9a02      	ldr	r2, [sp, #8]
 8007de8:	2a00      	cmp	r2, #0
 8007dea:	db04      	blt.n	8007df6 <_dtoa_r+0xaa6>
 8007dec:	d128      	bne.n	8007e40 <_dtoa_r+0xaf0>
 8007dee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007df0:	bb32      	cbnz	r2, 8007e40 <_dtoa_r+0xaf0>
 8007df2:	9a08      	ldr	r2, [sp, #32]
 8007df4:	bb22      	cbnz	r2, 8007e40 <_dtoa_r+0xaf0>
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f77f af32 	ble.w	8007c60 <_dtoa_r+0x910>
 8007dfc:	4651      	mov	r1, sl
 8007dfe:	2201      	movs	r2, #1
 8007e00:	4620      	mov	r0, r4
 8007e02:	f000 fd19 	bl	8008838 <__lshift>
 8007e06:	4631      	mov	r1, r6
 8007e08:	4682      	mov	sl, r0
 8007e0a:	f000 fd66 	bl	80088da <__mcmp>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	dc05      	bgt.n	8007e1e <_dtoa_r+0xace>
 8007e12:	f47f af25 	bne.w	8007c60 <_dtoa_r+0x910>
 8007e16:	f019 0f01 	tst.w	r9, #1
 8007e1a:	f43f af21 	beq.w	8007c60 <_dtoa_r+0x910>
 8007e1e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007e22:	f47f af1b 	bne.w	8007c5c <_dtoa_r+0x90c>
 8007e26:	2339      	movs	r3, #57	; 0x39
 8007e28:	f108 0801 	add.w	r8, r8, #1
 8007e2c:	f808 3c01 	strb.w	r3, [r8, #-1]
 8007e30:	4645      	mov	r5, r8
 8007e32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e36:	1e6a      	subs	r2, r5, #1
 8007e38:	2b39      	cmp	r3, #57	; 0x39
 8007e3a:	d03a      	beq.n	8007eb2 <_dtoa_r+0xb62>
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	e03f      	b.n	8007ec0 <_dtoa_r+0xb70>
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f108 0501 	add.w	r5, r8, #1
 8007e46:	dd05      	ble.n	8007e54 <_dtoa_r+0xb04>
 8007e48:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007e4c:	d0eb      	beq.n	8007e26 <_dtoa_r+0xad6>
 8007e4e:	f109 0901 	add.w	r9, r9, #1
 8007e52:	e707      	b.n	8007c64 <_dtoa_r+0x914>
 8007e54:	9b06      	ldr	r3, [sp, #24]
 8007e56:	9a04      	ldr	r2, [sp, #16]
 8007e58:	1aeb      	subs	r3, r5, r3
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	46a8      	mov	r8, r5
 8007e5e:	f805 9c01 	strb.w	r9, [r5, #-1]
 8007e62:	d0a5      	beq.n	8007db0 <_dtoa_r+0xa60>
 8007e64:	4651      	mov	r1, sl
 8007e66:	2300      	movs	r3, #0
 8007e68:	220a      	movs	r2, #10
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f000 fb39 	bl	80084e2 <__multadd>
 8007e70:	9b07      	ldr	r3, [sp, #28]
 8007e72:	4682      	mov	sl, r0
 8007e74:	42bb      	cmp	r3, r7
 8007e76:	f04f 020a 	mov.w	r2, #10
 8007e7a:	f04f 0300 	mov.w	r3, #0
 8007e7e:	9907      	ldr	r1, [sp, #28]
 8007e80:	4620      	mov	r0, r4
 8007e82:	d104      	bne.n	8007e8e <_dtoa_r+0xb3e>
 8007e84:	f000 fb2d 	bl	80084e2 <__multadd>
 8007e88:	9007      	str	r0, [sp, #28]
 8007e8a:	4607      	mov	r7, r0
 8007e8c:	e6b1      	b.n	8007bf2 <_dtoa_r+0x8a2>
 8007e8e:	f000 fb28 	bl	80084e2 <__multadd>
 8007e92:	2300      	movs	r3, #0
 8007e94:	9007      	str	r0, [sp, #28]
 8007e96:	220a      	movs	r2, #10
 8007e98:	4639      	mov	r1, r7
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f000 fb21 	bl	80084e2 <__multadd>
 8007ea0:	e7f3      	b.n	8007e8a <_dtoa_r+0xb3a>
 8007ea2:	4651      	mov	r1, sl
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	220a      	movs	r2, #10
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f000 fb1a 	bl	80084e2 <__multadd>
 8007eae:	4682      	mov	sl, r0
 8007eb0:	e768      	b.n	8007d84 <_dtoa_r+0xa34>
 8007eb2:	9b06      	ldr	r3, [sp, #24]
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d105      	bne.n	8007ec4 <_dtoa_r+0xb74>
 8007eb8:	2331      	movs	r3, #49	; 0x31
 8007eba:	9a06      	ldr	r2, [sp, #24]
 8007ebc:	f10b 0b01 	add.w	fp, fp, #1
 8007ec0:	7013      	strb	r3, [r2, #0]
 8007ec2:	e73e      	b.n	8007d42 <_dtoa_r+0x9f2>
 8007ec4:	4615      	mov	r5, r2
 8007ec6:	e7b4      	b.n	8007e32 <_dtoa_r+0xae2>
 8007ec8:	4b09      	ldr	r3, [pc, #36]	; (8007ef0 <_dtoa_r+0xba0>)
 8007eca:	f7ff baa3 	b.w	8007414 <_dtoa_r+0xc4>
 8007ece:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f47f aa7d 	bne.w	80073d0 <_dtoa_r+0x80>
 8007ed6:	4b07      	ldr	r3, [pc, #28]	; (8007ef4 <_dtoa_r+0xba4>)
 8007ed8:	f7ff ba9c 	b.w	8007414 <_dtoa_r+0xc4>
 8007edc:	9b04      	ldr	r3, [sp, #16]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f73f af4f 	bgt.w	8007d82 <_dtoa_r+0xa32>
 8007ee4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	f77f af4b 	ble.w	8007d82 <_dtoa_r+0xa32>
 8007eec:	e714      	b.n	8007d18 <_dtoa_r+0x9c8>
 8007eee:	bf00      	nop
 8007ef0:	0800b08a 	.word	0x0800b08a
 8007ef4:	0800b0d4 	.word	0x0800b0d4

08007ef8 <iswspace>:
 8007ef8:	28ff      	cmp	r0, #255	; 0xff
 8007efa:	b510      	push	{r4, lr}
 8007efc:	4604      	mov	r4, r0
 8007efe:	d806      	bhi.n	8007f0e <iswspace+0x16>
 8007f00:	f000 f81a 	bl	8007f38 <__locale_ctype_ptr>
 8007f04:	4420      	add	r0, r4
 8007f06:	7840      	ldrb	r0, [r0, #1]
 8007f08:	f000 0008 	and.w	r0, r0, #8
 8007f0c:	bd10      	pop	{r4, pc}
 8007f0e:	2000      	movs	r0, #0
 8007f10:	bd10      	pop	{r4, pc}
	...

08007f14 <__locale_mb_cur_max>:
 8007f14:	4b04      	ldr	r3, [pc, #16]	; (8007f28 <__locale_mb_cur_max+0x14>)
 8007f16:	4a05      	ldr	r2, [pc, #20]	; (8007f2c <__locale_mb_cur_max+0x18>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6a1b      	ldr	r3, [r3, #32]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	bf08      	it	eq
 8007f20:	4613      	moveq	r3, r2
 8007f22:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8007f26:	4770      	bx	lr
 8007f28:	200000b4 	.word	0x200000b4
 8007f2c:	200001a8 	.word	0x200001a8

08007f30 <__locale_ctype_ptr_l>:
 8007f30:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007f34:	4770      	bx	lr
	...

08007f38 <__locale_ctype_ptr>:
 8007f38:	4b04      	ldr	r3, [pc, #16]	; (8007f4c <__locale_ctype_ptr+0x14>)
 8007f3a:	4a05      	ldr	r2, [pc, #20]	; (8007f50 <__locale_ctype_ptr+0x18>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	6a1b      	ldr	r3, [r3, #32]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	bf08      	it	eq
 8007f44:	4613      	moveq	r3, r2
 8007f46:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8007f4a:	4770      	bx	lr
 8007f4c:	200000b4 	.word	0x200000b4
 8007f50:	200001a8 	.word	0x200001a8

08007f54 <__localeconv_l>:
 8007f54:	30f0      	adds	r0, #240	; 0xf0
 8007f56:	4770      	bx	lr

08007f58 <_localeconv_r>:
 8007f58:	4b04      	ldr	r3, [pc, #16]	; (8007f6c <_localeconv_r+0x14>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6a18      	ldr	r0, [r3, #32]
 8007f5e:	4b04      	ldr	r3, [pc, #16]	; (8007f70 <_localeconv_r+0x18>)
 8007f60:	2800      	cmp	r0, #0
 8007f62:	bf08      	it	eq
 8007f64:	4618      	moveq	r0, r3
 8007f66:	30f0      	adds	r0, #240	; 0xf0
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	200000b4 	.word	0x200000b4
 8007f70:	200001a8 	.word	0x200001a8

08007f74 <malloc>:
 8007f74:	4b02      	ldr	r3, [pc, #8]	; (8007f80 <malloc+0xc>)
 8007f76:	4601      	mov	r1, r0
 8007f78:	6818      	ldr	r0, [r3, #0]
 8007f7a:	f000 b803 	b.w	8007f84 <_malloc_r>
 8007f7e:	bf00      	nop
 8007f80:	200000b4 	.word	0x200000b4

08007f84 <_malloc_r>:
 8007f84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f88:	f101 040b 	add.w	r4, r1, #11
 8007f8c:	2c16      	cmp	r4, #22
 8007f8e:	4681      	mov	r9, r0
 8007f90:	d907      	bls.n	8007fa2 <_malloc_r+0x1e>
 8007f92:	f034 0407 	bics.w	r4, r4, #7
 8007f96:	d505      	bpl.n	8007fa4 <_malloc_r+0x20>
 8007f98:	230c      	movs	r3, #12
 8007f9a:	f8c9 3000 	str.w	r3, [r9]
 8007f9e:	2600      	movs	r6, #0
 8007fa0:	e131      	b.n	8008206 <_malloc_r+0x282>
 8007fa2:	2410      	movs	r4, #16
 8007fa4:	428c      	cmp	r4, r1
 8007fa6:	d3f7      	bcc.n	8007f98 <_malloc_r+0x14>
 8007fa8:	4648      	mov	r0, r9
 8007faa:	f000 fa43 	bl	8008434 <__malloc_lock>
 8007fae:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8007fb2:	4d9b      	ldr	r5, [pc, #620]	; (8008220 <_malloc_r+0x29c>)
 8007fb4:	d236      	bcs.n	8008024 <_malloc_r+0xa0>
 8007fb6:	f104 0208 	add.w	r2, r4, #8
 8007fba:	442a      	add	r2, r5
 8007fbc:	6856      	ldr	r6, [r2, #4]
 8007fbe:	f1a2 0108 	sub.w	r1, r2, #8
 8007fc2:	428e      	cmp	r6, r1
 8007fc4:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8007fc8:	d102      	bne.n	8007fd0 <_malloc_r+0x4c>
 8007fca:	68d6      	ldr	r6, [r2, #12]
 8007fcc:	42b2      	cmp	r2, r6
 8007fce:	d010      	beq.n	8007ff2 <_malloc_r+0x6e>
 8007fd0:	6873      	ldr	r3, [r6, #4]
 8007fd2:	68f2      	ldr	r2, [r6, #12]
 8007fd4:	68b1      	ldr	r1, [r6, #8]
 8007fd6:	f023 0303 	bic.w	r3, r3, #3
 8007fda:	60ca      	str	r2, [r1, #12]
 8007fdc:	4433      	add	r3, r6
 8007fde:	6091      	str	r1, [r2, #8]
 8007fe0:	685a      	ldr	r2, [r3, #4]
 8007fe2:	f042 0201 	orr.w	r2, r2, #1
 8007fe6:	605a      	str	r2, [r3, #4]
 8007fe8:	4648      	mov	r0, r9
 8007fea:	f000 fa29 	bl	8008440 <__malloc_unlock>
 8007fee:	3608      	adds	r6, #8
 8007ff0:	e109      	b.n	8008206 <_malloc_r+0x282>
 8007ff2:	3302      	adds	r3, #2
 8007ff4:	4a8b      	ldr	r2, [pc, #556]	; (8008224 <_malloc_r+0x2a0>)
 8007ff6:	692e      	ldr	r6, [r5, #16]
 8007ff8:	4611      	mov	r1, r2
 8007ffa:	4296      	cmp	r6, r2
 8007ffc:	d06d      	beq.n	80080da <_malloc_r+0x156>
 8007ffe:	6870      	ldr	r0, [r6, #4]
 8008000:	f020 0003 	bic.w	r0, r0, #3
 8008004:	1b07      	subs	r7, r0, r4
 8008006:	2f0f      	cmp	r7, #15
 8008008:	dd47      	ble.n	800809a <_malloc_r+0x116>
 800800a:	1933      	adds	r3, r6, r4
 800800c:	f044 0401 	orr.w	r4, r4, #1
 8008010:	6074      	str	r4, [r6, #4]
 8008012:	616b      	str	r3, [r5, #20]
 8008014:	612b      	str	r3, [r5, #16]
 8008016:	60da      	str	r2, [r3, #12]
 8008018:	609a      	str	r2, [r3, #8]
 800801a:	f047 0201 	orr.w	r2, r7, #1
 800801e:	605a      	str	r2, [r3, #4]
 8008020:	5037      	str	r7, [r6, r0]
 8008022:	e7e1      	b.n	8007fe8 <_malloc_r+0x64>
 8008024:	0a63      	lsrs	r3, r4, #9
 8008026:	d02a      	beq.n	800807e <_malloc_r+0xfa>
 8008028:	2b04      	cmp	r3, #4
 800802a:	d812      	bhi.n	8008052 <_malloc_r+0xce>
 800802c:	09a3      	lsrs	r3, r4, #6
 800802e:	3338      	adds	r3, #56	; 0x38
 8008030:	1c5a      	adds	r2, r3, #1
 8008032:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8008036:	6856      	ldr	r6, [r2, #4]
 8008038:	f1a2 0008 	sub.w	r0, r2, #8
 800803c:	4286      	cmp	r6, r0
 800803e:	d006      	beq.n	800804e <_malloc_r+0xca>
 8008040:	6872      	ldr	r2, [r6, #4]
 8008042:	f022 0203 	bic.w	r2, r2, #3
 8008046:	1b11      	subs	r1, r2, r4
 8008048:	290f      	cmp	r1, #15
 800804a:	dd1c      	ble.n	8008086 <_malloc_r+0x102>
 800804c:	3b01      	subs	r3, #1
 800804e:	3301      	adds	r3, #1
 8008050:	e7d0      	b.n	8007ff4 <_malloc_r+0x70>
 8008052:	2b14      	cmp	r3, #20
 8008054:	d801      	bhi.n	800805a <_malloc_r+0xd6>
 8008056:	335b      	adds	r3, #91	; 0x5b
 8008058:	e7ea      	b.n	8008030 <_malloc_r+0xac>
 800805a:	2b54      	cmp	r3, #84	; 0x54
 800805c:	d802      	bhi.n	8008064 <_malloc_r+0xe0>
 800805e:	0b23      	lsrs	r3, r4, #12
 8008060:	336e      	adds	r3, #110	; 0x6e
 8008062:	e7e5      	b.n	8008030 <_malloc_r+0xac>
 8008064:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008068:	d802      	bhi.n	8008070 <_malloc_r+0xec>
 800806a:	0be3      	lsrs	r3, r4, #15
 800806c:	3377      	adds	r3, #119	; 0x77
 800806e:	e7df      	b.n	8008030 <_malloc_r+0xac>
 8008070:	f240 5254 	movw	r2, #1364	; 0x554
 8008074:	4293      	cmp	r3, r2
 8008076:	d804      	bhi.n	8008082 <_malloc_r+0xfe>
 8008078:	0ca3      	lsrs	r3, r4, #18
 800807a:	337c      	adds	r3, #124	; 0x7c
 800807c:	e7d8      	b.n	8008030 <_malloc_r+0xac>
 800807e:	233f      	movs	r3, #63	; 0x3f
 8008080:	e7d6      	b.n	8008030 <_malloc_r+0xac>
 8008082:	237e      	movs	r3, #126	; 0x7e
 8008084:	e7d4      	b.n	8008030 <_malloc_r+0xac>
 8008086:	2900      	cmp	r1, #0
 8008088:	68f1      	ldr	r1, [r6, #12]
 800808a:	db04      	blt.n	8008096 <_malloc_r+0x112>
 800808c:	68b3      	ldr	r3, [r6, #8]
 800808e:	60d9      	str	r1, [r3, #12]
 8008090:	608b      	str	r3, [r1, #8]
 8008092:	18b3      	adds	r3, r6, r2
 8008094:	e7a4      	b.n	8007fe0 <_malloc_r+0x5c>
 8008096:	460e      	mov	r6, r1
 8008098:	e7d0      	b.n	800803c <_malloc_r+0xb8>
 800809a:	2f00      	cmp	r7, #0
 800809c:	616a      	str	r2, [r5, #20]
 800809e:	612a      	str	r2, [r5, #16]
 80080a0:	db05      	blt.n	80080ae <_malloc_r+0x12a>
 80080a2:	4430      	add	r0, r6
 80080a4:	6843      	ldr	r3, [r0, #4]
 80080a6:	f043 0301 	orr.w	r3, r3, #1
 80080aa:	6043      	str	r3, [r0, #4]
 80080ac:	e79c      	b.n	8007fe8 <_malloc_r+0x64>
 80080ae:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80080b2:	d244      	bcs.n	800813e <_malloc_r+0x1ba>
 80080b4:	2201      	movs	r2, #1
 80080b6:	08c0      	lsrs	r0, r0, #3
 80080b8:	1087      	asrs	r7, r0, #2
 80080ba:	fa02 f707 	lsl.w	r7, r2, r7
 80080be:	686a      	ldr	r2, [r5, #4]
 80080c0:	3001      	adds	r0, #1
 80080c2:	433a      	orrs	r2, r7
 80080c4:	606a      	str	r2, [r5, #4]
 80080c6:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 80080ca:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80080ce:	3a08      	subs	r2, #8
 80080d0:	60f2      	str	r2, [r6, #12]
 80080d2:	60b7      	str	r7, [r6, #8]
 80080d4:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 80080d8:	60fe      	str	r6, [r7, #12]
 80080da:	2001      	movs	r0, #1
 80080dc:	109a      	asrs	r2, r3, #2
 80080de:	fa00 f202 	lsl.w	r2, r0, r2
 80080e2:	6868      	ldr	r0, [r5, #4]
 80080e4:	4282      	cmp	r2, r0
 80080e6:	f200 809f 	bhi.w	8008228 <_malloc_r+0x2a4>
 80080ea:	4202      	tst	r2, r0
 80080ec:	d106      	bne.n	80080fc <_malloc_r+0x178>
 80080ee:	f023 0303 	bic.w	r3, r3, #3
 80080f2:	0052      	lsls	r2, r2, #1
 80080f4:	4202      	tst	r2, r0
 80080f6:	f103 0304 	add.w	r3, r3, #4
 80080fa:	d0fa      	beq.n	80080f2 <_malloc_r+0x16e>
 80080fc:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8008100:	46e0      	mov	r8, ip
 8008102:	469e      	mov	lr, r3
 8008104:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8008108:	4546      	cmp	r6, r8
 800810a:	d153      	bne.n	80081b4 <_malloc_r+0x230>
 800810c:	f10e 0e01 	add.w	lr, lr, #1
 8008110:	f01e 0f03 	tst.w	lr, #3
 8008114:	f108 0808 	add.w	r8, r8, #8
 8008118:	d1f4      	bne.n	8008104 <_malloc_r+0x180>
 800811a:	0798      	lsls	r0, r3, #30
 800811c:	d179      	bne.n	8008212 <_malloc_r+0x28e>
 800811e:	686b      	ldr	r3, [r5, #4]
 8008120:	ea23 0302 	bic.w	r3, r3, r2
 8008124:	606b      	str	r3, [r5, #4]
 8008126:	6868      	ldr	r0, [r5, #4]
 8008128:	0052      	lsls	r2, r2, #1
 800812a:	4282      	cmp	r2, r0
 800812c:	d87c      	bhi.n	8008228 <_malloc_r+0x2a4>
 800812e:	2a00      	cmp	r2, #0
 8008130:	d07a      	beq.n	8008228 <_malloc_r+0x2a4>
 8008132:	4673      	mov	r3, lr
 8008134:	4202      	tst	r2, r0
 8008136:	d1e1      	bne.n	80080fc <_malloc_r+0x178>
 8008138:	3304      	adds	r3, #4
 800813a:	0052      	lsls	r2, r2, #1
 800813c:	e7fa      	b.n	8008134 <_malloc_r+0x1b0>
 800813e:	0a42      	lsrs	r2, r0, #9
 8008140:	2a04      	cmp	r2, #4
 8008142:	d815      	bhi.n	8008170 <_malloc_r+0x1ec>
 8008144:	0982      	lsrs	r2, r0, #6
 8008146:	3238      	adds	r2, #56	; 0x38
 8008148:	1c57      	adds	r7, r2, #1
 800814a:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800814e:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8008152:	45be      	cmp	lr, r7
 8008154:	d126      	bne.n	80081a4 <_malloc_r+0x220>
 8008156:	2001      	movs	r0, #1
 8008158:	1092      	asrs	r2, r2, #2
 800815a:	fa00 f202 	lsl.w	r2, r0, r2
 800815e:	6868      	ldr	r0, [r5, #4]
 8008160:	4310      	orrs	r0, r2
 8008162:	6068      	str	r0, [r5, #4]
 8008164:	f8c6 e00c 	str.w	lr, [r6, #12]
 8008168:	60b7      	str	r7, [r6, #8]
 800816a:	f8ce 6008 	str.w	r6, [lr, #8]
 800816e:	e7b3      	b.n	80080d8 <_malloc_r+0x154>
 8008170:	2a14      	cmp	r2, #20
 8008172:	d801      	bhi.n	8008178 <_malloc_r+0x1f4>
 8008174:	325b      	adds	r2, #91	; 0x5b
 8008176:	e7e7      	b.n	8008148 <_malloc_r+0x1c4>
 8008178:	2a54      	cmp	r2, #84	; 0x54
 800817a:	d802      	bhi.n	8008182 <_malloc_r+0x1fe>
 800817c:	0b02      	lsrs	r2, r0, #12
 800817e:	326e      	adds	r2, #110	; 0x6e
 8008180:	e7e2      	b.n	8008148 <_malloc_r+0x1c4>
 8008182:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008186:	d802      	bhi.n	800818e <_malloc_r+0x20a>
 8008188:	0bc2      	lsrs	r2, r0, #15
 800818a:	3277      	adds	r2, #119	; 0x77
 800818c:	e7dc      	b.n	8008148 <_malloc_r+0x1c4>
 800818e:	f240 5754 	movw	r7, #1364	; 0x554
 8008192:	42ba      	cmp	r2, r7
 8008194:	bf9a      	itte	ls
 8008196:	0c82      	lsrls	r2, r0, #18
 8008198:	327c      	addls	r2, #124	; 0x7c
 800819a:	227e      	movhi	r2, #126	; 0x7e
 800819c:	e7d4      	b.n	8008148 <_malloc_r+0x1c4>
 800819e:	68bf      	ldr	r7, [r7, #8]
 80081a0:	45be      	cmp	lr, r7
 80081a2:	d004      	beq.n	80081ae <_malloc_r+0x22a>
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	f022 0203 	bic.w	r2, r2, #3
 80081aa:	4290      	cmp	r0, r2
 80081ac:	d3f7      	bcc.n	800819e <_malloc_r+0x21a>
 80081ae:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 80081b2:	e7d7      	b.n	8008164 <_malloc_r+0x1e0>
 80081b4:	6870      	ldr	r0, [r6, #4]
 80081b6:	68f7      	ldr	r7, [r6, #12]
 80081b8:	f020 0003 	bic.w	r0, r0, #3
 80081bc:	eba0 0a04 	sub.w	sl, r0, r4
 80081c0:	f1ba 0f0f 	cmp.w	sl, #15
 80081c4:	dd10      	ble.n	80081e8 <_malloc_r+0x264>
 80081c6:	68b2      	ldr	r2, [r6, #8]
 80081c8:	1933      	adds	r3, r6, r4
 80081ca:	f044 0401 	orr.w	r4, r4, #1
 80081ce:	6074      	str	r4, [r6, #4]
 80081d0:	60d7      	str	r7, [r2, #12]
 80081d2:	60ba      	str	r2, [r7, #8]
 80081d4:	f04a 0201 	orr.w	r2, sl, #1
 80081d8:	616b      	str	r3, [r5, #20]
 80081da:	612b      	str	r3, [r5, #16]
 80081dc:	60d9      	str	r1, [r3, #12]
 80081de:	6099      	str	r1, [r3, #8]
 80081e0:	605a      	str	r2, [r3, #4]
 80081e2:	f846 a000 	str.w	sl, [r6, r0]
 80081e6:	e6ff      	b.n	8007fe8 <_malloc_r+0x64>
 80081e8:	f1ba 0f00 	cmp.w	sl, #0
 80081ec:	db0f      	blt.n	800820e <_malloc_r+0x28a>
 80081ee:	4430      	add	r0, r6
 80081f0:	6843      	ldr	r3, [r0, #4]
 80081f2:	f043 0301 	orr.w	r3, r3, #1
 80081f6:	6043      	str	r3, [r0, #4]
 80081f8:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80081fc:	4648      	mov	r0, r9
 80081fe:	60df      	str	r7, [r3, #12]
 8008200:	60bb      	str	r3, [r7, #8]
 8008202:	f000 f91d 	bl	8008440 <__malloc_unlock>
 8008206:	4630      	mov	r0, r6
 8008208:	b003      	add	sp, #12
 800820a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820e:	463e      	mov	r6, r7
 8008210:	e77a      	b.n	8008108 <_malloc_r+0x184>
 8008212:	f85c 0908 	ldr.w	r0, [ip], #-8
 8008216:	3b01      	subs	r3, #1
 8008218:	4584      	cmp	ip, r0
 800821a:	f43f af7e 	beq.w	800811a <_malloc_r+0x196>
 800821e:	e782      	b.n	8008126 <_malloc_r+0x1a2>
 8008220:	20000314 	.word	0x20000314
 8008224:	2000031c 	.word	0x2000031c
 8008228:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800822c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8008230:	f026 0603 	bic.w	r6, r6, #3
 8008234:	42b4      	cmp	r4, r6
 8008236:	d803      	bhi.n	8008240 <_malloc_r+0x2bc>
 8008238:	1b33      	subs	r3, r6, r4
 800823a:	2b0f      	cmp	r3, #15
 800823c:	f300 8095 	bgt.w	800836a <_malloc_r+0x3e6>
 8008240:	4a4f      	ldr	r2, [pc, #316]	; (8008380 <_malloc_r+0x3fc>)
 8008242:	eb0b 0306 	add.w	r3, fp, r6
 8008246:	6817      	ldr	r7, [r2, #0]
 8008248:	4a4e      	ldr	r2, [pc, #312]	; (8008384 <_malloc_r+0x400>)
 800824a:	3710      	adds	r7, #16
 800824c:	6811      	ldr	r1, [r2, #0]
 800824e:	4427      	add	r7, r4
 8008250:	3101      	adds	r1, #1
 8008252:	d005      	beq.n	8008260 <_malloc_r+0x2dc>
 8008254:	494c      	ldr	r1, [pc, #304]	; (8008388 <_malloc_r+0x404>)
 8008256:	3901      	subs	r1, #1
 8008258:	440f      	add	r7, r1
 800825a:	3101      	adds	r1, #1
 800825c:	4249      	negs	r1, r1
 800825e:	400f      	ands	r7, r1
 8008260:	4639      	mov	r1, r7
 8008262:	4648      	mov	r0, r9
 8008264:	9201      	str	r2, [sp, #4]
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	f000 fcd8 	bl	8008c1c <_sbrk_r>
 800826c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008270:	4680      	mov	r8, r0
 8008272:	d055      	beq.n	8008320 <_malloc_r+0x39c>
 8008274:	9b00      	ldr	r3, [sp, #0]
 8008276:	9a01      	ldr	r2, [sp, #4]
 8008278:	4283      	cmp	r3, r0
 800827a:	d901      	bls.n	8008280 <_malloc_r+0x2fc>
 800827c:	45ab      	cmp	fp, r5
 800827e:	d14f      	bne.n	8008320 <_malloc_r+0x39c>
 8008280:	4842      	ldr	r0, [pc, #264]	; (800838c <_malloc_r+0x408>)
 8008282:	4543      	cmp	r3, r8
 8008284:	6801      	ldr	r1, [r0, #0]
 8008286:	4682      	mov	sl, r0
 8008288:	eb07 0e01 	add.w	lr, r7, r1
 800828c:	f8c0 e000 	str.w	lr, [r0]
 8008290:	493f      	ldr	r1, [pc, #252]	; (8008390 <_malloc_r+0x40c>)
 8008292:	d113      	bne.n	80082bc <_malloc_r+0x338>
 8008294:	420b      	tst	r3, r1
 8008296:	d111      	bne.n	80082bc <_malloc_r+0x338>
 8008298:	68ab      	ldr	r3, [r5, #8]
 800829a:	443e      	add	r6, r7
 800829c:	f046 0601 	orr.w	r6, r6, #1
 80082a0:	605e      	str	r6, [r3, #4]
 80082a2:	4a3c      	ldr	r2, [pc, #240]	; (8008394 <_malloc_r+0x410>)
 80082a4:	f8da 3000 	ldr.w	r3, [sl]
 80082a8:	6811      	ldr	r1, [r2, #0]
 80082aa:	428b      	cmp	r3, r1
 80082ac:	bf88      	it	hi
 80082ae:	6013      	strhi	r3, [r2, #0]
 80082b0:	4a39      	ldr	r2, [pc, #228]	; (8008398 <_malloc_r+0x414>)
 80082b2:	6811      	ldr	r1, [r2, #0]
 80082b4:	428b      	cmp	r3, r1
 80082b6:	bf88      	it	hi
 80082b8:	6013      	strhi	r3, [r2, #0]
 80082ba:	e031      	b.n	8008320 <_malloc_r+0x39c>
 80082bc:	6810      	ldr	r0, [r2, #0]
 80082be:	3001      	adds	r0, #1
 80082c0:	bf1b      	ittet	ne
 80082c2:	eba8 0303 	subne.w	r3, r8, r3
 80082c6:	4473      	addne	r3, lr
 80082c8:	f8c2 8000 	streq.w	r8, [r2]
 80082cc:	f8ca 3000 	strne.w	r3, [sl]
 80082d0:	f018 0007 	ands.w	r0, r8, #7
 80082d4:	bf1c      	itt	ne
 80082d6:	f1c0 0008 	rsbne	r0, r0, #8
 80082da:	4480      	addne	r8, r0
 80082dc:	4b2a      	ldr	r3, [pc, #168]	; (8008388 <_malloc_r+0x404>)
 80082de:	4447      	add	r7, r8
 80082e0:	4418      	add	r0, r3
 80082e2:	400f      	ands	r7, r1
 80082e4:	1bc7      	subs	r7, r0, r7
 80082e6:	4639      	mov	r1, r7
 80082e8:	4648      	mov	r0, r9
 80082ea:	f000 fc97 	bl	8008c1c <_sbrk_r>
 80082ee:	1c43      	adds	r3, r0, #1
 80082f0:	bf04      	itt	eq
 80082f2:	4640      	moveq	r0, r8
 80082f4:	2700      	moveq	r7, #0
 80082f6:	f8da 3000 	ldr.w	r3, [sl]
 80082fa:	eba0 0008 	sub.w	r0, r0, r8
 80082fe:	443b      	add	r3, r7
 8008300:	4407      	add	r7, r0
 8008302:	f047 0701 	orr.w	r7, r7, #1
 8008306:	45ab      	cmp	fp, r5
 8008308:	f8c5 8008 	str.w	r8, [r5, #8]
 800830c:	f8ca 3000 	str.w	r3, [sl]
 8008310:	f8c8 7004 	str.w	r7, [r8, #4]
 8008314:	d0c5      	beq.n	80082a2 <_malloc_r+0x31e>
 8008316:	2e0f      	cmp	r6, #15
 8008318:	d810      	bhi.n	800833c <_malloc_r+0x3b8>
 800831a:	2301      	movs	r3, #1
 800831c:	f8c8 3004 	str.w	r3, [r8, #4]
 8008320:	68ab      	ldr	r3, [r5, #8]
 8008322:	685a      	ldr	r2, [r3, #4]
 8008324:	f022 0203 	bic.w	r2, r2, #3
 8008328:	4294      	cmp	r4, r2
 800832a:	eba2 0304 	sub.w	r3, r2, r4
 800832e:	d801      	bhi.n	8008334 <_malloc_r+0x3b0>
 8008330:	2b0f      	cmp	r3, #15
 8008332:	dc1a      	bgt.n	800836a <_malloc_r+0x3e6>
 8008334:	4648      	mov	r0, r9
 8008336:	f000 f883 	bl	8008440 <__malloc_unlock>
 800833a:	e630      	b.n	8007f9e <_malloc_r+0x1a>
 800833c:	2205      	movs	r2, #5
 800833e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8008342:	3e0c      	subs	r6, #12
 8008344:	f026 0607 	bic.w	r6, r6, #7
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	4333      	orrs	r3, r6
 800834e:	f8cb 3004 	str.w	r3, [fp, #4]
 8008352:	2e0f      	cmp	r6, #15
 8008354:	eb0b 0306 	add.w	r3, fp, r6
 8008358:	605a      	str	r2, [r3, #4]
 800835a:	609a      	str	r2, [r3, #8]
 800835c:	d9a1      	bls.n	80082a2 <_malloc_r+0x31e>
 800835e:	f10b 0108 	add.w	r1, fp, #8
 8008362:	4648      	mov	r0, r9
 8008364:	f001 ff26 	bl	800a1b4 <_free_r>
 8008368:	e79b      	b.n	80082a2 <_malloc_r+0x31e>
 800836a:	68ae      	ldr	r6, [r5, #8]
 800836c:	f044 0201 	orr.w	r2, r4, #1
 8008370:	f043 0301 	orr.w	r3, r3, #1
 8008374:	4434      	add	r4, r6
 8008376:	6072      	str	r2, [r6, #4]
 8008378:	60ac      	str	r4, [r5, #8]
 800837a:	6063      	str	r3, [r4, #4]
 800837c:	e634      	b.n	8007fe8 <_malloc_r+0x64>
 800837e:	bf00      	nop
 8008380:	20001204 	.word	0x20001204
 8008384:	2000071c 	.word	0x2000071c
 8008388:	00001000 	.word	0x00001000
 800838c:	200011d4 	.word	0x200011d4
 8008390:	00000fff 	.word	0x00000fff
 8008394:	200011fc 	.word	0x200011fc
 8008398:	20001200 	.word	0x20001200

0800839c <_mbrtowc_r>:
 800839c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800839e:	9d08      	ldr	r5, [sp, #32]
 80083a0:	4606      	mov	r6, r0
 80083a2:	4617      	mov	r7, r2
 80083a4:	4c10      	ldr	r4, [pc, #64]	; (80083e8 <_mbrtowc_r+0x4c>)
 80083a6:	b9a2      	cbnz	r2, 80083d2 <_mbrtowc_r+0x36>
 80083a8:	6823      	ldr	r3, [r4, #0]
 80083aa:	4a10      	ldr	r2, [pc, #64]	; (80083ec <_mbrtowc_r+0x50>)
 80083ac:	6a1b      	ldr	r3, [r3, #32]
 80083ae:	9500      	str	r5, [sp, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	bf08      	it	eq
 80083b4:	4613      	moveq	r3, r2
 80083b6:	4639      	mov	r1, r7
 80083b8:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
 80083bc:	2301      	movs	r3, #1
 80083be:	4a0c      	ldr	r2, [pc, #48]	; (80083f0 <_mbrtowc_r+0x54>)
 80083c0:	47a0      	blx	r4
 80083c2:	1c43      	adds	r3, r0, #1
 80083c4:	bf01      	itttt	eq
 80083c6:	2300      	moveq	r3, #0
 80083c8:	602b      	streq	r3, [r5, #0]
 80083ca:	238a      	moveq	r3, #138	; 0x8a
 80083cc:	6033      	streq	r3, [r6, #0]
 80083ce:	b003      	add	sp, #12
 80083d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083d2:	6824      	ldr	r4, [r4, #0]
 80083d4:	4f05      	ldr	r7, [pc, #20]	; (80083ec <_mbrtowc_r+0x50>)
 80083d6:	6a24      	ldr	r4, [r4, #32]
 80083d8:	9500      	str	r5, [sp, #0]
 80083da:	2c00      	cmp	r4, #0
 80083dc:	bf08      	it	eq
 80083de:	463c      	moveq	r4, r7
 80083e0:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 80083e4:	e7ec      	b.n	80083c0 <_mbrtowc_r+0x24>
 80083e6:	bf00      	nop
 80083e8:	200000b4 	.word	0x200000b4
 80083ec:	200001a8 	.word	0x200001a8
 80083f0:	0800b0ea 	.word	0x0800b0ea

080083f4 <__ascii_mbtowc>:
 80083f4:	b082      	sub	sp, #8
 80083f6:	b901      	cbnz	r1, 80083fa <__ascii_mbtowc+0x6>
 80083f8:	a901      	add	r1, sp, #4
 80083fa:	b142      	cbz	r2, 800840e <__ascii_mbtowc+0x1a>
 80083fc:	b14b      	cbz	r3, 8008412 <__ascii_mbtowc+0x1e>
 80083fe:	7813      	ldrb	r3, [r2, #0]
 8008400:	600b      	str	r3, [r1, #0]
 8008402:	7812      	ldrb	r2, [r2, #0]
 8008404:	1c10      	adds	r0, r2, #0
 8008406:	bf18      	it	ne
 8008408:	2001      	movne	r0, #1
 800840a:	b002      	add	sp, #8
 800840c:	4770      	bx	lr
 800840e:	4610      	mov	r0, r2
 8008410:	e7fb      	b.n	800840a <__ascii_mbtowc+0x16>
 8008412:	f06f 0001 	mvn.w	r0, #1
 8008416:	e7f8      	b.n	800840a <__ascii_mbtowc+0x16>

08008418 <memchr>:
 8008418:	b510      	push	{r4, lr}
 800841a:	b2c9      	uxtb	r1, r1
 800841c:	4402      	add	r2, r0
 800841e:	4290      	cmp	r0, r2
 8008420:	4603      	mov	r3, r0
 8008422:	d101      	bne.n	8008428 <memchr+0x10>
 8008424:	2000      	movs	r0, #0
 8008426:	bd10      	pop	{r4, pc}
 8008428:	781c      	ldrb	r4, [r3, #0]
 800842a:	3001      	adds	r0, #1
 800842c:	428c      	cmp	r4, r1
 800842e:	d1f6      	bne.n	800841e <memchr+0x6>
 8008430:	4618      	mov	r0, r3
 8008432:	bd10      	pop	{r4, pc}

08008434 <__malloc_lock>:
 8008434:	4801      	ldr	r0, [pc, #4]	; (800843c <__malloc_lock+0x8>)
 8008436:	f002 ba97 	b.w	800a968 <__retarget_lock_acquire_recursive>
 800843a:	bf00      	nop
 800843c:	20001238 	.word	0x20001238

08008440 <__malloc_unlock>:
 8008440:	4801      	ldr	r0, [pc, #4]	; (8008448 <__malloc_unlock+0x8>)
 8008442:	f002 ba92 	b.w	800a96a <__retarget_lock_release_recursive>
 8008446:	bf00      	nop
 8008448:	20001238 	.word	0x20001238

0800844c <_Balloc>:
 800844c:	b570      	push	{r4, r5, r6, lr}
 800844e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008450:	4604      	mov	r4, r0
 8008452:	460e      	mov	r6, r1
 8008454:	b93d      	cbnz	r5, 8008466 <_Balloc+0x1a>
 8008456:	2010      	movs	r0, #16
 8008458:	f7ff fd8c 	bl	8007f74 <malloc>
 800845c:	6260      	str	r0, [r4, #36]	; 0x24
 800845e:	6045      	str	r5, [r0, #4]
 8008460:	6085      	str	r5, [r0, #8]
 8008462:	6005      	str	r5, [r0, #0]
 8008464:	60c5      	str	r5, [r0, #12]
 8008466:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008468:	68eb      	ldr	r3, [r5, #12]
 800846a:	b183      	cbz	r3, 800848e <_Balloc+0x42>
 800846c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008474:	b9b8      	cbnz	r0, 80084a6 <_Balloc+0x5a>
 8008476:	2101      	movs	r1, #1
 8008478:	fa01 f506 	lsl.w	r5, r1, r6
 800847c:	1d6a      	adds	r2, r5, #5
 800847e:	0092      	lsls	r2, r2, #2
 8008480:	4620      	mov	r0, r4
 8008482:	f001 fe14 	bl	800a0ae <_calloc_r>
 8008486:	b160      	cbz	r0, 80084a2 <_Balloc+0x56>
 8008488:	6046      	str	r6, [r0, #4]
 800848a:	6085      	str	r5, [r0, #8]
 800848c:	e00e      	b.n	80084ac <_Balloc+0x60>
 800848e:	2221      	movs	r2, #33	; 0x21
 8008490:	2104      	movs	r1, #4
 8008492:	4620      	mov	r0, r4
 8008494:	f001 fe0b 	bl	800a0ae <_calloc_r>
 8008498:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800849a:	60e8      	str	r0, [r5, #12]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1e4      	bne.n	800846c <_Balloc+0x20>
 80084a2:	2000      	movs	r0, #0
 80084a4:	bd70      	pop	{r4, r5, r6, pc}
 80084a6:	6802      	ldr	r2, [r0, #0]
 80084a8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80084ac:	2300      	movs	r3, #0
 80084ae:	6103      	str	r3, [r0, #16]
 80084b0:	60c3      	str	r3, [r0, #12]
 80084b2:	bd70      	pop	{r4, r5, r6, pc}

080084b4 <_Bfree>:
 80084b4:	b570      	push	{r4, r5, r6, lr}
 80084b6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80084b8:	4606      	mov	r6, r0
 80084ba:	460d      	mov	r5, r1
 80084bc:	b93c      	cbnz	r4, 80084ce <_Bfree+0x1a>
 80084be:	2010      	movs	r0, #16
 80084c0:	f7ff fd58 	bl	8007f74 <malloc>
 80084c4:	6270      	str	r0, [r6, #36]	; 0x24
 80084c6:	6044      	str	r4, [r0, #4]
 80084c8:	6084      	str	r4, [r0, #8]
 80084ca:	6004      	str	r4, [r0, #0]
 80084cc:	60c4      	str	r4, [r0, #12]
 80084ce:	b13d      	cbz	r5, 80084e0 <_Bfree+0x2c>
 80084d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80084d2:	686a      	ldr	r2, [r5, #4]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084da:	6029      	str	r1, [r5, #0]
 80084dc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80084e0:	bd70      	pop	{r4, r5, r6, pc}

080084e2 <__multadd>:
 80084e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084e6:	461f      	mov	r7, r3
 80084e8:	4606      	mov	r6, r0
 80084ea:	460c      	mov	r4, r1
 80084ec:	2300      	movs	r3, #0
 80084ee:	690d      	ldr	r5, [r1, #16]
 80084f0:	f101 0e14 	add.w	lr, r1, #20
 80084f4:	f8de 0000 	ldr.w	r0, [lr]
 80084f8:	3301      	adds	r3, #1
 80084fa:	b281      	uxth	r1, r0
 80084fc:	fb02 7101 	mla	r1, r2, r1, r7
 8008500:	0c00      	lsrs	r0, r0, #16
 8008502:	0c0f      	lsrs	r7, r1, #16
 8008504:	fb02 7000 	mla	r0, r2, r0, r7
 8008508:	b289      	uxth	r1, r1
 800850a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800850e:	429d      	cmp	r5, r3
 8008510:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008514:	f84e 1b04 	str.w	r1, [lr], #4
 8008518:	dcec      	bgt.n	80084f4 <__multadd+0x12>
 800851a:	b1d7      	cbz	r7, 8008552 <__multadd+0x70>
 800851c:	68a3      	ldr	r3, [r4, #8]
 800851e:	429d      	cmp	r5, r3
 8008520:	db12      	blt.n	8008548 <__multadd+0x66>
 8008522:	6861      	ldr	r1, [r4, #4]
 8008524:	4630      	mov	r0, r6
 8008526:	3101      	adds	r1, #1
 8008528:	f7ff ff90 	bl	800844c <_Balloc>
 800852c:	4680      	mov	r8, r0
 800852e:	6922      	ldr	r2, [r4, #16]
 8008530:	f104 010c 	add.w	r1, r4, #12
 8008534:	3202      	adds	r2, #2
 8008536:	0092      	lsls	r2, r2, #2
 8008538:	300c      	adds	r0, #12
 800853a:	f7fd f8db 	bl	80056f4 <memcpy>
 800853e:	4621      	mov	r1, r4
 8008540:	4630      	mov	r0, r6
 8008542:	f7ff ffb7 	bl	80084b4 <_Bfree>
 8008546:	4644      	mov	r4, r8
 8008548:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800854c:	3501      	adds	r5, #1
 800854e:	615f      	str	r7, [r3, #20]
 8008550:	6125      	str	r5, [r4, #16]
 8008552:	4620      	mov	r0, r4
 8008554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008558 <__s2b>:
 8008558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800855c:	4615      	mov	r5, r2
 800855e:	2209      	movs	r2, #9
 8008560:	461f      	mov	r7, r3
 8008562:	3308      	adds	r3, #8
 8008564:	460c      	mov	r4, r1
 8008566:	fb93 f3f2 	sdiv	r3, r3, r2
 800856a:	4606      	mov	r6, r0
 800856c:	2201      	movs	r2, #1
 800856e:	2100      	movs	r1, #0
 8008570:	429a      	cmp	r2, r3
 8008572:	db20      	blt.n	80085b6 <__s2b+0x5e>
 8008574:	4630      	mov	r0, r6
 8008576:	f7ff ff69 	bl	800844c <_Balloc>
 800857a:	9b08      	ldr	r3, [sp, #32]
 800857c:	2d09      	cmp	r5, #9
 800857e:	6143      	str	r3, [r0, #20]
 8008580:	f04f 0301 	mov.w	r3, #1
 8008584:	6103      	str	r3, [r0, #16]
 8008586:	dd19      	ble.n	80085bc <__s2b+0x64>
 8008588:	f104 0909 	add.w	r9, r4, #9
 800858c:	46c8      	mov	r8, r9
 800858e:	442c      	add	r4, r5
 8008590:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008594:	4601      	mov	r1, r0
 8008596:	3b30      	subs	r3, #48	; 0x30
 8008598:	220a      	movs	r2, #10
 800859a:	4630      	mov	r0, r6
 800859c:	f7ff ffa1 	bl	80084e2 <__multadd>
 80085a0:	45a0      	cmp	r8, r4
 80085a2:	d1f5      	bne.n	8008590 <__s2b+0x38>
 80085a4:	f1a5 0408 	sub.w	r4, r5, #8
 80085a8:	444c      	add	r4, r9
 80085aa:	1b2d      	subs	r5, r5, r4
 80085ac:	1963      	adds	r3, r4, r5
 80085ae:	42bb      	cmp	r3, r7
 80085b0:	db07      	blt.n	80085c2 <__s2b+0x6a>
 80085b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085b6:	0052      	lsls	r2, r2, #1
 80085b8:	3101      	adds	r1, #1
 80085ba:	e7d9      	b.n	8008570 <__s2b+0x18>
 80085bc:	340a      	adds	r4, #10
 80085be:	2509      	movs	r5, #9
 80085c0:	e7f3      	b.n	80085aa <__s2b+0x52>
 80085c2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80085c6:	4601      	mov	r1, r0
 80085c8:	3b30      	subs	r3, #48	; 0x30
 80085ca:	220a      	movs	r2, #10
 80085cc:	4630      	mov	r0, r6
 80085ce:	f7ff ff88 	bl	80084e2 <__multadd>
 80085d2:	e7eb      	b.n	80085ac <__s2b+0x54>

080085d4 <__hi0bits>:
 80085d4:	0c02      	lsrs	r2, r0, #16
 80085d6:	0412      	lsls	r2, r2, #16
 80085d8:	4603      	mov	r3, r0
 80085da:	b9b2      	cbnz	r2, 800860a <__hi0bits+0x36>
 80085dc:	0403      	lsls	r3, r0, #16
 80085de:	2010      	movs	r0, #16
 80085e0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80085e4:	bf04      	itt	eq
 80085e6:	021b      	lsleq	r3, r3, #8
 80085e8:	3008      	addeq	r0, #8
 80085ea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80085ee:	bf04      	itt	eq
 80085f0:	011b      	lsleq	r3, r3, #4
 80085f2:	3004      	addeq	r0, #4
 80085f4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80085f8:	bf04      	itt	eq
 80085fa:	009b      	lsleq	r3, r3, #2
 80085fc:	3002      	addeq	r0, #2
 80085fe:	2b00      	cmp	r3, #0
 8008600:	db06      	blt.n	8008610 <__hi0bits+0x3c>
 8008602:	005b      	lsls	r3, r3, #1
 8008604:	d503      	bpl.n	800860e <__hi0bits+0x3a>
 8008606:	3001      	adds	r0, #1
 8008608:	4770      	bx	lr
 800860a:	2000      	movs	r0, #0
 800860c:	e7e8      	b.n	80085e0 <__hi0bits+0xc>
 800860e:	2020      	movs	r0, #32
 8008610:	4770      	bx	lr

08008612 <__lo0bits>:
 8008612:	6803      	ldr	r3, [r0, #0]
 8008614:	4601      	mov	r1, r0
 8008616:	f013 0207 	ands.w	r2, r3, #7
 800861a:	d00b      	beq.n	8008634 <__lo0bits+0x22>
 800861c:	07da      	lsls	r2, r3, #31
 800861e:	d423      	bmi.n	8008668 <__lo0bits+0x56>
 8008620:	0798      	lsls	r0, r3, #30
 8008622:	bf49      	itett	mi
 8008624:	085b      	lsrmi	r3, r3, #1
 8008626:	089b      	lsrpl	r3, r3, #2
 8008628:	2001      	movmi	r0, #1
 800862a:	600b      	strmi	r3, [r1, #0]
 800862c:	bf5c      	itt	pl
 800862e:	600b      	strpl	r3, [r1, #0]
 8008630:	2002      	movpl	r0, #2
 8008632:	4770      	bx	lr
 8008634:	b298      	uxth	r0, r3
 8008636:	b9a8      	cbnz	r0, 8008664 <__lo0bits+0x52>
 8008638:	2010      	movs	r0, #16
 800863a:	0c1b      	lsrs	r3, r3, #16
 800863c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008640:	bf04      	itt	eq
 8008642:	0a1b      	lsreq	r3, r3, #8
 8008644:	3008      	addeq	r0, #8
 8008646:	071a      	lsls	r2, r3, #28
 8008648:	bf04      	itt	eq
 800864a:	091b      	lsreq	r3, r3, #4
 800864c:	3004      	addeq	r0, #4
 800864e:	079a      	lsls	r2, r3, #30
 8008650:	bf04      	itt	eq
 8008652:	089b      	lsreq	r3, r3, #2
 8008654:	3002      	addeq	r0, #2
 8008656:	07da      	lsls	r2, r3, #31
 8008658:	d402      	bmi.n	8008660 <__lo0bits+0x4e>
 800865a:	085b      	lsrs	r3, r3, #1
 800865c:	d006      	beq.n	800866c <__lo0bits+0x5a>
 800865e:	3001      	adds	r0, #1
 8008660:	600b      	str	r3, [r1, #0]
 8008662:	4770      	bx	lr
 8008664:	4610      	mov	r0, r2
 8008666:	e7e9      	b.n	800863c <__lo0bits+0x2a>
 8008668:	2000      	movs	r0, #0
 800866a:	4770      	bx	lr
 800866c:	2020      	movs	r0, #32
 800866e:	4770      	bx	lr

08008670 <__i2b>:
 8008670:	b510      	push	{r4, lr}
 8008672:	460c      	mov	r4, r1
 8008674:	2101      	movs	r1, #1
 8008676:	f7ff fee9 	bl	800844c <_Balloc>
 800867a:	2201      	movs	r2, #1
 800867c:	6144      	str	r4, [r0, #20]
 800867e:	6102      	str	r2, [r0, #16]
 8008680:	bd10      	pop	{r4, pc}

08008682 <__multiply>:
 8008682:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008686:	4614      	mov	r4, r2
 8008688:	690a      	ldr	r2, [r1, #16]
 800868a:	6923      	ldr	r3, [r4, #16]
 800868c:	4689      	mov	r9, r1
 800868e:	429a      	cmp	r2, r3
 8008690:	bfbe      	ittt	lt
 8008692:	460b      	movlt	r3, r1
 8008694:	46a1      	movlt	r9, r4
 8008696:	461c      	movlt	r4, r3
 8008698:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800869c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80086a0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80086a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80086a8:	eb07 060a 	add.w	r6, r7, sl
 80086ac:	429e      	cmp	r6, r3
 80086ae:	bfc8      	it	gt
 80086b0:	3101      	addgt	r1, #1
 80086b2:	f7ff fecb 	bl	800844c <_Balloc>
 80086b6:	f100 0514 	add.w	r5, r0, #20
 80086ba:	462b      	mov	r3, r5
 80086bc:	2200      	movs	r2, #0
 80086be:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80086c2:	4543      	cmp	r3, r8
 80086c4:	d316      	bcc.n	80086f4 <__multiply+0x72>
 80086c6:	f104 0214 	add.w	r2, r4, #20
 80086ca:	f109 0114 	add.w	r1, r9, #20
 80086ce:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80086d2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80086d6:	9301      	str	r3, [sp, #4]
 80086d8:	9c01      	ldr	r4, [sp, #4]
 80086da:	4613      	mov	r3, r2
 80086dc:	4294      	cmp	r4, r2
 80086de:	d80c      	bhi.n	80086fa <__multiply+0x78>
 80086e0:	2e00      	cmp	r6, #0
 80086e2:	dd03      	ble.n	80086ec <__multiply+0x6a>
 80086e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d054      	beq.n	8008796 <__multiply+0x114>
 80086ec:	6106      	str	r6, [r0, #16]
 80086ee:	b003      	add	sp, #12
 80086f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f4:	f843 2b04 	str.w	r2, [r3], #4
 80086f8:	e7e3      	b.n	80086c2 <__multiply+0x40>
 80086fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80086fe:	3204      	adds	r2, #4
 8008700:	f1ba 0f00 	cmp.w	sl, #0
 8008704:	d020      	beq.n	8008748 <__multiply+0xc6>
 8008706:	46ae      	mov	lr, r5
 8008708:	4689      	mov	r9, r1
 800870a:	f04f 0c00 	mov.w	ip, #0
 800870e:	f859 4b04 	ldr.w	r4, [r9], #4
 8008712:	f8be b000 	ldrh.w	fp, [lr]
 8008716:	b2a3      	uxth	r3, r4
 8008718:	fb0a b303 	mla	r3, sl, r3, fp
 800871c:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8008720:	f8de 4000 	ldr.w	r4, [lr]
 8008724:	4463      	add	r3, ip
 8008726:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800872a:	fb0a c40b 	mla	r4, sl, fp, ip
 800872e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008732:	b29b      	uxth	r3, r3
 8008734:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008738:	454f      	cmp	r7, r9
 800873a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800873e:	f84e 3b04 	str.w	r3, [lr], #4
 8008742:	d8e4      	bhi.n	800870e <__multiply+0x8c>
 8008744:	f8ce c000 	str.w	ip, [lr]
 8008748:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800874c:	f1b9 0f00 	cmp.w	r9, #0
 8008750:	d01f      	beq.n	8008792 <__multiply+0x110>
 8008752:	46ae      	mov	lr, r5
 8008754:	468c      	mov	ip, r1
 8008756:	f04f 0a00 	mov.w	sl, #0
 800875a:	682b      	ldr	r3, [r5, #0]
 800875c:	f8bc 4000 	ldrh.w	r4, [ip]
 8008760:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008764:	b29b      	uxth	r3, r3
 8008766:	fb09 b404 	mla	r4, r9, r4, fp
 800876a:	44a2      	add	sl, r4
 800876c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8008770:	f84e 3b04 	str.w	r3, [lr], #4
 8008774:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008778:	f8be 4000 	ldrh.w	r4, [lr]
 800877c:	0c1b      	lsrs	r3, r3, #16
 800877e:	fb09 4303 	mla	r3, r9, r3, r4
 8008782:	4567      	cmp	r7, ip
 8008784:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8008788:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800878c:	d8e6      	bhi.n	800875c <__multiply+0xda>
 800878e:	f8ce 3000 	str.w	r3, [lr]
 8008792:	3504      	adds	r5, #4
 8008794:	e7a0      	b.n	80086d8 <__multiply+0x56>
 8008796:	3e01      	subs	r6, #1
 8008798:	e7a2      	b.n	80086e0 <__multiply+0x5e>
	...

0800879c <__pow5mult>:
 800879c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087a0:	4615      	mov	r5, r2
 80087a2:	f012 0203 	ands.w	r2, r2, #3
 80087a6:	4606      	mov	r6, r0
 80087a8:	460f      	mov	r7, r1
 80087aa:	d007      	beq.n	80087bc <__pow5mult+0x20>
 80087ac:	4c21      	ldr	r4, [pc, #132]	; (8008834 <__pow5mult+0x98>)
 80087ae:	3a01      	subs	r2, #1
 80087b0:	2300      	movs	r3, #0
 80087b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087b6:	f7ff fe94 	bl	80084e2 <__multadd>
 80087ba:	4607      	mov	r7, r0
 80087bc:	10ad      	asrs	r5, r5, #2
 80087be:	d035      	beq.n	800882c <__pow5mult+0x90>
 80087c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80087c2:	b93c      	cbnz	r4, 80087d4 <__pow5mult+0x38>
 80087c4:	2010      	movs	r0, #16
 80087c6:	f7ff fbd5 	bl	8007f74 <malloc>
 80087ca:	6270      	str	r0, [r6, #36]	; 0x24
 80087cc:	6044      	str	r4, [r0, #4]
 80087ce:	6084      	str	r4, [r0, #8]
 80087d0:	6004      	str	r4, [r0, #0]
 80087d2:	60c4      	str	r4, [r0, #12]
 80087d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80087d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80087dc:	b94c      	cbnz	r4, 80087f2 <__pow5mult+0x56>
 80087de:	f240 2171 	movw	r1, #625	; 0x271
 80087e2:	4630      	mov	r0, r6
 80087e4:	f7ff ff44 	bl	8008670 <__i2b>
 80087e8:	2300      	movs	r3, #0
 80087ea:	4604      	mov	r4, r0
 80087ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80087f0:	6003      	str	r3, [r0, #0]
 80087f2:	f04f 0800 	mov.w	r8, #0
 80087f6:	07eb      	lsls	r3, r5, #31
 80087f8:	d50a      	bpl.n	8008810 <__pow5mult+0x74>
 80087fa:	4639      	mov	r1, r7
 80087fc:	4622      	mov	r2, r4
 80087fe:	4630      	mov	r0, r6
 8008800:	f7ff ff3f 	bl	8008682 <__multiply>
 8008804:	4681      	mov	r9, r0
 8008806:	4639      	mov	r1, r7
 8008808:	4630      	mov	r0, r6
 800880a:	f7ff fe53 	bl	80084b4 <_Bfree>
 800880e:	464f      	mov	r7, r9
 8008810:	106d      	asrs	r5, r5, #1
 8008812:	d00b      	beq.n	800882c <__pow5mult+0x90>
 8008814:	6820      	ldr	r0, [r4, #0]
 8008816:	b938      	cbnz	r0, 8008828 <__pow5mult+0x8c>
 8008818:	4622      	mov	r2, r4
 800881a:	4621      	mov	r1, r4
 800881c:	4630      	mov	r0, r6
 800881e:	f7ff ff30 	bl	8008682 <__multiply>
 8008822:	6020      	str	r0, [r4, #0]
 8008824:	f8c0 8000 	str.w	r8, [r0]
 8008828:	4604      	mov	r4, r0
 800882a:	e7e4      	b.n	80087f6 <__pow5mult+0x5a>
 800882c:	4638      	mov	r0, r7
 800882e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008832:	bf00      	nop
 8008834:	0800b1e0 	.word	0x0800b1e0

08008838 <__lshift>:
 8008838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800883c:	460c      	mov	r4, r1
 800883e:	4607      	mov	r7, r0
 8008840:	4616      	mov	r6, r2
 8008842:	6923      	ldr	r3, [r4, #16]
 8008844:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008848:	eb0a 0903 	add.w	r9, sl, r3
 800884c:	6849      	ldr	r1, [r1, #4]
 800884e:	68a3      	ldr	r3, [r4, #8]
 8008850:	f109 0501 	add.w	r5, r9, #1
 8008854:	42ab      	cmp	r3, r5
 8008856:	db31      	blt.n	80088bc <__lshift+0x84>
 8008858:	4638      	mov	r0, r7
 800885a:	f7ff fdf7 	bl	800844c <_Balloc>
 800885e:	2200      	movs	r2, #0
 8008860:	4680      	mov	r8, r0
 8008862:	4611      	mov	r1, r2
 8008864:	f100 0314 	add.w	r3, r0, #20
 8008868:	4552      	cmp	r2, sl
 800886a:	db2a      	blt.n	80088c2 <__lshift+0x8a>
 800886c:	6920      	ldr	r0, [r4, #16]
 800886e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008872:	f104 0114 	add.w	r1, r4, #20
 8008876:	f016 021f 	ands.w	r2, r6, #31
 800887a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800887e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8008882:	d022      	beq.n	80088ca <__lshift+0x92>
 8008884:	2000      	movs	r0, #0
 8008886:	f1c2 0c20 	rsb	ip, r2, #32
 800888a:	680e      	ldr	r6, [r1, #0]
 800888c:	4096      	lsls	r6, r2
 800888e:	4330      	orrs	r0, r6
 8008890:	f843 0b04 	str.w	r0, [r3], #4
 8008894:	f851 0b04 	ldr.w	r0, [r1], #4
 8008898:	458e      	cmp	lr, r1
 800889a:	fa20 f00c 	lsr.w	r0, r0, ip
 800889e:	d8f4      	bhi.n	800888a <__lshift+0x52>
 80088a0:	6018      	str	r0, [r3, #0]
 80088a2:	b108      	cbz	r0, 80088a8 <__lshift+0x70>
 80088a4:	f109 0502 	add.w	r5, r9, #2
 80088a8:	3d01      	subs	r5, #1
 80088aa:	4638      	mov	r0, r7
 80088ac:	f8c8 5010 	str.w	r5, [r8, #16]
 80088b0:	4621      	mov	r1, r4
 80088b2:	f7ff fdff 	bl	80084b4 <_Bfree>
 80088b6:	4640      	mov	r0, r8
 80088b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088bc:	3101      	adds	r1, #1
 80088be:	005b      	lsls	r3, r3, #1
 80088c0:	e7c8      	b.n	8008854 <__lshift+0x1c>
 80088c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80088c6:	3201      	adds	r2, #1
 80088c8:	e7ce      	b.n	8008868 <__lshift+0x30>
 80088ca:	3b04      	subs	r3, #4
 80088cc:	f851 2b04 	ldr.w	r2, [r1], #4
 80088d0:	458e      	cmp	lr, r1
 80088d2:	f843 2f04 	str.w	r2, [r3, #4]!
 80088d6:	d8f9      	bhi.n	80088cc <__lshift+0x94>
 80088d8:	e7e6      	b.n	80088a8 <__lshift+0x70>

080088da <__mcmp>:
 80088da:	6903      	ldr	r3, [r0, #16]
 80088dc:	690a      	ldr	r2, [r1, #16]
 80088de:	b530      	push	{r4, r5, lr}
 80088e0:	1a9b      	subs	r3, r3, r2
 80088e2:	d10c      	bne.n	80088fe <__mcmp+0x24>
 80088e4:	0092      	lsls	r2, r2, #2
 80088e6:	3014      	adds	r0, #20
 80088e8:	3114      	adds	r1, #20
 80088ea:	1884      	adds	r4, r0, r2
 80088ec:	4411      	add	r1, r2
 80088ee:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80088f2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80088f6:	4295      	cmp	r5, r2
 80088f8:	d003      	beq.n	8008902 <__mcmp+0x28>
 80088fa:	d305      	bcc.n	8008908 <__mcmp+0x2e>
 80088fc:	2301      	movs	r3, #1
 80088fe:	4618      	mov	r0, r3
 8008900:	bd30      	pop	{r4, r5, pc}
 8008902:	42a0      	cmp	r0, r4
 8008904:	d3f3      	bcc.n	80088ee <__mcmp+0x14>
 8008906:	e7fa      	b.n	80088fe <__mcmp+0x24>
 8008908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800890c:	e7f7      	b.n	80088fe <__mcmp+0x24>

0800890e <__mdiff>:
 800890e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008912:	460d      	mov	r5, r1
 8008914:	4607      	mov	r7, r0
 8008916:	4611      	mov	r1, r2
 8008918:	4628      	mov	r0, r5
 800891a:	4614      	mov	r4, r2
 800891c:	f7ff ffdd 	bl	80088da <__mcmp>
 8008920:	1e06      	subs	r6, r0, #0
 8008922:	d108      	bne.n	8008936 <__mdiff+0x28>
 8008924:	4631      	mov	r1, r6
 8008926:	4638      	mov	r0, r7
 8008928:	f7ff fd90 	bl	800844c <_Balloc>
 800892c:	2301      	movs	r3, #1
 800892e:	6146      	str	r6, [r0, #20]
 8008930:	6103      	str	r3, [r0, #16]
 8008932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008936:	bfa4      	itt	ge
 8008938:	4623      	movge	r3, r4
 800893a:	462c      	movge	r4, r5
 800893c:	4638      	mov	r0, r7
 800893e:	6861      	ldr	r1, [r4, #4]
 8008940:	bfa6      	itte	ge
 8008942:	461d      	movge	r5, r3
 8008944:	2600      	movge	r6, #0
 8008946:	2601      	movlt	r6, #1
 8008948:	f7ff fd80 	bl	800844c <_Balloc>
 800894c:	f04f 0c00 	mov.w	ip, #0
 8008950:	60c6      	str	r6, [r0, #12]
 8008952:	692b      	ldr	r3, [r5, #16]
 8008954:	6926      	ldr	r6, [r4, #16]
 8008956:	f104 0214 	add.w	r2, r4, #20
 800895a:	f105 0914 	add.w	r9, r5, #20
 800895e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008962:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008966:	f100 0114 	add.w	r1, r0, #20
 800896a:	f852 ab04 	ldr.w	sl, [r2], #4
 800896e:	f859 5b04 	ldr.w	r5, [r9], #4
 8008972:	fa1f f38a 	uxth.w	r3, sl
 8008976:	4463      	add	r3, ip
 8008978:	b2ac      	uxth	r4, r5
 800897a:	1b1b      	subs	r3, r3, r4
 800897c:	0c2c      	lsrs	r4, r5, #16
 800897e:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008982:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008986:	b29b      	uxth	r3, r3
 8008988:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800898c:	45c8      	cmp	r8, r9
 800898e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008992:	4696      	mov	lr, r2
 8008994:	f841 4b04 	str.w	r4, [r1], #4
 8008998:	d8e7      	bhi.n	800896a <__mdiff+0x5c>
 800899a:	45be      	cmp	lr, r7
 800899c:	d305      	bcc.n	80089aa <__mdiff+0x9c>
 800899e:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80089a2:	b18b      	cbz	r3, 80089c8 <__mdiff+0xba>
 80089a4:	6106      	str	r6, [r0, #16]
 80089a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089aa:	f85e 4b04 	ldr.w	r4, [lr], #4
 80089ae:	b2a2      	uxth	r2, r4
 80089b0:	4462      	add	r2, ip
 80089b2:	1413      	asrs	r3, r2, #16
 80089b4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80089b8:	b292      	uxth	r2, r2
 80089ba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80089be:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80089c2:	f841 2b04 	str.w	r2, [r1], #4
 80089c6:	e7e8      	b.n	800899a <__mdiff+0x8c>
 80089c8:	3e01      	subs	r6, #1
 80089ca:	e7e8      	b.n	800899e <__mdiff+0x90>

080089cc <__ulp>:
 80089cc:	4b10      	ldr	r3, [pc, #64]	; (8008a10 <__ulp+0x44>)
 80089ce:	400b      	ands	r3, r1
 80089d0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	dd02      	ble.n	80089de <__ulp+0x12>
 80089d8:	2000      	movs	r0, #0
 80089da:	4619      	mov	r1, r3
 80089dc:	4770      	bx	lr
 80089de:	425b      	negs	r3, r3
 80089e0:	151b      	asrs	r3, r3, #20
 80089e2:	2b13      	cmp	r3, #19
 80089e4:	f04f 0000 	mov.w	r0, #0
 80089e8:	f04f 0100 	mov.w	r1, #0
 80089ec:	dc04      	bgt.n	80089f8 <__ulp+0x2c>
 80089ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80089f2:	fa42 f103 	asr.w	r1, r2, r3
 80089f6:	4770      	bx	lr
 80089f8:	2201      	movs	r2, #1
 80089fa:	3b14      	subs	r3, #20
 80089fc:	2b1e      	cmp	r3, #30
 80089fe:	bfce      	itee	gt
 8008a00:	4613      	movgt	r3, r2
 8008a02:	f1c3 031f 	rsble	r3, r3, #31
 8008a06:	fa02 f303 	lslle.w	r3, r2, r3
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	7ff00000 	.word	0x7ff00000

08008a14 <__b2d>:
 8008a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a18:	6907      	ldr	r7, [r0, #16]
 8008a1a:	f100 0914 	add.w	r9, r0, #20
 8008a1e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008a22:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008a26:	f1a7 0804 	sub.w	r8, r7, #4
 8008a2a:	4630      	mov	r0, r6
 8008a2c:	f7ff fdd2 	bl	80085d4 <__hi0bits>
 8008a30:	f1c0 0320 	rsb	r3, r0, #32
 8008a34:	280a      	cmp	r0, #10
 8008a36:	600b      	str	r3, [r1, #0]
 8008a38:	491e      	ldr	r1, [pc, #120]	; (8008ab4 <__b2d+0xa0>)
 8008a3a:	dc17      	bgt.n	8008a6c <__b2d+0x58>
 8008a3c:	45c1      	cmp	r9, r8
 8008a3e:	bf28      	it	cs
 8008a40:	2200      	movcs	r2, #0
 8008a42:	f1c0 0e0b 	rsb	lr, r0, #11
 8008a46:	fa26 f30e 	lsr.w	r3, r6, lr
 8008a4a:	bf38      	it	cc
 8008a4c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008a50:	ea43 0501 	orr.w	r5, r3, r1
 8008a54:	f100 0315 	add.w	r3, r0, #21
 8008a58:	fa06 f303 	lsl.w	r3, r6, r3
 8008a5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a60:	ea43 0402 	orr.w	r4, r3, r2
 8008a64:	4620      	mov	r0, r4
 8008a66:	4629      	mov	r1, r5
 8008a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a6c:	45c1      	cmp	r9, r8
 8008a6e:	bf3a      	itte	cc
 8008a70:	f1a7 0808 	subcc.w	r8, r7, #8
 8008a74:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008a78:	2200      	movcs	r2, #0
 8008a7a:	f1b0 030b 	subs.w	r3, r0, #11
 8008a7e:	d015      	beq.n	8008aac <__b2d+0x98>
 8008a80:	409e      	lsls	r6, r3
 8008a82:	f1c3 0720 	rsb	r7, r3, #32
 8008a86:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8008a8a:	fa22 f107 	lsr.w	r1, r2, r7
 8008a8e:	45c8      	cmp	r8, r9
 8008a90:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8008a94:	ea46 0501 	orr.w	r5, r6, r1
 8008a98:	bf94      	ite	ls
 8008a9a:	2100      	movls	r1, #0
 8008a9c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008aa0:	fa02 f003 	lsl.w	r0, r2, r3
 8008aa4:	40f9      	lsrs	r1, r7
 8008aa6:	ea40 0401 	orr.w	r4, r0, r1
 8008aaa:	e7db      	b.n	8008a64 <__b2d+0x50>
 8008aac:	ea46 0501 	orr.w	r5, r6, r1
 8008ab0:	4614      	mov	r4, r2
 8008ab2:	e7d7      	b.n	8008a64 <__b2d+0x50>
 8008ab4:	3ff00000 	.word	0x3ff00000

08008ab8 <__d2b>:
 8008ab8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008abc:	461c      	mov	r4, r3
 8008abe:	2101      	movs	r1, #1
 8008ac0:	4690      	mov	r8, r2
 8008ac2:	9e08      	ldr	r6, [sp, #32]
 8008ac4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008ac6:	f7ff fcc1 	bl	800844c <_Balloc>
 8008aca:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8008ace:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008ad2:	4607      	mov	r7, r0
 8008ad4:	bb34      	cbnz	r4, 8008b24 <__d2b+0x6c>
 8008ad6:	9201      	str	r2, [sp, #4]
 8008ad8:	f1b8 0f00 	cmp.w	r8, #0
 8008adc:	d027      	beq.n	8008b2e <__d2b+0x76>
 8008ade:	a802      	add	r0, sp, #8
 8008ae0:	f840 8d08 	str.w	r8, [r0, #-8]!
 8008ae4:	f7ff fd95 	bl	8008612 <__lo0bits>
 8008ae8:	9900      	ldr	r1, [sp, #0]
 8008aea:	b1f0      	cbz	r0, 8008b2a <__d2b+0x72>
 8008aec:	9a01      	ldr	r2, [sp, #4]
 8008aee:	f1c0 0320 	rsb	r3, r0, #32
 8008af2:	fa02 f303 	lsl.w	r3, r2, r3
 8008af6:	430b      	orrs	r3, r1
 8008af8:	40c2      	lsrs	r2, r0
 8008afa:	617b      	str	r3, [r7, #20]
 8008afc:	9201      	str	r2, [sp, #4]
 8008afe:	9b01      	ldr	r3, [sp, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	bf14      	ite	ne
 8008b04:	2102      	movne	r1, #2
 8008b06:	2101      	moveq	r1, #1
 8008b08:	61bb      	str	r3, [r7, #24]
 8008b0a:	6139      	str	r1, [r7, #16]
 8008b0c:	b1c4      	cbz	r4, 8008b40 <__d2b+0x88>
 8008b0e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008b12:	4404      	add	r4, r0
 8008b14:	6034      	str	r4, [r6, #0]
 8008b16:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b1a:	6028      	str	r0, [r5, #0]
 8008b1c:	4638      	mov	r0, r7
 8008b1e:	b002      	add	sp, #8
 8008b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b24:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008b28:	e7d5      	b.n	8008ad6 <__d2b+0x1e>
 8008b2a:	6179      	str	r1, [r7, #20]
 8008b2c:	e7e7      	b.n	8008afe <__d2b+0x46>
 8008b2e:	a801      	add	r0, sp, #4
 8008b30:	f7ff fd6f 	bl	8008612 <__lo0bits>
 8008b34:	2101      	movs	r1, #1
 8008b36:	9b01      	ldr	r3, [sp, #4]
 8008b38:	6139      	str	r1, [r7, #16]
 8008b3a:	617b      	str	r3, [r7, #20]
 8008b3c:	3020      	adds	r0, #32
 8008b3e:	e7e5      	b.n	8008b0c <__d2b+0x54>
 8008b40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b44:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008b48:	6030      	str	r0, [r6, #0]
 8008b4a:	6918      	ldr	r0, [r3, #16]
 8008b4c:	f7ff fd42 	bl	80085d4 <__hi0bits>
 8008b50:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008b54:	e7e1      	b.n	8008b1a <__d2b+0x62>

08008b56 <__ratio>:
 8008b56:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008b5a:	4688      	mov	r8, r1
 8008b5c:	4669      	mov	r1, sp
 8008b5e:	4681      	mov	r9, r0
 8008b60:	f7ff ff58 	bl	8008a14 <__b2d>
 8008b64:	460d      	mov	r5, r1
 8008b66:	4604      	mov	r4, r0
 8008b68:	a901      	add	r1, sp, #4
 8008b6a:	4640      	mov	r0, r8
 8008b6c:	f7ff ff52 	bl	8008a14 <__b2d>
 8008b70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b74:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008b78:	9e00      	ldr	r6, [sp, #0]
 8008b7a:	1a9a      	subs	r2, r3, r2
 8008b7c:	9b01      	ldr	r3, [sp, #4]
 8008b7e:	1af3      	subs	r3, r6, r3
 8008b80:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	bfd6      	itet	le
 8008b88:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008b8c:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 8008b90:	eb01 5103 	addle.w	r1, r1, r3, lsl #20
 8008b94:	4602      	mov	r2, r0
 8008b96:	460b      	mov	r3, r1
 8008b98:	4620      	mov	r0, r4
 8008b9a:	4629      	mov	r1, r5
 8008b9c:	f7f7 fdcc 	bl	8000738 <__aeabi_ddiv>
 8008ba0:	b002      	add	sp, #8
 8008ba2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08008ba6 <__copybits>:
 8008ba6:	3901      	subs	r1, #1
 8008ba8:	b510      	push	{r4, lr}
 8008baa:	1149      	asrs	r1, r1, #5
 8008bac:	6914      	ldr	r4, [r2, #16]
 8008bae:	3101      	adds	r1, #1
 8008bb0:	f102 0314 	add.w	r3, r2, #20
 8008bb4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008bb8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008bbc:	42a3      	cmp	r3, r4
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	d303      	bcc.n	8008bca <__copybits+0x24>
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	428a      	cmp	r2, r1
 8008bc6:	d305      	bcc.n	8008bd4 <__copybits+0x2e>
 8008bc8:	bd10      	pop	{r4, pc}
 8008bca:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bce:	f840 2b04 	str.w	r2, [r0], #4
 8008bd2:	e7f3      	b.n	8008bbc <__copybits+0x16>
 8008bd4:	f842 3b04 	str.w	r3, [r2], #4
 8008bd8:	e7f4      	b.n	8008bc4 <__copybits+0x1e>

08008bda <__any_on>:
 8008bda:	f100 0214 	add.w	r2, r0, #20
 8008bde:	6900      	ldr	r0, [r0, #16]
 8008be0:	114b      	asrs	r3, r1, #5
 8008be2:	4298      	cmp	r0, r3
 8008be4:	b510      	push	{r4, lr}
 8008be6:	db11      	blt.n	8008c0c <__any_on+0x32>
 8008be8:	dd0a      	ble.n	8008c00 <__any_on+0x26>
 8008bea:	f011 011f 	ands.w	r1, r1, #31
 8008bee:	d007      	beq.n	8008c00 <__any_on+0x26>
 8008bf0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008bf4:	fa24 f001 	lsr.w	r0, r4, r1
 8008bf8:	fa00 f101 	lsl.w	r1, r0, r1
 8008bfc:	428c      	cmp	r4, r1
 8008bfe:	d10b      	bne.n	8008c18 <__any_on+0x3e>
 8008c00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d803      	bhi.n	8008c10 <__any_on+0x36>
 8008c08:	2000      	movs	r0, #0
 8008c0a:	bd10      	pop	{r4, pc}
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	e7f7      	b.n	8008c00 <__any_on+0x26>
 8008c10:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c14:	2900      	cmp	r1, #0
 8008c16:	d0f5      	beq.n	8008c04 <__any_on+0x2a>
 8008c18:	2001      	movs	r0, #1
 8008c1a:	bd10      	pop	{r4, pc}

08008c1c <_sbrk_r>:
 8008c1c:	b538      	push	{r3, r4, r5, lr}
 8008c1e:	2300      	movs	r3, #0
 8008c20:	4c05      	ldr	r4, [pc, #20]	; (8008c38 <_sbrk_r+0x1c>)
 8008c22:	4605      	mov	r5, r0
 8008c24:	4608      	mov	r0, r1
 8008c26:	6023      	str	r3, [r4, #0]
 8008c28:	f002 f8aa 	bl	800ad80 <_sbrk>
 8008c2c:	1c43      	adds	r3, r0, #1
 8008c2e:	d102      	bne.n	8008c36 <_sbrk_r+0x1a>
 8008c30:	6823      	ldr	r3, [r4, #0]
 8008c32:	b103      	cbz	r3, 8008c36 <_sbrk_r+0x1a>
 8008c34:	602b      	str	r3, [r5, #0]
 8008c36:	bd38      	pop	{r3, r4, r5, pc}
 8008c38:	20001230 	.word	0x20001230

08008c3c <__sccl>:
 8008c3c:	b570      	push	{r4, r5, r6, lr}
 8008c3e:	780b      	ldrb	r3, [r1, #0]
 8008c40:	1e44      	subs	r4, r0, #1
 8008c42:	2b5e      	cmp	r3, #94	; 0x5e
 8008c44:	bf13      	iteet	ne
 8008c46:	1c4a      	addne	r2, r1, #1
 8008c48:	1c8a      	addeq	r2, r1, #2
 8008c4a:	784b      	ldrbeq	r3, [r1, #1]
 8008c4c:	2100      	movne	r1, #0
 8008c4e:	bf08      	it	eq
 8008c50:	2101      	moveq	r1, #1
 8008c52:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8008c56:	f804 1f01 	strb.w	r1, [r4, #1]!
 8008c5a:	42a5      	cmp	r5, r4
 8008c5c:	d1fb      	bne.n	8008c56 <__sccl+0x1a>
 8008c5e:	b913      	cbnz	r3, 8008c66 <__sccl+0x2a>
 8008c60:	3a01      	subs	r2, #1
 8008c62:	4610      	mov	r0, r2
 8008c64:	bd70      	pop	{r4, r5, r6, pc}
 8008c66:	f081 0401 	eor.w	r4, r1, #1
 8008c6a:	4611      	mov	r1, r2
 8008c6c:	54c4      	strb	r4, [r0, r3]
 8008c6e:	780d      	ldrb	r5, [r1, #0]
 8008c70:	1c4a      	adds	r2, r1, #1
 8008c72:	2d2d      	cmp	r5, #45	; 0x2d
 8008c74:	d006      	beq.n	8008c84 <__sccl+0x48>
 8008c76:	2d5d      	cmp	r5, #93	; 0x5d
 8008c78:	d0f3      	beq.n	8008c62 <__sccl+0x26>
 8008c7a:	b90d      	cbnz	r5, 8008c80 <__sccl+0x44>
 8008c7c:	460a      	mov	r2, r1
 8008c7e:	e7f0      	b.n	8008c62 <__sccl+0x26>
 8008c80:	462b      	mov	r3, r5
 8008c82:	e7f2      	b.n	8008c6a <__sccl+0x2e>
 8008c84:	784e      	ldrb	r6, [r1, #1]
 8008c86:	2e5d      	cmp	r6, #93	; 0x5d
 8008c88:	d0fa      	beq.n	8008c80 <__sccl+0x44>
 8008c8a:	42b3      	cmp	r3, r6
 8008c8c:	dcf8      	bgt.n	8008c80 <__sccl+0x44>
 8008c8e:	3102      	adds	r1, #2
 8008c90:	3301      	adds	r3, #1
 8008c92:	429e      	cmp	r6, r3
 8008c94:	54c4      	strb	r4, [r0, r3]
 8008c96:	dcfb      	bgt.n	8008c90 <__sccl+0x54>
 8008c98:	e7e9      	b.n	8008c6e <__sccl+0x32>
	...

08008c9c <nanf>:
 8008c9c:	4800      	ldr	r0, [pc, #0]	; (8008ca0 <nanf+0x4>)
 8008c9e:	4770      	bx	lr
 8008ca0:	7fc00000 	.word	0x7fc00000

08008ca4 <sulp>:
 8008ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca8:	460f      	mov	r7, r1
 8008caa:	4690      	mov	r8, r2
 8008cac:	f7ff fe8e 	bl	80089cc <__ulp>
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	460d      	mov	r5, r1
 8008cb4:	f1b8 0f00 	cmp.w	r8, #0
 8008cb8:	d011      	beq.n	8008cde <sulp+0x3a>
 8008cba:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008cbe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	dd0b      	ble.n	8008cde <sulp+0x3a>
 8008cc6:	2400      	movs	r4, #0
 8008cc8:	051b      	lsls	r3, r3, #20
 8008cca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008cce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008cd2:	4622      	mov	r2, r4
 8008cd4:	462b      	mov	r3, r5
 8008cd6:	f7f7 fc05 	bl	80004e4 <__aeabi_dmul>
 8008cda:	4604      	mov	r4, r0
 8008cdc:	460d      	mov	r5, r1
 8008cde:	4620      	mov	r0, r4
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008ce8 <_strtod_l>:
 8008ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cec:	4699      	mov	r9, r3
 8008cee:	2300      	movs	r3, #0
 8008cf0:	b09f      	sub	sp, #124	; 0x7c
 8008cf2:	4680      	mov	r8, r0
 8008cf4:	4648      	mov	r0, r9
 8008cf6:	460c      	mov	r4, r1
 8008cf8:	9215      	str	r2, [sp, #84]	; 0x54
 8008cfa:	931a      	str	r3, [sp, #104]	; 0x68
 8008cfc:	f7ff f92a 	bl	8007f54 <__localeconv_l>
 8008d00:	4607      	mov	r7, r0
 8008d02:	6800      	ldr	r0, [r0, #0]
 8008d04:	f7f7 fa2e 	bl	8000164 <strlen>
 8008d08:	f04f 0a00 	mov.w	sl, #0
 8008d0c:	4605      	mov	r5, r0
 8008d0e:	f04f 0b00 	mov.w	fp, #0
 8008d12:	9419      	str	r4, [sp, #100]	; 0x64
 8008d14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d16:	781a      	ldrb	r2, [r3, #0]
 8008d18:	2a0d      	cmp	r2, #13
 8008d1a:	d833      	bhi.n	8008d84 <_strtod_l+0x9c>
 8008d1c:	2a09      	cmp	r2, #9
 8008d1e:	d237      	bcs.n	8008d90 <_strtod_l+0xa8>
 8008d20:	2a00      	cmp	r2, #0
 8008d22:	d03f      	beq.n	8008da4 <_strtod_l+0xbc>
 8008d24:	2300      	movs	r3, #0
 8008d26:	9309      	str	r3, [sp, #36]	; 0x24
 8008d28:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008d2a:	7833      	ldrb	r3, [r6, #0]
 8008d2c:	2b30      	cmp	r3, #48	; 0x30
 8008d2e:	f040 8101 	bne.w	8008f34 <_strtod_l+0x24c>
 8008d32:	7873      	ldrb	r3, [r6, #1]
 8008d34:	2b58      	cmp	r3, #88	; 0x58
 8008d36:	d001      	beq.n	8008d3c <_strtod_l+0x54>
 8008d38:	2b78      	cmp	r3, #120	; 0x78
 8008d3a:	d16b      	bne.n	8008e14 <_strtod_l+0x12c>
 8008d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d3e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008d42:	9301      	str	r3, [sp, #4]
 8008d44:	ab1a      	add	r3, sp, #104	; 0x68
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	4aaa      	ldr	r2, [pc, #680]	; (8008ff4 <_strtod_l+0x30c>)
 8008d4a:	ab1b      	add	r3, sp, #108	; 0x6c
 8008d4c:	a919      	add	r1, sp, #100	; 0x64
 8008d4e:	4640      	mov	r0, r8
 8008d50:	f001 fb36 	bl	800a3c0 <__gethex>
 8008d54:	f010 0407 	ands.w	r4, r0, #7
 8008d58:	4605      	mov	r5, r0
 8008d5a:	d005      	beq.n	8008d68 <_strtod_l+0x80>
 8008d5c:	2c06      	cmp	r4, #6
 8008d5e:	d12b      	bne.n	8008db8 <_strtod_l+0xd0>
 8008d60:	2300      	movs	r3, #0
 8008d62:	3601      	adds	r6, #1
 8008d64:	9619      	str	r6, [sp, #100]	; 0x64
 8008d66:	9309      	str	r3, [sp, #36]	; 0x24
 8008d68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	f040 859d 	bne.w	80098aa <_strtod_l+0xbc2>
 8008d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d72:	b1e3      	cbz	r3, 8008dae <_strtod_l+0xc6>
 8008d74:	4652      	mov	r2, sl
 8008d76:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008d7a:	4610      	mov	r0, r2
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	b01f      	add	sp, #124	; 0x7c
 8008d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d84:	2a2b      	cmp	r2, #43	; 0x2b
 8008d86:	d006      	beq.n	8008d96 <_strtod_l+0xae>
 8008d88:	2a2d      	cmp	r2, #45	; 0x2d
 8008d8a:	d013      	beq.n	8008db4 <_strtod_l+0xcc>
 8008d8c:	2a20      	cmp	r2, #32
 8008d8e:	d1c9      	bne.n	8008d24 <_strtod_l+0x3c>
 8008d90:	3301      	adds	r3, #1
 8008d92:	9319      	str	r3, [sp, #100]	; 0x64
 8008d94:	e7be      	b.n	8008d14 <_strtod_l+0x2c>
 8008d96:	2200      	movs	r2, #0
 8008d98:	9209      	str	r2, [sp, #36]	; 0x24
 8008d9a:	1c5a      	adds	r2, r3, #1
 8008d9c:	9219      	str	r2, [sp, #100]	; 0x64
 8008d9e:	785b      	ldrb	r3, [r3, #1]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1c1      	bne.n	8008d28 <_strtod_l+0x40>
 8008da4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008da6:	9419      	str	r4, [sp, #100]	; 0x64
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f040 857c 	bne.w	80098a6 <_strtod_l+0xbbe>
 8008dae:	4652      	mov	r2, sl
 8008db0:	465b      	mov	r3, fp
 8008db2:	e7e2      	b.n	8008d7a <_strtod_l+0x92>
 8008db4:	2201      	movs	r2, #1
 8008db6:	e7ef      	b.n	8008d98 <_strtod_l+0xb0>
 8008db8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008dba:	b13a      	cbz	r2, 8008dcc <_strtod_l+0xe4>
 8008dbc:	2135      	movs	r1, #53	; 0x35
 8008dbe:	a81c      	add	r0, sp, #112	; 0x70
 8008dc0:	f7ff fef1 	bl	8008ba6 <__copybits>
 8008dc4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008dc6:	4640      	mov	r0, r8
 8008dc8:	f7ff fb74 	bl	80084b4 <_Bfree>
 8008dcc:	3c01      	subs	r4, #1
 8008dce:	2c04      	cmp	r4, #4
 8008dd0:	d808      	bhi.n	8008de4 <_strtod_l+0xfc>
 8008dd2:	e8df f004 	tbb	[pc, r4]
 8008dd6:	030c      	.short	0x030c
 8008dd8:	1a17      	.short	0x1a17
 8008dda:	0c          	.byte	0x0c
 8008ddb:	00          	.byte	0x00
 8008ddc:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8008de0:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8008de4:	0729      	lsls	r1, r5, #28
 8008de6:	d5bf      	bpl.n	8008d68 <_strtod_l+0x80>
 8008de8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008dec:	e7bc      	b.n	8008d68 <_strtod_l+0x80>
 8008dee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008df0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008df2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008df6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008dfa:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8008dfe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008e02:	e7ef      	b.n	8008de4 <_strtod_l+0xfc>
 8008e04:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8009000 <_strtod_l+0x318>
 8008e08:	e7ec      	b.n	8008de4 <_strtod_l+0xfc>
 8008e0a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008e0e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008e12:	e7e7      	b.n	8008de4 <_strtod_l+0xfc>
 8008e14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e16:	1c5a      	adds	r2, r3, #1
 8008e18:	9219      	str	r2, [sp, #100]	; 0x64
 8008e1a:	785b      	ldrb	r3, [r3, #1]
 8008e1c:	2b30      	cmp	r3, #48	; 0x30
 8008e1e:	d0f9      	beq.n	8008e14 <_strtod_l+0x12c>
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d0a1      	beq.n	8008d68 <_strtod_l+0x80>
 8008e24:	2301      	movs	r3, #1
 8008e26:	9308      	str	r3, [sp, #32]
 8008e28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e2a:	220a      	movs	r2, #10
 8008e2c:	930a      	str	r3, [sp, #40]	; 0x28
 8008e2e:	2300      	movs	r3, #0
 8008e30:	9305      	str	r3, [sp, #20]
 8008e32:	9306      	str	r3, [sp, #24]
 8008e34:	9304      	str	r3, [sp, #16]
 8008e36:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008e38:	7806      	ldrb	r6, [r0, #0]
 8008e3a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008e3e:	b2d9      	uxtb	r1, r3
 8008e40:	2909      	cmp	r1, #9
 8008e42:	d979      	bls.n	8008f38 <_strtod_l+0x250>
 8008e44:	462a      	mov	r2, r5
 8008e46:	6839      	ldr	r1, [r7, #0]
 8008e48:	f001 ff2c 	bl	800aca4 <strncmp>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	f000 8085 	beq.w	8008f5c <_strtod_l+0x274>
 8008e52:	2000      	movs	r0, #0
 8008e54:	4633      	mov	r3, r6
 8008e56:	4602      	mov	r2, r0
 8008e58:	4601      	mov	r1, r0
 8008e5a:	9d04      	ldr	r5, [sp, #16]
 8008e5c:	2b65      	cmp	r3, #101	; 0x65
 8008e5e:	d002      	beq.n	8008e66 <_strtod_l+0x17e>
 8008e60:	2b45      	cmp	r3, #69	; 0x45
 8008e62:	f040 80ef 	bne.w	8009044 <_strtod_l+0x35c>
 8008e66:	b925      	cbnz	r5, 8008e72 <_strtod_l+0x18a>
 8008e68:	b910      	cbnz	r0, 8008e70 <_strtod_l+0x188>
 8008e6a:	9b08      	ldr	r3, [sp, #32]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d099      	beq.n	8008da4 <_strtod_l+0xbc>
 8008e70:	2500      	movs	r5, #0
 8008e72:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8008e74:	1c63      	adds	r3, r4, #1
 8008e76:	9319      	str	r3, [sp, #100]	; 0x64
 8008e78:	7863      	ldrb	r3, [r4, #1]
 8008e7a:	2b2b      	cmp	r3, #43	; 0x2b
 8008e7c:	f000 80cf 	beq.w	800901e <_strtod_l+0x336>
 8008e80:	2b2d      	cmp	r3, #45	; 0x2d
 8008e82:	f000 80d2 	beq.w	800902a <_strtod_l+0x342>
 8008e86:	2600      	movs	r6, #0
 8008e88:	9607      	str	r6, [sp, #28]
 8008e8a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008e8e:	2e09      	cmp	r6, #9
 8008e90:	f200 80d7 	bhi.w	8009042 <_strtod_l+0x35a>
 8008e94:	2b30      	cmp	r3, #48	; 0x30
 8008e96:	f000 80ca 	beq.w	800902e <_strtod_l+0x346>
 8008e9a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 8008e9e:	2e08      	cmp	r6, #8
 8008ea0:	f200 80d0 	bhi.w	8009044 <_strtod_l+0x35c>
 8008ea4:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008ea8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008eaa:	f04f 0c0a 	mov.w	ip, #10
 8008eae:	461f      	mov	r7, r3
 8008eb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008eb2:	1c5e      	adds	r6, r3, #1
 8008eb4:	9619      	str	r6, [sp, #100]	; 0x64
 8008eb6:	785b      	ldrb	r3, [r3, #1]
 8008eb8:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
 8008ebc:	f1b9 0f09 	cmp.w	r9, #9
 8008ec0:	f240 80ba 	bls.w	8009038 <_strtod_l+0x350>
 8008ec4:	1bf6      	subs	r6, r6, r7
 8008ec6:	2e08      	cmp	r6, #8
 8008ec8:	f644 691f 	movw	r9, #19999	; 0x4e1f
 8008ecc:	dc02      	bgt.n	8008ed4 <_strtod_l+0x1ec>
 8008ece:	45f1      	cmp	r9, lr
 8008ed0:	bfa8      	it	ge
 8008ed2:	46f1      	movge	r9, lr
 8008ed4:	9e07      	ldr	r6, [sp, #28]
 8008ed6:	b10e      	cbz	r6, 8008edc <_strtod_l+0x1f4>
 8008ed8:	f1c9 0900 	rsb	r9, r9, #0
 8008edc:	2d00      	cmp	r5, #0
 8008ede:	f040 80d7 	bne.w	8009090 <_strtod_l+0x3a8>
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	f47f af40 	bne.w	8008d68 <_strtod_l+0x80>
 8008ee8:	9a08      	ldr	r2, [sp, #32]
 8008eea:	2a00      	cmp	r2, #0
 8008eec:	f47f af3c 	bne.w	8008d68 <_strtod_l+0x80>
 8008ef0:	2900      	cmp	r1, #0
 8008ef2:	f47f af57 	bne.w	8008da4 <_strtod_l+0xbc>
 8008ef6:	2b4e      	cmp	r3, #78	; 0x4e
 8008ef8:	f000 80ad 	beq.w	8009056 <_strtod_l+0x36e>
 8008efc:	f300 80a5 	bgt.w	800904a <_strtod_l+0x362>
 8008f00:	2b49      	cmp	r3, #73	; 0x49
 8008f02:	f47f af4f 	bne.w	8008da4 <_strtod_l+0xbc>
 8008f06:	493c      	ldr	r1, [pc, #240]	; (8008ff8 <_strtod_l+0x310>)
 8008f08:	a819      	add	r0, sp, #100	; 0x64
 8008f0a:	f001 fc8a 	bl	800a822 <__match>
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	f43f af48 	beq.w	8008da4 <_strtod_l+0xbc>
 8008f14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f16:	4939      	ldr	r1, [pc, #228]	; (8008ffc <_strtod_l+0x314>)
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	a819      	add	r0, sp, #100	; 0x64
 8008f1c:	9319      	str	r3, [sp, #100]	; 0x64
 8008f1e:	f001 fc80 	bl	800a822 <__match>
 8008f22:	b910      	cbnz	r0, 8008f2a <_strtod_l+0x242>
 8008f24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f26:	3301      	adds	r3, #1
 8008f28:	9319      	str	r3, [sp, #100]	; 0x64
 8008f2a:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8009000 <_strtod_l+0x318>
 8008f2e:	f04f 0a00 	mov.w	sl, #0
 8008f32:	e719      	b.n	8008d68 <_strtod_l+0x80>
 8008f34:	2300      	movs	r3, #0
 8008f36:	e776      	b.n	8008e26 <_strtod_l+0x13e>
 8008f38:	9904      	ldr	r1, [sp, #16]
 8008f3a:	3001      	adds	r0, #1
 8008f3c:	2908      	cmp	r1, #8
 8008f3e:	bfd5      	itete	le
 8008f40:	9906      	ldrle	r1, [sp, #24]
 8008f42:	9905      	ldrgt	r1, [sp, #20]
 8008f44:	fb02 3301 	mlale	r3, r2, r1, r3
 8008f48:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008f4c:	bfd4      	ite	le
 8008f4e:	9306      	strle	r3, [sp, #24]
 8008f50:	9305      	strgt	r3, [sp, #20]
 8008f52:	9b04      	ldr	r3, [sp, #16]
 8008f54:	9019      	str	r0, [sp, #100]	; 0x64
 8008f56:	3301      	adds	r3, #1
 8008f58:	9304      	str	r3, [sp, #16]
 8008f5a:	e76c      	b.n	8008e36 <_strtod_l+0x14e>
 8008f5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f5e:	195a      	adds	r2, r3, r5
 8008f60:	9219      	str	r2, [sp, #100]	; 0x64
 8008f62:	9a04      	ldr	r2, [sp, #16]
 8008f64:	5d5b      	ldrb	r3, [r3, r5]
 8008f66:	2a00      	cmp	r2, #0
 8008f68:	d154      	bne.n	8009014 <_strtod_l+0x32c>
 8008f6a:	4610      	mov	r0, r2
 8008f6c:	2b30      	cmp	r3, #48	; 0x30
 8008f6e:	d02a      	beq.n	8008fc6 <_strtod_l+0x2de>
 8008f70:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008f74:	2a08      	cmp	r2, #8
 8008f76:	f200 849d 	bhi.w	80098b4 <_strtod_l+0xbcc>
 8008f7a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f7c:	920a      	str	r2, [sp, #40]	; 0x28
 8008f7e:	4602      	mov	r2, r0
 8008f80:	2000      	movs	r0, #0
 8008f82:	4605      	mov	r5, r0
 8008f84:	3b30      	subs	r3, #48	; 0x30
 8008f86:	f100 0101 	add.w	r1, r0, #1
 8008f8a:	d011      	beq.n	8008fb0 <_strtod_l+0x2c8>
 8008f8c:	440a      	add	r2, r1
 8008f8e:	260a      	movs	r6, #10
 8008f90:	4629      	mov	r1, r5
 8008f92:	eb00 0c05 	add.w	ip, r0, r5
 8008f96:	4561      	cmp	r1, ip
 8008f98:	d11b      	bne.n	8008fd2 <_strtod_l+0x2ea>
 8008f9a:	4428      	add	r0, r5
 8008f9c:	2808      	cmp	r0, #8
 8008f9e:	f100 0501 	add.w	r5, r0, #1
 8008fa2:	dc2f      	bgt.n	8009004 <_strtod_l+0x31c>
 8008fa4:	210a      	movs	r1, #10
 8008fa6:	9806      	ldr	r0, [sp, #24]
 8008fa8:	fb01 3300 	mla	r3, r1, r0, r3
 8008fac:	9306      	str	r3, [sp, #24]
 8008fae:	2100      	movs	r1, #0
 8008fb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008fb2:	1c58      	adds	r0, r3, #1
 8008fb4:	9019      	str	r0, [sp, #100]	; 0x64
 8008fb6:	4608      	mov	r0, r1
 8008fb8:	785b      	ldrb	r3, [r3, #1]
 8008fba:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008fbe:	2909      	cmp	r1, #9
 8008fc0:	d9e0      	bls.n	8008f84 <_strtod_l+0x29c>
 8008fc2:	2101      	movs	r1, #1
 8008fc4:	e74a      	b.n	8008e5c <_strtod_l+0x174>
 8008fc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008fc8:	3001      	adds	r0, #1
 8008fca:	1c5a      	adds	r2, r3, #1
 8008fcc:	9219      	str	r2, [sp, #100]	; 0x64
 8008fce:	785b      	ldrb	r3, [r3, #1]
 8008fd0:	e7cc      	b.n	8008f6c <_strtod_l+0x284>
 8008fd2:	3101      	adds	r1, #1
 8008fd4:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8008fd8:	f1be 0f08 	cmp.w	lr, #8
 8008fdc:	dc03      	bgt.n	8008fe6 <_strtod_l+0x2fe>
 8008fde:	9f06      	ldr	r7, [sp, #24]
 8008fe0:	4377      	muls	r7, r6
 8008fe2:	9706      	str	r7, [sp, #24]
 8008fe4:	e7d7      	b.n	8008f96 <_strtod_l+0x2ae>
 8008fe6:	2910      	cmp	r1, #16
 8008fe8:	bfde      	ittt	le
 8008fea:	9f05      	ldrle	r7, [sp, #20]
 8008fec:	4377      	mulle	r7, r6
 8008fee:	9705      	strle	r7, [sp, #20]
 8008ff0:	e7d1      	b.n	8008f96 <_strtod_l+0x2ae>
 8008ff2:	bf00      	nop
 8008ff4:	0800b1ec 	.word	0x0800b1ec
 8008ff8:	0800b05d 	.word	0x0800b05d
 8008ffc:	0800b0d7 	.word	0x0800b0d7
 8009000:	7ff00000 	.word	0x7ff00000
 8009004:	2d10      	cmp	r5, #16
 8009006:	bfdf      	itttt	le
 8009008:	210a      	movle	r1, #10
 800900a:	9805      	ldrle	r0, [sp, #20]
 800900c:	fb01 3300 	mlale	r3, r1, r0, r3
 8009010:	9305      	strle	r3, [sp, #20]
 8009012:	e7cc      	b.n	8008fae <_strtod_l+0x2c6>
 8009014:	4602      	mov	r2, r0
 8009016:	9d04      	ldr	r5, [sp, #16]
 8009018:	e7cf      	b.n	8008fba <_strtod_l+0x2d2>
 800901a:	2101      	movs	r1, #1
 800901c:	e724      	b.n	8008e68 <_strtod_l+0x180>
 800901e:	2300      	movs	r3, #0
 8009020:	9307      	str	r3, [sp, #28]
 8009022:	1ca3      	adds	r3, r4, #2
 8009024:	9319      	str	r3, [sp, #100]	; 0x64
 8009026:	78a3      	ldrb	r3, [r4, #2]
 8009028:	e72f      	b.n	8008e8a <_strtod_l+0x1a2>
 800902a:	2301      	movs	r3, #1
 800902c:	e7f8      	b.n	8009020 <_strtod_l+0x338>
 800902e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009030:	1c5e      	adds	r6, r3, #1
 8009032:	9619      	str	r6, [sp, #100]	; 0x64
 8009034:	785b      	ldrb	r3, [r3, #1]
 8009036:	e72d      	b.n	8008e94 <_strtod_l+0x1ac>
 8009038:	fb0c 3e0e 	mla	lr, ip, lr, r3
 800903c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009040:	e736      	b.n	8008eb0 <_strtod_l+0x1c8>
 8009042:	9419      	str	r4, [sp, #100]	; 0x64
 8009044:	f04f 0900 	mov.w	r9, #0
 8009048:	e748      	b.n	8008edc <_strtod_l+0x1f4>
 800904a:	2b69      	cmp	r3, #105	; 0x69
 800904c:	f43f af5b 	beq.w	8008f06 <_strtod_l+0x21e>
 8009050:	2b6e      	cmp	r3, #110	; 0x6e
 8009052:	f47f aea7 	bne.w	8008da4 <_strtod_l+0xbc>
 8009056:	498c      	ldr	r1, [pc, #560]	; (8009288 <_strtod_l+0x5a0>)
 8009058:	a819      	add	r0, sp, #100	; 0x64
 800905a:	f001 fbe2 	bl	800a822 <__match>
 800905e:	2800      	cmp	r0, #0
 8009060:	f43f aea0 	beq.w	8008da4 <_strtod_l+0xbc>
 8009064:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	2b28      	cmp	r3, #40	; 0x28
 800906a:	d10e      	bne.n	800908a <_strtod_l+0x3a2>
 800906c:	aa1c      	add	r2, sp, #112	; 0x70
 800906e:	4987      	ldr	r1, [pc, #540]	; (800928c <_strtod_l+0x5a4>)
 8009070:	a819      	add	r0, sp, #100	; 0x64
 8009072:	f001 fbe9 	bl	800a848 <__hexnan>
 8009076:	2805      	cmp	r0, #5
 8009078:	d107      	bne.n	800908a <_strtod_l+0x3a2>
 800907a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800907c:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8009080:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009084:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009088:	e66e      	b.n	8008d68 <_strtod_l+0x80>
 800908a:	f8df b210 	ldr.w	fp, [pc, #528]	; 800929c <_strtod_l+0x5b4>
 800908e:	e74e      	b.n	8008f2e <_strtod_l+0x246>
 8009090:	9b04      	ldr	r3, [sp, #16]
 8009092:	462c      	mov	r4, r5
 8009094:	2b00      	cmp	r3, #0
 8009096:	bf08      	it	eq
 8009098:	462b      	moveq	r3, r5
 800909a:	2d10      	cmp	r5, #16
 800909c:	bfa8      	it	ge
 800909e:	2410      	movge	r4, #16
 80090a0:	9806      	ldr	r0, [sp, #24]
 80090a2:	eba9 0902 	sub.w	r9, r9, r2
 80090a6:	9304      	str	r3, [sp, #16]
 80090a8:	f7f7 f9a6 	bl	80003f8 <__aeabi_ui2d>
 80090ac:	2c09      	cmp	r4, #9
 80090ae:	4682      	mov	sl, r0
 80090b0:	468b      	mov	fp, r1
 80090b2:	dd13      	ble.n	80090dc <_strtod_l+0x3f4>
 80090b4:	4b76      	ldr	r3, [pc, #472]	; (8009290 <_strtod_l+0x5a8>)
 80090b6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80090ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80090be:	f7f7 fa11 	bl	80004e4 <__aeabi_dmul>
 80090c2:	4606      	mov	r6, r0
 80090c4:	9805      	ldr	r0, [sp, #20]
 80090c6:	460f      	mov	r7, r1
 80090c8:	f7f7 f996 	bl	80003f8 <__aeabi_ui2d>
 80090cc:	4602      	mov	r2, r0
 80090ce:	460b      	mov	r3, r1
 80090d0:	4630      	mov	r0, r6
 80090d2:	4639      	mov	r1, r7
 80090d4:	f7f7 f854 	bl	8000180 <__adddf3>
 80090d8:	4682      	mov	sl, r0
 80090da:	468b      	mov	fp, r1
 80090dc:	2d0f      	cmp	r5, #15
 80090de:	dc36      	bgt.n	800914e <_strtod_l+0x466>
 80090e0:	f1b9 0f00 	cmp.w	r9, #0
 80090e4:	f43f ae40 	beq.w	8008d68 <_strtod_l+0x80>
 80090e8:	dd24      	ble.n	8009134 <_strtod_l+0x44c>
 80090ea:	f1b9 0f16 	cmp.w	r9, #22
 80090ee:	dc0b      	bgt.n	8009108 <_strtod_l+0x420>
 80090f0:	4652      	mov	r2, sl
 80090f2:	465b      	mov	r3, fp
 80090f4:	4d66      	ldr	r5, [pc, #408]	; (8009290 <_strtod_l+0x5a8>)
 80090f6:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 80090fa:	e9d9 0100 	ldrd	r0, r1, [r9]
 80090fe:	f7f7 f9f1 	bl	80004e4 <__aeabi_dmul>
 8009102:	4682      	mov	sl, r0
 8009104:	468b      	mov	fp, r1
 8009106:	e62f      	b.n	8008d68 <_strtod_l+0x80>
 8009108:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800910c:	4599      	cmp	r9, r3
 800910e:	dc1e      	bgt.n	800914e <_strtod_l+0x466>
 8009110:	4c5f      	ldr	r4, [pc, #380]	; (8009290 <_strtod_l+0x5a8>)
 8009112:	f1c5 050f 	rsb	r5, r5, #15
 8009116:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800911a:	eba9 0505 	sub.w	r5, r9, r5
 800911e:	4652      	mov	r2, sl
 8009120:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009124:	465b      	mov	r3, fp
 8009126:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800912a:	f7f7 f9db 	bl	80004e4 <__aeabi_dmul>
 800912e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009132:	e7e4      	b.n	80090fe <_strtod_l+0x416>
 8009134:	f119 0f16 	cmn.w	r9, #22
 8009138:	db09      	blt.n	800914e <_strtod_l+0x466>
 800913a:	4d55      	ldr	r5, [pc, #340]	; (8009290 <_strtod_l+0x5a8>)
 800913c:	4650      	mov	r0, sl
 800913e:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
 8009142:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009146:	4659      	mov	r1, fp
 8009148:	f7f7 faf6 	bl	8000738 <__aeabi_ddiv>
 800914c:	e7d9      	b.n	8009102 <_strtod_l+0x41a>
 800914e:	1b2c      	subs	r4, r5, r4
 8009150:	444c      	add	r4, r9
 8009152:	2c00      	cmp	r4, #0
 8009154:	dd73      	ble.n	800923e <_strtod_l+0x556>
 8009156:	f014 030f 	ands.w	r3, r4, #15
 800915a:	d00a      	beq.n	8009172 <_strtod_l+0x48a>
 800915c:	494c      	ldr	r1, [pc, #304]	; (8009290 <_strtod_l+0x5a8>)
 800915e:	4652      	mov	r2, sl
 8009160:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009164:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009168:	465b      	mov	r3, fp
 800916a:	f7f7 f9bb 	bl	80004e4 <__aeabi_dmul>
 800916e:	4682      	mov	sl, r0
 8009170:	468b      	mov	fp, r1
 8009172:	f034 040f 	bics.w	r4, r4, #15
 8009176:	d054      	beq.n	8009222 <_strtod_l+0x53a>
 8009178:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 800917c:	dd27      	ble.n	80091ce <_strtod_l+0x4e6>
 800917e:	f04f 0900 	mov.w	r9, #0
 8009182:	f8cd 9010 	str.w	r9, [sp, #16]
 8009186:	f8cd 901c 	str.w	r9, [sp, #28]
 800918a:	f8cd 9018 	str.w	r9, [sp, #24]
 800918e:	2322      	movs	r3, #34	; 0x22
 8009190:	f04f 0a00 	mov.w	sl, #0
 8009194:	f8df b108 	ldr.w	fp, [pc, #264]	; 80092a0 <_strtod_l+0x5b8>
 8009198:	f8c8 3000 	str.w	r3, [r8]
 800919c:	9b07      	ldr	r3, [sp, #28]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	f43f ade2 	beq.w	8008d68 <_strtod_l+0x80>
 80091a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80091a6:	4640      	mov	r0, r8
 80091a8:	f7ff f984 	bl	80084b4 <_Bfree>
 80091ac:	9906      	ldr	r1, [sp, #24]
 80091ae:	4640      	mov	r0, r8
 80091b0:	f7ff f980 	bl	80084b4 <_Bfree>
 80091b4:	9904      	ldr	r1, [sp, #16]
 80091b6:	4640      	mov	r0, r8
 80091b8:	f7ff f97c 	bl	80084b4 <_Bfree>
 80091bc:	9907      	ldr	r1, [sp, #28]
 80091be:	4640      	mov	r0, r8
 80091c0:	f7ff f978 	bl	80084b4 <_Bfree>
 80091c4:	4649      	mov	r1, r9
 80091c6:	4640      	mov	r0, r8
 80091c8:	f7ff f974 	bl	80084b4 <_Bfree>
 80091cc:	e5cc      	b.n	8008d68 <_strtod_l+0x80>
 80091ce:	2300      	movs	r3, #0
 80091d0:	4650      	mov	r0, sl
 80091d2:	4659      	mov	r1, fp
 80091d4:	461f      	mov	r7, r3
 80091d6:	4e2f      	ldr	r6, [pc, #188]	; (8009294 <_strtod_l+0x5ac>)
 80091d8:	1124      	asrs	r4, r4, #4
 80091da:	2c01      	cmp	r4, #1
 80091dc:	dc24      	bgt.n	8009228 <_strtod_l+0x540>
 80091de:	b10b      	cbz	r3, 80091e4 <_strtod_l+0x4fc>
 80091e0:	4682      	mov	sl, r0
 80091e2:	468b      	mov	fp, r1
 80091e4:	4b2b      	ldr	r3, [pc, #172]	; (8009294 <_strtod_l+0x5ac>)
 80091e6:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80091ea:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80091ee:	4652      	mov	r2, sl
 80091f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091f4:	465b      	mov	r3, fp
 80091f6:	f7f7 f975 	bl	80004e4 <__aeabi_dmul>
 80091fa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80091fe:	468b      	mov	fp, r1
 8009200:	460a      	mov	r2, r1
 8009202:	0d1b      	lsrs	r3, r3, #20
 8009204:	4924      	ldr	r1, [pc, #144]	; (8009298 <_strtod_l+0x5b0>)
 8009206:	051b      	lsls	r3, r3, #20
 8009208:	428b      	cmp	r3, r1
 800920a:	4682      	mov	sl, r0
 800920c:	d8b7      	bhi.n	800917e <_strtod_l+0x496>
 800920e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009212:	428b      	cmp	r3, r1
 8009214:	bf86      	itte	hi
 8009216:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800921a:	f8df b088 	ldrhi.w	fp, [pc, #136]	; 80092a4 <_strtod_l+0x5bc>
 800921e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009222:	2300      	movs	r3, #0
 8009224:	9305      	str	r3, [sp, #20]
 8009226:	e070      	b.n	800930a <_strtod_l+0x622>
 8009228:	07e2      	lsls	r2, r4, #31
 800922a:	d504      	bpl.n	8009236 <_strtod_l+0x54e>
 800922c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009230:	f7f7 f958 	bl	80004e4 <__aeabi_dmul>
 8009234:	2301      	movs	r3, #1
 8009236:	3701      	adds	r7, #1
 8009238:	1064      	asrs	r4, r4, #1
 800923a:	3608      	adds	r6, #8
 800923c:	e7cd      	b.n	80091da <_strtod_l+0x4f2>
 800923e:	d0f0      	beq.n	8009222 <_strtod_l+0x53a>
 8009240:	4264      	negs	r4, r4
 8009242:	f014 020f 	ands.w	r2, r4, #15
 8009246:	d00a      	beq.n	800925e <_strtod_l+0x576>
 8009248:	4b11      	ldr	r3, [pc, #68]	; (8009290 <_strtod_l+0x5a8>)
 800924a:	4650      	mov	r0, sl
 800924c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009250:	4659      	mov	r1, fp
 8009252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009256:	f7f7 fa6f 	bl	8000738 <__aeabi_ddiv>
 800925a:	4682      	mov	sl, r0
 800925c:	468b      	mov	fp, r1
 800925e:	1124      	asrs	r4, r4, #4
 8009260:	d0df      	beq.n	8009222 <_strtod_l+0x53a>
 8009262:	2c1f      	cmp	r4, #31
 8009264:	dd20      	ble.n	80092a8 <_strtod_l+0x5c0>
 8009266:	f04f 0900 	mov.w	r9, #0
 800926a:	f8cd 9010 	str.w	r9, [sp, #16]
 800926e:	f8cd 901c 	str.w	r9, [sp, #28]
 8009272:	f8cd 9018 	str.w	r9, [sp, #24]
 8009276:	2322      	movs	r3, #34	; 0x22
 8009278:	f04f 0a00 	mov.w	sl, #0
 800927c:	f04f 0b00 	mov.w	fp, #0
 8009280:	f8c8 3000 	str.w	r3, [r8]
 8009284:	e78a      	b.n	800919c <_strtod_l+0x4b4>
 8009286:	bf00      	nop
 8009288:	0800b065 	.word	0x0800b065
 800928c:	0800b200 	.word	0x0800b200
 8009290:	0800b118 	.word	0x0800b118
 8009294:	0800b0f0 	.word	0x0800b0f0
 8009298:	7ca00000 	.word	0x7ca00000
 800929c:	fff80000 	.word	0xfff80000
 80092a0:	7ff00000 	.word	0x7ff00000
 80092a4:	7fefffff 	.word	0x7fefffff
 80092a8:	f014 0310 	ands.w	r3, r4, #16
 80092ac:	bf18      	it	ne
 80092ae:	236a      	movne	r3, #106	; 0x6a
 80092b0:	4650      	mov	r0, sl
 80092b2:	9305      	str	r3, [sp, #20]
 80092b4:	4659      	mov	r1, fp
 80092b6:	2300      	movs	r3, #0
 80092b8:	4e9f      	ldr	r6, [pc, #636]	; (8009538 <_strtod_l+0x850>)
 80092ba:	2c00      	cmp	r4, #0
 80092bc:	f300 8109 	bgt.w	80094d2 <_strtod_l+0x7ea>
 80092c0:	b10b      	cbz	r3, 80092c6 <_strtod_l+0x5de>
 80092c2:	4682      	mov	sl, r0
 80092c4:	468b      	mov	fp, r1
 80092c6:	9b05      	ldr	r3, [sp, #20]
 80092c8:	b1bb      	cbz	r3, 80092fa <_strtod_l+0x612>
 80092ca:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80092ce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	4659      	mov	r1, fp
 80092d6:	dd10      	ble.n	80092fa <_strtod_l+0x612>
 80092d8:	2b1f      	cmp	r3, #31
 80092da:	f340 8104 	ble.w	80094e6 <_strtod_l+0x7fe>
 80092de:	2b34      	cmp	r3, #52	; 0x34
 80092e0:	bfd8      	it	le
 80092e2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80092e6:	f04f 0a00 	mov.w	sl, #0
 80092ea:	bfcf      	iteee	gt
 80092ec:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80092f0:	3b20      	suble	r3, #32
 80092f2:	fa02 f303 	lslle.w	r3, r2, r3
 80092f6:	ea03 0b01 	andle.w	fp, r3, r1
 80092fa:	2200      	movs	r2, #0
 80092fc:	2300      	movs	r3, #0
 80092fe:	4650      	mov	r0, sl
 8009300:	4659      	mov	r1, fp
 8009302:	f7f7 fb57 	bl	80009b4 <__aeabi_dcmpeq>
 8009306:	2800      	cmp	r0, #0
 8009308:	d1ad      	bne.n	8009266 <_strtod_l+0x57e>
 800930a:	9b06      	ldr	r3, [sp, #24]
 800930c:	9a04      	ldr	r2, [sp, #16]
 800930e:	9300      	str	r3, [sp, #0]
 8009310:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009312:	462b      	mov	r3, r5
 8009314:	4640      	mov	r0, r8
 8009316:	f7ff f91f 	bl	8008558 <__s2b>
 800931a:	9007      	str	r0, [sp, #28]
 800931c:	2800      	cmp	r0, #0
 800931e:	f43f af2e 	beq.w	800917e <_strtod_l+0x496>
 8009322:	f1b9 0f00 	cmp.w	r9, #0
 8009326:	f1c9 0300 	rsb	r3, r9, #0
 800932a:	bfa8      	it	ge
 800932c:	2300      	movge	r3, #0
 800932e:	930e      	str	r3, [sp, #56]	; 0x38
 8009330:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
 8009334:	f04f 0900 	mov.w	r9, #0
 8009338:	930f      	str	r3, [sp, #60]	; 0x3c
 800933a:	f8cd 9010 	str.w	r9, [sp, #16]
 800933e:	9b07      	ldr	r3, [sp, #28]
 8009340:	4640      	mov	r0, r8
 8009342:	6859      	ldr	r1, [r3, #4]
 8009344:	f7ff f882 	bl	800844c <_Balloc>
 8009348:	9006      	str	r0, [sp, #24]
 800934a:	2800      	cmp	r0, #0
 800934c:	f43f af1f 	beq.w	800918e <_strtod_l+0x4a6>
 8009350:	9b07      	ldr	r3, [sp, #28]
 8009352:	300c      	adds	r0, #12
 8009354:	691a      	ldr	r2, [r3, #16]
 8009356:	f103 010c 	add.w	r1, r3, #12
 800935a:	3202      	adds	r2, #2
 800935c:	0092      	lsls	r2, r2, #2
 800935e:	f7fc f9c9 	bl	80056f4 <memcpy>
 8009362:	ab1c      	add	r3, sp, #112	; 0x70
 8009364:	9301      	str	r3, [sp, #4]
 8009366:	ab1b      	add	r3, sp, #108	; 0x6c
 8009368:	9300      	str	r3, [sp, #0]
 800936a:	4652      	mov	r2, sl
 800936c:	465b      	mov	r3, fp
 800936e:	4640      	mov	r0, r8
 8009370:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009374:	f7ff fba0 	bl	8008ab8 <__d2b>
 8009378:	901a      	str	r0, [sp, #104]	; 0x68
 800937a:	2800      	cmp	r0, #0
 800937c:	f43f af07 	beq.w	800918e <_strtod_l+0x4a6>
 8009380:	2101      	movs	r1, #1
 8009382:	4640      	mov	r0, r8
 8009384:	f7ff f974 	bl	8008670 <__i2b>
 8009388:	9004      	str	r0, [sp, #16]
 800938a:	4603      	mov	r3, r0
 800938c:	2800      	cmp	r0, #0
 800938e:	f43f aefe 	beq.w	800918e <_strtod_l+0x4a6>
 8009392:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009394:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009396:	2d00      	cmp	r5, #0
 8009398:	bfab      	itete	ge
 800939a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800939c:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
 800939e:	195e      	addge	r6, r3, r5
 80093a0:	1b5c      	sublt	r4, r3, r5
 80093a2:	9b05      	ldr	r3, [sp, #20]
 80093a4:	bfa8      	it	ge
 80093a6:	9c0f      	ldrge	r4, [sp, #60]	; 0x3c
 80093a8:	eba5 0503 	sub.w	r5, r5, r3
 80093ac:	4415      	add	r5, r2
 80093ae:	4b63      	ldr	r3, [pc, #396]	; (800953c <_strtod_l+0x854>)
 80093b0:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80093b4:	bfb8      	it	lt
 80093b6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80093b8:	429d      	cmp	r5, r3
 80093ba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80093be:	f280 80a4 	bge.w	800950a <_strtod_l+0x822>
 80093c2:	1b5b      	subs	r3, r3, r5
 80093c4:	2b1f      	cmp	r3, #31
 80093c6:	eba2 0203 	sub.w	r2, r2, r3
 80093ca:	f04f 0701 	mov.w	r7, #1
 80093ce:	f300 8091 	bgt.w	80094f4 <_strtod_l+0x80c>
 80093d2:	2500      	movs	r5, #0
 80093d4:	fa07 f303 	lsl.w	r3, r7, r3
 80093d8:	9314      	str	r3, [sp, #80]	; 0x50
 80093da:	18b7      	adds	r7, r6, r2
 80093dc:	9b05      	ldr	r3, [sp, #20]
 80093de:	42be      	cmp	r6, r7
 80093e0:	4414      	add	r4, r2
 80093e2:	441c      	add	r4, r3
 80093e4:	4633      	mov	r3, r6
 80093e6:	bfa8      	it	ge
 80093e8:	463b      	movge	r3, r7
 80093ea:	42a3      	cmp	r3, r4
 80093ec:	bfa8      	it	ge
 80093ee:	4623      	movge	r3, r4
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	bfc2      	ittt	gt
 80093f4:	1aff      	subgt	r7, r7, r3
 80093f6:	1ae4      	subgt	r4, r4, r3
 80093f8:	1af6      	subgt	r6, r6, r3
 80093fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093fc:	b1bb      	cbz	r3, 800942e <_strtod_l+0x746>
 80093fe:	461a      	mov	r2, r3
 8009400:	9904      	ldr	r1, [sp, #16]
 8009402:	4640      	mov	r0, r8
 8009404:	f7ff f9ca 	bl	800879c <__pow5mult>
 8009408:	9004      	str	r0, [sp, #16]
 800940a:	2800      	cmp	r0, #0
 800940c:	f43f aebf 	beq.w	800918e <_strtod_l+0x4a6>
 8009410:	4601      	mov	r1, r0
 8009412:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009414:	4640      	mov	r0, r8
 8009416:	f7ff f934 	bl	8008682 <__multiply>
 800941a:	9008      	str	r0, [sp, #32]
 800941c:	2800      	cmp	r0, #0
 800941e:	f43f aeb6 	beq.w	800918e <_strtod_l+0x4a6>
 8009422:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009424:	4640      	mov	r0, r8
 8009426:	f7ff f845 	bl	80084b4 <_Bfree>
 800942a:	9b08      	ldr	r3, [sp, #32]
 800942c:	931a      	str	r3, [sp, #104]	; 0x68
 800942e:	2f00      	cmp	r7, #0
 8009430:	dc6f      	bgt.n	8009512 <_strtod_l+0x82a>
 8009432:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009434:	2b00      	cmp	r3, #0
 8009436:	d175      	bne.n	8009524 <_strtod_l+0x83c>
 8009438:	2c00      	cmp	r4, #0
 800943a:	dd08      	ble.n	800944e <_strtod_l+0x766>
 800943c:	4622      	mov	r2, r4
 800943e:	9906      	ldr	r1, [sp, #24]
 8009440:	4640      	mov	r0, r8
 8009442:	f7ff f9f9 	bl	8008838 <__lshift>
 8009446:	9006      	str	r0, [sp, #24]
 8009448:	2800      	cmp	r0, #0
 800944a:	f43f aea0 	beq.w	800918e <_strtod_l+0x4a6>
 800944e:	2e00      	cmp	r6, #0
 8009450:	dd08      	ble.n	8009464 <_strtod_l+0x77c>
 8009452:	4632      	mov	r2, r6
 8009454:	9904      	ldr	r1, [sp, #16]
 8009456:	4640      	mov	r0, r8
 8009458:	f7ff f9ee 	bl	8008838 <__lshift>
 800945c:	9004      	str	r0, [sp, #16]
 800945e:	2800      	cmp	r0, #0
 8009460:	f43f ae95 	beq.w	800918e <_strtod_l+0x4a6>
 8009464:	9a06      	ldr	r2, [sp, #24]
 8009466:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009468:	4640      	mov	r0, r8
 800946a:	f7ff fa50 	bl	800890e <__mdiff>
 800946e:	4681      	mov	r9, r0
 8009470:	2800      	cmp	r0, #0
 8009472:	f43f ae8c 	beq.w	800918e <_strtod_l+0x4a6>
 8009476:	2400      	movs	r4, #0
 8009478:	68c3      	ldr	r3, [r0, #12]
 800947a:	9904      	ldr	r1, [sp, #16]
 800947c:	60c4      	str	r4, [r0, #12]
 800947e:	9308      	str	r3, [sp, #32]
 8009480:	f7ff fa2b 	bl	80088da <__mcmp>
 8009484:	42a0      	cmp	r0, r4
 8009486:	da5b      	bge.n	8009540 <_strtod_l+0x858>
 8009488:	9b08      	ldr	r3, [sp, #32]
 800948a:	b9f3      	cbnz	r3, 80094ca <_strtod_l+0x7e2>
 800948c:	f1ba 0f00 	cmp.w	sl, #0
 8009490:	d11b      	bne.n	80094ca <_strtod_l+0x7e2>
 8009492:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009496:	b9c3      	cbnz	r3, 80094ca <_strtod_l+0x7e2>
 8009498:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800949c:	0d1b      	lsrs	r3, r3, #20
 800949e:	051b      	lsls	r3, r3, #20
 80094a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80094a4:	d911      	bls.n	80094ca <_strtod_l+0x7e2>
 80094a6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80094aa:	b91b      	cbnz	r3, 80094b4 <_strtod_l+0x7cc>
 80094ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	dd0a      	ble.n	80094ca <_strtod_l+0x7e2>
 80094b4:	4649      	mov	r1, r9
 80094b6:	2201      	movs	r2, #1
 80094b8:	4640      	mov	r0, r8
 80094ba:	f7ff f9bd 	bl	8008838 <__lshift>
 80094be:	9904      	ldr	r1, [sp, #16]
 80094c0:	4681      	mov	r9, r0
 80094c2:	f7ff fa0a 	bl	80088da <__mcmp>
 80094c6:	2800      	cmp	r0, #0
 80094c8:	dc6b      	bgt.n	80095a2 <_strtod_l+0x8ba>
 80094ca:	9b05      	ldr	r3, [sp, #20]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d175      	bne.n	80095bc <_strtod_l+0x8d4>
 80094d0:	e668      	b.n	80091a4 <_strtod_l+0x4bc>
 80094d2:	07e2      	lsls	r2, r4, #31
 80094d4:	d504      	bpl.n	80094e0 <_strtod_l+0x7f8>
 80094d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80094da:	f7f7 f803 	bl	80004e4 <__aeabi_dmul>
 80094de:	2301      	movs	r3, #1
 80094e0:	1064      	asrs	r4, r4, #1
 80094e2:	3608      	adds	r6, #8
 80094e4:	e6e9      	b.n	80092ba <_strtod_l+0x5d2>
 80094e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094ea:	fa02 f303 	lsl.w	r3, r2, r3
 80094ee:	ea03 0a0a 	and.w	sl, r3, sl
 80094f2:	e702      	b.n	80092fa <_strtod_l+0x612>
 80094f4:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80094f8:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80094fc:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009500:	35e2      	adds	r5, #226	; 0xe2
 8009502:	fa07 f505 	lsl.w	r5, r7, r5
 8009506:	9714      	str	r7, [sp, #80]	; 0x50
 8009508:	e767      	b.n	80093da <_strtod_l+0x6f2>
 800950a:	2301      	movs	r3, #1
 800950c:	2500      	movs	r5, #0
 800950e:	9314      	str	r3, [sp, #80]	; 0x50
 8009510:	e763      	b.n	80093da <_strtod_l+0x6f2>
 8009512:	463a      	mov	r2, r7
 8009514:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009516:	4640      	mov	r0, r8
 8009518:	f7ff f98e 	bl	8008838 <__lshift>
 800951c:	901a      	str	r0, [sp, #104]	; 0x68
 800951e:	2800      	cmp	r0, #0
 8009520:	d187      	bne.n	8009432 <_strtod_l+0x74a>
 8009522:	e634      	b.n	800918e <_strtod_l+0x4a6>
 8009524:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009526:	9906      	ldr	r1, [sp, #24]
 8009528:	4640      	mov	r0, r8
 800952a:	f7ff f937 	bl	800879c <__pow5mult>
 800952e:	9006      	str	r0, [sp, #24]
 8009530:	2800      	cmp	r0, #0
 8009532:	d181      	bne.n	8009438 <_strtod_l+0x750>
 8009534:	e62b      	b.n	800918e <_strtod_l+0x4a6>
 8009536:	bf00      	nop
 8009538:	0800b218 	.word	0x0800b218
 800953c:	fffffc02 	.word	0xfffffc02
 8009540:	f040 8086 	bne.w	8009650 <_strtod_l+0x968>
 8009544:	9a08      	ldr	r2, [sp, #32]
 8009546:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800954a:	b332      	cbz	r2, 800959a <_strtod_l+0x8b2>
 800954c:	4aac      	ldr	r2, [pc, #688]	; (8009800 <_strtod_l+0xb18>)
 800954e:	4659      	mov	r1, fp
 8009550:	4293      	cmp	r3, r2
 8009552:	d152      	bne.n	80095fa <_strtod_l+0x912>
 8009554:	9b05      	ldr	r3, [sp, #20]
 8009556:	4650      	mov	r0, sl
 8009558:	b1d3      	cbz	r3, 8009590 <_strtod_l+0x8a8>
 800955a:	4aaa      	ldr	r2, [pc, #680]	; (8009804 <_strtod_l+0xb1c>)
 800955c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009560:	400a      	ands	r2, r1
 8009562:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009566:	d816      	bhi.n	8009596 <_strtod_l+0x8ae>
 8009568:	0d12      	lsrs	r2, r2, #20
 800956a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800956e:	fa04 f303 	lsl.w	r3, r4, r3
 8009572:	4283      	cmp	r3, r0
 8009574:	d141      	bne.n	80095fa <_strtod_l+0x912>
 8009576:	4aa4      	ldr	r2, [pc, #656]	; (8009808 <_strtod_l+0xb20>)
 8009578:	4291      	cmp	r1, r2
 800957a:	d102      	bne.n	8009582 <_strtod_l+0x89a>
 800957c:	3301      	adds	r3, #1
 800957e:	f43f ae06 	beq.w	800918e <_strtod_l+0x4a6>
 8009582:	4ba0      	ldr	r3, [pc, #640]	; (8009804 <_strtod_l+0xb1c>)
 8009584:	f04f 0a00 	mov.w	sl, #0
 8009588:	400b      	ands	r3, r1
 800958a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800958e:	e79c      	b.n	80094ca <_strtod_l+0x7e2>
 8009590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009594:	e7ed      	b.n	8009572 <_strtod_l+0x88a>
 8009596:	4623      	mov	r3, r4
 8009598:	e7eb      	b.n	8009572 <_strtod_l+0x88a>
 800959a:	bb73      	cbnz	r3, 80095fa <_strtod_l+0x912>
 800959c:	f1ba 0f00 	cmp.w	sl, #0
 80095a0:	d12b      	bne.n	80095fa <_strtod_l+0x912>
 80095a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80095a6:	9a05      	ldr	r2, [sp, #20]
 80095a8:	0d1b      	lsrs	r3, r3, #20
 80095aa:	051b      	lsls	r3, r3, #20
 80095ac:	b1e2      	cbz	r2, 80095e8 <_strtod_l+0x900>
 80095ae:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80095b2:	dc19      	bgt.n	80095e8 <_strtod_l+0x900>
 80095b4:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 80095b8:	f77f ae5d 	ble.w	8009276 <_strtod_l+0x58e>
 80095bc:	4b93      	ldr	r3, [pc, #588]	; (800980c <_strtod_l+0xb24>)
 80095be:	4650      	mov	r0, sl
 80095c0:	930d      	str	r3, [sp, #52]	; 0x34
 80095c2:	2300      	movs	r3, #0
 80095c4:	930c      	str	r3, [sp, #48]	; 0x30
 80095c6:	4659      	mov	r1, fp
 80095c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80095cc:	f7f6 ff8a 	bl	80004e4 <__aeabi_dmul>
 80095d0:	4682      	mov	sl, r0
 80095d2:	468b      	mov	fp, r1
 80095d4:	2900      	cmp	r1, #0
 80095d6:	f47f ade5 	bne.w	80091a4 <_strtod_l+0x4bc>
 80095da:	2800      	cmp	r0, #0
 80095dc:	f47f ade2 	bne.w	80091a4 <_strtod_l+0x4bc>
 80095e0:	2322      	movs	r3, #34	; 0x22
 80095e2:	f8c8 3000 	str.w	r3, [r8]
 80095e6:	e5dd      	b.n	80091a4 <_strtod_l+0x4bc>
 80095e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80095ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80095f0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80095f4:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80095f8:	e767      	b.n	80094ca <_strtod_l+0x7e2>
 80095fa:	b19d      	cbz	r5, 8009624 <_strtod_l+0x93c>
 80095fc:	ea15 0f0b 	tst.w	r5, fp
 8009600:	f43f af63 	beq.w	80094ca <_strtod_l+0x7e2>
 8009604:	9b08      	ldr	r3, [sp, #32]
 8009606:	9a05      	ldr	r2, [sp, #20]
 8009608:	4650      	mov	r0, sl
 800960a:	4659      	mov	r1, fp
 800960c:	b173      	cbz	r3, 800962c <_strtod_l+0x944>
 800960e:	f7ff fb49 	bl	8008ca4 <sulp>
 8009612:	4602      	mov	r2, r0
 8009614:	460b      	mov	r3, r1
 8009616:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800961a:	f7f6 fdb1 	bl	8000180 <__adddf3>
 800961e:	4682      	mov	sl, r0
 8009620:	468b      	mov	fp, r1
 8009622:	e752      	b.n	80094ca <_strtod_l+0x7e2>
 8009624:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009626:	ea13 0f0a 	tst.w	r3, sl
 800962a:	e7e9      	b.n	8009600 <_strtod_l+0x918>
 800962c:	f7ff fb3a 	bl	8008ca4 <sulp>
 8009630:	4602      	mov	r2, r0
 8009632:	460b      	mov	r3, r1
 8009634:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009638:	f7f6 fda0 	bl	800017c <__aeabi_dsub>
 800963c:	2200      	movs	r2, #0
 800963e:	2300      	movs	r3, #0
 8009640:	4682      	mov	sl, r0
 8009642:	468b      	mov	fp, r1
 8009644:	f7f7 f9b6 	bl	80009b4 <__aeabi_dcmpeq>
 8009648:	2800      	cmp	r0, #0
 800964a:	f47f ae14 	bne.w	8009276 <_strtod_l+0x58e>
 800964e:	e73c      	b.n	80094ca <_strtod_l+0x7e2>
 8009650:	9904      	ldr	r1, [sp, #16]
 8009652:	4648      	mov	r0, r9
 8009654:	f7ff fa7f 	bl	8008b56 <__ratio>
 8009658:	2200      	movs	r2, #0
 800965a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800965e:	4606      	mov	r6, r0
 8009660:	460f      	mov	r7, r1
 8009662:	f7f7 f9bb 	bl	80009dc <__aeabi_dcmple>
 8009666:	2800      	cmp	r0, #0
 8009668:	d070      	beq.n	800974c <_strtod_l+0xa64>
 800966a:	9b08      	ldr	r3, [sp, #32]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d043      	beq.n	80096f8 <_strtod_l+0xa10>
 8009670:	2600      	movs	r6, #0
 8009672:	4f67      	ldr	r7, [pc, #412]	; (8009810 <_strtod_l+0xb28>)
 8009674:	4d66      	ldr	r5, [pc, #408]	; (8009810 <_strtod_l+0xb28>)
 8009676:	4b63      	ldr	r3, [pc, #396]	; (8009804 <_strtod_l+0xb1c>)
 8009678:	ea0b 0303 	and.w	r3, fp, r3
 800967c:	9314      	str	r3, [sp, #80]	; 0x50
 800967e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009680:	4b64      	ldr	r3, [pc, #400]	; (8009814 <_strtod_l+0xb2c>)
 8009682:	429a      	cmp	r2, r3
 8009684:	f040 80ce 	bne.w	8009824 <_strtod_l+0xb3c>
 8009688:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800968c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009690:	4650      	mov	r0, sl
 8009692:	4659      	mov	r1, fp
 8009694:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009698:	f7ff f998 	bl	80089cc <__ulp>
 800969c:	4602      	mov	r2, r0
 800969e:	460b      	mov	r3, r1
 80096a0:	4630      	mov	r0, r6
 80096a2:	4639      	mov	r1, r7
 80096a4:	f7f6 ff1e 	bl	80004e4 <__aeabi_dmul>
 80096a8:	4652      	mov	r2, sl
 80096aa:	465b      	mov	r3, fp
 80096ac:	f7f6 fd68 	bl	8000180 <__adddf3>
 80096b0:	4a54      	ldr	r2, [pc, #336]	; (8009804 <_strtod_l+0xb1c>)
 80096b2:	4b59      	ldr	r3, [pc, #356]	; (8009818 <_strtod_l+0xb30>)
 80096b4:	400a      	ands	r2, r1
 80096b6:	429a      	cmp	r2, r3
 80096b8:	4682      	mov	sl, r0
 80096ba:	d95d      	bls.n	8009778 <_strtod_l+0xa90>
 80096bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096be:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d103      	bne.n	80096ce <_strtod_l+0x9e6>
 80096c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096c8:	3301      	adds	r3, #1
 80096ca:	f43f ad60 	beq.w	800918e <_strtod_l+0x4a6>
 80096ce:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80096d2:	f8df b134 	ldr.w	fp, [pc, #308]	; 8009808 <_strtod_l+0xb20>
 80096d6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80096d8:	4640      	mov	r0, r8
 80096da:	f7fe feeb 	bl	80084b4 <_Bfree>
 80096de:	9906      	ldr	r1, [sp, #24]
 80096e0:	4640      	mov	r0, r8
 80096e2:	f7fe fee7 	bl	80084b4 <_Bfree>
 80096e6:	9904      	ldr	r1, [sp, #16]
 80096e8:	4640      	mov	r0, r8
 80096ea:	f7fe fee3 	bl	80084b4 <_Bfree>
 80096ee:	4649      	mov	r1, r9
 80096f0:	4640      	mov	r0, r8
 80096f2:	f7fe fedf 	bl	80084b4 <_Bfree>
 80096f6:	e622      	b.n	800933e <_strtod_l+0x656>
 80096f8:	f1ba 0f00 	cmp.w	sl, #0
 80096fc:	d118      	bne.n	8009730 <_strtod_l+0xa48>
 80096fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009702:	b9e3      	cbnz	r3, 800973e <_strtod_l+0xa56>
 8009704:	2200      	movs	r2, #0
 8009706:	4b42      	ldr	r3, [pc, #264]	; (8009810 <_strtod_l+0xb28>)
 8009708:	4630      	mov	r0, r6
 800970a:	4639      	mov	r1, r7
 800970c:	f7f7 f95c 	bl	80009c8 <__aeabi_dcmplt>
 8009710:	b9c8      	cbnz	r0, 8009746 <_strtod_l+0xa5e>
 8009712:	2200      	movs	r2, #0
 8009714:	4b41      	ldr	r3, [pc, #260]	; (800981c <_strtod_l+0xb34>)
 8009716:	4630      	mov	r0, r6
 8009718:	4639      	mov	r1, r7
 800971a:	f7f6 fee3 	bl	80004e4 <__aeabi_dmul>
 800971e:	4604      	mov	r4, r0
 8009720:	460d      	mov	r5, r1
 8009722:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009726:	9416      	str	r4, [sp, #88]	; 0x58
 8009728:	9317      	str	r3, [sp, #92]	; 0x5c
 800972a:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800972e:	e7a2      	b.n	8009676 <_strtod_l+0x98e>
 8009730:	f1ba 0f01 	cmp.w	sl, #1
 8009734:	d103      	bne.n	800973e <_strtod_l+0xa56>
 8009736:	f1bb 0f00 	cmp.w	fp, #0
 800973a:	f43f ad9c 	beq.w	8009276 <_strtod_l+0x58e>
 800973e:	2600      	movs	r6, #0
 8009740:	4f37      	ldr	r7, [pc, #220]	; (8009820 <_strtod_l+0xb38>)
 8009742:	2400      	movs	r4, #0
 8009744:	e796      	b.n	8009674 <_strtod_l+0x98c>
 8009746:	9c08      	ldr	r4, [sp, #32]
 8009748:	4d34      	ldr	r5, [pc, #208]	; (800981c <_strtod_l+0xb34>)
 800974a:	e7ea      	b.n	8009722 <_strtod_l+0xa3a>
 800974c:	4b33      	ldr	r3, [pc, #204]	; (800981c <_strtod_l+0xb34>)
 800974e:	2200      	movs	r2, #0
 8009750:	4630      	mov	r0, r6
 8009752:	4639      	mov	r1, r7
 8009754:	f7f6 fec6 	bl	80004e4 <__aeabi_dmul>
 8009758:	9b08      	ldr	r3, [sp, #32]
 800975a:	4604      	mov	r4, r0
 800975c:	460d      	mov	r5, r1
 800975e:	b933      	cbnz	r3, 800976e <_strtod_l+0xa86>
 8009760:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009764:	9010      	str	r0, [sp, #64]	; 0x40
 8009766:	9311      	str	r3, [sp, #68]	; 0x44
 8009768:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800976c:	e783      	b.n	8009676 <_strtod_l+0x98e>
 800976e:	4602      	mov	r2, r0
 8009770:	460b      	mov	r3, r1
 8009772:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009776:	e7f7      	b.n	8009768 <_strtod_l+0xa80>
 8009778:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 800977c:	9b05      	ldr	r3, [sp, #20]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1a9      	bne.n	80096d6 <_strtod_l+0x9ee>
 8009782:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009786:	0d1b      	lsrs	r3, r3, #20
 8009788:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800978a:	051b      	lsls	r3, r3, #20
 800978c:	429a      	cmp	r2, r3
 800978e:	465e      	mov	r6, fp
 8009790:	d1a1      	bne.n	80096d6 <_strtod_l+0x9ee>
 8009792:	4629      	mov	r1, r5
 8009794:	4620      	mov	r0, r4
 8009796:	f7f7 f955 	bl	8000a44 <__aeabi_d2iz>
 800979a:	f7f6 fe3d 	bl	8000418 <__aeabi_i2d>
 800979e:	460b      	mov	r3, r1
 80097a0:	4602      	mov	r2, r0
 80097a2:	4629      	mov	r1, r5
 80097a4:	4620      	mov	r0, r4
 80097a6:	f7f6 fce9 	bl	800017c <__aeabi_dsub>
 80097aa:	9b08      	ldr	r3, [sp, #32]
 80097ac:	4604      	mov	r4, r0
 80097ae:	460d      	mov	r5, r1
 80097b0:	b933      	cbnz	r3, 80097c0 <_strtod_l+0xad8>
 80097b2:	f1ba 0f00 	cmp.w	sl, #0
 80097b6:	d103      	bne.n	80097c0 <_strtod_l+0xad8>
 80097b8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80097bc:	2e00      	cmp	r6, #0
 80097be:	d06c      	beq.n	800989a <_strtod_l+0xbb2>
 80097c0:	a30b      	add	r3, pc, #44	; (adr r3, 80097f0 <_strtod_l+0xb08>)
 80097c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c6:	4620      	mov	r0, r4
 80097c8:	4629      	mov	r1, r5
 80097ca:	f7f7 f8fd 	bl	80009c8 <__aeabi_dcmplt>
 80097ce:	2800      	cmp	r0, #0
 80097d0:	f47f ace8 	bne.w	80091a4 <_strtod_l+0x4bc>
 80097d4:	a308      	add	r3, pc, #32	; (adr r3, 80097f8 <_strtod_l+0xb10>)
 80097d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097da:	4620      	mov	r0, r4
 80097dc:	4629      	mov	r1, r5
 80097de:	f7f7 f911 	bl	8000a04 <__aeabi_dcmpgt>
 80097e2:	2800      	cmp	r0, #0
 80097e4:	f43f af77 	beq.w	80096d6 <_strtod_l+0x9ee>
 80097e8:	e4dc      	b.n	80091a4 <_strtod_l+0x4bc>
 80097ea:	bf00      	nop
 80097ec:	f3af 8000 	nop.w
 80097f0:	94a03595 	.word	0x94a03595
 80097f4:	3fdfffff 	.word	0x3fdfffff
 80097f8:	35afe535 	.word	0x35afe535
 80097fc:	3fe00000 	.word	0x3fe00000
 8009800:	000fffff 	.word	0x000fffff
 8009804:	7ff00000 	.word	0x7ff00000
 8009808:	7fefffff 	.word	0x7fefffff
 800980c:	39500000 	.word	0x39500000
 8009810:	3ff00000 	.word	0x3ff00000
 8009814:	7fe00000 	.word	0x7fe00000
 8009818:	7c9fffff 	.word	0x7c9fffff
 800981c:	3fe00000 	.word	0x3fe00000
 8009820:	bff00000 	.word	0xbff00000
 8009824:	9b05      	ldr	r3, [sp, #20]
 8009826:	b313      	cbz	r3, 800986e <_strtod_l+0xb86>
 8009828:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800982a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800982e:	d81e      	bhi.n	800986e <_strtod_l+0xb86>
 8009830:	a325      	add	r3, pc, #148	; (adr r3, 80098c8 <_strtod_l+0xbe0>)
 8009832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009836:	4620      	mov	r0, r4
 8009838:	4629      	mov	r1, r5
 800983a:	f7f7 f8cf 	bl	80009dc <__aeabi_dcmple>
 800983e:	b190      	cbz	r0, 8009866 <_strtod_l+0xb7e>
 8009840:	4629      	mov	r1, r5
 8009842:	4620      	mov	r0, r4
 8009844:	f7f7 f926 	bl	8000a94 <__aeabi_d2uiz>
 8009848:	2800      	cmp	r0, #0
 800984a:	bf08      	it	eq
 800984c:	2001      	moveq	r0, #1
 800984e:	f7f6 fdd3 	bl	80003f8 <__aeabi_ui2d>
 8009852:	9b08      	ldr	r3, [sp, #32]
 8009854:	4604      	mov	r4, r0
 8009856:	460d      	mov	r5, r1
 8009858:	b9d3      	cbnz	r3, 8009890 <_strtod_l+0xba8>
 800985a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800985e:	9012      	str	r0, [sp, #72]	; 0x48
 8009860:	9313      	str	r3, [sp, #76]	; 0x4c
 8009862:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009866:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009868:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800986c:	1a9f      	subs	r7, r3, r2
 800986e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009872:	f7ff f8ab 	bl	80089cc <__ulp>
 8009876:	4602      	mov	r2, r0
 8009878:	460b      	mov	r3, r1
 800987a:	4630      	mov	r0, r6
 800987c:	4639      	mov	r1, r7
 800987e:	f7f6 fe31 	bl	80004e4 <__aeabi_dmul>
 8009882:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009886:	f7f6 fc7b 	bl	8000180 <__adddf3>
 800988a:	4682      	mov	sl, r0
 800988c:	468b      	mov	fp, r1
 800988e:	e775      	b.n	800977c <_strtod_l+0xa94>
 8009890:	4602      	mov	r2, r0
 8009892:	460b      	mov	r3, r1
 8009894:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009898:	e7e3      	b.n	8009862 <_strtod_l+0xb7a>
 800989a:	a30d      	add	r3, pc, #52	; (adr r3, 80098d0 <_strtod_l+0xbe8>)
 800989c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a0:	f7f7 f892 	bl	80009c8 <__aeabi_dcmplt>
 80098a4:	e79d      	b.n	80097e2 <_strtod_l+0xafa>
 80098a6:	2300      	movs	r3, #0
 80098a8:	9309      	str	r3, [sp, #36]	; 0x24
 80098aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80098ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80098ae:	6013      	str	r3, [r2, #0]
 80098b0:	f7ff ba5e 	b.w	8008d70 <_strtod_l+0x88>
 80098b4:	2b65      	cmp	r3, #101	; 0x65
 80098b6:	f04f 0200 	mov.w	r2, #0
 80098ba:	f43f abae 	beq.w	800901a <_strtod_l+0x332>
 80098be:	4615      	mov	r5, r2
 80098c0:	2101      	movs	r1, #1
 80098c2:	f7ff bacd 	b.w	8008e60 <_strtod_l+0x178>
 80098c6:	bf00      	nop
 80098c8:	ffc00000 	.word	0xffc00000
 80098cc:	41dfffff 	.word	0x41dfffff
 80098d0:	94a03595 	.word	0x94a03595
 80098d4:	3fcfffff 	.word	0x3fcfffff

080098d8 <_strtod_r>:
 80098d8:	4b05      	ldr	r3, [pc, #20]	; (80098f0 <_strtod_r+0x18>)
 80098da:	b410      	push	{r4}
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4c05      	ldr	r4, [pc, #20]	; (80098f4 <_strtod_r+0x1c>)
 80098e0:	6a1b      	ldr	r3, [r3, #32]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	bf08      	it	eq
 80098e6:	4623      	moveq	r3, r4
 80098e8:	bc10      	pop	{r4}
 80098ea:	f7ff b9fd 	b.w	8008ce8 <_strtod_l>
 80098ee:	bf00      	nop
 80098f0:	200000b4 	.word	0x200000b4
 80098f4:	200001a8 	.word	0x200001a8

080098f8 <_strtol_l.isra.0>:
 80098f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098fc:	4680      	mov	r8, r0
 80098fe:	4689      	mov	r9, r1
 8009900:	4692      	mov	sl, r2
 8009902:	461f      	mov	r7, r3
 8009904:	468b      	mov	fp, r1
 8009906:	465d      	mov	r5, fp
 8009908:	980a      	ldr	r0, [sp, #40]	; 0x28
 800990a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800990e:	f7fe fb0f 	bl	8007f30 <__locale_ctype_ptr_l>
 8009912:	4420      	add	r0, r4
 8009914:	7846      	ldrb	r6, [r0, #1]
 8009916:	f016 0608 	ands.w	r6, r6, #8
 800991a:	d10b      	bne.n	8009934 <_strtol_l.isra.0+0x3c>
 800991c:	2c2d      	cmp	r4, #45	; 0x2d
 800991e:	d10b      	bne.n	8009938 <_strtol_l.isra.0+0x40>
 8009920:	2601      	movs	r6, #1
 8009922:	782c      	ldrb	r4, [r5, #0]
 8009924:	f10b 0502 	add.w	r5, fp, #2
 8009928:	b167      	cbz	r7, 8009944 <_strtol_l.isra.0+0x4c>
 800992a:	2f10      	cmp	r7, #16
 800992c:	d114      	bne.n	8009958 <_strtol_l.isra.0+0x60>
 800992e:	2c30      	cmp	r4, #48	; 0x30
 8009930:	d00a      	beq.n	8009948 <_strtol_l.isra.0+0x50>
 8009932:	e011      	b.n	8009958 <_strtol_l.isra.0+0x60>
 8009934:	46ab      	mov	fp, r5
 8009936:	e7e6      	b.n	8009906 <_strtol_l.isra.0+0xe>
 8009938:	2c2b      	cmp	r4, #43	; 0x2b
 800993a:	bf04      	itt	eq
 800993c:	782c      	ldrbeq	r4, [r5, #0]
 800993e:	f10b 0502 	addeq.w	r5, fp, #2
 8009942:	e7f1      	b.n	8009928 <_strtol_l.isra.0+0x30>
 8009944:	2c30      	cmp	r4, #48	; 0x30
 8009946:	d127      	bne.n	8009998 <_strtol_l.isra.0+0xa0>
 8009948:	782b      	ldrb	r3, [r5, #0]
 800994a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800994e:	2b58      	cmp	r3, #88	; 0x58
 8009950:	d14b      	bne.n	80099ea <_strtol_l.isra.0+0xf2>
 8009952:	2710      	movs	r7, #16
 8009954:	786c      	ldrb	r4, [r5, #1]
 8009956:	3502      	adds	r5, #2
 8009958:	2e00      	cmp	r6, #0
 800995a:	bf0c      	ite	eq
 800995c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009960:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009964:	2200      	movs	r2, #0
 8009966:	fbb1 fef7 	udiv	lr, r1, r7
 800996a:	4610      	mov	r0, r2
 800996c:	fb07 1c1e 	mls	ip, r7, lr, r1
 8009970:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009974:	2b09      	cmp	r3, #9
 8009976:	d811      	bhi.n	800999c <_strtol_l.isra.0+0xa4>
 8009978:	461c      	mov	r4, r3
 800997a:	42a7      	cmp	r7, r4
 800997c:	dd1d      	ble.n	80099ba <_strtol_l.isra.0+0xc2>
 800997e:	1c53      	adds	r3, r2, #1
 8009980:	d007      	beq.n	8009992 <_strtol_l.isra.0+0x9a>
 8009982:	4586      	cmp	lr, r0
 8009984:	d316      	bcc.n	80099b4 <_strtol_l.isra.0+0xbc>
 8009986:	d101      	bne.n	800998c <_strtol_l.isra.0+0x94>
 8009988:	45a4      	cmp	ip, r4
 800998a:	db13      	blt.n	80099b4 <_strtol_l.isra.0+0xbc>
 800998c:	2201      	movs	r2, #1
 800998e:	fb00 4007 	mla	r0, r0, r7, r4
 8009992:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009996:	e7eb      	b.n	8009970 <_strtol_l.isra.0+0x78>
 8009998:	270a      	movs	r7, #10
 800999a:	e7dd      	b.n	8009958 <_strtol_l.isra.0+0x60>
 800999c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80099a0:	2b19      	cmp	r3, #25
 80099a2:	d801      	bhi.n	80099a8 <_strtol_l.isra.0+0xb0>
 80099a4:	3c37      	subs	r4, #55	; 0x37
 80099a6:	e7e8      	b.n	800997a <_strtol_l.isra.0+0x82>
 80099a8:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80099ac:	2b19      	cmp	r3, #25
 80099ae:	d804      	bhi.n	80099ba <_strtol_l.isra.0+0xc2>
 80099b0:	3c57      	subs	r4, #87	; 0x57
 80099b2:	e7e2      	b.n	800997a <_strtol_l.isra.0+0x82>
 80099b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099b8:	e7eb      	b.n	8009992 <_strtol_l.isra.0+0x9a>
 80099ba:	1c53      	adds	r3, r2, #1
 80099bc:	d108      	bne.n	80099d0 <_strtol_l.isra.0+0xd8>
 80099be:	2322      	movs	r3, #34	; 0x22
 80099c0:	4608      	mov	r0, r1
 80099c2:	f8c8 3000 	str.w	r3, [r8]
 80099c6:	f1ba 0f00 	cmp.w	sl, #0
 80099ca:	d107      	bne.n	80099dc <_strtol_l.isra.0+0xe4>
 80099cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d0:	b106      	cbz	r6, 80099d4 <_strtol_l.isra.0+0xdc>
 80099d2:	4240      	negs	r0, r0
 80099d4:	f1ba 0f00 	cmp.w	sl, #0
 80099d8:	d00c      	beq.n	80099f4 <_strtol_l.isra.0+0xfc>
 80099da:	b122      	cbz	r2, 80099e6 <_strtol_l.isra.0+0xee>
 80099dc:	3d01      	subs	r5, #1
 80099de:	f8ca 5000 	str.w	r5, [sl]
 80099e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e6:	464d      	mov	r5, r9
 80099e8:	e7f9      	b.n	80099de <_strtol_l.isra.0+0xe6>
 80099ea:	2430      	movs	r4, #48	; 0x30
 80099ec:	2f00      	cmp	r7, #0
 80099ee:	d1b3      	bne.n	8009958 <_strtol_l.isra.0+0x60>
 80099f0:	2708      	movs	r7, #8
 80099f2:	e7b1      	b.n	8009958 <_strtol_l.isra.0+0x60>
 80099f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080099f8 <_strtol_r>:
 80099f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099fa:	4c06      	ldr	r4, [pc, #24]	; (8009a14 <_strtol_r+0x1c>)
 80099fc:	4d06      	ldr	r5, [pc, #24]	; (8009a18 <_strtol_r+0x20>)
 80099fe:	6824      	ldr	r4, [r4, #0]
 8009a00:	6a24      	ldr	r4, [r4, #32]
 8009a02:	2c00      	cmp	r4, #0
 8009a04:	bf08      	it	eq
 8009a06:	462c      	moveq	r4, r5
 8009a08:	9400      	str	r4, [sp, #0]
 8009a0a:	f7ff ff75 	bl	80098f8 <_strtol_l.isra.0>
 8009a0e:	b003      	add	sp, #12
 8009a10:	bd30      	pop	{r4, r5, pc}
 8009a12:	bf00      	nop
 8009a14:	200000b4 	.word	0x200000b4
 8009a18:	200001a8 	.word	0x200001a8

08009a1c <_strtoll_l.isra.0>:
 8009a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a20:	4688      	mov	r8, r1
 8009a22:	4693      	mov	fp, r2
 8009a24:	461f      	mov	r7, r3
 8009a26:	4689      	mov	r9, r1
 8009a28:	b087      	sub	sp, #28
 8009a2a:	9005      	str	r0, [sp, #20]
 8009a2c:	464d      	mov	r5, r9
 8009a2e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009a30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a34:	f7fe fa7c 	bl	8007f30 <__locale_ctype_ptr_l>
 8009a38:	4420      	add	r0, r4
 8009a3a:	7846      	ldrb	r6, [r0, #1]
 8009a3c:	f016 0608 	ands.w	r6, r6, #8
 8009a40:	d10b      	bne.n	8009a5a <_strtoll_l.isra.0+0x3e>
 8009a42:	2c2d      	cmp	r4, #45	; 0x2d
 8009a44:	d10b      	bne.n	8009a5e <_strtoll_l.isra.0+0x42>
 8009a46:	2601      	movs	r6, #1
 8009a48:	782c      	ldrb	r4, [r5, #0]
 8009a4a:	f109 0502 	add.w	r5, r9, #2
 8009a4e:	b167      	cbz	r7, 8009a6a <_strtoll_l.isra.0+0x4e>
 8009a50:	2f10      	cmp	r7, #16
 8009a52:	d114      	bne.n	8009a7e <_strtoll_l.isra.0+0x62>
 8009a54:	2c30      	cmp	r4, #48	; 0x30
 8009a56:	d00a      	beq.n	8009a6e <_strtoll_l.isra.0+0x52>
 8009a58:	e011      	b.n	8009a7e <_strtoll_l.isra.0+0x62>
 8009a5a:	46a9      	mov	r9, r5
 8009a5c:	e7e6      	b.n	8009a2c <_strtoll_l.isra.0+0x10>
 8009a5e:	2c2b      	cmp	r4, #43	; 0x2b
 8009a60:	bf04      	itt	eq
 8009a62:	782c      	ldrbeq	r4, [r5, #0]
 8009a64:	f109 0502 	addeq.w	r5, r9, #2
 8009a68:	e7f1      	b.n	8009a4e <_strtoll_l.isra.0+0x32>
 8009a6a:	2c30      	cmp	r4, #48	; 0x30
 8009a6c:	d144      	bne.n	8009af8 <_strtoll_l.isra.0+0xdc>
 8009a6e:	782b      	ldrb	r3, [r5, #0]
 8009a70:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009a74:	2b58      	cmp	r3, #88	; 0x58
 8009a76:	d170      	bne.n	8009b5a <_strtoll_l.isra.0+0x13e>
 8009a78:	2710      	movs	r7, #16
 8009a7a:	786c      	ldrb	r4, [r5, #1]
 8009a7c:	3502      	adds	r5, #2
 8009a7e:	2e00      	cmp	r6, #0
 8009a80:	d03c      	beq.n	8009afc <_strtoll_l.isra.0+0xe0>
 8009a82:	f04f 0a00 	mov.w	sl, #0
 8009a86:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8009a8a:	463a      	mov	r2, r7
 8009a8c:	17fb      	asrs	r3, r7, #31
 8009a8e:	4650      	mov	r0, sl
 8009a90:	4649      	mov	r1, r9
 8009a92:	e9cd 2300 	strd	r2, r3, [sp]
 8009a96:	f7f7 f86d 	bl	8000b74 <__aeabi_uldivmod>
 8009a9a:	17fb      	asrs	r3, r7, #31
 8009a9c:	9204      	str	r2, [sp, #16]
 8009a9e:	4650      	mov	r0, sl
 8009aa0:	463a      	mov	r2, r7
 8009aa2:	4649      	mov	r1, r9
 8009aa4:	f7f7 f866 	bl	8000b74 <__aeabi_uldivmod>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009aae:	2000      	movs	r0, #0
 8009ab0:	2100      	movs	r1, #0
 8009ab2:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8009ab6:	2a09      	cmp	r2, #9
 8009ab8:	d825      	bhi.n	8009b06 <_strtoll_l.isra.0+0xea>
 8009aba:	4614      	mov	r4, r2
 8009abc:	42a7      	cmp	r7, r4
 8009abe:	dd31      	ble.n	8009b24 <_strtoll_l.isra.0+0x108>
 8009ac0:	1c5a      	adds	r2, r3, #1
 8009ac2:	d016      	beq.n	8009af2 <_strtoll_l.isra.0+0xd6>
 8009ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ac8:	428b      	cmp	r3, r1
 8009aca:	bf08      	it	eq
 8009acc:	4282      	cmpeq	r2, r0
 8009ace:	d326      	bcc.n	8009b1e <_strtoll_l.isra.0+0x102>
 8009ad0:	d102      	bne.n	8009ad8 <_strtoll_l.isra.0+0xbc>
 8009ad2:	9b04      	ldr	r3, [sp, #16]
 8009ad4:	42a3      	cmp	r3, r4
 8009ad6:	db22      	blt.n	8009b1e <_strtoll_l.isra.0+0x102>
 8009ad8:	9b00      	ldr	r3, [sp, #0]
 8009ada:	9a01      	ldr	r2, [sp, #4]
 8009adc:	434b      	muls	r3, r1
 8009ade:	fb00 3302 	mla	r3, r0, r2, r3
 8009ae2:	9a00      	ldr	r2, [sp, #0]
 8009ae4:	fba2 0100 	umull	r0, r1, r2, r0
 8009ae8:	4419      	add	r1, r3
 8009aea:	2301      	movs	r3, #1
 8009aec:	1900      	adds	r0, r0, r4
 8009aee:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8009af2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009af6:	e7dc      	b.n	8009ab2 <_strtoll_l.isra.0+0x96>
 8009af8:	270a      	movs	r7, #10
 8009afa:	e7c0      	b.n	8009a7e <_strtoll_l.isra.0+0x62>
 8009afc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009b00:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009b04:	e7c1      	b.n	8009a8a <_strtoll_l.isra.0+0x6e>
 8009b06:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8009b0a:	2a19      	cmp	r2, #25
 8009b0c:	d801      	bhi.n	8009b12 <_strtoll_l.isra.0+0xf6>
 8009b0e:	3c37      	subs	r4, #55	; 0x37
 8009b10:	e7d4      	b.n	8009abc <_strtoll_l.isra.0+0xa0>
 8009b12:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8009b16:	2a19      	cmp	r2, #25
 8009b18:	d804      	bhi.n	8009b24 <_strtoll_l.isra.0+0x108>
 8009b1a:	3c57      	subs	r4, #87	; 0x57
 8009b1c:	e7ce      	b.n	8009abc <_strtoll_l.isra.0+0xa0>
 8009b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b22:	e7e6      	b.n	8009af2 <_strtoll_l.isra.0+0xd6>
 8009b24:	1c5a      	adds	r2, r3, #1
 8009b26:	d10a      	bne.n	8009b3e <_strtoll_l.isra.0+0x122>
 8009b28:	2322      	movs	r3, #34	; 0x22
 8009b2a:	9a05      	ldr	r2, [sp, #20]
 8009b2c:	4650      	mov	r0, sl
 8009b2e:	6013      	str	r3, [r2, #0]
 8009b30:	4649      	mov	r1, r9
 8009b32:	f1bb 0f00 	cmp.w	fp, #0
 8009b36:	d10a      	bne.n	8009b4e <_strtoll_l.isra.0+0x132>
 8009b38:	b007      	add	sp, #28
 8009b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b3e:	b116      	cbz	r6, 8009b46 <_strtoll_l.isra.0+0x12a>
 8009b40:	4240      	negs	r0, r0
 8009b42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8009b46:	f1bb 0f00 	cmp.w	fp, #0
 8009b4a:	d0f5      	beq.n	8009b38 <_strtoll_l.isra.0+0x11c>
 8009b4c:	b11b      	cbz	r3, 8009b56 <_strtoll_l.isra.0+0x13a>
 8009b4e:	3d01      	subs	r5, #1
 8009b50:	f8cb 5000 	str.w	r5, [fp]
 8009b54:	e7f0      	b.n	8009b38 <_strtoll_l.isra.0+0x11c>
 8009b56:	4645      	mov	r5, r8
 8009b58:	e7fa      	b.n	8009b50 <_strtoll_l.isra.0+0x134>
 8009b5a:	2430      	movs	r4, #48	; 0x30
 8009b5c:	2f00      	cmp	r7, #0
 8009b5e:	d18e      	bne.n	8009a7e <_strtoll_l.isra.0+0x62>
 8009b60:	2708      	movs	r7, #8
 8009b62:	e78c      	b.n	8009a7e <_strtoll_l.isra.0+0x62>

08009b64 <_strtoll_r>:
 8009b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b66:	4c06      	ldr	r4, [pc, #24]	; (8009b80 <_strtoll_r+0x1c>)
 8009b68:	4d06      	ldr	r5, [pc, #24]	; (8009b84 <_strtoll_r+0x20>)
 8009b6a:	6824      	ldr	r4, [r4, #0]
 8009b6c:	6a24      	ldr	r4, [r4, #32]
 8009b6e:	2c00      	cmp	r4, #0
 8009b70:	bf08      	it	eq
 8009b72:	462c      	moveq	r4, r5
 8009b74:	9400      	str	r4, [sp, #0]
 8009b76:	f7ff ff51 	bl	8009a1c <_strtoll_l.isra.0>
 8009b7a:	b003      	add	sp, #12
 8009b7c:	bd30      	pop	{r4, r5, pc}
 8009b7e:	bf00      	nop
 8009b80:	200000b4 	.word	0x200000b4
 8009b84:	200001a8 	.word	0x200001a8

08009b88 <_strtoul_l.isra.0>:
 8009b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b8c:	4680      	mov	r8, r0
 8009b8e:	4689      	mov	r9, r1
 8009b90:	4692      	mov	sl, r2
 8009b92:	461e      	mov	r6, r3
 8009b94:	460f      	mov	r7, r1
 8009b96:	463d      	mov	r5, r7
 8009b98:	9808      	ldr	r0, [sp, #32]
 8009b9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b9e:	f7fe f9c7 	bl	8007f30 <__locale_ctype_ptr_l>
 8009ba2:	4420      	add	r0, r4
 8009ba4:	7843      	ldrb	r3, [r0, #1]
 8009ba6:	f013 0308 	ands.w	r3, r3, #8
 8009baa:	d10a      	bne.n	8009bc2 <_strtoul_l.isra.0+0x3a>
 8009bac:	2c2d      	cmp	r4, #45	; 0x2d
 8009bae:	d10a      	bne.n	8009bc6 <_strtoul_l.isra.0+0x3e>
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	782c      	ldrb	r4, [r5, #0]
 8009bb4:	1cbd      	adds	r5, r7, #2
 8009bb6:	b15e      	cbz	r6, 8009bd0 <_strtoul_l.isra.0+0x48>
 8009bb8:	2e10      	cmp	r6, #16
 8009bba:	d113      	bne.n	8009be4 <_strtoul_l.isra.0+0x5c>
 8009bbc:	2c30      	cmp	r4, #48	; 0x30
 8009bbe:	d009      	beq.n	8009bd4 <_strtoul_l.isra.0+0x4c>
 8009bc0:	e010      	b.n	8009be4 <_strtoul_l.isra.0+0x5c>
 8009bc2:	462f      	mov	r7, r5
 8009bc4:	e7e7      	b.n	8009b96 <_strtoul_l.isra.0+0xe>
 8009bc6:	2c2b      	cmp	r4, #43	; 0x2b
 8009bc8:	bf04      	itt	eq
 8009bca:	782c      	ldrbeq	r4, [r5, #0]
 8009bcc:	1cbd      	addeq	r5, r7, #2
 8009bce:	e7f2      	b.n	8009bb6 <_strtoul_l.isra.0+0x2e>
 8009bd0:	2c30      	cmp	r4, #48	; 0x30
 8009bd2:	d125      	bne.n	8009c20 <_strtoul_l.isra.0+0x98>
 8009bd4:	782a      	ldrb	r2, [r5, #0]
 8009bd6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009bda:	2a58      	cmp	r2, #88	; 0x58
 8009bdc:	d14a      	bne.n	8009c74 <_strtoul_l.isra.0+0xec>
 8009bde:	2610      	movs	r6, #16
 8009be0:	786c      	ldrb	r4, [r5, #1]
 8009be2:	3502      	adds	r5, #2
 8009be4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009be8:	fbb1 f1f6 	udiv	r1, r1, r6
 8009bec:	2700      	movs	r7, #0
 8009bee:	fb06 fe01 	mul.w	lr, r6, r1
 8009bf2:	4638      	mov	r0, r7
 8009bf4:	ea6f 0e0e 	mvn.w	lr, lr
 8009bf8:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8009bfc:	2a09      	cmp	r2, #9
 8009bfe:	d811      	bhi.n	8009c24 <_strtoul_l.isra.0+0x9c>
 8009c00:	4614      	mov	r4, r2
 8009c02:	42a6      	cmp	r6, r4
 8009c04:	dd1d      	ble.n	8009c42 <_strtoul_l.isra.0+0xba>
 8009c06:	2f00      	cmp	r7, #0
 8009c08:	db18      	blt.n	8009c3c <_strtoul_l.isra.0+0xb4>
 8009c0a:	4281      	cmp	r1, r0
 8009c0c:	d316      	bcc.n	8009c3c <_strtoul_l.isra.0+0xb4>
 8009c0e:	d101      	bne.n	8009c14 <_strtoul_l.isra.0+0x8c>
 8009c10:	45a6      	cmp	lr, r4
 8009c12:	db13      	blt.n	8009c3c <_strtoul_l.isra.0+0xb4>
 8009c14:	2701      	movs	r7, #1
 8009c16:	fb00 4006 	mla	r0, r0, r6, r4
 8009c1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c1e:	e7eb      	b.n	8009bf8 <_strtoul_l.isra.0+0x70>
 8009c20:	260a      	movs	r6, #10
 8009c22:	e7df      	b.n	8009be4 <_strtoul_l.isra.0+0x5c>
 8009c24:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8009c28:	2a19      	cmp	r2, #25
 8009c2a:	d801      	bhi.n	8009c30 <_strtoul_l.isra.0+0xa8>
 8009c2c:	3c37      	subs	r4, #55	; 0x37
 8009c2e:	e7e8      	b.n	8009c02 <_strtoul_l.isra.0+0x7a>
 8009c30:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8009c34:	2a19      	cmp	r2, #25
 8009c36:	d804      	bhi.n	8009c42 <_strtoul_l.isra.0+0xba>
 8009c38:	3c57      	subs	r4, #87	; 0x57
 8009c3a:	e7e2      	b.n	8009c02 <_strtoul_l.isra.0+0x7a>
 8009c3c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009c40:	e7eb      	b.n	8009c1a <_strtoul_l.isra.0+0x92>
 8009c42:	2f00      	cmp	r7, #0
 8009c44:	da09      	bge.n	8009c5a <_strtoul_l.isra.0+0xd2>
 8009c46:	2322      	movs	r3, #34	; 0x22
 8009c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c4c:	f8c8 3000 	str.w	r3, [r8]
 8009c50:	f1ba 0f00 	cmp.w	sl, #0
 8009c54:	d107      	bne.n	8009c66 <_strtoul_l.isra.0+0xde>
 8009c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c5a:	b103      	cbz	r3, 8009c5e <_strtoul_l.isra.0+0xd6>
 8009c5c:	4240      	negs	r0, r0
 8009c5e:	f1ba 0f00 	cmp.w	sl, #0
 8009c62:	d00c      	beq.n	8009c7e <_strtoul_l.isra.0+0xf6>
 8009c64:	b127      	cbz	r7, 8009c70 <_strtoul_l.isra.0+0xe8>
 8009c66:	3d01      	subs	r5, #1
 8009c68:	f8ca 5000 	str.w	r5, [sl]
 8009c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c70:	464d      	mov	r5, r9
 8009c72:	e7f9      	b.n	8009c68 <_strtoul_l.isra.0+0xe0>
 8009c74:	2430      	movs	r4, #48	; 0x30
 8009c76:	2e00      	cmp	r6, #0
 8009c78:	d1b4      	bne.n	8009be4 <_strtoul_l.isra.0+0x5c>
 8009c7a:	2608      	movs	r6, #8
 8009c7c:	e7b2      	b.n	8009be4 <_strtoul_l.isra.0+0x5c>
 8009c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08009c84 <_strtoul_r>:
 8009c84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c86:	4c06      	ldr	r4, [pc, #24]	; (8009ca0 <_strtoul_r+0x1c>)
 8009c88:	4d06      	ldr	r5, [pc, #24]	; (8009ca4 <_strtoul_r+0x20>)
 8009c8a:	6824      	ldr	r4, [r4, #0]
 8009c8c:	6a24      	ldr	r4, [r4, #32]
 8009c8e:	2c00      	cmp	r4, #0
 8009c90:	bf08      	it	eq
 8009c92:	462c      	moveq	r4, r5
 8009c94:	9400      	str	r4, [sp, #0]
 8009c96:	f7ff ff77 	bl	8009b88 <_strtoul_l.isra.0>
 8009c9a:	b003      	add	sp, #12
 8009c9c:	bd30      	pop	{r4, r5, pc}
 8009c9e:	bf00      	nop
 8009ca0:	200000b4 	.word	0x200000b4
 8009ca4:	200001a8 	.word	0x200001a8

08009ca8 <_strtoull_l.isra.0>:
 8009ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cac:	4688      	mov	r8, r1
 8009cae:	4691      	mov	r9, r2
 8009cb0:	461f      	mov	r7, r3
 8009cb2:	468b      	mov	fp, r1
 8009cb4:	b085      	sub	sp, #20
 8009cb6:	9003      	str	r0, [sp, #12]
 8009cb8:	465d      	mov	r5, fp
 8009cba:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009cbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009cc0:	f7fe f936 	bl	8007f30 <__locale_ctype_ptr_l>
 8009cc4:	4420      	add	r0, r4
 8009cc6:	7846      	ldrb	r6, [r0, #1]
 8009cc8:	f016 0608 	ands.w	r6, r6, #8
 8009ccc:	d10b      	bne.n	8009ce6 <_strtoull_l.isra.0+0x3e>
 8009cce:	2c2d      	cmp	r4, #45	; 0x2d
 8009cd0:	d10b      	bne.n	8009cea <_strtoull_l.isra.0+0x42>
 8009cd2:	2601      	movs	r6, #1
 8009cd4:	782c      	ldrb	r4, [r5, #0]
 8009cd6:	f10b 0502 	add.w	r5, fp, #2
 8009cda:	b167      	cbz	r7, 8009cf6 <_strtoull_l.isra.0+0x4e>
 8009cdc:	2f10      	cmp	r7, #16
 8009cde:	d114      	bne.n	8009d0a <_strtoull_l.isra.0+0x62>
 8009ce0:	2c30      	cmp	r4, #48	; 0x30
 8009ce2:	d00a      	beq.n	8009cfa <_strtoull_l.isra.0+0x52>
 8009ce4:	e011      	b.n	8009d0a <_strtoull_l.isra.0+0x62>
 8009ce6:	46ab      	mov	fp, r5
 8009ce8:	e7e6      	b.n	8009cb8 <_strtoull_l.isra.0+0x10>
 8009cea:	2c2b      	cmp	r4, #43	; 0x2b
 8009cec:	bf04      	itt	eq
 8009cee:	782c      	ldrbeq	r4, [r5, #0]
 8009cf0:	f10b 0502 	addeq.w	r5, fp, #2
 8009cf4:	e7f1      	b.n	8009cda <_strtoull_l.isra.0+0x32>
 8009cf6:	2c30      	cmp	r4, #48	; 0x30
 8009cf8:	d141      	bne.n	8009d7e <_strtoull_l.isra.0+0xd6>
 8009cfa:	782b      	ldrb	r3, [r5, #0]
 8009cfc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009d00:	2b58      	cmp	r3, #88	; 0x58
 8009d02:	d16c      	bne.n	8009dde <_strtoull_l.isra.0+0x136>
 8009d04:	2710      	movs	r7, #16
 8009d06:	786c      	ldrb	r4, [r5, #1]
 8009d08:	3502      	adds	r5, #2
 8009d0a:	ea4f 7be7 	mov.w	fp, r7, asr #31
 8009d0e:	463a      	mov	r2, r7
 8009d10:	465b      	mov	r3, fp
 8009d12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009d1a:	f7f6 ff2b 	bl	8000b74 <__aeabi_uldivmod>
 8009d1e:	463a      	mov	r2, r7
 8009d20:	e9cd 0100 	strd	r0, r1, [sp]
 8009d24:	465b      	mov	r3, fp
 8009d26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009d2e:	f7f6 ff21 	bl	8000b74 <__aeabi_uldivmod>
 8009d32:	46ba      	mov	sl, r7
 8009d34:	4694      	mov	ip, r2
 8009d36:	2300      	movs	r3, #0
 8009d38:	2000      	movs	r0, #0
 8009d3a:	2100      	movs	r1, #0
 8009d3c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009d40:	f1be 0f09 	cmp.w	lr, #9
 8009d44:	d81d      	bhi.n	8009d82 <_strtoull_l.isra.0+0xda>
 8009d46:	4674      	mov	r4, lr
 8009d48:	42a7      	cmp	r7, r4
 8009d4a:	dd2b      	ble.n	8009da4 <_strtoull_l.isra.0+0xfc>
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	db26      	blt.n	8009d9e <_strtoull_l.isra.0+0xf6>
 8009d50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d54:	428b      	cmp	r3, r1
 8009d56:	bf08      	it	eq
 8009d58:	4282      	cmpeq	r2, r0
 8009d5a:	d320      	bcc.n	8009d9e <_strtoull_l.isra.0+0xf6>
 8009d5c:	d101      	bne.n	8009d62 <_strtoull_l.isra.0+0xba>
 8009d5e:	45a4      	cmp	ip, r4
 8009d60:	db1d      	blt.n	8009d9e <_strtoull_l.isra.0+0xf6>
 8009d62:	fb0a f301 	mul.w	r3, sl, r1
 8009d66:	fb00 330b 	mla	r3, r0, fp, r3
 8009d6a:	fbaa 0100 	umull	r0, r1, sl, r0
 8009d6e:	4419      	add	r1, r3
 8009d70:	2301      	movs	r3, #1
 8009d72:	1900      	adds	r0, r0, r4
 8009d74:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8009d78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d7c:	e7de      	b.n	8009d3c <_strtoull_l.isra.0+0x94>
 8009d7e:	270a      	movs	r7, #10
 8009d80:	e7c3      	b.n	8009d0a <_strtoull_l.isra.0+0x62>
 8009d82:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009d86:	f1be 0f19 	cmp.w	lr, #25
 8009d8a:	d801      	bhi.n	8009d90 <_strtoull_l.isra.0+0xe8>
 8009d8c:	3c37      	subs	r4, #55	; 0x37
 8009d8e:	e7db      	b.n	8009d48 <_strtoull_l.isra.0+0xa0>
 8009d90:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009d94:	f1be 0f19 	cmp.w	lr, #25
 8009d98:	d804      	bhi.n	8009da4 <_strtoull_l.isra.0+0xfc>
 8009d9a:	3c57      	subs	r4, #87	; 0x57
 8009d9c:	e7d4      	b.n	8009d48 <_strtoull_l.isra.0+0xa0>
 8009d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009da2:	e7e9      	b.n	8009d78 <_strtoull_l.isra.0+0xd0>
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	da0c      	bge.n	8009dc2 <_strtoull_l.isra.0+0x11a>
 8009da8:	2322      	movs	r3, #34	; 0x22
 8009daa:	9a03      	ldr	r2, [sp, #12]
 8009dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009db0:	6013      	str	r3, [r2, #0]
 8009db2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009db6:	f1b9 0f00 	cmp.w	r9, #0
 8009dba:	d10a      	bne.n	8009dd2 <_strtoull_l.isra.0+0x12a>
 8009dbc:	b005      	add	sp, #20
 8009dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc2:	b116      	cbz	r6, 8009dca <_strtoull_l.isra.0+0x122>
 8009dc4:	4240      	negs	r0, r0
 8009dc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8009dca:	f1b9 0f00 	cmp.w	r9, #0
 8009dce:	d0f5      	beq.n	8009dbc <_strtoull_l.isra.0+0x114>
 8009dd0:	b11b      	cbz	r3, 8009dda <_strtoull_l.isra.0+0x132>
 8009dd2:	3d01      	subs	r5, #1
 8009dd4:	f8c9 5000 	str.w	r5, [r9]
 8009dd8:	e7f0      	b.n	8009dbc <_strtoull_l.isra.0+0x114>
 8009dda:	4645      	mov	r5, r8
 8009ddc:	e7fa      	b.n	8009dd4 <_strtoull_l.isra.0+0x12c>
 8009dde:	2430      	movs	r4, #48	; 0x30
 8009de0:	2f00      	cmp	r7, #0
 8009de2:	d192      	bne.n	8009d0a <_strtoull_l.isra.0+0x62>
 8009de4:	2708      	movs	r7, #8
 8009de6:	e790      	b.n	8009d0a <_strtoull_l.isra.0+0x62>

08009de8 <_strtoull_r>:
 8009de8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009dea:	4c06      	ldr	r4, [pc, #24]	; (8009e04 <_strtoull_r+0x1c>)
 8009dec:	4d06      	ldr	r5, [pc, #24]	; (8009e08 <_strtoull_r+0x20>)
 8009dee:	6824      	ldr	r4, [r4, #0]
 8009df0:	6a24      	ldr	r4, [r4, #32]
 8009df2:	2c00      	cmp	r4, #0
 8009df4:	bf08      	it	eq
 8009df6:	462c      	moveq	r4, r5
 8009df8:	9400      	str	r4, [sp, #0]
 8009dfa:	f7ff ff55 	bl	8009ca8 <_strtoull_l.isra.0>
 8009dfe:	b003      	add	sp, #12
 8009e00:	bd30      	pop	{r4, r5, pc}
 8009e02:	bf00      	nop
 8009e04:	200000b4 	.word	0x200000b4
 8009e08:	200001a8 	.word	0x200001a8

08009e0c <__ssprint_r>:
 8009e0c:	6893      	ldr	r3, [r2, #8]
 8009e0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e12:	4681      	mov	r9, r0
 8009e14:	460c      	mov	r4, r1
 8009e16:	4617      	mov	r7, r2
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d060      	beq.n	8009ede <__ssprint_r+0xd2>
 8009e1c:	f04f 0b00 	mov.w	fp, #0
 8009e20:	465e      	mov	r6, fp
 8009e22:	f8d2 a000 	ldr.w	sl, [r2]
 8009e26:	b356      	cbz	r6, 8009e7e <__ssprint_r+0x72>
 8009e28:	68a3      	ldr	r3, [r4, #8]
 8009e2a:	429e      	cmp	r6, r3
 8009e2c:	d344      	bcc.n	8009eb8 <__ssprint_r+0xac>
 8009e2e:	89a2      	ldrh	r2, [r4, #12]
 8009e30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e34:	d03e      	beq.n	8009eb4 <__ssprint_r+0xa8>
 8009e36:	2302      	movs	r3, #2
 8009e38:	6825      	ldr	r5, [r4, #0]
 8009e3a:	6921      	ldr	r1, [r4, #16]
 8009e3c:	eba5 0801 	sub.w	r8, r5, r1
 8009e40:	6965      	ldr	r5, [r4, #20]
 8009e42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e46:	fb95 f5f3 	sdiv	r5, r5, r3
 8009e4a:	f108 0301 	add.w	r3, r8, #1
 8009e4e:	4433      	add	r3, r6
 8009e50:	429d      	cmp	r5, r3
 8009e52:	bf38      	it	cc
 8009e54:	461d      	movcc	r5, r3
 8009e56:	0553      	lsls	r3, r2, #21
 8009e58:	d546      	bpl.n	8009ee8 <__ssprint_r+0xdc>
 8009e5a:	4629      	mov	r1, r5
 8009e5c:	4648      	mov	r0, r9
 8009e5e:	f7fe f891 	bl	8007f84 <_malloc_r>
 8009e62:	b998      	cbnz	r0, 8009e8c <__ssprint_r+0x80>
 8009e64:	230c      	movs	r3, #12
 8009e66:	f8c9 3000 	str.w	r3, [r9]
 8009e6a:	89a3      	ldrh	r3, [r4, #12]
 8009e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e74:	81a3      	strh	r3, [r4, #12]
 8009e76:	2300      	movs	r3, #0
 8009e78:	60bb      	str	r3, [r7, #8]
 8009e7a:	607b      	str	r3, [r7, #4]
 8009e7c:	e031      	b.n	8009ee2 <__ssprint_r+0xd6>
 8009e7e:	f8da b000 	ldr.w	fp, [sl]
 8009e82:	f8da 6004 	ldr.w	r6, [sl, #4]
 8009e86:	f10a 0a08 	add.w	sl, sl, #8
 8009e8a:	e7cc      	b.n	8009e26 <__ssprint_r+0x1a>
 8009e8c:	4642      	mov	r2, r8
 8009e8e:	6921      	ldr	r1, [r4, #16]
 8009e90:	9001      	str	r0, [sp, #4]
 8009e92:	f7fb fc2f 	bl	80056f4 <memcpy>
 8009e96:	89a2      	ldrh	r2, [r4, #12]
 8009e98:	9b01      	ldr	r3, [sp, #4]
 8009e9a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8009e9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009ea2:	81a2      	strh	r2, [r4, #12]
 8009ea4:	6123      	str	r3, [r4, #16]
 8009ea6:	4443      	add	r3, r8
 8009ea8:	6023      	str	r3, [r4, #0]
 8009eaa:	4633      	mov	r3, r6
 8009eac:	6165      	str	r5, [r4, #20]
 8009eae:	eba5 0508 	sub.w	r5, r5, r8
 8009eb2:	60a5      	str	r5, [r4, #8]
 8009eb4:	429e      	cmp	r6, r3
 8009eb6:	d200      	bcs.n	8009eba <__ssprint_r+0xae>
 8009eb8:	4633      	mov	r3, r6
 8009eba:	461a      	mov	r2, r3
 8009ebc:	4659      	mov	r1, fp
 8009ebe:	6820      	ldr	r0, [r4, #0]
 8009ec0:	9301      	str	r3, [sp, #4]
 8009ec2:	f000 fd53 	bl	800a96c <memmove>
 8009ec6:	68a2      	ldr	r2, [r4, #8]
 8009ec8:	9b01      	ldr	r3, [sp, #4]
 8009eca:	1ad2      	subs	r2, r2, r3
 8009ecc:	60a2      	str	r2, [r4, #8]
 8009ece:	6822      	ldr	r2, [r4, #0]
 8009ed0:	4413      	add	r3, r2
 8009ed2:	6023      	str	r3, [r4, #0]
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	1b9e      	subs	r6, r3, r6
 8009ed8:	60be      	str	r6, [r7, #8]
 8009eda:	2e00      	cmp	r6, #0
 8009edc:	d1cf      	bne.n	8009e7e <__ssprint_r+0x72>
 8009ede:	2000      	movs	r0, #0
 8009ee0:	6078      	str	r0, [r7, #4]
 8009ee2:	b003      	add	sp, #12
 8009ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ee8:	462a      	mov	r2, r5
 8009eea:	4648      	mov	r0, r9
 8009eec:	f000 fd58 	bl	800a9a0 <_realloc_r>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	d1d6      	bne.n	8009ea4 <__ssprint_r+0x98>
 8009ef6:	6921      	ldr	r1, [r4, #16]
 8009ef8:	4648      	mov	r0, r9
 8009efa:	f000 f95b 	bl	800a1b4 <_free_r>
 8009efe:	e7b1      	b.n	8009e64 <__ssprint_r+0x58>

08009f00 <_sungetc_r>:
 8009f00:	b538      	push	{r3, r4, r5, lr}
 8009f02:	1c4b      	adds	r3, r1, #1
 8009f04:	4614      	mov	r4, r2
 8009f06:	d103      	bne.n	8009f10 <_sungetc_r+0x10>
 8009f08:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	bd38      	pop	{r3, r4, r5, pc}
 8009f10:	8993      	ldrh	r3, [r2, #12]
 8009f12:	b2cd      	uxtb	r5, r1
 8009f14:	f023 0320 	bic.w	r3, r3, #32
 8009f18:	8193      	strh	r3, [r2, #12]
 8009f1a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8009f1c:	6852      	ldr	r2, [r2, #4]
 8009f1e:	b18b      	cbz	r3, 8009f44 <_sungetc_r+0x44>
 8009f20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009f22:	429a      	cmp	r2, r3
 8009f24:	da08      	bge.n	8009f38 <_sungetc_r+0x38>
 8009f26:	6823      	ldr	r3, [r4, #0]
 8009f28:	1e5a      	subs	r2, r3, #1
 8009f2a:	6022      	str	r2, [r4, #0]
 8009f2c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009f30:	6863      	ldr	r3, [r4, #4]
 8009f32:	3301      	adds	r3, #1
 8009f34:	6063      	str	r3, [r4, #4]
 8009f36:	e7e9      	b.n	8009f0c <_sungetc_r+0xc>
 8009f38:	4621      	mov	r1, r4
 8009f3a:	f000 f872 	bl	800a022 <__submore>
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	d0f1      	beq.n	8009f26 <_sungetc_r+0x26>
 8009f42:	e7e1      	b.n	8009f08 <_sungetc_r+0x8>
 8009f44:	6921      	ldr	r1, [r4, #16]
 8009f46:	6823      	ldr	r3, [r4, #0]
 8009f48:	b151      	cbz	r1, 8009f60 <_sungetc_r+0x60>
 8009f4a:	4299      	cmp	r1, r3
 8009f4c:	d208      	bcs.n	8009f60 <_sungetc_r+0x60>
 8009f4e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009f52:	428d      	cmp	r5, r1
 8009f54:	d104      	bne.n	8009f60 <_sungetc_r+0x60>
 8009f56:	3b01      	subs	r3, #1
 8009f58:	3201      	adds	r2, #1
 8009f5a:	6023      	str	r3, [r4, #0]
 8009f5c:	6062      	str	r2, [r4, #4]
 8009f5e:	e7d5      	b.n	8009f0c <_sungetc_r+0xc>
 8009f60:	63e3      	str	r3, [r4, #60]	; 0x3c
 8009f62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f66:	6363      	str	r3, [r4, #52]	; 0x34
 8009f68:	2303      	movs	r3, #3
 8009f6a:	63a3      	str	r3, [r4, #56]	; 0x38
 8009f6c:	4623      	mov	r3, r4
 8009f6e:	6422      	str	r2, [r4, #64]	; 0x40
 8009f70:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	2301      	movs	r3, #1
 8009f78:	e7dc      	b.n	8009f34 <_sungetc_r+0x34>

08009f7a <__ssrefill_r>:
 8009f7a:	b510      	push	{r4, lr}
 8009f7c:	460c      	mov	r4, r1
 8009f7e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009f80:	b169      	cbz	r1, 8009f9e <__ssrefill_r+0x24>
 8009f82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f86:	4299      	cmp	r1, r3
 8009f88:	d001      	beq.n	8009f8e <__ssrefill_r+0x14>
 8009f8a:	f000 f913 	bl	800a1b4 <_free_r>
 8009f8e:	2000      	movs	r0, #0
 8009f90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f92:	6360      	str	r0, [r4, #52]	; 0x34
 8009f94:	6063      	str	r3, [r4, #4]
 8009f96:	b113      	cbz	r3, 8009f9e <__ssrefill_r+0x24>
 8009f98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009f9a:	6023      	str	r3, [r4, #0]
 8009f9c:	bd10      	pop	{r4, pc}
 8009f9e:	6923      	ldr	r3, [r4, #16]
 8009fa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fa4:	6023      	str	r3, [r4, #0]
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	6063      	str	r3, [r4, #4]
 8009faa:	89a3      	ldrh	r3, [r4, #12]
 8009fac:	f043 0320 	orr.w	r3, r3, #32
 8009fb0:	81a3      	strh	r3, [r4, #12]
 8009fb2:	bd10      	pop	{r4, pc}

08009fb4 <_sfread_r>:
 8009fb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb8:	4615      	mov	r5, r2
 8009fba:	435d      	muls	r5, r3
 8009fbc:	4682      	mov	sl, r0
 8009fbe:	4691      	mov	r9, r2
 8009fc0:	4698      	mov	r8, r3
 8009fc2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009fc4:	d029      	beq.n	800a01a <_sfread_r+0x66>
 8009fc6:	460f      	mov	r7, r1
 8009fc8:	462e      	mov	r6, r5
 8009fca:	f04f 0b00 	mov.w	fp, #0
 8009fce:	6863      	ldr	r3, [r4, #4]
 8009fd0:	429e      	cmp	r6, r3
 8009fd2:	d80c      	bhi.n	8009fee <_sfread_r+0x3a>
 8009fd4:	4632      	mov	r2, r6
 8009fd6:	6821      	ldr	r1, [r4, #0]
 8009fd8:	4638      	mov	r0, r7
 8009fda:	f7fb fb8b 	bl	80056f4 <memcpy>
 8009fde:	6863      	ldr	r3, [r4, #4]
 8009fe0:	6825      	ldr	r5, [r4, #0]
 8009fe2:	1b9b      	subs	r3, r3, r6
 8009fe4:	4435      	add	r5, r6
 8009fe6:	6025      	str	r5, [r4, #0]
 8009fe8:	6063      	str	r3, [r4, #4]
 8009fea:	4645      	mov	r5, r8
 8009fec:	e015      	b.n	800a01a <_sfread_r+0x66>
 8009fee:	461a      	mov	r2, r3
 8009ff0:	6821      	ldr	r1, [r4, #0]
 8009ff2:	4638      	mov	r0, r7
 8009ff4:	9301      	str	r3, [sp, #4]
 8009ff6:	f7fb fb7d 	bl	80056f4 <memcpy>
 8009ffa:	9b01      	ldr	r3, [sp, #4]
 8009ffc:	6822      	ldr	r2, [r4, #0]
 8009ffe:	4621      	mov	r1, r4
 800a000:	441a      	add	r2, r3
 800a002:	e884 0804 	stmia.w	r4, {r2, fp}
 800a006:	4650      	mov	r0, sl
 800a008:	441f      	add	r7, r3
 800a00a:	1af6      	subs	r6, r6, r3
 800a00c:	f7ff ffb5 	bl	8009f7a <__ssrefill_r>
 800a010:	2800      	cmp	r0, #0
 800a012:	d0dc      	beq.n	8009fce <_sfread_r+0x1a>
 800a014:	1bad      	subs	r5, r5, r6
 800a016:	fbb5 f5f9 	udiv	r5, r5, r9
 800a01a:	4628      	mov	r0, r5
 800a01c:	b003      	add	sp, #12
 800a01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a022 <__submore>:
 800a022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a026:	460c      	mov	r4, r1
 800a028:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a02a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a02e:	4299      	cmp	r1, r3
 800a030:	d11c      	bne.n	800a06c <__submore+0x4a>
 800a032:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a036:	f7fd ffa5 	bl	8007f84 <_malloc_r>
 800a03a:	b918      	cbnz	r0, 800a044 <__submore+0x22>
 800a03c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a044:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a048:	63a3      	str	r3, [r4, #56]	; 0x38
 800a04a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a04e:	6360      	str	r0, [r4, #52]	; 0x34
 800a050:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a054:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a058:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a05c:	7043      	strb	r3, [r0, #1]
 800a05e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a062:	7003      	strb	r3, [r0, #0]
 800a064:	6020      	str	r0, [r4, #0]
 800a066:	2000      	movs	r0, #0
 800a068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a06c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a06e:	0077      	lsls	r7, r6, #1
 800a070:	463a      	mov	r2, r7
 800a072:	f000 fc95 	bl	800a9a0 <_realloc_r>
 800a076:	4605      	mov	r5, r0
 800a078:	2800      	cmp	r0, #0
 800a07a:	d0df      	beq.n	800a03c <__submore+0x1a>
 800a07c:	eb00 0806 	add.w	r8, r0, r6
 800a080:	4601      	mov	r1, r0
 800a082:	4632      	mov	r2, r6
 800a084:	4640      	mov	r0, r8
 800a086:	f7fb fb35 	bl	80056f4 <memcpy>
 800a08a:	f8c4 8000 	str.w	r8, [r4]
 800a08e:	6365      	str	r5, [r4, #52]	; 0x34
 800a090:	63a7      	str	r7, [r4, #56]	; 0x38
 800a092:	e7e8      	b.n	800a066 <__submore+0x44>

0800a094 <__ascii_wctomb>:
 800a094:	b149      	cbz	r1, 800a0aa <__ascii_wctomb+0x16>
 800a096:	2aff      	cmp	r2, #255	; 0xff
 800a098:	bf8b      	itete	hi
 800a09a:	238a      	movhi	r3, #138	; 0x8a
 800a09c:	700a      	strbls	r2, [r1, #0]
 800a09e:	6003      	strhi	r3, [r0, #0]
 800a0a0:	2001      	movls	r0, #1
 800a0a2:	bf88      	it	hi
 800a0a4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a0a8:	4770      	bx	lr
 800a0aa:	4608      	mov	r0, r1
 800a0ac:	4770      	bx	lr

0800a0ae <_calloc_r>:
 800a0ae:	b510      	push	{r4, lr}
 800a0b0:	4351      	muls	r1, r2
 800a0b2:	f7fd ff67 	bl	8007f84 <_malloc_r>
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	b198      	cbz	r0, 800a0e2 <_calloc_r+0x34>
 800a0ba:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a0be:	f022 0203 	bic.w	r2, r2, #3
 800a0c2:	3a04      	subs	r2, #4
 800a0c4:	2a24      	cmp	r2, #36	; 0x24
 800a0c6:	d81b      	bhi.n	800a100 <_calloc_r+0x52>
 800a0c8:	2a13      	cmp	r2, #19
 800a0ca:	d917      	bls.n	800a0fc <_calloc_r+0x4e>
 800a0cc:	2100      	movs	r1, #0
 800a0ce:	2a1b      	cmp	r2, #27
 800a0d0:	6001      	str	r1, [r0, #0]
 800a0d2:	6041      	str	r1, [r0, #4]
 800a0d4:	d807      	bhi.n	800a0e6 <_calloc_r+0x38>
 800a0d6:	f100 0308 	add.w	r3, r0, #8
 800a0da:	2200      	movs	r2, #0
 800a0dc:	601a      	str	r2, [r3, #0]
 800a0de:	605a      	str	r2, [r3, #4]
 800a0e0:	609a      	str	r2, [r3, #8]
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	bd10      	pop	{r4, pc}
 800a0e6:	2a24      	cmp	r2, #36	; 0x24
 800a0e8:	6081      	str	r1, [r0, #8]
 800a0ea:	60c1      	str	r1, [r0, #12]
 800a0ec:	bf11      	iteee	ne
 800a0ee:	f100 0310 	addne.w	r3, r0, #16
 800a0f2:	6101      	streq	r1, [r0, #16]
 800a0f4:	f100 0318 	addeq.w	r3, r0, #24
 800a0f8:	6141      	streq	r1, [r0, #20]
 800a0fa:	e7ee      	b.n	800a0da <_calloc_r+0x2c>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	e7ec      	b.n	800a0da <_calloc_r+0x2c>
 800a100:	2100      	movs	r1, #0
 800a102:	f7fb fb02 	bl	800570a <memset>
 800a106:	e7ec      	b.n	800a0e2 <_calloc_r+0x34>

0800a108 <_malloc_trim_r>:
 800a108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a10c:	4689      	mov	r9, r1
 800a10e:	4f25      	ldr	r7, [pc, #148]	; (800a1a4 <_malloc_trim_r+0x9c>)
 800a110:	4606      	mov	r6, r0
 800a112:	f7fe f98f 	bl	8008434 <__malloc_lock>
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800a1b0 <_malloc_trim_r+0xa8>
 800a11c:	685d      	ldr	r5, [r3, #4]
 800a11e:	f1a8 0411 	sub.w	r4, r8, #17
 800a122:	f025 0503 	bic.w	r5, r5, #3
 800a126:	eba4 0409 	sub.w	r4, r4, r9
 800a12a:	442c      	add	r4, r5
 800a12c:	fbb4 f4f8 	udiv	r4, r4, r8
 800a130:	3c01      	subs	r4, #1
 800a132:	fb08 f404 	mul.w	r4, r8, r4
 800a136:	4544      	cmp	r4, r8
 800a138:	da05      	bge.n	800a146 <_malloc_trim_r+0x3e>
 800a13a:	4630      	mov	r0, r6
 800a13c:	f7fe f980 	bl	8008440 <__malloc_unlock>
 800a140:	2000      	movs	r0, #0
 800a142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a146:	2100      	movs	r1, #0
 800a148:	4630      	mov	r0, r6
 800a14a:	f7fe fd67 	bl	8008c1c <_sbrk_r>
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	442b      	add	r3, r5
 800a152:	4298      	cmp	r0, r3
 800a154:	d1f1      	bne.n	800a13a <_malloc_trim_r+0x32>
 800a156:	4261      	negs	r1, r4
 800a158:	4630      	mov	r0, r6
 800a15a:	f7fe fd5f 	bl	8008c1c <_sbrk_r>
 800a15e:	3001      	adds	r0, #1
 800a160:	d110      	bne.n	800a184 <_malloc_trim_r+0x7c>
 800a162:	2100      	movs	r1, #0
 800a164:	4630      	mov	r0, r6
 800a166:	f7fe fd59 	bl	8008c1c <_sbrk_r>
 800a16a:	68ba      	ldr	r2, [r7, #8]
 800a16c:	1a83      	subs	r3, r0, r2
 800a16e:	2b0f      	cmp	r3, #15
 800a170:	dde3      	ble.n	800a13a <_malloc_trim_r+0x32>
 800a172:	490d      	ldr	r1, [pc, #52]	; (800a1a8 <_malloc_trim_r+0xa0>)
 800a174:	f043 0301 	orr.w	r3, r3, #1
 800a178:	6809      	ldr	r1, [r1, #0]
 800a17a:	6053      	str	r3, [r2, #4]
 800a17c:	1a40      	subs	r0, r0, r1
 800a17e:	490b      	ldr	r1, [pc, #44]	; (800a1ac <_malloc_trim_r+0xa4>)
 800a180:	6008      	str	r0, [r1, #0]
 800a182:	e7da      	b.n	800a13a <_malloc_trim_r+0x32>
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	4a09      	ldr	r2, [pc, #36]	; (800a1ac <_malloc_trim_r+0xa4>)
 800a188:	1b2d      	subs	r5, r5, r4
 800a18a:	f045 0501 	orr.w	r5, r5, #1
 800a18e:	605d      	str	r5, [r3, #4]
 800a190:	6813      	ldr	r3, [r2, #0]
 800a192:	4630      	mov	r0, r6
 800a194:	1b1c      	subs	r4, r3, r4
 800a196:	6014      	str	r4, [r2, #0]
 800a198:	f7fe f952 	bl	8008440 <__malloc_unlock>
 800a19c:	2001      	movs	r0, #1
 800a19e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1a2:	bf00      	nop
 800a1a4:	20000314 	.word	0x20000314
 800a1a8:	2000071c 	.word	0x2000071c
 800a1ac:	200011d4 	.word	0x200011d4
 800a1b0:	00001000 	.word	0x00001000

0800a1b4 <_free_r>:
 800a1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b8:	4604      	mov	r4, r0
 800a1ba:	4688      	mov	r8, r1
 800a1bc:	2900      	cmp	r1, #0
 800a1be:	f000 80ab 	beq.w	800a318 <_free_r+0x164>
 800a1c2:	f7fe f937 	bl	8008434 <__malloc_lock>
 800a1c6:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800a1ca:	4d54      	ldr	r5, [pc, #336]	; (800a31c <_free_r+0x168>)
 800a1cc:	f022 0001 	bic.w	r0, r2, #1
 800a1d0:	f1a8 0308 	sub.w	r3, r8, #8
 800a1d4:	181f      	adds	r7, r3, r0
 800a1d6:	68a9      	ldr	r1, [r5, #8]
 800a1d8:	687e      	ldr	r6, [r7, #4]
 800a1da:	428f      	cmp	r7, r1
 800a1dc:	f026 0603 	bic.w	r6, r6, #3
 800a1e0:	f002 0201 	and.w	r2, r2, #1
 800a1e4:	d11b      	bne.n	800a21e <_free_r+0x6a>
 800a1e6:	4430      	add	r0, r6
 800a1e8:	b93a      	cbnz	r2, 800a1fa <_free_r+0x46>
 800a1ea:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800a1ee:	1a9b      	subs	r3, r3, r2
 800a1f0:	6899      	ldr	r1, [r3, #8]
 800a1f2:	4410      	add	r0, r2
 800a1f4:	68da      	ldr	r2, [r3, #12]
 800a1f6:	60ca      	str	r2, [r1, #12]
 800a1f8:	6091      	str	r1, [r2, #8]
 800a1fa:	f040 0201 	orr.w	r2, r0, #1
 800a1fe:	605a      	str	r2, [r3, #4]
 800a200:	60ab      	str	r3, [r5, #8]
 800a202:	4b47      	ldr	r3, [pc, #284]	; (800a320 <_free_r+0x16c>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4298      	cmp	r0, r3
 800a208:	d304      	bcc.n	800a214 <_free_r+0x60>
 800a20a:	4b46      	ldr	r3, [pc, #280]	; (800a324 <_free_r+0x170>)
 800a20c:	4620      	mov	r0, r4
 800a20e:	6819      	ldr	r1, [r3, #0]
 800a210:	f7ff ff7a 	bl	800a108 <_malloc_trim_r>
 800a214:	4620      	mov	r0, r4
 800a216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a21a:	f7fe b911 	b.w	8008440 <__malloc_unlock>
 800a21e:	607e      	str	r6, [r7, #4]
 800a220:	2a00      	cmp	r2, #0
 800a222:	d139      	bne.n	800a298 <_free_r+0xe4>
 800a224:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800a228:	f105 0e08 	add.w	lr, r5, #8
 800a22c:	1a5b      	subs	r3, r3, r1
 800a22e:	4408      	add	r0, r1
 800a230:	6899      	ldr	r1, [r3, #8]
 800a232:	4571      	cmp	r1, lr
 800a234:	d032      	beq.n	800a29c <_free_r+0xe8>
 800a236:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800a23a:	f8c1 e00c 	str.w	lr, [r1, #12]
 800a23e:	f8ce 1008 	str.w	r1, [lr, #8]
 800a242:	19b9      	adds	r1, r7, r6
 800a244:	6849      	ldr	r1, [r1, #4]
 800a246:	07c9      	lsls	r1, r1, #31
 800a248:	d40a      	bmi.n	800a260 <_free_r+0xac>
 800a24a:	4430      	add	r0, r6
 800a24c:	68b9      	ldr	r1, [r7, #8]
 800a24e:	bb3a      	cbnz	r2, 800a2a0 <_free_r+0xec>
 800a250:	4e35      	ldr	r6, [pc, #212]	; (800a328 <_free_r+0x174>)
 800a252:	42b1      	cmp	r1, r6
 800a254:	d124      	bne.n	800a2a0 <_free_r+0xec>
 800a256:	2201      	movs	r2, #1
 800a258:	616b      	str	r3, [r5, #20]
 800a25a:	612b      	str	r3, [r5, #16]
 800a25c:	60d9      	str	r1, [r3, #12]
 800a25e:	6099      	str	r1, [r3, #8]
 800a260:	f040 0101 	orr.w	r1, r0, #1
 800a264:	6059      	str	r1, [r3, #4]
 800a266:	5018      	str	r0, [r3, r0]
 800a268:	2a00      	cmp	r2, #0
 800a26a:	d1d3      	bne.n	800a214 <_free_r+0x60>
 800a26c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a270:	d21a      	bcs.n	800a2a8 <_free_r+0xf4>
 800a272:	2201      	movs	r2, #1
 800a274:	08c0      	lsrs	r0, r0, #3
 800a276:	1081      	asrs	r1, r0, #2
 800a278:	408a      	lsls	r2, r1
 800a27a:	6869      	ldr	r1, [r5, #4]
 800a27c:	3001      	adds	r0, #1
 800a27e:	430a      	orrs	r2, r1
 800a280:	606a      	str	r2, [r5, #4]
 800a282:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800a286:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800a28a:	3a08      	subs	r2, #8
 800a28c:	60da      	str	r2, [r3, #12]
 800a28e:	6099      	str	r1, [r3, #8]
 800a290:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800a294:	60cb      	str	r3, [r1, #12]
 800a296:	e7bd      	b.n	800a214 <_free_r+0x60>
 800a298:	2200      	movs	r2, #0
 800a29a:	e7d2      	b.n	800a242 <_free_r+0x8e>
 800a29c:	2201      	movs	r2, #1
 800a29e:	e7d0      	b.n	800a242 <_free_r+0x8e>
 800a2a0:	68fe      	ldr	r6, [r7, #12]
 800a2a2:	60ce      	str	r6, [r1, #12]
 800a2a4:	60b1      	str	r1, [r6, #8]
 800a2a6:	e7db      	b.n	800a260 <_free_r+0xac>
 800a2a8:	0a42      	lsrs	r2, r0, #9
 800a2aa:	2a04      	cmp	r2, #4
 800a2ac:	d813      	bhi.n	800a2d6 <_free_r+0x122>
 800a2ae:	0982      	lsrs	r2, r0, #6
 800a2b0:	3238      	adds	r2, #56	; 0x38
 800a2b2:	1c51      	adds	r1, r2, #1
 800a2b4:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800a2b8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800a2bc:	428e      	cmp	r6, r1
 800a2be:	d124      	bne.n	800a30a <_free_r+0x156>
 800a2c0:	2001      	movs	r0, #1
 800a2c2:	1092      	asrs	r2, r2, #2
 800a2c4:	fa00 f202 	lsl.w	r2, r0, r2
 800a2c8:	6868      	ldr	r0, [r5, #4]
 800a2ca:	4302      	orrs	r2, r0
 800a2cc:	606a      	str	r2, [r5, #4]
 800a2ce:	60de      	str	r6, [r3, #12]
 800a2d0:	6099      	str	r1, [r3, #8]
 800a2d2:	60b3      	str	r3, [r6, #8]
 800a2d4:	e7de      	b.n	800a294 <_free_r+0xe0>
 800a2d6:	2a14      	cmp	r2, #20
 800a2d8:	d801      	bhi.n	800a2de <_free_r+0x12a>
 800a2da:	325b      	adds	r2, #91	; 0x5b
 800a2dc:	e7e9      	b.n	800a2b2 <_free_r+0xfe>
 800a2de:	2a54      	cmp	r2, #84	; 0x54
 800a2e0:	d802      	bhi.n	800a2e8 <_free_r+0x134>
 800a2e2:	0b02      	lsrs	r2, r0, #12
 800a2e4:	326e      	adds	r2, #110	; 0x6e
 800a2e6:	e7e4      	b.n	800a2b2 <_free_r+0xfe>
 800a2e8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a2ec:	d802      	bhi.n	800a2f4 <_free_r+0x140>
 800a2ee:	0bc2      	lsrs	r2, r0, #15
 800a2f0:	3277      	adds	r2, #119	; 0x77
 800a2f2:	e7de      	b.n	800a2b2 <_free_r+0xfe>
 800a2f4:	f240 5154 	movw	r1, #1364	; 0x554
 800a2f8:	428a      	cmp	r2, r1
 800a2fa:	bf9a      	itte	ls
 800a2fc:	0c82      	lsrls	r2, r0, #18
 800a2fe:	327c      	addls	r2, #124	; 0x7c
 800a300:	227e      	movhi	r2, #126	; 0x7e
 800a302:	e7d6      	b.n	800a2b2 <_free_r+0xfe>
 800a304:	6889      	ldr	r1, [r1, #8]
 800a306:	428e      	cmp	r6, r1
 800a308:	d004      	beq.n	800a314 <_free_r+0x160>
 800a30a:	684a      	ldr	r2, [r1, #4]
 800a30c:	f022 0203 	bic.w	r2, r2, #3
 800a310:	4290      	cmp	r0, r2
 800a312:	d3f7      	bcc.n	800a304 <_free_r+0x150>
 800a314:	68ce      	ldr	r6, [r1, #12]
 800a316:	e7da      	b.n	800a2ce <_free_r+0x11a>
 800a318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a31c:	20000314 	.word	0x20000314
 800a320:	20000720 	.word	0x20000720
 800a324:	20001204 	.word	0x20001204
 800a328:	2000031c 	.word	0x2000031c

0800a32c <rshift>:
 800a32c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a32e:	6906      	ldr	r6, [r0, #16]
 800a330:	114b      	asrs	r3, r1, #5
 800a332:	42b3      	cmp	r3, r6
 800a334:	f100 0514 	add.w	r5, r0, #20
 800a338:	da2b      	bge.n	800a392 <rshift+0x66>
 800a33a:	f011 011f 	ands.w	r1, r1, #31
 800a33e:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 800a342:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 800a346:	d108      	bne.n	800a35a <rshift+0x2e>
 800a348:	4629      	mov	r1, r5
 800a34a:	42b2      	cmp	r2, r6
 800a34c:	460b      	mov	r3, r1
 800a34e:	d210      	bcs.n	800a372 <rshift+0x46>
 800a350:	f852 3b04 	ldr.w	r3, [r2], #4
 800a354:	f841 3b04 	str.w	r3, [r1], #4
 800a358:	e7f7      	b.n	800a34a <rshift+0x1e>
 800a35a:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800a35e:	462b      	mov	r3, r5
 800a360:	f1c1 0e20 	rsb	lr, r1, #32
 800a364:	3204      	adds	r2, #4
 800a366:	40cc      	lsrs	r4, r1
 800a368:	42b2      	cmp	r2, r6
 800a36a:	d308      	bcc.n	800a37e <rshift+0x52>
 800a36c:	601c      	str	r4, [r3, #0]
 800a36e:	b104      	cbz	r4, 800a372 <rshift+0x46>
 800a370:	3304      	adds	r3, #4
 800a372:	1b5b      	subs	r3, r3, r5
 800a374:	109b      	asrs	r3, r3, #2
 800a376:	6103      	str	r3, [r0, #16]
 800a378:	b903      	cbnz	r3, 800a37c <rshift+0x50>
 800a37a:	6143      	str	r3, [r0, #20]
 800a37c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a37e:	6817      	ldr	r7, [r2, #0]
 800a380:	fa07 f70e 	lsl.w	r7, r7, lr
 800a384:	433c      	orrs	r4, r7
 800a386:	f843 4b04 	str.w	r4, [r3], #4
 800a38a:	f852 4b04 	ldr.w	r4, [r2], #4
 800a38e:	40cc      	lsrs	r4, r1
 800a390:	e7ea      	b.n	800a368 <rshift+0x3c>
 800a392:	462b      	mov	r3, r5
 800a394:	e7ed      	b.n	800a372 <rshift+0x46>

0800a396 <__hexdig_fun>:
 800a396:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a39a:	2b09      	cmp	r3, #9
 800a39c:	d802      	bhi.n	800a3a4 <__hexdig_fun+0xe>
 800a39e:	3820      	subs	r0, #32
 800a3a0:	b2c0      	uxtb	r0, r0
 800a3a2:	4770      	bx	lr
 800a3a4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a3a8:	2b05      	cmp	r3, #5
 800a3aa:	d801      	bhi.n	800a3b0 <__hexdig_fun+0x1a>
 800a3ac:	3847      	subs	r0, #71	; 0x47
 800a3ae:	e7f7      	b.n	800a3a0 <__hexdig_fun+0xa>
 800a3b0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a3b4:	2b05      	cmp	r3, #5
 800a3b6:	d801      	bhi.n	800a3bc <__hexdig_fun+0x26>
 800a3b8:	3827      	subs	r0, #39	; 0x27
 800a3ba:	e7f1      	b.n	800a3a0 <__hexdig_fun+0xa>
 800a3bc:	2000      	movs	r0, #0
 800a3be:	4770      	bx	lr

0800a3c0 <__gethex>:
 800a3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c4:	b08b      	sub	sp, #44	; 0x2c
 800a3c6:	9002      	str	r0, [sp, #8]
 800a3c8:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a3ca:	468a      	mov	sl, r1
 800a3cc:	4690      	mov	r8, r2
 800a3ce:	9306      	str	r3, [sp, #24]
 800a3d0:	f7fd fdc0 	bl	8007f54 <__localeconv_l>
 800a3d4:	6803      	ldr	r3, [r0, #0]
 800a3d6:	f04f 0b00 	mov.w	fp, #0
 800a3da:	4618      	mov	r0, r3
 800a3dc:	9303      	str	r3, [sp, #12]
 800a3de:	f7f5 fec1 	bl	8000164 <strlen>
 800a3e2:	9b03      	ldr	r3, [sp, #12]
 800a3e4:	9001      	str	r0, [sp, #4]
 800a3e6:	4403      	add	r3, r0
 800a3e8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a3ec:	9307      	str	r3, [sp, #28]
 800a3ee:	f8da 3000 	ldr.w	r3, [sl]
 800a3f2:	3302      	adds	r3, #2
 800a3f4:	461f      	mov	r7, r3
 800a3f6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a3fa:	2830      	cmp	r0, #48	; 0x30
 800a3fc:	d06c      	beq.n	800a4d8 <__gethex+0x118>
 800a3fe:	f7ff ffca 	bl	800a396 <__hexdig_fun>
 800a402:	4604      	mov	r4, r0
 800a404:	2800      	cmp	r0, #0
 800a406:	d16a      	bne.n	800a4de <__gethex+0x11e>
 800a408:	9a01      	ldr	r2, [sp, #4]
 800a40a:	9903      	ldr	r1, [sp, #12]
 800a40c:	4638      	mov	r0, r7
 800a40e:	f000 fc49 	bl	800aca4 <strncmp>
 800a412:	2800      	cmp	r0, #0
 800a414:	d166      	bne.n	800a4e4 <__gethex+0x124>
 800a416:	9b01      	ldr	r3, [sp, #4]
 800a418:	5cf8      	ldrb	r0, [r7, r3]
 800a41a:	18fe      	adds	r6, r7, r3
 800a41c:	f7ff ffbb 	bl	800a396 <__hexdig_fun>
 800a420:	2800      	cmp	r0, #0
 800a422:	d062      	beq.n	800a4ea <__gethex+0x12a>
 800a424:	4633      	mov	r3, r6
 800a426:	7818      	ldrb	r0, [r3, #0]
 800a428:	461f      	mov	r7, r3
 800a42a:	2830      	cmp	r0, #48	; 0x30
 800a42c:	f103 0301 	add.w	r3, r3, #1
 800a430:	d0f9      	beq.n	800a426 <__gethex+0x66>
 800a432:	f7ff ffb0 	bl	800a396 <__hexdig_fun>
 800a436:	fab0 f580 	clz	r5, r0
 800a43a:	4634      	mov	r4, r6
 800a43c:	f04f 0b01 	mov.w	fp, #1
 800a440:	096d      	lsrs	r5, r5, #5
 800a442:	463a      	mov	r2, r7
 800a444:	4616      	mov	r6, r2
 800a446:	7830      	ldrb	r0, [r6, #0]
 800a448:	3201      	adds	r2, #1
 800a44a:	f7ff ffa4 	bl	800a396 <__hexdig_fun>
 800a44e:	2800      	cmp	r0, #0
 800a450:	d1f8      	bne.n	800a444 <__gethex+0x84>
 800a452:	9a01      	ldr	r2, [sp, #4]
 800a454:	9903      	ldr	r1, [sp, #12]
 800a456:	4630      	mov	r0, r6
 800a458:	f000 fc24 	bl	800aca4 <strncmp>
 800a45c:	b950      	cbnz	r0, 800a474 <__gethex+0xb4>
 800a45e:	b954      	cbnz	r4, 800a476 <__gethex+0xb6>
 800a460:	9b01      	ldr	r3, [sp, #4]
 800a462:	18f4      	adds	r4, r6, r3
 800a464:	4622      	mov	r2, r4
 800a466:	4616      	mov	r6, r2
 800a468:	7830      	ldrb	r0, [r6, #0]
 800a46a:	3201      	adds	r2, #1
 800a46c:	f7ff ff93 	bl	800a396 <__hexdig_fun>
 800a470:	2800      	cmp	r0, #0
 800a472:	d1f8      	bne.n	800a466 <__gethex+0xa6>
 800a474:	b10c      	cbz	r4, 800a47a <__gethex+0xba>
 800a476:	1ba4      	subs	r4, r4, r6
 800a478:	00a4      	lsls	r4, r4, #2
 800a47a:	7833      	ldrb	r3, [r6, #0]
 800a47c:	2b50      	cmp	r3, #80	; 0x50
 800a47e:	d001      	beq.n	800a484 <__gethex+0xc4>
 800a480:	2b70      	cmp	r3, #112	; 0x70
 800a482:	d140      	bne.n	800a506 <__gethex+0x146>
 800a484:	7873      	ldrb	r3, [r6, #1]
 800a486:	2b2b      	cmp	r3, #43	; 0x2b
 800a488:	d035      	beq.n	800a4f6 <__gethex+0x136>
 800a48a:	2b2d      	cmp	r3, #45	; 0x2d
 800a48c:	d02f      	beq.n	800a4ee <__gethex+0x12e>
 800a48e:	f04f 0900 	mov.w	r9, #0
 800a492:	1c71      	adds	r1, r6, #1
 800a494:	7808      	ldrb	r0, [r1, #0]
 800a496:	f7ff ff7e 	bl	800a396 <__hexdig_fun>
 800a49a:	1e43      	subs	r3, r0, #1
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	2b18      	cmp	r3, #24
 800a4a0:	d831      	bhi.n	800a506 <__gethex+0x146>
 800a4a2:	f1a0 0210 	sub.w	r2, r0, #16
 800a4a6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a4aa:	f7ff ff74 	bl	800a396 <__hexdig_fun>
 800a4ae:	1e43      	subs	r3, r0, #1
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	2b18      	cmp	r3, #24
 800a4b4:	d922      	bls.n	800a4fc <__gethex+0x13c>
 800a4b6:	f1b9 0f00 	cmp.w	r9, #0
 800a4ba:	d000      	beq.n	800a4be <__gethex+0xfe>
 800a4bc:	4252      	negs	r2, r2
 800a4be:	4414      	add	r4, r2
 800a4c0:	f8ca 1000 	str.w	r1, [sl]
 800a4c4:	b30d      	cbz	r5, 800a50a <__gethex+0x14a>
 800a4c6:	f1bb 0f00 	cmp.w	fp, #0
 800a4ca:	bf14      	ite	ne
 800a4cc:	2700      	movne	r7, #0
 800a4ce:	2706      	moveq	r7, #6
 800a4d0:	4638      	mov	r0, r7
 800a4d2:	b00b      	add	sp, #44	; 0x2c
 800a4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d8:	f10b 0b01 	add.w	fp, fp, #1
 800a4dc:	e78a      	b.n	800a3f4 <__gethex+0x34>
 800a4de:	2500      	movs	r5, #0
 800a4e0:	462c      	mov	r4, r5
 800a4e2:	e7ae      	b.n	800a442 <__gethex+0x82>
 800a4e4:	463e      	mov	r6, r7
 800a4e6:	2501      	movs	r5, #1
 800a4e8:	e7c7      	b.n	800a47a <__gethex+0xba>
 800a4ea:	4604      	mov	r4, r0
 800a4ec:	e7fb      	b.n	800a4e6 <__gethex+0x126>
 800a4ee:	f04f 0901 	mov.w	r9, #1
 800a4f2:	1cb1      	adds	r1, r6, #2
 800a4f4:	e7ce      	b.n	800a494 <__gethex+0xd4>
 800a4f6:	f04f 0900 	mov.w	r9, #0
 800a4fa:	e7fa      	b.n	800a4f2 <__gethex+0x132>
 800a4fc:	230a      	movs	r3, #10
 800a4fe:	fb03 0202 	mla	r2, r3, r2, r0
 800a502:	3a10      	subs	r2, #16
 800a504:	e7cf      	b.n	800a4a6 <__gethex+0xe6>
 800a506:	4631      	mov	r1, r6
 800a508:	e7da      	b.n	800a4c0 <__gethex+0x100>
 800a50a:	4629      	mov	r1, r5
 800a50c:	1bf3      	subs	r3, r6, r7
 800a50e:	3b01      	subs	r3, #1
 800a510:	2b07      	cmp	r3, #7
 800a512:	dc49      	bgt.n	800a5a8 <__gethex+0x1e8>
 800a514:	9802      	ldr	r0, [sp, #8]
 800a516:	f7fd ff99 	bl	800844c <_Balloc>
 800a51a:	f04f 0b00 	mov.w	fp, #0
 800a51e:	4605      	mov	r5, r0
 800a520:	46da      	mov	sl, fp
 800a522:	9b01      	ldr	r3, [sp, #4]
 800a524:	f100 0914 	add.w	r9, r0, #20
 800a528:	f1c3 0301 	rsb	r3, r3, #1
 800a52c:	f8cd 9010 	str.w	r9, [sp, #16]
 800a530:	9308      	str	r3, [sp, #32]
 800a532:	42b7      	cmp	r7, r6
 800a534:	d33b      	bcc.n	800a5ae <__gethex+0x1ee>
 800a536:	9804      	ldr	r0, [sp, #16]
 800a538:	f840 ab04 	str.w	sl, [r0], #4
 800a53c:	eba0 0009 	sub.w	r0, r0, r9
 800a540:	1080      	asrs	r0, r0, #2
 800a542:	6128      	str	r0, [r5, #16]
 800a544:	0147      	lsls	r7, r0, #5
 800a546:	4650      	mov	r0, sl
 800a548:	f7fe f844 	bl	80085d4 <__hi0bits>
 800a54c:	f8d8 6000 	ldr.w	r6, [r8]
 800a550:	1a3f      	subs	r7, r7, r0
 800a552:	42b7      	cmp	r7, r6
 800a554:	dd64      	ble.n	800a620 <__gethex+0x260>
 800a556:	1bbf      	subs	r7, r7, r6
 800a558:	4639      	mov	r1, r7
 800a55a:	4628      	mov	r0, r5
 800a55c:	f7fe fb3d 	bl	8008bda <__any_on>
 800a560:	4682      	mov	sl, r0
 800a562:	b178      	cbz	r0, 800a584 <__gethex+0x1c4>
 800a564:	f04f 0a01 	mov.w	sl, #1
 800a568:	1e7b      	subs	r3, r7, #1
 800a56a:	1159      	asrs	r1, r3, #5
 800a56c:	f003 021f 	and.w	r2, r3, #31
 800a570:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a574:	fa0a f202 	lsl.w	r2, sl, r2
 800a578:	420a      	tst	r2, r1
 800a57a:	d003      	beq.n	800a584 <__gethex+0x1c4>
 800a57c:	4553      	cmp	r3, sl
 800a57e:	dc46      	bgt.n	800a60e <__gethex+0x24e>
 800a580:	f04f 0a02 	mov.w	sl, #2
 800a584:	4639      	mov	r1, r7
 800a586:	4628      	mov	r0, r5
 800a588:	f7ff fed0 	bl	800a32c <rshift>
 800a58c:	443c      	add	r4, r7
 800a58e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a592:	429c      	cmp	r4, r3
 800a594:	dd52      	ble.n	800a63c <__gethex+0x27c>
 800a596:	4629      	mov	r1, r5
 800a598:	9802      	ldr	r0, [sp, #8]
 800a59a:	f7fd ff8b 	bl	80084b4 <_Bfree>
 800a59e:	2300      	movs	r3, #0
 800a5a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a5a2:	27a3      	movs	r7, #163	; 0xa3
 800a5a4:	6013      	str	r3, [r2, #0]
 800a5a6:	e793      	b.n	800a4d0 <__gethex+0x110>
 800a5a8:	3101      	adds	r1, #1
 800a5aa:	105b      	asrs	r3, r3, #1
 800a5ac:	e7b0      	b.n	800a510 <__gethex+0x150>
 800a5ae:	1e73      	subs	r3, r6, #1
 800a5b0:	9305      	str	r3, [sp, #20]
 800a5b2:	9a07      	ldr	r2, [sp, #28]
 800a5b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d018      	beq.n	800a5ee <__gethex+0x22e>
 800a5bc:	f1bb 0f20 	cmp.w	fp, #32
 800a5c0:	d107      	bne.n	800a5d2 <__gethex+0x212>
 800a5c2:	9b04      	ldr	r3, [sp, #16]
 800a5c4:	f8c3 a000 	str.w	sl, [r3]
 800a5c8:	f04f 0a00 	mov.w	sl, #0
 800a5cc:	46d3      	mov	fp, sl
 800a5ce:	3304      	adds	r3, #4
 800a5d0:	9304      	str	r3, [sp, #16]
 800a5d2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a5d6:	f7ff fede 	bl	800a396 <__hexdig_fun>
 800a5da:	f000 000f 	and.w	r0, r0, #15
 800a5de:	fa00 f00b 	lsl.w	r0, r0, fp
 800a5e2:	ea4a 0a00 	orr.w	sl, sl, r0
 800a5e6:	f10b 0b04 	add.w	fp, fp, #4
 800a5ea:	9b05      	ldr	r3, [sp, #20]
 800a5ec:	e00d      	b.n	800a60a <__gethex+0x24a>
 800a5ee:	9b05      	ldr	r3, [sp, #20]
 800a5f0:	9a08      	ldr	r2, [sp, #32]
 800a5f2:	4413      	add	r3, r2
 800a5f4:	429f      	cmp	r7, r3
 800a5f6:	d8e1      	bhi.n	800a5bc <__gethex+0x1fc>
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	9a01      	ldr	r2, [sp, #4]
 800a5fc:	9903      	ldr	r1, [sp, #12]
 800a5fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a600:	f000 fb50 	bl	800aca4 <strncmp>
 800a604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a606:	2800      	cmp	r0, #0
 800a608:	d1d8      	bne.n	800a5bc <__gethex+0x1fc>
 800a60a:	461e      	mov	r6, r3
 800a60c:	e791      	b.n	800a532 <__gethex+0x172>
 800a60e:	1eb9      	subs	r1, r7, #2
 800a610:	4628      	mov	r0, r5
 800a612:	f7fe fae2 	bl	8008bda <__any_on>
 800a616:	2800      	cmp	r0, #0
 800a618:	d0b2      	beq.n	800a580 <__gethex+0x1c0>
 800a61a:	f04f 0a03 	mov.w	sl, #3
 800a61e:	e7b1      	b.n	800a584 <__gethex+0x1c4>
 800a620:	da09      	bge.n	800a636 <__gethex+0x276>
 800a622:	1bf7      	subs	r7, r6, r7
 800a624:	4629      	mov	r1, r5
 800a626:	463a      	mov	r2, r7
 800a628:	9802      	ldr	r0, [sp, #8]
 800a62a:	f7fe f905 	bl	8008838 <__lshift>
 800a62e:	4605      	mov	r5, r0
 800a630:	1be4      	subs	r4, r4, r7
 800a632:	f100 0914 	add.w	r9, r0, #20
 800a636:	f04f 0a00 	mov.w	sl, #0
 800a63a:	e7a8      	b.n	800a58e <__gethex+0x1ce>
 800a63c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a640:	4284      	cmp	r4, r0
 800a642:	da6b      	bge.n	800a71c <__gethex+0x35c>
 800a644:	1b04      	subs	r4, r0, r4
 800a646:	42a6      	cmp	r6, r4
 800a648:	dc2e      	bgt.n	800a6a8 <__gethex+0x2e8>
 800a64a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a64e:	2b02      	cmp	r3, #2
 800a650:	d022      	beq.n	800a698 <__gethex+0x2d8>
 800a652:	2b03      	cmp	r3, #3
 800a654:	d024      	beq.n	800a6a0 <__gethex+0x2e0>
 800a656:	2b01      	cmp	r3, #1
 800a658:	d115      	bne.n	800a686 <__gethex+0x2c6>
 800a65a:	42a6      	cmp	r6, r4
 800a65c:	d113      	bne.n	800a686 <__gethex+0x2c6>
 800a65e:	2e01      	cmp	r6, #1
 800a660:	dc0b      	bgt.n	800a67a <__gethex+0x2ba>
 800a662:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a666:	9a06      	ldr	r2, [sp, #24]
 800a668:	2762      	movs	r7, #98	; 0x62
 800a66a:	6013      	str	r3, [r2, #0]
 800a66c:	2301      	movs	r3, #1
 800a66e:	612b      	str	r3, [r5, #16]
 800a670:	f8c9 3000 	str.w	r3, [r9]
 800a674:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a676:	601d      	str	r5, [r3, #0]
 800a678:	e72a      	b.n	800a4d0 <__gethex+0x110>
 800a67a:	1e71      	subs	r1, r6, #1
 800a67c:	4628      	mov	r0, r5
 800a67e:	f7fe faac 	bl	8008bda <__any_on>
 800a682:	2800      	cmp	r0, #0
 800a684:	d1ed      	bne.n	800a662 <__gethex+0x2a2>
 800a686:	4629      	mov	r1, r5
 800a688:	9802      	ldr	r0, [sp, #8]
 800a68a:	f7fd ff13 	bl	80084b4 <_Bfree>
 800a68e:	2300      	movs	r3, #0
 800a690:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a692:	2750      	movs	r7, #80	; 0x50
 800a694:	6013      	str	r3, [r2, #0]
 800a696:	e71b      	b.n	800a4d0 <__gethex+0x110>
 800a698:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d0e1      	beq.n	800a662 <__gethex+0x2a2>
 800a69e:	e7f2      	b.n	800a686 <__gethex+0x2c6>
 800a6a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1dd      	bne.n	800a662 <__gethex+0x2a2>
 800a6a6:	e7ee      	b.n	800a686 <__gethex+0x2c6>
 800a6a8:	1e67      	subs	r7, r4, #1
 800a6aa:	f1ba 0f00 	cmp.w	sl, #0
 800a6ae:	d132      	bne.n	800a716 <__gethex+0x356>
 800a6b0:	b127      	cbz	r7, 800a6bc <__gethex+0x2fc>
 800a6b2:	4639      	mov	r1, r7
 800a6b4:	4628      	mov	r0, r5
 800a6b6:	f7fe fa90 	bl	8008bda <__any_on>
 800a6ba:	4682      	mov	sl, r0
 800a6bc:	2301      	movs	r3, #1
 800a6be:	117a      	asrs	r2, r7, #5
 800a6c0:	f007 071f 	and.w	r7, r7, #31
 800a6c4:	fa03 f707 	lsl.w	r7, r3, r7
 800a6c8:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800a6cc:	4621      	mov	r1, r4
 800a6ce:	421f      	tst	r7, r3
 800a6d0:	f04f 0702 	mov.w	r7, #2
 800a6d4:	4628      	mov	r0, r5
 800a6d6:	bf18      	it	ne
 800a6d8:	f04a 0a02 	orrne.w	sl, sl, #2
 800a6dc:	1b36      	subs	r6, r6, r4
 800a6de:	f7ff fe25 	bl	800a32c <rshift>
 800a6e2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800a6e6:	f1ba 0f00 	cmp.w	sl, #0
 800a6ea:	d045      	beq.n	800a778 <__gethex+0x3b8>
 800a6ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a6f0:	2b02      	cmp	r3, #2
 800a6f2:	d015      	beq.n	800a720 <__gethex+0x360>
 800a6f4:	2b03      	cmp	r3, #3
 800a6f6:	d017      	beq.n	800a728 <__gethex+0x368>
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d109      	bne.n	800a710 <__gethex+0x350>
 800a6fc:	f01a 0f02 	tst.w	sl, #2
 800a700:	d006      	beq.n	800a710 <__gethex+0x350>
 800a702:	f8d9 3000 	ldr.w	r3, [r9]
 800a706:	ea4a 0a03 	orr.w	sl, sl, r3
 800a70a:	f01a 0f01 	tst.w	sl, #1
 800a70e:	d10e      	bne.n	800a72e <__gethex+0x36e>
 800a710:	f047 0710 	orr.w	r7, r7, #16
 800a714:	e030      	b.n	800a778 <__gethex+0x3b8>
 800a716:	f04f 0a01 	mov.w	sl, #1
 800a71a:	e7cf      	b.n	800a6bc <__gethex+0x2fc>
 800a71c:	2701      	movs	r7, #1
 800a71e:	e7e2      	b.n	800a6e6 <__gethex+0x326>
 800a720:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a722:	f1c3 0301 	rsb	r3, r3, #1
 800a726:	9315      	str	r3, [sp, #84]	; 0x54
 800a728:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d0f0      	beq.n	800a710 <__gethex+0x350>
 800a72e:	2000      	movs	r0, #0
 800a730:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800a734:	f105 0314 	add.w	r3, r5, #20
 800a738:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800a73c:	eb03 010a 	add.w	r1, r3, sl
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800a746:	d01c      	beq.n	800a782 <__gethex+0x3c2>
 800a748:	3201      	adds	r2, #1
 800a74a:	601a      	str	r2, [r3, #0]
 800a74c:	2f02      	cmp	r7, #2
 800a74e:	f105 0314 	add.w	r3, r5, #20
 800a752:	d138      	bne.n	800a7c6 <__gethex+0x406>
 800a754:	f8d8 2000 	ldr.w	r2, [r8]
 800a758:	3a01      	subs	r2, #1
 800a75a:	4296      	cmp	r6, r2
 800a75c:	d10a      	bne.n	800a774 <__gethex+0x3b4>
 800a75e:	2201      	movs	r2, #1
 800a760:	1171      	asrs	r1, r6, #5
 800a762:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a766:	f006 061f 	and.w	r6, r6, #31
 800a76a:	fa02 f606 	lsl.w	r6, r2, r6
 800a76e:	421e      	tst	r6, r3
 800a770:	bf18      	it	ne
 800a772:	4617      	movne	r7, r2
 800a774:	f047 0720 	orr.w	r7, r7, #32
 800a778:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a77a:	601d      	str	r5, [r3, #0]
 800a77c:	9b06      	ldr	r3, [sp, #24]
 800a77e:	601c      	str	r4, [r3, #0]
 800a780:	e6a6      	b.n	800a4d0 <__gethex+0x110>
 800a782:	f843 0b04 	str.w	r0, [r3], #4
 800a786:	4299      	cmp	r1, r3
 800a788:	d8da      	bhi.n	800a740 <__gethex+0x380>
 800a78a:	68ab      	ldr	r3, [r5, #8]
 800a78c:	4599      	cmp	r9, r3
 800a78e:	db12      	blt.n	800a7b6 <__gethex+0x3f6>
 800a790:	6869      	ldr	r1, [r5, #4]
 800a792:	9802      	ldr	r0, [sp, #8]
 800a794:	3101      	adds	r1, #1
 800a796:	f7fd fe59 	bl	800844c <_Balloc>
 800a79a:	4683      	mov	fp, r0
 800a79c:	692a      	ldr	r2, [r5, #16]
 800a79e:	f105 010c 	add.w	r1, r5, #12
 800a7a2:	3202      	adds	r2, #2
 800a7a4:	0092      	lsls	r2, r2, #2
 800a7a6:	300c      	adds	r0, #12
 800a7a8:	f7fa ffa4 	bl	80056f4 <memcpy>
 800a7ac:	4629      	mov	r1, r5
 800a7ae:	9802      	ldr	r0, [sp, #8]
 800a7b0:	f7fd fe80 	bl	80084b4 <_Bfree>
 800a7b4:	465d      	mov	r5, fp
 800a7b6:	692b      	ldr	r3, [r5, #16]
 800a7b8:	1c5a      	adds	r2, r3, #1
 800a7ba:	612a      	str	r2, [r5, #16]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a7c2:	615a      	str	r2, [r3, #20]
 800a7c4:	e7c2      	b.n	800a74c <__gethex+0x38c>
 800a7c6:	692a      	ldr	r2, [r5, #16]
 800a7c8:	4591      	cmp	r9, r2
 800a7ca:	da0b      	bge.n	800a7e4 <__gethex+0x424>
 800a7cc:	2101      	movs	r1, #1
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	f7ff fdac 	bl	800a32c <rshift>
 800a7d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a7d8:	3401      	adds	r4, #1
 800a7da:	429c      	cmp	r4, r3
 800a7dc:	f73f aedb 	bgt.w	800a596 <__gethex+0x1d6>
 800a7e0:	2701      	movs	r7, #1
 800a7e2:	e7c7      	b.n	800a774 <__gethex+0x3b4>
 800a7e4:	f016 061f 	ands.w	r6, r6, #31
 800a7e8:	d0fa      	beq.n	800a7e0 <__gethex+0x420>
 800a7ea:	449a      	add	sl, r3
 800a7ec:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a7f0:	f7fd fef0 	bl	80085d4 <__hi0bits>
 800a7f4:	f1c6 0620 	rsb	r6, r6, #32
 800a7f8:	42b0      	cmp	r0, r6
 800a7fa:	dbe7      	blt.n	800a7cc <__gethex+0x40c>
 800a7fc:	e7f0      	b.n	800a7e0 <__gethex+0x420>

0800a7fe <L_shift>:
 800a7fe:	f1c2 0208 	rsb	r2, r2, #8
 800a802:	0092      	lsls	r2, r2, #2
 800a804:	b570      	push	{r4, r5, r6, lr}
 800a806:	f1c2 0620 	rsb	r6, r2, #32
 800a80a:	6843      	ldr	r3, [r0, #4]
 800a80c:	6804      	ldr	r4, [r0, #0]
 800a80e:	fa03 f506 	lsl.w	r5, r3, r6
 800a812:	432c      	orrs	r4, r5
 800a814:	40d3      	lsrs	r3, r2
 800a816:	6004      	str	r4, [r0, #0]
 800a818:	f840 3f04 	str.w	r3, [r0, #4]!
 800a81c:	4288      	cmp	r0, r1
 800a81e:	d3f4      	bcc.n	800a80a <L_shift+0xc>
 800a820:	bd70      	pop	{r4, r5, r6, pc}

0800a822 <__match>:
 800a822:	b530      	push	{r4, r5, lr}
 800a824:	6803      	ldr	r3, [r0, #0]
 800a826:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a82a:	3301      	adds	r3, #1
 800a82c:	b914      	cbnz	r4, 800a834 <__match+0x12>
 800a82e:	6003      	str	r3, [r0, #0]
 800a830:	2001      	movs	r0, #1
 800a832:	bd30      	pop	{r4, r5, pc}
 800a834:	781a      	ldrb	r2, [r3, #0]
 800a836:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a83a:	2d19      	cmp	r5, #25
 800a83c:	bf98      	it	ls
 800a83e:	3220      	addls	r2, #32
 800a840:	42a2      	cmp	r2, r4
 800a842:	d0f0      	beq.n	800a826 <__match+0x4>
 800a844:	2000      	movs	r0, #0
 800a846:	bd30      	pop	{r4, r5, pc}

0800a848 <__hexnan>:
 800a848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a84c:	2500      	movs	r5, #0
 800a84e:	680b      	ldr	r3, [r1, #0]
 800a850:	4682      	mov	sl, r0
 800a852:	115f      	asrs	r7, r3, #5
 800a854:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a858:	f013 031f 	ands.w	r3, r3, #31
 800a85c:	bf18      	it	ne
 800a85e:	3704      	addne	r7, #4
 800a860:	1f3e      	subs	r6, r7, #4
 800a862:	4690      	mov	r8, r2
 800a864:	46b1      	mov	r9, r6
 800a866:	4634      	mov	r4, r6
 800a868:	46ab      	mov	fp, r5
 800a86a:	b087      	sub	sp, #28
 800a86c:	6801      	ldr	r1, [r0, #0]
 800a86e:	9302      	str	r3, [sp, #8]
 800a870:	f847 5c04 	str.w	r5, [r7, #-4]
 800a874:	9501      	str	r5, [sp, #4]
 800a876:	784a      	ldrb	r2, [r1, #1]
 800a878:	1c4b      	adds	r3, r1, #1
 800a87a:	9303      	str	r3, [sp, #12]
 800a87c:	b342      	cbz	r2, 800a8d0 <__hexnan+0x88>
 800a87e:	4610      	mov	r0, r2
 800a880:	9105      	str	r1, [sp, #20]
 800a882:	9204      	str	r2, [sp, #16]
 800a884:	f7ff fd87 	bl	800a396 <__hexdig_fun>
 800a888:	2800      	cmp	r0, #0
 800a88a:	d143      	bne.n	800a914 <__hexnan+0xcc>
 800a88c:	9a04      	ldr	r2, [sp, #16]
 800a88e:	9905      	ldr	r1, [sp, #20]
 800a890:	2a20      	cmp	r2, #32
 800a892:	d818      	bhi.n	800a8c6 <__hexnan+0x7e>
 800a894:	9b01      	ldr	r3, [sp, #4]
 800a896:	459b      	cmp	fp, r3
 800a898:	dd13      	ble.n	800a8c2 <__hexnan+0x7a>
 800a89a:	454c      	cmp	r4, r9
 800a89c:	d206      	bcs.n	800a8ac <__hexnan+0x64>
 800a89e:	2d07      	cmp	r5, #7
 800a8a0:	dc04      	bgt.n	800a8ac <__hexnan+0x64>
 800a8a2:	462a      	mov	r2, r5
 800a8a4:	4649      	mov	r1, r9
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f7ff ffa9 	bl	800a7fe <L_shift>
 800a8ac:	4544      	cmp	r4, r8
 800a8ae:	d944      	bls.n	800a93a <__hexnan+0xf2>
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	f1a4 0904 	sub.w	r9, r4, #4
 800a8b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a8ba:	461d      	mov	r5, r3
 800a8bc:	464c      	mov	r4, r9
 800a8be:	f8cd b004 	str.w	fp, [sp, #4]
 800a8c2:	9903      	ldr	r1, [sp, #12]
 800a8c4:	e7d7      	b.n	800a876 <__hexnan+0x2e>
 800a8c6:	2a29      	cmp	r2, #41	; 0x29
 800a8c8:	d14a      	bne.n	800a960 <__hexnan+0x118>
 800a8ca:	3102      	adds	r1, #2
 800a8cc:	f8ca 1000 	str.w	r1, [sl]
 800a8d0:	f1bb 0f00 	cmp.w	fp, #0
 800a8d4:	d044      	beq.n	800a960 <__hexnan+0x118>
 800a8d6:	454c      	cmp	r4, r9
 800a8d8:	d206      	bcs.n	800a8e8 <__hexnan+0xa0>
 800a8da:	2d07      	cmp	r5, #7
 800a8dc:	dc04      	bgt.n	800a8e8 <__hexnan+0xa0>
 800a8de:	462a      	mov	r2, r5
 800a8e0:	4649      	mov	r1, r9
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	f7ff ff8b 	bl	800a7fe <L_shift>
 800a8e8:	4544      	cmp	r4, r8
 800a8ea:	d928      	bls.n	800a93e <__hexnan+0xf6>
 800a8ec:	4643      	mov	r3, r8
 800a8ee:	f854 2b04 	ldr.w	r2, [r4], #4
 800a8f2:	42a6      	cmp	r6, r4
 800a8f4:	f843 2b04 	str.w	r2, [r3], #4
 800a8f8:	d2f9      	bcs.n	800a8ee <__hexnan+0xa6>
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f843 2b04 	str.w	r2, [r3], #4
 800a900:	429e      	cmp	r6, r3
 800a902:	d2fb      	bcs.n	800a8fc <__hexnan+0xb4>
 800a904:	6833      	ldr	r3, [r6, #0]
 800a906:	b91b      	cbnz	r3, 800a910 <__hexnan+0xc8>
 800a908:	4546      	cmp	r6, r8
 800a90a:	d127      	bne.n	800a95c <__hexnan+0x114>
 800a90c:	2301      	movs	r3, #1
 800a90e:	6033      	str	r3, [r6, #0]
 800a910:	2005      	movs	r0, #5
 800a912:	e026      	b.n	800a962 <__hexnan+0x11a>
 800a914:	3501      	adds	r5, #1
 800a916:	2d08      	cmp	r5, #8
 800a918:	f10b 0b01 	add.w	fp, fp, #1
 800a91c:	dd06      	ble.n	800a92c <__hexnan+0xe4>
 800a91e:	4544      	cmp	r4, r8
 800a920:	d9cf      	bls.n	800a8c2 <__hexnan+0x7a>
 800a922:	2300      	movs	r3, #0
 800a924:	2501      	movs	r5, #1
 800a926:	f844 3c04 	str.w	r3, [r4, #-4]
 800a92a:	3c04      	subs	r4, #4
 800a92c:	6822      	ldr	r2, [r4, #0]
 800a92e:	f000 000f 	and.w	r0, r0, #15
 800a932:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a936:	6020      	str	r0, [r4, #0]
 800a938:	e7c3      	b.n	800a8c2 <__hexnan+0x7a>
 800a93a:	2508      	movs	r5, #8
 800a93c:	e7c1      	b.n	800a8c2 <__hexnan+0x7a>
 800a93e:	9b02      	ldr	r3, [sp, #8]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d0df      	beq.n	800a904 <__hexnan+0xbc>
 800a944:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a948:	f1c3 0320 	rsb	r3, r3, #32
 800a94c:	fa22 f303 	lsr.w	r3, r2, r3
 800a950:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a954:	401a      	ands	r2, r3
 800a956:	f847 2c04 	str.w	r2, [r7, #-4]
 800a95a:	e7d3      	b.n	800a904 <__hexnan+0xbc>
 800a95c:	3e04      	subs	r6, #4
 800a95e:	e7d1      	b.n	800a904 <__hexnan+0xbc>
 800a960:	2004      	movs	r0, #4
 800a962:	b007      	add	sp, #28
 800a964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a968 <__retarget_lock_acquire_recursive>:
 800a968:	4770      	bx	lr

0800a96a <__retarget_lock_release_recursive>:
 800a96a:	4770      	bx	lr

0800a96c <memmove>:
 800a96c:	4288      	cmp	r0, r1
 800a96e:	b510      	push	{r4, lr}
 800a970:	eb01 0302 	add.w	r3, r1, r2
 800a974:	d803      	bhi.n	800a97e <memmove+0x12>
 800a976:	1e42      	subs	r2, r0, #1
 800a978:	4299      	cmp	r1, r3
 800a97a:	d10c      	bne.n	800a996 <memmove+0x2a>
 800a97c:	bd10      	pop	{r4, pc}
 800a97e:	4298      	cmp	r0, r3
 800a980:	d2f9      	bcs.n	800a976 <memmove+0xa>
 800a982:	1881      	adds	r1, r0, r2
 800a984:	1ad2      	subs	r2, r2, r3
 800a986:	42d3      	cmn	r3, r2
 800a988:	d100      	bne.n	800a98c <memmove+0x20>
 800a98a:	bd10      	pop	{r4, pc}
 800a98c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a990:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a994:	e7f7      	b.n	800a986 <memmove+0x1a>
 800a996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a99a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a99e:	e7eb      	b.n	800a978 <memmove+0xc>

0800a9a0 <_realloc_r>:
 800a9a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a4:	4682      	mov	sl, r0
 800a9a6:	460c      	mov	r4, r1
 800a9a8:	b929      	cbnz	r1, 800a9b6 <_realloc_r+0x16>
 800a9aa:	4611      	mov	r1, r2
 800a9ac:	b003      	add	sp, #12
 800a9ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b2:	f7fd bae7 	b.w	8007f84 <_malloc_r>
 800a9b6:	9201      	str	r2, [sp, #4]
 800a9b8:	f7fd fd3c 	bl	8008434 <__malloc_lock>
 800a9bc:	9a01      	ldr	r2, [sp, #4]
 800a9be:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800a9c2:	f102 080b 	add.w	r8, r2, #11
 800a9c6:	f1b8 0f16 	cmp.w	r8, #22
 800a9ca:	f1a4 0908 	sub.w	r9, r4, #8
 800a9ce:	f025 0603 	bic.w	r6, r5, #3
 800a9d2:	d90a      	bls.n	800a9ea <_realloc_r+0x4a>
 800a9d4:	f038 0807 	bics.w	r8, r8, #7
 800a9d8:	d509      	bpl.n	800a9ee <_realloc_r+0x4e>
 800a9da:	230c      	movs	r3, #12
 800a9dc:	2700      	movs	r7, #0
 800a9de:	f8ca 3000 	str.w	r3, [sl]
 800a9e2:	4638      	mov	r0, r7
 800a9e4:	b003      	add	sp, #12
 800a9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ea:	f04f 0810 	mov.w	r8, #16
 800a9ee:	4590      	cmp	r8, r2
 800a9f0:	d3f3      	bcc.n	800a9da <_realloc_r+0x3a>
 800a9f2:	45b0      	cmp	r8, r6
 800a9f4:	f340 8148 	ble.w	800ac88 <_realloc_r+0x2e8>
 800a9f8:	4ba9      	ldr	r3, [pc, #676]	; (800aca0 <_realloc_r+0x300>)
 800a9fa:	eb09 0106 	add.w	r1, r9, r6
 800a9fe:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800aa02:	469b      	mov	fp, r3
 800aa04:	4571      	cmp	r1, lr
 800aa06:	684b      	ldr	r3, [r1, #4]
 800aa08:	d005      	beq.n	800aa16 <_realloc_r+0x76>
 800aa0a:	f023 0001 	bic.w	r0, r3, #1
 800aa0e:	4408      	add	r0, r1
 800aa10:	6840      	ldr	r0, [r0, #4]
 800aa12:	07c7      	lsls	r7, r0, #31
 800aa14:	d447      	bmi.n	800aaa6 <_realloc_r+0x106>
 800aa16:	f023 0303 	bic.w	r3, r3, #3
 800aa1a:	4571      	cmp	r1, lr
 800aa1c:	eb06 0703 	add.w	r7, r6, r3
 800aa20:	d119      	bne.n	800aa56 <_realloc_r+0xb6>
 800aa22:	f108 0010 	add.w	r0, r8, #16
 800aa26:	4287      	cmp	r7, r0
 800aa28:	db3f      	blt.n	800aaaa <_realloc_r+0x10a>
 800aa2a:	eba7 0708 	sub.w	r7, r7, r8
 800aa2e:	eb09 0308 	add.w	r3, r9, r8
 800aa32:	f047 0701 	orr.w	r7, r7, #1
 800aa36:	f8cb 3008 	str.w	r3, [fp, #8]
 800aa3a:	605f      	str	r7, [r3, #4]
 800aa3c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800aa40:	4650      	mov	r0, sl
 800aa42:	f003 0301 	and.w	r3, r3, #1
 800aa46:	ea43 0308 	orr.w	r3, r3, r8
 800aa4a:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa4e:	f7fd fcf7 	bl	8008440 <__malloc_unlock>
 800aa52:	4627      	mov	r7, r4
 800aa54:	e7c5      	b.n	800a9e2 <_realloc_r+0x42>
 800aa56:	45b8      	cmp	r8, r7
 800aa58:	dc27      	bgt.n	800aaaa <_realloc_r+0x10a>
 800aa5a:	68cb      	ldr	r3, [r1, #12]
 800aa5c:	688a      	ldr	r2, [r1, #8]
 800aa5e:	60d3      	str	r3, [r2, #12]
 800aa60:	609a      	str	r2, [r3, #8]
 800aa62:	eba7 0008 	sub.w	r0, r7, r8
 800aa66:	280f      	cmp	r0, #15
 800aa68:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800aa6c:	eb09 0207 	add.w	r2, r9, r7
 800aa70:	f240 810c 	bls.w	800ac8c <_realloc_r+0x2ec>
 800aa74:	f003 0301 	and.w	r3, r3, #1
 800aa78:	eb09 0108 	add.w	r1, r9, r8
 800aa7c:	ea43 0308 	orr.w	r3, r3, r8
 800aa80:	f040 0001 	orr.w	r0, r0, #1
 800aa84:	f8c9 3004 	str.w	r3, [r9, #4]
 800aa88:	6048      	str	r0, [r1, #4]
 800aa8a:	6853      	ldr	r3, [r2, #4]
 800aa8c:	3108      	adds	r1, #8
 800aa8e:	f043 0301 	orr.w	r3, r3, #1
 800aa92:	6053      	str	r3, [r2, #4]
 800aa94:	4650      	mov	r0, sl
 800aa96:	f7ff fb8d 	bl	800a1b4 <_free_r>
 800aa9a:	4650      	mov	r0, sl
 800aa9c:	f7fd fcd0 	bl	8008440 <__malloc_unlock>
 800aaa0:	f109 0708 	add.w	r7, r9, #8
 800aaa4:	e79d      	b.n	800a9e2 <_realloc_r+0x42>
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	07e8      	lsls	r0, r5, #31
 800aaac:	f100 8085 	bmi.w	800abba <_realloc_r+0x21a>
 800aab0:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800aab4:	eba9 0505 	sub.w	r5, r9, r5
 800aab8:	6868      	ldr	r0, [r5, #4]
 800aaba:	f020 0003 	bic.w	r0, r0, #3
 800aabe:	4430      	add	r0, r6
 800aac0:	2900      	cmp	r1, #0
 800aac2:	d077      	beq.n	800abb4 <_realloc_r+0x214>
 800aac4:	4571      	cmp	r1, lr
 800aac6:	d151      	bne.n	800ab6c <_realloc_r+0x1cc>
 800aac8:	4403      	add	r3, r0
 800aaca:	f108 0110 	add.w	r1, r8, #16
 800aace:	428b      	cmp	r3, r1
 800aad0:	db70      	blt.n	800abb4 <_realloc_r+0x214>
 800aad2:	462f      	mov	r7, r5
 800aad4:	68ea      	ldr	r2, [r5, #12]
 800aad6:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800aada:	60ca      	str	r2, [r1, #12]
 800aadc:	6091      	str	r1, [r2, #8]
 800aade:	1f32      	subs	r2, r6, #4
 800aae0:	2a24      	cmp	r2, #36	; 0x24
 800aae2:	d83c      	bhi.n	800ab5e <_realloc_r+0x1be>
 800aae4:	2a13      	cmp	r2, #19
 800aae6:	d937      	bls.n	800ab58 <_realloc_r+0x1b8>
 800aae8:	6821      	ldr	r1, [r4, #0]
 800aaea:	2a1b      	cmp	r2, #27
 800aaec:	60a9      	str	r1, [r5, #8]
 800aaee:	6861      	ldr	r1, [r4, #4]
 800aaf0:	60e9      	str	r1, [r5, #12]
 800aaf2:	d81c      	bhi.n	800ab2e <_realloc_r+0x18e>
 800aaf4:	f105 0210 	add.w	r2, r5, #16
 800aaf8:	f104 0108 	add.w	r1, r4, #8
 800aafc:	6808      	ldr	r0, [r1, #0]
 800aafe:	6010      	str	r0, [r2, #0]
 800ab00:	6848      	ldr	r0, [r1, #4]
 800ab02:	6050      	str	r0, [r2, #4]
 800ab04:	6889      	ldr	r1, [r1, #8]
 800ab06:	6091      	str	r1, [r2, #8]
 800ab08:	eba3 0308 	sub.w	r3, r3, r8
 800ab0c:	eb05 0208 	add.w	r2, r5, r8
 800ab10:	f043 0301 	orr.w	r3, r3, #1
 800ab14:	f8cb 2008 	str.w	r2, [fp, #8]
 800ab18:	6053      	str	r3, [r2, #4]
 800ab1a:	686b      	ldr	r3, [r5, #4]
 800ab1c:	f003 0301 	and.w	r3, r3, #1
 800ab20:	ea43 0308 	orr.w	r3, r3, r8
 800ab24:	606b      	str	r3, [r5, #4]
 800ab26:	4650      	mov	r0, sl
 800ab28:	f7fd fc8a 	bl	8008440 <__malloc_unlock>
 800ab2c:	e759      	b.n	800a9e2 <_realloc_r+0x42>
 800ab2e:	68a1      	ldr	r1, [r4, #8]
 800ab30:	2a24      	cmp	r2, #36	; 0x24
 800ab32:	6129      	str	r1, [r5, #16]
 800ab34:	68e1      	ldr	r1, [r4, #12]
 800ab36:	bf18      	it	ne
 800ab38:	f105 0218 	addne.w	r2, r5, #24
 800ab3c:	6169      	str	r1, [r5, #20]
 800ab3e:	bf09      	itett	eq
 800ab40:	6922      	ldreq	r2, [r4, #16]
 800ab42:	f104 0110 	addne.w	r1, r4, #16
 800ab46:	61aa      	streq	r2, [r5, #24]
 800ab48:	6960      	ldreq	r0, [r4, #20]
 800ab4a:	bf02      	ittt	eq
 800ab4c:	f105 0220 	addeq.w	r2, r5, #32
 800ab50:	f104 0118 	addeq.w	r1, r4, #24
 800ab54:	61e8      	streq	r0, [r5, #28]
 800ab56:	e7d1      	b.n	800aafc <_realloc_r+0x15c>
 800ab58:	463a      	mov	r2, r7
 800ab5a:	4621      	mov	r1, r4
 800ab5c:	e7ce      	b.n	800aafc <_realloc_r+0x15c>
 800ab5e:	4621      	mov	r1, r4
 800ab60:	4638      	mov	r0, r7
 800ab62:	9301      	str	r3, [sp, #4]
 800ab64:	f7ff ff02 	bl	800a96c <memmove>
 800ab68:	9b01      	ldr	r3, [sp, #4]
 800ab6a:	e7cd      	b.n	800ab08 <_realloc_r+0x168>
 800ab6c:	18c7      	adds	r7, r0, r3
 800ab6e:	45b8      	cmp	r8, r7
 800ab70:	dc20      	bgt.n	800abb4 <_realloc_r+0x214>
 800ab72:	68cb      	ldr	r3, [r1, #12]
 800ab74:	688a      	ldr	r2, [r1, #8]
 800ab76:	60d3      	str	r3, [r2, #12]
 800ab78:	609a      	str	r2, [r3, #8]
 800ab7a:	4628      	mov	r0, r5
 800ab7c:	68eb      	ldr	r3, [r5, #12]
 800ab7e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800ab82:	60d3      	str	r3, [r2, #12]
 800ab84:	609a      	str	r2, [r3, #8]
 800ab86:	1f32      	subs	r2, r6, #4
 800ab88:	2a24      	cmp	r2, #36	; 0x24
 800ab8a:	d843      	bhi.n	800ac14 <_realloc_r+0x274>
 800ab8c:	2a13      	cmp	r2, #19
 800ab8e:	d93f      	bls.n	800ac10 <_realloc_r+0x270>
 800ab90:	6823      	ldr	r3, [r4, #0]
 800ab92:	2a1b      	cmp	r2, #27
 800ab94:	60ab      	str	r3, [r5, #8]
 800ab96:	6863      	ldr	r3, [r4, #4]
 800ab98:	60eb      	str	r3, [r5, #12]
 800ab9a:	d824      	bhi.n	800abe6 <_realloc_r+0x246>
 800ab9c:	f105 0010 	add.w	r0, r5, #16
 800aba0:	f104 0308 	add.w	r3, r4, #8
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	6002      	str	r2, [r0, #0]
 800aba8:	685a      	ldr	r2, [r3, #4]
 800abaa:	6042      	str	r2, [r0, #4]
 800abac:	689b      	ldr	r3, [r3, #8]
 800abae:	6083      	str	r3, [r0, #8]
 800abb0:	46a9      	mov	r9, r5
 800abb2:	e756      	b.n	800aa62 <_realloc_r+0xc2>
 800abb4:	4580      	cmp	r8, r0
 800abb6:	4607      	mov	r7, r0
 800abb8:	dddf      	ble.n	800ab7a <_realloc_r+0x1da>
 800abba:	4611      	mov	r1, r2
 800abbc:	4650      	mov	r0, sl
 800abbe:	f7fd f9e1 	bl	8007f84 <_malloc_r>
 800abc2:	4607      	mov	r7, r0
 800abc4:	2800      	cmp	r0, #0
 800abc6:	d0ae      	beq.n	800ab26 <_realloc_r+0x186>
 800abc8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800abcc:	f1a0 0208 	sub.w	r2, r0, #8
 800abd0:	f023 0301 	bic.w	r3, r3, #1
 800abd4:	444b      	add	r3, r9
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d120      	bne.n	800ac1c <_realloc_r+0x27c>
 800abda:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800abde:	f027 0703 	bic.w	r7, r7, #3
 800abe2:	4437      	add	r7, r6
 800abe4:	e73d      	b.n	800aa62 <_realloc_r+0xc2>
 800abe6:	68a3      	ldr	r3, [r4, #8]
 800abe8:	2a24      	cmp	r2, #36	; 0x24
 800abea:	612b      	str	r3, [r5, #16]
 800abec:	68e3      	ldr	r3, [r4, #12]
 800abee:	bf18      	it	ne
 800abf0:	f105 0018 	addne.w	r0, r5, #24
 800abf4:	616b      	str	r3, [r5, #20]
 800abf6:	bf09      	itett	eq
 800abf8:	6923      	ldreq	r3, [r4, #16]
 800abfa:	f104 0310 	addne.w	r3, r4, #16
 800abfe:	61ab      	streq	r3, [r5, #24]
 800ac00:	6962      	ldreq	r2, [r4, #20]
 800ac02:	bf02      	ittt	eq
 800ac04:	f105 0020 	addeq.w	r0, r5, #32
 800ac08:	f104 0318 	addeq.w	r3, r4, #24
 800ac0c:	61ea      	streq	r2, [r5, #28]
 800ac0e:	e7c9      	b.n	800aba4 <_realloc_r+0x204>
 800ac10:	4623      	mov	r3, r4
 800ac12:	e7c7      	b.n	800aba4 <_realloc_r+0x204>
 800ac14:	4621      	mov	r1, r4
 800ac16:	f7ff fea9 	bl	800a96c <memmove>
 800ac1a:	e7c9      	b.n	800abb0 <_realloc_r+0x210>
 800ac1c:	1f32      	subs	r2, r6, #4
 800ac1e:	2a24      	cmp	r2, #36	; 0x24
 800ac20:	d82e      	bhi.n	800ac80 <_realloc_r+0x2e0>
 800ac22:	2a13      	cmp	r2, #19
 800ac24:	d929      	bls.n	800ac7a <_realloc_r+0x2da>
 800ac26:	6823      	ldr	r3, [r4, #0]
 800ac28:	2a1b      	cmp	r2, #27
 800ac2a:	6003      	str	r3, [r0, #0]
 800ac2c:	6863      	ldr	r3, [r4, #4]
 800ac2e:	6043      	str	r3, [r0, #4]
 800ac30:	d80e      	bhi.n	800ac50 <_realloc_r+0x2b0>
 800ac32:	f100 0308 	add.w	r3, r0, #8
 800ac36:	f104 0208 	add.w	r2, r4, #8
 800ac3a:	6811      	ldr	r1, [r2, #0]
 800ac3c:	6019      	str	r1, [r3, #0]
 800ac3e:	6851      	ldr	r1, [r2, #4]
 800ac40:	6059      	str	r1, [r3, #4]
 800ac42:	6892      	ldr	r2, [r2, #8]
 800ac44:	609a      	str	r2, [r3, #8]
 800ac46:	4621      	mov	r1, r4
 800ac48:	4650      	mov	r0, sl
 800ac4a:	f7ff fab3 	bl	800a1b4 <_free_r>
 800ac4e:	e76a      	b.n	800ab26 <_realloc_r+0x186>
 800ac50:	68a3      	ldr	r3, [r4, #8]
 800ac52:	2a24      	cmp	r2, #36	; 0x24
 800ac54:	6083      	str	r3, [r0, #8]
 800ac56:	68e3      	ldr	r3, [r4, #12]
 800ac58:	bf18      	it	ne
 800ac5a:	f104 0210 	addne.w	r2, r4, #16
 800ac5e:	60c3      	str	r3, [r0, #12]
 800ac60:	bf09      	itett	eq
 800ac62:	6923      	ldreq	r3, [r4, #16]
 800ac64:	f100 0310 	addne.w	r3, r0, #16
 800ac68:	6103      	streq	r3, [r0, #16]
 800ac6a:	6961      	ldreq	r1, [r4, #20]
 800ac6c:	bf02      	ittt	eq
 800ac6e:	f100 0318 	addeq.w	r3, r0, #24
 800ac72:	f104 0218 	addeq.w	r2, r4, #24
 800ac76:	6141      	streq	r1, [r0, #20]
 800ac78:	e7df      	b.n	800ac3a <_realloc_r+0x29a>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	4622      	mov	r2, r4
 800ac7e:	e7dc      	b.n	800ac3a <_realloc_r+0x29a>
 800ac80:	4621      	mov	r1, r4
 800ac82:	f7ff fe73 	bl	800a96c <memmove>
 800ac86:	e7de      	b.n	800ac46 <_realloc_r+0x2a6>
 800ac88:	4637      	mov	r7, r6
 800ac8a:	e6ea      	b.n	800aa62 <_realloc_r+0xc2>
 800ac8c:	f003 0301 	and.w	r3, r3, #1
 800ac90:	431f      	orrs	r7, r3
 800ac92:	f8c9 7004 	str.w	r7, [r9, #4]
 800ac96:	6853      	ldr	r3, [r2, #4]
 800ac98:	f043 0301 	orr.w	r3, r3, #1
 800ac9c:	6053      	str	r3, [r2, #4]
 800ac9e:	e6fc      	b.n	800aa9a <_realloc_r+0xfa>
 800aca0:	20000314 	.word	0x20000314

0800aca4 <strncmp>:
 800aca4:	b510      	push	{r4, lr}
 800aca6:	b16a      	cbz	r2, 800acc4 <strncmp+0x20>
 800aca8:	3901      	subs	r1, #1
 800acaa:	1884      	adds	r4, r0, r2
 800acac:	f810 3b01 	ldrb.w	r3, [r0], #1
 800acb0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d103      	bne.n	800acc0 <strncmp+0x1c>
 800acb8:	42a0      	cmp	r0, r4
 800acba:	d001      	beq.n	800acc0 <strncmp+0x1c>
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d1f5      	bne.n	800acac <strncmp+0x8>
 800acc0:	1a98      	subs	r0, r3, r2
 800acc2:	bd10      	pop	{r4, pc}
 800acc4:	4610      	mov	r0, r2
 800acc6:	bd10      	pop	{r4, pc}

0800acc8 <abort>:
 800acc8:	b508      	push	{r3, lr}
 800acca:	2006      	movs	r0, #6
 800accc:	f000 f82c 	bl	800ad28 <raise>
 800acd0:	2001      	movs	r0, #1
 800acd2:	f000 f863 	bl	800ad9c <_exit>

0800acd6 <_raise_r>:
 800acd6:	291f      	cmp	r1, #31
 800acd8:	b538      	push	{r3, r4, r5, lr}
 800acda:	4604      	mov	r4, r0
 800acdc:	460d      	mov	r5, r1
 800acde:	d904      	bls.n	800acea <_raise_r+0x14>
 800ace0:	2316      	movs	r3, #22
 800ace2:	6003      	str	r3, [r0, #0]
 800ace4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ace8:	bd38      	pop	{r3, r4, r5, pc}
 800acea:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800acec:	b112      	cbz	r2, 800acf4 <_raise_r+0x1e>
 800acee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acf2:	b94b      	cbnz	r3, 800ad08 <_raise_r+0x32>
 800acf4:	4620      	mov	r0, r4
 800acf6:	f000 f831 	bl	800ad5c <_getpid_r>
 800acfa:	462a      	mov	r2, r5
 800acfc:	4601      	mov	r1, r0
 800acfe:	4620      	mov	r0, r4
 800ad00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad04:	f000 b818 	b.w	800ad38 <_kill_r>
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d00a      	beq.n	800ad22 <_raise_r+0x4c>
 800ad0c:	1c59      	adds	r1, r3, #1
 800ad0e:	d103      	bne.n	800ad18 <_raise_r+0x42>
 800ad10:	2316      	movs	r3, #22
 800ad12:	6003      	str	r3, [r0, #0]
 800ad14:	2001      	movs	r0, #1
 800ad16:	bd38      	pop	{r3, r4, r5, pc}
 800ad18:	2400      	movs	r4, #0
 800ad1a:	4628      	mov	r0, r5
 800ad1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad20:	4798      	blx	r3
 800ad22:	2000      	movs	r0, #0
 800ad24:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ad28 <raise>:
 800ad28:	4b02      	ldr	r3, [pc, #8]	; (800ad34 <raise+0xc>)
 800ad2a:	4601      	mov	r1, r0
 800ad2c:	6818      	ldr	r0, [r3, #0]
 800ad2e:	f7ff bfd2 	b.w	800acd6 <_raise_r>
 800ad32:	bf00      	nop
 800ad34:	200000b4 	.word	0x200000b4

0800ad38 <_kill_r>:
 800ad38:	b538      	push	{r3, r4, r5, lr}
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	4c06      	ldr	r4, [pc, #24]	; (800ad58 <_kill_r+0x20>)
 800ad3e:	4605      	mov	r5, r0
 800ad40:	4608      	mov	r0, r1
 800ad42:	4611      	mov	r1, r2
 800ad44:	6023      	str	r3, [r4, #0]
 800ad46:	f000 f813 	bl	800ad70 <_kill>
 800ad4a:	1c43      	adds	r3, r0, #1
 800ad4c:	d102      	bne.n	800ad54 <_kill_r+0x1c>
 800ad4e:	6823      	ldr	r3, [r4, #0]
 800ad50:	b103      	cbz	r3, 800ad54 <_kill_r+0x1c>
 800ad52:	602b      	str	r3, [r5, #0]
 800ad54:	bd38      	pop	{r3, r4, r5, pc}
 800ad56:	bf00      	nop
 800ad58:	20001230 	.word	0x20001230

0800ad5c <_getpid_r>:
 800ad5c:	f000 b800 	b.w	800ad60 <_getpid>

0800ad60 <_getpid>:
 800ad60:	2258      	movs	r2, #88	; 0x58
 800ad62:	4b02      	ldr	r3, [pc, #8]	; (800ad6c <_getpid+0xc>)
 800ad64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad68:	601a      	str	r2, [r3, #0]
 800ad6a:	4770      	bx	lr
 800ad6c:	20001230 	.word	0x20001230

0800ad70 <_kill>:
 800ad70:	2258      	movs	r2, #88	; 0x58
 800ad72:	4b02      	ldr	r3, [pc, #8]	; (800ad7c <_kill+0xc>)
 800ad74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad78:	601a      	str	r2, [r3, #0]
 800ad7a:	4770      	bx	lr
 800ad7c:	20001230 	.word	0x20001230

0800ad80 <_sbrk>:
 800ad80:	4b04      	ldr	r3, [pc, #16]	; (800ad94 <_sbrk+0x14>)
 800ad82:	4602      	mov	r2, r0
 800ad84:	6819      	ldr	r1, [r3, #0]
 800ad86:	b909      	cbnz	r1, 800ad8c <_sbrk+0xc>
 800ad88:	4903      	ldr	r1, [pc, #12]	; (800ad98 <_sbrk+0x18>)
 800ad8a:	6019      	str	r1, [r3, #0]
 800ad8c:	6818      	ldr	r0, [r3, #0]
 800ad8e:	4402      	add	r2, r0
 800ad90:	601a      	str	r2, [r3, #0]
 800ad92:	4770      	bx	lr
 800ad94:	20001208 	.word	0x20001208
 800ad98:	20001240 	.word	0x20001240

0800ad9c <_exit>:
 800ad9c:	e7fe      	b.n	800ad9c <_exit>
	...

0800ada0 <_init>:
 800ada0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ada2:	bf00      	nop
 800ada4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ada6:	bc08      	pop	{r3}
 800ada8:	469e      	mov	lr, r3
 800adaa:	4770      	bx	lr

0800adac <_fini>:
 800adac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adae:	bf00      	nop
 800adb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adb2:	bc08      	pop	{r3}
 800adb4:	469e      	mov	lr, r3
 800adb6:	4770      	bx	lr
